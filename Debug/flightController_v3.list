
flightController_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016618  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000143fc  080167a8  080167a8  000267a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802aba4  0802aba4  0004007c  2**0
                  CONTENTS
  4 .ARM          00000008  0802aba4  0802aba4  0003aba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802abac  0802abac  0004007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802abac  0802abac  0003abac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802abb4  0802abb4  0003abb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0802abb8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004007c  2**0
                  CONTENTS
 10 .bss          0000d768  2000007c  2000007c  0004007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000d7e4  2000d7e4  0004007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000abf51  00000000  00000000  000400ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000c6ae  00000000  00000000  000ebffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002f38  00000000  00000000  000f86b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002c60  00000000  00000000  000fb5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003058f  00000000  00000000  000fe248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038dd1  00000000  00000000  0012e7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00103a91  00000000  00000000  001675a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c0  00000000  00000000  0026b039  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ec14  00000000  00000000  0026b0fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000070f  00000000  00000000  00279d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016790 	.word	0x08016790

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08016790 	.word	0x08016790

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <_ZN30FlightControllorImplementation18getRollPidInstanceEv>:
{
	return this->nvmInstance;
}

PID_Control& FlightControllorImplementation::getRollPidInstance()
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	return this->roll_pid;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_ZN30FlightControllorImplementation19getPitchPidInstanceEv>:

PID_Control& FlightControllorImplementation::getPitchPidInstance()
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
	return this->pitch_pid;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f603 335c 	addw	r3, r3, #2908	; 0xb5c
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_ZN30FlightControllorImplementation17getYawPidInstanceEv>:

PID_Control& FlightControllorImplementation::getYawPidInstance()
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	return this->yaw_pid;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f603 3388 	addw	r3, r3, #2952	; 0xb88
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <_ZN30FlightControllorImplementation23getXPositionPidInstanceEv>:

PID_Control& FlightControllorImplementation::getXPositionPidInstance()
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
	return this->xPosition_pid;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f603 33b4 	addw	r3, r3, #2996	; 0xbb4
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <_ZN30FlightControllorImplementation23getYPositionPidInstanceEv>:

PID_Control& FlightControllorImplementation::getYPositionPidInstance()
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	return this->yPosition_pid;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>:

LIS3MDLTR& FlightControllorImplementation::getLIS3MDLTRinstance()
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
	return this->lis;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	33a0      	adds	r3, #160	; 0xa0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <_ZN30FlightControllorImplementation17getBuzzerinstanceEv>:

Buzzer& FlightControllorImplementation::getBuzzerinstance()
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
	return this->buzz;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3388      	adds	r3, #136	; 0x88
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <_ZN30FlightControllorImplementation17getBMP390instanceEv>:

BMP390& FlightControllorImplementation::getBMP390instance()
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
	return this->bmp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f503 7388 	add.w	r3, r3, #272	; 0x110
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>:

ICM42688P& FlightControllorImplementation::getICM42688Pinstance()
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	return this->icm;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <_ZN30FlightControllorImplementation15getHC05instanceEv>:

HC05& FlightControllorImplementation::getHC05instance()
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
	return this->bt;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f503 7304 	add.w	r3, r3, #528	; 0x210
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>:

PMW3901UY& FlightControllorImplementation::getPMW3901UYinstance()
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	return this->pmw;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f603 5308 	addw	r3, r3, #3336	; 0xd08
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>:

FrSkyRX& FlightControllorImplementation::getFrSkyRXinstance()
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
	return this->remote_rx;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <_ZN30FlightControllorImplementation17getMB1043instanceEv>:

MB1043& FlightControllorImplementation::getMB1043instance()
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	return this->sonar;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f503 735e 	add.w	r3, r3, #888	; 0x378
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>:

VL53L0X& FlightControllorImplementation::getVL53L0Xinstance()
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
	return this->vl53;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <_ZN30FlightControllorImplementation28getBatteryManagementinstanceEv>:

BatteryManagement& FlightControllorImplementation::getBatteryManagementinstance()
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	return this->battMgmt;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f603 3308 	addw	r3, r3, #2824	; 0xb08
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_ZN30FlightControllorImplementation24getFaultsCheckHandlerPtrEv>:

TaskHandle_t* FlightControllorImplementation::getFaultsCheckHandlerPtr()
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	return &this->_faultsCheckHandler;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f603 53b4 	addw	r3, r3, #3508	; 0xdb4
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>:

TaskHandle_t* FlightControllorImplementation::getSensorsDataReadHandlerPtr()
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	return &this->_sensorsDataReadHandler;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f603 53b8 	addw	r3, r3, #3512	; 0xdb8
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_ZN30FlightControllorImplementation28getDynamicsProcessHandlerPtrEv>:

TaskHandle_t* FlightControllorImplementation::getDynamicsProcessHandlerPtr()
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
	return &this->_dynamicsProcessHandler;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f603 53bc 	addw	r3, r3, #3516	; 0xdbc
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>:

FaultsStatus FlightControllorImplementation::getCurrentFaultsStatus() const
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	return this->_currentFaultsStatus;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f8d3 3db0 	ldr.w	r3, [r3, #3504]	; 0xdb0
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>:

void FlightControllorImplementation::setCurrentFaultsStatus(FaultsStatus faultsStatus)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	6039      	str	r1, [r7, #0]
	this->_currentFaultsStatus = faultsStatus;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	f8c3 2db0 	str.w	r2, [r3, #3504]	; 0xdb0
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <_ZN6BuzzerC1Ev>:

	void Buzz_on();
	void Buzz_off();
	uint16_t msToTick(uint16_t ms);
public:
	Buzzer():
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
		freqTick {0U}
		,pauseTick {0U}
		,counterStart {0U}
		,counterEnd {0U}
		,repetitions {0U}
		,busy {false}
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2210      	movs	r2, #16
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <_ZN6BuzzerC1Ev+0x50>)
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	819a      	strh	r2, [r3, #12]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	81da      	strh	r2, [r3, #14]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	821a      	strh	r2, [r3, #16]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	825a      	strh	r2, [r3, #18]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	829a      	strh	r2, [r3, #20]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	759a      	strb	r2, [r3, #22]
	{
	}
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40020000 	.word	0x40020000

08001108 <_ZN11PID_ControlC1ERfS0_fff>:
	float pid_p = 0;
	float pid_i = 0;
	float pid_d = 0;
	float pid = 0;
public:
	PID_Control(float &signal, float &reference,float Kp,float Ki,float Kd):
 8001108:	b480      	push	{r7}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6178      	str	r0, [r7, #20]
 8001110:	6139      	str	r1, [r7, #16]
 8001112:	60fa      	str	r2, [r7, #12]
 8001114:	ed87 0a02 	vstr	s0, [r7, #8]
 8001118:	edc7 0a01 	vstr	s1, [r7, #4]
 800111c:	ed87 1a00 	vstr	s2, [r7]
	,error {0.0F}
	,last_signal {0.0F}
	,pid_p {0.0F}
	,pid_i {0.0F}
	,pid_d {0.0F}
	,pid {0.0F}
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	611a      	str	r2, [r3, #16]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	629a      	str	r2, [r3, #40]	; 0x28
	{
		last_signal = signal;
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	619a      	str	r2, [r3, #24]
	};
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	4618      	mov	r0, r3
 800117a:	371c      	adds	r7, #28
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <_ZN17BatteryManagementC1EP17ADC_HandleTypeDefP6Buzzert>:
	float batteryVoltage;

	uint16_t msToTick(uint16_t ms);
	void toPercentage();
public:
	BatteryManagement(ADC_HandleTypeDef *adc_port,Buzzer *buzz,uint16_t frequency_ms):
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	807b      	strh	r3, [r7, #2]
		,buzz(buzz)
		,frequency_tick{0}
		,tick_counter{0}
		,batteryVal{0}
		,batteryPercentage{0}
		,batteryVoltage{0}
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f640 3222 	movw	r2, #2850	; 0xb22
 8001198:	801a      	strh	r2, [r3, #0]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80011a0:	805a      	strh	r2, [r3, #2]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80011a8:	809a      	strh	r2, [r3, #4]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	611a      	str	r2, [r3, #16]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2200      	movs	r2, #0
 80011c2:	829a      	strh	r2, [r3, #20]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2200      	movs	r2, #0
 80011ce:	61da      	str	r2, [r3, #28]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
	{
		frequency_tick = msToTick(frequency_ms);
 80011e0:	887b      	ldrh	r3, [r7, #2]
 80011e2:	4619      	mov	r1, r3
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f003 ffb7 	bl	8005158 <_ZN17BatteryManagement8msToTickEt>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	829a      	strh	r2, [r3, #20]
	}
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <_ZN16FlashMemoryBlockC1Em>:
};

class FlashMemoryBlock
{
public:
	FlashMemoryBlock(uint32_t address):
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
		PID_PITCH_I{address},
		PID_PITCH_D{address},
		PID_YAW_P{address},
		PID_YAW_I{address},
		PID_YAW_D{address},
		address{address}
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	463a      	mov	r2, r7
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f000 faa5 	bl	800175c <_ZN10memoryDataI6intObjEC1ERm>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3308      	adds	r3, #8
 8001216:	463a      	mov	r2, r7
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fa9e 	bl	800175c <_ZN10memoryDataI6intObjEC1ERm>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3310      	adds	r3, #16
 8001224:	463a      	mov	r2, r7
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f000 faac 	bl	8001786 <_ZN10memoryDataI8floatObjEC1ERm>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3318      	adds	r3, #24
 8001232:	463a      	mov	r2, r7
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f000 faa5 	bl	8001786 <_ZN10memoryDataI8floatObjEC1ERm>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3320      	adds	r3, #32
 8001240:	463a      	mov	r2, r7
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fa9e 	bl	8001786 <_ZN10memoryDataI8floatObjEC1ERm>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3328      	adds	r3, #40	; 0x28
 800124e:	463a      	mov	r2, r7
 8001250:	4611      	mov	r1, r2
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fa97 	bl	8001786 <_ZN10memoryDataI8floatObjEC1ERm>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3330      	adds	r3, #48	; 0x30
 800125c:	463a      	mov	r2, r7
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fa90 	bl	8001786 <_ZN10memoryDataI8floatObjEC1ERm>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3338      	adds	r3, #56	; 0x38
 800126a:	463a      	mov	r2, r7
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fa89 	bl	8001786 <_ZN10memoryDataI8floatObjEC1ERm>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3340      	adds	r3, #64	; 0x40
 8001278:	463a      	mov	r2, r7
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f000 fa82 	bl	8001786 <_ZN10memoryDataI8floatObjEC1ERm>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3348      	adds	r3, #72	; 0x48
 8001286:	463a      	mov	r2, r7
 8001288:	4611      	mov	r1, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fa7b 	bl	8001786 <_ZN10memoryDataI8floatObjEC1ERm>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3350      	adds	r3, #80	; 0x50
 8001294:	463a      	mov	r2, r7
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f000 fa74 	bl	8001786 <_ZN10memoryDataI8floatObjEC1ERm>
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	659a      	str	r2, [r3, #88]	; 0x58
	{

	}
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_ZN12IOManagement16writeMemoryBlockE16FlashMemoryBlock>:
};

class IOManagement
{
public:
	void writeMemoryBlock(FlashMemoryBlock memBlock)
 80012ae:	b084      	sub	sp, #16
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	f107 0014 	add.w	r0, r7, #20
 80012bc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	{
		//massEraseSector(memBlock.address);

		memBlock.firstBoot.updateToMemory();
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 fa73 	bl	80017b0 <_ZN10memoryDataI6intObjE14updateToMemoryEv>
		memBlock.flashReadWriteError.updateToMemory();
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	3308      	adds	r3, #8
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fa6d 	bl	80017b0 <_ZN10memoryDataI6intObjE14updateToMemoryEv>
		memBlock.PID_ROLL_P.updateToMemory();
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	3310      	adds	r3, #16
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fa76 	bl	80017ce <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_ROLL_I.updateToMemory();
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	3318      	adds	r3, #24
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fa70 	bl	80017ce <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_ROLL_D.updateToMemory();
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	3320      	adds	r3, #32
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 fa6a 	bl	80017ce <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_PITCH_P.updateToMemory();
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	3328      	adds	r3, #40	; 0x28
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fa64 	bl	80017ce <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_PITCH_I.updateToMemory();
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	3330      	adds	r3, #48	; 0x30
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fa5e 	bl	80017ce <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_PITCH_D.updateToMemory();
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	3338      	adds	r3, #56	; 0x38
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fa58 	bl	80017ce <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_YAW_P.updateToMemory();
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	3340      	adds	r3, #64	; 0x40
 8001324:	4618      	mov	r0, r3
 8001326:	f000 fa52 	bl	80017ce <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_YAW_I.updateToMemory();
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	3348      	adds	r3, #72	; 0x48
 8001330:	4618      	mov	r0, r3
 8001332:	f000 fa4c 	bl	80017ce <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_YAW_D.updateToMemory();
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	3350      	adds	r3, #80	; 0x50
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fa46 	bl	80017ce <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
	}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800134c:	b004      	add	sp, #16
 800134e:	4770      	bx	lr

08001350 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock>:
		to.PID_YAW_P.setValue(from.PID_YAW_P.getValue());
		to.PID_YAW_I.setValue(from.PID_YAW_I.getValue());
		to.PID_YAW_D.setValue(from.PID_YAW_D.getValue());
	}

	void resetMemoryBlock(FlashMemoryBlock& memBlock)
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
	{
		memBlock.firstBoot.setValue(1U);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	2101      	movs	r1, #1
 800135e:	4618      	mov	r0, r3
 8001360:	f000 fa50 	bl	8001804 <_ZN10memoryDataI6intObjE8setValueEi>
		memBlock.flashReadWriteError.setValue(0U);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	3308      	adds	r3, #8
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fa4a 	bl	8001804 <_ZN10memoryDataI6intObjE8setValueEi>
		memBlock.PID_ROLL_P.setValue(0U);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	3310      	adds	r3, #16
 8001374:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80013f8 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fa51 	bl	8001820 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_ROLL_I.setValue(0U);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	3318      	adds	r3, #24
 8001382:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80013f8 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fa4a 	bl	8001820 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_ROLL_D.setValue(0U);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	3320      	adds	r3, #32
 8001390:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80013f8 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 8001394:	4618      	mov	r0, r3
 8001396:	f000 fa43 	bl	8001820 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_PITCH_P.setValue(0U);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	3328      	adds	r3, #40	; 0x28
 800139e:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80013f8 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fa3c 	bl	8001820 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_PITCH_I.setValue(0U);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	3330      	adds	r3, #48	; 0x30
 80013ac:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80013f8 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fa35 	bl	8001820 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_PITCH_D.setValue(0U);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	3338      	adds	r3, #56	; 0x38
 80013ba:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80013f8 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fa2e 	bl	8001820 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_YAW_P.setValue(0U);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	3340      	adds	r3, #64	; 0x40
 80013c8:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80013f8 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fa27 	bl	8001820 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_YAW_I.setValue(0U);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	3348      	adds	r3, #72	; 0x48
 80013d6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80013f8 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fa20 	bl	8001820 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_YAW_D.setValue(0U);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	3350      	adds	r3, #80	; 0x50
 80013e4:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80013f8 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fa19 	bl	8001820 <_ZN10memoryDataI8floatObjE8setValueEf>
	}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	00000000 	.word	0x00000000

080013fc <_ZN12IOManagement17updateMemoryBlockER16FlashMemoryBlock>:

	void updateMemoryBlock(FlashMemoryBlock& memBlock)
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	{
		memBlock.firstBoot.updateFromMemory();
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f000 fa18 	bl	800183e <_ZN10memoryDataI6intObjE16updateFromMemoryEv>
		memBlock.flashReadWriteError.updateFromMemory();
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	3308      	adds	r3, #8
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fa13 	bl	800183e <_ZN10memoryDataI6intObjE16updateFromMemoryEv>
		memBlock.PID_ROLL_P.updateFromMemory();
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	3310      	adds	r3, #16
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fa1f 	bl	8001860 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_ROLL_I.updateFromMemory();
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	3318      	adds	r3, #24
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fa1a 	bl	8001860 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_ROLL_D.updateFromMemory();
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3320      	adds	r3, #32
 8001430:	4618      	mov	r0, r3
 8001432:	f000 fa15 	bl	8001860 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_PITCH_P.updateFromMemory();
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	3328      	adds	r3, #40	; 0x28
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fa10 	bl	8001860 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_PITCH_I.updateFromMemory();
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	3330      	adds	r3, #48	; 0x30
 8001444:	4618      	mov	r0, r3
 8001446:	f000 fa0b 	bl	8001860 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_PITCH_D.updateFromMemory();
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	3338      	adds	r3, #56	; 0x38
 800144e:	4618      	mov	r0, r3
 8001450:	f000 fa06 	bl	8001860 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_YAW_P.updateFromMemory();
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	3340      	adds	r3, #64	; 0x40
 8001458:	4618      	mov	r0, r3
 800145a:	f000 fa01 	bl	8001860 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_YAW_I.updateFromMemory();
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	3348      	adds	r3, #72	; 0x48
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f9fc 	bl	8001860 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_YAW_D.updateFromMemory();
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	3350      	adds	r3, #80	; 0x50
 800146c:	4618      	mov	r0, r3
 800146e:	f000 f9f7 	bl	8001860 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
	}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <_ZN16MemoryManagementC1Em>:
};

class MemoryManagement: public IOManagement
{
public:
	MemoryManagement(uint32_t mainMemoryAddress):
 800147a:	b590      	push	{r4, r7, lr}
 800147c:	b097      	sub	sp, #92	; 0x5c
 800147e:	af14      	add	r7, sp, #80	; 0x50
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
		mainMemoryBlock{mainMemoryAddress}
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6839      	ldr	r1, [r7, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff feb7 	bl	80011fc <_ZN16FlashMemoryBlockC1Em>
	{
		this->updateMemoryBlock(this->mainMemoryBlock);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4619      	mov	r1, r3
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffb2 	bl	80013fc <_ZN12IOManagement17updateMemoryBlockER16FlashMemoryBlock>

		if (this->mainMemoryBlock.firstBoot.getValue()!=1U)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f9a6 	bl	80017ec <_ZN10memoryDataI6intObjE8getValueEv>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	bf14      	ite	ne
 80014a6:	2301      	movne	r3, #1
 80014a8:	2300      	moveq	r3, #0
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d011      	beq.n	80014d4 <_ZN16MemoryManagementC1Em+0x5a>
		{
			resetMemoryBlock(this->mainMemoryBlock);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4619      	mov	r1, r3
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff4b 	bl	8001350 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock>
			writeMemoryBlock(this->mainMemoryBlock);
 80014ba:	687c      	ldr	r4, [r7, #4]
 80014bc:	4668      	mov	r0, sp
 80014be:	f104 030c 	add.w	r3, r4, #12
 80014c2:	2250      	movs	r2, #80	; 0x50
 80014c4:	4619      	mov	r1, r3
 80014c6:	f014 ff55 	bl	8016374 <memcpy>
 80014ca:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff feed 	bl	80012ae <_ZN12IOManagement16writeMemoryBlockE16FlashMemoryBlock>
		}
	}
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd90      	pop	{r4, r7, pc}
	...

080014e0 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_>:
	TaskHandle_t _sensorsDataReadHandler = NULL;
	TaskHandle_t _dynamicsProcessHandler = NULL;
public:
	float zeroRef = 0.0F;

	FlightControllorImplementation (
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af04      	add	r7, sp, #16
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	603b      	str	r3, [r7, #0]
	  yaw_pid(icm.getEulerZref(),zeroRef,10,0,0),
	  xPosition_pid(pmw.getXpos(),remote_rx.target_roll,0.5F,0,100),
	  yPosition_pid(pmw.getYpos(),remote_rx.target_pitch,0.5F,0,100),
	  icm (hspi2,&buzz,roll_pid,pitch_pid,yaw_pid),
	  pmw (huart2, hdma_usart2_rx, 255U, icm, vl53,xPosition_pid,yPosition_pid),
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6a3a      	ldr	r2, [r7, #32]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001510:	615a      	str	r2, [r3, #20]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001516:	619a      	str	r2, [r3, #24]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800151c:	61da      	str	r2, [r3, #28]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001522:	621a      	str	r2, [r3, #32]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	332c      	adds	r3, #44	; 0x2c
 8001534:	497f      	ldr	r1, [pc, #508]	; (8001734 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x254>)
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff9f 	bl	800147a <_ZN16MemoryManagementC1Em>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3388      	adds	r3, #136	; 0x88
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fdb7 	bl	80010b4 <_ZN6BuzzerC1Ev>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	33a0      	adds	r3, #160	; 0xa0
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	4618      	mov	r0, r3
 800154e:	f006 fd75 	bl	800803c <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fc9a 	bl	8003e94 <_ZN6BMP390C1EP19__SPI_HandleTypeDef>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001566:	6839      	ldr	r1, [r7, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f004 fc16 	bl	8005d9a <_ZN4HC05C1EP20__UART_HandleTypeDef>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3388      	adds	r3, #136	; 0x88
 8001578:	2201      	movs	r2, #1
 800157a:	9200      	str	r2, [sp, #0]
 800157c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800157e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001580:	f003 ff0e 	bl	80053a0 <_ZN7FrSkyRXC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefP6Buzzerh>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f503 705e 	add.w	r0, r3, #888	; 0x378
 800158a:	23ff      	movs	r3, #255	; 0xff
 800158c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800158e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001590:	f006 ffa4 	bl	80084dc <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f503 707a 	add.w	r0, r3, #1000	; 0x3e8
 800159a:	23ff      	movs	r3, #255	; 0xff
 800159c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800159e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015a0:	f007 fd9a 	bl	80090d8 <_ZN7VL53L0XC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f603 3008 	addw	r0, r3, #2824	; 0xb08
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f103 0288 	add.w	r2, r3, #136	; 0x88
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	f7ff fde5 	bl	8001184 <_ZN17BatteryManagementC1EP17ADC_HandleTypeDefP6Buzzert>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f503 6433 	add.w	r4, r3, #2864	; 0xb30
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 80015c6:	4618      	mov	r0, r3
 80015c8:	f006 fcc8 	bl	8007f5c <_ZN9ICM42688P12getEulerYrefEv>
 80015cc:	4601      	mov	r1, r0
	  roll_pid(icm.getEulerYref(),zeroRef,6,0,5000),
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 80015d4:	ed9f 1a58 	vldr	s2, [pc, #352]	; 8001738 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x258>
 80015d8:	eddf 0a58 	vldr	s1, [pc, #352]	; 800173c <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 80015dc:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80015e0:	461a      	mov	r2, r3
 80015e2:	4620      	mov	r0, r4
 80015e4:	f7ff fd90 	bl	8001108 <_ZN11PID_ControlC1ERfS0_fff>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f603 345c 	addw	r4, r3, #2908	; 0xb5c
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 80015f4:	4618      	mov	r0, r3
 80015f6:	f006 fc95 	bl	8007f24 <_ZN9ICM42688P12getEulerXrefEv>
 80015fa:	4601      	mov	r1, r0
	  pitch_pid(icm.getEulerXref(),zeroRef,6,0,5000),
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 8001602:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8001738 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x258>
 8001606:	eddf 0a4d 	vldr	s1, [pc, #308]	; 800173c <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 800160a:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800160e:	461a      	mov	r2, r3
 8001610:	4620      	mov	r0, r4
 8001612:	f7ff fd79 	bl	8001108 <_ZN11PID_ControlC1ERfS0_fff>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f603 3488 	addw	r4, r3, #2952	; 0xb88
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 8001622:	4618      	mov	r0, r3
 8001624:	f006 fca6 	bl	8007f74 <_ZN9ICM42688P12getEulerZrefEv>
 8001628:	4601      	mov	r1, r0
	  yaw_pid(icm.getEulerZref(),zeroRef,10,0,0),
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 8001630:	ed9f 1a42 	vldr	s2, [pc, #264]	; 800173c <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 8001634:	eddf 0a41 	vldr	s1, [pc, #260]	; 800173c <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 8001638:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800163c:	461a      	mov	r2, r3
 800163e:	4620      	mov	r0, r4
 8001640:	f7ff fd62 	bl	8001108 <_ZN11PID_ControlC1ERfS0_fff>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f603 34b4 	addw	r4, r3, #2996	; 0xbb4
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 8001650:	4618      	mov	r0, r3
 8001652:	f007 fb49 	bl	8008ce8 <_ZN9PMW3901UY7getXposEv>
 8001656:	4601      	mov	r1, r0
	  xPosition_pid(pmw.getXpos(),remote_rx.target_roll,0.5F,0,100),
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f503 7357 	add.w	r3, r3, #860	; 0x35c
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 800165e:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8001740 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x260>
 8001662:	eddf 0a36 	vldr	s1, [pc, #216]	; 800173c <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 8001666:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800166a:	461a      	mov	r2, r3
 800166c:	4620      	mov	r0, r4
 800166e:	f7ff fd4b 	bl	8001108 <_ZN11PID_ControlC1ERfS0_fff>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f503 643e 	add.w	r4, r3, #3040	; 0xbe0
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 800167e:	4618      	mov	r0, r3
 8001680:	f007 fb3e 	bl	8008d00 <_ZN9PMW3901UY7getYposEv>
 8001684:	4601      	mov	r1, r0
	  yPosition_pid(pmw.getYpos(),remote_rx.target_pitch,0.5F,0,100),
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f503 7358 	add.w	r3, r3, #864	; 0x360
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 800168c:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8001740 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x260>
 8001690:	eddf 0a2a 	vldr	s1, [pc, #168]	; 800173c <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 8001694:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001698:	461a      	mov	r2, r3
 800169a:	4620      	mov	r0, r4
 800169c:	f7ff fd34 	bl	8001108 <_ZN11PID_ControlC1ERfS0_fff>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f503 6041 	add.w	r0, r3, #3088	; 0xc10
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f103 0188 	add.w	r1, r3, #136	; 0x88
	  icm (hspi2,&buzz,roll_pid,pitch_pid,yaw_pid),
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f503 6433 	add.w	r4, r3, #2864	; 0xb30
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f603 335c 	addw	r3, r3, #2908	; 0xb5c
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	f602 3288 	addw	r2, r2, #2952	; 0xb88
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 80016be:	9201      	str	r2, [sp, #4]
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	4623      	mov	r3, r4
 80016c4:	460a      	mov	r2, r1
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	f005 fc70 	bl	8006fac <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f603 5408 	addw	r4, r3, #3336	; 0xd08
	  pmw (huart2, hdma_usart2_rx, 255U, icm, vl53,xPosition_pid,yPosition_pid),
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 80016de:	68f9      	ldr	r1, [r7, #12]
 80016e0:	f601 31b4 	addw	r1, r1, #2996	; 0xbb4
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f500 603e 	add.w	r0, r0, #3040	; 0xbe0
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 80016ea:	9003      	str	r0, [sp, #12]
 80016ec:	9102      	str	r1, [sp, #8]
 80016ee:	9201      	str	r2, [sp, #4]
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	23ff      	movs	r3, #255	; 0xff
 80016f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016f6:	6a39      	ldr	r1, [r7, #32]
 80016f8:	4620      	mov	r0, r4
 80016fa:	f007 f821 	bl	8008740 <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688PR7VL53L0XR11PID_ControlS9_>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2201      	movs	r2, #1
 8001702:	f8c3 2db0 	str.w	r2, [r3, #3504]	; 0xdb0
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f8c3 2db4 	str.w	r2, [r3, #3508]	; 0xdb4
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	f8c3 2db8 	str.w	r2, [r3, #3512]	; 0xdb8
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	f8c3 2dbc 	str.w	r2, [r3, #3516]	; 0xdbc
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
	{

	}
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	bd90      	pop	{r4, r7, pc}
 8001734:	080e0000 	.word	0x080e0000
 8001738:	459c4000 	.word	0x459c4000
 800173c:	00000000 	.word	0x00000000
 8001740:	42c80000 	.word	0x42c80000

08001744 <_ZN30FlightControllorImplementation11getInstanceEv>:
		&hdma_usart3_rx,
		&hdma_uart4_rx,
		&hdma_usart6_rx);

FlightControllorImplementation *FlightControllorImplementation::getInstance()
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
	return globalflightController;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <_ZN30FlightControllorImplementation11getInstanceEv+0x14>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000098 	.word	0x20000098

0800175c <_ZN10memoryDataI6intObjEC1ERm>:
	memoryData(uint32_t& addr)
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
		this->address = addr;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	605a      	str	r2, [r3, #4]
		addr+=dataSize;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	1d1a      	adds	r2, r3, #4
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	601a      	str	r2, [r3, #0]
	}
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <_ZN10memoryDataI8floatObjEC1ERm>:
	memoryData(uint32_t& addr)
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
		this->address = addr;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	605a      	str	r2, [r3, #4]
		addr+=dataSize;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	1d1a      	adds	r2, r3, #4
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	601a      	str	r2, [r3, #0]
	}
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_ZN10memoryDataI6intObjE14updateToMemoryEv>:
	void updateToMemory()
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
		writeMemoryAddress<unionType>(this->address,this->data);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6819      	ldr	r1, [r3, #0]
 80017c0:	4610      	mov	r0, r2
 80017c2:	f000 f862 	bl	800188a <_Z18writeMemoryAddressI6intObjEmmT_>
	}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_ZN10memoryDataI8floatObjE14updateToMemoryEv>:
	void updateToMemory()
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
		writeMemoryAddress<unionType>(this->address,this->data);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6819      	ldr	r1, [r3, #0]
 80017de:	4610      	mov	r0, r2
 80017e0:	f000 f877 	bl	80018d2 <_Z18writeMemoryAddressI8floatObjEmmT_>
	}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_ZN10memoryDataI6intObjE8getValueEv>:
	Type getValue()
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
		return this->data.value;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
	}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <_ZN10memoryDataI6intObjE8setValueEi>:
	void setValue(Type value)
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
		this->data.value = value;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	601a      	str	r2, [r3, #0]
	}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_ZN10memoryDataI8floatObjE8setValueEf>:
	void setValue(Type value)
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	ed87 0a00 	vstr	s0, [r7]
		this->data.value = value;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	601a      	str	r2, [r3, #0]
	}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <_ZN10memoryDataI6intObjE16updateFromMemoryEv>:
	void updateFromMemory()
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
		this->data.bytes = readMemoryAddress<Type>(this->address);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f865 	bl	800191a <_Z17readMemoryAddressIiET_m>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	601a      	str	r2, [r3, #0]
	}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>:
	void updateFromMemory()
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
		this->data.bytes = readMemoryAddress<Type>(this->address);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4618      	mov	r0, r3
 800186e:	f000 f860 	bl	8001932 <_Z17readMemoryAddressIfET_m>
 8001872:	eef0 7a40 	vmov.f32	s15, s0
 8001876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800187a:	ee17 2a90 	vmov	r2, s15
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	601a      	str	r2, [r3, #0]
	}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <_Z18writeMemoryAddressI6intObjEmmT_>:
{
	return static_cast<Type>(*(__IO uint32_t *)addr);
}

template <typename Type>
inline uint32_t writeMemoryAddress(uint32_t address,Type memoryData)
 800188a:	b5b0      	push	{r4, r5, r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
{
	HAL_FLASH_Unlock();
 8001894:	f008 ffa8 	bl	800a7e8 <HAL_FLASH_Unlock>

    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, memoryData.bytes) != HAL_OK)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	2200      	movs	r2, #0
 800189c:	461c      	mov	r4, r3
 800189e:	4615      	mov	r5, r2
 80018a0:	4622      	mov	r2, r4
 80018a2:	462b      	mov	r3, r5
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	2002      	movs	r0, #2
 80018a8:	f008 ff4a 	bl	800a740 <HAL_FLASH_Program>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	bf14      	ite	ne
 80018b2:	2301      	movne	r3, #1
 80018b4:	2300      	moveq	r3, #0
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <_Z18writeMemoryAddressI6intObjEmmT_+0x3a>
    {
    	return HAL_FLASH_GetError ();
 80018bc:	f008 ffc6 	bl	800a84c <HAL_FLASH_GetError>
 80018c0:	4603      	mov	r3, r0
 80018c2:	e002      	b.n	80018ca <_Z18writeMemoryAddressI6intObjEmmT_+0x40>
    }

	HAL_FLASH_Lock();
 80018c4:	f008 ffb2 	bl	800a82c <HAL_FLASH_Lock>

	return 0;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bdb0      	pop	{r4, r5, r7, pc}

080018d2 <_Z18writeMemoryAddressI8floatObjEmmT_>:
inline uint32_t writeMemoryAddress(uint32_t address,Type memoryData)
 80018d2:	b5b0      	push	{r4, r5, r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 80018dc:	f008 ff84 	bl	800a7e8 <HAL_FLASH_Unlock>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, memoryData.bytes) != HAL_OK)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	2200      	movs	r2, #0
 80018e4:	461c      	mov	r4, r3
 80018e6:	4615      	mov	r5, r2
 80018e8:	4622      	mov	r2, r4
 80018ea:	462b      	mov	r3, r5
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	2002      	movs	r0, #2
 80018f0:	f008 ff26 	bl	800a740 <HAL_FLASH_Program>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	bf14      	ite	ne
 80018fa:	2301      	movne	r3, #1
 80018fc:	2300      	moveq	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <_Z18writeMemoryAddressI8floatObjEmmT_+0x3a>
    	return HAL_FLASH_GetError ();
 8001904:	f008 ffa2 	bl	800a84c <HAL_FLASH_GetError>
 8001908:	4603      	mov	r3, r0
 800190a:	e002      	b.n	8001912 <_Z18writeMemoryAddressI8floatObjEmmT_+0x40>
	HAL_FLASH_Lock();
 800190c:	f008 ff8e 	bl	800a82c <HAL_FLASH_Lock>
	return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bdb0      	pop	{r4, r5, r7, pc}

0800191a <_Z17readMemoryAddressIiET_m>:
inline Type readMemoryAddress(const uint32_t addr)
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
	return static_cast<Type>(*(__IO uint32_t *)addr);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_Z17readMemoryAddressIfET_m>:
inline Type readMemoryAddress(const uint32_t addr)
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
	return static_cast<Type>(*(__IO uint32_t *)addr);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	ee07 3a90 	vmov	s15, r3
 8001942:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8001946:	eeb0 0a67 	vmov.f32	s0, s15
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_Z41__static_initialization_and_destruction_0ii>:
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b08b      	sub	sp, #44	; 0x2c
 8001958:	af08      	add	r7, sp, #32
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d122      	bne.n	80019aa <_Z41__static_initialization_and_destruction_0ii+0x56>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800196a:	4293      	cmp	r3, r2
 800196c:	d11d      	bne.n	80019aa <_Z41__static_initialization_and_destruction_0ii+0x56>
		&hdma_usart6_rx);
 800196e:	f640 50c8 	movw	r0, #3528	; 0xdc8
 8001972:	f013 fabf 	bl	8014ef4 <_Znwj>
 8001976:	4603      	mov	r3, r0
 8001978:	461c      	mov	r4, r3
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800197c:	9307      	str	r3, [sp, #28]
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001980:	9306      	str	r3, [sp, #24]
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001984:	9305      	str	r3, [sp, #20]
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001988:	9304      	str	r3, [sp, #16]
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800198c:	9303      	str	r3, [sp, #12]
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001990:	9302      	str	r3, [sp, #8]
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800199c:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800199e:	490f      	ldr	r1, [pc, #60]	; (80019dc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80019a0:	4620      	mov	r0, r4
 80019a2:	f7ff fd9d 	bl	80014e0 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_>
static FlightControllorImplementation *globalflightController = new FlightControllorImplementation(
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80019a8:	601c      	str	r4, [r3, #0]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd90      	pop	{r4, r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000089c 	.word	0x2000089c
 80019b8:	2000071c 	.word	0x2000071c
 80019bc:	2000083c 	.word	0x2000083c
 80019c0:	200007dc 	.word	0x200007dc
 80019c4:	200006d8 	.word	0x200006d8
 80019c8:	200005c8 	.word	0x200005c8
 80019cc:	20000694 	.word	0x20000694
 80019d0:	20000650 	.word	0x20000650
 80019d4:	2000060c 	.word	0x2000060c
 80019d8:	20000420 	.word	0x20000420
 80019dc:	200002f4 	.word	0x200002f4
 80019e0:	20000098 	.word	0x20000098

080019e4 <_GLOBAL__sub_I__ZN30FlightControllorImplementation11getInstanceEv>:
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019ec:	2001      	movs	r0, #1
 80019ee:	f7ff ffb1 	bl	8001954 <_Z41__static_initialization_and_destruction_0ii>
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <vApplicationGetIdleTaskMemory+0x30>)
 8001a0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	2000009c 	.word	0x2000009c
 8001a24:	200000f0 	.word	0x200000f0

08001a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a44:	4013      	ands	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	60d3      	str	r3, [r2, #12]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <_ZN12CallsCounter25incrementInterruptCounterEv>:
};

class CallsCounter
{
public:
	void incrementInterruptCounter()
 8001a70:	b4b0      	push	{r4, r5, r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	{
		this->interruptCounter++;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7e:	1c54      	adds	r4, r2, #1
 8001a80:	f143 0500 	adc.w	r5, r3, #0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	e9c3 4500 	strd	r4, r5, [r3]
	}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bcb0      	pop	{r4, r5, r7}
 8001a92:	4770      	bx	lr

08001a94 <_ZN12CallsCounter20incrementTaskCounterEv>:

	void incrementTaskCounter()
 8001a94:	b4b0      	push	{r4, r5, r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	{
		this->taskCounter++;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001aa2:	1c54      	adds	r4, r2, #1
 8001aa4:	f143 0500 	adc.w	r5, r3, #0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	e9c3 4502 	strd	r4, r5, [r3, #8]
	}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bcb0      	pop	{r4, r5, r7}
 8001ab6:	4770      	bx	lr

08001ab8 <_ZN7Timeout23incrementTimeoutCounterEv>:
	void resetTimeoutCounter()
	{
		timeout_counter=0;
	}

	void incrementTimeoutCounter()
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	{
		timeout_counter++;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	785b      	ldrb	r3, [r3, #1]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	705a      	strb	r2, [r3, #1]

		if (timeout_counter>timeout_value)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	785a      	ldrb	r2, [r3, #1]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	789b      	ldrb	r3, [r3, #2]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d902      	bls.n	8001ade <_ZN7Timeout23incrementTimeoutCounterEv+0x26>
			status = Status::Timeout;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
	}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation>:
namespace drone
{
	namespace failsafe
	{
		inline void slowlyLanding(FlightControllorImplementation& flightControllerInstance)
		{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
			static float failSafeDownStartingThrottleValue = constFailSafeDownStartingThrottleValue;

			flightControllerInstance.getFrSkyRXinstance().getThrottle() = failSafeDownStartingThrottleValue;
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff fa66 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f004 f8c3 	bl	8005c88 <_ZN7FrSkyRX11getThrottleEv>
 8001b02:	4602      	mov	r2, r0
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x80>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6013      	str	r3, [r2, #0]
			flightControllerInstance.getFrSkyRXinstance().getTargetRoll() = 0.0F;
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fa5b 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f004 f8c4 	bl	8005ca0 <_ZN7FrSkyRX13getTargetRollEv>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
			flightControllerInstance.getFrSkyRXinstance().getTargetPitch() = 0.0F;
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff fa50 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f004 f8c5 	bl	8005cb8 <_ZN7FrSkyRX14getTargetPitchEv>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]

			failSafeDownStartingThrottleValue -= 0.1F;
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x80>)
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001b70 <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x84>
 8001b40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b44:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x80>)
 8001b46:	edc3 7a00 	vstr	s15, [r3]

			if (failSafeDownStartingThrottleValue <= 0.0F)
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x80>)
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b58:	d900      	bls.n	8001b5c <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x70>
			{
				flightControllerInstance.setCurrentFaultsStatus(FaultsStatus::CRITICAL);
			}
		}
 8001b5a:	e003      	b.n	8001b64 <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x78>
				flightControllerInstance.setCurrentFaultsStatus(FaultsStatus::CRITICAL);
 8001b5c:	2103      	movs	r1, #3
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fa99 	bl	8001096 <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>
		}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	3dcccccd 	.word	0x3dcccccd

08001b74 <_ZN5drone8failsafe12quickLandingER30FlightControllorImplementation>:

		inline void quickLanding(FlightControllorImplementation& flightControllerInstance)
		{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
			flightControllerInstance.getFrSkyRXinstance().getThrottle() = 0.0F;
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff fa22 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f004 f87f 	bl	8005c88 <_ZN7FrSkyRX11getThrottleEv>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
			flightControllerInstance.getFrSkyRXinstance().getTargetRoll() = 0.0F;
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fa17 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f004 f880 	bl	8005ca0 <_ZN7FrSkyRX13getTargetRollEv>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
			flightControllerInstance.getFrSkyRXinstance().getTargetPitch() = 0.0F;
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff fa0c 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f004 f881 	bl	8005cb8 <_ZN7FrSkyRX14getTargetPitchEv>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
		}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <_Z19DynamicsProcessTaskPv>:
#include "failsafe_functions.hpp"

float testttt = 0;

void DynamicsProcessTask(void *pvParameters)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b090      	sub	sp, #64	; 0x40
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8001bd0:	f7ff fdb8 	bl	8001744 <_ZN30FlightControllorImplementation11getInstanceEv>
 8001bd4:	62f8      	str	r0, [r7, #44]	; 0x2c

	const TickType_t xFrequency = 1;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	62bb      	str	r3, [r7, #40]	; 0x28
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001bda:	f011 fe91 	bl	8013900 <xTaskGetTickCount>
 8001bde:	4603      	mov	r3, r0
 8001be0:	60bb      	str	r3, [r7, #8]

	for( ;; )
	{
		FaultsStatus currentFaultsStatus = flightControllerInstance->getCurrentFaultsStatus();
 8001be2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001be4:	f7ff fa4a 	bl	800107c <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>
 8001be8:	6278      	str	r0, [r7, #36]	; 0x24

		if (currentFaultsStatus != FaultsStatus::NOT_READY)
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	f000 815b 	beq.w	8001ea8 <_Z19DynamicsProcessTaskPv+0x2e0>
		{
			float rollPidOutput = flightControllerInstance->getRollPidInstance().getOut();
 8001bf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bf4:	f7ff f95a 	bl	8000eac <_ZN30FlightControllorImplementation18getRollPidInstanceEv>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f007 f8e4 	bl	8008dc8 <_ZN11PID_Control6getOutEv>
 8001c00:	ed87 0a08 	vstr	s0, [r7, #32]
			float pitchPidOutput = flightControllerInstance->getPitchPidInstance().getOut();
 8001c04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c06:	f7ff f95e 	bl	8000ec6 <_ZN30FlightControllorImplementation19getPitchPidInstanceEv>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f007 f8db 	bl	8008dc8 <_ZN11PID_Control6getOutEv>
 8001c12:	ed87 0a07 	vstr	s0, [r7, #28]
			float yawPidOutput = flightControllerInstance->getYawPidInstance().getOut();
 8001c16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c18:	f7ff f962 	bl	8000ee0 <_ZN30FlightControllorImplementation17getYawPidInstanceEv>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f007 f8d2 	bl	8008dc8 <_ZN11PID_Control6getOutEv>
 8001c24:	ed87 0a06 	vstr	s0, [r7, #24]
			float xPositionPidOutput = flightControllerInstance->getXPositionPidInstance().getOut();
 8001c28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c2a:	f7ff f966 	bl	8000efa <_ZN30FlightControllorImplementation23getXPositionPidInstanceEv>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f007 f8c9 	bl	8008dc8 <_ZN11PID_Control6getOutEv>
 8001c36:	ed87 0a05 	vstr	s0, [r7, #20]
			float yPositionPidOutput = flightControllerInstance->getYPositionPidInstance().getOut();
 8001c3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c3c:	f7ff f96a 	bl	8000f14 <_ZN30FlightControllorImplementation23getYPositionPidInstanceEv>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f007 f8c0 	bl	8008dc8 <_ZN11PID_Control6getOutEv>
 8001c48:	ed87 0a04 	vstr	s0, [r7, #16]
			float altitudeMpcOutput = flightControllerInstance->getVL53L0Xinstance().getMPCout();
 8001c4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c4e:	f7ff f9d4 	bl	8000ffa <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f007 fb53 	bl	8009300 <_ZN7VL53L0X9getMPCoutEv>
 8001c5a:	ed87 0a03 	vstr	s0, [r7, #12]

			testttt = yPositionPidOutput;
 8001c5e:	4a96      	ldr	r2, [pc, #600]	; (8001eb8 <_Z19DynamicsProcessTaskPv+0x2f0>)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	6013      	str	r3, [r2, #0]

			if (currentFaultsStatus == FaultsStatus::FAILURE)
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d102      	bne.n	8001c70 <_Z19DynamicsProcessTaskPv+0xa8>
			{
				drone::failsafe::slowlyLanding(*flightControllerInstance);
 8001c6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c6c:	f7ff ff3e 	bl	8001aec <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation>
			}

			if (currentFaultsStatus == FaultsStatus::CRITICAL)
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d102      	bne.n	8001c7c <_Z19DynamicsProcessTaskPv+0xb4>
			{
				drone::failsafe::quickLanding(*flightControllerInstance);
 8001c76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c78:	f7ff ff7c 	bl	8001b74 <_ZN5drone8failsafe12quickLandingER30FlightControllorImplementation>
			}

			float CCR1_value = 3000.0F + flightControllerInstance->getFrSkyRXinstance().throttle + altitudeMpcOutput + rollPidOutput + pitchPidOutput + yawPidOutput - xPositionPidOutput - yPositionPidOutput;
 8001c7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c7e:	f7ff f9a2 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001c82:	4603      	mov	r3, r0
 8001c84:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8001c88:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001ebc <_Z19DynamicsProcessTaskPv+0x2f4>
 8001c8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c90:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c98:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ca0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ca8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			float CCR2_value = 3000.0F + flightControllerInstance->getFrSkyRXinstance().throttle + altitudeMpcOutput + rollPidOutput - pitchPidOutput - yawPidOutput - xPositionPidOutput + yPositionPidOutput;
 8001cc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001cc6:	f7ff f97e 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8001cd0:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001ebc <_Z19DynamicsProcessTaskPv+0x2f4>
 8001cd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ce0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ce8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cf8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d00:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d08:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			float CCR3_value = 3000.0F + flightControllerInstance->getFrSkyRXinstance().throttle + altitudeMpcOutput - rollPidOutput + pitchPidOutput - yawPidOutput + xPositionPidOutput - yPositionPidOutput;
 8001d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d0e:	f7ff f95a 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001d12:	4603      	mov	r3, r0
 8001d14:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8001d18:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001ebc <_Z19DynamicsProcessTaskPv+0x2f4>
 8001d1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d20:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d28:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d30:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d38:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d40:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d48:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d50:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			float CCR4_value = 3000.0F + flightControllerInstance->getFrSkyRXinstance().throttle + altitudeMpcOutput - rollPidOutput - pitchPidOutput + yawPidOutput + xPositionPidOutput + yPositionPidOutput;
 8001d54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d56:	f7ff f936 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8001d60:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001ebc <_Z19DynamicsProcessTaskPv+0x2f4>
 8001d64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d68:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d70:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d78:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d80:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d88:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d90:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d98:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

			if (currentFaultsStatus == FaultsStatus::OKAY)
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d157      	bne.n	8001e52 <_Z19DynamicsProcessTaskPv+0x28a>
			{
				if (CCR1_value<3300.0F)
 8001da2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001da6:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001ec0 <_Z19DynamicsProcessTaskPv+0x2f8>
 8001daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db2:	d501      	bpl.n	8001db8 <_Z19DynamicsProcessTaskPv+0x1f0>
					CCR1_value = 3300.0F;
 8001db4:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <_Z19DynamicsProcessTaskPv+0x2fc>)
 8001db6:	63fb      	str	r3, [r7, #60]	; 0x3c
				if (CCR1_value>6000.0F)
 8001db8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001dbc:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001ec8 <_Z19DynamicsProcessTaskPv+0x300>
 8001dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc8:	dd01      	ble.n	8001dce <_Z19DynamicsProcessTaskPv+0x206>
					CCR1_value = 6000.0F;
 8001dca:	4b40      	ldr	r3, [pc, #256]	; (8001ecc <_Z19DynamicsProcessTaskPv+0x304>)
 8001dcc:	63fb      	str	r3, [r7, #60]	; 0x3c

				if (CCR2_value<3300.0F)
 8001dce:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001dd2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001ec0 <_Z19DynamicsProcessTaskPv+0x2f8>
 8001dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dde:	d501      	bpl.n	8001de4 <_Z19DynamicsProcessTaskPv+0x21c>
					CCR2_value = 3300.0F;
 8001de0:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <_Z19DynamicsProcessTaskPv+0x2fc>)
 8001de2:	63bb      	str	r3, [r7, #56]	; 0x38
				if (CCR2_value>6000.0F)
 8001de4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001de8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001ec8 <_Z19DynamicsProcessTaskPv+0x300>
 8001dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df4:	dd01      	ble.n	8001dfa <_Z19DynamicsProcessTaskPv+0x232>
					CCR2_value = 6000.0F;
 8001df6:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <_Z19DynamicsProcessTaskPv+0x304>)
 8001df8:	63bb      	str	r3, [r7, #56]	; 0x38

				if (CCR3_value<3300.0F)
 8001dfa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001dfe:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001ec0 <_Z19DynamicsProcessTaskPv+0x2f8>
 8001e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0a:	d501      	bpl.n	8001e10 <_Z19DynamicsProcessTaskPv+0x248>
					CCR3_value = 3300.0F;
 8001e0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <_Z19DynamicsProcessTaskPv+0x2fc>)
 8001e0e:	637b      	str	r3, [r7, #52]	; 0x34
				if (CCR3_value>6000.0F)
 8001e10:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e14:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001ec8 <_Z19DynamicsProcessTaskPv+0x300>
 8001e18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e20:	dd01      	ble.n	8001e26 <_Z19DynamicsProcessTaskPv+0x25e>
					CCR3_value = 6000.0F;
 8001e22:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <_Z19DynamicsProcessTaskPv+0x304>)
 8001e24:	637b      	str	r3, [r7, #52]	; 0x34

				if (CCR4_value<3300.0F)
 8001e26:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e2a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001ec0 <_Z19DynamicsProcessTaskPv+0x2f8>
 8001e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e36:	d501      	bpl.n	8001e3c <_Z19DynamicsProcessTaskPv+0x274>
					CCR4_value = 3300.0F;
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <_Z19DynamicsProcessTaskPv+0x2fc>)
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
				if (CCR4_value>6000.0F)
 8001e3c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e40:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001ec8 <_Z19DynamicsProcessTaskPv+0x300>
 8001e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4c:	dd01      	ble.n	8001e52 <_Z19DynamicsProcessTaskPv+0x28a>
					CCR4_value = 6000.0F;
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <_Z19DynamicsProcessTaskPv+0x304>)
 8001e50:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if (currentFaultsStatus == FaultsStatus::CRITICAL)
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d107      	bne.n	8001e68 <_Z19DynamicsProcessTaskPv+0x2a0>
			{
				CCR1_value = 3000.0F;
 8001e58:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <_Z19DynamicsProcessTaskPv+0x308>)
 8001e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
				CCR2_value = 3000.0F;
 8001e5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <_Z19DynamicsProcessTaskPv+0x308>)
 8001e5e:	63bb      	str	r3, [r7, #56]	; 0x38
				CCR3_value = 3000.0F;
 8001e60:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <_Z19DynamicsProcessTaskPv+0x308>)
 8001e62:	637b      	str	r3, [r7, #52]	; 0x34
				CCR4_value = 3000.0F;
 8001e64:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <_Z19DynamicsProcessTaskPv+0x308>)
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
			}

			TIM3 -> CCR1 = static_cast<uint32_t>(CCR1_value);
 8001e68:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <_Z19DynamicsProcessTaskPv+0x30c>)
 8001e6a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e72:	ee17 2a90 	vmov	r2, s15
 8001e76:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3 -> CCR2 = static_cast<uint32_t>(CCR2_value);
 8001e78:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <_Z19DynamicsProcessTaskPv+0x30c>)
 8001e7a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e82:	ee17 2a90 	vmov	r2, s15
 8001e86:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3 -> CCR3 = static_cast<uint32_t>(CCR3_value);
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <_Z19DynamicsProcessTaskPv+0x30c>)
 8001e8a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e92:	ee17 2a90 	vmov	r2, s15
 8001e96:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3 -> CCR4 = static_cast<uint32_t>(CCR4_value);
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <_Z19DynamicsProcessTaskPv+0x30c>)
 8001e9a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ea2:	ee17 2a90 	vmov	r2, s15
 8001ea6:	641a      	str	r2, [r3, #64]	; 0x40
		}

		vTaskDelayUntil( &xLastWakeTime, xFrequency);
 8001ea8:	f107 0308 	add.w	r3, r7, #8
 8001eac:	2101      	movs	r1, #1
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f011 fb9e 	bl	80135f0 <vTaskDelayUntil>
	}
 8001eb4:	e695      	b.n	8001be2 <_Z19DynamicsProcessTaskPv+0x1a>
 8001eb6:	bf00      	nop
 8001eb8:	200002f0 	.word	0x200002f0
 8001ebc:	453b8000 	.word	0x453b8000
 8001ec0:	454e4000 	.word	0x454e4000
 8001ec4:	454e4000 	.word	0x454e4000
 8001ec8:	45bb8000 	.word	0x45bb8000
 8001ecc:	45bb8000 	.word	0x45bb8000
 8001ed0:	453b8000 	.word	0x453b8000
 8001ed4:	40000400 	.word	0x40000400

08001ed8 <_Z22isFailureFaultDetectedR30FlightControllorImplementation>:
#define SRC_IMPLEMENTATION_TASKS_FAULTSCHECKTASK_HPP_

#include "FlightControllerImplementation.hpp"

bool isFailureFaultDetected(FlightControllorImplementation& flightControllerInstance)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	const bool isRxDisconnected = flightControllerInstance.getFrSkyRXinstance().getCurrentState()==FrSkyRXState::TIMEOUT;
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff f870 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 fc61 	bl	80057b0 <_ZNK7FrSkyRX15getCurrentStateEv>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	bf0c      	ite	eq
 8001ef4:	2301      	moveq	r3, #1
 8001ef6:	2300      	movne	r3, #0
 8001ef8:	73fb      	strb	r3, [r7, #15]
	if (isRxDisconnected)
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <_Z22isFailureFaultDetectedR30FlightControllorImplementation+0x2c>
		return true;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <_Z22isFailureFaultDetectedR30FlightControllorImplementation+0x2e>

	return false;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <_Z23isCriticalFaultDetectedR30FlightControllorImplementation>:

bool isCriticalFaultDetected(FlightControllorImplementation& flightControllerInstance)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]

	const bool isCrashDetected = flightControllerInstance.getICM42688Pinstance().isCriticalStateDetected();
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff f82e 	bl	8000f78 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f005 fe74 	bl	8007c0c <_ZN9ICM42688P23isCriticalStateDetectedEv>
 8001f24:	4603      	mov	r3, r0
 8001f26:	73fb      	strb	r3, [r7, #15]
	if (isCrashDetected)
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <_Z23isCriticalFaultDetectedR30FlightControllorImplementation+0x24>
		return true;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <_Z23isCriticalFaultDetectedR30FlightControllorImplementation+0x26>

	return false;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_Z15FaultsCheckTaskPv>:

void FaultsCheckTask(void *pvParameters)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8001f44:	f7ff fbfe 	bl	8001744 <_ZN30FlightControllorImplementation11getInstanceEv>
 8001f48:	6178      	str	r0, [r7, #20]

	const TickType_t xFrequency = 1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	613b      	str	r3, [r7, #16]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001f4e:	f011 fcd7 	bl	8013900 <xTaskGetTickCount>
 8001f52:	4603      	mov	r3, r0
 8001f54:	60bb      	str	r3, [r7, #8]

	for( ;; )
	{
		FaultsStatus currentFaultsStatus = flightControllerInstance->getCurrentFaultsStatus();
 8001f56:	6978      	ldr	r0, [r7, #20]
 8001f58:	f7ff f890 	bl	800107c <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>
 8001f5c:	60f8      	str	r0, [r7, #12]

		flightControllerInstance->getPMW3901UYinstance().incrementTimeoutCounter();
 8001f5e:	6978      	ldr	r0, [r7, #20]
 8001f60:	f7ff f824 	bl	8000fac <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 8001f64:	4603      	mov	r3, r0
 8001f66:	3336      	adds	r3, #54	; 0x36
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fda5 	bl	8001ab8 <_ZN7Timeout23incrementTimeoutCounterEv>
		flightControllerInstance->getFrSkyRXinstance().incrementTimeoutCounter();
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	f7ff f829 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001f74:	4603      	mov	r3, r0
 8001f76:	3336      	adds	r3, #54	; 0x36
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fd9d 	bl	8001ab8 <_ZN7Timeout23incrementTimeoutCounterEv>
		flightControllerInstance->getMB1043instance().incrementTimeoutCounter();
 8001f7e:	6978      	ldr	r0, [r7, #20]
 8001f80:	f7ff f82e 	bl	8000fe0 <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 8001f84:	4603      	mov	r3, r0
 8001f86:	3336      	adds	r3, #54	; 0x36
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fd95 	bl	8001ab8 <_ZN7Timeout23incrementTimeoutCounterEv>

		flightControllerInstance->getBuzzerinstance().run();
 8001f8e:	6978      	ldr	r0, [r7, #20]
 8001f90:	f7fe ffd9 	bl	8000f46 <_ZN30FlightControllorImplementation17getBuzzerinstanceEv>
 8001f94:	4603      	mov	r3, r0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 f953 	bl	8005242 <_ZN6Buzzer3runEv>
		flightControllerInstance->getBatteryManagementinstance().run();
 8001f9c:	6978      	ldr	r0, [r7, #20]
 8001f9e:	f7ff f839 	bl	8001014 <_ZN30FlightControllorImplementation28getBatteryManagementinstanceEv>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f002 ffed 	bl	8004f84 <_ZN17BatteryManagement3runEv>

		if (isCriticalFaultDetected(*flightControllerInstance) || currentFaultsStatus==FaultsStatus::CRITICAL)
 8001faa:	6978      	ldr	r0, [r7, #20]
 8001fac:	f7ff ffaf 	bl	8001f0e <_Z23isCriticalFaultDetectedR30FlightControllorImplementation>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d102      	bne.n	8001fbc <_Z15FaultsCheckTaskPv+0x80>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d101      	bne.n	8001fc0 <_Z15FaultsCheckTaskPv+0x84>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <_Z15FaultsCheckTaskPv+0x86>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <_Z15FaultsCheckTaskPv+0x94>
		{
			flightControllerInstance->setCurrentFaultsStatus(FaultsStatus::CRITICAL);
 8001fc6:	2103      	movs	r1, #3
 8001fc8:	6978      	ldr	r0, [r7, #20]
 8001fca:	f7ff f864 	bl	8001096 <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>
 8001fce:	e025      	b.n	800201c <_Z15FaultsCheckTaskPv+0xe0>
		}
		else if (isFailureFaultDetected(*flightControllerInstance) || currentFaultsStatus==FaultsStatus::FAILURE)
 8001fd0:	6978      	ldr	r0, [r7, #20]
 8001fd2:	f7ff ff81 	bl	8001ed8 <_Z22isFailureFaultDetectedR30FlightControllorImplementation>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d102      	bne.n	8001fe2 <_Z15FaultsCheckTaskPv+0xa6>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d101      	bne.n	8001fe6 <_Z15FaultsCheckTaskPv+0xaa>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <_Z15FaultsCheckTaskPv+0xac>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d004      	beq.n	8001ff6 <_Z15FaultsCheckTaskPv+0xba>
		{
			flightControllerInstance->setCurrentFaultsStatus(FaultsStatus::CRITICAL);
 8001fec:	2103      	movs	r1, #3
 8001fee:	6978      	ldr	r0, [r7, #20]
 8001ff0:	f7ff f851 	bl	8001096 <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>
 8001ff4:	e012      	b.n	800201c <_Z15FaultsCheckTaskPv+0xe0>
		}
		else if (flightControllerInstance->getFrSkyRXinstance().getCurrentState() == FrSkyRXState::READY)
 8001ff6:	6978      	ldr	r0, [r7, #20]
 8001ff8:	f7fe ffe5 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 fbd6 	bl	80057b0 <_ZNK7FrSkyRX15getCurrentStateEv>
 8002004:	4603      	mov	r3, r0
 8002006:	2b03      	cmp	r3, #3
 8002008:	bf0c      	ite	eq
 800200a:	2301      	moveq	r3, #1
 800200c:	2300      	movne	r3, #0
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <_Z15FaultsCheckTaskPv+0xe0>
		{
			flightControllerInstance->setCurrentFaultsStatus(FaultsStatus::OKAY);
 8002014:	2100      	movs	r1, #0
 8002016:	6978      	ldr	r0, [r7, #20]
 8002018:	f7ff f83d 	bl	8001096 <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>
		}

		vTaskDelayUntil( &xLastWakeTime, xFrequency);
 800201c:	f107 0308 	add.w	r3, r7, #8
 8002020:	2101      	movs	r1, #1
 8002022:	4618      	mov	r0, r3
 8002024:	f011 fae4 	bl	80135f0 <vTaskDelayUntil>
	}
 8002028:	e795      	b.n	8001f56 <_Z15FaultsCheckTaskPv+0x1a>
	...

0800202c <_Z19sensorsDataReadTaskPv>:
extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart4;
extern UART_HandleTypeDef huart6;

void sensorsDataReadTask(void *pvParameters)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af02      	add	r7, sp, #8
 8002032:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8002034:	f7ff fb86 	bl	8001744 <_ZN30FlightControllorImplementation11getInstanceEv>
 8002038:	6178      	str	r0, [r7, #20]

	HAL_TIM_Base_Start_IT(&htim4);
 800203a:	48a7      	ldr	r0, [pc, #668]	; (80022d8 <_Z19sensorsDataReadTaskPv+0x2ac>)
 800203c:	f00c f808 	bl	800e050 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2105      	movs	r1, #5
 8002044:	2008      	movs	r0, #8
 8002046:	f007 ff4f 	bl	8009ee8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800204a:	2008      	movs	r0, #8
 800204c:	f007 ff68 	bl	8009f20 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002050:	2200      	movs	r2, #0
 8002052:	2105      	movs	r1, #5
 8002054:	200a      	movs	r0, #10
 8002056:	f007 ff47 	bl	8009ee8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800205a:	200a      	movs	r0, #10
 800205c:	f007 ff60 	bl	8009f20 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2105      	movs	r1, #5
 8002064:	2017      	movs	r0, #23
 8002066:	f007 ff3f 	bl	8009ee8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800206a:	2017      	movs	r0, #23
 800206c:	f007 ff58 	bl	8009f20 <HAL_NVIC_EnableIRQ>
	NVIC_SetPriorityGrouping(0);
 8002070:	2000      	movs	r0, #0
 8002072:	f7ff fcd9 	bl	8001a28 <__NVIC_SetPriorityGrouping>

	bool startup;
	if(!flightControllerInstance->getLIS3MDLTRinstance().defaultInit())
 8002076:	6978      	ldr	r0, [r7, #20]
 8002078:	f7fe ff59 	bl	8000f2e <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 800207c:	4603      	mov	r3, r0
 800207e:	4618      	mov	r0, r3
 8002080:	f006 f968 	bl	8008354 <_ZN9LIS3MDLTR11defaultInitEv>
 8002084:	4603      	mov	r3, r0
 8002086:	f083 0301 	eor.w	r3, r3, #1
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <_Z19sensorsDataReadTaskPv+0x68>
	  startup = false;
 8002090:	2300      	movs	r3, #0
 8002092:	74fb      	strb	r3, [r7, #19]
	flightControllerInstance->getLIS3MDLTRinstance().update();
 8002094:	6978      	ldr	r0, [r7, #20]
 8002096:	f7fe ff4a 	bl	8000f2e <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 800209a:	4603      	mov	r3, r0
 800209c:	4618      	mov	r0, r3
 800209e:	f006 f823 	bl	80080e8 <_ZN9LIS3MDLTR6updateEv>

	if (!flightControllerInstance->getICM42688Pinstance().defaultInit())
 80020a2:	6978      	ldr	r0, [r7, #20]
 80020a4:	f7fe ff68 	bl	8000f78 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f005 f876 	bl	800719c <_ZN9ICM42688P11defaultInitEv>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f083 0301 	eor.w	r3, r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <_Z19sensorsDataReadTaskPv+0x94>
	  startup = false;
 80020bc:	2300      	movs	r3, #0
 80020be:	74fb      	strb	r3, [r7, #19]
	flightControllerInstance->getICM42688Pinstance().update();
 80020c0:	6978      	ldr	r0, [r7, #20]
 80020c2:	f7fe ff59 	bl	8000f78 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f005 fb8b 	bl	80077e4 <_ZN9ICM42688P6updateEv>

	if (!flightControllerInstance->getBMP390instance().defaultInit())
 80020ce:	6978      	ldr	r0, [r7, #20]
 80020d0:	f7fe ff45 	bl	8000f5e <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 80020d4:	4603      	mov	r3, r0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f001 ff32 	bl	8003f40 <_ZN6BMP39011defaultInitEv>
 80020dc:	4603      	mov	r3, r0
 80020de:	f083 0301 	eor.w	r3, r3, #1
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <_Z19sensorsDataReadTaskPv+0xc0>
	  startup = false;
 80020e8:	2300      	movs	r3, #0
 80020ea:	74fb      	strb	r3, [r7, #19]
	flightControllerInstance->getBMP390instance().update();
 80020ec:	6978      	ldr	r0, [r7, #20]
 80020ee:	f7fe ff36 	bl	8000f5e <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f001 ffde 	bl	80040b6 <_ZN6BMP3906updateEv>

	flightControllerInstance->getFrSkyRXinstance().begin();
 80020fa:	6978      	ldr	r0, [r7, #20]
 80020fc:	f7fe ff63 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8002100:	4603      	mov	r3, r0
 8002102:	4618      	mov	r0, r3
 8002104:	f003 f9ce 	bl	80054a4 <_ZN7FrSkyRX5beginEv>
	flightControllerInstance->getMB1043instance().begin();
 8002108:	6978      	ldr	r0, [r7, #20]
 800210a:	f7fe ff69 	bl	8000fe0 <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 800210e:	4603      	mov	r3, r0
 8002110:	4618      	mov	r0, r3
 8002112:	f006 fa29 	bl	8008568 <_ZN6MB10435beginEv>
	flightControllerInstance->getPMW3901UYinstance().begin();
 8002116:	6978      	ldr	r0, [r7, #20]
 8002118:	f7fe ff48 	bl	8000fac <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 800211c:	4603      	mov	r3, r0
 800211e:	4618      	mov	r0, r3
 8002120:	f006 fb92 	bl	8008848 <_ZN9PMW3901UY5beginEv>
	flightControllerInstance->getVL53L0Xinstance().begin();
 8002124:	6978      	ldr	r0, [r7, #20]
 8002126:	f7fe ff68 	bl	8000ffa <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 800212a:	4603      	mov	r3, r0
 800212c:	4618      	mov	r0, r3
 800212e:	f007 f823 	bl	8009178 <_ZN7VL53L0X5beginEv>

	uint32_t currentSensor = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
	xTaskCreate(DynamicsProcessTask,"DynamicsProcessTask",2048,NULL,tskIDLE_PRIORITY+2, flightControllerInstance->getDynamicsProcessHandlerPtr());
 8002136:	6978      	ldr	r0, [r7, #20]
 8002138:	f7fe ff93 	bl	8001062 <_ZN30FlightControllorImplementation28getDynamicsProcessHandlerPtrEv>
 800213c:	4603      	mov	r3, r0
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	2302      	movs	r3, #2
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2300      	movs	r3, #0
 8002146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800214a:	4964      	ldr	r1, [pc, #400]	; (80022dc <_Z19sensorsDataReadTaskPv+0x2b0>)
 800214c:	4864      	ldr	r0, [pc, #400]	; (80022e0 <_Z19sensorsDataReadTaskPv+0x2b4>)
 800214e:	f011 f919 	bl	8013384 <xTaskCreate>
	xTaskCreate(FaultsCheckTask,"FaultsCheckTask",1024,NULL,tskIDLE_PRIORITY+2, flightControllerInstance->getFaultsCheckHandlerPtr());
 8002152:	6978      	ldr	r0, [r7, #20]
 8002154:	f7fe ff6b 	bl	800102e <_ZN30FlightControllorImplementation24getFaultsCheckHandlerPtrEv>
 8002158:	4603      	mov	r3, r0
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	2302      	movs	r3, #2
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2300      	movs	r3, #0
 8002162:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002166:	495f      	ldr	r1, [pc, #380]	; (80022e4 <_Z19sensorsDataReadTaskPv+0x2b8>)
 8002168:	485f      	ldr	r0, [pc, #380]	; (80022e8 <_Z19sensorsDataReadTaskPv+0x2bc>)
 800216a:	f011 f90b 	bl	8013384 <xTaskCreate>

	while (1)
	{
		if (xTaskNotifyWait(0x00, 0xFFFFFFFFUL, &currentSensor, portMAX_DELAY) == pdTRUE)
 800216e:	f107 0208 	add.w	r2, r7, #8
 8002172:	f04f 33ff 	mov.w	r3, #4294967295
 8002176:	f04f 31ff 	mov.w	r1, #4294967295
 800217a:	2000      	movs	r0, #0
 800217c:	f011 fdba 	bl	8013cf4 <xTaskNotifyWait>
 8002180:	4603      	mov	r3, r0
 8002182:	2b01      	cmp	r3, #1
 8002184:	bf0c      	ite	eq
 8002186:	2301      	moveq	r3, #1
 8002188:	2300      	movne	r3, #0
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0ee      	beq.n	800216e <_Z19sensorsDataReadTaskPv+0x142>
		{
			if (currentSensor & EnumSensorsInterrupt::ICM42688P_t)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00e      	beq.n	80021b8 <_Z19sensorsDataReadTaskPv+0x18c>
			{
				flightControllerInstance->getICM42688Pinstance().update();
 800219a:	6978      	ldr	r0, [r7, #20]
 800219c:	f7fe feec 	bl	8000f78 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f005 fb1e 	bl	80077e4 <_ZN9ICM42688P6updateEv>
				flightControllerInstance->getICM42688Pinstance().incrementTaskCounter();
 80021a8:	6978      	ldr	r0, [r7, #20]
 80021aa:	f7fe fee5 	bl	8000f78 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80021ae:	4603      	mov	r3, r0
 80021b0:	3340      	adds	r3, #64	; 0x40
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fc6e 	bl	8001a94 <_ZN12CallsCounter20incrementTaskCounterEv>
				if (testt==duplicates)
					duplicatesCounter++;
				duplicates = testt;*/
			}

			if (currentSensor & EnumSensorsInterrupt::BMP390_t)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00e      	beq.n	80021e0 <_Z19sensorsDataReadTaskPv+0x1b4>
			{
				flightControllerInstance->getBMP390instance().update();
 80021c2:	6978      	ldr	r0, [r7, #20]
 80021c4:	f7fe fecb 	bl	8000f5e <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f001 ff73 	bl	80040b6 <_ZN6BMP3906updateEv>
				flightControllerInstance->getBMP390instance().incrementTaskCounter();
 80021d0:	6978      	ldr	r0, [r7, #20]
 80021d2:	f7fe fec4 	bl	8000f5e <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 80021d6:	4603      	mov	r3, r0
 80021d8:	3340      	adds	r3, #64	; 0x40
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fc5a 	bl	8001a94 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			if (currentSensor & EnumSensorsInterrupt::LIS3MDLTR_t)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00e      	beq.n	8002208 <_Z19sensorsDataReadTaskPv+0x1dc>
			{
				flightControllerInstance->getLIS3MDLTRinstance().update();
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f7fe fe9f 	bl	8000f2e <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f005 ff78 	bl	80080e8 <_ZN9LIS3MDLTR6updateEv>
				flightControllerInstance->getLIS3MDLTRinstance().incrementTaskCounter();
 80021f8:	6978      	ldr	r0, [r7, #20]
 80021fa:	f7fe fe98 	bl	8000f2e <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 80021fe:	4603      	mov	r3, r0
 8002200:	3340      	adds	r3, #64	; 0x40
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fc46 	bl	8001a94 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			if (currentSensor & EnumSensorsInterrupt::PMW_t)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d011      	beq.n	8002236 <_Z19sensorsDataReadTaskPv+0x20a>
			{
				__HAL_UART_FLUSH_DRREGISTER(&huart2);
 8002212:	4b36      	ldr	r3, [pc, #216]	; (80022ec <_Z19sensorsDataReadTaskPv+0x2c0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
				flightControllerInstance->getPMW3901UYinstance().update();
 8002218:	6978      	ldr	r0, [r7, #20]
 800221a:	f7fe fec7 	bl	8000fac <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 800221e:	4603      	mov	r3, r0
 8002220:	4618      	mov	r0, r3
 8002222:	f006 fb21 	bl	8008868 <_ZN9PMW3901UY6updateEv>
				flightControllerInstance->getPMW3901UYinstance().incrementTaskCounter();
 8002226:	6978      	ldr	r0, [r7, #20]
 8002228:	f7fe fec0 	bl	8000fac <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 800222c:	4603      	mov	r3, r0
 800222e:	3340      	adds	r3, #64	; 0x40
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fc2f 	bl	8001a94 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			if (currentSensor & EnumSensorsInterrupt::REMOTERX_t)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01b      	beq.n	8002278 <_Z19sensorsDataReadTaskPv+0x24c>
			{
				FaultsStatus faultStatus = flightControllerInstance->getCurrentFaultsStatus();
 8002240:	6978      	ldr	r0, [r7, #20]
 8002242:	f7fe ff1b 	bl	800107c <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>
 8002246:	60f8      	str	r0, [r7, #12]

				if (faultStatus != FaultsStatus::FAILURE && faultStatus != FaultsStatus::CRITICAL)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d014      	beq.n	8002278 <_Z19sensorsDataReadTaskPv+0x24c>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2b03      	cmp	r3, #3
 8002252:	d011      	beq.n	8002278 <_Z19sensorsDataReadTaskPv+0x24c>
				{
					__HAL_UART_FLUSH_DRREGISTER(&huart3);
 8002254:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <_Z19sensorsDataReadTaskPv+0x2c4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
					flightControllerInstance->getFrSkyRXinstance().update();
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f7fe feb3 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8002260:	4603      	mov	r3, r0
 8002262:	4618      	mov	r0, r3
 8002264:	f003 f92e 	bl	80054c4 <_ZN7FrSkyRX6updateEv>
					flightControllerInstance->getFrSkyRXinstance().incrementTaskCounter();
 8002268:	6978      	ldr	r0, [r7, #20]
 800226a:	f7fe feac 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 800226e:	4603      	mov	r3, r0
 8002270:	3340      	adds	r3, #64	; 0x40
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fc0e 	bl	8001a94 <_ZN12CallsCounter20incrementTaskCounterEv>
				}
			}

			if (currentSensor & EnumSensorsInterrupt::SONAR_t)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f003 0320 	and.w	r3, r3, #32
 800227e:	2b00      	cmp	r3, #0
 8002280:	d011      	beq.n	80022a6 <_Z19sensorsDataReadTaskPv+0x27a>
			{
			   __HAL_UART_FLUSH_DRREGISTER(&huart4);
 8002282:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <_Z19sensorsDataReadTaskPv+0x2c8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
			   flightControllerInstance->getMB1043instance().update();
 8002288:	6978      	ldr	r0, [r7, #20]
 800228a:	f7fe fea9 	bl	8000fe0 <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 800228e:	4603      	mov	r3, r0
 8002290:	4618      	mov	r0, r3
 8002292:	f006 f979 	bl	8008588 <_ZN6MB10436updateEv>
			   flightControllerInstance->getMB1043instance().incrementTaskCounter();
 8002296:	6978      	ldr	r0, [r7, #20]
 8002298:	f7fe fea2 	bl	8000fe0 <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 800229c:	4603      	mov	r3, r0
 800229e:	3340      	adds	r3, #64	; 0x40
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fbf7 	bl	8001a94 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			if (currentSensor & EnumSensorsInterrupt::VL53L0X_t)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f43f af5e 	beq.w	800216e <_Z19sensorsDataReadTaskPv+0x142>
			{
			   __HAL_UART_FLUSH_DRREGISTER(&huart6);
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <_Z19sensorsDataReadTaskPv+0x2cc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
			   flightControllerInstance->getVL53L0Xinstance().update();
 80022b8:	6978      	ldr	r0, [r7, #20]
 80022ba:	f7fe fe9e 	bl	8000ffa <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 80022be:	4603      	mov	r3, r0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f006 ff6b 	bl	800919c <_ZN7VL53L0X6updateEv>
			   flightControllerInstance->getVL53L0Xinstance().incrementTaskCounter();
 80022c6:	6978      	ldr	r0, [r7, #20]
 80022c8:	f7fe fe97 	bl	8000ffa <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 80022cc:	4603      	mov	r3, r0
 80022ce:	3340      	adds	r3, #64	; 0x40
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fbdf 	bl	8001a94 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			//taskCounter++;
		}
	}
 80022d6:	e74a      	b.n	800216e <_Z19sensorsDataReadTaskPv+0x142>
 80022d8:	20000580 	.word	0x20000580
 80022dc:	080167a8 	.word	0x080167a8
 80022e0:	08001bc9 	.word	0x08001bc9
 80022e4:	080167bc 	.word	0x080167bc
 80022e8:	08001f3d 	.word	0x08001f3d
 80022ec:	20000650 	.word	0x20000650
 80022f0:	20000694 	.word	0x20000694
 80022f4:	200005c8 	.word	0x200005c8
 80022f8:	200006d8 	.word	0x200006d8

080022fc <HAL_UART_TxCpltCallback>:

#include "stm32f4xx_hal.h"
#include "FlightControllerImplementation.hpp"

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8002304:	f7ff fa1e 	bl	8001744 <_ZN30FlightControllorImplementation11getInstanceEv>
 8002308:	60f8      	str	r0, [r7, #12]
    if (huart->Instance == USART1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a07      	ldr	r2, [pc, #28]	; (800232c <HAL_UART_TxCpltCallback+0x30>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d106      	bne.n	8002322 <HAL_UART_TxCpltCallback+0x26>
    {
    	flightControllerInstance->getHC05instance().printfSensorsValues();
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f7fe fe3c 	bl	8000f92 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 800231a:	4603      	mov	r3, r0
 800231c:	4618      	mov	r0, r3
 800231e:	f003 fd8d 	bl	8005e3c <_ZN4HC0519printfSensorsValuesEv>
    }
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40011000 	.word	0x40011000

08002330 <HAL_TIM_PeriodElapsedCallback>:

int timCounter2 = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a04      	ldr	r2, [pc, #16]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d101      	bne.n	8002346 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002342:	f007 f8c3 	bl	80094cc <HAL_IncTick>

  if (htim->Instance == TIM4)
  {
	  //timCounter2++;
  }
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40010000 	.word	0x40010000

08002354 <HAL_GPIO_EXTI_Callback>:

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af02      	add	r7, sp, #8
 800235a:	4603      	mov	r3, r0
 800235c:	80fb      	strh	r3, [r7, #6]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8002362:	f7ff f9ef 	bl	8001744 <_ZN30FlightControllorImplementation11getInstanceEv>
 8002366:	6178      	str	r0, [r7, #20]
	TaskHandle_t* sensorsDataReadHandler = flightControllerInstance->getSensorsDataReadHandlerPtr();
 8002368:	6978      	ldr	r0, [r7, #20]
 800236a:	f7fe fe6d 	bl	8001048 <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>
 800236e:	6138      	str	r0, [r7, #16]

	switch (GPIO_Pin)
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002376:	d024      	beq.n	80023c2 <HAL_GPIO_EXTI_Callback+0x6e>
 8002378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800237c:	dc60      	bgt.n	8002440 <HAL_GPIO_EXTI_Callback+0xec>
 800237e:	2b04      	cmp	r3, #4
 8002380:	d040      	beq.n	8002404 <HAL_GPIO_EXTI_Callback+0xb0>
 8002382:	2b10      	cmp	r3, #16
 8002384:	d15c      	bne.n	8002440 <HAL_GPIO_EXTI_Callback+0xec>
	{
	case (GPIO_PIN_4):
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::ICM42688P_t, eSetBits, &pxHigherPriorityTaskWoken);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	f107 030c 	add.w	r3, r7, #12
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	2300      	movs	r3, #0
 8002392:	2201      	movs	r2, #1
 8002394:	2101      	movs	r1, #1
 8002396:	f011 fd07 	bl	8013da8 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d007      	beq.n	80023b0 <HAL_GPIO_EXTI_Callback+0x5c>
 80023a0:	4b29      	ldr	r3, [pc, #164]	; (8002448 <HAL_GPIO_EXTI_Callback+0xf4>)
 80023a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getICM42688Pinstance().incrementInterruptCounter();
 80023b0:	6978      	ldr	r0, [r7, #20]
 80023b2:	f7fe fde1 	bl	8000f78 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80023b6:	4603      	mov	r3, r0
 80023b8:	3340      	adds	r3, #64	; 0x40
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fb58 	bl	8001a70 <_ZN12CallsCounter25incrementInterruptCounterEv>
		break;
 80023c0:	e03e      	b.n	8002440 <HAL_GPIO_EXTI_Callback+0xec>

	case (GPIO_PIN_8):
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::BMP390_t, eSetBits, &pxHigherPriorityTaskWoken);
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	2300      	movs	r3, #0
 80023ce:	2201      	movs	r2, #1
 80023d0:	2102      	movs	r1, #2
 80023d2:	f011 fce9 	bl	8013da8 <xTaskGenericNotifyFromISR>
		if (pxHigherPriorityTaskWoken)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <HAL_GPIO_EXTI_Callback+0x9e>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <HAL_GPIO_EXTI_Callback+0x9e>
 80023e2:	4b19      	ldr	r3, [pc, #100]	; (8002448 <HAL_GPIO_EXTI_Callback+0xf4>)
 80023e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	f3bf 8f4f 	dsb	sy
 80023ee:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getBMP390instance().incrementInterruptCounter();
 80023f2:	6978      	ldr	r0, [r7, #20]
 80023f4:	f7fe fdb3 	bl	8000f5e <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 80023f8:	4603      	mov	r3, r0
 80023fa:	3340      	adds	r3, #64	; 0x40
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fb37 	bl	8001a70 <_ZN12CallsCounter25incrementInterruptCounterEv>
		break;
 8002402:	e01d      	b.n	8002440 <HAL_GPIO_EXTI_Callback+0xec>

	case (GPIO_PIN_2):
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::LIS3MDLTR_t, eSetBits, &pxHigherPriorityTaskWoken);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	f107 030c 	add.w	r3, r7, #12
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	2300      	movs	r3, #0
 8002410:	2201      	movs	r2, #1
 8002412:	2104      	movs	r1, #4
 8002414:	f011 fcc8 	bl	8013da8 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d007      	beq.n	800242e <HAL_GPIO_EXTI_Callback+0xda>
 800241e:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	f3bf 8f4f 	dsb	sy
 800242a:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getLIS3MDLTRinstance().incrementInterruptCounter();
 800242e:	6978      	ldr	r0, [r7, #20]
 8002430:	f7fe fd7d 	bl	8000f2e <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 8002434:	4603      	mov	r3, r0
 8002436:	3340      	adds	r3, #64	; 0x40
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fb19 	bl	8001a70 <_ZN12CallsCounter25incrementInterruptCounterEv>
		break;
 800243e:	bf00      	nop
	}
}
 8002440:	bf00      	nop
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	e000ed04 	.word	0xe000ed04

0800244c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af02      	add	r7, sp, #8
 8002452:	6078      	str	r0, [r7, #4]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8002458:	f7ff f974 	bl	8001744 <_ZN30FlightControllorImplementation11getInstanceEv>
 800245c:	6178      	str	r0, [r7, #20]
	TaskHandle_t* sensorsDataReadHandler = flightControllerInstance->getSensorsDataReadHandlerPtr();
 800245e:	6978      	ldr	r0, [r7, #20]
 8002460:	f7fe fdf2 	bl	8001048 <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>
 8002464:	6138      	str	r0, [r7, #16]

	if (huart->Instance == USART2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a46      	ldr	r2, [pc, #280]	; (8002584 <HAL_UART_RxCpltCallback+0x138>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d11d      	bne.n	80024ac <HAL_UART_RxCpltCallback+0x60>
	{
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::PMW_t, eSetBits, &pxHigherPriorityTaskWoken);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	f107 030c 	add.w	r3, r7, #12
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	2300      	movs	r3, #0
 800247c:	2201      	movs	r2, #1
 800247e:	2108      	movs	r1, #8
 8002480:	f011 fc92 	bl	8013da8 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d007      	beq.n	800249a <HAL_UART_RxCpltCallback+0x4e>
 800248a:	4b3f      	ldr	r3, [pc, #252]	; (8002588 <HAL_UART_RxCpltCallback+0x13c>)
 800248c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	f3bf 8f4f 	dsb	sy
 8002496:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getPMW3901UYinstance().incrementInterruptCounter();
 800249a:	6978      	ldr	r0, [r7, #20]
 800249c:	f7fe fd86 	bl	8000fac <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 80024a0:	4603      	mov	r3, r0
 80024a2:	3340      	adds	r3, #64	; 0x40
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fae3 	bl	8001a70 <_ZN12CallsCounter25incrementInterruptCounterEv>
	{
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::VL53L0X_t, eSetBits, &pxHigherPriorityTaskWoken);
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
		flightControllerInstance->getVL53L0Xinstance().incrementInterruptCounter();
	}
}
 80024aa:	e067      	b.n	800257c <HAL_UART_RxCpltCallback+0x130>
	} else if (huart->Instance == USART3)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a36      	ldr	r2, [pc, #216]	; (800258c <HAL_UART_RxCpltCallback+0x140>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d11d      	bne.n	80024f2 <HAL_UART_RxCpltCallback+0xa6>
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::REMOTERX_t, eSetBits, &pxHigherPriorityTaskWoken);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	f107 030c 	add.w	r3, r7, #12
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2300      	movs	r3, #0
 80024c2:	2201      	movs	r2, #1
 80024c4:	2110      	movs	r1, #16
 80024c6:	f011 fc6f 	bl	8013da8 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d007      	beq.n	80024e0 <HAL_UART_RxCpltCallback+0x94>
 80024d0:	4b2d      	ldr	r3, [pc, #180]	; (8002588 <HAL_UART_RxCpltCallback+0x13c>)
 80024d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	f3bf 8f4f 	dsb	sy
 80024dc:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getFrSkyRXinstance().incrementInterruptCounter();
 80024e0:	6978      	ldr	r0, [r7, #20]
 80024e2:	f7fe fd70 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 80024e6:	4603      	mov	r3, r0
 80024e8:	3340      	adds	r3, #64	; 0x40
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fac0 	bl	8001a70 <_ZN12CallsCounter25incrementInterruptCounterEv>
}
 80024f0:	e044      	b.n	800257c <HAL_UART_RxCpltCallback+0x130>
	} else if (huart->Instance == UART4)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a26      	ldr	r2, [pc, #152]	; (8002590 <HAL_UART_RxCpltCallback+0x144>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d11d      	bne.n	8002538 <HAL_UART_RxCpltCallback+0xec>
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::SONAR_t, eSetBits, &pxHigherPriorityTaskWoken);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	f107 030c 	add.w	r3, r7, #12
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	2300      	movs	r3, #0
 8002508:	2201      	movs	r2, #1
 800250a:	2120      	movs	r1, #32
 800250c:	f011 fc4c 	bl	8013da8 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <HAL_UART_RxCpltCallback+0xda>
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <HAL_UART_RxCpltCallback+0x13c>)
 8002518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	f3bf 8f4f 	dsb	sy
 8002522:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getMB1043instance().incrementInterruptCounter();
 8002526:	6978      	ldr	r0, [r7, #20]
 8002528:	f7fe fd5a 	bl	8000fe0 <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 800252c:	4603      	mov	r3, r0
 800252e:	3340      	adds	r3, #64	; 0x40
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fa9d 	bl	8001a70 <_ZN12CallsCounter25incrementInterruptCounterEv>
}
 8002536:	e021      	b.n	800257c <HAL_UART_RxCpltCallback+0x130>
	}else if (huart->Instance == USART6)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a15      	ldr	r2, [pc, #84]	; (8002594 <HAL_UART_RxCpltCallback+0x148>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d11c      	bne.n	800257c <HAL_UART_RxCpltCallback+0x130>
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::VL53L0X_t, eSetBits, &pxHigherPriorityTaskWoken);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	f107 030c 	add.w	r3, r7, #12
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2300      	movs	r3, #0
 800254e:	2201      	movs	r2, #1
 8002550:	2140      	movs	r1, #64	; 0x40
 8002552:	f011 fc29 	bl	8013da8 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_UART_RxCpltCallback+0x120>
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_UART_RxCpltCallback+0x13c>)
 800255e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getVL53L0Xinstance().incrementInterruptCounter();
 800256c:	6978      	ldr	r0, [r7, #20]
 800256e:	f7fe fd44 	bl	8000ffa <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 8002572:	4603      	mov	r3, r0
 8002574:	3340      	adds	r3, #64	; 0x40
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fa7a 	bl	8001a70 <_ZN12CallsCounter25incrementInterruptCounterEv>
}
 800257c:	bf00      	nop
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40004400 	.word	0x40004400
 8002588:	e000ed04 	.word	0xe000ed04
 800258c:	40004800 	.word	0x40004800
 8002590:	40004c00 	.word	0x40004c00
 8002594:	40011400 	.word	0x40011400

08002598 <main>:
static void MX_USART6_UART_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM3_Init();

int main(void)
{
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b085      	sub	sp, #20
 800259c:	af02      	add	r7, sp, #8
  HAL_Init();//1.19 17 0.38 37 88.20
 800259e:	f006 ff73 	bl	8009488 <HAL_Init>
  SystemClock_Config();
 80025a2:	f000 f891 	bl	80026c8 <_Z18SystemClock_Configv>

  MX_GPIO_Init();
 80025a6:	f000 fc41 	bl	8002e2c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80025aa:	f000 fbd9 	bl	8002d60 <_ZL11MX_DMA_Initv>
  MX_SPI2_Init();
 80025ae:	f000 f995 	bl	80028dc <_ZL12MX_SPI2_Initv>
  MX_USART1_UART_Init();
 80025b2:	f000 fb19 	bl	8002be8 <_ZL19MX_USART1_UART_Initv>
  MX_SDIO_SD_Init();
 80025b6:	f000 f957 	bl	8002868 <_ZL15MX_SDIO_SD_Initv>
  MX_USART3_UART_Init();
 80025ba:	f000 fb71 	bl	8002ca0 <_ZL19MX_USART3_UART_Initv>
  MX_ADC1_Init();
 80025be:	f000 f8f7 	bl	80027b0 <_ZL12MX_ADC1_Initv>
  MX_UART4_Init();
 80025c2:	f000 fae3 	bl	8002b8c <_ZL13MX_UART4_Initv>
  MX_USART2_UART_Init();
 80025c6:	f000 fb3d 	bl	8002c44 <_ZL19MX_USART2_UART_Initv>
  MX_USART6_UART_Init();
 80025ca:	f000 fb9b 	bl	8002d04 <_ZL19MX_USART6_UART_Initv>
  MX_TIM4_Init();
 80025ce:	f000 fa81 	bl	8002ad4 <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 80025d2:	f000 f9bf 	bl	8002954 <_ZL12MX_TIM3_Initv>

  FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 80025d6:	f7ff f8b5 	bl	8001744 <_ZN30FlightControllorImplementation11getInstanceEv>
 80025da:	6078      	str	r0, [r7, #4]

  flightControllerInstance->getHC05instance().addSensor(&flightControllerInstance->getPMW3901UYinstance());
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7fe fcd8 	bl	8000f92 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 80025e2:	4604      	mov	r4, r0
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7fe fce1 	bl	8000fac <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4619      	mov	r1, r3
 80025ee:	4620      	mov	r0, r4
 80025f0:	f003 fc13 	bl	8005e1a <_ZN4HC059addSensorEP15PrintableSensor>
  flightControllerInstance->getHC05instance().addSensor(&flightControllerInstance->getVL53L0Xinstance());
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7fe fccc 	bl	8000f92 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 80025fa:	4604      	mov	r4, r0
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7fe fcfc 	bl	8000ffa <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 8002602:	4603      	mov	r3, r0
 8002604:	4619      	mov	r1, r3
 8002606:	4620      	mov	r0, r4
 8002608:	f003 fc07 	bl	8005e1a <_ZN4HC059addSensorEP15PrintableSensor>
  flightControllerInstance->getHC05instance().addSensor(&flightControllerInstance->getICM42688Pinstance());
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7fe fcc0 	bl	8000f92 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 8002612:	4604      	mov	r4, r0
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7fe fcaf 	bl	8000f78 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <main+0x8c>
 8002620:	3304      	adds	r3, #4
 8002622:	e000      	b.n	8002626 <main+0x8e>
 8002624:	2300      	movs	r3, #0
 8002626:	4619      	mov	r1, r3
 8002628:	4620      	mov	r0, r4
 800262a:	f003 fbf6 	bl	8005e1a <_ZN4HC059addSensorEP15PrintableSensor>

  flightControllerInstance->getHC05instance().addSensorParameter(HC05::SENSOR_DATA_PARAMETER::PMW_POS_Y);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe fcaf 	bl	8000f92 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 8002634:	4603      	mov	r3, r0
 8002636:	2116      	movs	r1, #22
 8002638:	4618      	mov	r0, r3
 800263a:	f003 fc49 	bl	8005ed0 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>
  flightControllerInstance->getHC05instance().addSensorParameter(HC05::SENSOR_DATA_PARAMETER::PMW_POS_X);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe fca7 	bl	8000f92 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 8002644:	4603      	mov	r3, r0
 8002646:	2115      	movs	r1, #21
 8002648:	4618      	mov	r0, r3
 800264a:	f003 fc41 	bl	8005ed0 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>
  flightControllerInstance->getHC05instance().printfSensorsValues();
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fe fc9f 	bl	8000f92 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 8002654:	4603      	mov	r3, r0
 8002656:	4618      	mov	r0, r3
 8002658:	f003 fbf0 	bl	8005e3c <_ZN4HC0519printfSensorsValuesEv>

  TIM3 -> CCR1 = 0;
 800265c:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <main+0x120>)
 800265e:	2200      	movs	r2, #0
 8002660:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3 -> CCR2 = 0;
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <main+0x120>)
 8002664:	2200      	movs	r2, #0
 8002666:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3 -> CCR3 = 0;
 8002668:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <main+0x120>)
 800266a:	2200      	movs	r2, #0
 800266c:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3 -> CCR4 = 0;
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <main+0x120>)
 8002670:	2200      	movs	r2, #0
 8002672:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8002674:	2100      	movs	r1, #0
 8002676:	4811      	ldr	r0, [pc, #68]	; (80026bc <main+0x124>)
 8002678:	f00b fdb4 	bl	800e1e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800267c:	2104      	movs	r1, #4
 800267e:	480f      	ldr	r0, [pc, #60]	; (80026bc <main+0x124>)
 8002680:	f00b fdb0 	bl	800e1e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8002684:	2108      	movs	r1, #8
 8002686:	480d      	ldr	r0, [pc, #52]	; (80026bc <main+0x124>)
 8002688:	f00b fdac 	bl	800e1e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 800268c:	210c      	movs	r1, #12
 800268e:	480b      	ldr	r0, [pc, #44]	; (80026bc <main+0x124>)
 8002690:	f00b fda8 	bl	800e1e4 <HAL_TIM_PWM_Start>

  xTaskCreate(sensorsDataReadTask,"SensorsDataReadTask",1024,NULL,tskIDLE_PRIORITY+3, flightControllerInstance->getSensorsDataReadHandlerPtr());
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7fe fcd7 	bl	8001048 <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>
 800269a:	4603      	mov	r3, r0
 800269c:	9301      	str	r3, [sp, #4]
 800269e:	2303      	movs	r3, #3
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	2300      	movs	r3, #0
 80026a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026a8:	4905      	ldr	r1, [pc, #20]	; (80026c0 <main+0x128>)
 80026aa:	4806      	ldr	r0, [pc, #24]	; (80026c4 <main+0x12c>)
 80026ac:	f010 fe6a 	bl	8013384 <xTaskCreate>
  vTaskStartScheduler();
 80026b0:	f011 f81c 	bl	80136ec <vTaskStartScheduler>

  while (1)
 80026b4:	e7fe      	b.n	80026b4 <main+0x11c>
 80026b6:	bf00      	nop
 80026b8:	40000400 	.word	0x40000400
 80026bc:	20000538 	.word	0x20000538
 80026c0:	080167cc 	.word	0x080167cc
 80026c4:	0800202d 	.word	0x0800202d

080026c8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b094      	sub	sp, #80	; 0x50
 80026cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ce:	f107 0320 	add.w	r3, r7, #32
 80026d2:	2230      	movs	r2, #48	; 0x30
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f013 fe74 	bl	80163c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026dc:	f107 030c 	add.w	r3, r7, #12
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ec:	2300      	movs	r3, #0
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <_Z18SystemClock_Configv+0xe0>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	4a2c      	ldr	r2, [pc, #176]	; (80027a8 <_Z18SystemClock_Configv+0xe0>)
 80026f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fa:	6413      	str	r3, [r2, #64]	; 0x40
 80026fc:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <_Z18SystemClock_Configv+0xe0>)
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002708:	2300      	movs	r3, #0
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <_Z18SystemClock_Configv+0xe4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a26      	ldr	r2, [pc, #152]	; (80027ac <_Z18SystemClock_Configv+0xe4>)
 8002712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	4b24      	ldr	r3, [pc, #144]	; (80027ac <_Z18SystemClock_Configv+0xe4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002724:	2301      	movs	r3, #1
 8002726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800272e:	2302      	movs	r3, #2
 8002730:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002732:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002738:	2308      	movs	r3, #8
 800273a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800273c:	2390      	movs	r3, #144	; 0x90
 800273e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002740:	2302      	movs	r3, #2
 8002742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002744:	2306      	movs	r3, #6
 8002746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002748:	f107 0320 	add.w	r3, r7, #32
 800274c:	4618      	mov	r0, r3
 800274e:	f009 fbfb 	bl	800bf48 <HAL_RCC_OscConfig>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf14      	ite	ne
 8002758:	2301      	movne	r3, #1
 800275a:	2300      	moveq	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8002762:	f000 fc23 	bl	8002fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002766:	230f      	movs	r3, #15
 8002768:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800276a:	2302      	movs	r3, #2
 800276c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002772:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002776:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800277c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800277e:	f107 030c 	add.w	r3, r7, #12
 8002782:	2104      	movs	r1, #4
 8002784:	4618      	mov	r0, r3
 8002786:	f009 fe57 	bl	800c438 <HAL_RCC_ClockConfig>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf14      	ite	ne
 8002790:	2301      	movne	r3, #1
 8002792:	2300      	moveq	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800279a:	f000 fc07 	bl	8002fac <Error_Handler>
  }
}
 800279e:	bf00      	nop
 80027a0:	3750      	adds	r7, #80	; 0x50
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40007000 	.word	0x40007000

080027b0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027b6:	463b      	mov	r3, r7
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80027c2:	4b26      	ldr	r3, [pc, #152]	; (800285c <_ZL12MX_ADC1_Initv+0xac>)
 80027c4:	4a26      	ldr	r2, [pc, #152]	; (8002860 <_ZL12MX_ADC1_Initv+0xb0>)
 80027c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80027c8:	4b24      	ldr	r3, [pc, #144]	; (800285c <_ZL12MX_ADC1_Initv+0xac>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027ce:	4b23      	ldr	r3, [pc, #140]	; (800285c <_ZL12MX_ADC1_Initv+0xac>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80027d4:	4b21      	ldr	r3, [pc, #132]	; (800285c <_ZL12MX_ADC1_Initv+0xac>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80027da:	4b20      	ldr	r3, [pc, #128]	; (800285c <_ZL12MX_ADC1_Initv+0xac>)
 80027dc:	2200      	movs	r2, #0
 80027de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027e0:	4b1e      	ldr	r3, [pc, #120]	; (800285c <_ZL12MX_ADC1_Initv+0xac>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027e8:	4b1c      	ldr	r3, [pc, #112]	; (800285c <_ZL12MX_ADC1_Initv+0xac>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027ee:	4b1b      	ldr	r3, [pc, #108]	; (800285c <_ZL12MX_ADC1_Initv+0xac>)
 80027f0:	4a1c      	ldr	r2, [pc, #112]	; (8002864 <_ZL12MX_ADC1_Initv+0xb4>)
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027f4:	4b19      	ldr	r3, [pc, #100]	; (800285c <_ZL12MX_ADC1_Initv+0xac>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80027fa:	4b18      	ldr	r3, [pc, #96]	; (800285c <_ZL12MX_ADC1_Initv+0xac>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002800:	4b16      	ldr	r3, [pc, #88]	; (800285c <_ZL12MX_ADC1_Initv+0xac>)
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002808:	4b14      	ldr	r3, [pc, #80]	; (800285c <_ZL12MX_ADC1_Initv+0xac>)
 800280a:	2201      	movs	r2, #1
 800280c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800280e:	4813      	ldr	r0, [pc, #76]	; (800285c <_ZL12MX_ADC1_Initv+0xac>)
 8002810:	f006 fea0 	bl	8009554 <HAL_ADC_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	bf14      	ite	ne
 800281a:	2301      	movne	r3, #1
 800281c:	2300      	moveq	r3, #0
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8002824:	f000 fbc2 	bl	8002fac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002828:	230a      	movs	r3, #10
 800282a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800282c:	2301      	movs	r3, #1
 800282e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002830:	2300      	movs	r3, #0
 8002832:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002834:	463b      	mov	r3, r7
 8002836:	4619      	mov	r1, r3
 8002838:	4808      	ldr	r0, [pc, #32]	; (800285c <_ZL12MX_ADC1_Initv+0xac>)
 800283a:	f006 fffd 	bl	8009838 <HAL_ADC_ConfigChannel>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf14      	ite	ne
 8002844:	2301      	movne	r3, #1
 8002846:	2300      	moveq	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 800284e:	f000 fbad 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200002f4 	.word	0x200002f4
 8002860:	40012000 	.word	0x40012000
 8002864:	0f000001 	.word	0x0f000001

08002868 <_ZL15MX_SDIO_SD_Initv>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800286c:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 800286e:	4a1a      	ldr	r2, [pc, #104]	; (80028d8 <_ZL15MX_SDIO_SD_Initv+0x70>)
 8002870:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002872:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002874:	2200      	movs	r2, #0
 8002876:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002878:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 800287a:	2200      	movs	r2, #0
 800287c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002880:	2200      	movs	r2, #0
 8002882:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002884:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002886:	2200      	movs	r2, #0
 8002888:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 800288c:	2200      	movs	r2, #0
 800288e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8002890:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002892:	2208      	movs	r2, #8
 8002894:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8002896:	480f      	ldr	r0, [pc, #60]	; (80028d4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002898:	f00a f81e 	bl	800c8d8 <HAL_SD_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	bf14      	ite	ne
 80028a2:	2301      	movne	r3, #1
 80028a4:	2300      	moveq	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <_ZL15MX_SDIO_SD_Initv+0x48>
  {
    Error_Handler();
 80028ac:	f000 fb7e 	bl	8002fac <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80028b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028b4:	4807      	ldr	r0, [pc, #28]	; (80028d4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 80028b6:	f00a fa63 	bl	800cd80 <HAL_SD_ConfigWideBusOperation>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <_ZL15MX_SDIO_SD_Initv+0x66>
  {
    Error_Handler();
 80028ca:	f000 fb6f 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	2000039c 	.word	0x2000039c
 80028d8:	40012c00 	.word	0x40012c00

080028dc <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80028e0:	4b1a      	ldr	r3, [pc, #104]	; (800294c <_ZL12MX_SPI2_Initv+0x70>)
 80028e2:	4a1b      	ldr	r2, [pc, #108]	; (8002950 <_ZL12MX_SPI2_Initv+0x74>)
 80028e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028e6:	4b19      	ldr	r3, [pc, #100]	; (800294c <_ZL12MX_SPI2_Initv+0x70>)
 80028e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028ee:	4b17      	ldr	r3, [pc, #92]	; (800294c <_ZL12MX_SPI2_Initv+0x70>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028f4:	4b15      	ldr	r3, [pc, #84]	; (800294c <_ZL12MX_SPI2_Initv+0x70>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028fa:	4b14      	ldr	r3, [pc, #80]	; (800294c <_ZL12MX_SPI2_Initv+0x70>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <_ZL12MX_SPI2_Initv+0x70>)
 8002902:	2200      	movs	r2, #0
 8002904:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <_ZL12MX_SPI2_Initv+0x70>)
 8002908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800290e:	4b0f      	ldr	r3, [pc, #60]	; (800294c <_ZL12MX_SPI2_Initv+0x70>)
 8002910:	2200      	movs	r2, #0
 8002912:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002914:	4b0d      	ldr	r3, [pc, #52]	; (800294c <_ZL12MX_SPI2_Initv+0x70>)
 8002916:	2200      	movs	r2, #0
 8002918:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800291a:	4b0c      	ldr	r3, [pc, #48]	; (800294c <_ZL12MX_SPI2_Initv+0x70>)
 800291c:	2200      	movs	r2, #0
 800291e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002920:	4b0a      	ldr	r3, [pc, #40]	; (800294c <_ZL12MX_SPI2_Initv+0x70>)
 8002922:	2200      	movs	r2, #0
 8002924:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002926:	4b09      	ldr	r3, [pc, #36]	; (800294c <_ZL12MX_SPI2_Initv+0x70>)
 8002928:	220a      	movs	r2, #10
 800292a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800292c:	4807      	ldr	r0, [pc, #28]	; (800294c <_ZL12MX_SPI2_Initv+0x70>)
 800292e:	f00a fd86 	bl	800d43e <HAL_SPI_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf14      	ite	ne
 8002938:	2301      	movne	r3, #1
 800293a:	2300      	moveq	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8002942:	f000 fb33 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000420 	.word	0x20000420
 8002950:	40003800 	.word	0x40003800

08002954 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08e      	sub	sp, #56	; 0x38
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800295a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	609a      	str	r2, [r3, #8]
 8002966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002968:	f107 0320 	add.w	r3, r7, #32
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
 8002980:	615a      	str	r2, [r3, #20]
 8002982:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002984:	4b51      	ldr	r3, [pc, #324]	; (8002acc <_ZL12MX_TIM3_Initv+0x178>)
 8002986:	4a52      	ldr	r2, [pc, #328]	; (8002ad0 <_ZL12MX_TIM3_Initv+0x17c>)
 8002988:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3-1;
 800298a:	4b50      	ldr	r3, [pc, #320]	; (8002acc <_ZL12MX_TIM3_Initv+0x178>)
 800298c:	2202      	movs	r2, #2
 800298e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002990:	4b4e      	ldr	r3, [pc, #312]	; (8002acc <_ZL12MX_TIM3_Initv+0x178>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6000-1;
 8002996:	4b4d      	ldr	r3, [pc, #308]	; (8002acc <_ZL12MX_TIM3_Initv+0x178>)
 8002998:	f241 726f 	movw	r2, #5999	; 0x176f
 800299c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800299e:	4b4b      	ldr	r3, [pc, #300]	; (8002acc <_ZL12MX_TIM3_Initv+0x178>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a4:	4b49      	ldr	r3, [pc, #292]	; (8002acc <_ZL12MX_TIM3_Initv+0x178>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029aa:	4848      	ldr	r0, [pc, #288]	; (8002acc <_ZL12MX_TIM3_Initv+0x178>)
 80029ac:	f00b fb00 	bl	800dfb0 <HAL_TIM_Base_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	bf14      	ite	ne
 80029b6:	2301      	movne	r3, #1
 80029b8:	2300      	moveq	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 80029c0:	f000 faf4 	bl	8002fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ce:	4619      	mov	r1, r3
 80029d0:	483e      	ldr	r0, [pc, #248]	; (8002acc <_ZL12MX_TIM3_Initv+0x178>)
 80029d2:	f00b fe99 	bl	800e708 <HAL_TIM_ConfigClockSource>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf14      	ite	ne
 80029dc:	2301      	movne	r3, #1
 80029de:	2300      	moveq	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 80029e6:	f000 fae1 	bl	8002fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029ea:	4838      	ldr	r0, [pc, #224]	; (8002acc <_ZL12MX_TIM3_Initv+0x178>)
 80029ec:	f00b fba0 	bl	800e130 <HAL_TIM_PWM_Init>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	bf14      	ite	ne
 80029f6:	2301      	movne	r3, #1
 80029f8:	2300      	moveq	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8002a00:	f000 fad4 	bl	8002fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a04:	2300      	movs	r3, #0
 8002a06:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a0c:	f107 0320 	add.w	r3, r7, #32
 8002a10:	4619      	mov	r1, r3
 8002a12:	482e      	ldr	r0, [pc, #184]	; (8002acc <_ZL12MX_TIM3_Initv+0x178>)
 8002a14:	f00c fa78 	bl	800ef08 <HAL_TIMEx_MasterConfigSynchronization>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	bf14      	ite	ne
 8002a1e:	2301      	movne	r3, #1
 8002a20:	2300      	moveq	r3, #0
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8002a28:	f000 fac0 	bl	8002fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a2c:	2360      	movs	r3, #96	; 0x60
 8002a2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a3c:	1d3b      	adds	r3, r7, #4
 8002a3e:	2200      	movs	r2, #0
 8002a40:	4619      	mov	r1, r3
 8002a42:	4822      	ldr	r0, [pc, #136]	; (8002acc <_ZL12MX_TIM3_Initv+0x178>)
 8002a44:	f00b fd9e 	bl	800e584 <HAL_TIM_PWM_ConfigChannel>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	bf14      	ite	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	2300      	moveq	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8002a58:	f000 faa8 	bl	8002fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a5c:	1d3b      	adds	r3, r7, #4
 8002a5e:	2204      	movs	r2, #4
 8002a60:	4619      	mov	r1, r3
 8002a62:	481a      	ldr	r0, [pc, #104]	; (8002acc <_ZL12MX_TIM3_Initv+0x178>)
 8002a64:	f00b fd8e 	bl	800e584 <HAL_TIM_PWM_ConfigChannel>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bf14      	ite	ne
 8002a6e:	2301      	movne	r3, #1
 8002a70:	2300      	moveq	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 8002a78:	f000 fa98 	bl	8002fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	2208      	movs	r2, #8
 8002a80:	4619      	mov	r1, r3
 8002a82:	4812      	ldr	r0, [pc, #72]	; (8002acc <_ZL12MX_TIM3_Initv+0x178>)
 8002a84:	f00b fd7e 	bl	800e584 <HAL_TIM_PWM_ConfigChannel>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bf14      	ite	ne
 8002a8e:	2301      	movne	r3, #1
 8002a90:	2300      	moveq	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <_ZL12MX_TIM3_Initv+0x148>
  {
    Error_Handler();
 8002a98:	f000 fa88 	bl	8002fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	220c      	movs	r2, #12
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	480a      	ldr	r0, [pc, #40]	; (8002acc <_ZL12MX_TIM3_Initv+0x178>)
 8002aa4:	f00b fd6e 	bl	800e584 <HAL_TIM_PWM_ConfigChannel>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	bf14      	ite	ne
 8002aae:	2301      	movne	r3, #1
 8002ab0:	2300      	moveq	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <_ZL12MX_TIM3_Initv+0x168>
  {
    Error_Handler();
 8002ab8:	f000 fa78 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002abc:	4803      	ldr	r0, [pc, #12]	; (8002acc <_ZL12MX_TIM3_Initv+0x178>)
 8002abe:	f000 fc6f 	bl	80033a0 <HAL_TIM_MspPostInit>

}
 8002ac2:	bf00      	nop
 8002ac4:	3738      	adds	r7, #56	; 0x38
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000538 	.word	0x20000538
 8002ad0:	40000400 	.word	0x40000400

08002ad4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ada:	f107 0308 	add.w	r3, r7, #8
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	609a      	str	r2, [r3, #8]
 8002ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae8:	463b      	mov	r3, r7
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002af0:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <_ZL12MX_TIM4_Initv+0xb0>)
 8002af2:	4a25      	ldr	r2, [pc, #148]	; (8002b88 <_ZL12MX_TIM4_Initv+0xb4>)
 8002af4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 144-1;
 8002af6:	4b23      	ldr	r3, [pc, #140]	; (8002b84 <_ZL12MX_TIM4_Initv+0xb0>)
 8002af8:	228f      	movs	r2, #143	; 0x8f
 8002afa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002afc:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <_ZL12MX_TIM4_Initv+0xb0>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 8002b02:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b04:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002b08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	; (8002b84 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b10:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b16:	481b      	ldr	r0, [pc, #108]	; (8002b84 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b18:	f00b fa4a 	bl	800dfb0 <HAL_TIM_Base_Init>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	bf14      	ite	ne
 8002b22:	2301      	movne	r3, #1
 8002b24:	2300      	moveq	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8002b2c:	f000 fa3e 	bl	8002fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b36:	f107 0308 	add.w	r3, r7, #8
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4811      	ldr	r0, [pc, #68]	; (8002b84 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b3e:	f00b fde3 	bl	800e708 <HAL_TIM_ConfigClockSource>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bf14      	ite	ne
 8002b48:	2301      	movne	r3, #1
 8002b4a:	2300      	moveq	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8002b52:	f000 fa2b 	bl	8002fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b56:	2300      	movs	r3, #0
 8002b58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b5e:	463b      	mov	r3, r7
 8002b60:	4619      	mov	r1, r3
 8002b62:	4808      	ldr	r0, [pc, #32]	; (8002b84 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b64:	f00c f9d0 	bl	800ef08 <HAL_TIMEx_MasterConfigSynchronization>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bf14      	ite	ne
 8002b6e:	2301      	movne	r3, #1
 8002b70:	2300      	moveq	r3, #0
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8002b78:	f000 fa18 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b7c:	bf00      	nop
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000580 	.word	0x20000580
 8002b88:	40000800 	.word	0x40000800

08002b8c <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002b90:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <_ZL13MX_UART4_Initv+0x54>)
 8002b92:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <_ZL13MX_UART4_Initv+0x58>)
 8002b94:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002b96:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <_ZL13MX_UART4_Initv+0x54>)
 8002b98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b9c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002b9e:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <_ZL13MX_UART4_Initv+0x54>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002ba4:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <_ZL13MX_UART4_Initv+0x54>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002baa:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <_ZL13MX_UART4_Initv+0x54>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <_ZL13MX_UART4_Initv+0x54>)
 8002bb2:	220c      	movs	r2, #12
 8002bb4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <_ZL13MX_UART4_Initv+0x54>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bbc:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <_ZL13MX_UART4_Initv+0x54>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002bc2:	4807      	ldr	r0, [pc, #28]	; (8002be0 <_ZL13MX_UART4_Initv+0x54>)
 8002bc4:	f00c fa30 	bl	800f028 <HAL_UART_Init>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf14      	ite	ne
 8002bce:	2301      	movne	r3, #1
 8002bd0:	2300      	moveq	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 8002bd8:	f000 f9e8 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002bdc:	bf00      	nop
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	200005c8 	.word	0x200005c8
 8002be4:	40004c00 	.word	0x40004c00

08002be8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bec:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002bee:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002bf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002bf2:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002bf4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002bf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c00:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c0e:	220c      	movs	r2, #12
 8002c10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c18:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c1e:	4807      	ldr	r0, [pc, #28]	; (8002c3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c20:	f00c fa02 	bl	800f028 <HAL_UART_Init>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	bf14      	ite	ne
 8002c2a:	2301      	movne	r3, #1
 8002c2c:	2300      	moveq	r3, #0
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002c34:	f000 f9ba 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	2000060c 	.word	0x2000060c
 8002c40:	40011000 	.word	0x40011000

08002c44 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c4a:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <_ZL19MX_USART2_UART_Initv+0x58>)
 8002c4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c50:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002c54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c56:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c6a:	220c      	movs	r2, #12
 8002c6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c74:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c7a:	4807      	ldr	r0, [pc, #28]	; (8002c98 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c7c:	f00c f9d4 	bl	800f028 <HAL_UART_Init>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bf14      	ite	ne
 8002c86:	2301      	movne	r3, #1
 8002c88:	2300      	moveq	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002c90:	f000 f98c 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c94:	bf00      	nop
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000650 	.word	0x20000650
 8002c9c:	40004400 	.word	0x40004400

08002ca0 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ca4:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002ca6:	4a15      	ldr	r2, [pc, #84]	; (8002cfc <_ZL19MX_USART3_UART_Initv+0x5c>)
 8002ca8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8002caa:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cac:	4a14      	ldr	r2, [pc, #80]	; (8002d00 <_ZL19MX_USART3_UART_Initv+0x60>)
 8002cae:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_2;
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cc4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002cc6:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cc8:	220c      	movs	r2, #12
 8002cca:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cd2:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cd8:	4807      	ldr	r0, [pc, #28]	; (8002cf8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cda:	f00c f9a5 	bl	800f028 <HAL_UART_Init>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	bf14      	ite	ne
 8002ce4:	2301      	movne	r3, #1
 8002ce6:	2300      	moveq	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <_ZL19MX_USART3_UART_Initv+0x52>
  {
    Error_Handler();
 8002cee:	f000 f95d 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000694 	.word	0x20000694
 8002cfc:	40004800 	.word	0x40004800
 8002d00:	000186a0 	.word	0x000186a0

08002d04 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002d08:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d0a:	4a14      	ldr	r2, [pc, #80]	; (8002d5c <_ZL19MX_USART6_UART_Initv+0x58>)
 8002d0c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002d0e:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d14:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d16:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002d1c:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002d22:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d2a:	220c      	movs	r2, #12
 8002d2c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002d3a:	4807      	ldr	r0, [pc, #28]	; (8002d58 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d3c:	f00c f974 	bl	800f028 <HAL_UART_Init>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	bf14      	ite	ne
 8002d46:	2301      	movne	r3, #1
 8002d48:	2300      	moveq	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8002d50:	f000 f92c 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002d54:	bf00      	nop
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	200006d8 	.word	0x200006d8
 8002d5c:	40011400 	.word	0x40011400

08002d60 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]
 8002d6a:	4b2f      	ldr	r3, [pc, #188]	; (8002e28 <_ZL11MX_DMA_Initv+0xc8>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	4a2e      	ldr	r2, [pc, #184]	; (8002e28 <_ZL11MX_DMA_Initv+0xc8>)
 8002d70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d74:	6313      	str	r3, [r2, #48]	; 0x30
 8002d76:	4b2c      	ldr	r3, [pc, #176]	; (8002e28 <_ZL11MX_DMA_Initv+0xc8>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	4b28      	ldr	r3, [pc, #160]	; (8002e28 <_ZL11MX_DMA_Initv+0xc8>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	4a27      	ldr	r2, [pc, #156]	; (8002e28 <_ZL11MX_DMA_Initv+0xc8>)
 8002d8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d90:	6313      	str	r3, [r2, #48]	; 0x30
 8002d92:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <_ZL11MX_DMA_Initv+0xc8>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2105      	movs	r1, #5
 8002da2:	200c      	movs	r0, #12
 8002da4:	f007 f8a0 	bl	8009ee8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002da8:	200c      	movs	r0, #12
 8002daa:	f007 f8b9 	bl	8009f20 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2105      	movs	r1, #5
 8002db2:	200d      	movs	r0, #13
 8002db4:	f007 f898 	bl	8009ee8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002db8:	200d      	movs	r0, #13
 8002dba:	f007 f8b1 	bl	8009f20 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2105      	movs	r1, #5
 8002dc2:	200e      	movs	r0, #14
 8002dc4:	f007 f890 	bl	8009ee8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002dc8:	200e      	movs	r0, #14
 8002dca:	f007 f8a9 	bl	8009f20 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2105      	movs	r1, #5
 8002dd2:	200f      	movs	r0, #15
 8002dd4:	f007 f888 	bl	8009ee8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002dd8:	200f      	movs	r0, #15
 8002dda:	f007 f8a1 	bl	8009f20 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2105      	movs	r1, #5
 8002de2:	2010      	movs	r0, #16
 8002de4:	f007 f880 	bl	8009ee8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002de8:	2010      	movs	r0, #16
 8002dea:	f007 f899 	bl	8009f20 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002dee:	2200      	movs	r2, #0
 8002df0:	2105      	movs	r1, #5
 8002df2:	2038      	movs	r0, #56	; 0x38
 8002df4:	f007 f878 	bl	8009ee8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002df8:	2038      	movs	r0, #56	; 0x38
 8002dfa:	f007 f891 	bl	8009f20 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2105      	movs	r1, #5
 8002e02:	2039      	movs	r0, #57	; 0x39
 8002e04:	f007 f870 	bl	8009ee8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002e08:	2039      	movs	r0, #57	; 0x39
 8002e0a:	f007 f889 	bl	8009f20 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2105      	movs	r1, #5
 8002e12:	2046      	movs	r0, #70	; 0x46
 8002e14:	f007 f868 	bl	8009ee8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002e18:	2046      	movs	r0, #70	; 0x46
 8002e1a:	f007 f881 	bl	8009f20 <HAL_NVIC_EnableIRQ>

}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800

08002e2c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08a      	sub	sp, #40	; 0x28
 8002e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e32:	f107 0314 	add.w	r3, r7, #20
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	609a      	str	r2, [r3, #8]
 8002e3e:	60da      	str	r2, [r3, #12]
 8002e40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	4b55      	ldr	r3, [pc, #340]	; (8002f9c <_ZL12MX_GPIO_Initv+0x170>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	4a54      	ldr	r2, [pc, #336]	; (8002f9c <_ZL12MX_GPIO_Initv+0x170>)
 8002e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e50:	6313      	str	r3, [r2, #48]	; 0x30
 8002e52:	4b52      	ldr	r3, [pc, #328]	; (8002f9c <_ZL12MX_GPIO_Initv+0x170>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	4b4e      	ldr	r3, [pc, #312]	; (8002f9c <_ZL12MX_GPIO_Initv+0x170>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4a4d      	ldr	r2, [pc, #308]	; (8002f9c <_ZL12MX_GPIO_Initv+0x170>)
 8002e68:	f043 0304 	orr.w	r3, r3, #4
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6e:	4b4b      	ldr	r3, [pc, #300]	; (8002f9c <_ZL12MX_GPIO_Initv+0x170>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <_ZL12MX_GPIO_Initv+0x170>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	4a46      	ldr	r2, [pc, #280]	; (8002f9c <_ZL12MX_GPIO_Initv+0x170>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8a:	4b44      	ldr	r3, [pc, #272]	; (8002f9c <_ZL12MX_GPIO_Initv+0x170>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	4b40      	ldr	r3, [pc, #256]	; (8002f9c <_ZL12MX_GPIO_Initv+0x170>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	4a3f      	ldr	r2, [pc, #252]	; (8002f9c <_ZL12MX_GPIO_Initv+0x170>)
 8002ea0:	f043 0302 	orr.w	r3, r3, #2
 8002ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea6:	4b3d      	ldr	r3, [pc, #244]	; (8002f9c <_ZL12MX_GPIO_Initv+0x170>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	603b      	str	r3, [r7, #0]
 8002eb6:	4b39      	ldr	r3, [pc, #228]	; (8002f9c <_ZL12MX_GPIO_Initv+0x170>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	4a38      	ldr	r2, [pc, #224]	; (8002f9c <_ZL12MX_GPIO_Initv+0x170>)
 8002ebc:	f043 0308 	orr.w	r3, r3, #8
 8002ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec2:	4b36      	ldr	r3, [pc, #216]	; (8002f9c <_ZL12MX_GPIO_Initv+0x170>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2130      	movs	r1, #48	; 0x30
 8002ed2:	4833      	ldr	r0, [pc, #204]	; (8002fa0 <_ZL12MX_GPIO_Initv+0x174>)
 8002ed4:	f007 ff92 	bl	800adfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2120      	movs	r1, #32
 8002edc:	4831      	ldr	r0, [pc, #196]	; (8002fa4 <_ZL12MX_GPIO_Initv+0x178>)
 8002ede:	f007 ff8d 	bl	800adfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ee8:	482f      	ldr	r0, [pc, #188]	; (8002fa8 <_ZL12MX_GPIO_Initv+0x17c>)
 8002eea:	f007 ff87 	bl	800adfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002eee:	2330      	movs	r3, #48	; 0x30
 8002ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efa:	2300      	movs	r3, #0
 8002efc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efe:	f107 0314 	add.w	r3, r7, #20
 8002f02:	4619      	mov	r1, r3
 8002f04:	4826      	ldr	r0, [pc, #152]	; (8002fa0 <_ZL12MX_GPIO_Initv+0x174>)
 8002f06:	f007 fddd 	bl	800aac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f0a:	2310      	movs	r3, #16
 8002f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f0e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4821      	ldr	r0, [pc, #132]	; (8002fa4 <_ZL12MX_GPIO_Initv+0x178>)
 8002f20:	f007 fdd0 	bl	800aac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f24:	2320      	movs	r3, #32
 8002f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f30:	2300      	movs	r3, #0
 8002f32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f34:	f107 0314 	add.w	r3, r7, #20
 8002f38:	4619      	mov	r1, r3
 8002f3a:	481a      	ldr	r0, [pc, #104]	; (8002fa4 <_ZL12MX_GPIO_Initv+0x178>)
 8002f3c:	f007 fdc2 	bl	800aac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f40:	2304      	movs	r3, #4
 8002f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4e:	f107 0314 	add.w	r3, r7, #20
 8002f52:	4619      	mov	r1, r3
 8002f54:	4814      	ldr	r0, [pc, #80]	; (8002fa8 <_ZL12MX_GPIO_Initv+0x17c>)
 8002f56:	f007 fdb5 	bl	800aac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f60:	2301      	movs	r3, #1
 8002f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f6c:	f107 0314 	add.w	r3, r7, #20
 8002f70:	4619      	mov	r1, r3
 8002f72:	480d      	ldr	r0, [pc, #52]	; (8002fa8 <_ZL12MX_GPIO_Initv+0x17c>)
 8002f74:	f007 fda6 	bl	800aac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f88:	f107 0314 	add.w	r3, r7, #20
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4804      	ldr	r0, [pc, #16]	; (8002fa0 <_ZL12MX_GPIO_Initv+0x174>)
 8002f90:	f007 fd98 	bl	800aac4 <HAL_GPIO_Init>
}
 8002f94:	bf00      	nop
 8002f96:	3728      	adds	r7, #40	; 0x28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40020000 	.word	0x40020000
 8002fa4:	40020800 	.word	0x40020800
 8002fa8:	40020400 	.word	0x40020400

08002fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb0:	b672      	cpsid	i
}
 8002fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fb4:	e7fe      	b.n	8002fb4 <Error_Handler+0x8>
	...

08002fb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	4b12      	ldr	r3, [pc, #72]	; (800300c <HAL_MspInit+0x54>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	4a11      	ldr	r2, [pc, #68]	; (800300c <HAL_MspInit+0x54>)
 8002fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fce:	4b0f      	ldr	r3, [pc, #60]	; (800300c <HAL_MspInit+0x54>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_MspInit+0x54>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	4a0a      	ldr	r2, [pc, #40]	; (800300c <HAL_MspInit+0x54>)
 8002fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fea:	4b08      	ldr	r3, [pc, #32]	; (800300c <HAL_MspInit+0x54>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	210f      	movs	r1, #15
 8002ffa:	f06f 0001 	mvn.w	r0, #1
 8002ffe:	f006 ff73 	bl	8009ee8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800

08003010 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	; 0x28
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003018:	f107 0314 	add.w	r3, r7, #20
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	60da      	str	r2, [r3, #12]
 8003026:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a2e      	ldr	r2, [pc, #184]	; (80030e8 <HAL_ADC_MspInit+0xd8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d156      	bne.n	80030e0 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	4b2d      	ldr	r3, [pc, #180]	; (80030ec <HAL_ADC_MspInit+0xdc>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	4a2c      	ldr	r2, [pc, #176]	; (80030ec <HAL_ADC_MspInit+0xdc>)
 800303c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003040:	6453      	str	r3, [r2, #68]	; 0x44
 8003042:	4b2a      	ldr	r3, [pc, #168]	; (80030ec <HAL_ADC_MspInit+0xdc>)
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	4b26      	ldr	r3, [pc, #152]	; (80030ec <HAL_ADC_MspInit+0xdc>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	4a25      	ldr	r2, [pc, #148]	; (80030ec <HAL_ADC_MspInit+0xdc>)
 8003058:	f043 0304 	orr.w	r3, r3, #4
 800305c:	6313      	str	r3, [r2, #48]	; 0x30
 800305e:	4b23      	ldr	r3, [pc, #140]	; (80030ec <HAL_ADC_MspInit+0xdc>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800306a:	2301      	movs	r3, #1
 800306c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800306e:	2303      	movs	r3, #3
 8003070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003076:	f107 0314 	add.w	r3, r7, #20
 800307a:	4619      	mov	r1, r3
 800307c:	481c      	ldr	r0, [pc, #112]	; (80030f0 <HAL_ADC_MspInit+0xe0>)
 800307e:	f007 fd21 	bl	800aac4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003082:	4b1c      	ldr	r3, [pc, #112]	; (80030f4 <HAL_ADC_MspInit+0xe4>)
 8003084:	4a1c      	ldr	r2, [pc, #112]	; (80030f8 <HAL_ADC_MspInit+0xe8>)
 8003086:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003088:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <HAL_ADC_MspInit+0xe4>)
 800308a:	2200      	movs	r2, #0
 800308c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800308e:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <HAL_ADC_MspInit+0xe4>)
 8003090:	2200      	movs	r2, #0
 8003092:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003094:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <HAL_ADC_MspInit+0xe4>)
 8003096:	2200      	movs	r2, #0
 8003098:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800309a:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <HAL_ADC_MspInit+0xe4>)
 800309c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030a2:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <HAL_ADC_MspInit+0xe4>)
 80030a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030aa:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <HAL_ADC_MspInit+0xe4>)
 80030ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80030b2:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <HAL_ADC_MspInit+0xe4>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80030b8:	4b0e      	ldr	r3, [pc, #56]	; (80030f4 <HAL_ADC_MspInit+0xe4>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030be:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <HAL_ADC_MspInit+0xe4>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030c4:	480b      	ldr	r0, [pc, #44]	; (80030f4 <HAL_ADC_MspInit+0xe4>)
 80030c6:	f006 ff39 	bl	8009f3c <HAL_DMA_Init>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80030d0:	f7ff ff6c 	bl	8002fac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a07      	ldr	r2, [pc, #28]	; (80030f4 <HAL_ADC_MspInit+0xe4>)
 80030d8:	639a      	str	r2, [r3, #56]	; 0x38
 80030da:	4a06      	ldr	r2, [pc, #24]	; (80030f4 <HAL_ADC_MspInit+0xe4>)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030e0:	bf00      	nop
 80030e2:	3728      	adds	r7, #40	; 0x28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40012000 	.word	0x40012000
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40020800 	.word	0x40020800
 80030f4:	2000033c 	.word	0x2000033c
 80030f8:	40026410 	.word	0x40026410

080030fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08a      	sub	sp, #40	; 0x28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003104:	f107 0314 	add.w	r3, r7, #20
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a28      	ldr	r2, [pc, #160]	; (80031bc <HAL_SD_MspInit+0xc0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d14a      	bne.n	80031b4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <HAL_SD_MspInit+0xc4>)
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	4a26      	ldr	r2, [pc, #152]	; (80031c0 <HAL_SD_MspInit+0xc4>)
 8003128:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800312c:	6453      	str	r3, [r2, #68]	; 0x44
 800312e:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <HAL_SD_MspInit+0xc4>)
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <HAL_SD_MspInit+0xc4>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <HAL_SD_MspInit+0xc4>)
 8003144:	f043 0304 	orr.w	r3, r3, #4
 8003148:	6313      	str	r3, [r2, #48]	; 0x30
 800314a:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_SD_MspInit+0xc4>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <HAL_SD_MspInit+0xc4>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	4a18      	ldr	r2, [pc, #96]	; (80031c0 <HAL_SD_MspInit+0xc4>)
 8003160:	f043 0308 	orr.w	r3, r3, #8
 8003164:	6313      	str	r3, [r2, #48]	; 0x30
 8003166:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <HAL_SD_MspInit+0xc4>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003172:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003176:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003178:	2302      	movs	r3, #2
 800317a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	2300      	movs	r3, #0
 800317e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003180:	2303      	movs	r3, #3
 8003182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003184:	230c      	movs	r3, #12
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003188:	f107 0314 	add.w	r3, r7, #20
 800318c:	4619      	mov	r1, r3
 800318e:	480d      	ldr	r0, [pc, #52]	; (80031c4 <HAL_SD_MspInit+0xc8>)
 8003190:	f007 fc98 	bl	800aac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003194:	2304      	movs	r3, #4
 8003196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003198:	2302      	movs	r3, #2
 800319a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	2300      	movs	r3, #0
 800319e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a0:	2303      	movs	r3, #3
 80031a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80031a4:	230c      	movs	r3, #12
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031a8:	f107 0314 	add.w	r3, r7, #20
 80031ac:	4619      	mov	r1, r3
 80031ae:	4806      	ldr	r0, [pc, #24]	; (80031c8 <HAL_SD_MspInit+0xcc>)
 80031b0:	f007 fc88 	bl	800aac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80031b4:	bf00      	nop
 80031b6:	3728      	adds	r7, #40	; 0x28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40012c00 	.word	0x40012c00
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40020800 	.word	0x40020800
 80031c8:	40020c00 	.word	0x40020c00

080031cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08a      	sub	sp, #40	; 0x28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d4:	f107 0314 	add.w	r3, r7, #20
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a47      	ldr	r2, [pc, #284]	; (8003308 <HAL_SPI_MspInit+0x13c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	f040 8087 	bne.w	80032fe <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031f0:	2300      	movs	r3, #0
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	4b45      	ldr	r3, [pc, #276]	; (800330c <HAL_SPI_MspInit+0x140>)
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	4a44      	ldr	r2, [pc, #272]	; (800330c <HAL_SPI_MspInit+0x140>)
 80031fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003200:	4b42      	ldr	r3, [pc, #264]	; (800330c <HAL_SPI_MspInit+0x140>)
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	4b3e      	ldr	r3, [pc, #248]	; (800330c <HAL_SPI_MspInit+0x140>)
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	4a3d      	ldr	r2, [pc, #244]	; (800330c <HAL_SPI_MspInit+0x140>)
 8003216:	f043 0302 	orr.w	r3, r3, #2
 800321a:	6313      	str	r3, [r2, #48]	; 0x30
 800321c:	4b3b      	ldr	r3, [pc, #236]	; (800330c <HAL_SPI_MspInit+0x140>)
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003228:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800322c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322e:	2302      	movs	r3, #2
 8003230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003236:	2303      	movs	r3, #3
 8003238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800323a:	2305      	movs	r3, #5
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323e:	f107 0314 	add.w	r3, r7, #20
 8003242:	4619      	mov	r1, r3
 8003244:	4832      	ldr	r0, [pc, #200]	; (8003310 <HAL_SPI_MspInit+0x144>)
 8003246:	f007 fc3d 	bl	800aac4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800324a:	4b32      	ldr	r3, [pc, #200]	; (8003314 <HAL_SPI_MspInit+0x148>)
 800324c:	4a32      	ldr	r2, [pc, #200]	; (8003318 <HAL_SPI_MspInit+0x14c>)
 800324e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003250:	4b30      	ldr	r3, [pc, #192]	; (8003314 <HAL_SPI_MspInit+0x148>)
 8003252:	2200      	movs	r2, #0
 8003254:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003256:	4b2f      	ldr	r3, [pc, #188]	; (8003314 <HAL_SPI_MspInit+0x148>)
 8003258:	2200      	movs	r2, #0
 800325a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800325c:	4b2d      	ldr	r3, [pc, #180]	; (8003314 <HAL_SPI_MspInit+0x148>)
 800325e:	2200      	movs	r2, #0
 8003260:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003262:	4b2c      	ldr	r3, [pc, #176]	; (8003314 <HAL_SPI_MspInit+0x148>)
 8003264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003268:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800326a:	4b2a      	ldr	r3, [pc, #168]	; (8003314 <HAL_SPI_MspInit+0x148>)
 800326c:	2200      	movs	r2, #0
 800326e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003270:	4b28      	ldr	r3, [pc, #160]	; (8003314 <HAL_SPI_MspInit+0x148>)
 8003272:	2200      	movs	r2, #0
 8003274:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003276:	4b27      	ldr	r3, [pc, #156]	; (8003314 <HAL_SPI_MspInit+0x148>)
 8003278:	2200      	movs	r2, #0
 800327a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800327c:	4b25      	ldr	r3, [pc, #148]	; (8003314 <HAL_SPI_MspInit+0x148>)
 800327e:	2200      	movs	r2, #0
 8003280:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003282:	4b24      	ldr	r3, [pc, #144]	; (8003314 <HAL_SPI_MspInit+0x148>)
 8003284:	2200      	movs	r2, #0
 8003286:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003288:	4822      	ldr	r0, [pc, #136]	; (8003314 <HAL_SPI_MspInit+0x148>)
 800328a:	f006 fe57 	bl	8009f3c <HAL_DMA_Init>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8003294:	f7ff fe8a 	bl	8002fac <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a1e      	ldr	r2, [pc, #120]	; (8003314 <HAL_SPI_MspInit+0x148>)
 800329c:	64da      	str	r2, [r3, #76]	; 0x4c
 800329e:	4a1d      	ldr	r2, [pc, #116]	; (8003314 <HAL_SPI_MspInit+0x148>)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80032a4:	4b1d      	ldr	r3, [pc, #116]	; (800331c <HAL_SPI_MspInit+0x150>)
 80032a6:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <HAL_SPI_MspInit+0x154>)
 80032a8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80032aa:	4b1c      	ldr	r3, [pc, #112]	; (800331c <HAL_SPI_MspInit+0x150>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032b0:	4b1a      	ldr	r3, [pc, #104]	; (800331c <HAL_SPI_MspInit+0x150>)
 80032b2:	2240      	movs	r2, #64	; 0x40
 80032b4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032b6:	4b19      	ldr	r3, [pc, #100]	; (800331c <HAL_SPI_MspInit+0x150>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032bc:	4b17      	ldr	r3, [pc, #92]	; (800331c <HAL_SPI_MspInit+0x150>)
 80032be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032c2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032c4:	4b15      	ldr	r3, [pc, #84]	; (800331c <HAL_SPI_MspInit+0x150>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032ca:	4b14      	ldr	r3, [pc, #80]	; (800331c <HAL_SPI_MspInit+0x150>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80032d0:	4b12      	ldr	r3, [pc, #72]	; (800331c <HAL_SPI_MspInit+0x150>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032d6:	4b11      	ldr	r3, [pc, #68]	; (800331c <HAL_SPI_MspInit+0x150>)
 80032d8:	2200      	movs	r2, #0
 80032da:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032dc:	4b0f      	ldr	r3, [pc, #60]	; (800331c <HAL_SPI_MspInit+0x150>)
 80032de:	2200      	movs	r2, #0
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80032e2:	480e      	ldr	r0, [pc, #56]	; (800331c <HAL_SPI_MspInit+0x150>)
 80032e4:	f006 fe2a 	bl	8009f3c <HAL_DMA_Init>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 80032ee:	f7ff fe5d 	bl	8002fac <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a09      	ldr	r2, [pc, #36]	; (800331c <HAL_SPI_MspInit+0x150>)
 80032f6:	649a      	str	r2, [r3, #72]	; 0x48
 80032f8:	4a08      	ldr	r2, [pc, #32]	; (800331c <HAL_SPI_MspInit+0x150>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80032fe:	bf00      	nop
 8003300:	3728      	adds	r7, #40	; 0x28
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40003800 	.word	0x40003800
 800330c:	40023800 	.word	0x40023800
 8003310:	40020400 	.word	0x40020400
 8003314:	20000478 	.word	0x20000478
 8003318:	40026058 	.word	0x40026058
 800331c:	200004d8 	.word	0x200004d8
 8003320:	40026070 	.word	0x40026070

08003324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a18      	ldr	r2, [pc, #96]	; (8003394 <HAL_TIM_Base_MspInit+0x70>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d10e      	bne.n	8003354 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	4b17      	ldr	r3, [pc, #92]	; (8003398 <HAL_TIM_Base_MspInit+0x74>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	4a16      	ldr	r2, [pc, #88]	; (8003398 <HAL_TIM_Base_MspInit+0x74>)
 8003340:	f043 0302 	orr.w	r3, r3, #2
 8003344:	6413      	str	r3, [r2, #64]	; 0x40
 8003346:	4b14      	ldr	r3, [pc, #80]	; (8003398 <HAL_TIM_Base_MspInit+0x74>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003352:	e01a      	b.n	800338a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a10      	ldr	r2, [pc, #64]	; (800339c <HAL_TIM_Base_MspInit+0x78>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d115      	bne.n	800338a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <HAL_TIM_Base_MspInit+0x74>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	4a0c      	ldr	r2, [pc, #48]	; (8003398 <HAL_TIM_Base_MspInit+0x74>)
 8003368:	f043 0304 	orr.w	r3, r3, #4
 800336c:	6413      	str	r3, [r2, #64]	; 0x40
 800336e:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <HAL_TIM_Base_MspInit+0x74>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800337a:	2200      	movs	r2, #0
 800337c:	2105      	movs	r1, #5
 800337e:	201e      	movs	r0, #30
 8003380:	f006 fdb2 	bl	8009ee8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003384:	201e      	movs	r0, #30
 8003386:	f006 fdcb 	bl	8009f20 <HAL_NVIC_EnableIRQ>
}
 800338a:	bf00      	nop
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40000400 	.word	0x40000400
 8003398:	40023800 	.word	0x40023800
 800339c:	40000800 	.word	0x40000800

080033a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08a      	sub	sp, #40	; 0x28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a8:	f107 0314 	add.w	r3, r7, #20
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a21      	ldr	r2, [pc, #132]	; (8003444 <HAL_TIM_MspPostInit+0xa4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d13b      	bne.n	800343a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	4b20      	ldr	r3, [pc, #128]	; (8003448 <HAL_TIM_MspPostInit+0xa8>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	4a1f      	ldr	r2, [pc, #124]	; (8003448 <HAL_TIM_MspPostInit+0xa8>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	6313      	str	r3, [r2, #48]	; 0x30
 80033d2:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_TIM_MspPostInit+0xa8>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	4b19      	ldr	r3, [pc, #100]	; (8003448 <HAL_TIM_MspPostInit+0xa8>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a18      	ldr	r2, [pc, #96]	; (8003448 <HAL_TIM_MspPostInit+0xa8>)
 80033e8:	f043 0302 	orr.w	r3, r3, #2
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b16      	ldr	r3, [pc, #88]	; (8003448 <HAL_TIM_MspPostInit+0xa8>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033fa:	23c0      	movs	r3, #192	; 0xc0
 80033fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fe:	2302      	movs	r3, #2
 8003400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003406:	2300      	movs	r3, #0
 8003408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800340a:	2302      	movs	r3, #2
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340e:	f107 0314 	add.w	r3, r7, #20
 8003412:	4619      	mov	r1, r3
 8003414:	480d      	ldr	r0, [pc, #52]	; (800344c <HAL_TIM_MspPostInit+0xac>)
 8003416:	f007 fb55 	bl	800aac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800341a:	2303      	movs	r3, #3
 800341c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341e:	2302      	movs	r3, #2
 8003420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003426:	2300      	movs	r3, #0
 8003428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800342a:	2302      	movs	r3, #2
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800342e:	f107 0314 	add.w	r3, r7, #20
 8003432:	4619      	mov	r1, r3
 8003434:	4806      	ldr	r0, [pc, #24]	; (8003450 <HAL_TIM_MspPostInit+0xb0>)
 8003436:	f007 fb45 	bl	800aac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800343a:	bf00      	nop
 800343c:	3728      	adds	r7, #40	; 0x28
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40000400 	.word	0x40000400
 8003448:	40023800 	.word	0x40023800
 800344c:	40020000 	.word	0x40020000
 8003450:	40020400 	.word	0x40020400

08003454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b092      	sub	sp, #72	; 0x48
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800345c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	605a      	str	r2, [r3, #4]
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	60da      	str	r2, [r3, #12]
 800346a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a93      	ldr	r2, [pc, #588]	; (80036c0 <HAL_UART_MspInit+0x26c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d15a      	bne.n	800352c <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	633b      	str	r3, [r7, #48]	; 0x30
 800347a:	4b92      	ldr	r3, [pc, #584]	; (80036c4 <HAL_UART_MspInit+0x270>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	4a91      	ldr	r2, [pc, #580]	; (80036c4 <HAL_UART_MspInit+0x270>)
 8003480:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003484:	6413      	str	r3, [r2, #64]	; 0x40
 8003486:	4b8f      	ldr	r3, [pc, #572]	; (80036c4 <HAL_UART_MspInit+0x270>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800348e:	633b      	str	r3, [r7, #48]	; 0x30
 8003490:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003492:	2300      	movs	r3, #0
 8003494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003496:	4b8b      	ldr	r3, [pc, #556]	; (80036c4 <HAL_UART_MspInit+0x270>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	4a8a      	ldr	r2, [pc, #552]	; (80036c4 <HAL_UART_MspInit+0x270>)
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	6313      	str	r3, [r2, #48]	; 0x30
 80034a2:	4b88      	ldr	r3, [pc, #544]	; (80036c4 <HAL_UART_MspInit+0x270>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80034ae:	2303      	movs	r3, #3
 80034b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b2:	2302      	movs	r3, #2
 80034b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ba:	2303      	movs	r3, #3
 80034bc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80034be:	2308      	movs	r3, #8
 80034c0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034c6:	4619      	mov	r1, r3
 80034c8:	487f      	ldr	r0, [pc, #508]	; (80036c8 <HAL_UART_MspInit+0x274>)
 80034ca:	f007 fafb 	bl	800aac4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80034ce:	4b7f      	ldr	r3, [pc, #508]	; (80036cc <HAL_UART_MspInit+0x278>)
 80034d0:	4a7f      	ldr	r2, [pc, #508]	; (80036d0 <HAL_UART_MspInit+0x27c>)
 80034d2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80034d4:	4b7d      	ldr	r3, [pc, #500]	; (80036cc <HAL_UART_MspInit+0x278>)
 80034d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034da:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034dc:	4b7b      	ldr	r3, [pc, #492]	; (80036cc <HAL_UART_MspInit+0x278>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034e2:	4b7a      	ldr	r3, [pc, #488]	; (80036cc <HAL_UART_MspInit+0x278>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034e8:	4b78      	ldr	r3, [pc, #480]	; (80036cc <HAL_UART_MspInit+0x278>)
 80034ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034ee:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034f0:	4b76      	ldr	r3, [pc, #472]	; (80036cc <HAL_UART_MspInit+0x278>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034f6:	4b75      	ldr	r3, [pc, #468]	; (80036cc <HAL_UART_MspInit+0x278>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80034fc:	4b73      	ldr	r3, [pc, #460]	; (80036cc <HAL_UART_MspInit+0x278>)
 80034fe:	2200      	movs	r2, #0
 8003500:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003502:	4b72      	ldr	r3, [pc, #456]	; (80036cc <HAL_UART_MspInit+0x278>)
 8003504:	2200      	movs	r2, #0
 8003506:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003508:	4b70      	ldr	r3, [pc, #448]	; (80036cc <HAL_UART_MspInit+0x278>)
 800350a:	2200      	movs	r2, #0
 800350c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800350e:	486f      	ldr	r0, [pc, #444]	; (80036cc <HAL_UART_MspInit+0x278>)
 8003510:	f006 fd14 	bl	8009f3c <HAL_DMA_Init>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800351a:	f7ff fd47 	bl	8002fac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a6a      	ldr	r2, [pc, #424]	; (80036cc <HAL_UART_MspInit+0x278>)
 8003522:	639a      	str	r2, [r3, #56]	; 0x38
 8003524:	4a69      	ldr	r2, [pc, #420]	; (80036cc <HAL_UART_MspInit+0x278>)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800352a:	e19f      	b.n	800386c <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a68      	ldr	r2, [pc, #416]	; (80036d4 <HAL_UART_MspInit+0x280>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d163      	bne.n	80035fe <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
 800353a:	4b62      	ldr	r3, [pc, #392]	; (80036c4 <HAL_UART_MspInit+0x270>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	4a61      	ldr	r2, [pc, #388]	; (80036c4 <HAL_UART_MspInit+0x270>)
 8003540:	f043 0310 	orr.w	r3, r3, #16
 8003544:	6453      	str	r3, [r2, #68]	; 0x44
 8003546:	4b5f      	ldr	r3, [pc, #380]	; (80036c4 <HAL_UART_MspInit+0x270>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003550:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
 8003556:	4b5b      	ldr	r3, [pc, #364]	; (80036c4 <HAL_UART_MspInit+0x270>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	4a5a      	ldr	r2, [pc, #360]	; (80036c4 <HAL_UART_MspInit+0x270>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	6313      	str	r3, [r2, #48]	; 0x30
 8003562:	4b58      	ldr	r3, [pc, #352]	; (80036c4 <HAL_UART_MspInit+0x270>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800356e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003572:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003574:	2302      	movs	r3, #2
 8003576:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003578:	2300      	movs	r3, #0
 800357a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800357c:	2303      	movs	r3, #3
 800357e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003580:	2307      	movs	r3, #7
 8003582:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003584:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003588:	4619      	mov	r1, r3
 800358a:	484f      	ldr	r0, [pc, #316]	; (80036c8 <HAL_UART_MspInit+0x274>)
 800358c:	f007 fa9a 	bl	800aac4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003590:	4b51      	ldr	r3, [pc, #324]	; (80036d8 <HAL_UART_MspInit+0x284>)
 8003592:	4a52      	ldr	r2, [pc, #328]	; (80036dc <HAL_UART_MspInit+0x288>)
 8003594:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003596:	4b50      	ldr	r3, [pc, #320]	; (80036d8 <HAL_UART_MspInit+0x284>)
 8003598:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800359c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800359e:	4b4e      	ldr	r3, [pc, #312]	; (80036d8 <HAL_UART_MspInit+0x284>)
 80035a0:	2240      	movs	r2, #64	; 0x40
 80035a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035a4:	4b4c      	ldr	r3, [pc, #304]	; (80036d8 <HAL_UART_MspInit+0x284>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035aa:	4b4b      	ldr	r3, [pc, #300]	; (80036d8 <HAL_UART_MspInit+0x284>)
 80035ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035b0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035b2:	4b49      	ldr	r3, [pc, #292]	; (80036d8 <HAL_UART_MspInit+0x284>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035b8:	4b47      	ldr	r3, [pc, #284]	; (80036d8 <HAL_UART_MspInit+0x284>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80035be:	4b46      	ldr	r3, [pc, #280]	; (80036d8 <HAL_UART_MspInit+0x284>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80035c4:	4b44      	ldr	r3, [pc, #272]	; (80036d8 <HAL_UART_MspInit+0x284>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035ca:	4b43      	ldr	r3, [pc, #268]	; (80036d8 <HAL_UART_MspInit+0x284>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80035d0:	4841      	ldr	r0, [pc, #260]	; (80036d8 <HAL_UART_MspInit+0x284>)
 80035d2:	f006 fcb3 	bl	8009f3c <HAL_DMA_Init>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80035dc:	f7ff fce6 	bl	8002fac <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a3d      	ldr	r2, [pc, #244]	; (80036d8 <HAL_UART_MspInit+0x284>)
 80035e4:	635a      	str	r2, [r3, #52]	; 0x34
 80035e6:	4a3c      	ldr	r2, [pc, #240]	; (80036d8 <HAL_UART_MspInit+0x284>)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80035ec:	2200      	movs	r2, #0
 80035ee:	2105      	movs	r1, #5
 80035f0:	2025      	movs	r0, #37	; 0x25
 80035f2:	f006 fc79 	bl	8009ee8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035f6:	2025      	movs	r0, #37	; 0x25
 80035f8:	f006 fc92 	bl	8009f20 <HAL_NVIC_EnableIRQ>
}
 80035fc:	e136      	b.n	800386c <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART2)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a37      	ldr	r2, [pc, #220]	; (80036e0 <HAL_UART_MspInit+0x28c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d171      	bne.n	80036ec <HAL_UART_MspInit+0x298>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003608:	2300      	movs	r3, #0
 800360a:	623b      	str	r3, [r7, #32]
 800360c:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <HAL_UART_MspInit+0x270>)
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	4a2c      	ldr	r2, [pc, #176]	; (80036c4 <HAL_UART_MspInit+0x270>)
 8003612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003616:	6413      	str	r3, [r2, #64]	; 0x40
 8003618:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <HAL_UART_MspInit+0x270>)
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003620:	623b      	str	r3, [r7, #32]
 8003622:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003624:	2300      	movs	r3, #0
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	4b26      	ldr	r3, [pc, #152]	; (80036c4 <HAL_UART_MspInit+0x270>)
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	4a25      	ldr	r2, [pc, #148]	; (80036c4 <HAL_UART_MspInit+0x270>)
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	6313      	str	r3, [r2, #48]	; 0x30
 8003634:	4b23      	ldr	r3, [pc, #140]	; (80036c4 <HAL_UART_MspInit+0x270>)
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003640:	230c      	movs	r3, #12
 8003642:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003644:	2302      	movs	r3, #2
 8003646:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003648:	2300      	movs	r3, #0
 800364a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800364c:	2303      	movs	r3, #3
 800364e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003650:	2307      	movs	r3, #7
 8003652:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003654:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003658:	4619      	mov	r1, r3
 800365a:	481b      	ldr	r0, [pc, #108]	; (80036c8 <HAL_UART_MspInit+0x274>)
 800365c:	f007 fa32 	bl	800aac4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003660:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <HAL_UART_MspInit+0x290>)
 8003662:	4a21      	ldr	r2, [pc, #132]	; (80036e8 <HAL_UART_MspInit+0x294>)
 8003664:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003666:	4b1f      	ldr	r3, [pc, #124]	; (80036e4 <HAL_UART_MspInit+0x290>)
 8003668:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800366c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_UART_MspInit+0x290>)
 8003670:	2200      	movs	r2, #0
 8003672:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003674:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <HAL_UART_MspInit+0x290>)
 8003676:	2200      	movs	r2, #0
 8003678:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800367a:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <HAL_UART_MspInit+0x290>)
 800367c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003680:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003682:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <HAL_UART_MspInit+0x290>)
 8003684:	2200      	movs	r2, #0
 8003686:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003688:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <HAL_UART_MspInit+0x290>)
 800368a:	2200      	movs	r2, #0
 800368c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800368e:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <HAL_UART_MspInit+0x290>)
 8003690:	2200      	movs	r2, #0
 8003692:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003694:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <HAL_UART_MspInit+0x290>)
 8003696:	2200      	movs	r2, #0
 8003698:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800369a:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <HAL_UART_MspInit+0x290>)
 800369c:	2200      	movs	r2, #0
 800369e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80036a0:	4810      	ldr	r0, [pc, #64]	; (80036e4 <HAL_UART_MspInit+0x290>)
 80036a2:	f006 fc4b 	bl	8009f3c <HAL_DMA_Init>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 80036ac:	f7ff fc7e 	bl	8002fac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a0c      	ldr	r2, [pc, #48]	; (80036e4 <HAL_UART_MspInit+0x290>)
 80036b4:	639a      	str	r2, [r3, #56]	; 0x38
 80036b6:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <HAL_UART_MspInit+0x290>)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6393      	str	r3, [r2, #56]	; 0x38
}
 80036bc:	e0d6      	b.n	800386c <HAL_UART_MspInit+0x418>
 80036be:	bf00      	nop
 80036c0:	40004c00 	.word	0x40004c00
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40020000 	.word	0x40020000
 80036cc:	2000071c 	.word	0x2000071c
 80036d0:	40026040 	.word	0x40026040
 80036d4:	40011000 	.word	0x40011000
 80036d8:	2000077c 	.word	0x2000077c
 80036dc:	400264b8 	.word	0x400264b8
 80036e0:	40004400 	.word	0x40004400
 80036e4:	200007dc 	.word	0x200007dc
 80036e8:	40026088 	.word	0x40026088
  else if(huart->Instance==USART3)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a60      	ldr	r2, [pc, #384]	; (8003874 <HAL_UART_MspInit+0x420>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d15b      	bne.n	80037ae <HAL_UART_MspInit+0x35a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	61bb      	str	r3, [r7, #24]
 80036fa:	4b5f      	ldr	r3, [pc, #380]	; (8003878 <HAL_UART_MspInit+0x424>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	4a5e      	ldr	r2, [pc, #376]	; (8003878 <HAL_UART_MspInit+0x424>)
 8003700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003704:	6413      	str	r3, [r2, #64]	; 0x40
 8003706:	4b5c      	ldr	r3, [pc, #368]	; (8003878 <HAL_UART_MspInit+0x424>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800370e:	61bb      	str	r3, [r7, #24]
 8003710:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	4b58      	ldr	r3, [pc, #352]	; (8003878 <HAL_UART_MspInit+0x424>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	4a57      	ldr	r2, [pc, #348]	; (8003878 <HAL_UART_MspInit+0x424>)
 800371c:	f043 0302 	orr.w	r3, r3, #2
 8003720:	6313      	str	r3, [r2, #48]	; 0x30
 8003722:	4b55      	ldr	r3, [pc, #340]	; (8003878 <HAL_UART_MspInit+0x424>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800372e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003732:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003734:	2302      	movs	r3, #2
 8003736:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373c:	2303      	movs	r3, #3
 800373e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003740:	2307      	movs	r3, #7
 8003742:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003744:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003748:	4619      	mov	r1, r3
 800374a:	484c      	ldr	r0, [pc, #304]	; (800387c <HAL_UART_MspInit+0x428>)
 800374c:	f007 f9ba 	bl	800aac4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003750:	4b4b      	ldr	r3, [pc, #300]	; (8003880 <HAL_UART_MspInit+0x42c>)
 8003752:	4a4c      	ldr	r2, [pc, #304]	; (8003884 <HAL_UART_MspInit+0x430>)
 8003754:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003756:	4b4a      	ldr	r3, [pc, #296]	; (8003880 <HAL_UART_MspInit+0x42c>)
 8003758:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800375c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800375e:	4b48      	ldr	r3, [pc, #288]	; (8003880 <HAL_UART_MspInit+0x42c>)
 8003760:	2200      	movs	r2, #0
 8003762:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003764:	4b46      	ldr	r3, [pc, #280]	; (8003880 <HAL_UART_MspInit+0x42c>)
 8003766:	2200      	movs	r2, #0
 8003768:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800376a:	4b45      	ldr	r3, [pc, #276]	; (8003880 <HAL_UART_MspInit+0x42c>)
 800376c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003770:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003772:	4b43      	ldr	r3, [pc, #268]	; (8003880 <HAL_UART_MspInit+0x42c>)
 8003774:	2200      	movs	r2, #0
 8003776:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003778:	4b41      	ldr	r3, [pc, #260]	; (8003880 <HAL_UART_MspInit+0x42c>)
 800377a:	2200      	movs	r2, #0
 800377c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800377e:	4b40      	ldr	r3, [pc, #256]	; (8003880 <HAL_UART_MspInit+0x42c>)
 8003780:	2200      	movs	r2, #0
 8003782:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003784:	4b3e      	ldr	r3, [pc, #248]	; (8003880 <HAL_UART_MspInit+0x42c>)
 8003786:	2200      	movs	r2, #0
 8003788:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800378a:	4b3d      	ldr	r3, [pc, #244]	; (8003880 <HAL_UART_MspInit+0x42c>)
 800378c:	2200      	movs	r2, #0
 800378e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003790:	483b      	ldr	r0, [pc, #236]	; (8003880 <HAL_UART_MspInit+0x42c>)
 8003792:	f006 fbd3 	bl	8009f3c <HAL_DMA_Init>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_UART_MspInit+0x34c>
      Error_Handler();
 800379c:	f7ff fc06 	bl	8002fac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a37      	ldr	r2, [pc, #220]	; (8003880 <HAL_UART_MspInit+0x42c>)
 80037a4:	639a      	str	r2, [r3, #56]	; 0x38
 80037a6:	4a36      	ldr	r2, [pc, #216]	; (8003880 <HAL_UART_MspInit+0x42c>)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6393      	str	r3, [r2, #56]	; 0x38
}
 80037ac:	e05e      	b.n	800386c <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART6)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a35      	ldr	r2, [pc, #212]	; (8003888 <HAL_UART_MspInit+0x434>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d159      	bne.n	800386c <HAL_UART_MspInit+0x418>
    __HAL_RCC_USART6_CLK_ENABLE();
 80037b8:	2300      	movs	r3, #0
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	4b2e      	ldr	r3, [pc, #184]	; (8003878 <HAL_UART_MspInit+0x424>)
 80037be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c0:	4a2d      	ldr	r2, [pc, #180]	; (8003878 <HAL_UART_MspInit+0x424>)
 80037c2:	f043 0320 	orr.w	r3, r3, #32
 80037c6:	6453      	str	r3, [r2, #68]	; 0x44
 80037c8:	4b2b      	ldr	r3, [pc, #172]	; (8003878 <HAL_UART_MspInit+0x424>)
 80037ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	4b27      	ldr	r3, [pc, #156]	; (8003878 <HAL_UART_MspInit+0x424>)
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	4a26      	ldr	r2, [pc, #152]	; (8003878 <HAL_UART_MspInit+0x424>)
 80037de:	f043 0304 	orr.w	r3, r3, #4
 80037e2:	6313      	str	r3, [r2, #48]	; 0x30
 80037e4:	4b24      	ldr	r3, [pc, #144]	; (8003878 <HAL_UART_MspInit+0x424>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037f0:	23c0      	movs	r3, #192	; 0xc0
 80037f2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f4:	2302      	movs	r3, #2
 80037f6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037fc:	2303      	movs	r3, #3
 80037fe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003800:	2308      	movs	r3, #8
 8003802:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003804:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003808:	4619      	mov	r1, r3
 800380a:	4820      	ldr	r0, [pc, #128]	; (800388c <HAL_UART_MspInit+0x438>)
 800380c:	f007 f95a 	bl	800aac4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003810:	4b1f      	ldr	r3, [pc, #124]	; (8003890 <HAL_UART_MspInit+0x43c>)
 8003812:	4a20      	ldr	r2, [pc, #128]	; (8003894 <HAL_UART_MspInit+0x440>)
 8003814:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003816:	4b1e      	ldr	r3, [pc, #120]	; (8003890 <HAL_UART_MspInit+0x43c>)
 8003818:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800381c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800381e:	4b1c      	ldr	r3, [pc, #112]	; (8003890 <HAL_UART_MspInit+0x43c>)
 8003820:	2200      	movs	r2, #0
 8003822:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003824:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <HAL_UART_MspInit+0x43c>)
 8003826:	2200      	movs	r2, #0
 8003828:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800382a:	4b19      	ldr	r3, [pc, #100]	; (8003890 <HAL_UART_MspInit+0x43c>)
 800382c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003830:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003832:	4b17      	ldr	r3, [pc, #92]	; (8003890 <HAL_UART_MspInit+0x43c>)
 8003834:	2200      	movs	r2, #0
 8003836:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003838:	4b15      	ldr	r3, [pc, #84]	; (8003890 <HAL_UART_MspInit+0x43c>)
 800383a:	2200      	movs	r2, #0
 800383c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800383e:	4b14      	ldr	r3, [pc, #80]	; (8003890 <HAL_UART_MspInit+0x43c>)
 8003840:	2200      	movs	r2, #0
 8003842:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003844:	4b12      	ldr	r3, [pc, #72]	; (8003890 <HAL_UART_MspInit+0x43c>)
 8003846:	2200      	movs	r2, #0
 8003848:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800384a:	4b11      	ldr	r3, [pc, #68]	; (8003890 <HAL_UART_MspInit+0x43c>)
 800384c:	2200      	movs	r2, #0
 800384e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003850:	480f      	ldr	r0, [pc, #60]	; (8003890 <HAL_UART_MspInit+0x43c>)
 8003852:	f006 fb73 	bl	8009f3c <HAL_DMA_Init>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_UART_MspInit+0x40c>
      Error_Handler();
 800385c:	f7ff fba6 	bl	8002fac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a0b      	ldr	r2, [pc, #44]	; (8003890 <HAL_UART_MspInit+0x43c>)
 8003864:	639a      	str	r2, [r3, #56]	; 0x38
 8003866:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <HAL_UART_MspInit+0x43c>)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800386c:	bf00      	nop
 800386e:	3748      	adds	r7, #72	; 0x48
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40004800 	.word	0x40004800
 8003878:	40023800 	.word	0x40023800
 800387c:	40020400 	.word	0x40020400
 8003880:	2000083c 	.word	0x2000083c
 8003884:	40026028 	.word	0x40026028
 8003888:	40011400 	.word	0x40011400
 800388c:	40020800 	.word	0x40020800
 8003890:	2000089c 	.word	0x2000089c
 8003894:	40026428 	.word	0x40026428

08003898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08c      	sub	sp, #48	; 0x30
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80038a8:	2300      	movs	r3, #0
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	4b2f      	ldr	r3, [pc, #188]	; (800396c <HAL_InitTick+0xd4>)
 80038ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b0:	4a2e      	ldr	r2, [pc, #184]	; (800396c <HAL_InitTick+0xd4>)
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	6453      	str	r3, [r2, #68]	; 0x44
 80038b8:	4b2c      	ldr	r3, [pc, #176]	; (800396c <HAL_InitTick+0xd4>)
 80038ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038c4:	f107 020c 	add.w	r2, r7, #12
 80038c8:	f107 0310 	add.w	r3, r7, #16
 80038cc:	4611      	mov	r1, r2
 80038ce:	4618      	mov	r0, r3
 80038d0:	f008 ffd0 	bl	800c874 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80038d4:	f008 ffba 	bl	800c84c <HAL_RCC_GetPCLK2Freq>
 80038d8:	4603      	mov	r3, r0
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	4a23      	ldr	r2, [pc, #140]	; (8003970 <HAL_InitTick+0xd8>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	0c9b      	lsrs	r3, r3, #18
 80038e8:	3b01      	subs	r3, #1
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80038ec:	4b21      	ldr	r3, [pc, #132]	; (8003974 <HAL_InitTick+0xdc>)
 80038ee:	4a22      	ldr	r2, [pc, #136]	; (8003978 <HAL_InitTick+0xe0>)
 80038f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80038f2:	4b20      	ldr	r3, [pc, #128]	; (8003974 <HAL_InitTick+0xdc>)
 80038f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038f8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80038fa:	4a1e      	ldr	r2, [pc, #120]	; (8003974 <HAL_InitTick+0xdc>)
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003900:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <HAL_InitTick+0xdc>)
 8003902:	2200      	movs	r2, #0
 8003904:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003906:	4b1b      	ldr	r3, [pc, #108]	; (8003974 <HAL_InitTick+0xdc>)
 8003908:	2200      	movs	r2, #0
 800390a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800390c:	4b19      	ldr	r3, [pc, #100]	; (8003974 <HAL_InitTick+0xdc>)
 800390e:	2200      	movs	r2, #0
 8003910:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003912:	4818      	ldr	r0, [pc, #96]	; (8003974 <HAL_InitTick+0xdc>)
 8003914:	f00a fb4c 	bl	800dfb0 <HAL_TIM_Base_Init>
 8003918:	4603      	mov	r3, r0
 800391a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800391e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003922:	2b00      	cmp	r3, #0
 8003924:	d11b      	bne.n	800395e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003926:	4813      	ldr	r0, [pc, #76]	; (8003974 <HAL_InitTick+0xdc>)
 8003928:	f00a fb92 	bl	800e050 <HAL_TIM_Base_Start_IT>
 800392c:	4603      	mov	r3, r0
 800392e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003932:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003936:	2b00      	cmp	r3, #0
 8003938:	d111      	bne.n	800395e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800393a:	2019      	movs	r0, #25
 800393c:	f006 faf0 	bl	8009f20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b0f      	cmp	r3, #15
 8003944:	d808      	bhi.n	8003958 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003946:	2200      	movs	r2, #0
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	2019      	movs	r0, #25
 800394c:	f006 facc 	bl	8009ee8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003950:	4a0a      	ldr	r2, [pc, #40]	; (800397c <HAL_InitTick+0xe4>)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	e002      	b.n	800395e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800395e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003962:	4618      	mov	r0, r3
 8003964:	3730      	adds	r7, #48	; 0x30
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800
 8003970:	431bde83 	.word	0x431bde83
 8003974:	200008fc 	.word	0x200008fc
 8003978:	40010000 	.word	0x40010000
 800397c:	20000008 	.word	0x20000008

08003980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003984:	e7fe      	b.n	8003984 <NMI_Handler+0x4>

08003986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003986:	b480      	push	{r7}
 8003988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800398a:	e7fe      	b.n	800398a <HardFault_Handler+0x4>

0800398c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003990:	e7fe      	b.n	8003990 <MemManage_Handler+0x4>

08003992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003992:	b480      	push	{r7}
 8003994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003996:	e7fe      	b.n	8003996 <BusFault_Handler+0x4>

08003998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800399c:	e7fe      	b.n	800399c <UsageFault_Handler+0x4>

0800399e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800399e:	b480      	push	{r7}
 80039a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80039b0:	2004      	movs	r0, #4
 80039b2:	f007 fa3d 	bl	800ae30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}

080039ba <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80039be:	2010      	movs	r0, #16
 80039c0:	f007 fa36 	bl	800ae30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80039c4:	bf00      	nop
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80039cc:	4802      	ldr	r0, [pc, #8]	; (80039d8 <DMA1_Stream1_IRQHandler+0x10>)
 80039ce:	f006 fc4d 	bl	800a26c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	2000083c 	.word	0x2000083c

080039dc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80039e0:	4802      	ldr	r0, [pc, #8]	; (80039ec <DMA1_Stream2_IRQHandler+0x10>)
 80039e2:	f006 fc43 	bl	800a26c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	2000071c 	.word	0x2000071c

080039f0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80039f4:	4802      	ldr	r0, [pc, #8]	; (8003a00 <DMA1_Stream3_IRQHandler+0x10>)
 80039f6:	f006 fc39 	bl	800a26c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000478 	.word	0x20000478

08003a04 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003a08:	4802      	ldr	r0, [pc, #8]	; (8003a14 <DMA1_Stream4_IRQHandler+0x10>)
 8003a0a:	f006 fc2f 	bl	800a26c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	200004d8 	.word	0x200004d8

08003a18 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003a1c:	4802      	ldr	r0, [pc, #8]	; (8003a28 <DMA1_Stream5_IRQHandler+0x10>)
 8003a1e:	f006 fc25 	bl	800a26c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	200007dc 	.word	0x200007dc

08003a2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003a30:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003a34:	f007 f9fc 	bl	800ae30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003a38:	bf00      	nop
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a40:	4802      	ldr	r0, [pc, #8]	; (8003a4c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003a42:	f00a fc97 	bl	800e374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	200008fc 	.word	0x200008fc

08003a50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a54:	4802      	ldr	r0, [pc, #8]	; (8003a60 <TIM4_IRQHandler+0x10>)
 8003a56:	f00a fc8d 	bl	800e374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000580 	.word	0x20000580

08003a64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a68:	4802      	ldr	r0, [pc, #8]	; (8003a74 <USART1_IRQHandler+0x10>)
 8003a6a:	f00b fbd9 	bl	800f220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	2000060c 	.word	0x2000060c

08003a78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a7c:	4802      	ldr	r0, [pc, #8]	; (8003a88 <DMA2_Stream0_IRQHandler+0x10>)
 8003a7e:	f006 fbf5 	bl	800a26c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	2000033c 	.word	0x2000033c

08003a8c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003a90:	4802      	ldr	r0, [pc, #8]	; (8003a9c <DMA2_Stream1_IRQHandler+0x10>)
 8003a92:	f006 fbeb 	bl	800a26c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	2000089c 	.word	0x2000089c

08003aa0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003aa4:	4802      	ldr	r0, [pc, #8]	; (8003ab0 <OTG_FS_IRQHandler+0x10>)
 8003aa6:	f007 f9db 	bl	800ae60 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	2000d2c4 	.word	0x2000d2c4

08003ab4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003ab8:	4802      	ldr	r0, [pc, #8]	; (8003ac4 <DMA2_Stream7_IRQHandler+0x10>)
 8003aba:	f006 fbd7 	bl	800a26c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	2000077c 	.word	0x2000077c

08003ac8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
	return 1;
 8003acc:	2301      	movs	r3, #1
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <_kill>:

int _kill(int pid, int sig)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ae2:	f012 fc0d 	bl	8016300 <__errno>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2216      	movs	r2, #22
 8003aea:	601a      	str	r2, [r3, #0]
	return -1;
 8003aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <_exit>:

void _exit (int status)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b00:	f04f 31ff 	mov.w	r1, #4294967295
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff ffe7 	bl	8003ad8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b0a:	e7fe      	b.n	8003b0a <_exit+0x12>

08003b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b14:	4a14      	ldr	r2, [pc, #80]	; (8003b68 <_sbrk+0x5c>)
 8003b16:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <_sbrk+0x60>)
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b20:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <_sbrk+0x64>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d102      	bne.n	8003b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b28:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <_sbrk+0x64>)
 8003b2a:	4a12      	ldr	r2, [pc, #72]	; (8003b74 <_sbrk+0x68>)
 8003b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b2e:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <_sbrk+0x64>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4413      	add	r3, r2
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d207      	bcs.n	8003b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b3c:	f012 fbe0 	bl	8016300 <__errno>
 8003b40:	4603      	mov	r3, r0
 8003b42:	220c      	movs	r2, #12
 8003b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b46:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4a:	e009      	b.n	8003b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b4c:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <_sbrk+0x64>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <_sbrk+0x64>)
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4413      	add	r3, r2
 8003b5a:	4a05      	ldr	r2, [pc, #20]	; (8003b70 <_sbrk+0x64>)
 8003b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20020000 	.word	0x20020000
 8003b6c:	00000400 	.word	0x00000400
 8003b70:	20000944 	.word	0x20000944
 8003b74:	2000d7e8 	.word	0x2000d7e8

08003b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <SystemInit+0x20>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b82:	4a05      	ldr	r2, [pc, #20]	; (8003b98 <SystemInit+0x20>)
 8003b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b8c:	bf00      	nop
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	e000ed00 	.word	0xe000ed00

08003b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ba0:	480d      	ldr	r0, [pc, #52]	; (8003bd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ba2:	490e      	ldr	r1, [pc, #56]	; (8003bdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ba4:	4a0e      	ldr	r2, [pc, #56]	; (8003be0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ba8:	e002      	b.n	8003bb0 <LoopCopyDataInit>

08003baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bae:	3304      	adds	r3, #4

08003bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bb4:	d3f9      	bcc.n	8003baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bb6:	4a0b      	ldr	r2, [pc, #44]	; (8003be4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003bb8:	4c0b      	ldr	r4, [pc, #44]	; (8003be8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bbc:	e001      	b.n	8003bc2 <LoopFillZerobss>

08003bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bc0:	3204      	adds	r2, #4

08003bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bc4:	d3fb      	bcc.n	8003bbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003bc6:	f7ff ffd7 	bl	8003b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bca:	f012 fb9f 	bl	801630c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bce:	f7fe fce3 	bl	8002598 <main>
  bx  lr    
 8003bd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003bd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bdc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003be0:	0802abb8 	.word	0x0802abb8
  ldr r2, =_sbss
 8003be4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003be8:	2000d7e4 	.word	0x2000d7e4

08003bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bec:	e7fe      	b.n	8003bec <ADC_IRQHandler>

08003bee <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 8003bee:	b590      	push	{r4, r7, lr}
 8003bf0:	b087      	sub	sp, #28
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	0fdb      	lsrs	r3, r3, #31
 8003bfc:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <_ZNSt7__cxx119to_stringEi+0x1c>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	425b      	negs	r3, r3
 8003c08:	e000      	b.n	8003c0c <_ZNSt7__cxx119to_stringEi+0x1e>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 8003c0e:	210a      	movs	r1, #10
 8003c10:	6938      	ldr	r0, [r7, #16]
 8003c12:	f000 ff81 	bl	8004b18 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 8003c16:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 8003c18:	7dfa      	ldrb	r2, [r7, #23]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	18d4      	adds	r4, r2, r3
 8003c1e:	f107 0308 	add.w	r3, r7, #8
 8003c22:	4618      	mov	r0, r3
 8003c24:	f011 f97a 	bl	8014f1c <_ZNSaIcEC1Ev>
 8003c28:	f107 0308 	add.w	r3, r7, #8
 8003c2c:	222d      	movs	r2, #45	; 0x2d
 8003c2e:	4621      	mov	r1, r4
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f011 fa6e 	bl	8015112 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 8003c36:	f107 0308 	add.w	r3, r7, #8
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f011 f96f 	bl	8014f1e <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 8003c40:	7dfb      	ldrb	r3, [r7, #23]
 8003c42:	4619      	mov	r1, r3
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f011 fa73 	bl	8015130 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	68f9      	ldr	r1, [r7, #12]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 ffa1 	bl	8004b98 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 8003c56:	bf00      	nop
  }
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd90      	pop	{r4, r7, pc}

08003c60 <_ZN15PrintableSensor11toCharArrayEi>:
	char packet[50]={};

public:
	virtual const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList) = 0;

	const char* toCharArray(int value)
 8003c60:	b590      	push	{r4, r7, lr}
 8003c62:	b089      	sub	sp, #36	; 0x24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
	{
		return std::to_string(value).c_str();
 8003c6a:	f107 0308 	add.w	r3, r7, #8
 8003c6e:	6839      	ldr	r1, [r7, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff ffbc 	bl	8003bee <_ZNSt7__cxx119to_stringEi>
 8003c76:	f107 0308 	add.w	r3, r7, #8
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f011 fa5b 	bl	8015136 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8003c80:	4604      	mov	r4, r0
 8003c82:	bf00      	nop
 8003c84:	f107 0308 	add.w	r3, r7, #8
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f011 fa4b 	bl	8015124 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c8e:	4623      	mov	r3, r4
	}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3724      	adds	r7, #36	; 0x24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd90      	pop	{r4, r7, pc}

08003c98 <_ZN5drone5utils9functionsL11concatBytesEhh>:
	}*/

	namespace functions
	{
		static int16_t concatBytes(uint8_t msb, uint8_t lsb)
		{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	460a      	mov	r2, r1
 8003ca2:	71fb      	strb	r3, [r7, #7]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	71bb      	strb	r3, [r7, #6]
			return (((int16_t)msb << 8) | (int16_t)lsb);
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	021b      	lsls	r3, r3, #8
 8003cac:	b21a      	sxth	r2, r3
 8003cae:	79bb      	ldrb	r3, [r7, #6]
 8003cb0:	b21b      	sxth	r3, r3
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	b21b      	sxth	r3, r3
		}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
	...

08003cc4 <_ZN8SPI_ConnC1Ev>:
class SPI_Conn
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	4a04      	ldr	r2, [pc, #16]	; (8003ce0 <_ZN8SPI_ConnC1Ev+0x1c>)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	08016adc 	.word	0x08016adc

08003ce4 <_ZN15PrintableSensorC1Ev>:
class PrintableSensor
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	4a07      	ldr	r2, [pc, #28]	; (8003d0c <_ZN15PrintableSensorC1Ev+0x28>)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	2232      	movs	r2, #50	; 0x32
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f012 fb62 	bl	80163c4 <memset>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	08016ad0 	.word	0x08016ad0

08003d10 <_ZN12CallsCounterC1Ev>:
	uint64_t getTaskCounterValue()
	{
		return this->interruptCounter;
	}
protected:
	CallsCounter() = default;
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	e9c1 2300 	strd	r2, r3, [r1]
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4618      	mov	r0, r3
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <_ZN6BMP39010calib_coefC1Ev>:
#include "utils_functions.hpp"

class BMP390: SPI_Conn,public PrintableSensor, public CallsCounter
{
private:
	struct calib_coef
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	801a      	strh	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	805a      	strh	r2, [r3, #2]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	711a      	strb	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	80da      	strh	r2, [r3, #6]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	811a      	strh	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	729a      	strb	r2, [r3, #10]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	72da      	strb	r2, [r3, #11]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	819a      	strh	r2, [r3, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	81da      	strh	r2, [r3, #14]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	741a      	strb	r2, [r3, #16]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	745a      	strb	r2, [r3, #17]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	825a      	strh	r2, [r3, #18]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	751a      	strb	r2, [r3, #20]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	755a      	strb	r2, [r3, #21]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <_ZN6BMP39020quantized_calib_dataC1Ev>:
		int16_t par_p9 {0};
		int8_t par_p10 {0};
		int8_t par_p11 {0};
	} calibCoef;

	struct quantized_calib_data
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	e9c1 2300 	strd	r2, r3, [r1]
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	f04f 0300 	mov.w	r3, #0
 8003e12:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	f04f 0300 	mov.w	r3, #0
 8003e2e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <_ZN6BMP390C1EP19__SPI_HandleTypeDef>:
 *      Author: Asus
 */

#include "BMP390.hpp"

BMP390::BMP390(SPI_HandleTypeDef *spi_port):
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
	,spiTxBuff {0U,0U}
	,spiRxBuff {0U,0U}
	,pressure {0.0}
	,temp {0.0}
	,raw_pressure {0U}
	,raw_temp {0U}
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff ff0f 	bl	8003cc4 <_ZN8SPI_ConnC1Ev>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff ff1a 	bl	8003ce4 <_ZN15PrintableSensorC1Ev>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3340      	adds	r3, #64	; 0x40
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ff2b 	bl	8003d10 <_ZN12CallsCounterC1Ev>
 8003eba:	4a1f      	ldr	r2, [pc, #124]	; (8003f38 <_ZN6BMP390C1EP19__SPI_HandleTypeDef+0xa4>)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	4a1e      	ldr	r2, [pc, #120]	; (8003f3c <_ZN6BMP390C1EP19__SPI_HandleTypeDef+0xa8>)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	605a      	str	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3350      	adds	r3, #80	; 0x50
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff ff39 	bl	8003d42 <_ZN6BMP39010calib_coefC1Ev>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3368      	adds	r3, #104	; 0x68
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff ff69 	bl	8003dac <_ZN6BMP39020quantized_calib_dataC1Ev>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	f04f 0300 	mov.w	r3, #0
 8003f1a:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
{
}
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	08016ab0 	.word	0x08016ab0
 8003f3c:	08016ac4 	.word	0x08016ac4

08003f40 <_ZN6BMP39011defaultInitEv>:

bool BMP390::defaultInit()
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	6078      	str	r0, [r7, #4]
	this->SPI_write(CMD,CMD_SOFTRESET);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	22b6      	movs	r2, #182	; 0xb6
 8003f50:	217e      	movs	r1, #126	; 0x7e
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	4798      	blx	r3
	HAL_Delay(20);
 8003f56:	2014      	movs	r0, #20
 8003f58:	f005 fad8 	bl	800950c <HAL_Delay>

	int debug = SPI_read(STATUS);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3304      	adds	r3, #4
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2103      	movs	r1, #3
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	4798      	blx	r3
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	60fb      	str	r3, [r7, #12]
	while ((debug= SPI_read(STATUS))==0)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3304      	adds	r3, #4
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2103      	movs	r1, #3
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	4798      	blx	r3
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	bf0c      	ite	eq
 8003f86:	2301      	moveq	r3, #1
 8003f88:	2300      	movne	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <_ZN6BMP39011defaultInitEv+0x58>
		HAL_Delay(50);
 8003f90:	2032      	movs	r0, #50	; 0x32
 8003f92:	f005 fabb 	bl	800950c <HAL_Delay>
	while ((debug= SPI_read(STATUS))==0)
 8003f96:	e7ea      	b.n	8003f6e <_ZN6BMP39011defaultInitEv+0x2e>

	if (!this->initAndCheck(OSR,OSR_OSR_P_X16|OSR_OSR_T_X2,10))
 8003f98:	2300      	movs	r3, #0
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	230a      	movs	r3, #10
 8003f9e:	220c      	movs	r2, #12
 8003fa0:	211c      	movs	r1, #28
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f84d 	bl	8004042 <_ZN6BMP39012initAndCheckEhhhb>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f083 0301 	eor.w	r3, r3, #1
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <_ZN6BMP39011defaultInitEv+0x78>
		return false;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e040      	b.n	800403a <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(CONFIG,CONFIG_COEF_3,10))
 8003fb8:	2300      	movs	r3, #0
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	230a      	movs	r3, #10
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	211f      	movs	r1, #31
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f83d 	bl	8004042 <_ZN6BMP39012initAndCheckEhhhb>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f083 0301 	eor.w	r3, r3, #1
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <_ZN6BMP39011defaultInitEv+0x98>
		return false;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e030      	b.n	800403a <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(ODR,ODR_ODR_25,10))
 8003fd8:	2300      	movs	r3, #0
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	230a      	movs	r3, #10
 8003fde:	2203      	movs	r2, #3
 8003fe0:	211d      	movs	r1, #29
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f82d 	bl	8004042 <_ZN6BMP39012initAndCheckEhhhb>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f083 0301 	eor.w	r3, r3, #1
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <_ZN6BMP39011defaultInitEv+0xb8>
		return false;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	e020      	b.n	800403a <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(INT_CTRL,INT_CTRL_DRDY_EN|INT_CTRL_INT_LEVEL,10))
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	230a      	movs	r3, #10
 8003ffe:	2242      	movs	r2, #66	; 0x42
 8004000:	2119      	movs	r1, #25
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f81d 	bl	8004042 <_ZN6BMP39012initAndCheckEhhhb>
 8004008:	4603      	mov	r3, r0
 800400a:	f083 0301 	eor.w	r3, r3, #1
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <_ZN6BMP39011defaultInitEv+0xd8>
		return false;
 8004014:	2300      	movs	r3, #0
 8004016:	e010      	b.n	800403a <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(PWR_CTRL,PWR_CTRL_PRESS_EN|PWR_CTRL_TEMP_EN|PWR_CTRL_MODE_NORMAL,10))
 8004018:	2300      	movs	r3, #0
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	230a      	movs	r3, #10
 800401e:	2233      	movs	r2, #51	; 0x33
 8004020:	211b      	movs	r1, #27
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f80d 	bl	8004042 <_ZN6BMP39012initAndCheckEhhhb>
 8004028:	4603      	mov	r3, r0
 800402a:	f083 0301 	eor.w	r3, r3, #1
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <_ZN6BMP39011defaultInitEv+0xf8>
		return false;
 8004034:	2300      	movs	r3, #0
 8004036:	e000      	b.n	800403a <_ZN6BMP39011defaultInitEv+0xfa>

	return true;
 8004038:	2301      	movs	r3, #1
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <_ZN6BMP39012initAndCheckEhhhb>:

bool BMP390::initAndCheck(uint8_t addr,uint8_t val,uint8_t numberOfTries,bool read_only)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b084      	sub	sp, #16
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	4608      	mov	r0, r1
 800404c:	4611      	mov	r1, r2
 800404e:	461a      	mov	r2, r3
 8004050:	4603      	mov	r3, r0
 8004052:	70fb      	strb	r3, [r7, #3]
 8004054:	460b      	mov	r3, r1
 8004056:	70bb      	strb	r3, [r7, #2]
 8004058:	4613      	mov	r3, r2
 800405a:	707b      	strb	r3, [r7, #1]
	for (int i=0;i<numberOfTries;i++)
 800405c:	2300      	movs	r3, #0
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	787b      	ldrb	r3, [r7, #1]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	429a      	cmp	r2, r3
 8004066:	da21      	bge.n	80040ac <_ZN6BMP39012initAndCheckEhhhb+0x6a>
	{
		if (read_only==false)
 8004068:	7e3b      	ldrb	r3, [r7, #24]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <_ZN6BMP39012initAndCheckEhhhb+0x3a>
			SPI_write(addr,val);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	78ba      	ldrb	r2, [r7, #2]
 8004076:	78f9      	ldrb	r1, [r7, #3]
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	4798      	blx	r3

		if (SPI_read(addr)==val)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3304      	adds	r3, #4
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	78fa      	ldrb	r2, [r7, #3]
 8004086:	4611      	mov	r1, r2
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	4798      	blx	r3
 800408c:	4603      	mov	r3, r0
 800408e:	461a      	mov	r2, r3
 8004090:	78bb      	ldrb	r3, [r7, #2]
 8004092:	4293      	cmp	r3, r2
 8004094:	bf0c      	ite	eq
 8004096:	2301      	moveq	r3, #1
 8004098:	2300      	movne	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <_ZN6BMP39012initAndCheckEhhhb+0x62>
			return true;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e004      	b.n	80040ae <_ZN6BMP39012initAndCheckEhhhb+0x6c>
	for (int i=0;i<numberOfTries;i++)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3301      	adds	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	e7d9      	b.n	8004060 <_ZN6BMP39012initAndCheckEhhhb+0x1e>
	}
	return false;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <_ZN6BMP3906updateEv>:

void BMP390::update()
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
	uint8_t DATA0=SPI_read(DATA_0);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3304      	adds	r3, #4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2104      	movs	r1, #4
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	4798      	blx	r3
 80040cc:	4603      	mov	r3, r0
 80040ce:	73fb      	strb	r3, [r7, #15]
	uint8_t DATA1=SPI_read(DATA_1);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3304      	adds	r3, #4
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2105      	movs	r1, #5
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
 80040de:	4603      	mov	r3, r0
 80040e0:	73bb      	strb	r3, [r7, #14]
	uint8_t DATA2=SPI_read(DATA_2);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3304      	adds	r3, #4
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2106      	movs	r1, #6
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	4798      	blx	r3
 80040f0:	4603      	mov	r3, r0
 80040f2:	737b      	strb	r3, [r7, #13]

	uint8_t TEMP0=SPI_read(DATA_3);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3304      	adds	r3, #4
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2107      	movs	r1, #7
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	4798      	blx	r3
 8004102:	4603      	mov	r3, r0
 8004104:	733b      	strb	r3, [r7, #12]
	uint8_t TEMP1=SPI_read(DATA_4);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3304      	adds	r3, #4
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2108      	movs	r1, #8
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	4798      	blx	r3
 8004114:	4603      	mov	r3, r0
 8004116:	72fb      	strb	r3, [r7, #11]
	uint8_t TEMP2=SPI_read(DATA_5);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3304      	adds	r3, #4
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2109      	movs	r1, #9
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	4798      	blx	r3
 8004126:	4603      	mov	r3, r0
 8004128:	72bb      	strb	r3, [r7, #10]

	this->raw_pressure = ((uint32_t)DATA2<<16)|((uint16_t)DATA1<<8)|DATA0;
 800412a:	7b7b      	ldrb	r3, [r7, #13]
 800412c:	041b      	lsls	r3, r3, #16
 800412e:	7bba      	ldrb	r2, [r7, #14]
 8004130:	0212      	lsls	r2, r2, #8
 8004132:	431a      	orrs	r2, r3
 8004134:	7bfb      	ldrb	r3, [r7, #15]
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	this->raw_temp = ((uint32_t)TEMP2<<16)|((uint16_t)TEMP1<<8)|TEMP0;
 800413e:	7abb      	ldrb	r3, [r7, #10]
 8004140:	041b      	lsls	r3, r3, #16
 8004142:	7afa      	ldrb	r2, [r7, #11]
 8004144:	0212      	lsls	r2, r2, #8
 8004146:	431a      	orrs	r2, r3
 8004148:	7b3b      	ldrb	r3, [r7, #12]
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	this->read_calib_data();
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fa72 	bl	800463c <_ZN6BMP39015read_calib_dataEv>
	this->compensate_data();
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f804 	bl	8004166 <_ZN6BMP39015compensate_dataEv>
}
 800415e:	bf00      	nop
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <_ZN6BMP39015compensate_dataEv>:

void BMP390::compensate_data()
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
	this->read_calib_data();
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fa64 	bl	800463c <_ZN6BMP39015read_calib_dataEv>
	this->compensate_temperature();
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f807 	bl	8004188 <_ZN6BMP39022compensate_temperatureEv>
	this->compensate_pressure();
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f854 	bl	8004228 <_ZN6BMP39019compensate_pressureEv>
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <_ZN6BMP39022compensate_temperatureEv>:

void BMP390::compensate_temperature()
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
    double partial_data1 = 0;
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double partial_data2 = 0;
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	e9c7 2302 	strd	r2, r3, [r7, #8]

    partial_data1 = static_cast<double>(this->raw_temp) - quantizedCalibCoef.par_t1;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fc f958 	bl	8000464 <__aeabi_ui2d>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80041ba:	f7fc f815 	bl	80001e8 <__aeabi_dsub>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    partial_data2 = partial_data1 * quantizedCalibCoef.par_t2;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80041cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80041d0:	f7fc f9c2 	bl	8000558 <__aeabi_dmul>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	e9c7 2302 	strd	r2, r3, [r7, #8]

    this->quantizedCalibCoef.t_lin = partial_data2 + (partial_data1 * partial_data1) * quantizedCalibCoef.par_t3;
 80041dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80041e4:	f7fc f9b8 	bl	8000558 <__aeabi_dmul>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4610      	mov	r0, r2
 80041ee:	4619      	mov	r1, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80041f6:	f7fc f9af 	bl	8000558 <__aeabi_dmul>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4610      	mov	r0, r2
 8004200:	4619      	mov	r1, r3
 8004202:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004206:	f7fb fff1 	bl	80001ec <__adddf3>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8

    this->temp = static_cast<double>(quantizedCalibCoef.t_lin);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
}
 8004220:	bf00      	nop
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <_ZN6BMP39019compensate_pressureEv>:

void BMP390::compensate_pressure()
{
 8004228:	b5b0      	push	{r4, r5, r7, lr}
 800422a:	b08e      	sub	sp, #56	; 0x38
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = this->quantizedCalibCoef.par_p6 * this->quantizedCalibCoef.t_lin;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 800423c:	f7fc f98c 	bl	8000558 <__aeabi_dmul>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data2 = this->quantizedCalibCoef.par_p7 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 800425a:	f7fc f97d 	bl	8000558 <__aeabi_dmul>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4620      	mov	r0, r4
 8004264:	4629      	mov	r1, r5
 8004266:	f7fc f977 	bl	8000558 <__aeabi_dmul>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data3 = this->quantizedCalibCoef.par_p8 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8004284:	f7fc f968 	bl	8000558 <__aeabi_dmul>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4610      	mov	r0, r2
 800428e:	4619      	mov	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8004296:	f7fc f95f 	bl	8000558 <__aeabi_dmul>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4620      	mov	r0, r4
 80042a0:	4629      	mov	r1, r5
 80042a2:	f7fc f959 	bl	8000558 <__aeabi_dmul>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_out1 = this->quantizedCalibCoef.par_p5 + partial_data1 + partial_data2 + partial_data3;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 80042b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80042b8:	f7fb ff98 	bl	80001ec <__adddf3>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4610      	mov	r0, r2
 80042c2:	4619      	mov	r1, r3
 80042c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042c8:	f7fb ff90 	bl	80001ec <__adddf3>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80042d4:	f7fb ff8a 	bl	80001ec <__adddf3>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	e9c7 2306 	strd	r2, r3, [r7, #24]

    partial_data1 = this->quantizedCalibCoef.par_p2 * this->quantizedCalibCoef.t_lin;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80042ec:	f7fc f934 	bl	8000558 <__aeabi_dmul>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data2 = this->quantizedCalibCoef.par_p3 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 800430a:	f7fc f925 	bl	8000558 <__aeabi_dmul>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4620      	mov	r0, r4
 8004314:	4629      	mov	r1, r5
 8004316:	f7fc f91f 	bl	8000558 <__aeabi_dmul>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data3 = this->quantizedCalibCoef.par_p4 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8004334:	f7fc f910 	bl	8000558 <__aeabi_dmul>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4610      	mov	r0, r2
 800433e:	4619      	mov	r1, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8004346:	f7fc f907 	bl	8000558 <__aeabi_dmul>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4620      	mov	r0, r4
 8004350:	4629      	mov	r1, r5
 8004352:	f7fc f901 	bl	8000558 <__aeabi_dmul>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_out2 = static_cast<double>(this->raw_pressure) * (this->quantizedCalibCoef.par_p1 + partial_data1 + partial_data2 + partial_data3);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004364:	4618      	mov	r0, r3
 8004366:	f7fc f87d 	bl	8000464 <__aeabi_ui2d>
 800436a:	4604      	mov	r4, r0
 800436c:	460d      	mov	r5, r1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8004374:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004378:	f7fb ff38 	bl	80001ec <__adddf3>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4610      	mov	r0, r2
 8004382:	4619      	mov	r1, r3
 8004384:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004388:	f7fb ff30 	bl	80001ec <__adddf3>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4610      	mov	r0, r2
 8004392:	4619      	mov	r1, r3
 8004394:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004398:	f7fb ff28 	bl	80001ec <__adddf3>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4620      	mov	r0, r4
 80043a2:	4629      	mov	r1, r5
 80043a4:	f7fc f8d8 	bl	8000558 <__aeabi_dmul>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	e9c7 2304 	strd	r2, r3, [r7, #16]

    partial_data1 = static_cast<double>(this->raw_pressure) * static_cast<double>(this->raw_pressure);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fc f854 	bl	8000464 <__aeabi_ui2d>
 80043bc:	4604      	mov	r4, r0
 80043be:	460d      	mov	r5, r1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fc f84c 	bl	8000464 <__aeabi_ui2d>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4620      	mov	r0, r4
 80043d2:	4629      	mov	r1, r5
 80043d4:	f7fc f8c0 	bl	8000558 <__aeabi_dmul>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data2 = this->quantizedCalibCoef.par_p9 + this->quantizedCalibCoef.par_p10 * this->quantizedCalibCoef.t_lin;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80043f2:	f7fc f8b1 	bl	8000558 <__aeabi_dmul>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4620      	mov	r0, r4
 80043fc:	4629      	mov	r1, r5
 80043fe:	f7fb fef5 	bl	80001ec <__adddf3>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data3 = partial_data1 * partial_data2;
 800440a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800440e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004412:	f7fc f8a1 	bl	8000558 <__aeabi_dmul>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data4 = partial_data3 + (static_cast<double>(this->raw_pressure) * static_cast<double>(this->raw_pressure) * static_cast<double>(this->raw_pressure)) * this->quantizedCalibCoef.par_p11;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004424:	4618      	mov	r0, r3
 8004426:	f7fc f81d 	bl	8000464 <__aeabi_ui2d>
 800442a:	4604      	mov	r4, r0
 800442c:	460d      	mov	r5, r1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004434:	4618      	mov	r0, r3
 8004436:	f7fc f815 	bl	8000464 <__aeabi_ui2d>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4620      	mov	r0, r4
 8004440:	4629      	mov	r1, r5
 8004442:	f7fc f889 	bl	8000558 <__aeabi_dmul>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4614      	mov	r4, r2
 800444c:	461d      	mov	r5, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004454:	4618      	mov	r0, r3
 8004456:	f7fc f805 	bl	8000464 <__aeabi_ui2d>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4620      	mov	r0, r4
 8004460:	4629      	mov	r1, r5
 8004462:	f7fc f879 	bl	8000558 <__aeabi_dmul>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4610      	mov	r0, r2
 800446c:	4619      	mov	r1, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8004474:	f7fc f870 	bl	8000558 <__aeabi_dmul>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004480:	f7fb feb4 	bl	80001ec <__adddf3>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	e9c7 2302 	strd	r2, r3, [r7, #8]

    this->pressure = (partial_out1 + partial_out2 + partial_data4) / 100.0f;
 800448c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004490:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004494:	f7fb feaa 	bl	80001ec <__adddf3>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4610      	mov	r0, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044a4:	f7fb fea2 	bl	80001ec <__adddf3>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4610      	mov	r0, r2
 80044ae:	4619      	mov	r1, r3
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <_ZN6BMP39019compensate_pressureEv+0x2a4>)
 80044b6:	f7fc f979 	bl	80007ac <__aeabi_ddiv>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
}
 80044c4:	bf00      	nop
 80044c6:	3738      	adds	r7, #56	; 0x38
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bdb0      	pop	{r4, r5, r7, pc}
 80044cc:	40590000 	.word	0x40590000

080044d0 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* BMP390::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 80044d0:	b5b0      	push	{r4, r5, r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3308      	adds	r3, #8
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::BMP_RAW_PRESS)!=senorsList.end())
 80044e2:	230f      	movs	r3, #15
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	f107 0310 	add.w	r3, r7, #16
 80044ea:	4619      	mov	r1, r3
 80044ec:	6838      	ldr	r0, [r7, #0]
 80044ee:	f000 fba9 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80044f2:	4603      	mov	r3, r0
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	6838      	ldr	r0, [r7, #0]
 80044f8:	f000 fbbd 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80044fc:	4603      	mov	r3, r0
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	f107 0214 	add.w	r2, r7, #20
 8004504:	f107 030c 	add.w	r3, r7, #12
 8004508:	4611      	mov	r1, r2
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fbc0 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d022      	beq.n	800455c <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x8c>
	{
		strcat(packet,toCharArray(pressure));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f103 0408 	add.w	r4, r3, #8
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	1d1d      	adds	r5, r3, #4
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8004526:	4610      	mov	r0, r2
 8004528:	4619      	mov	r1, r3
 800452a:	f7fc fac5 	bl	8000ab8 <__aeabi_d2iz>
 800452e:	4603      	mov	r3, r0
 8004530:	4619      	mov	r1, r3
 8004532:	4628      	mov	r0, r5
 8004534:	f7ff fb94 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 8004538:	4603      	mov	r3, r0
 800453a:	4619      	mov	r1, r3
 800453c:	4620      	mov	r0, r4
 800453e:	f012 f87d 	bl	801663c <strcat>
		strcat(packet,",");
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f103 0408 	add.w	r4, r3, #8
 8004548:	4620      	mov	r0, r4
 800454a:	f7fb fe41 	bl	80001d0 <strlen>
 800454e:	4603      	mov	r3, r0
 8004550:	4423      	add	r3, r4
 8004552:	4905      	ldr	r1, [pc, #20]	; (8004568 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x98>)
 8004554:	461a      	mov	r2, r3
 8004556:	460b      	mov	r3, r1
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3308      	adds	r3, #8
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bdb0      	pop	{r4, r5, r7, pc}
 8004568:	080167e0 	.word	0x080167e0

0800456c <_ZThn4_N6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	bool defaultInit();
	void update();
	int32_t getPressure();
	int32_t getTemp();
	uint8_t getChipID();
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 800456c:	f1a0 0004 	sub.w	r0, r0, #4
 8004570:	f7ff bfae 	b.w	80044d0 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>

08004574 <_ZN6BMP3909SPI_writeEhh>:
{
	return this->SPI_read(CHIP_ID);
}

void BMP390::SPI_write(uint8_t reg,uint8_t data)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	70fb      	strb	r3, [r7, #3]
 8004580:	4613      	mov	r3, r2
 8004582:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(BMP_CS_PORT,BMP_CS_PIN,GPIO_PIN_RESET);
 8004584:	2200      	movs	r2, #0
 8004586:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800458a:	480f      	ldr	r0, [pc, #60]	; (80045c8 <_ZN6BMP3909SPI_writeEhh+0x54>)
 800458c:	f006 fc36 	bl	800adfc <HAL_GPIO_WritePin>
	this->spiTxBuff[0] = reg;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	78fa      	ldrb	r2, [r7, #3]
 8004594:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	this->spiTxBuff[1] = data;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	78ba      	ldrb	r2, [r7, #2]
 800459c:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	33e4      	adds	r3, #228	; 0xe4
 80045aa:	2202      	movs	r2, #2
 80045ac:	4619      	mov	r1, r3
 80045ae:	f008 ffcf 	bl	800d550 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(BMP_CS_PORT,BMP_CS_PIN,GPIO_PIN_SET);
 80045b2:	2201      	movs	r2, #1
 80045b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045b8:	4803      	ldr	r0, [pc, #12]	; (80045c8 <_ZN6BMP3909SPI_writeEhh+0x54>)
 80045ba:	f006 fc1f 	bl	800adfc <HAL_GPIO_WritePin>
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40020400 	.word	0x40020400

080045cc <_ZN6BMP3908SPI_readEh>:

uint8_t BMP390::SPI_read(uint8_t reg)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BMP_CS_PORT, BMP_CS_PIN, GPIO_PIN_RESET);
 80045d8:	2200      	movs	r2, #0
 80045da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045de:	4816      	ldr	r0, [pc, #88]	; (8004638 <_ZN6BMP3908SPI_readEh+0x6c>)
 80045e0:	f006 fc0c 	bl	800adfc <HAL_GPIO_WritePin>
	this->spiTxBuff[0]=reg|0x80;
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	this->spiTxBuff[1]=0x00;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff, 2);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	33e4      	adds	r3, #228	; 0xe4
 8004604:	2202      	movs	r2, #2
 8004606:	4619      	mov	r1, r3
 8004608:	f008 ffa2 	bl	800d550 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(spi_port, (uint8_t*)spiRxBuff, 1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	33e6      	adds	r3, #230	; 0xe6
 8004616:	2201      	movs	r2, #1
 8004618:	4619      	mov	r1, r3
 800461a:	f009 f84f 	bl	800d6bc <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(BMP_CS_PORT, BMP_CS_PIN, GPIO_PIN_SET);
 800461e:	2201      	movs	r2, #1
 8004620:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004624:	4804      	ldr	r0, [pc, #16]	; (8004638 <_ZN6BMP3908SPI_readEh+0x6c>)
 8004626:	f006 fbe9 	bl	800adfc <HAL_GPIO_WritePin>

	return this->spiRxBuff[0];
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
}
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40020400 	.word	0x40020400

0800463c <_ZN6BMP39015read_calib_dataEv>:

void BMP390::read_calib_data()
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	; 0x28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
	double temp_var = 0;
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uint8_t NVM_PAR_T1_1_value = this->SPI_read(NVM_PAR_T1_1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3304      	adds	r3, #4
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2131      	movs	r1, #49	; 0x31
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	4798      	blx	r3
 800465e:	4603      	mov	r3, r0
 8004660:	77fb      	strb	r3, [r7, #31]
	uint8_t NVM_PAR_T1_2_value = this->SPI_read(NVM_PAR_T1_2);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3304      	adds	r3, #4
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2132      	movs	r1, #50	; 0x32
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	4798      	blx	r3
 8004670:	4603      	mov	r3, r0
 8004672:	77bb      	strb	r3, [r7, #30]
	uint8_t NVM_PAR_T2_1_value = this->SPI_read(NVM_PAR_T2_1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3304      	adds	r3, #4
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2133      	movs	r1, #51	; 0x33
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	4798      	blx	r3
 8004682:	4603      	mov	r3, r0
 8004684:	777b      	strb	r3, [r7, #29]
	uint8_t NVM_PAR_T2_2_value = this->SPI_read(NVM_PAR_T2_2);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3304      	adds	r3, #4
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2134      	movs	r1, #52	; 0x34
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	4798      	blx	r3
 8004694:	4603      	mov	r3, r0
 8004696:	773b      	strb	r3, [r7, #28]
	uint8_t NVM_PAR_T3_value = this->SPI_read(NVM_PAR_T3);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3304      	adds	r3, #4
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2135      	movs	r1, #53	; 0x35
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	4798      	blx	r3
 80046a6:	4603      	mov	r3, r0
 80046a8:	76fb      	strb	r3, [r7, #27]
	uint8_t NVM_PAR_P1_1_value = this->SPI_read(NVM_PAR_P1_1);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3304      	adds	r3, #4
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2136      	movs	r1, #54	; 0x36
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	4798      	blx	r3
 80046b8:	4603      	mov	r3, r0
 80046ba:	76bb      	strb	r3, [r7, #26]
	uint8_t NVM_PAR_P1_2_value = this->SPI_read(NVM_PAR_P1_2);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3304      	adds	r3, #4
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2137      	movs	r1, #55	; 0x37
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	4798      	blx	r3
 80046ca:	4603      	mov	r3, r0
 80046cc:	767b      	strb	r3, [r7, #25]
	uint8_t NVM_PAR_P2_1_value = this->SPI_read(NVM_PAR_P2_1);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3304      	adds	r3, #4
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2138      	movs	r1, #56	; 0x38
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	4798      	blx	r3
 80046dc:	4603      	mov	r3, r0
 80046de:	763b      	strb	r3, [r7, #24]
	uint8_t NVM_PAR_P2_2_value = this->SPI_read(NVM_PAR_P2_2);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3304      	adds	r3, #4
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2139      	movs	r1, #57	; 0x39
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	4798      	blx	r3
 80046ee:	4603      	mov	r3, r0
 80046f0:	75fb      	strb	r3, [r7, #23]
	uint8_t NVM_PAR_P3_value = this->SPI_read(NVM_PAR_P3);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3304      	adds	r3, #4
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	213a      	movs	r1, #58	; 0x3a
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	4798      	blx	r3
 8004700:	4603      	mov	r3, r0
 8004702:	75bb      	strb	r3, [r7, #22]
	uint8_t NVM_PAR_P4_value = this->SPI_read(NVM_PAR_P4);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3304      	adds	r3, #4
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	213b      	movs	r1, #59	; 0x3b
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	4798      	blx	r3
 8004712:	4603      	mov	r3, r0
 8004714:	757b      	strb	r3, [r7, #21]
	uint8_t NVM_PAR_P5_1_value = this->SPI_read(NVM_PAR_P5_1);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3304      	adds	r3, #4
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	213c      	movs	r1, #60	; 0x3c
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	4798      	blx	r3
 8004724:	4603      	mov	r3, r0
 8004726:	753b      	strb	r3, [r7, #20]
	uint8_t NVM_PAR_P5_2_value = this->SPI_read(NVM_PAR_P5_2);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3304      	adds	r3, #4
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	213d      	movs	r1, #61	; 0x3d
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	4798      	blx	r3
 8004736:	4603      	mov	r3, r0
 8004738:	74fb      	strb	r3, [r7, #19]
	uint8_t NVM_PAR_P6_1_value = this->SPI_read(NVM_PAR_P6_1);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3304      	adds	r3, #4
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	213e      	movs	r1, #62	; 0x3e
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	4798      	blx	r3
 8004748:	4603      	mov	r3, r0
 800474a:	74bb      	strb	r3, [r7, #18]
	uint8_t NVM_PAR_P6_2_value = this->SPI_read(NVM_PAR_P6_2);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3304      	adds	r3, #4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	213f      	movs	r1, #63	; 0x3f
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	4798      	blx	r3
 800475a:	4603      	mov	r3, r0
 800475c:	747b      	strb	r3, [r7, #17]
	uint8_t NVM_PAR_P7_value = this->SPI_read(NVM_PAR_P7);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3304      	adds	r3, #4
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2140      	movs	r1, #64	; 0x40
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	4798      	blx	r3
 800476c:	4603      	mov	r3, r0
 800476e:	743b      	strb	r3, [r7, #16]
	uint8_t NVM_PAR_P8_value = this->SPI_read(NVM_PAR_P8);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3304      	adds	r3, #4
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2141      	movs	r1, #65	; 0x41
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	4798      	blx	r3
 800477e:	4603      	mov	r3, r0
 8004780:	73fb      	strb	r3, [r7, #15]
	uint8_t NVM_PAR_P9_1_value = this->SPI_read(NVM_PAR_P9_1);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3304      	adds	r3, #4
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2142      	movs	r1, #66	; 0x42
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	4798      	blx	r3
 8004790:	4603      	mov	r3, r0
 8004792:	73bb      	strb	r3, [r7, #14]
	uint8_t NVM_PAR_P9_2_value = this->SPI_read(NVM_PAR_P9_2);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3304      	adds	r3, #4
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2143      	movs	r1, #67	; 0x43
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	4798      	blx	r3
 80047a2:	4603      	mov	r3, r0
 80047a4:	737b      	strb	r3, [r7, #13]
	uint8_t NVM_PAR_P10_value = this->SPI_read(NVM_PAR_P10);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3304      	adds	r3, #4
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2144      	movs	r1, #68	; 0x44
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	4798      	blx	r3
 80047b4:	4603      	mov	r3, r0
 80047b6:	733b      	strb	r3, [r7, #12]
	uint8_t NVM_PAR_P11_value = this->SPI_read(NVM_PAR_P11);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3304      	adds	r3, #4
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2145      	movs	r1, #69	; 0x45
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	4798      	blx	r3
 80047c6:	4603      	mov	r3, r0
 80047c8:	72fb      	strb	r3, [r7, #11]

    this->calibCoef.par_t1 = drone::utils::functions::concatBytes(NVM_PAR_T1_2_value, NVM_PAR_T1_1_value);
 80047ca:	7ffa      	ldrb	r2, [r7, #31]
 80047cc:	7fbb      	ldrb	r3, [r7, #30]
 80047ce:	4611      	mov	r1, r2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff fa61 	bl	8003c98 <_ZN5drone5utils9functionsL11concatBytesEhh>
 80047d6:	4603      	mov	r3, r0
 80047d8:	b29a      	uxth	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    this->calibCoef.par_t2 = drone::utils::functions::concatBytes(NVM_PAR_T2_2_value, NVM_PAR_T2_1_value);
 80047e0:	7f7a      	ldrb	r2, [r7, #29]
 80047e2:	7f3b      	ldrb	r3, [r7, #28]
 80047e4:	4611      	mov	r1, r2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fa56 	bl	8003c98 <_ZN5drone5utils9functionsL11concatBytesEhh>
 80047ec:	4603      	mov	r3, r0
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    this->calibCoef.par_t3 = static_cast<int8_t>(NVM_PAR_T3_value);
 80047f6:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    this->calibCoef.par_p1 = drone::utils::functions::concatBytes(NVM_PAR_P1_2_value, NVM_PAR_P1_1_value);
 8004800:	7eba      	ldrb	r2, [r7, #26]
 8004802:	7e7b      	ldrb	r3, [r7, #25]
 8004804:	4611      	mov	r1, r2
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fa46 	bl	8003c98 <_ZN5drone5utils9functionsL11concatBytesEhh>
 800480c:	4603      	mov	r3, r0
 800480e:	461a      	mov	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    this->calibCoef.par_p2 = drone::utils::functions::concatBytes(NVM_PAR_P2_2_value, NVM_PAR_P2_1_value);
 8004816:	7e3a      	ldrb	r2, [r7, #24]
 8004818:	7dfb      	ldrb	r3, [r7, #23]
 800481a:	4611      	mov	r1, r2
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff fa3b 	bl	8003c98 <_ZN5drone5utils9functionsL11concatBytesEhh>
 8004822:	4603      	mov	r3, r0
 8004824:	461a      	mov	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    this->calibCoef.par_p3 = static_cast<int8_t>(NVM_PAR_P3_value);
 800482c:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    this->calibCoef.par_p4 = static_cast<int8_t>(NVM_PAR_P4_value);
 8004836:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    this->calibCoef.par_p5 = drone::utils::functions::concatBytes(NVM_PAR_P5_2_value, NVM_PAR_P5_1_value);
 8004840:	7d3a      	ldrb	r2, [r7, #20]
 8004842:	7cfb      	ldrb	r3, [r7, #19]
 8004844:	4611      	mov	r1, r2
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff fa26 	bl	8003c98 <_ZN5drone5utils9functionsL11concatBytesEhh>
 800484c:	4603      	mov	r3, r0
 800484e:	b29a      	uxth	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    this->calibCoef.par_p6 = drone::utils::functions::concatBytes(NVM_PAR_P6_2_value, NVM_PAR_P6_1_value);
 8004856:	7cba      	ldrb	r2, [r7, #18]
 8004858:	7c7b      	ldrb	r3, [r7, #17]
 800485a:	4611      	mov	r1, r2
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff fa1b 	bl	8003c98 <_ZN5drone5utils9functionsL11concatBytesEhh>
 8004862:	4603      	mov	r3, r0
 8004864:	b29a      	uxth	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    this->calibCoef.par_p7 = static_cast<int8_t>(NVM_PAR_P7_value);
 800486c:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    this->calibCoef.par_p8 = static_cast<int8_t>(NVM_PAR_P8_value);
 8004876:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    this->calibCoef.par_p9 = drone::utils::functions::concatBytes(NVM_PAR_P9_2_value, NVM_PAR_P9_1_value);
 8004880:	7bba      	ldrb	r2, [r7, #14]
 8004882:	7b7b      	ldrb	r3, [r7, #13]
 8004884:	4611      	mov	r1, r2
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff fa06 	bl	8003c98 <_ZN5drone5utils9functionsL11concatBytesEhh>
 800488c:	4603      	mov	r3, r0
 800488e:	461a      	mov	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    this->calibCoef.par_p10 = static_cast<int8_t>(NVM_PAR_P10_value);
 8004896:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    this->calibCoef.par_p11 = static_cast<int8_t>(NVM_PAR_P11_value);
 80048a0:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

    temp_var = 0.00390625f;
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	4b90      	ldr	r3, [pc, #576]	; (8004af0 <_ZN6BMP39015read_calib_dataEv+0x4b4>)
 80048b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_t1 = static_cast<double>(this->calibCoef.par_t1) / temp_var;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fb fdd2 	bl	8000464 <__aeabi_ui2d>
 80048c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048c4:	f7fb ff72 	bl	80007ac <__aeabi_ddiv>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
    temp_var = 1073741824.0f;
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	4b87      	ldr	r3, [pc, #540]	; (8004af4 <_ZN6BMP39015read_calib_dataEv+0x4b8>)
 80048d8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_t2 = static_cast<double>(this->calibCoef.par_t2) / temp_var;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fb fdbe 	bl	8000464 <__aeabi_ui2d>
 80048e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048ec:	f7fb ff5e 	bl	80007ac <__aeabi_ddiv>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
    temp_var = 281474976710656.0f;
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	4b7e      	ldr	r3, [pc, #504]	; (8004af8 <_ZN6BMP39015read_calib_dataEv+0x4bc>)
 8004900:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_t3 = static_cast<double>(this->calibCoef.par_t3) / temp_var;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 800490a:	4618      	mov	r0, r3
 800490c:	f7fb fdba 	bl	8000484 <__aeabi_i2d>
 8004910:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004914:	f7fb ff4a 	bl	80007ac <__aeabi_ddiv>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
    temp_var = 1048576.0f;
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	4b75      	ldr	r3, [pc, #468]	; (8004afc <_ZN6BMP39015read_calib_dataEv+0x4c0>)
 8004928:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p1 = static_cast<double>(this->calibCoef.par_p1 - 16384) / temp_var;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8004932:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8004936:	4618      	mov	r0, r3
 8004938:	f7fb fda4 	bl	8000484 <__aeabi_i2d>
 800493c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004940:	f7fb ff34 	bl	80007ac <__aeabi_ddiv>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    temp_var = 536870912.0f;
 800494e:	f04f 0200 	mov.w	r2, #0
 8004952:	4b6b      	ldr	r3, [pc, #428]	; (8004b00 <_ZN6BMP39015read_calib_dataEv+0x4c4>)
 8004954:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p2 = static_cast<double>(this->calibCoef.par_p2 - 16384) / temp_var;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800495e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8004962:	4618      	mov	r0, r3
 8004964:	f7fb fd8e 	bl	8000484 <__aeabi_i2d>
 8004968:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800496c:	f7fb ff1e 	bl	80007ac <__aeabi_ddiv>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    temp_var = 4294967296.0f;
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	4b61      	ldr	r3, [pc, #388]	; (8004b04 <_ZN6BMP39015read_calib_dataEv+0x4c8>)
 8004980:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p3 = static_cast<double>(this->calibCoef.par_p3) / temp_var;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f993 305a 	ldrsb.w	r3, [r3, #90]	; 0x5a
 800498a:	4618      	mov	r0, r3
 800498c:	f7fb fd7a 	bl	8000484 <__aeabi_i2d>
 8004990:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004994:	f7fb ff0a 	bl	80007ac <__aeabi_ddiv>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    temp_var = 137438953472.0f;
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	4b58      	ldr	r3, [pc, #352]	; (8004b08 <_ZN6BMP39015read_calib_dataEv+0x4cc>)
 80049a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p4 = static_cast<double>(this->calibCoef.par_p4) / temp_var;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f993 305b 	ldrsb.w	r3, [r3, #91]	; 0x5b
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fb fd66 	bl	8000484 <__aeabi_i2d>
 80049b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049bc:	f7fb fef6 	bl	80007ac <__aeabi_ddiv>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

    temp_var = 0.125f;
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80049d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p5 = static_cast<double>(this->calibCoef.par_p5) / temp_var;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fb fd41 	bl	8000464 <__aeabi_ui2d>
 80049e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049e6:	f7fb fee1 	bl	80007ac <__aeabi_ddiv>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    temp_var = 64.0f;
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	4b44      	ldr	r3, [pc, #272]	; (8004b0c <_ZN6BMP39015read_calib_dataEv+0x4d0>)
 80049fa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p6 = static_cast<double>(this->calibCoef.par_p6) / temp_var;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fb fd2d 	bl	8000464 <__aeabi_ui2d>
 8004a0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a0e:	f7fb fecd 	bl	80007ac <__aeabi_ddiv>
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    temp_var = 256.0f;
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	4b3b      	ldr	r3, [pc, #236]	; (8004b10 <_ZN6BMP39015read_calib_dataEv+0x4d4>)
 8004a22:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p7 = static_cast<double>(this->calibCoef.par_p7) / temp_var;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f993 3060 	ldrsb.w	r3, [r3, #96]	; 0x60
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fb fd29 	bl	8000484 <__aeabi_i2d>
 8004a32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a36:	f7fb feb9 	bl	80007ac <__aeabi_ddiv>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    temp_var = 32768.0f;
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	4b32      	ldr	r3, [pc, #200]	; (8004b14 <_ZN6BMP39015read_calib_dataEv+0x4d8>)
 8004a4a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p8 = static_cast<double>(this->calibCoef.par_p8) / temp_var;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f993 3061 	ldrsb.w	r3, [r3, #97]	; 0x61
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fb fd15 	bl	8000484 <__aeabi_i2d>
 8004a5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a5e:	f7fb fea5 	bl	80007ac <__aeabi_ddiv>
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
    temp_var = 281474976710656.0f;
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	4b21      	ldr	r3, [pc, #132]	; (8004af8 <_ZN6BMP39015read_calib_dataEv+0x4bc>)
 8004a72:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p9 = static_cast<double>(this->calibCoef.par_p9) / temp_var;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fb fd01 	bl	8000484 <__aeabi_i2d>
 8004a82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a86:	f7fb fe91 	bl	80007ac <__aeabi_ddiv>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
    temp_var = 281474976710656.0f;
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	4b17      	ldr	r3, [pc, #92]	; (8004af8 <_ZN6BMP39015read_calib_dataEv+0x4bc>)
 8004a9a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p10 = static_cast<double>(this->calibCoef.par_p10) / temp_var;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f993 3064 	ldrsb.w	r3, [r3, #100]	; 0x64
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fb fced 	bl	8000484 <__aeabi_i2d>
 8004aaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aae:	f7fb fe7d 	bl	80007ac <__aeabi_ddiv>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    temp_var = 36893488147419103232.0f;
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 8004ac4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p11 = static_cast<double>(this->calibCoef.par_p11) / temp_var;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fb fcd8 	bl	8000484 <__aeabi_i2d>
 8004ad4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ad8:	f7fb fe68 	bl	80007ac <__aeabi_ddiv>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	6879      	ldr	r1, [r7, #4]
 8004ae2:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
}
 8004ae6:	bf00      	nop
 8004ae8:	3728      	adds	r7, #40	; 0x28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	3f700000 	.word	0x3f700000
 8004af4:	41d00000 	.word	0x41d00000
 8004af8:	42f00000 	.word	0x42f00000
 8004afc:	41300000 	.word	0x41300000
 8004b00:	41c00000 	.word	0x41c00000
 8004b04:	41f00000 	.word	0x41f00000
 8004b08:	42400000 	.word	0x42400000
 8004b0c:	40500000 	.word	0x40500000
 8004b10:	40700000 	.word	0x40700000
 8004b14:	40e00000 	.word	0x40e00000

08004b18 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 8004b22:	2301      	movs	r3, #1
 8004b24:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	fb03 f303 	mul.w	r3, r3, r3
 8004b2c:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	fb02 f303 	mul.w	r3, r2, r3
 8004b36:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	fb02 f303 	mul.w	r3, r2, r3
 8004b40:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d201      	bcs.n	8004b4e <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	e01d      	b.n	8004b8a <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d202      	bcs.n	8004b5c <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	e016      	b.n	8004b8a <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d202      	bcs.n	8004b6a <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	3302      	adds	r3, #2
 8004b68:	e00f      	b.n	8004b8a <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d202      	bcs.n	8004b78 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	3303      	adds	r3, #3
 8004b76:	e008      	b.n	8004b8a <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b80:	607b      	str	r3, [r7, #4]
	  __n += 4;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	3304      	adds	r3, #4
 8004b86:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8004b88:	e7db      	b.n	8004b42 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8004b98:	b480      	push	{r7}
 8004b9a:	b089      	sub	sp, #36	; 0x24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b63      	cmp	r3, #99	; 0x63
 8004bae:	d925      	bls.n	8004bfc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x64>
	{
	  auto const __num = (__val % 100) * 2;
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	4b22      	ldr	r3, [pc, #136]	; (8004c3c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8004bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	2164      	movs	r1, #100	; 0x64
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	61bb      	str	r3, [r7, #24]
	  __val /= 100;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a1c      	ldr	r2, [pc, #112]	; (8004c3c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8004bca:	fba2 2303 	umull	r2, r3, r2, r3
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	68f9      	ldr	r1, [r7, #12]
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	440b      	add	r3, r1
 8004bdc:	4918      	ldr	r1, [pc, #96]	; (8004c40 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8004bde:	5c8a      	ldrb	r2, [r1, r2]
 8004be0:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4413      	add	r3, r2
 8004bea:	4915      	ldr	r1, [pc, #84]	; (8004c40 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	440a      	add	r2, r1
 8004bf0:	7812      	ldrb	r2, [r2, #0]
 8004bf2:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	3b02      	subs	r3, #2
 8004bf8:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8004bfa:	e7d6      	b.n	8004baa <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x12>
	}
      if (__val >= 10)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b09      	cmp	r3, #9
 8004c00:	d910      	bls.n	8004c24 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	617b      	str	r3, [r7, #20]
	  __first[1] = __digits[__num + 1];
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	490b      	ldr	r1, [pc, #44]	; (8004c40 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8004c12:	5c8a      	ldrb	r2, [r1, r2]
 8004c14:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 8004c16:	4a0a      	ldr	r2, [pc, #40]	; (8004c40 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	781a      	ldrb	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 8004c22:	e005      	b.n	8004c30 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	3330      	adds	r3, #48	; 0x30
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	701a      	strb	r2, [r3, #0]
    }
 8004c30:	bf00      	nop
 8004c32:	3724      	adds	r7, #36	; 0x24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	51eb851f 	.word	0x51eb851f
 8004c40:	080169dc 	.word	0x080169dc

08004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>:
       *  the key matches.  If successful the function returns an iterator
       *  pointing to the sought after element.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */
      iterator
      find(const key_type& __x)
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6839      	ldr	r1, [r7, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 f830 	bl	8004cb8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	f107 020c 	add.w	r2, r7, #12
 8004c60:	f107 0308 	add.w	r3, r7, #8
 8004c64:	4611      	mov	r1, r2
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 f862 	bl	8004d30 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b082      	sub	sp, #8
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 f865 	bl	8004d50 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 8004c86:	4603      	mov	r3, r0
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      { return __x._M_node == __y._M_node; }

#if ! __cpp_lib_three_way_comparison
      friend bool
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	bf14      	ite	ne
 8004ca6:	2301      	movne	r3, #1
 8004ca8:	2300      	moveq	r3, #0
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004cb8:	b590      	push	{r4, r7, lr}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f855 	bl	8004d72 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>
 8004cc8:	4604      	mov	r4, r0
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f85d 	bl	8004d8a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f863 	bl	8004da2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f88f 	bl	8004e04 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	f107 020c 	add.w	r2, r7, #12
 8004cee:	f107 0308 	add.w	r3, r7, #8
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 f896 	bl	8004e26 <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8004cfa:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10d      	bne.n	8004d1c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 8004d00:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8004d02:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 f8a2 	bl	8004e4e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	6839      	ldr	r1, [r7, #0]
 8004d10:	4620      	mov	r0, r4
 8004d12:	f000 f8a8 	bl	8004e66 <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d004      	beq.n	8004d26 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f871 	bl	8004e04 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 8004d22:	4603      	mov	r3, r0
 8004d24:	e000      	b.n	8004d28 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x70>
 8004d26:	68bb      	ldr	r3, [r7, #8]
    }
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd90      	pop	{r4, r7, pc}

08004d30 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4618      	mov	r0, r3
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	1d1a      	adds	r2, r3, #4
 8004d5c:	f107 030c 	add.w	r3, r7, #12
 8004d60:	4611      	mov	r1, r2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 f894 	bl	8004e90 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPKSt18_Rb_tree_node_base>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3304      	adds	r3, #4
 8004d96:	4618      	mov	r0, r3
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004da2:	b590      	push	{r4, r7, lr}
 8004da4:	b087      	sub	sp, #28
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	607a      	str	r2, [r7, #4]
 8004dae:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d01b      	beq.n	8004dee <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8004db6:	68fc      	ldr	r4, [r7, #12]
 8004db8:	68b8      	ldr	r0, [r7, #8]
 8004dba:	f000 f878 	bl	8004eae <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f000 f84e 	bl	8004e66 <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	f083 0301 	eor.w	r3, r3, #1
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d006      	beq.n	8004de4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	607b      	str	r3, [r7, #4]
 8004dda:	68b8      	ldr	r0, [r7, #8]
 8004ddc:	f000 f87a 	bl	8004ed4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004de0:	60b8      	str	r0, [r7, #8]
 8004de2:	e7e5      	b.n	8004db0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0xe>
	  __x = _S_right(__x);
 8004de4:	68b8      	ldr	r0, [r7, #8]
 8004de6:	f000 f881 	bl	8004eec <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004dea:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8004dec:	e7e0      	b.n	8004db0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0xe>
      return iterator(__y);
 8004dee:	f107 0314 	add.w	r3, r7, #20
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 f885 	bl	8004f04 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8004dfa:	697b      	ldr	r3, [r7, #20]
    }
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd90      	pop	{r4, r7, pc}

08004e04 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	1d1a      	adds	r2, r3, #4
 8004e10:	f107 030c 	add.w	r3, r7, #12
 8004e14:	4611      	mov	r1, r2
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 f874 	bl	8004f04 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	bf0c      	ite	eq
 8004e3c:	2301      	moveq	r3, #1
 8004e3e:	2300      	movne	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	4618      	mov	r0, r3
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b082      	sub	sp, #8
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f829 	bl	8004eae <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8004e66:	b480      	push	{r7}
 8004e68:	b085      	sub	sp, #20
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	bfb4      	ite	lt
 8004e7e:	2301      	movlt	r3, #1
 8004e80:	2300      	movge	r3, #0
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>:
      _S_key(_Const_Link_type __x)
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f833 	bl	8004f22 <_ZNKSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	f107 030c 	add.w	r3, r7, #12
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 f83a 	bl	8004f3e <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 8004eca:	4603      	mov	r3, r0
      }
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4618      	mov	r0, r3
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <_ZNKSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>:
      _M_valptr() const
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b082      	sub	sp, #8
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3310      	adds	r3, #16
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f811 	bl	8004f56 <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>
 8004f34:	4603      	mov	r3, r0
 8004f36:	4618      	mov	r0, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>:
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	6039      	str	r1, [r7, #0]
      { return __x; }
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>:
      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b082      	sub	sp, #8
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f805 	bl	8004f6e <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>
 8004f64:	4603      	mov	r3, r0
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>:
      _M_addr() const noexcept
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <_ZN17BatteryManagement3runEv>:
//#include "../BatteryManagement_lib/BaterryManagement.hpp"

#include "BatteryManagement.hpp"

void BatteryManagement::run()
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	tick_counter++;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	619a      	str	r2, [r3, #24]
	toPercentage();
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f82a 	bl	8004ff0 <_ZN17BatteryManagement12toPercentageEv>

	if (tick_counter>=frequency_tick)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	8a92      	ldrh	r2, [r2, #20]
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d31e      	bcc.n	8004fe6 <_ZN17BatteryManagement3runEv+0x62>
	{
		HAL_ADC_Start_DMA(adc_port, &batteryVal,1);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68d8      	ldr	r0, [r3, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	331c      	adds	r3, #28
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	f004 fb12 	bl	80095dc <HAL_ADC_Start_DMA>

		if (batteryVal<=BATERRY_MIN_3V2 && batteryVal > BATTERY_CONNECTED_THRESHOLD)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	8852      	ldrh	r2, [r2, #2]
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d80d      	bhi.n	8004fe0 <_ZN17BatteryManagement3runEv+0x5c>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	8892      	ldrh	r2, [r2, #4]
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d907      	bls.n	8004fe0 <_ZN17BatteryManagement3runEv+0x5c>
		{
			buzz->beep(2000U,200U,1U);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6918      	ldr	r0, [r3, #16]
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	22c8      	movs	r2, #200	; 0xc8
 8004fd8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004fdc:	f000 f8f3 	bl	80051c6 <_ZN6Buzzer4beepEiii>
		}

		tick_counter = 0;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	619a      	str	r2, [r3, #24]
	}
}
 8004fe6:	bf00      	nop
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <_ZN17BatteryManagement12toPercentageEv>:

void BatteryManagement::toPercentage()
{
 8004ff0:	b5b0      	push	{r4, r5, r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
	if(batteryVal>BATERRY_MAX_4V2)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	8812      	ldrh	r2, [r2, #0]
 8005000:	4293      	cmp	r3, r2
 8005002:	d906      	bls.n	8005012 <_ZN17BatteryManagement12toPercentageEv+0x22>
	{
		batteryPercentage = 100;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a50      	ldr	r2, [pc, #320]	; (8005148 <_ZN17BatteryManagement12toPercentageEv+0x158>)
 8005008:	621a      	str	r2, [r3, #32]
		batteryVoltage = 4.2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a4f      	ldr	r2, [pc, #316]	; (800514c <_ZN17BatteryManagement12toPercentageEv+0x15c>)
 800500e:	625a      	str	r2, [r3, #36]	; 0x24
	else
	{
		batteryVoltage = 3.2+(450.0-(BATERRY_MAX_4V2-batteryVal))/(BATERRY_MAX_4V2-BATERRY_MIN_3V2);
		batteryPercentage = 123.0 - 123.0/pow((1.0 + pow(batteryVoltage/3.7,80)),0.165);
	}
}
 8005010:	e081      	b.n	8005116 <_ZN17BatteryManagement12toPercentageEv+0x126>
	else if(batteryVal<BATERRY_MIN_3V2)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	8852      	ldrh	r2, [r2, #2]
 800501a:	4293      	cmp	r3, r2
 800501c:	d207      	bcs.n	800502e <_ZN17BatteryManagement12toPercentageEv+0x3e>
		batteryPercentage = 0;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	621a      	str	r2, [r3, #32]
		batteryVoltage = 3.2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a49      	ldr	r2, [pc, #292]	; (8005150 <_ZN17BatteryManagement12toPercentageEv+0x160>)
 800502a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800502c:	e073      	b.n	8005116 <_ZN17BatteryManagement12toPercentageEv+0x126>
		batteryVoltage = 3.2+(450.0-(BATERRY_MAX_4V2-batteryVal))/(BATERRY_MAX_4V2-BATERRY_MIN_3V2);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	4618      	mov	r0, r3
 800503c:	f7fb fa12 	bl	8000464 <__aeabi_ui2d>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	a136      	add	r1, pc, #216	; (adr r1, 8005120 <_ZN17BatteryManagement12toPercentageEv+0x130>)
 8005046:	e9d1 0100 	ldrd	r0, r1, [r1]
 800504a:	f7fb f8cd 	bl	80001e8 <__aeabi_dsub>
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	4614      	mov	r4, r2
 8005054:	461d      	mov	r5, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	885b      	ldrh	r3, [r3, #2]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	4618      	mov	r0, r3
 8005064:	f7fb fa0e 	bl	8000484 <__aeabi_i2d>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	4620      	mov	r0, r4
 800506e:	4629      	mov	r1, r5
 8005070:	f7fb fb9c 	bl	80007ac <__aeabi_ddiv>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4610      	mov	r0, r2
 800507a:	4619      	mov	r1, r3
 800507c:	a32a      	add	r3, pc, #168	; (adr r3, 8005128 <_ZN17BatteryManagement12toPercentageEv+0x138>)
 800507e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005082:	f7fb f8b3 	bl	80001ec <__adddf3>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4610      	mov	r0, r2
 800508c:	4619      	mov	r1, r3
 800508e:	f7fb fd3b 	bl	8000b08 <__aeabi_d2f>
 8005092:	4602      	mov	r2, r0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	625a      	str	r2, [r3, #36]	; 0x24
		batteryPercentage = 123.0 - 123.0/pow((1.0 + pow(batteryVoltage/3.7,80)),0.165);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	4618      	mov	r0, r3
 800509e:	f7fb fa03 	bl	80004a8 <__aeabi_f2d>
 80050a2:	a323      	add	r3, pc, #140	; (adr r3, 8005130 <_ZN17BatteryManagement12toPercentageEv+0x140>)
 80050a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a8:	f7fb fb80 	bl	80007ac <__aeabi_ddiv>
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	ec43 2b17 	vmov	d7, r2, r3
 80050b4:	2050      	movs	r0, #80	; 0x50
 80050b6:	eeb0 0a47 	vmov.f32	s0, s14
 80050ba:	eef0 0a67 	vmov.f32	s1, s15
 80050be:	f000 f866 	bl	800518e <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80050c2:	ec51 0b10 	vmov	r0, r1, d0
 80050c6:	f04f 0200 	mov.w	r2, #0
 80050ca:	4b22      	ldr	r3, [pc, #136]	; (8005154 <_ZN17BatteryManagement12toPercentageEv+0x164>)
 80050cc:	f7fb f88e 	bl	80001ec <__adddf3>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	ec43 2b17 	vmov	d7, r2, r3
 80050d8:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8005138 <_ZN17BatteryManagement12toPercentageEv+0x148>
 80050dc:	eeb0 0a47 	vmov.f32	s0, s14
 80050e0:	eef0 0a67 	vmov.f32	s1, s15
 80050e4:	f010 f846 	bl	8015174 <pow>
 80050e8:	ec53 2b10 	vmov	r2, r3, d0
 80050ec:	a114      	add	r1, pc, #80	; (adr r1, 8005140 <_ZN17BatteryManagement12toPercentageEv+0x150>)
 80050ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050f2:	f7fb fb5b 	bl	80007ac <__aeabi_ddiv>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	a111      	add	r1, pc, #68	; (adr r1, 8005140 <_ZN17BatteryManagement12toPercentageEv+0x150>)
 80050fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005100:	f7fb f872 	bl	80001e8 <__aeabi_dsub>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	4610      	mov	r0, r2
 800510a:	4619      	mov	r1, r3
 800510c:	f7fb fcfc 	bl	8000b08 <__aeabi_d2f>
 8005110:	4602      	mov	r2, r0
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	621a      	str	r2, [r3, #32]
}
 8005116:	bf00      	nop
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bdb0      	pop	{r4, r5, r7, pc}
 800511e:	bf00      	nop
 8005120:	00000000 	.word	0x00000000
 8005124:	407c2000 	.word	0x407c2000
 8005128:	9999999a 	.word	0x9999999a
 800512c:	40099999 	.word	0x40099999
 8005130:	9999999a 	.word	0x9999999a
 8005134:	400d9999 	.word	0x400d9999
 8005138:	51eb851f 	.word	0x51eb851f
 800513c:	3fc51eb8 	.word	0x3fc51eb8
 8005140:	00000000 	.word	0x00000000
 8005144:	405ec000 	.word	0x405ec000
 8005148:	42c80000 	.word	0x42c80000
 800514c:	40866666 	.word	0x40866666
 8005150:	404ccccd 	.word	0x404ccccd
 8005154:	3ff00000 	.word	0x3ff00000

08005158 <_ZN17BatteryManagement8msToTickEt>:
{
	return batteryPercentage;
}

uint16_t BatteryManagement::msToTick(uint16_t ms)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	460b      	mov	r3, r1
 8005162:	807b      	strh	r3, [r7, #2]
	return ms/TIM_FREQ;
 8005164:	887b      	ldrh	r3, [r7, #2]
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	ed93 7a02 	vldr	s14, [r3, #8]
 8005174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800517c:	ee17 3a90 	vmov	r3, s15
 8005180:	b29b      	uxth	r3, r3
}
 8005182:	4618      	mov	r0, r3
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	ed87 0b02 	vstr	d0, [r7, #8]
 8005198:	6078      	str	r0, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fb f972 	bl	8000484 <__aeabi_i2d>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	ec43 2b11 	vmov	d1, r2, r3
 80051a8:	ed97 0b02 	vldr	d0, [r7, #8]
 80051ac:	f00f ffe2 	bl	8015174 <pow>
 80051b0:	eeb0 7a40 	vmov.f32	s14, s0
 80051b4:	eef0 7a60 	vmov.f32	s15, s1
    }
 80051b8:	eeb0 0a47 	vmov.f32	s0, s14
 80051bc:	eef0 0a67 	vmov.f32	s1, s15
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <_ZN6Buzzer4beepEiii>:
 */

#include "Buzzer.hpp"

bool Buzzer::beep(int duration_ms,int freq_ms,int repetition_count)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	60f8      	str	r0, [r7, #12]
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	607a      	str	r2, [r7, #4]
 80051d2:	603b      	str	r3, [r7, #0]
	if (!this->busy)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	7d9b      	ldrb	r3, [r3, #22]
 80051d8:	f083 0301 	eor.w	r3, r3, #1
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d029      	beq.n	8005236 <_ZN6Buzzer4beepEiii+0x70>
	{
		this->busy = true;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2201      	movs	r2, #1
 80051e6:	759a      	strb	r2, [r3, #22]

		this->counterEnd = this->msToTick(duration_ms);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	4619      	mov	r1, r3
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f877 	bl	80052e2 <_ZN6Buzzer8msToTickEt>
 80051f4:	4603      	mov	r3, r0
 80051f6:	461a      	mov	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	825a      	strh	r2, [r3, #18]
		this->freqTick = this->msToTick(freq_ms);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	4619      	mov	r1, r3
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 f86d 	bl	80052e2 <_ZN6Buzzer8msToTickEt>
 8005208:	4603      	mov	r3, r0
 800520a:	461a      	mov	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	819a      	strh	r2, [r3, #12]
		this->repetitions = this->freqTick * repetition_count * 2U - 1U;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	899a      	ldrh	r2, [r3, #12]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	b29b      	uxth	r3, r3
 8005218:	fb12 f303 	smulbb	r3, r2, r3
 800521c:	b29b      	uxth	r3, r3
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	829a      	strh	r2, [r3, #20]

		Buzz_on();
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 f874 	bl	8005318 <_ZN6Buzzer7Buzz_onEv>

		return busy;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	7d9b      	ldrb	r3, [r3, #22]
 8005234:	e001      	b.n	800523a <_ZN6Buzzer4beepEiii+0x74>
	}

	return busy;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	7d9b      	ldrb	r3, [r3, #22]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <_ZN6Buzzer3runEv>:

void Buzzer::run()
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
	if (this->busy)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	7d9b      	ldrb	r3, [r3, #22]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d032      	beq.n	80052b8 <_ZN6Buzzer3runEv+0x76>
	{
		this->counterStart++;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	8a1b      	ldrh	r3, [r3, #16]
 8005256:	3301      	adds	r3, #1
 8005258:	b29a      	uxth	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	821a      	strh	r2, [r3, #16]

		if ((this->repetitions > 0U) && (this->freqTick!=0U))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	8a9b      	ldrh	r3, [r3, #20]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d01c      	beq.n	80052a0 <_ZN6Buzzer3runEv+0x5e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	899b      	ldrh	r3, [r3, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d018      	beq.n	80052a0 <_ZN6Buzzer3runEv+0x5e>
		{
			if (!((this->counterStart/this->freqTick) % 2U))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	8a1a      	ldrh	r2, [r3, #16]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	899b      	ldrh	r3, [r3, #12]
 8005276:	fbb2 f3f3 	udiv	r3, r2, r3
 800527a:	b29b      	uxth	r3, r3
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	d103      	bne.n	800528c <_ZN6Buzzer3runEv+0x4a>
			{
				this->Buzz_on();
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f847 	bl	8005318 <_ZN6Buzzer7Buzz_onEv>
 800528a:	e002      	b.n	8005292 <_ZN6Buzzer3runEv+0x50>
			}
			else
			{
				this->Buzz_off();
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f853 	bl	8005338 <_ZN6Buzzer8Buzz_offEv>
			}
			this->repetitions--;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	8a9b      	ldrh	r3, [r3, #20]
 8005296:	3b01      	subs	r3, #1
 8005298:	b29a      	uxth	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	829a      	strh	r2, [r3, #20]
 800529e:	e002      	b.n	80052a6 <_ZN6Buzzer3runEv+0x64>
		} else
		{
			this->Buzz_off();
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f849 	bl	8005338 <_ZN6Buzzer8Buzz_offEv>
		}

		if (this->counterStart >= this->counterEnd)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	8a1a      	ldrh	r2, [r3, #16]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	8a5b      	ldrh	r3, [r3, #18]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d302      	bcc.n	80052b8 <_ZN6Buzzer3runEv+0x76>
		{
			this->stop();
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f804 	bl	80052c0 <_ZN6Buzzer4stopEv>
		}
	}
}
 80052b8:	bf00      	nop
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <_ZN6Buzzer4stopEv>:

void Buzzer::stop()
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
	this->busy = false;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	759a      	strb	r2, [r3, #22]
	this->counterStart = 0U;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	821a      	strh	r2, [r3, #16]
	this->Buzz_off();
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f82f 	bl	8005338 <_ZN6Buzzer8Buzz_offEv>
}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <_ZN6Buzzer8msToTickEt>:
{
	return busy;
}

uint16_t Buzzer::msToTick(uint16_t ms)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	460b      	mov	r3, r1
 80052ec:	807b      	strh	r3, [r7, #2]
	return ms/TIM_FREQ;
 80052ee:	887b      	ldrh	r3, [r7, #2]
 80052f0:	ee07 3a90 	vmov	s15, r3
 80052f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	ed93 7a02 	vldr	s14, [r3, #8]
 80052fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005306:	ee17 3a90 	vmov	r3, s15
 800530a:	b29b      	uxth	r3, r3
}
 800530c:	4618      	mov	r0, r3
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <_ZN6Buzzer7Buzz_onEv>:

void Buzzer::Buzz_on()
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
//#if DISABLE_ALL_BEEPS == 5
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8005320:	2201      	movs	r2, #1
 8005322:	2110      	movs	r1, #16
 8005324:	4803      	ldr	r0, [pc, #12]	; (8005334 <_ZN6Buzzer7Buzz_onEv+0x1c>)
 8005326:	f005 fd69 	bl	800adfc <HAL_GPIO_WritePin>
//#endif
}
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40020000 	.word	0x40020000

08005338 <_ZN6Buzzer8Buzz_offEv>:

void Buzzer::Buzz_off()
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8005340:	2200      	movs	r2, #0
 8005342:	2110      	movs	r1, #16
 8005344:	4803      	ldr	r0, [pc, #12]	; (8005354 <_ZN6Buzzer8Buzz_offEv+0x1c>)
 8005346:	f005 fd59 	bl	800adfc <HAL_GPIO_WritePin>
}
 800534a:	bf00      	nop
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40020000 	.word	0x40020000

08005358 <_ZN7Timeout15setTimeoutValueEh>:
	uint8_t* getTimeoutCounter()
	{
		return &timeout_counter;
	}

	void setTimeoutValue(uint8_t value)
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	70fb      	strb	r3, [r7, #3]
	{
		timeout_value = value;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	78fa      	ldrb	r2, [r7, #3]
 8005368:	709a      	strb	r2, [r3, #2]
	}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <_ZN7TimeoutC1Ev>:
class Timeout
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	705a      	strb	r2, [r3, #1]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	709a      	strb	r2, [r3, #2]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4618      	mov	r0, r3
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
	...

080053a0 <_ZN7FrSkyRXC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefP6Buzzerh>:
 *      Author: DragosDarie
 */

#include "FrSkyRX.hpp"

FrSkyRX::FrSkyRX(
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
	,raw_pitch {0U}
	,raw_yaw {0U}
	,lb {0U}
	,lu {0U}
	,rb {0U}
	,ru {0U}
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	3336      	adds	r3, #54	; 0x36
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff ffdf 	bl	8005376 <_ZN7TimeoutC1Ev>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	3340      	adds	r3, #64	; 0x40
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fe fca7 	bl	8003d10 <_ZN12CallsCounterC1Ev>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fe fc8d 	bl	8003ce4 <_ZN15PrintableSensorC1Ev>
 80053ca:	4a35      	ldr	r2, [pc, #212]	; (80054a0 <_ZN7FrSkyRXC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefP6Buzzerh+0x100>)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	220f      	movs	r2, #15
 80053d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	655a      	str	r2, [r3, #84]	; 0x54
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	659a      	str	r2, [r3, #88]	; 0x58
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	3360      	adds	r3, #96	; 0x60
 80053f6:	2232      	movs	r2, #50	; 0x32
 80053f8:	2100      	movs	r1, #0
 80053fa:	4618      	mov	r0, r3
 80053fc:	f010 ffe2 	bl	80163c4 <memset>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3394      	adds	r3, #148	; 0x94
 800540c:	2220      	movs	r2, #32
 800540e:	2100      	movs	r1, #0
 8005410:	4618      	mov	r0, r3
 8005412:	f010 ffd7 	bl	80163c4 <memset>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f04f 0200 	mov.w	r2, #0
 800542c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
{
	setTimeoutValue(timeout);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3336      	adds	r3, #54	; 0x36
 800548a:	7e3a      	ldrb	r2, [r7, #24]
 800548c:	4611      	mov	r1, r2
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff ff62 	bl	8005358 <_ZN7Timeout15setTimeoutValueEh>
}
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	08016aec 	.word	0x08016aec

080054a4 <_ZN7FrSkyRX5beginEv>:

void FrSkyRX::begin()
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3360      	adds	r3, #96	; 0x60
 80054b4:	2219      	movs	r2, #25
 80054b6:	4619      	mov	r1, r3
 80054b8:	f009 fe82 	bl	800f1c0 <HAL_UART_Receive_DMA>
}
 80054bc:	bf00      	nop
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <_ZN7FrSkyRX6updateEv>:

void FrSkyRX::update()
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->rx_buff[0] == this->BEGIN_BIT) && (this->rx_buff[24]==this->END_BIT);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054d8:	429a      	cmp	r2, r3
 80054da:	d109      	bne.n	80054f0 <_ZN7FrSkyRX6updateEv+0x2c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d101      	bne.n	80054f0 <_ZN7FrSkyRX6updateEv+0x2c>
 80054ec:	2301      	movs	r3, #1
 80054ee:	e000      	b.n	80054f2 <_ZN7FrSkyRX6updateEv+0x2e>
 80054f0:	2300      	movs	r3, #0
 80054f2:	73bb      	strb	r3, [r7, #14]

	if(isPacketOk)
 80054f4:	7bbb      	ldrb	r3, [r7, #14]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d01a      	beq.n	8005530 <_ZN7FrSkyRX6updateEv+0x6c>
	{
		this->updateValues();
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f965 	bl	80057ca <_ZN7FrSkyRX12updateValuesEv>
		this->processStateMachine();
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f867 	bl	80055d4 <_ZN7FrSkyRX19processStateMachineEv>

		if (this->isDisconnected() || this->rb == 0U)
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fb32 	bl	8005b70 <_ZNK7FrSkyRX14isDisconnectedEv>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d104      	bne.n	800551c <_ZN7FrSkyRX6updateEv+0x58>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <_ZN7FrSkyRX6updateEv+0x5c>
 800551c:	2301      	movs	r3, #1
 800551e:	e000      	b.n	8005522 <_ZN7FrSkyRX6updateEv+0x5e>
 8005520:	2300      	movs	r3, #0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d038      	beq.n	8005598 <_ZN7FrSkyRX6updateEv+0xd4>
			this->currentState = FrSkyRXState::TIMEOUT;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2204      	movs	r2, #4
 800552a:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 800552e:	e033      	b.n	8005598 <_ZN7FrSkyRX6updateEv+0xd4>
	}
	else if (this->wrongDataReceived==false)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005536:	2b00      	cmp	r3, #0
 8005538:	d12e      	bne.n	8005598 <_ZN7FrSkyRX6updateEv+0xd4>
	{
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 800553a:	2300      	movs	r3, #0
 800553c:	73fb      	strb	r3, [r7, #15]
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	2b17      	cmp	r3, #23
 8005542:	d829      	bhi.n	8005598 <_ZN7FrSkyRX6updateEv+0xd4>
		{
			if ((this->rx_buff[iter]==this->END_BIT) && (this->rx_buff[iter+1U]==this->BEGIN_BIT))
 8005544:	7bfb      	ldrb	r3, [r7, #15]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	4413      	add	r3, r2
 800554a:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005554:	429a      	cmp	r2, r3
 8005556:	d11b      	bne.n	8005590 <_ZN7FrSkyRX6updateEv+0xcc>
 8005558:	7bfb      	ldrb	r3, [r7, #15]
 800555a:	3301      	adds	r3, #1
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	4413      	add	r3, r2
 8005560:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800556a:	429a      	cmp	r2, r3
 800556c:	d110      	bne.n	8005590 <_ZN7FrSkyRX6updateEv+0xcc>
			{
				HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length+iter+1);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	b29b      	uxth	r3, r3
 800557c:	331a      	adds	r3, #26
 800557e:	b29b      	uxth	r3, r3
 8005580:	461a      	mov	r2, r3
 8005582:	f009 fe1d 	bl	800f1c0 <HAL_UART_Receive_DMA>
				this->wrongDataReceived = true;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
				return;
 800558e:	e01e      	b.n	80055ce <_ZN7FrSkyRX6updateEv+0x10a>
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	3301      	adds	r3, #1
 8005594:	73fb      	strb	r3, [r7, #15]
 8005596:	e7d2      	b.n	800553e <_ZN7FrSkyRX6updateEv+0x7a>
			}
		}
	}

	if (this->wrongDataReceived == true)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d103      	bne.n	80055aa <_ZN7FrSkyRX6updateEv+0xe6>
		this->wrongDataReceived = false;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3360      	adds	r3, #96	; 0x60
 80055b2:	2219      	movs	r2, #25
 80055b4:	4619      	mov	r1, r3
 80055b6:	f009 fe03 	bl	800f1c0 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->uart_port_dma, DMA_IT_HT);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0208 	bic.w	r2, r2, #8
 80055cc:	601a      	str	r2, [r3, #0]
}
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <_ZN7FrSkyRX19processStateMachineEv>:

void FrSkyRX::processStateMachine()
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
	switch (this->currentState)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	f200 80d7 	bhi.w	8005796 <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
 80055e8:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <_ZN7FrSkyRX19processStateMachineEv+0x1c>)
 80055ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ee:	bf00      	nop
 80055f0:	08005605 	.word	0x08005605
 80055f4:	08005663 	.word	0x08005663
 80055f8:	08005699 	.word	0x08005699
 80055fc:	080056db 	.word	0x080056db
 8005600:	08005789 	.word	0x08005789
	{
	case FrSkyRXState::NOT_CONNECTED:
		if ((this->lu == 0U) && (this->throttle < 300U) && (this->rb == 1U))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800560a:	2b00      	cmp	r3, #0
 800560c:	d120      	bne.n	8005650 <_ZN7FrSkyRX19processStateMachineEv+0x7c>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8005614:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80057a0 <_ZN7FrSkyRX19processStateMachineEv+0x1cc>
 8005618:	eef4 7ac7 	vcmpe.f32	s15, s14
 800561c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005620:	d516      	bpl.n	8005650 <_ZN7FrSkyRX19processStateMachineEv+0x7c>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8005628:	2b01      	cmp	r3, #1
 800562a:	d111      	bne.n	8005650 <_ZN7FrSkyRX19processStateMachineEv+0x7c>
		{
			this->currentState = FrSkyRXState::CONNECTED;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			buzz->stop();
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff fe41 	bl	80052c0 <_ZN6Buzzer4stopEv>
			buzz->beep(600U,100U,3U);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8005642:	2303      	movs	r3, #3
 8005644:	2264      	movs	r2, #100	; 0x64
 8005646:	f44f 7116 	mov.w	r1, #600	; 0x258
 800564a:	f7ff fdbc 	bl	80051c6 <_ZN6Buzzer4beepEiii>
		}
		else
		{
			buzz->beep(3000U,100U,2U);
		}
		break;
 800564e:	e0a2      	b.n	8005796 <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
			buzz->beep(3000U,100U,2U);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8005654:	2302      	movs	r3, #2
 8005656:	2264      	movs	r2, #100	; 0x64
 8005658:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800565c:	f7ff fdb3 	bl	80051c6 <_ZN6Buzzer4beepEiii>
		break;
 8005660:	e099      	b.n	8005796 <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
	case FrSkyRXState::CONNECTED:
		if (this->lu == 1U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 8005668:	2b01      	cmp	r3, #1
 800566a:	f040 808f 	bne.w	800578c <_ZN7FrSkyRX19processStateMachineEv+0x1b8>
		{
			TIM3 -> CCR1 = 3000;
 800566e:	4b4d      	ldr	r3, [pc, #308]	; (80057a4 <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 8005670:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005674:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3 -> CCR2 = 3000;
 8005676:	4b4b      	ldr	r3, [pc, #300]	; (80057a4 <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 8005678:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800567c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3 -> CCR3 = 3000;
 800567e:	4b49      	ldr	r3, [pc, #292]	; (80057a4 <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 8005680:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005684:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3 -> CCR4 = 3000;
 8005686:	4b47      	ldr	r3, [pc, #284]	; (80057a4 <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 8005688:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800568c:	641a      	str	r2, [r3, #64]	; 0x40
			this->currentState = FrSkyRXState::ARMED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2202      	movs	r2, #2
 8005692:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
		}
		break;
 8005696:	e079      	b.n	800578c <_ZN7FrSkyRX19processStateMachineEv+0x1b8>
	case FrSkyRXState::ARMED:
		if (this->lu == 2U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d176      	bne.n	8005790 <_ZN7FrSkyRX19processStateMachineEv+0x1bc>
		{
			TIM3 -> CCR1 = 3300;
 80056a2:	4b40      	ldr	r3, [pc, #256]	; (80057a4 <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 80056a4:	f640 42e4 	movw	r2, #3300	; 0xce4
 80056a8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3 -> CCR2 = 3300;
 80056aa:	4b3e      	ldr	r3, [pc, #248]	; (80057a4 <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 80056ac:	f640 42e4 	movw	r2, #3300	; 0xce4
 80056b0:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3 -> CCR3 = 3300;
 80056b2:	4b3c      	ldr	r3, [pc, #240]	; (80057a4 <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 80056b4:	f640 42e4 	movw	r2, #3300	; 0xce4
 80056b8:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3 -> CCR4 = 3300;
 80056ba:	4b3a      	ldr	r3, [pc, #232]	; (80057a4 <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 80056bc:	f640 42e4 	movw	r2, #3300	; 0xce4
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40
			buzz->beep(200U,100U,1U);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80056c6:	2301      	movs	r3, #1
 80056c8:	2264      	movs	r2, #100	; 0x64
 80056ca:	21c8      	movs	r1, #200	; 0xc8
 80056cc:	f7ff fd7b 	bl	80051c6 <_ZN6Buzzer4beepEiii>
			this->currentState = FrSkyRXState::READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2203      	movs	r2, #3
 80056d4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
		}
		break;
 80056d8:	e05a      	b.n	8005790 <_ZN7FrSkyRX19processStateMachineEv+0x1bc>
	case FrSkyRXState::READY:
		if (raw_roll > 1150 || raw_roll < 800 || raw_pitch > 1150 || raw_pitch < 800)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80056e0:	f240 427e 	movw	r2, #1150	; 0x47e
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d812      	bhi.n	800570e <_ZN7FrSkyRX19processStateMachineEv+0x13a>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80056ee:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80056f2:	d30c      	bcc.n	800570e <_ZN7FrSkyRX19processStateMachineEv+0x13a>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 80056fa:	f240 427e 	movw	r2, #1150	; 0x47e
 80056fe:	4293      	cmp	r3, r2
 8005700:	d805      	bhi.n	800570e <_ZN7FrSkyRX19processStateMachineEv+0x13a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 8005708:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800570c:	d242      	bcs.n	8005794 <_ZN7FrSkyRX19processStateMachineEv+0x1c0>
		{
			target_roll += -static_cast<float>(mid_position - raw_roll) * roll_scaleFactor;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 800571a:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 800571e:	ee07 3a90 	vmov	s15, r3
 8005722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005726:	eef1 7a67 	vneg.f32	s15, s15
 800572a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80057a8 <_ZN7FrSkyRX19processStateMachineEv+0x1d4>
 800572e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
			target_pitch += static_cast<float>(mid_position - raw_pitch) * pitch_scaleFactor;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 8005748:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 800574c:	ee07 3a90 	vmov	s15, r3
 8005750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005754:	eddf 6a14 	vldr	s13, [pc, #80]	; 80057a8 <_ZN7FrSkyRX19processStateMachineEv+0x1d4>
 8005758:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800575c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
			target_yaw = static_cast<float>(mid_position - raw_yaw) * yaw_scaleFactor;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800576c:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 8005770:	ee07 3a90 	vmov	s15, r3
 8005774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005778:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80057ac <_ZN7FrSkyRX19processStateMachineEv+0x1d8>
 800577c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

			//target_roll = ((target_roll > 2.0F) || (target_roll < -2.0F)) ? target_roll : 0.0F;
			//target_pitch = ((target_pitch > 2.0F) || (target_pitch < -2.0F)) ? target_pitch : 0.0F;
		}
		break;
 8005786:	e005      	b.n	8005794 <_ZN7FrSkyRX19processStateMachineEv+0x1c0>
	case FrSkyRXState::TIMEOUT:

		break;
 8005788:	bf00      	nop
 800578a:	e004      	b.n	8005796 <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
		break;
 800578c:	bf00      	nop
 800578e:	e002      	b.n	8005796 <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
		break;
 8005790:	bf00      	nop
 8005792:	e000      	b.n	8005796 <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
		break;
 8005794:	bf00      	nop
	}
}
 8005796:	bf00      	nop
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	43960000 	.word	0x43960000
 80057a4:	40000400 	.word	0x40000400
 80057a8:	3851b717 	.word	0x3851b717
 80057ac:	3a83126f 	.word	0x3a83126f

080057b0 <_ZNK7FrSkyRX15getCurrentStateEv>:

FrSkyRXState FrSkyRX::getCurrentState() const
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	return this->currentState;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
}
 80057be:	4618      	mov	r0, r3
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <_ZN7FrSkyRX12updateValuesEv>:

void FrSkyRX::updateValues()
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
	this->channels[0]  = static_cast<int16_t>(rx_buff[1] | (rx_buff[2] << 8 & 0x07FF));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80057d8:	b21a      	sxth	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80057e0:	021b      	lsls	r3, r3, #8
 80057e2:	b21b      	sxth	r3, r3
 80057e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057e8:	b21b      	sxth	r3, r3
 80057ea:	4313      	orrs	r3, r2
 80057ec:	b21b      	sxth	r3, r3
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	this->channels[1]  = static_cast<int16_t>(rx_buff[2] >> 3 | (rx_buff[3] << 5 & 0x07FF));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80057fc:	08db      	lsrs	r3, r3, #3
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	b21a      	sxth	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8005808:	015b      	lsls	r3, r3, #5
 800580a:	b21b      	sxth	r3, r3
 800580c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005810:	b21b      	sxth	r3, r3
 8005812:	4313      	orrs	r3, r2
 8005814:	b21b      	sxth	r3, r3
 8005816:	b29a      	uxth	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	this->channels[2]  = static_cast<int16_t>(rx_buff[3] >> 6 | (rx_buff[4] << 2 | (rx_buff[5] << 10 & 0x07FF)));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8005824:	099b      	lsrs	r3, r3, #6
 8005826:	b2db      	uxtb	r3, r3
 8005828:	b21a      	sxth	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	b219      	sxth	r1, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800583a:	029b      	lsls	r3, r3, #10
 800583c:	b21b      	sxth	r3, r3
 800583e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005842:	b21b      	sxth	r3, r3
 8005844:	430b      	orrs	r3, r1
 8005846:	b21b      	sxth	r3, r3
 8005848:	4313      	orrs	r3, r2
 800584a:	b21b      	sxth	r3, r3
 800584c:	b29a      	uxth	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	this->channels[3]  = static_cast<int16_t>(rx_buff[5] >> 1 | (rx_buff[6] << 7 & 0x07FF));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800585a:	085b      	lsrs	r3, r3, #1
 800585c:	b2db      	uxtb	r3, r3
 800585e:	b21a      	sxth	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005866:	01db      	lsls	r3, r3, #7
 8005868:	b21b      	sxth	r3, r3
 800586a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800586e:	b21b      	sxth	r3, r3
 8005870:	4313      	orrs	r3, r2
 8005872:	b21b      	sxth	r3, r3
 8005874:	b29a      	uxth	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	this->channels[4]  = static_cast<int16_t>(rx_buff[6] >> 4 | (rx_buff[7] << 4 & 0x07FF));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005882:	091b      	lsrs	r3, r3, #4
 8005884:	b2db      	uxtb	r3, r3
 8005886:	b21a      	sxth	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	b21b      	sxth	r3, r3
 8005892:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005896:	b21b      	sxth	r3, r3
 8005898:	4313      	orrs	r3, r2
 800589a:	b21b      	sxth	r3, r3
 800589c:	b29a      	uxth	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	this->channels[5]  = static_cast<int16_t>(rx_buff[7] >> 7 | (rx_buff[8] << 1 | (rx_buff[9] << 9 & 0x07FF)));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80058aa:	09db      	lsrs	r3, r3, #7
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	b21a      	sxth	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	b219      	sxth	r1, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80058c0:	025b      	lsls	r3, r3, #9
 80058c2:	b21b      	sxth	r3, r3
 80058c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058c8:	b21b      	sxth	r3, r3
 80058ca:	430b      	orrs	r3, r1
 80058cc:	b21b      	sxth	r3, r3
 80058ce:	4313      	orrs	r3, r2
 80058d0:	b21b      	sxth	r3, r3
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
	this->channels[6]  = static_cast<int16_t>(rx_buff[9] >> 2 | (rx_buff[10] << 6 & 0x07FF));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80058e0:	089b      	lsrs	r3, r3, #2
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	b21a      	sxth	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80058ec:	019b      	lsls	r3, r3, #6
 80058ee:	b21b      	sxth	r3, r3
 80058f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058f4:	b21b      	sxth	r3, r3
 80058f6:	4313      	orrs	r3, r2
 80058f8:	b21b      	sxth	r3, r3
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	this->channels[7]  = static_cast<int16_t>(rx_buff[10] >> 5 | (rx_buff[11] << 3 & 0x07FF));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8005908:	095b      	lsrs	r3, r3, #5
 800590a:	b2db      	uxtb	r3, r3
 800590c:	b21a      	sxth	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	b21b      	sxth	r3, r3
 8005918:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800591c:	b21b      	sxth	r3, r3
 800591e:	4313      	orrs	r3, r2
 8005920:	b21b      	sxth	r3, r3
 8005922:	b29a      	uxth	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2

	this->channels[8]  = static_cast<int16_t>(rx_buff[12] | (rx_buff[13] << 8 & 0x07FF));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8005930:	b21a      	sxth	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	b21b      	sxth	r3, r3
 800593c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005940:	b21b      	sxth	r3, r3
 8005942:	4313      	orrs	r3, r2
 8005944:	b21b      	sxth	r3, r3
 8005946:	b29a      	uxth	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	this->channels[9]  = static_cast<int16_t>(rx_buff[13] >> 3 | (rx_buff[14] << 5 & 0x07FF));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8005954:	08db      	lsrs	r3, r3, #3
 8005956:	b2db      	uxtb	r3, r3
 8005958:	b21a      	sxth	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8005960:	015b      	lsls	r3, r3, #5
 8005962:	b21b      	sxth	r3, r3
 8005964:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005968:	b21b      	sxth	r3, r3
 800596a:	4313      	orrs	r3, r2
 800596c:	b21b      	sxth	r3, r3
 800596e:	b29a      	uxth	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	this->channels[10] = static_cast<int16_t>(rx_buff[14] >> 6 | (rx_buff[15] << 2 | (rx_buff[16] << 10 & 0x07FF)));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800597c:	099b      	lsrs	r3, r3, #6
 800597e:	b2db      	uxtb	r3, r3
 8005980:	b21a      	sxth	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	b219      	sxth	r1, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005992:	029b      	lsls	r3, r3, #10
 8005994:	b21b      	sxth	r3, r3
 8005996:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800599a:	b21b      	sxth	r3, r3
 800599c:	430b      	orrs	r3, r1
 800599e:	b21b      	sxth	r3, r3
 80059a0:	4313      	orrs	r3, r2
 80059a2:	b21b      	sxth	r3, r3
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	this->channels[11] = static_cast<int16_t>(rx_buff[16] >> 1 | (rx_buff[17] << 7 & 0x07FF));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80059b2:	085b      	lsrs	r3, r3, #1
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	b21a      	sxth	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80059be:	01db      	lsls	r3, r3, #7
 80059c0:	b21b      	sxth	r3, r3
 80059c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059c6:	b21b      	sxth	r3, r3
 80059c8:	4313      	orrs	r3, r2
 80059ca:	b21b      	sxth	r3, r3
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
	this->channels[12] = static_cast<int16_t>(rx_buff[17] >> 4 | (rx_buff[18] << 4 & 0x07FF));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80059da:	091b      	lsrs	r3, r3, #4
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	b21a      	sxth	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80059e6:	011b      	lsls	r3, r3, #4
 80059e8:	b21b      	sxth	r3, r3
 80059ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059ee:	b21b      	sxth	r3, r3
 80059f0:	4313      	orrs	r3, r2
 80059f2:	b21b      	sxth	r3, r3
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	this->channels[13] = static_cast<int16_t>(rx_buff[18] >> 7 | (rx_buff[19] << 1 | (rx_buff[20] << 9 & 0x07FF)));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8005a02:	09db      	lsrs	r3, r3, #7
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	b21a      	sxth	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	b219      	sxth	r1, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a18:	025b      	lsls	r3, r3, #9
 8005a1a:	b21b      	sxth	r3, r3
 8005a1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a20:	b21b      	sxth	r3, r3
 8005a22:	430b      	orrs	r3, r1
 8005a24:	b21b      	sxth	r3, r3
 8005a26:	4313      	orrs	r3, r2
 8005a28:	b21b      	sxth	r3, r3
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	this->channels[14] = static_cast<int16_t>(rx_buff[20] >> 2 | (rx_buff[21] << 6 & 0x07FF));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a38:	089b      	lsrs	r3, r3, #2
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	b21a      	sxth	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8005a44:	019b      	lsls	r3, r3, #6
 8005a46:	b21b      	sxth	r3, r3
 8005a48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a4c:	b21b      	sxth	r3, r3
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	b21b      	sxth	r3, r3
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	this->channels[15] = static_cast<int16_t>(rx_buff[21] >> 5 | (rx_buff[22] << 3 & 0x07FF));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8005a60:	095b      	lsrs	r3, r3, #5
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	b21a      	sxth	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	b21b      	sxth	r3, r3
 8005a70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a74:	b21b      	sxth	r3, r3
 8005a76:	4313      	orrs	r3, r2
 8005a78:	b21b      	sxth	r3, r3
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	this->throttle = static_cast<float>(channels[2]);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8005a88:	ee07 3a90 	vmov	s15, r3
 8005a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
	this->raw_roll = this->channels[0];
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	this->raw_pitch = this->channels[1];
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	this->raw_yaw = this->channels[3];
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc

	if (this->channels[4]<1000)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8005ac0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ac4:	d204      	bcs.n	8005ad0 <_ZN7FrSkyRX12updateValuesEv+0x306>
		this->lb=0;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
 8005ace:	e003      	b.n	8005ad8 <_ZN7FrSkyRX12updateValuesEv+0x30e>
	else
		this->lb=1;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce

	if (this->channels[7]<1000)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8005ade:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ae2:	d204      	bcs.n	8005aee <_ZN7FrSkyRX12updateValuesEv+0x324>
		this->rb=0;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8005aec:	e003      	b.n	8005af6 <_ZN7FrSkyRX12updateValuesEv+0x32c>
	else
		this->rb=1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0

	if (this->channels[5]<500)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8005afc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005b00:	d204      	bcs.n	8005b0c <_ZN7FrSkyRX12updateValuesEv+0x342>
		this->lu = 0;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
 8005b0a:	e00f      	b.n	8005b2c <_ZN7FrSkyRX12updateValuesEv+0x362>
	else if(this->channels[5]<1500)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8005b12:	f240 52db 	movw	r2, #1499	; 0x5db
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d804      	bhi.n	8005b24 <_ZN7FrSkyRX12updateValuesEv+0x35a>
		this->lu = 1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
 8005b22:	e003      	b.n	8005b2c <_ZN7FrSkyRX12updateValuesEv+0x362>
	else
		this->lu = 2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf

	if (this->channels[6]<500)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8005b32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005b36:	d204      	bcs.n	8005b42 <_ZN7FrSkyRX12updateValuesEv+0x378>
		this->ru = 0;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	else if(this->channels[6]<1500)
		this->ru = 1;
	else
		this->ru = 2;
}
 8005b40:	e00f      	b.n	8005b62 <_ZN7FrSkyRX12updateValuesEv+0x398>
	else if(this->channels[6]<1500)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8005b48:	f240 52db 	movw	r2, #1499	; 0x5db
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d804      	bhi.n	8005b5a <_ZN7FrSkyRX12updateValuesEv+0x390>
		this->ru = 1;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
}
 8005b58:	e003      	b.n	8005b62 <_ZN7FrSkyRX12updateValuesEv+0x398>
		this->ru = 2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
	...

08005b70 <_ZNK7FrSkyRX14isDisconnectedEv>:

bool FrSkyRX::isDisconnected() const
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
	const bool failsafe =
			(this->rb == 0) &&
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
			(this->ru == 0) &&
			(this->lb == 0) &&
			(this->lu == 0) &&
			(this->throttle > 1800) &&
			(this->raw_roll > 1800) &&
			(this->raw_pitch > 1800) &&
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d12c      	bne.n	8005bdc <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->ru == 0) &&
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
			(this->rb == 0) &&
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d127      	bne.n	8005bdc <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->lb == 0) &&
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
			(this->ru == 0) &&
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d122      	bne.n	8005bdc <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->lu == 0) &&
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
			(this->lb == 0) &&
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d11d      	bne.n	8005bdc <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->throttle > 1800) &&
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
			(this->lu == 0) &&
 8005ba6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005bf0 <_ZNK7FrSkyRX14isDisconnectedEv+0x80>
 8005baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb2:	dd13      	ble.n	8005bdc <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->raw_roll > 1800) &&
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
			(this->throttle > 1800) &&
 8005bba:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8005bbe:	d90d      	bls.n	8005bdc <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->raw_pitch > 1800) &&
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
			(this->raw_roll > 1800) &&
 8005bc6:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8005bca:	d907      	bls.n	8005bdc <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->raw_yaw > 1800);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
			(this->raw_pitch > 1800) &&
 8005bd2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8005bd6:	d901      	bls.n	8005bdc <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e000      	b.n	8005bde <_ZNK7FrSkyRX14isDisconnectedEv+0x6e>
 8005bdc:	2300      	movs	r3, #0
	const bool failsafe =
 8005bde:	73fb      	strb	r3, [r7, #15]

	return failsafe;
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	44e10000 	.word	0x44e10000

08005bf4 <_ZN7FrSkyRX19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* FrSkyRX::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8005bf4:	b590      	push	{r4, r7, lr}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	3304      	adds	r3, #4
 8005c02:	2200      	movs	r2, #0
 8005c04:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::FRSKY_THROTTLE)!=senorsList.end())
 8005c06:	231a      	movs	r3, #26
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	f107 0310 	add.w	r3, r7, #16
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6838      	ldr	r0, [r7, #0]
 8005c12:	f7ff f817 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8005c16:	4603      	mov	r3, r0
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	6838      	ldr	r0, [r7, #0]
 8005c1c:	f7ff f82b 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8005c20:	4603      	mov	r3, r0
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	f107 0214 	add.w	r2, r7, #20
 8005c28:	f107 030c 	add.w	r3, r7, #12
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff f82e 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d01d      	beq.n	8005c76 <_ZN7FrSkyRX19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x82>
	{
		strcat(packet,toCharArray(this->throttle));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	1d1c      	adds	r4, r3, #4
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8005c46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c4a:	ee17 1a90 	vmov	r1, s15
 8005c4e:	4610      	mov	r0, r2
 8005c50:	f7fe f806 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 8005c54:	4603      	mov	r3, r0
 8005c56:	4619      	mov	r1, r3
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f010 fcef 	bl	801663c <strcat>
		strcat(packet,",");
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	1d1c      	adds	r4, r3, #4
 8005c62:	4620      	mov	r0, r4
 8005c64:	f7fa fab4 	bl	80001d0 <strlen>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	4423      	add	r3, r4
 8005c6c:	4905      	ldr	r1, [pc, #20]	; (8005c84 <_ZN7FrSkyRX19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x90>)
 8005c6e:	461a      	mov	r2, r3
 8005c70:	460b      	mov	r3, r1
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3304      	adds	r3, #4
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd90      	pop	{r4, r7, pc}
 8005c82:	bf00      	nop
 8005c84:	080167e4 	.word	0x080167e4

08005c88 <_ZN7FrSkyRX11getThrottleEv>:

float& FrSkyRX::getThrottle()
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
	return this->throttle;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	33b8      	adds	r3, #184	; 0xb8
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <_ZN7FrSkyRX13getTargetRollEv>:

float& FrSkyRX::getTargetRoll()
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
	return this->target_roll;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	33bc      	adds	r3, #188	; 0xbc
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <_ZN7FrSkyRX14getTargetPitchEv>:

float& FrSkyRX::getTargetPitch()
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
	return this->target_pitch;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	33c0      	adds	r3, #192	; 0xc0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <_ZNSt15_Rb_tree_headerC1Ev>:
    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
      _M_header._M_color = _S_red;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f805 	bl	8005d06 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <_ZNSt15_Rb_tree_header8_M_resetEv>:
    _M_reset()
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
      _M_header._M_parent = 0;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	611a      	str	r2, [r3, #16]
    }
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b082      	sub	sp, #8
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 f8d9 	bl	8005ef4 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE12_Vector_implC1Ev>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4618      	mov	r0, r3
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <_ZNSt6vectorIP15PrintableSensorSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff ffeb 	bl	8005d32 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EEC1Ev>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EEC1Ev>:
      _Rb_tree() = default;
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b082      	sub	sp, #8
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 f8cf 	bl	8005f14 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EEC1Ev>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EEC1Ev>:
      set() = default;
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7ff ffeb 	bl	8005d66 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EEC1Ev>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <_ZN4HC05C1EP20__UART_HandleTypeDef>:
 *      Author: DragosDarie
 */

#include "HC05.hpp"

HC05::HC05(UART_HandleTypeDef *uart_port):
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b082      	sub	sp, #8
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
	uart_port {uart_port}
	,senorsList {}
	,USART1_TxBuffer {}
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3304      	adds	r3, #4
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff ffcc 	bl	8005d4c <_ZNSt6vectorIP15PrintableSensorSaIS1_EEC1Ev>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3310      	adds	r3, #16
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	605a      	str	r2, [r3, #4]
 8005dbe:	609a      	str	r2, [r3, #8]
 8005dc0:	60da      	str	r2, [r3, #12]
 8005dc2:	611a      	str	r2, [r3, #16]
 8005dc4:	615a      	str	r2, [r3, #20]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	3310      	adds	r3, #16
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff ffd8 	bl	8005d80 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EEC1Ev>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3328      	adds	r3, #40	; 0x28
 8005dd4:	2264      	movs	r2, #100	; 0x64
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f010 faf3 	bl	80163c4 <memset>
{
}
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <_ZN4HC054sendEv>:

void HC05::send()
{
 8005de8:	b5b0      	push	{r4, r5, r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(uart_port, (uint8_t*)USART1_TxBuffer, strlen(USART1_TxBuffer));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681c      	ldr	r4, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3328      	adds	r3, #40	; 0x28
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fa f9e6 	bl	80001d0 <strlen>
 8005e04:	4603      	mov	r3, r0
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	461a      	mov	r2, r3
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f009 f959 	bl	800f0c4 <HAL_UART_Transmit_DMA>
}
 8005e12:	bf00      	nop
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bdb0      	pop	{r4, r5, r7, pc}

08005e1a <_ZN4HC059addSensorEP15PrintableSensor>:
{
	HAL_UART_Transmit_DMA(uart_port, (uint8_t*)data, len);
}

void HC05::addSensor(PrintableSensor* sen)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b082      	sub	sp, #8
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
	senList.push_back(sen);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3304      	adds	r3, #4
 8005e28:	463a      	mov	r2, r7
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 f886 	bl	8005f3e <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_>
}
 8005e32:	bf00      	nop
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
	...

08005e3c <_ZN4HC0519printfSensorsValuesEv>:

void HC05::printfSensorsValues()
{
 8005e3c:	b590      	push	{r4, r7, lr}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
	strcpy(USART1_TxBuffer,"");
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3328      	adds	r3, #40	; 0x28
 8005e48:	2200      	movs	r2, #0
 8005e4a:	701a      	strb	r2, [r3, #0]

	for (int i=0;i<(int)senList.size();i++)
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3304      	adds	r3, #4
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 f897 	bl	8005f88 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4293      	cmp	r3, r2
 8005e62:	bfb4      	ite	lt
 8005e64:	2301      	movlt	r3, #1
 8005e66:	2300      	movge	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d01a      	beq.n	8005ea4 <_ZN4HC0519printfSensorsValuesEv+0x68>
	{
		strcat(USART1_TxBuffer,senList[i]->getSensorValues_str(senorsList));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3304      	adds	r3, #4
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 f893 	bl	8005fa8 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEixEj>
 8005e82:	4603      	mov	r3, r0
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	6812      	ldr	r2, [r2, #0]
 8005e8a:	6879      	ldr	r1, [r7, #4]
 8005e8c:	3110      	adds	r1, #16
 8005e8e:	4618      	mov	r0, r3
 8005e90:	4790      	blx	r2
 8005e92:	4603      	mov	r3, r0
 8005e94:	4619      	mov	r1, r3
 8005e96:	4620      	mov	r0, r4
 8005e98:	f010 fbd0 	bl	801663c <strcat>
	for (int i=0;i<(int)senList.size();i++)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	e7d5      	b.n	8005e50 <_ZN4HC0519printfSensorsValuesEv+0x14>
	}

	strcat(USART1_TxBuffer,"\n\r");
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f7fa f990 	bl	80001d0 <strlen>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	4423      	add	r3, r4
 8005eb4:	4a05      	ldr	r2, [pc, #20]	; (8005ecc <_ZN4HC0519printfSensorsValuesEv+0x90>)
 8005eb6:	8811      	ldrh	r1, [r2, #0]
 8005eb8:	7892      	ldrb	r2, [r2, #2]
 8005eba:	8019      	strh	r1, [r3, #0]
 8005ebc:	709a      	strb	r2, [r3, #2]

	send();
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff ff92 	bl	8005de8 <_ZN4HC054sendEv>
}
 8005ec4:	bf00      	nop
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd90      	pop	{r4, r7, pc}
 8005ecc:	080167e8 	.word	0x080167e8

08005ed0 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>:

void HC05::addSensorParameter(HC05::SENSOR_DATA_PARAMETER sen)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
 	this->senorsList.insert(sen);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f103 0110 	add.w	r1, r3, #16
 8005ee0:	f107 0308 	add.w	r3, r7, #8
 8005ee4:	463a      	mov	r2, r7
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 f86e 	bl	8005fc8 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE6insertERKS1_>
}
 8005eec:	bf00      	nop
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f87d 	bl	8005ffc <_ZNSaIP15PrintableSensorEC1Ev>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 f885 	bl	8006014 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f8b9 	bl	8006094 <_ZNSaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 f8c1 	bl	80060ac <_ZNSt20_Rb_tree_key_compareISt4lessIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7ff feda 	bl	8005ce8 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b082      	sub	sp, #8
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d00c      	beq.n	8005f6e <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	f000 f8b0 	bl	80060c2 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	1d1a      	adds	r2, r3, #4
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8005f6c:	e008      	b.n	8005f80 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f8ba 	bl	80060e8 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE3endEv>
 8005f74:	4603      	mov	r3, r0
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f8dc 	bl	8006138 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8005f80:	bf00      	nop
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	109b      	asrs	r3, r3, #2
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
      }
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE6insertERKS1_>:
      insert(const value_type& __x)
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
	  _M_t._M_insert_unique(__x);
 8005fd4:	68b9      	ldr	r1, [r7, #8]
 8005fd6:	f107 0310 	add.w	r3, r7, #16
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 f967 	bl	80062b0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_>
	return std::pair<iterator, bool>(__p.first, __p.second);
 8005fe2:	f107 0310 	add.w	r3, r7, #16
 8005fe6:	1d1a      	adds	r2, r3, #4
 8005fe8:	f107 0310 	add.w	r3, r7, #16
 8005fec:	4619      	mov	r1, r3
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 f9ad 	bl	800634e <_ZNSt4pairISt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IRSt17_Rb_tree_iteratorIS2_ERbLb1EEEOT_OT0_>
      }
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <_ZNSaIP15PrintableSensorEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f9bd 	bl	8006384 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorEC1Ev>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4618      	mov	r0, r3
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	605a      	str	r2, [r3, #4]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	609a      	str	r2, [r3, #8]
	{ }
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4618      	mov	r0, r3
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
	if (__p)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d005      	beq.n	800605a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	68b9      	ldr	r1, [r7, #8]
 8006054:	4618      	mov	r0, r3
 8006056:	f000 f9a0 	bl	800639a <_ZNSt16allocator_traitsISaIP15PrintableSensorEE10deallocateERS2_PS1_j>
      }
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <_ZSt8_DestroyIPP15PrintableSensorS1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8006084:	68b9      	ldr	r1, [r7, #8]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 f996 	bl	80063b8 <_ZSt8_DestroyIPP15PrintableSensorEvT_S3_>
    }
 800608c:	bf00      	nop
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <_ZNSaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f998 	bl	80063d2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4618      	mov	r0, r3
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <_ZNSt20_Rb_tree_key_compareISt4lessIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
      _Rb_tree_key_compare()
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
      { }
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4618      	mov	r0, r3
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f98a 	bl	80063e8 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 80060d4:	4603      	mov	r3, r0
 80060d6:	461a      	mov	r2, r3
 80060d8:	68b9      	ldr	r1, [r7, #8]
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 f98f 	bl	80063fe <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 80060e0:	bf00      	nop
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	1d1a      	adds	r2, r3, #4
 80060f4:	f107 030c 	add.w	r3, r7, #12
 80060f8:	4611      	mov	r1, r2
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 f995 	bl	800642a <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8006110:	4618      	mov	r0, r3
 8006112:	f000 f805 	bl	8006120 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8006116:	4603      	mov	r3, r0
      }
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8006128:	2301      	movs	r3, #1
      }
 800612a:	4618      	mov	r0, r3
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
	...

08006138 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8006138:	b5b0      	push	{r4, r5, r7, lr}
 800613a:	b08c      	sub	sp, #48	; 0x30
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006144:	4a59      	ldr	r2, [pc, #356]	; (80062ac <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8006146:	2101      	movs	r1, #1
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 f97e 	bl	800644a <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc>
 800614e:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 f9bb 	bl	80064d8 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE5beginEv>
 8006162:	4603      	mov	r3, r0
 8006164:	617b      	str	r3, [r7, #20]
 8006166:	f107 0214 	add.w	r2, r7, #20
 800616a:	f107 0308 	add.w	r3, r7, #8
 800616e:	4611      	mov	r1, r2
 8006170:	4618      	mov	r0, r3
 8006172:	f000 f9c1 	bl	80064f8 <_ZN9__gnu_cxxmiIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8006176:	4603      	mov	r3, r0
 8006178:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800617e:	4618      	mov	r0, r3
 8006180:	f000 f9cf 	bl	8006522 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj>
 8006184:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800618a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	18d5      	adds	r5, r2, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 f927 	bl	80063e8 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 800619a:	4603      	mov	r3, r0
 800619c:	461a      	mov	r2, r3
 800619e:	4629      	mov	r1, r5
 80061a0:	4620      	mov	r0, r4
 80061a2:	f7ff ff8e 	bl	80060c2 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80061a6:	2300      	movs	r3, #0
 80061a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80061aa:	f7ff ffae 	bl	800610a <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d027      	beq.n	8006204 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80061b4:	f107 0308 	add.w	r3, r7, #8
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 f9da 	bl	8006572 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80061be:	4603      	mov	r3, r0
 80061c0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff ff4c 	bl	8006062 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80061ca:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	4621      	mov	r1, r4
 80061d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061d2:	f000 f9ba 	bl	800654a <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80061d6:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80061d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061da:	3304      	adds	r3, #4
 80061dc:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80061de:	f107 0308 	add.w	r3, r7, #8
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 f9c5 	bl	8006572 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80061e8:	4603      	mov	r3, r0
 80061ea:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff ff37 	bl	8006062 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80061f4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80061f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061f8:	6a39      	ldr	r1, [r7, #32]
 80061fa:	4620      	mov	r0, r4
 80061fc:	f000 f9a5 	bl	800654a <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8006200:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006202:	e026      	b.n	8006252 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8006204:	f107 0308 	add.w	r3, r7, #8
 8006208:	4618      	mov	r0, r3
 800620a:	f000 f9b2 	bl	8006572 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 800620e:	4603      	mov	r3, r0
 8006210:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff ff24 	bl	8006062 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 800621a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	4621      	mov	r1, r4
 8006220:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006222:	f000 f9b1 	bl	8006588 <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8006226:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8006228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622a:	3304      	adds	r3, #4
 800622c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800622e:	f107 0308 	add.w	r3, r7, #8
 8006232:	4618      	mov	r0, r3
 8006234:	f000 f99d 	bl	8006572 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8006238:	4603      	mov	r3, r0
 800623a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff ff0f 	bl	8006062 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8006244:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8006246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006248:	6a39      	ldr	r1, [r7, #32]
 800624a:	4620      	mov	r0, r4
 800624c:	f000 f99c 	bl	8006588 <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8006250:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8006252:	f7ff ff5a 	bl	800610a <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>
 8006256:	4603      	mov	r3, r0
 8006258:	f083 0301 	eor.w	r3, r3, #1
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d009      	beq.n	8006276 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff fefc 	bl	8006062 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 800626a:	4603      	mov	r3, r0
 800626c:	461a      	mov	r2, r3
 800626e:	6a39      	ldr	r1, [r7, #32]
 8006270:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006272:	f7ff ff01 	bl	8006078 <_ZSt8_DestroyIPP15PrintableSensorS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8006276:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8006282:	461a      	mov	r2, r3
 8006284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006286:	f7ff fed9 	bl	800603c <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006294:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	441a      	add	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	609a      	str	r2, [r3, #8]
    }
 80062a2:	bf00      	nop
 80062a4:	3730      	adds	r7, #48	; 0x30
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bdb0      	pop	{r4, r5, r7, pc}
 80062aa:	bf00      	nop
 80062ac:	080167ec 	.word	0x080167ec

080062b0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80062b0:	b5b0      	push	{r4, r5, r7, lr}
 80062b2:	b08e      	sub	sp, #56	; 0x38
 80062b4:	af02      	add	r7, sp, #8
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
 80062bc:	f107 031c 	add.w	r3, r7, #28
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fe fe3b 	bl	8004f3e <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 80062c8:	4602      	mov	r2, r0
 80062ca:	f107 0314 	add.w	r3, r7, #20
 80062ce:	68b9      	ldr	r1, [r7, #8]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f000 f972 	bl	80065ba <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_>
      if (__res.second)
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d022      	beq.n	8006322 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_+0x72>
	  _Alloc_node __an(*this);
 80062dc:	f107 0310 	add.w	r3, r7, #16
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 f9ee 	bl	80066c4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeC1ERS7_>
	  return _Res(_M_insert_(__res.first, __res.second,
 80062e8:	697c      	ldr	r4, [r7, #20]
 80062ea:	69bd      	ldr	r5, [r7, #24]
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f9f8 	bl	80066e2 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 80062f2:	4602      	mov	r2, r0
 80062f4:	f107 0310 	add.w	r3, r7, #16
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	4613      	mov	r3, r2
 80062fc:	462a      	mov	r2, r5
 80062fe:	4621      	mov	r1, r4
 8006300:	68b8      	ldr	r0, [r7, #8]
 8006302:	f000 f9f9 	bl	80066f8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_>
 8006306:	4603      	mov	r3, r0
 8006308:	623b      	str	r3, [r7, #32]
		      true);
 800630a:	2301      	movs	r3, #1
 800630c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006310:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8006314:	f107 0320 	add.w	r3, r7, #32
 8006318:	4619      	mov	r1, r3
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 fa35 	bl	800678a <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>
    }
 8006320:	e011      	b.n	8006346 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_+0x96>
      return _Res(iterator(__res.first), false);
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006328:	4611      	mov	r1, r2
 800632a:	4618      	mov	r0, r3
 800632c:	f7fe fdea 	bl	8004f04 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8006330:	2300      	movs	r3, #0
 8006332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006336:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 800633a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800633e:	4619      	mov	r1, r3
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 fa22 	bl	800678a <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>
    }
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	3730      	adds	r7, #48	; 0x30
 800634a:	46bd      	mov	sp, r7
 800634c:	bdb0      	pop	{r4, r5, r7, pc}

0800634e <_ZNSt4pairISt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IRSt17_Rb_tree_iteratorIS2_ERbLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 800634e:	b590      	push	{r4, r7, lr}
 8006350:	b085      	sub	sp, #20
 8006352:	af00      	add	r7, sp, #0
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800635a:	68fc      	ldr	r4, [r7, #12]
 800635c:	68b8      	ldr	r0, [r7, #8]
 800635e:	f000 fa2d 	bl	80067bc <_ZSt7forwardIRSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS5_E4typeE>
 8006362:	4603      	mov	r3, r0
 8006364:	4619      	mov	r1, r3
 8006366:	4620      	mov	r0, r4
 8006368:	f7fe fce2 	bl	8004d30 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fa30 	bl	80067d2 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8006372:	4603      	mov	r3, r0
 8006374:	781a      	ldrb	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	711a      	strb	r2, [r3, #4]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4618      	mov	r0, r3
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	bd90      	pop	{r4, r7, pc}

08006384 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4618      	mov	r0, r3
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <_ZNSt16allocator_traitsISaIP15PrintableSensorEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	68b9      	ldr	r1, [r7, #8]
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 fa1c 	bl	80067e8 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE10deallocateEPS2_j>
 80063b0:	bf00      	nop
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <_ZSt8_DestroyIPP15PrintableSensorEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fa1f 	bl	8006808 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP15PrintableSensorEEvT_S5_>
    }
 80063ca:	bf00      	nop
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4618      	mov	r0, r3
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4618      	mov	r0, r3
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80063fe:	b590      	push	{r4, r7, lr}
 8006400:	b085      	sub	sp, #20
 8006402:	af00      	add	r7, sp, #0
 8006404:	60f8      	str	r0, [r7, #12]
 8006406:	60b9      	str	r1, [r7, #8]
 8006408:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff ffec 	bl	80063e8 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 8006410:	4603      	mov	r3, r0
 8006412:	681c      	ldr	r4, [r3, #0]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4619      	mov	r1, r3
 8006418:	2004      	movs	r0, #4
 800641a:	f7ff fc59 	bl	8005cd0 <_ZnwjPv>
 800641e:	4603      	mov	r3, r0
 8006420:	601c      	str	r4, [r3, #0]
 8006422:	bf00      	nop
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	bd90      	pop	{r4, r7, pc}

0800642a <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800644a:	b590      	push	{r4, r7, lr}
 800644c:	b087      	sub	sp, #28
 800644e:	af00      	add	r7, sp, #0
 8006450:	60f8      	str	r0, [r7, #12]
 8006452:	60b9      	str	r1, [r7, #8]
 8006454:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 f9e1 	bl	800681e <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 800645c:	4604      	mov	r4, r0
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f7ff fd92 	bl	8005f88 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 8006464:	4603      	mov	r3, r0
 8006466:	1ae2      	subs	r2, r4, r3
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	429a      	cmp	r2, r3
 800646c:	bf34      	ite	cc
 800646e:	2301      	movcc	r3, #1
 8006470:	2300      	movcs	r3, #0
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f00e fdf2 	bl	8015062 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f7ff fd82 	bl	8005f88 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 8006484:	4604      	mov	r4, r0
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f7ff fd7e 	bl	8005f88 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 800648c:	4603      	mov	r3, r0
 800648e:	613b      	str	r3, [r7, #16]
 8006490:	f107 0208 	add.w	r2, r7, #8
 8006494:	f107 0310 	add.w	r3, r7, #16
 8006498:	4611      	mov	r1, r2
 800649a:	4618      	mov	r0, r3
 800649c:	f000 f9d0 	bl	8006840 <_ZSt3maxIjERKT_S2_S2_>
 80064a0:	4603      	mov	r3, r0
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4423      	add	r3, r4
 80064a6:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f7ff fd6d 	bl	8005f88 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 80064ae:	4602      	mov	r2, r0
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d306      	bcc.n	80064c4 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 f9b1 	bl	800681e <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 80064bc:	4602      	mov	r2, r0
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d904      	bls.n	80064ce <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x84>
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 f9aa 	bl	800681e <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 80064ca:	4603      	mov	r3, r0
 80064cc:	e000      	b.n	80064d0 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x86>
 80064ce:	697b      	ldr	r3, [r7, #20]
      }
 80064d0:	4618      	mov	r0, r3
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd90      	pop	{r4, r7, pc}

080064d8 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	f107 030c 	add.w	r3, r7, #12
 80064e6:	4611      	mov	r1, r2
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7ff ff9e 	bl	800642a <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <_ZN9__gnu_cxxmiIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80064f8:	b590      	push	{r4, r7, lr}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f835 	bl	8006572 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8006508:	4603      	mov	r3, r0
 800650a:	681c      	ldr	r4, [r3, #0]
 800650c:	6838      	ldr	r0, [r7, #0]
 800650e:	f000 f830 	bl	8006572 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8006512:	4603      	mov	r3, r0
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	1ae3      	subs	r3, r4, r3
 8006518:	109b      	asrs	r3, r3, #2
 800651a:	4618      	mov	r0, r3
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	bd90      	pop	{r4, r7, pc}

08006522 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d006      	beq.n	8006540 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj+0x1e>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	4618      	mov	r0, r3
 8006538:	f000 f996 	bl	8006868 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8allocateERS2_j>
 800653c:	4603      	mov	r3, r0
 800653e:	e000      	b.n	8006542 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj+0x20>
 8006540:	2300      	movs	r3, #0
      }
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800654a:	b590      	push	{r4, r7, lr}
 800654c:	b087      	sub	sp, #28
 800654e:	af02      	add	r7, sp, #8
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	607a      	str	r2, [r7, #4]
 8006556:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8006558:	f88d 4000 	strb.w	r4, [sp]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	68b9      	ldr	r1, [r7, #8]
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 f98f 	bl	8006886 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8006568:	4603      	mov	r3, r0
      }
 800656a:	4618      	mov	r0, r3
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	bd90      	pop	{r4, r7, pc}

08006572 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4618      	mov	r0, r3
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8006588:	b590      	push	{r4, r7, lr}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
 8006594:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 f987 	bl	80068aa <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>
 800659c:	4604      	mov	r4, r0
 800659e:	68b8      	ldr	r0, [r7, #8]
 80065a0:	f000 f983 	bl	80068aa <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>
 80065a4:	4601      	mov	r1, r0
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	4620      	mov	r0, r4
 80065ac:	f000 f98c 	bl	80068c8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP15PrintableSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80065b0:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 80065b2:	4618      	mov	r0, r3
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd90      	pop	{r4, r7, pc}

080065ba <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80065ba:	b590      	push	{r4, r7, lr}
 80065bc:	b08b      	sub	sp, #44	; 0x2c
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80065c6:	68b8      	ldr	r0, [r7, #8]
 80065c8:	f7fe fbd3 	bl	8004d72 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>
 80065cc:	4603      	mov	r3, r0
 80065ce:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80065d0:	68b8      	ldr	r0, [r7, #8]
 80065d2:	f7fe fbda 	bl	8004d8a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 80065d6:	4603      	mov	r3, r0
 80065d8:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80065da:	2301      	movs	r3, #1
 80065dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d020      	beq.n	8006628 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x6e>
	  __y = __x;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80065ea:	68bc      	ldr	r4, [r7, #8]
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fe fc5d 	bl	8004eae <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 80065f4:	4603      	mov	r3, r0
 80065f6:	461a      	mov	r2, r3
 80065f8:	6879      	ldr	r1, [r7, #4]
 80065fa:	4620      	mov	r0, r4
 80065fc:	f7fe fc33 	bl	8004e66 <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8006600:	4603      	mov	r3, r0
 8006602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8006606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800660a:	2b00      	cmp	r3, #0
 800660c:	d005      	beq.n	800661a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x60>
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	4618      	mov	r0, r3
 8006612:	f7fe fc5f 	bl	8004ed4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>
 8006616:	4603      	mov	r3, r0
 8006618:	e004      	b.n	8006624 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x6a>
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	4618      	mov	r0, r3
 800661e:	f7fe fc65 	bl	8004eec <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006622:	4603      	mov	r3, r0
 8006624:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8006626:	e7db      	b.n	80065e0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x26>
      iterator __j = iterator(__y);
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	f107 0310 	add.w	r3, r7, #16
 800662e:	4611      	mov	r1, r2
 8006630:	4618      	mov	r0, r3
 8006632:	f7fe fc67 	bl	8004f04 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8006636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800663a:	2b00      	cmp	r3, #0
 800663c:	d01d      	beq.n	800667a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xc0>
	  if (__j == begin())
 800663e:	68b8      	ldr	r0, [r7, #8]
 8006640:	f000 f953 	bl	80068ea <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE5beginEv>
 8006644:	4603      	mov	r3, r0
 8006646:	61fb      	str	r3, [r7, #28]
 8006648:	f107 021c 	add.w	r2, r7, #28
 800664c:	f107 0310 	add.w	r3, r7, #16
 8006650:	4611      	mov	r1, r2
 8006652:	4618      	mov	r0, r3
 8006654:	f7fe fbe7 	bl	8004e26 <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d008      	beq.n	8006670 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xb6>
	    return _Res(__x, __y);
 800665e:	f107 0214 	add.w	r2, r7, #20
 8006662:	f107 0318 	add.w	r3, r7, #24
 8006666:	4619      	mov	r1, r3
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 f94f 	bl	800690c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>
 800666e:	e025      	b.n	80066bc <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x102>
	    --__j;
 8006670:	f107 0310 	add.w	r3, r7, #16
 8006674:	4618      	mov	r0, r3
 8006676:	f000 f962 	bl	800693e <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800667a:	68bc      	ldr	r4, [r7, #8]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	4618      	mov	r0, r3
 8006680:	f7fe fbe5 	bl	8004e4e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006684:	4603      	mov	r3, r0
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	4619      	mov	r1, r3
 800668a:	4620      	mov	r0, r4
 800668c:	f7fe fbeb 	bl	8004e66 <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d008      	beq.n	80066a8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xee>
	return _Res(__x, __y);
 8006696:	f107 0214 	add.w	r2, r7, #20
 800669a:	f107 0318 	add.w	r3, r7, #24
 800669e:	4619      	mov	r1, r3
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 f933 	bl	800690c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>
 80066a6:	e009      	b.n	80066bc <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x102>
      return _Res(__j._M_node, 0);
 80066a8:	2300      	movs	r3, #0
 80066aa:	623b      	str	r3, [r7, #32]
 80066ac:	f107 0220 	add.w	r2, r7, #32
 80066b0:	f107 0310 	add.w	r3, r7, #16
 80066b4:	4619      	mov	r1, r3
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 f952 	bl	8006960 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	372c      	adds	r7, #44	; 0x2c
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd90      	pop	{r4, r7, pc}

080066c4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeC1ERS7_>:
	_Alloc_node(_Rb_tree& __t)
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4618      	mov	r0, r3
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4618      	mov	r0, r3
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80066f8:	b5b0      	push	{r4, r5, r7, lr}
 80066fa:	b088      	sub	sp, #32
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d11a      	bne.n	8006742 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f7fe fb3c 	bl	8004d8a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 8006712:	4602      	mov	r2, r0
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4293      	cmp	r3, r2
 8006718:	d013      	beq.n	8006742 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800671a:	68fc      	ldr	r4, [r7, #12]
 800671c:	f107 0310 	add.w	r3, r7, #16
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	4618      	mov	r0, r3
 8006724:	f7fe fc0b 	bl	8004f3e <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 8006728:	4605      	mov	r5, r0
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7fe fb8f 	bl	8004e4e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006730:	4603      	mov	r3, r0
 8006732:	461a      	mov	r2, r3
 8006734:	4629      	mov	r1, r5
 8006736:	4620      	mov	r0, r4
 8006738:	f7fe fb95 	bl	8004e66 <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4e>
 8006742:	2301      	movs	r3, #1
 8006744:	e000      	b.n	8006748 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x50>
 8006746:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8006748:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 800674a:	6838      	ldr	r0, [r7, #0]
 800674c:	f7ff ffc9 	bl	80066e2 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8006750:	4603      	mov	r3, r0
 8006752:	4619      	mov	r1, r3
 8006754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006756:	f000 f919 	bl	800698c <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeclIRKS1_EEPSt13_Rb_tree_nodeIS1_EOT_>
 800675a:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8006760:	7ff8      	ldrb	r0, [r7, #31]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	69b9      	ldr	r1, [r7, #24]
 8006766:	f00e fc1e 	bl	8014fa6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8006774:	f107 0314 	add.w	r3, r7, #20
 8006778:	69b9      	ldr	r1, [r7, #24]
 800677a:	4618      	mov	r0, r3
 800677c:	f7fe fbc2 	bl	8004f04 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8006780:	697b      	ldr	r3, [r7, #20]
      }
 8006782:	4618      	mov	r0, r3
 8006784:	3720      	adds	r7, #32
 8006786:	46bd      	mov	sp, r7
 8006788:	bdb0      	pop	{r4, r5, r7, pc}

0800678a <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	60b9      	str	r1, [r7, #8]
 8006794:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8006796:	68b8      	ldr	r0, [r7, #8]
 8006798:	f000 f90c 	bl	80069b4 <_ZSt7forwardISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS4_E4typeE>
 800679c:	4602      	mov	r2, r0
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6812      	ldr	r2, [r2, #0]
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f910 	bl	80069ca <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80067aa:	4603      	mov	r3, r0
 80067ac:	781a      	ldrb	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	711a      	strb	r2, [r3, #4]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <_ZSt7forwardIRSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4618      	mov	r0, r3
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4619      	mov	r1, r3
 80067fa:	68b8      	ldr	r0, [r7, #8]
 80067fc:	f00e fb78 	bl	8014ef0 <_ZdlPvj>
      }
 8006800:	bf00      	nop
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP15PrintableSensorEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
 8006812:	bf00      	nop
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800681e:	b580      	push	{r7, lr}
 8006820:	b082      	sub	sp, #8
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4618      	mov	r0, r3
 800682a:	f000 f90c 	bl	8006a46 <_ZNKSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 800682e:	4603      	mov	r3, r0
 8006830:	4618      	mov	r0, r3
 8006832:	f000 f8ee 	bl	8006a12 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_max_sizeERKS2_>
 8006836:	4603      	mov	r3, r0
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d201      	bcs.n	800685a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	e000      	b.n	800685c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800685a:	687b      	ldr	r3, [r7, #4]
    }
 800685c:	4618      	mov	r0, r3
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006872:	2200      	movs	r2, #0
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f8f0 	bl	8006a5c <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv>
 800687c:	4603      	mov	r3, r0
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8006886:	b580      	push	{r7, lr}
 8006888:	b084      	sub	sp, #16
 800688a:	af00      	add	r7, sp, #0
 800688c:	60f8      	str	r0, [r7, #12]
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	607a      	str	r2, [r7, #4]
 8006892:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 f8fc 	bl	8006a98 <_ZSt12__relocate_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 80068a0:	4603      	mov	r3, r0
      }
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80068b2:	f107 030c 	add.w	r3, r7, #12
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 f90a 	bl	8006ad2 <_ZNSt13move_iteratorIPP15PrintableSensorEC1ES2_>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP15PrintableSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	68b9      	ldr	r1, [r7, #8]
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 f90b 	bl	8006af6 <_ZSt18uninitialized_copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>
 80068e0:	4603      	mov	r3, r0
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b084      	sub	sp, #16
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	f107 030c 	add.w	r3, r7, #12
 80068fa:	4611      	mov	r1, r2
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fe fb01 	bl	8004f04 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8006918:	68b8      	ldr	r0, [r7, #8]
 800691a:	f000 f8fe 	bl	8006b1a <_ZSt7forwardIRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS6_E4typeE>
 800691e:	4603      	mov	r3, r0
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f902 	bl	8006b30 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800692c:	4603      	mov	r3, r0
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	605a      	str	r2, [r3, #4]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800693e:	b580      	push	{r7, lr}
 8006940:	b082      	sub	sp, #8
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4618      	mov	r0, r3
 800694c:	f00e fb29 	bl	8014fa2 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8006950:	4602      	mov	r2, r0
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	601a      	str	r2, [r3, #0]
	return *this;
 8006956:	687b      	ldr	r3, [r7, #4]
      }
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 800696c:	68b8      	ldr	r0, [r7, #8]
 800696e:	f000 f8df 	bl	8006b30 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8006972:	4603      	mov	r3, r0
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	605a      	str	r2, [r3, #4]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeclIRKS1_EEPSt13_Rb_tree_nodeIS1_EOT_>:
	  operator()(_Arg&& __arg) const
 800698c:	b590      	push	{r4, r7, lr}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681c      	ldr	r4, [r3, #0]
 800699a:	6838      	ldr	r0, [r7, #0]
 800699c:	f7ff fea1 	bl	80066e2 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 80069a0:	4603      	mov	r3, r0
 80069a2:	4619      	mov	r1, r3
 80069a4:	4620      	mov	r0, r4
 80069a6:	f000 f8ce 	bl	8006b46 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_create_nodeIJRKS1_EEEPSt13_Rb_tree_nodeIS1_EDpOT_>
 80069aa:	4603      	mov	r3, r0
 80069ac:	4618      	mov	r0, r3
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd90      	pop	{r4, r7, pc}

080069b4 <_ZSt7forwardISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4618      	mov	r0, r3
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80069ca:	b480      	push	{r7}
 80069cc:	b083      	sub	sp, #12
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4618      	mov	r0, r3
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4618      	mov	r0, r3
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <_ZNSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>:
      _M_valptr()
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3310      	adds	r3, #16
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 f8b6 	bl	8006b74 <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b084      	sub	sp, #16
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8006a1a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006a1e:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f8b3 	bl	8006b8c <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8max_sizeERKS2_>
 8006a26:	4603      	mov	r3, r0
 8006a28:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006a2a:	f107 0208 	add.w	r2, r7, #8
 8006a2e:	f107 030c 	add.w	r3, r7, #12
 8006a32:	4611      	mov	r1, r2
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 f8b5 	bl	8006ba4 <_ZSt3minIjERKT_S2_S2_>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	681b      	ldr	r3, [r3, #0]
      }
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <_ZNKSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4618      	mov	r0, r3
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 f8af 	bl	8006bcc <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	4293      	cmp	r3, r2
 8006a74:	bf8c      	ite	hi
 8006a76:	2301      	movhi	r3, #1
 8006a78:	2300      	movls	r3, #0
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006a80:	f00e faec 	bl	801505c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f00e fa33 	bl	8014ef4 <_Znwj>
 8006a8e:	4603      	mov	r3, r0
      }
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <_ZSt12__relocate_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8006a98:	b5b0      	push	{r4, r5, r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
 8006aa4:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 f89c 	bl	8006be4 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006aac:	4604      	mov	r4, r0
 8006aae:	68b8      	ldr	r0, [r7, #8]
 8006ab0:	f000 f898 	bl	8006be4 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f894 	bl	8006be4 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006abc:	4602      	mov	r2, r0
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f000 f899 	bl	8006bfa <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8006ac8:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bdb0      	pop	{r4, r5, r7, pc}

08006ad2 <_ZNSt13move_iteratorIPP15PrintableSensorEC1ES2_>:
      move_iterator(iterator_type __i)
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b082      	sub	sp, #8
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8006adc:	463b      	mov	r3, r7
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 f8a9 	bl	8006c36 <_ZSt4moveIRPP15PrintableSensorEONSt16remove_referenceIT_E4typeEOS5_>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4618      	mov	r0, r3
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <_ZSt18uninitialized_copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b086      	sub	sp, #24
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	60f8      	str	r0, [r7, #12]
 8006afe:	60b9      	str	r1, [r7, #8]
 8006b00:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006b02:	2301      	movs	r3, #1
 8006b04:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 f89e 	bl	8006c4c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP15PrintableSensorES5_EET0_T_S8_S7_>
 8006b10:	4603      	mov	r3, r0
    }
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <_ZSt7forwardIRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006b1a:	b480      	push	{r7}
 8006b1c:	b083      	sub	sp, #12
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4618      	mov	r0, r3
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_create_nodeIJRKS1_EEEPSt13_Rb_tree_nodeIS1_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f88b 	bl	8006c6c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_get_nodeEv>
 8006b56:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8006b58:	6838      	ldr	r0, [r7, #0]
 8006b5a:	f7ff fdc2 	bl	80066e2 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	461a      	mov	r2, r3
 8006b62:	68f9      	ldr	r1, [r7, #12]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f892 	bl	8006c8e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE17_M_construct_nodeIJRKS1_EEEvPSt13_Rb_tree_nodeIS1_EDpOT_>
	  return __tmp;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
	}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>:
      _M_ptr() noexcept
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f8a6 	bl	8006cce <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>
 8006b82:	4603      	mov	r3, r0
 8006b84:	4618      	mov	r0, r3
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f8a5 	bl	8006ce4 <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE8max_sizeEv>
 8006b9a:	4603      	mov	r3, r0
      }
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d201      	bcs.n	8006bbe <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	e000      	b.n	8006bc0 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8006bbe:	687b      	ldr	r3, [r7, #4]
    }
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006bd4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8006bd8:	4618      	mov	r0, r3
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b086      	sub	sp, #24
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	607a      	str	r2, [r7, #4]
 8006c06:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	109b      	asrs	r3, r3, #2
 8006c10:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	dd06      	ble.n	8006c26 <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	68f9      	ldr	r1, [r7, #12]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f00f fbb5 	bl	8016390 <memmove>
      return __result + __count;
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	4413      	add	r3, r2
    }
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <_ZSt4moveIRPP15PrintableSensorEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4618      	mov	r0, r3
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP15PrintableSensorES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	68b9      	ldr	r1, [r7, #8]
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 f84d 	bl	8006cfc <_ZSt4copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>
 8006c62:	4603      	mov	r3, r0
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_get_nodeEv>:
      _M_get_node()
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7ff feb3 	bl	80069e0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 f854 	bl	8006d2c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE8allocateERS4_j>
 8006c84:	4603      	mov	r3, r0
 8006c86:	4618      	mov	r0, r3
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE17_M_construct_nodeIJRKS1_EEEvPSt13_Rb_tree_nodeIS1_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8006c8e:	b5b0      	push	{r4, r5, r7, lr}
 8006c90:	b084      	sub	sp, #16
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	60f8      	str	r0, [r7, #12]
 8006c96:	60b9      	str	r1, [r7, #8]
 8006c98:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	2014      	movs	r0, #20
 8006ca0:	f7ff f816 	bl	8005cd0 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f7ff fe9b 	bl	80069e0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 8006caa:	4604      	mov	r4, r0
 8006cac:	68b8      	ldr	r0, [r7, #8]
 8006cae:	f7ff fea2 	bl	80069f6 <_ZNSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>
 8006cb2:	4605      	mov	r5, r0
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff fd14 	bl	80066e2 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f000 f842 	bl	8006d4a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>
	}
 8006cc6:	bf00      	nop
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bdb0      	pop	{r4, r5, r7, pc}

08006cce <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>:
      _M_addr() noexcept
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7ff ff6d 	bl	8006bcc <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <_ZSt4copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8006cfc:	b590      	push	{r4, r7, lr}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 f831 	bl	8006d70 <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006d0e:	4604      	mov	r4, r0
 8006d10:	68b8      	ldr	r0, [r7, #8]
 8006d12:	f000 f82d 	bl	8006d70 <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006d16:	4603      	mov	r3, r0
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f000 f838 	bl	8006d92 <_ZSt13__copy_move_aILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 8006d22:	4603      	mov	r3, r0
    }
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd90      	pop	{r4, r7, pc}

08006d2c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006d36:	2200      	movs	r2, #0
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f84c 	bl	8006dd8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv>
 8006d40:	4603      	mov	r3, r0
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	60b9      	str	r1, [r7, #8]
 8006d54:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7ff fcc3 	bl	80066e2 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	461a      	mov	r2, r3
 8006d60:	68b9      	ldr	r1, [r7, #8]
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 f859 	bl	8006e1a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
	}
 8006d68:	bf00      	nop
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8006d78:	1d3b      	adds	r3, r7, #4
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 f863 	bl	8006e46 <_ZNKSt13move_iteratorIPP15PrintableSensorE4baseEv>
 8006d80:	4603      	mov	r3, r0
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 f86b 	bl	8006e5e <_ZSt12__miter_baseIPP15PrintableSensorET_S3_>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <_ZSt13__copy_move_aILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006d92:	b5b0      	push	{r4, r5, r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	60f8      	str	r0, [r7, #12]
 8006d9a:	60b9      	str	r1, [r7, #8]
 8006d9c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f7ff ff20 	bl	8006be4 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006da4:	4604      	mov	r4, r0
 8006da6:	68b8      	ldr	r0, [r7, #8]
 8006da8:	f7ff ff1c 	bl	8006be4 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006dac:	4605      	mov	r5, r0
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff ff17 	bl	8006be4 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006db6:	4603      	mov	r3, r0
 8006db8:	461a      	mov	r2, r3
 8006dba:	4629      	mov	r1, r5
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	f000 f859 	bl	8006e74 <_ZSt14__copy_move_a1ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	1d3b      	adds	r3, r7, #4
 8006dc6:	4611      	mov	r1, r2
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 f863 	bl	8006e94 <_ZSt12__niter_wrapIPP15PrintableSensorET_RKS3_S3_>
 8006dce:	4603      	mov	r3, r0
    }
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bdb0      	pop	{r4, r5, r7, pc}

08006dd8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 f861 	bl	8006eac <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv>
 8006dea:	4602      	mov	r2, r0
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	4293      	cmp	r3, r2
 8006df0:	bf8c      	ite	hi
 8006df2:	2301      	movhi	r3, #1
 8006df4:	2300      	movls	r3, #0
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006dfc:	f00e f92e 	bl	801505c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	4613      	mov	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f00e f872 	bl	8014ef4 <_Znwj>
 8006e10:	4603      	mov	r3, r0
      }
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8006e1a:	b590      	push	{r4, r7, lr}
 8006e1c:	b085      	sub	sp, #20
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7ff fc5b 	bl	80066e2 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	681c      	ldr	r4, [r3, #0]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	4619      	mov	r1, r3
 8006e34:	2004      	movs	r0, #4
 8006e36:	f7fe ff4b 	bl	8005cd0 <_ZnwjPv>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	601c      	str	r4, [r3, #0]
 8006e3e:	bf00      	nop
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd90      	pop	{r4, r7, pc}

08006e46 <_ZNKSt13move_iteratorIPP15PrintableSensorE4baseEv>:
      base() const
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4618      	mov	r0, r3
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <_ZSt12__miter_baseIPP15PrintableSensorET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <_ZSt14__copy_move_a1ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	68b9      	ldr	r1, [r7, #8]
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f000 f81f 	bl	8006ec8 <_ZSt14__copy_move_a2ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <_ZSt12__niter_wrapIPP15PrintableSensorET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006eb4:	4b03      	ldr	r3, [pc, #12]	; (8006ec4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv+0x18>)
      }
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	06666666 	.word	0x06666666

08006ec8 <_ZSt14__copy_move_a2ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	68b9      	ldr	r1, [r7, #8]
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 f805 	bl	8006ee8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_>
 8006ede:	4603      	mov	r3, r0
    }
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	109b      	asrs	r3, r3, #2
 8006efc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d006      	beq.n	8006f12 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	461a      	mov	r2, r3
 8006f0a:	68f9      	ldr	r1, [r7, #12]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f00f fa3f 	bl	8016390 <memmove>
	  return __result + _Num;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	4413      	add	r3, r2
	}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8006f22:	b480      	push	{r7}
 8006f24:	b083      	sub	sp, #12
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	ed87 0a01 	vstr	s0, [r7, #4]
 8006f2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f30:	eef0 7ae7 	vabs.f32	s15, s15
 8006f34:	eeb0 0a67 	vmov.f32	s0, s15
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b082      	sub	sp, #8
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	ed87 0a01 	vstr	s0, [r7, #4]
 8006f4c:	edc7 0a00 	vstr	s1, [r7]
 8006f50:	edd7 0a00 	vldr	s1, [r7]
 8006f54:	ed97 0a01 	vldr	s0, [r7, #4]
 8006f58:	f00e f97c 	bl	8015254 <atan2f>
 8006f5c:	eef0 7a40 	vmov.f32	s15, s0
 8006f60:	eeb0 0a67 	vmov.f32	s0, s15
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8006f6a:	b480      	push	{r7}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	ed87 0a01 	vstr	s0, [r7, #4]
 8006f74:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f78:	eef0 7ae7 	vabs.f32	s15, s15
 8006f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b082      	sub	sp, #8
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	ed87 0a01 	vstr	s0, [r7, #4]
 8006f94:	ed97 0a01 	vldr	s0, [r7, #4]
 8006f98:	f00e f95e 	bl	8015258 <sqrtf>
 8006f9c:	eef0 7a40 	vmov.f32	s15, s0
 8006fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_>:
 */

#include "ICM42688P.hpp"
#include "Constants.hpp"

ICM42688P::ICM42688P(
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
 8006fb8:	603b      	str	r3, [r7, #0]
	,prev_raw_az {0.0F}
	,max_ax_dt {0.0F}
	,max_ay_dt {0.0F}
	,max_az_dt {0.0F}
	,crashState {false}
	,criticalState {false}
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fc fe81 	bl	8003cc4 <_ZN8SPI_ConnC1Ev>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fc fe8c 	bl	8003ce4 <_ZN15PrintableSensorC1Ev>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	3340      	adds	r3, #64	; 0x40
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fc fe9d 	bl	8003d10 <_ZN12CallsCounterC1Ev>
 8006fd6:	4a66      	ldr	r2, [pc, #408]	; (8007170 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1c4>)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	4a65      	ldr	r2, [pc, #404]	; (8007174 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1c8>)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	605a      	str	r2, [r3, #4]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	4a64      	ldr	r2, [pc, #400]	; (8007178 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1cc>)
 8006fe6:	651a      	str	r2, [r3, #80]	; 0x50
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4a64      	ldr	r2, [pc, #400]	; (800717c <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1d0>)
 8006fec:	655a      	str	r2, [r3, #84]	; 0x54
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	4a63      	ldr	r2, [pc, #396]	; (8007180 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1d4>)
 8006ff2:	659a      	str	r2, [r3, #88]	; 0x58
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	661a      	str	r2, [r3, #96]	; 0x60
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	665a      	str	r2, [r3, #100]	; 0x64
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	669a      	str	r2, [r3, #104]	; 0x68
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	69fa      	ldr	r2, [r7, #28]
 8007010:	66da      	str	r2, [r3, #108]	; 0x6c
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f04f 0200 	mov.w	r2, #0
 8007038:	675a      	str	r2, [r3, #116]	; 0x74
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f04f 0200 	mov.w	r2, #0
 8007040:	679a      	str	r2, [r3, #120]	; 0x78
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f04f 0200 	mov.w	r2, #0
 8007048:	67da      	str	r2, [r3, #124]	; 0x7c
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f04f 0200 	mov.w	r2, #0
 800705a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f04f 0200 	mov.w	r2, #0
 8007064:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f04f 0200 	mov.w	r2, #0
 800706e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f04f 0200 	mov.w	r2, #0
 8007082:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f04f 0200 	mov.w	r2, #0
 800708c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f04f 0200 	mov.w	r2, #0
 8007096:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f04f 0200 	mov.w	r2, #0
 80070a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f04f 0200 	mov.w	r2, #0
 80070aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f04f 0200 	mov.w	r2, #0
 80070b4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f04f 0200 	mov.w	r2, #0
 80070be:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f04f 0200 	mov.w	r2, #0
 80070c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4a2d      	ldr	r2, [pc, #180]	; (8007184 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1d8>)
 80070d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4a2c      	ldr	r2, [pc, #176]	; (8007188 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1dc>)
 80070d8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4a2b      	ldr	r2, [pc, #172]	; (800718c <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1e0>)
 80070e0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	4a2a      	ldr	r2, [pc, #168]	; (8007190 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1e4>)
 80070e8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4a29      	ldr	r2, [pc, #164]	; (8007194 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1e8>)
 80070f0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4a28      	ldr	r2, [pc, #160]	; (8007198 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1ec>)
 80070f8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007102:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800710c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007116:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f04f 0200 	mov.w	r2, #0
 8007120:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f04f 0200 	mov.w	r2, #0
 800712a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f04f 0200 	mov.w	r2, #0
 8007134:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f04f 0200 	mov.w	r2, #0
 800713e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f04f 0200 	mov.w	r2, #0
 8007148:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f04f 0200 	mov.w	r2, #0
 8007152:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
{
}
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	08016af8 	.word	0x08016af8
 8007174:	08016b0c 	.word	0x08016b0c
 8007178:	42652ee1 	.word	0x42652ee1
 800717c:	4183126f 	.word	0x4183126f
 8007180:	3a83126f 	.word	0x3a83126f
 8007184:	c1400000 	.word	0xc1400000
 8007188:	c1500000 	.word	0xc1500000
 800718c:	40e00000 	.word	0x40e00000
 8007190:	45057000 	.word	0x45057000
 8007194:	c3d48000 	.word	0xc3d48000
 8007198:	44a0a000 	.word	0x44a0a000

0800719c <_ZN9ICM42688P11defaultInitEv>:

bool ICM42688P::defaultInit()
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	6078      	str	r0, [r7, #4]
	if (!initAndCheck(INTF_CONFIG1,0x00,10))
 80071a4:	2300      	movs	r3, #0
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	230a      	movs	r3, #10
 80071aa:	2200      	movs	r2, #0
 80071ac:	214d      	movs	r1, #77	; 0x4d
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f8af 	bl	8007312 <_ZN9ICM42688P12initAndCheckEhhhb>
 80071b4:	4603      	mov	r3, r0
 80071b6:	f083 0301 	eor.w	r3, r3, #1
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <_ZN9ICM42688P11defaultInitEv+0x28>
		return false;
 80071c0:	2300      	movs	r3, #0
 80071c2:	e0a2      	b.n	800730a <_ZN9ICM42688P11defaultInitEv+0x16e>

	SPI_write(DEVICE_CONFIG,DEVICE_CONFIG_SOFT_RESET_CONFIG);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2201      	movs	r2, #1
 80071cc:	2111      	movs	r1, #17
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	4798      	blx	r3
	HAL_Delay(20);
 80071d2:	2014      	movs	r0, #20
 80071d4:	f002 f99a 	bl	800950c <HAL_Delay>

	if (!initAndCheck(INTF_CONFIG1,0x00,10))
 80071d8:	2300      	movs	r3, #0
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	230a      	movs	r3, #10
 80071de:	2200      	movs	r2, #0
 80071e0:	214d      	movs	r1, #77	; 0x4d
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f895 	bl	8007312 <_ZN9ICM42688P12initAndCheckEhhhb>
 80071e8:	4603      	mov	r3, r0
 80071ea:	f083 0301 	eor.w	r3, r3, #1
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <_ZN9ICM42688P11defaultInitEv+0x5c>
		return false;
 80071f4:	2300      	movs	r3, #0
 80071f6:	e088      	b.n	800730a <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(INT_CONFIG0,INT_CONFIG0_UI_DRDY_INT_CLEAR_ONSENSORREGREAD,10))
 80071f8:	2300      	movs	r3, #0
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	230a      	movs	r3, #10
 80071fe:	2220      	movs	r2, #32
 8007200:	2163      	movs	r1, #99	; 0x63
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f885 	bl	8007312 <_ZN9ICM42688P12initAndCheckEhhhb>
 8007208:	4603      	mov	r3, r0
 800720a:	f083 0301 	eor.w	r3, r3, #1
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <_ZN9ICM42688P11defaultInitEv+0x7c>
		return false;
 8007214:	2300      	movs	r3, #0
 8007216:	e078      	b.n	800730a <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(INT_CONFIG,INT_CONFIG_INT1_POLARITY_ACTIVE_HIGH|INT_CONFIG_INT1_DRIVE_CIRCUIT_PUSH_PULL,10))
 8007218:	2300      	movs	r3, #0
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	230a      	movs	r3, #10
 800721e:	2203      	movs	r2, #3
 8007220:	2114      	movs	r1, #20
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f875 	bl	8007312 <_ZN9ICM42688P12initAndCheckEhhhb>
 8007228:	4603      	mov	r3, r0
 800722a:	f083 0301 	eor.w	r3, r3, #1
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <_ZN9ICM42688P11defaultInitEv+0x9c>
		return false;
 8007234:	2300      	movs	r3, #0
 8007236:	e068      	b.n	800730a <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(INT_SOURCE0,INT_SOURCE0_UI_DRDY_INT1_EN,10))
 8007238:	2300      	movs	r3, #0
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	230a      	movs	r3, #10
 800723e:	2208      	movs	r2, #8
 8007240:	2165      	movs	r1, #101	; 0x65
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f865 	bl	8007312 <_ZN9ICM42688P12initAndCheckEhhhb>
 8007248:	4603      	mov	r3, r0
 800724a:	f083 0301 	eor.w	r3, r3, #1
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	d001      	beq.n	8007258 <_ZN9ICM42688P11defaultInitEv+0xbc>
		return false;
 8007254:	2300      	movs	r3, #0
 8007256:	e058      	b.n	800730a <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(GYRO_CONFIG_STATIC2,0b11,10))
 8007258:	2300      	movs	r3, #0
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	230a      	movs	r3, #10
 800725e:	2203      	movs	r2, #3
 8007260:	210b      	movs	r1, #11
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f855 	bl	8007312 <_ZN9ICM42688P12initAndCheckEhhhb>
 8007268:	4603      	mov	r3, r0
 800726a:	f083 0301 	eor.w	r3, r3, #1
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <_ZN9ICM42688P11defaultInitEv+0xdc>
		return false;
 8007274:	2300      	movs	r3, #0
 8007276:	e048      	b.n	800730a <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(GYRO_CONFIG0,GYRO_CONFIG0_GYRO_ODR_1KHZ|GYRO_CONFIG0_GYRO_FS_SEL_2000DPS,10))
 8007278:	2300      	movs	r3, #0
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	230a      	movs	r3, #10
 800727e:	2206      	movs	r2, #6
 8007280:	214f      	movs	r1, #79	; 0x4f
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f845 	bl	8007312 <_ZN9ICM42688P12initAndCheckEhhhb>
 8007288:	4603      	mov	r3, r0
 800728a:	f083 0301 	eor.w	r3, r3, #1
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <_ZN9ICM42688P11defaultInitEv+0xfc>
		return false;
 8007294:	2300      	movs	r3, #0
 8007296:	e038      	b.n	800730a <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(ACCEL_CONFIG0,ACCEL_CONFIG0_ACCEL_ODR_1KHZ|ACCEL_CONFIG0_ACCEL_FS_SEL_4G,10))
 8007298:	2300      	movs	r3, #0
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	230a      	movs	r3, #10
 800729e:	2246      	movs	r2, #70	; 0x46
 80072a0:	2150      	movs	r1, #80	; 0x50
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f835 	bl	8007312 <_ZN9ICM42688P12initAndCheckEhhhb>
 80072a8:	4603      	mov	r3, r0
 80072aa:	f083 0301 	eor.w	r3, r3, #1
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <_ZN9ICM42688P11defaultInitEv+0x11c>
		return false;
 80072b4:	2300      	movs	r3, #0
 80072b6:	e028      	b.n	800730a <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(PWR_MGMT0,0x0F,10))
 80072b8:	2300      	movs	r3, #0
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	230a      	movs	r3, #10
 80072be:	220f      	movs	r2, #15
 80072c0:	214e      	movs	r1, #78	; 0x4e
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f825 	bl	8007312 <_ZN9ICM42688P12initAndCheckEhhhb>
 80072c8:	4603      	mov	r3, r0
 80072ca:	f083 0301 	eor.w	r3, r3, #1
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d001      	beq.n	80072d8 <_ZN9ICM42688P11defaultInitEv+0x13c>
		return false;
 80072d4:	2300      	movs	r3, #0
 80072d6:	e018      	b.n	800730a <_ZN9ICM42688P11defaultInitEv+0x16e>

	HAL_Delay(50);
 80072d8:	2032      	movs	r0, #50	; 0x32
 80072da:	f002 f917 	bl	800950c <HAL_Delay>

	this->update();
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fa80 	bl	80077e4 <_ZN9ICM42688P6updateEv>
	this->euler_x = this->ay;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	this->euler_y = this->ax;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	this->euler_z = this->az;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	return true;
 8007308:	2301      	movs	r3, #1
}
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <_ZN9ICM42688P12initAndCheckEhhhb>:

bool ICM42688P::initAndCheck(uint8_t addr,uint8_t val,uint8_t numberOfTries,bool read_only)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	4608      	mov	r0, r1
 800731c:	4611      	mov	r1, r2
 800731e:	461a      	mov	r2, r3
 8007320:	4603      	mov	r3, r0
 8007322:	70fb      	strb	r3, [r7, #3]
 8007324:	460b      	mov	r3, r1
 8007326:	70bb      	strb	r3, [r7, #2]
 8007328:	4613      	mov	r3, r2
 800732a:	707b      	strb	r3, [r7, #1]
	for (int i=0;i<numberOfTries;i++)
 800732c:	2300      	movs	r3, #0
 800732e:	60fb      	str	r3, [r7, #12]
 8007330:	787b      	ldrb	r3, [r7, #1]
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	429a      	cmp	r2, r3
 8007336:	da21      	bge.n	800737c <_ZN9ICM42688P12initAndCheckEhhhb+0x6a>
	{
		if (read_only==false)
 8007338:	7e3b      	ldrb	r3, [r7, #24]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d106      	bne.n	800734c <_ZN9ICM42688P12initAndCheckEhhhb+0x3a>
			SPI_write(addr,val);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	78ba      	ldrb	r2, [r7, #2]
 8007346:	78f9      	ldrb	r1, [r7, #3]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	4798      	blx	r3
		if (SPI_read(addr)==val)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3304      	adds	r3, #4
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	78fa      	ldrb	r2, [r7, #3]
 8007356:	4611      	mov	r1, r2
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	4798      	blx	r3
 800735c:	4603      	mov	r3, r0
 800735e:	461a      	mov	r2, r3
 8007360:	78bb      	ldrb	r3, [r7, #2]
 8007362:	4293      	cmp	r3, r2
 8007364:	bf0c      	ite	eq
 8007366:	2301      	moveq	r3, #1
 8007368:	2300      	movne	r3, #0
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <_ZN9ICM42688P12initAndCheckEhhhb+0x62>
			return true;
 8007370:	2301      	movs	r3, #1
 8007372:	e004      	b.n	800737e <_ZN9ICM42688P12initAndCheckEhhhb+0x6c>
	for (int i=0;i<numberOfTries;i++)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3301      	adds	r3, #1
 8007378:	60fb      	str	r3, [r7, #12]
 800737a:	e7d9      	b.n	8007330 <_ZN9ICM42688P12initAndCheckEhhhb+0x1e>
	}
	return false;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* ICM42688P::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8007388:	b590      	push	{r4, r7, lr}
 800738a:	b09f      	sub	sp, #124	; 0x7c
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3308      	adds	r3, #8
 8007396:	2200      	movs	r2, #0
 8007398:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GX)!=senorsList.end())
 800739a:	2300      	movs	r3, #0
 800739c:	613b      	str	r3, [r7, #16]
 800739e:	f107 0310 	add.w	r3, r7, #16
 80073a2:	4619      	mov	r1, r3
 80073a4:	6838      	ldr	r0, [r7, #0]
 80073a6:	f7fd fc4d 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80073aa:	4603      	mov	r3, r0
 80073ac:	60fb      	str	r3, [r7, #12]
 80073ae:	6838      	ldr	r0, [r7, #0]
 80073b0:	f7fd fc61 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80073b4:	4603      	mov	r3, r0
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	f107 0214 	add.w	r2, r7, #20
 80073bc:	f107 030c 	add.w	r3, r7, #12
 80073c0:	4611      	mov	r1, r2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fd fc64 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d020      	beq.n	8007410 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x88>
	{
		strcat(packet,toCharArray(euler_x));
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f103 0408 	add.w	r4, r3, #8
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	1d1a      	adds	r2, r3, #4
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 80073de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073e2:	ee17 1a90 	vmov	r1, s15
 80073e6:	4610      	mov	r0, r2
 80073e8:	f7fc fc3a 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 80073ec:	4603      	mov	r3, r0
 80073ee:	4619      	mov	r1, r3
 80073f0:	4620      	mov	r0, r4
 80073f2:	f00f f923 	bl	801663c <strcat>
		strcat(packet,",");
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f103 0408 	add.w	r4, r3, #8
 80073fc:	4620      	mov	r0, r4
 80073fe:	f7f8 fee7 	bl	80001d0 <strlen>
 8007402:	4603      	mov	r3, r0
 8007404:	4423      	add	r3, r4
 8007406:	49d2      	ldr	r1, [pc, #840]	; (8007750 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 8007408:	461a      	mov	r2, r3
 800740a:	460b      	mov	r3, r1
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GY)!=senorsList.end())
 8007410:	2301      	movs	r3, #1
 8007412:	61fb      	str	r3, [r7, #28]
 8007414:	f107 031c 	add.w	r3, r7, #28
 8007418:	4619      	mov	r1, r3
 800741a:	6838      	ldr	r0, [r7, #0]
 800741c:	f7fd fc12 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8007420:	4603      	mov	r3, r0
 8007422:	61bb      	str	r3, [r7, #24]
 8007424:	6838      	ldr	r0, [r7, #0]
 8007426:	f7fd fc26 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 800742a:	4603      	mov	r3, r0
 800742c:	623b      	str	r3, [r7, #32]
 800742e:	f107 0220 	add.w	r2, r7, #32
 8007432:	f107 0318 	add.w	r3, r7, #24
 8007436:	4611      	mov	r1, r2
 8007438:	4618      	mov	r0, r3
 800743a:	f7fd fc29 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d020      	beq.n	8007486 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0xfe>
	{
		strcat(packet,toCharArray(euler_y));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f103 0408 	add.w	r4, r3, #8
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	1d1a      	adds	r2, r3, #4
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8007454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007458:	ee17 1a90 	vmov	r1, s15
 800745c:	4610      	mov	r0, r2
 800745e:	f7fc fbff 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 8007462:	4603      	mov	r3, r0
 8007464:	4619      	mov	r1, r3
 8007466:	4620      	mov	r0, r4
 8007468:	f00f f8e8 	bl	801663c <strcat>
		strcat(packet,",");
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f103 0408 	add.w	r4, r3, #8
 8007472:	4620      	mov	r0, r4
 8007474:	f7f8 feac 	bl	80001d0 <strlen>
 8007478:	4603      	mov	r3, r0
 800747a:	4423      	add	r3, r4
 800747c:	49b4      	ldr	r1, [pc, #720]	; (8007750 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 800747e:	461a      	mov	r2, r3
 8007480:	460b      	mov	r3, r1
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GZ)!=senorsList.end())
 8007486:	2302      	movs	r3, #2
 8007488:	62bb      	str	r3, [r7, #40]	; 0x28
 800748a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800748e:	4619      	mov	r1, r3
 8007490:	6838      	ldr	r0, [r7, #0]
 8007492:	f7fd fbd7 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8007496:	4603      	mov	r3, r0
 8007498:	627b      	str	r3, [r7, #36]	; 0x24
 800749a:	6838      	ldr	r0, [r7, #0]
 800749c:	f7fd fbeb 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80074a0:	4603      	mov	r3, r0
 80074a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074a4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80074a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074ac:	4611      	mov	r1, r2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fd fbee 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d020      	beq.n	80074fc <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x174>
	{
		strcat(packet,toCharArray(euler_z));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f103 0408 	add.w	r4, r3, #8
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	1d1a      	adds	r2, r3, #4
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 80074ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074ce:	ee17 1a90 	vmov	r1, s15
 80074d2:	4610      	mov	r0, r2
 80074d4:	f7fc fbc4 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 80074d8:	4603      	mov	r3, r0
 80074da:	4619      	mov	r1, r3
 80074dc:	4620      	mov	r0, r4
 80074de:	f00f f8ad 	bl	801663c <strcat>
		strcat(packet,",");
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f103 0408 	add.w	r4, r3, #8
 80074e8:	4620      	mov	r0, r4
 80074ea:	f7f8 fe71 	bl	80001d0 <strlen>
 80074ee:	4603      	mov	r3, r0
 80074f0:	4423      	add	r3, r4
 80074f2:	4997      	ldr	r1, [pc, #604]	; (8007750 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 80074f4:	461a      	mov	r2, r3
 80074f6:	460b      	mov	r3, r1
 80074f8:	881b      	ldrh	r3, [r3, #0]
 80074fa:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AX)!=senorsList.end())
 80074fc:	2306      	movs	r3, #6
 80074fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007500:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007504:	4619      	mov	r1, r3
 8007506:	6838      	ldr	r0, [r7, #0]
 8007508:	f7fd fb9c 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 800750c:	4603      	mov	r3, r0
 800750e:	633b      	str	r3, [r7, #48]	; 0x30
 8007510:	6838      	ldr	r0, [r7, #0]
 8007512:	f7fd fbb0 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8007516:	4603      	mov	r3, r0
 8007518:	63bb      	str	r3, [r7, #56]	; 0x38
 800751a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800751e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007522:	4611      	mov	r1, r2
 8007524:	4618      	mov	r0, r3
 8007526:	f7fd fbb3 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d022      	beq.n	8007576 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1ee>
	{
		strcat(packet,toCharArray(-ax));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f103 0408 	add.w	r4, r3, #8
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	1d1a      	adds	r2, r3, #4
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8007540:	eef1 7a67 	vneg.f32	s15, s15
 8007544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007548:	ee17 1a90 	vmov	r1, s15
 800754c:	4610      	mov	r0, r2
 800754e:	f7fc fb87 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 8007552:	4603      	mov	r3, r0
 8007554:	4619      	mov	r1, r3
 8007556:	4620      	mov	r0, r4
 8007558:	f00f f870 	bl	801663c <strcat>
		strcat(packet,",");
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f103 0408 	add.w	r4, r3, #8
 8007562:	4620      	mov	r0, r4
 8007564:	f7f8 fe34 	bl	80001d0 <strlen>
 8007568:	4603      	mov	r3, r0
 800756a:	4423      	add	r3, r4
 800756c:	4978      	ldr	r1, [pc, #480]	; (8007750 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 800756e:	461a      	mov	r2, r3
 8007570:	460b      	mov	r3, r1
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AY)!=senorsList.end())
 8007576:	2307      	movs	r3, #7
 8007578:	643b      	str	r3, [r7, #64]	; 0x40
 800757a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800757e:	4619      	mov	r1, r3
 8007580:	6838      	ldr	r0, [r7, #0]
 8007582:	f7fd fb5f 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8007586:	4603      	mov	r3, r0
 8007588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800758a:	6838      	ldr	r0, [r7, #0]
 800758c:	f7fd fb73 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8007590:	4603      	mov	r3, r0
 8007592:	647b      	str	r3, [r7, #68]	; 0x44
 8007594:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8007598:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800759c:	4611      	mov	r1, r2
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fd fb76 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d020      	beq.n	80075ec <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x264>
	{
		strcat(packet,toCharArray(ay));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f103 0408 	add.w	r4, r3, #8
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	1d1a      	adds	r2, r3, #4
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80075ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075be:	ee17 1a90 	vmov	r1, s15
 80075c2:	4610      	mov	r0, r2
 80075c4:	f7fc fb4c 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 80075c8:	4603      	mov	r3, r0
 80075ca:	4619      	mov	r1, r3
 80075cc:	4620      	mov	r0, r4
 80075ce:	f00f f835 	bl	801663c <strcat>
		strcat(packet,",");
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f103 0408 	add.w	r4, r3, #8
 80075d8:	4620      	mov	r0, r4
 80075da:	f7f8 fdf9 	bl	80001d0 <strlen>
 80075de:	4603      	mov	r3, r0
 80075e0:	4423      	add	r3, r4
 80075e2:	495b      	ldr	r1, [pc, #364]	; (8007750 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 80075e4:	461a      	mov	r2, r3
 80075e6:	460b      	mov	r3, r1
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AZ)!=senorsList.end())
 80075ec:	2308      	movs	r3, #8
 80075ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80075f4:	4619      	mov	r1, r3
 80075f6:	6838      	ldr	r0, [r7, #0]
 80075f8:	f7fd fb24 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80075fc:	4603      	mov	r3, r0
 80075fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007600:	6838      	ldr	r0, [r7, #0]
 8007602:	f7fd fb38 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8007606:	4603      	mov	r3, r0
 8007608:	653b      	str	r3, [r7, #80]	; 0x50
 800760a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800760e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007612:	4611      	mov	r1, r2
 8007614:	4618      	mov	r0, r3
 8007616:	f7fd fb3b 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d020      	beq.n	8007662 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2da>
	{
		strcat(packet,toCharArray(az));
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f103 0408 	add.w	r4, r3, #8
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	1d1a      	adds	r2, r3, #4
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8007630:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007634:	ee17 1a90 	vmov	r1, s15
 8007638:	4610      	mov	r0, r2
 800763a:	f7fc fb11 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 800763e:	4603      	mov	r3, r0
 8007640:	4619      	mov	r1, r3
 8007642:	4620      	mov	r0, r4
 8007644:	f00e fffa 	bl	801663c <strcat>
		strcat(packet,",");
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f103 0408 	add.w	r4, r3, #8
 800764e:	4620      	mov	r0, r4
 8007650:	f7f8 fdbe 	bl	80001d0 <strlen>
 8007654:	4603      	mov	r3, r0
 8007656:	4423      	add	r3, r4
 8007658:	493d      	ldr	r1, [pc, #244]	; (8007750 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 800765a:	461a      	mov	r2, r3
 800765c:	460b      	mov	r3, r1
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_AX)!=senorsList.end())
 8007662:	2309      	movs	r3, #9
 8007664:	65bb      	str	r3, [r7, #88]	; 0x58
 8007666:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800766a:	4619      	mov	r1, r3
 800766c:	6838      	ldr	r0, [r7, #0]
 800766e:	f7fd fae9 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8007672:	4603      	mov	r3, r0
 8007674:	657b      	str	r3, [r7, #84]	; 0x54
 8007676:	6838      	ldr	r0, [r7, #0]
 8007678:	f7fd fafd 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 800767c:	4603      	mov	r3, r0
 800767e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007680:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007684:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007688:	4611      	mov	r1, r2
 800768a:	4618      	mov	r0, r3
 800768c:	f7fd fb00 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d020      	beq.n	80076d8 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x350>
	{
		strcat(packet,toCharArray(max_ax_dt));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f103 0408 	add.w	r4, r3, #8
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	1d1a      	adds	r2, r3, #4
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 80076a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076aa:	ee17 1a90 	vmov	r1, s15
 80076ae:	4610      	mov	r0, r2
 80076b0:	f7fc fad6 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 80076b4:	4603      	mov	r3, r0
 80076b6:	4619      	mov	r1, r3
 80076b8:	4620      	mov	r0, r4
 80076ba:	f00e ffbf 	bl	801663c <strcat>
		strcat(packet,",");
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f103 0408 	add.w	r4, r3, #8
 80076c4:	4620      	mov	r0, r4
 80076c6:	f7f8 fd83 	bl	80001d0 <strlen>
 80076ca:	4603      	mov	r3, r0
 80076cc:	4423      	add	r3, r4
 80076ce:	4920      	ldr	r1, [pc, #128]	; (8007750 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 80076d0:	461a      	mov	r2, r3
 80076d2:	460b      	mov	r3, r1
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_AY)!=senorsList.end())
 80076d8:	230a      	movs	r3, #10
 80076da:	667b      	str	r3, [r7, #100]	; 0x64
 80076dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80076e0:	4619      	mov	r1, r3
 80076e2:	6838      	ldr	r0, [r7, #0]
 80076e4:	f7fd faae 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80076e8:	4603      	mov	r3, r0
 80076ea:	663b      	str	r3, [r7, #96]	; 0x60
 80076ec:	6838      	ldr	r0, [r7, #0]
 80076ee:	f7fd fac2 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80076f2:	4603      	mov	r3, r0
 80076f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80076f6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80076fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80076fe:	4611      	mov	r1, r2
 8007700:	4618      	mov	r0, r3
 8007702:	f7fd fac5 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d023      	beq.n	8007754 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3cc>
	{
		strcat(packet,toCharArray(max_ay_dt));
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f103 0408 	add.w	r4, r3, #8
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	1d1a      	adds	r2, r3, #4
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 800771c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007720:	ee17 1a90 	vmov	r1, s15
 8007724:	4610      	mov	r0, r2
 8007726:	f7fc fa9b 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 800772a:	4603      	mov	r3, r0
 800772c:	4619      	mov	r1, r3
 800772e:	4620      	mov	r0, r4
 8007730:	f00e ff84 	bl	801663c <strcat>
		strcat(packet,",");
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f103 0408 	add.w	r4, r3, #8
 800773a:	4620      	mov	r0, r4
 800773c:	f7f8 fd48 	bl	80001d0 <strlen>
 8007740:	4603      	mov	r3, r0
 8007742:	4423      	add	r3, r4
 8007744:	4902      	ldr	r1, [pc, #8]	; (8007750 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 8007746:	461a      	mov	r2, r3
 8007748:	460b      	mov	r3, r1
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	8013      	strh	r3, [r2, #0]
 800774e:	e001      	b.n	8007754 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3cc>
 8007750:	08016808 	.word	0x08016808
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_AZ)!=senorsList.end())
 8007754:	230b      	movs	r3, #11
 8007756:	673b      	str	r3, [r7, #112]	; 0x70
 8007758:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800775c:	4619      	mov	r1, r3
 800775e:	6838      	ldr	r0, [r7, #0]
 8007760:	f7fd fa70 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8007764:	4603      	mov	r3, r0
 8007766:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007768:	6838      	ldr	r0, [r7, #0]
 800776a:	f7fd fa84 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 800776e:	4603      	mov	r3, r0
 8007770:	677b      	str	r3, [r7, #116]	; 0x74
 8007772:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8007776:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800777a:	4611      	mov	r1, r2
 800777c:	4618      	mov	r0, r3
 800777e:	f7fd fa87 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d020      	beq.n	80077ca <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x442>
	{
		strcat(packet,toCharArray(max_az_dt));
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f103 0408 	add.w	r4, r3, #8
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	1d1a      	adds	r2, r3, #4
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8007798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800779c:	ee17 1a90 	vmov	r1, s15
 80077a0:	4610      	mov	r0, r2
 80077a2:	f7fc fa5d 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 80077a6:	4603      	mov	r3, r0
 80077a8:	4619      	mov	r1, r3
 80077aa:	4620      	mov	r0, r4
 80077ac:	f00e ff46 	bl	801663c <strcat>
		strcat(packet,",");
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f103 0408 	add.w	r4, r3, #8
 80077b6:	4620      	mov	r0, r4
 80077b8:	f7f8 fd0a 	bl	80001d0 <strlen>
 80077bc:	4603      	mov	r3, r0
 80077be:	4423      	add	r3, r4
 80077c0:	4905      	ldr	r1, [pc, #20]	; (80077d8 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x450>)
 80077c2:	461a      	mov	r2, r3
 80077c4:	460b      	mov	r3, r1
 80077c6:	881b      	ldrh	r3, [r3, #0]
 80077c8:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	3308      	adds	r3, #8
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	377c      	adds	r7, #124	; 0x7c
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd90      	pop	{r4, r7, pc}
 80077d6:	bf00      	nop
 80077d8:	08016808 	.word	0x08016808

080077dc <_ZThn4_N9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	void checkCriticalState();
	void checkCrashState();
public:

	void SPI_write(uint8_t reg,uint8_t data);
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 80077dc:	f1a0 0004 	sub.w	r0, r0, #4
 80077e0:	f7ff bdd2 	b.w	8007388 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>

080077e4 <_ZN9ICM42688P6updateEv>:

void ICM42688P::update()
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
	uint8_t axL = SPI_read(ACCEL_DATA_X0);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3304      	adds	r3, #4
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2120      	movs	r1, #32
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	4798      	blx	r3
 80077fa:	4603      	mov	r3, r0
 80077fc:	75fb      	strb	r3, [r7, #23]
	uint8_t axH = SPI_read(ACCEL_DATA_X1);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3304      	adds	r3, #4
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	211f      	movs	r1, #31
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	4798      	blx	r3
 800780c:	4603      	mov	r3, r0
 800780e:	75bb      	strb	r3, [r7, #22]
	uint8_t ayL = SPI_read(ACCEL_DATA_Y0);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3304      	adds	r3, #4
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2122      	movs	r1, #34	; 0x22
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	4798      	blx	r3
 800781e:	4603      	mov	r3, r0
 8007820:	757b      	strb	r3, [r7, #21]
	uint8_t ayH = SPI_read(ACCEL_DATA_Y1);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3304      	adds	r3, #4
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2121      	movs	r1, #33	; 0x21
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	4798      	blx	r3
 8007830:	4603      	mov	r3, r0
 8007832:	753b      	strb	r3, [r7, #20]
	uint8_t azL = SPI_read(ACCEL_DATA_Z0);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3304      	adds	r3, #4
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2124      	movs	r1, #36	; 0x24
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	4798      	blx	r3
 8007842:	4603      	mov	r3, r0
 8007844:	74fb      	strb	r3, [r7, #19]
	uint8_t azH = SPI_read(ACCEL_DATA_Z1);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3304      	adds	r3, #4
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2123      	movs	r1, #35	; 0x23
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	4798      	blx	r3
 8007854:	4603      	mov	r3, r0
 8007856:	74bb      	strb	r3, [r7, #18]

	uint8_t gxL = SPI_read(GYRO_DATA_X0);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3304      	adds	r3, #4
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2126      	movs	r1, #38	; 0x26
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	4798      	blx	r3
 8007866:	4603      	mov	r3, r0
 8007868:	747b      	strb	r3, [r7, #17]
	uint8_t gxH = SPI_read(GYRO_DATA_X1);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3304      	adds	r3, #4
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2125      	movs	r1, #37	; 0x25
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	4798      	blx	r3
 8007878:	4603      	mov	r3, r0
 800787a:	743b      	strb	r3, [r7, #16]
	uint8_t gyL = SPI_read(GYRO_DATA_Y0);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3304      	adds	r3, #4
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2128      	movs	r1, #40	; 0x28
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	4798      	blx	r3
 800788a:	4603      	mov	r3, r0
 800788c:	73fb      	strb	r3, [r7, #15]
	uint8_t gyH = SPI_read(GYRO_DATA_Y1);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3304      	adds	r3, #4
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2127      	movs	r1, #39	; 0x27
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	4798      	blx	r3
 800789c:	4603      	mov	r3, r0
 800789e:	73bb      	strb	r3, [r7, #14]
	uint8_t gzL = SPI_read(GYRO_DATA_Z0);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3304      	adds	r3, #4
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	212a      	movs	r1, #42	; 0x2a
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	4798      	blx	r3
 80078ae:	4603      	mov	r3, r0
 80078b0:	737b      	strb	r3, [r7, #13]
	uint8_t gzH = SPI_read(GYRO_DATA_Z1);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3304      	adds	r3, #4
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2129      	movs	r1, #41	; 0x29
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	4798      	blx	r3
 80078c0:	4603      	mov	r3, r0
 80078c2:	733b      	strb	r3, [r7, #12]

	uint8_t tempL = SPI_read(TEMP_DATA0);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3304      	adds	r3, #4
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	211e      	movs	r1, #30
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	4798      	blx	r3
 80078d2:	4603      	mov	r3, r0
 80078d4:	72fb      	strb	r3, [r7, #11]
	uint8_t tempH = SPI_read(TEMP_DATA1);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3304      	adds	r3, #4
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	211d      	movs	r1, #29
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	4798      	blx	r3
 80078e4:	4603      	mov	r3, r0
 80078e6:	72bb      	strb	r3, [r7, #10]

	this->raw_ax = (static_cast<float>(((int16_t)(((int16_t)axH<<8) | axL))) - this->axOffset);// * this->axScale;
 80078e8:	7dbb      	ldrb	r3, [r7, #22]
 80078ea:	021b      	lsls	r3, r3, #8
 80078ec:	b21a      	sxth	r2, r3
 80078ee:	7dfb      	ldrb	r3, [r7, #23]
 80078f0:	b21b      	sxth	r3, r3
 80078f2:	4313      	orrs	r3, r2
 80078f4:	b21b      	sxth	r3, r3
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8007904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	this->raw_ay = (static_cast<float>(((int16_t)(((int16_t)ayH<<8) | ayL))) - this->ayOffset);// * this->ayScale;
 800790e:	7d3b      	ldrb	r3, [r7, #20]
 8007910:	021b      	lsls	r3, r3, #8
 8007912:	b21a      	sxth	r2, r3
 8007914:	7d7b      	ldrb	r3, [r7, #21]
 8007916:	b21b      	sxth	r3, r3
 8007918:	4313      	orrs	r3, r2
 800791a:	b21b      	sxth	r3, r3
 800791c:	ee07 3a90 	vmov	s15, r3
 8007920:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 800792a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	this->raw_az = (static_cast<float>(((int16_t)(((int16_t)azH<<8) | azL))) - this->azOffset);// * this->azScale;
 8007934:	7cbb      	ldrb	r3, [r7, #18]
 8007936:	021b      	lsls	r3, r3, #8
 8007938:	b21a      	sxth	r2, r3
 800793a:	7cfb      	ldrb	r3, [r7, #19]
 800793c:	b21b      	sxth	r3, r3
 800793e:	4313      	orrs	r3, r2
 8007940:	b21b      	sxth	r3, r3
 8007942:	ee07 3a90 	vmov	s15, r3
 8007946:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8007950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->raw_gx = static_cast<float>((int16_t)(((int16_t)gxH<<8) | gxL)) - this->gxDrift;
 800795a:	7c3b      	ldrb	r3, [r7, #16]
 800795c:	021b      	lsls	r3, r3, #8
 800795e:	b21a      	sxth	r2, r3
 8007960:	7c7b      	ldrb	r3, [r7, #17]
 8007962:	b21b      	sxth	r3, r3
 8007964:	4313      	orrs	r3, r2
 8007966:	b21b      	sxth	r3, r3
 8007968:	ee07 3a90 	vmov	s15, r3
 800796c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8007976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	this->raw_gy = static_cast<float>((int16_t)(((int16_t)gyH<<8) | gyL)) - this->gyDrift;
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	021b      	lsls	r3, r3, #8
 8007984:	b21a      	sxth	r2, r3
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	b21b      	sxth	r3, r3
 800798a:	4313      	orrs	r3, r2
 800798c:	b21b      	sxth	r3, r3
 800798e:	ee07 3a90 	vmov	s15, r3
 8007992:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800799c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	this->raw_gz = static_cast<float>((int16_t)(((int16_t)gzH<<8) | gzL)) - this->gzDrift;
 80079a6:	7b3b      	ldrb	r3, [r7, #12]
 80079a8:	021b      	lsls	r3, r3, #8
 80079aa:	b21a      	sxth	r2, r3
 80079ac:	7b7b      	ldrb	r3, [r7, #13]
 80079ae:	b21b      	sxth	r3, r3
 80079b0:	4313      	orrs	r3, r2
 80079b2:	b21b      	sxth	r3, r3
 80079b4:	ee07 3a90 	vmov	s15, r3
 80079b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80079c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	this->temp = static_cast<float>((int16_t)(((int16_t)tempH<<8) | tempL)) / 132.48F + 25.0F;
 80079cc:	7abb      	ldrb	r3, [r7, #10]
 80079ce:	021b      	lsls	r3, r3, #8
 80079d0:	b21a      	sxth	r2, r3
 80079d2:	7afb      	ldrb	r3, [r7, #11]
 80079d4:	b21b      	sxth	r3, r3
 80079d6:	4313      	orrs	r3, r2
 80079d8:	b21b      	sxth	r3, r3
 80079da:	ee07 3a90 	vmov	s15, r3
 80079de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80079e2:	eddf 6a13 	vldr	s13, [pc, #76]	; 8007a30 <_ZN9ICM42688P6updateEv+0x24c>
 80079e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80079ea:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80079ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

	this->toEuler();
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f915 	bl	8007c28 <_ZN9ICM42688P7toEulerEv>

	this->checkCrashState();
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f84a 	bl	8007a98 <_ZN9ICM42688P15checkCrashStateEv>
	this->checkCriticalState();
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f815 	bl	8007a34 <_ZN9ICM42688P18checkCriticalStateEv>

	this->_rollPID.update();
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f001 f982 	bl	8008d18 <_ZN11PID_Control6updateEv>
	this->_pitchPID.update();
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f001 f97d 	bl	8008d18 <_ZN11PID_Control6updateEv>
	this->_yawPID.update();
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a22:	4618      	mov	r0, r3
 8007a24:	f001 f978 	bl	8008d18 <_ZN11PID_Control6updateEv>
}
 8007a28:	bf00      	nop
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	43047ae1 	.word	0x43047ae1

08007a34 <_ZN9ICM42688P18checkCriticalStateEv>:

void ICM42688P::checkCriticalState()
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
	if (abs(this->euler_x) >=criticalStateAngleThreshold || abs(this->euler_y) >=criticalStateAngleThreshold)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8007a42:	eeb0 0a67 	vmov.f32	s0, s15
 8007a46:	f7ff fa6c 	bl	8006f22 <_ZSt3absf>
 8007a4a:	eef0 7a40 	vmov.f32	s15, s0
 8007a4e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007a52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a5a:	da0f      	bge.n	8007a7c <_ZN9ICM42688P18checkCriticalStateEv+0x48>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8007a62:	eeb0 0a67 	vmov.f32	s0, s15
 8007a66:	f7ff fa5c 	bl	8006f22 <_ZSt3absf>
 8007a6a:	eef0 7a40 	vmov.f32	s15, s0
 8007a6e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a7a:	db01      	blt.n	8007a80 <_ZN9ICM42688P18checkCriticalStateEv+0x4c>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e000      	b.n	8007a82 <_ZN9ICM42688P18checkCriticalStateEv+0x4e>
 8007a80:	2300      	movs	r3, #0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <_ZN9ICM42688P18checkCriticalStateEv+0x5a>
	{
		this->criticalState = true;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
	}
}
 8007a8e:	bf00      	nop
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <_ZN9ICM42688P15checkCrashStateEv>:

void ICM42688P::checkCrashState()
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
	if (this->prev_raw_ax == 0.0F)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8007aa6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aae:	d105      	bne.n	8007abc <_ZN9ICM42688P15checkCrashStateEv+0x24>
		this->prev_raw_ax = this->raw_ax;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	if (this->prev_raw_ay == 0.0F)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8007ac2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aca:	d105      	bne.n	8007ad8 <_ZN9ICM42688P15checkCrashStateEv+0x40>
		this->prev_raw_ay = this->raw_ay;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	if (this->prev_raw_az == 0.0F)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8007ade:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae6:	d105      	bne.n	8007af4 <_ZN9ICM42688P15checkCrashStateEv+0x5c>
		this->prev_raw_az = this->raw_az;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	float ax_dt = fabs(this->raw_ax-this->prev_raw_ax);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8007b00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b04:	eeb0 0a67 	vmov.f32	s0, s15
 8007b08:	f7ff fa2f 	bl	8006f6a <_ZSt4fabsf>
 8007b0c:	ed87 0a05 	vstr	s0, [r7, #20]
	float ay_dt = fabs(this->raw_ay-this->prev_raw_ay);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8007b1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b20:	eeb0 0a67 	vmov.f32	s0, s15
 8007b24:	f7ff fa21 	bl	8006f6a <_ZSt4fabsf>
 8007b28:	ed87 0a04 	vstr	s0, [r7, #16]
	float az_dt = fabs(this->raw_az-this->prev_raw_az);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8007b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8007b40:	f7ff fa13 	bl	8006f6a <_ZSt4fabsf>
 8007b44:	ed87 0a03 	vstr	s0, [r7, #12]

	if (ax_dt > constCrashAccDtThreshold ||
 8007b48:	edd7 7a05 	vldr	s15, [r7, #20]
 8007b4c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8007c08 <_ZN9ICM42688P15checkCrashStateEv+0x170>
 8007b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b58:	dc11      	bgt.n	8007b7e <_ZN9ICM42688P15checkCrashStateEv+0xe6>
 8007b5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8007b5e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8007c08 <_ZN9ICM42688P15checkCrashStateEv+0x170>
 8007b62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b6a:	dc08      	bgt.n	8007b7e <_ZN9ICM42688P15checkCrashStateEv+0xe6>
			ay_dt > constCrashAccDtThreshold ||
 8007b6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b70:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8007c08 <_ZN9ICM42688P15checkCrashStateEv+0x170>
 8007b74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b7c:	dd03      	ble.n	8007b86 <_ZN9ICM42688P15checkCrashStateEv+0xee>
			az_dt > constCrashAccDtThreshold)
	{
		this->crashState = true;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	}

	if (ax_dt > max_ax_dt)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8007b8c:	ed97 7a05 	vldr	s14, [r7, #20]
 8007b90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b98:	dd03      	ble.n	8007ba2 <_ZN9ICM42688P15checkCrashStateEv+0x10a>
		max_ax_dt = ax_dt;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	if (ay_dt > max_ay_dt)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8007ba8:	ed97 7a04 	vldr	s14, [r7, #16]
 8007bac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb4:	dd03      	ble.n	8007bbe <_ZN9ICM42688P15checkCrashStateEv+0x126>
		max_ay_dt = ay_dt;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	if (az_dt > max_az_dt)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8007bc4:	ed97 7a03 	vldr	s14, [r7, #12]
 8007bc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd0:	dd03      	ble.n	8007bda <_ZN9ICM42688P15checkCrashStateEv+0x142>
		max_az_dt = az_dt;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	this->prev_raw_ax=this->raw_ax;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	this->prev_raw_ay=this->raw_ay;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	this->prev_raw_az=this->raw_az;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
}
 8007bfe:	bf00      	nop
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	471c4000 	.word	0x471c4000

08007c0c <_ZN9ICM42688P23isCriticalStateDetectedEv>:

bool ICM42688P::isCriticalStateDetected()
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
	return this->criticalState;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
	...

08007c28 <_ZN9ICM42688P7toEulerEv>:
	return this->crashState;
}


void ICM42688P::toEuler()
{
 8007c28:	b5b0      	push	{r4, r5, r7, lr}
 8007c2a:	ed2d 8b02 	vpush	{d8}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
	this->gx = this->gx + this->raw_gx*(DT/GYRO_FULLSCALE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	edd3 5a16 	vldr	s11, [r3, #88]	; 0x58
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8007c4c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007c50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	this->gy = this->gy + this->raw_gy*(DT/GYRO_FULLSCALE);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	edd3 5a16 	vldr	s11, [r3, #88]	; 0x58
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8007c76:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007c7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	this->gz = this->gz + this->raw_gz*(DT/GYRO_FULLSCALE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	edd3 5a16 	vldr	s11, [r3, #88]	; 0x58
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8007ca0:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

	this->euler_x = this->euler_x + this->raw_gx*(DT/GYRO_FULLSCALE);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	edd3 5a16 	vldr	s11, [r3, #88]	; 0x58
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8007cca:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->euler_y = this->euler_y + this->raw_gy*(DT/GYRO_FULLSCALE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	edd3 5a16 	vldr	s11, [r3, #88]	; 0x58
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8007cf4:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007cf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->euler_z = this->euler_z + this->raw_gz*(DT/GYRO_FULLSCALE);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	edd3 5a16 	vldr	s11, [r3, #88]	; 0x58
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8007d1e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007d22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0

	this->ax = atan2(this->raw_ax,sqrt(this->raw_ay*this->raw_ay + this->raw_az*this->raw_az))*RADIANS_TO_DEGREES;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	ed93 8a26 	vldr	s16, [r3, #152]	; 0x98
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8007d42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8007d52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8007d5e:	f7ff f914 	bl	8006f8a <_ZSt4sqrtf>
 8007d62:	eef0 7a40 	vmov.f32	s15, s0
 8007d66:	eef0 0a67 	vmov.f32	s1, s15
 8007d6a:	eeb0 0a48 	vmov.f32	s0, s16
 8007d6e:	f7ff f8e8 	bl	8006f42 <_ZSt5atan2ff>
 8007d72:	eeb0 7a40 	vmov.f32	s14, s0
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	this->ay = atan2(this->raw_ay,sqrt(this->raw_ax*this->raw_ax + this->raw_az*this->raw_az))*RADIANS_TO_DEGREES;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	ed93 8a27 	vldr	s16, [r3, #156]	; 0x9c
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8007d98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8007da8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007db0:	eeb0 0a67 	vmov.f32	s0, s15
 8007db4:	f7ff f8e9 	bl	8006f8a <_ZSt4sqrtf>
 8007db8:	eef0 7a40 	vmov.f32	s15, s0
 8007dbc:	eef0 0a67 	vmov.f32	s1, s15
 8007dc0:	eeb0 0a48 	vmov.f32	s0, s16
 8007dc4:	f7ff f8bd 	bl	8006f42 <_ZSt5atan2ff>
 8007dc8:	eeb0 7a40 	vmov.f32	s14, s0
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	this->az = atan2(this->raw_az,sqrt(this->raw_ax*this->raw_ax + this->raw_ay*this->raw_ay))*RADIANS_TO_DEGREES -90.0F;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	ed93 8a28 	vldr	s16, [r3, #160]	; 0xa0
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8007dee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8007dfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e06:	eeb0 0a67 	vmov.f32	s0, s15
 8007e0a:	f7ff f8be 	bl	8006f8a <_ZSt4sqrtf>
 8007e0e:	eef0 7a40 	vmov.f32	s15, s0
 8007e12:	eef0 0a67 	vmov.f32	s1, s15
 8007e16:	eeb0 0a48 	vmov.f32	s0, s16
 8007e1a:	f7ff f892 	bl	8006f42 <_ZSt5atan2ff>
 8007e1e:	eeb0 7a40 	vmov.f32	s14, s0
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e2c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007f00 <_ZN9ICM42688P7toEulerEv+0x2d8>
 8007e30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

	this->euler_x = this->euler_x*0.9999+this->ay*0.0001;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7f8 fb31 	bl	80004a8 <__aeabi_f2d>
 8007e46:	a32a      	add	r3, pc, #168	; (adr r3, 8007ef0 <_ZN9ICM42688P7toEulerEv+0x2c8>)
 8007e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4c:	f7f8 fb84 	bl	8000558 <__aeabi_dmul>
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	4614      	mov	r4, r2
 8007e56:	461d      	mov	r5, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7f8 fb22 	bl	80004a8 <__aeabi_f2d>
 8007e64:	a324      	add	r3, pc, #144	; (adr r3, 8007ef8 <_ZN9ICM42688P7toEulerEv+0x2d0>)
 8007e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6a:	f7f8 fb75 	bl	8000558 <__aeabi_dmul>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	4620      	mov	r0, r4
 8007e74:	4629      	mov	r1, r5
 8007e76:	f7f8 f9b9 	bl	80001ec <__adddf3>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4610      	mov	r0, r2
 8007e80:	4619      	mov	r1, r3
 8007e82:	f7f8 fe41 	bl	8000b08 <__aeabi_d2f>
 8007e86:	4602      	mov	r2, r0
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	this->euler_y = this->euler_y*0.9999-this->ax*0.0001;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7f8 fb07 	bl	80004a8 <__aeabi_f2d>
 8007e9a:	a315      	add	r3, pc, #84	; (adr r3, 8007ef0 <_ZN9ICM42688P7toEulerEv+0x2c8>)
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	f7f8 fb5a 	bl	8000558 <__aeabi_dmul>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	4614      	mov	r4, r2
 8007eaa:	461d      	mov	r5, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7f8 faf8 	bl	80004a8 <__aeabi_f2d>
 8007eb8:	a30f      	add	r3, pc, #60	; (adr r3, 8007ef8 <_ZN9ICM42688P7toEulerEv+0x2d0>)
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	f7f8 fb4b 	bl	8000558 <__aeabi_dmul>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	4629      	mov	r1, r5
 8007eca:	f7f8 f98d 	bl	80001e8 <__aeabi_dsub>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	f7f8 fe17 	bl	8000b08 <__aeabi_d2f>
 8007eda:	4602      	mov	r2, r0
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 8007ee2:	bf00      	nop
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	ecbd 8b02 	vpop	{d8}
 8007eec:	bdb0      	pop	{r4, r5, r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	48e8a71e 	.word	0x48e8a71e
 8007ef4:	3fefff2e 	.word	0x3fefff2e
 8007ef8:	eb1c432d 	.word	0xeb1c432d
 8007efc:	3f1a36e2 	.word	0x3f1a36e2
 8007f00:	42b40000 	.word	0x42b40000

08007f04 <_ZN9ICM42688P9getEulerXEv>:
	this->computeAccOffset(count);
	this->buzz->beep(200U,100U,1U);
}

float ICM42688P::getEulerX()
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
	return this->euler_x;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f12:	ee07 3a90 	vmov	s15, r3
}
 8007f16:	eeb0 0a67 	vmov.f32	s0, s15
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <_ZN9ICM42688P12getEulerXrefEv>:

float& ICM42688P::getEulerXref()
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
	return this->euler_x;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	33a8      	adds	r3, #168	; 0xa8
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <_ZN9ICM42688P9getEulerYEv>:

float ICM42688P::getEulerY()
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
	return this->euler_y;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f4a:	ee07 3a90 	vmov	s15, r3
}
 8007f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <_ZN9ICM42688P12getEulerYrefEv>:

float& ICM42688P::getEulerYref()
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
	return this->euler_y;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	33ac      	adds	r3, #172	; 0xac
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <_ZN9ICM42688P12getEulerZrefEv>:
{
	return this->euler_z;
}

float& ICM42688P::getEulerZref()
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
	return this->euler_z;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	33b0      	adds	r3, #176	; 0xb0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <_ZN9ICM42688P9SPI_writeEhh>:
{
	return this->SPI_read(INT_STATUS);
}

void ICM42688P::SPI_write(uint8_t reg,uint8_t data)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	70fb      	strb	r3, [r7, #3]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(ICM_CS_PORT,ICM_CS_PIN,GPIO_PIN_RESET);
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	2120      	movs	r1, #32
 8007fa0:	480d      	ldr	r0, [pc, #52]	; (8007fd8 <_ZN9ICM42688P9SPI_writeEhh+0x4c>)
 8007fa2:	f002 ff2b 	bl	800adfc <HAL_GPIO_WritePin>
	this->spiTxBuff[0] = reg;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	78fa      	ldrb	r2, [r7, #3]
 8007faa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	this->spiTxBuff[1] = data;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	78ba      	ldrb	r2, [r7, #2]
 8007fb2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3370      	adds	r3, #112	; 0x70
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	f005 fac5 	bl	800d550 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(ICM_CS_PORT,ICM_CS_PIN,GPIO_PIN_SET);
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	2120      	movs	r1, #32
 8007fca:	4803      	ldr	r0, [pc, #12]	; (8007fd8 <_ZN9ICM42688P9SPI_writeEhh+0x4c>)
 8007fcc:	f002 ff16 	bl	800adfc <HAL_GPIO_WritePin>
}
 8007fd0:	bf00      	nop
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	40020800 	.word	0x40020800

08007fdc <_ZN9ICM42688P8SPI_readEh>:

uint8_t ICM42688P::SPI_read(uint8_t reg)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(ICM_CS_PORT, ICM_CS_PIN, GPIO_PIN_RESET);
 8007fe8:	2200      	movs	r2, #0
 8007fea:	2120      	movs	r1, #32
 8007fec:	4812      	ldr	r0, [pc, #72]	; (8008038 <_ZN9ICM42688P8SPI_readEh+0x5c>)
 8007fee:	f002 ff05 	bl	800adfc <HAL_GPIO_WritePin>
	this->spiTxBuff[0]=reg|0x80;
 8007ff2:	78fb      	ldrb	r3, [r7, #3]
 8007ff4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

	HAL_SPI_Transmit_DMA(this->spi_port, (uint8_t*)spiTxBuff, 1);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	3370      	adds	r3, #112	; 0x70
 8008008:	2201      	movs	r2, #1
 800800a:	4619      	mov	r1, r3
 800800c:	f005 faa0 	bl	800d550 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(this->spi_port, (uint8_t*)spiRxBuff, 1);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	3372      	adds	r3, #114	; 0x72
 8008018:	2201      	movs	r2, #1
 800801a:	4619      	mov	r1, r3
 800801c:	f005 fb4e 	bl	800d6bc <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(ICM_CS_PORT, ICM_CS_PIN, GPIO_PIN_SET);
 8008020:	2201      	movs	r2, #1
 8008022:	2120      	movs	r1, #32
 8008024:	4804      	ldr	r0, [pc, #16]	; (8008038 <_ZN9ICM42688P8SPI_readEh+0x5c>)
 8008026:	f002 fee9 	bl	800adfc <HAL_GPIO_WritePin>

	return this->spiRxBuff[0];
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
}
 8008030:	4618      	mov	r0, r3
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	40020800 	.word	0x40020800

0800803c <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef>:
 *      Author: Asus
 */

#include "LIS3MDLTR.hpp"

LIS3MDLTR::LIS3MDLTR(SPI_HandleTypeDef *spi_port):
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
	,z_mag {0}
	,z_angle {0}
	,x_raw {0}
	,y_raw {0}
	,z_raw {0}
	,TEMP_val {0}
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4618      	mov	r0, r3
 800804a:	f7fb fe3b 	bl	8003cc4 <_ZN8SPI_ConnC1Ev>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	3304      	adds	r3, #4
 8008052:	4618      	mov	r0, r3
 8008054:	f7fb fe46 	bl	8003ce4 <_ZN15PrintableSensorC1Ev>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	3340      	adds	r3, #64	; 0x40
 800805c:	4618      	mov	r0, r3
 800805e:	f7fb fe57 	bl	8003d10 <_ZN12CallsCounterC1Ev>
 8008062:	4a1f      	ldr	r2, [pc, #124]	; (80080e0 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef+0xa4>)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	601a      	str	r2, [r3, #0]
 8008068:	4a1e      	ldr	r2, [pc, #120]	; (80080e4 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef+0xa8>)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	605a      	str	r2, [r3, #4]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	683a      	ldr	r2, [r7, #0]
 8008072:	651a      	str	r2, [r3, #80]	; 0x50
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f04f 0200 	mov.w	r2, #0
 800809a:	659a      	str	r2, [r3, #88]	; 0x58
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f04f 0200 	mov.w	r2, #0
 80080a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f04f 0200 	mov.w	r2, #0
 80080aa:	661a      	str	r2, [r3, #96]	; 0x60
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f04f 0200 	mov.w	r2, #0
 80080b2:	665a      	str	r2, [r3, #100]	; 0x64
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
{
}
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	08016b18 	.word	0x08016b18
 80080e4:	08016b2c 	.word	0x08016b2c

080080e8 <_ZN9LIS3MDLTR6updateEv>:
{
	return SPI_read(LIS_WHO_AM_I);
}

void LIS3MDLTR::update()
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
	uint8_t x_high=SPI_read(OUT_X_H);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3304      	adds	r3, #4
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2129      	movs	r1, #41	; 0x29
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	4798      	blx	r3
 80080fe:	4603      	mov	r3, r0
 8008100:	73fb      	strb	r3, [r7, #15]
	uint8_t x_low=SPI_read(OUT_X_L);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3304      	adds	r3, #4
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2128      	movs	r1, #40	; 0x28
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	4798      	blx	r3
 8008110:	4603      	mov	r3, r0
 8008112:	73bb      	strb	r3, [r7, #14]
	uint8_t y_high=SPI_read(OUT_Y_H);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	3304      	adds	r3, #4
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	212b      	movs	r1, #43	; 0x2b
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	4798      	blx	r3
 8008122:	4603      	mov	r3, r0
 8008124:	737b      	strb	r3, [r7, #13]
	uint8_t y_low=SPI_read(OUT_Y_L);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3304      	adds	r3, #4
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	212a      	movs	r1, #42	; 0x2a
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	4798      	blx	r3
 8008134:	4603      	mov	r3, r0
 8008136:	733b      	strb	r3, [r7, #12]
	uint8_t z_high=SPI_read(OUT_Z_H);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3304      	adds	r3, #4
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	212d      	movs	r1, #45	; 0x2d
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	4798      	blx	r3
 8008146:	4603      	mov	r3, r0
 8008148:	72fb      	strb	r3, [r7, #11]
	uint8_t z_low=SPI_read(OUT_Z_L);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	3304      	adds	r3, #4
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	212c      	movs	r1, #44	; 0x2c
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	4798      	blx	r3
 8008158:	4603      	mov	r3, r0
 800815a:	72bb      	strb	r3, [r7, #10]
	uint8_t temp_high=SPI_read(TEMP_OUT_H);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3304      	adds	r3, #4
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	212f      	movs	r1, #47	; 0x2f
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	4798      	blx	r3
 800816a:	4603      	mov	r3, r0
 800816c:	727b      	strb	r3, [r7, #9]
	uint8_t temp_low=SPI_read(TEMP_OUT_L);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3304      	adds	r3, #4
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	212e      	movs	r1, #46	; 0x2e
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	4798      	blx	r3
 800817c:	4603      	mov	r3, r0
 800817e:	723b      	strb	r3, [r7, #8]

	x_raw = ((int16_t)x_high)<<8 | x_low;
 8008180:	7bfb      	ldrb	r3, [r7, #15]
 8008182:	021b      	lsls	r3, r3, #8
 8008184:	b21a      	sxth	r2, r3
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	b21b      	sxth	r3, r3
 800818a:	4313      	orrs	r3, r2
 800818c:	b21a      	sxth	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	y_raw = ((int16_t)y_high)<<8 | y_low;
 8008194:	7b7b      	ldrb	r3, [r7, #13]
 8008196:	021b      	lsls	r3, r3, #8
 8008198:	b21a      	sxth	r2, r3
 800819a:	7b3b      	ldrb	r3, [r7, #12]
 800819c:	b21b      	sxth	r3, r3
 800819e:	4313      	orrs	r3, r2
 80081a0:	b21a      	sxth	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	z_raw = ((int16_t)z_high)<<8 | z_low;
 80081a8:	7afb      	ldrb	r3, [r7, #11]
 80081aa:	021b      	lsls	r3, r3, #8
 80081ac:	b21a      	sxth	r2, r3
 80081ae:	7abb      	ldrb	r3, [r7, #10]
 80081b0:	b21b      	sxth	r3, r3
 80081b2:	4313      	orrs	r3, r2
 80081b4:	b21a      	sxth	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	TEMP_val = ((int16_t)temp_high)<<8 | temp_low;
 80081bc:	7a7b      	ldrb	r3, [r7, #9]
 80081be:	021b      	lsls	r3, r3, #8
 80081c0:	b21a      	sxth	r2, r3
 80081c2:	7a3b      	ldrb	r3, [r7, #8]
 80081c4:	b21b      	sxth	r3, r3
 80081c6:	4313      	orrs	r3, r2
 80081c8:	b21a      	sxth	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
 80081d0:	bf00      	nop
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* LIS3MDLTR::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 80081d8:	b590      	push	{r4, r7, lr}
 80081da:	b08d      	sub	sp, #52	; 0x34
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	3308      	adds	r3, #8
 80081e6:	2200      	movs	r2, #0
 80081e8:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_X)!=senorsList.end())
 80081ea:	2310      	movs	r3, #16
 80081ec:	613b      	str	r3, [r7, #16]
 80081ee:	f107 0310 	add.w	r3, r7, #16
 80081f2:	4619      	mov	r1, r3
 80081f4:	6838      	ldr	r0, [r7, #0]
 80081f6:	f7fc fd25 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80081fa:	4603      	mov	r3, r0
 80081fc:	60fb      	str	r3, [r7, #12]
 80081fe:	6838      	ldr	r0, [r7, #0]
 8008200:	f7fc fd39 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008204:	4603      	mov	r3, r0
 8008206:	617b      	str	r3, [r7, #20]
 8008208:	f107 0214 	add.w	r2, r7, #20
 800820c:	f107 030c 	add.w	r3, r7, #12
 8008210:	4611      	mov	r1, r2
 8008212:	4618      	mov	r0, r3
 8008214:	f7fc fd3c 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d01d      	beq.n	800825a <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x82>
	{
		strcat(packet,toCharArray(x_raw));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f103 0408 	add.w	r4, r3, #8
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	1d1a      	adds	r2, r3, #4
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 800822e:	4619      	mov	r1, r3
 8008230:	4610      	mov	r0, r2
 8008232:	f7fb fd15 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 8008236:	4603      	mov	r3, r0
 8008238:	4619      	mov	r1, r3
 800823a:	4620      	mov	r0, r4
 800823c:	f00e f9fe 	bl	801663c <strcat>
		strcat(packet,",");
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f103 0408 	add.w	r4, r3, #8
 8008246:	4620      	mov	r0, r4
 8008248:	f7f7 ffc2 	bl	80001d0 <strlen>
 800824c:	4603      	mov	r3, r0
 800824e:	4423      	add	r3, r4
 8008250:	493d      	ldr	r1, [pc, #244]	; (8008348 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 8008252:	461a      	mov	r2, r3
 8008254:	460b      	mov	r3, r1
 8008256:	881b      	ldrh	r3, [r3, #0]
 8008258:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_Y)!=senorsList.end())
 800825a:	2311      	movs	r3, #17
 800825c:	61fb      	str	r3, [r7, #28]
 800825e:	f107 031c 	add.w	r3, r7, #28
 8008262:	4619      	mov	r1, r3
 8008264:	6838      	ldr	r0, [r7, #0]
 8008266:	f7fc fced 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 800826a:	4603      	mov	r3, r0
 800826c:	61bb      	str	r3, [r7, #24]
 800826e:	6838      	ldr	r0, [r7, #0]
 8008270:	f7fc fd01 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008274:	4603      	mov	r3, r0
 8008276:	623b      	str	r3, [r7, #32]
 8008278:	f107 0220 	add.w	r2, r7, #32
 800827c:	f107 0318 	add.w	r3, r7, #24
 8008280:	4611      	mov	r1, r2
 8008282:	4618      	mov	r0, r3
 8008284:	f7fc fd04 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d01d      	beq.n	80082ca <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0xf2>
	{
		strcat(packet,toCharArray(y_raw));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f103 0408 	add.w	r4, r3, #8
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	1d1a      	adds	r2, r3, #4
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 800829e:	4619      	mov	r1, r3
 80082a0:	4610      	mov	r0, r2
 80082a2:	f7fb fcdd 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 80082a6:	4603      	mov	r3, r0
 80082a8:	4619      	mov	r1, r3
 80082aa:	4620      	mov	r0, r4
 80082ac:	f00e f9c6 	bl	801663c <strcat>
		strcat(packet,",");
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f103 0408 	add.w	r4, r3, #8
 80082b6:	4620      	mov	r0, r4
 80082b8:	f7f7 ff8a 	bl	80001d0 <strlen>
 80082bc:	4603      	mov	r3, r0
 80082be:	4423      	add	r3, r4
 80082c0:	4921      	ldr	r1, [pc, #132]	; (8008348 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 80082c2:	461a      	mov	r2, r3
 80082c4:	460b      	mov	r3, r1
 80082c6:	881b      	ldrh	r3, [r3, #0]
 80082c8:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_Z)!=senorsList.end())
 80082ca:	2312      	movs	r3, #18
 80082cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80082ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082d2:	4619      	mov	r1, r3
 80082d4:	6838      	ldr	r0, [r7, #0]
 80082d6:	f7fc fcb5 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80082da:	4603      	mov	r3, r0
 80082dc:	627b      	str	r3, [r7, #36]	; 0x24
 80082de:	6838      	ldr	r0, [r7, #0]
 80082e0:	f7fc fcc9 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80082e4:	4603      	mov	r3, r0
 80082e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082e8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80082ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082f0:	4611      	mov	r1, r2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fc fccc 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d01d      	beq.n	800833a <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x162>
	{
		strcat(packet,toCharArray(z_raw));
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f103 0408 	add.w	r4, r3, #8
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	1d1a      	adds	r2, r3, #4
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800830e:	4619      	mov	r1, r3
 8008310:	4610      	mov	r0, r2
 8008312:	f7fb fca5 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 8008316:	4603      	mov	r3, r0
 8008318:	4619      	mov	r1, r3
 800831a:	4620      	mov	r0, r4
 800831c:	f00e f98e 	bl	801663c <strcat>
		strcat(packet,",");
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f103 0408 	add.w	r4, r3, #8
 8008326:	4620      	mov	r0, r4
 8008328:	f7f7 ff52 	bl	80001d0 <strlen>
 800832c:	4603      	mov	r3, r0
 800832e:	4423      	add	r3, r4
 8008330:	4905      	ldr	r1, [pc, #20]	; (8008348 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 8008332:	461a      	mov	r2, r3
 8008334:	460b      	mov	r3, r1
 8008336:	881b      	ldrh	r3, [r3, #0]
 8008338:	8013      	strh	r3, [r2, #0]
	}


	return packet;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	3308      	adds	r3, #8
}
 800833e:	4618      	mov	r0, r3
 8008340:	3734      	adds	r7, #52	; 0x34
 8008342:	46bd      	mov	sp, r7
 8008344:	bd90      	pop	{r4, r7, pc}
 8008346:	bf00      	nop
 8008348:	0801680c 	.word	0x0801680c

0800834c <_ZThn4_N9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	void update();
	int16_t getX();
	int16_t getY();
	int16_t getZ();
	int16_t getTEMP();
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 800834c:	f1a0 0004 	sub.w	r0, r0, #4
 8008350:	f7ff bf42 	b.w	80081d8 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>

08008354 <_ZN9LIS3MDLTR11defaultInitEv>:

bool LIS3MDLTR::defaultInit()
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
	  this->SPI_write(CTRL_REG1,0b11111100);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	22fc      	movs	r2, #252	; 0xfc
 8008364:	2120      	movs	r1, #32
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	4798      	blx	r3
	  uint8_t ctrl1 = this->SPI_read(CTRL_REG1);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3304      	adds	r3, #4
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2120      	movs	r1, #32
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	4798      	blx	r3
 8008378:	4603      	mov	r3, r0
 800837a:	73fb      	strb	r3, [r7, #15]

	  SPI_write(CTRL_REG2,0b01100000);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2260      	movs	r2, #96	; 0x60
 8008384:	2121      	movs	r1, #33	; 0x21
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	4798      	blx	r3
	  uint8_t ctrl2 = SPI_read(CTRL_REG2);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3304      	adds	r3, #4
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2121      	movs	r1, #33	; 0x21
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	4798      	blx	r3
 8008398:	4603      	mov	r3, r0
 800839a:	73bb      	strb	r3, [r7, #14]

	  SPI_write(CTRL_REG3,0b00000000);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2200      	movs	r2, #0
 80083a4:	2122      	movs	r1, #34	; 0x22
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	4798      	blx	r3
	  uint8_t ctrl3 = SPI_read(CTRL_REG3);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	3304      	adds	r3, #4
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2122      	movs	r1, #34	; 0x22
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	4798      	blx	r3
 80083b8:	4603      	mov	r3, r0
 80083ba:	737b      	strb	r3, [r7, #13]

	  SPI_write(CTRL_REG4,0b00001100);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	220c      	movs	r2, #12
 80083c4:	2123      	movs	r1, #35	; 0x23
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	4798      	blx	r3
	  uint8_t ctrl4 = SPI_read(CTRL_REG4);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3304      	adds	r3, #4
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2123      	movs	r1, #35	; 0x23
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	4798      	blx	r3
 80083d8:	4603      	mov	r3, r0
 80083da:	733b      	strb	r3, [r7, #12]

	  SPI_write(CTRL_REG5,0b00000000);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2200      	movs	r2, #0
 80083e4:	2124      	movs	r1, #36	; 0x24
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	4798      	blx	r3
	  uint8_t ctrl5 = SPI_read(CTRL_REG5);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	3304      	adds	r3, #4
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2124      	movs	r1, #36	; 0x24
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	4798      	blx	r3
 80083f8:	4603      	mov	r3, r0
 80083fa:	72fb      	strb	r3, [r7, #11]
		return false;

	if (!initAndCheck(CTRL_REG5,0b00000000,10))
		return false;*/

	return true;
 80083fc:	2301      	movs	r3, #1
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
	...

08008408 <_ZN9LIS3MDLTR9SPI_writeEhh>:
	}
	return false;
}

void LIS3MDLTR::SPI_write(uint8_t reg,uint8_t data)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	460b      	mov	r3, r1
 8008412:	70fb      	strb	r3, [r7, #3]
 8008414:	4613      	mov	r3, r2
 8008416:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(LIS_CS_PORT,LIS_CS_PIN,GPIO_PIN_RESET);
 8008418:	2200      	movs	r2, #0
 800841a:	2120      	movs	r1, #32
 800841c:	480f      	ldr	r0, [pc, #60]	; (800845c <_ZN9LIS3MDLTR9SPI_writeEhh+0x54>)
 800841e:	f002 fced 	bl	800adfc <HAL_GPIO_WritePin>
	spiTxBuff[0] = reg & 0x7f;
 8008422:	78fb      	ldrb	r3, [r7, #3]
 8008424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008428:	b2da      	uxtb	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	spiTxBuff[1] = data;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	78ba      	ldrb	r2, [r7, #2]
 8008434:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	3354      	adds	r3, #84	; 0x54
 8008440:	2202      	movs	r2, #2
 8008442:	4619      	mov	r1, r3
 8008444:	f005 f884 	bl	800d550 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(LIS_CS_PORT,LIS_CS_PIN,GPIO_PIN_SET);
 8008448:	2201      	movs	r2, #1
 800844a:	2120      	movs	r1, #32
 800844c:	4803      	ldr	r0, [pc, #12]	; (800845c <_ZN9LIS3MDLTR9SPI_writeEhh+0x54>)
 800844e:	f002 fcd5 	bl	800adfc <HAL_GPIO_WritePin>
}
 8008452:	bf00      	nop
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	40020000 	.word	0x40020000

08008460 <_ZN9LIS3MDLTR8SPI_readEh>:

uint8_t LIS3MDLTR::SPI_read(uint8_t reg)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(LIS_CS_PORT, LIS_CS_PIN, GPIO_PIN_RESET);
 800846c:	2200      	movs	r2, #0
 800846e:	2120      	movs	r1, #32
 8008470:	4812      	ldr	r0, [pc, #72]	; (80084bc <_ZN9LIS3MDLTR8SPI_readEh+0x5c>)
 8008472:	f002 fcc3 	bl	800adfc <HAL_GPIO_WritePin>
	spiTxBuff[0]=(reg & 0x3f)|0x80|0x40;
 8008476:	78fb      	ldrb	r3, [r7, #3]
 8008478:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800847c:	b2da      	uxtb	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff, 1);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3354      	adds	r3, #84	; 0x54
 800848c:	2201      	movs	r2, #1
 800848e:	4619      	mov	r1, r3
 8008490:	f005 f85e 	bl	800d550 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(spi_port, (uint8_t*)spiRxBuff, 1);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	3356      	adds	r3, #86	; 0x56
 800849c:	2201      	movs	r2, #1
 800849e:	4619      	mov	r1, r3
 80084a0:	f005 f90c 	bl	800d6bc <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(LIS_CS_PORT, LIS_CS_PIN, GPIO_PIN_SET);
 80084a4:	2201      	movs	r2, #1
 80084a6:	2120      	movs	r1, #32
 80084a8:	4804      	ldr	r0, [pc, #16]	; (80084bc <_ZN9LIS3MDLTR8SPI_readEh+0x5c>)
 80084aa:	f002 fca7 	bl	800adfc <HAL_GPIO_WritePin>

	return spiRxBuff[0];
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	40020000 	.word	0x40020000

080084c0 <_ZN7Timeout19resetTimeoutCounterEv>:
	void resetTimeoutCounter()
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
		timeout_counter=0;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	705a      	strb	r2, [r3, #1]
	}
 80084ce:	bf00      	nop
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
	...

080084dc <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>:
 */

#include "MB1043.hpp"
#include <stdlib.h>

MB1043::MB1043(
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
 80084e8:	70fb      	strb	r3, [r7, #3]
	uart_port {uart_port}
	,uart_port_dma {uart_port_dma}
	,wrongDataReceived {false}
	,rx_buff {}
	,distance_str {}
	,distance {}
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	3336      	adds	r3, #54	; 0x36
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fc ff41 	bl	8005376 <_ZN7TimeoutC1Ev>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fb fbf4 	bl	8003ce4 <_ZN15PrintableSensorC1Ev>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3340      	adds	r3, #64	; 0x40
 8008500:	4618      	mov	r0, r3
 8008502:	f7fb fc05 	bl	8003d10 <_ZN12CallsCounterC1Ev>
 8008506:	4a17      	ldr	r2, [pc, #92]	; (8008564 <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh+0x88>)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	601a      	str	r2, [r3, #0]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2252      	movs	r2, #82	; 0x52
 8008510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	220d      	movs	r2, #13
 8008518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	655a      	str	r2, [r3, #84]	; 0x54
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	659a      	str	r2, [r3, #88]	; 0x58
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	335d      	adds	r3, #93	; 0x5d
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]
 8008538:	605a      	str	r2, [r3, #4]
 800853a:	609a      	str	r2, [r3, #8]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	3369      	adds	r3, #105	; 0x69
 8008540:	2200      	movs	r2, #0
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
{
	setTimeoutValue(timeout);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	3336      	adds	r3, #54	; 0x36
 8008550:	78fa      	ldrb	r2, [r7, #3]
 8008552:	4611      	mov	r1, r2
 8008554:	4618      	mov	r0, r3
 8008556:	f7fc feff 	bl	8005358 <_ZN7Timeout15setTimeoutValueEh>
}
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	08016b38 	.word	0x08016b38

08008568 <_ZN6MB10435beginEv>:

void MB1043::begin()
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	335d      	adds	r3, #93	; 0x5d
 8008578:	2206      	movs	r2, #6
 800857a:	4619      	mov	r1, r3
 800857c:	f006 fe20 	bl	800f1c0 <HAL_UART_Receive_DMA>
}
 8008580:	bf00      	nop
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <_ZN6MB10436updateEv>:

void MB1043::update()
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->rx_buff[0] == this->BEGIN_BIT) && (this->rx_buff[5]==this->END_BIT);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800859c:	429a      	cmp	r2, r3
 800859e:	d109      	bne.n	80085b4 <_ZN6MB10436updateEv+0x2c>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d101      	bne.n	80085b4 <_ZN6MB10436updateEv+0x2c>
 80085b0:	2301      	movs	r3, #1
 80085b2:	e000      	b.n	80085b6 <_ZN6MB10436updateEv+0x2e>
 80085b4:	2300      	movs	r3, #0
 80085b6:	73bb      	strb	r3, [r7, #14]

	if (isPacketOk)
 80085b8:	7bbb      	ldrb	r3, [r7, #14]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d027      	beq.n	800860e <_ZN6MB10436updateEv+0x86>
	{
		distance_str[0]=rx_buff[1];
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		distance_str[1]=rx_buff[2],
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 205f 	ldrb.w	r2, [r3, #95]	; 0x5f
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		distance_str[2]=rx_buff[3],
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
		distance_str[3]=rx_buff[4];
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

		distance = atoi(distance_str);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	3369      	adds	r3, #105	; 0x69
 80085f2:	4618      	mov	r0, r3
 80085f4:	f00d fe80 	bl	80162f8 <atoi>
 80085f8:	4603      	mov	r3, r0
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

		resetTimeoutCounter();
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	3336      	adds	r3, #54	; 0x36
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff ff5a 	bl	80084c0 <_ZN7Timeout19resetTimeoutCounterEv>
 800860c:	e033      	b.n	8008676 <_ZN6MB10436updateEv+0xee>
	}
	else if (this->wrongDataReceived==false)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008614:	2b00      	cmp	r3, #0
 8008616:	d12e      	bne.n	8008676 <_ZN6MB10436updateEv+0xee>
	{
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 8008618:	2300      	movs	r3, #0
 800861a:	73fb      	strb	r3, [r7, #15]
 800861c:	7bfb      	ldrb	r3, [r7, #15]
 800861e:	2b04      	cmp	r3, #4
 8008620:	d829      	bhi.n	8008676 <_ZN6MB10436updateEv+0xee>
		{
			if ((this->rx_buff[iter]==this->END_BIT) && (this->rx_buff[iter+1U]==this->BEGIN_BIT))
 8008622:	7bfb      	ldrb	r3, [r7, #15]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	4413      	add	r3, r2
 8008628:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008632:	429a      	cmp	r2, r3
 8008634:	d11b      	bne.n	800866e <_ZN6MB10436updateEv+0xe6>
 8008636:	7bfb      	ldrb	r3, [r7, #15]
 8008638:	3301      	adds	r3, #1
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	4413      	add	r3, r2
 800863e:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008648:	429a      	cmp	r2, r3
 800864a:	d110      	bne.n	800866e <_ZN6MB10436updateEv+0xe6>
			{
				HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length+iter+1);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f103 015d 	add.w	r1, r3, #93	; 0x5d
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	b29b      	uxth	r3, r3
 800865a:	3307      	adds	r3, #7
 800865c:	b29b      	uxth	r3, r3
 800865e:	461a      	mov	r2, r3
 8008660:	f006 fdae 	bl	800f1c0 <HAL_UART_Receive_DMA>
				this->wrongDataReceived = true;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				return;
 800866c:	e01e      	b.n	80086ac <_ZN6MB10436updateEv+0x124>
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	3301      	adds	r3, #1
 8008672:	73fb      	strb	r3, [r7, #15]
 8008674:	e7d2      	b.n	800861c <_ZN6MB10436updateEv+0x94>
			}
		}
	}

	if (this->wrongDataReceived == true)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800867c:	2b01      	cmp	r3, #1
 800867e:	d103      	bne.n	8008688 <_ZN6MB10436updateEv+0x100>
		this->wrongDataReceived = false;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	335d      	adds	r3, #93	; 0x5d
 8008690:	2206      	movs	r2, #6
 8008692:	4619      	mov	r1, r3
 8008694:	f006 fd94 	bl	800f1c0 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->uart_port_dma, DMA_IT_HT);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f022 0208 	bic.w	r2, r2, #8
 80086aa:	601a      	str	r2, [r3, #0]
}
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
	...

080086b4 <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* MB1043::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 80086b4:	b590      	push	{r4, r7, lr}
 80086b6:	b087      	sub	sp, #28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	3304      	adds	r3, #4
 80086c2:	2200      	movs	r2, #0
 80086c4:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::SONAR_DISTANCE)!=senorsList.end())
 80086c6:	2313      	movs	r3, #19
 80086c8:	613b      	str	r3, [r7, #16]
 80086ca:	f107 0310 	add.w	r3, r7, #16
 80086ce:	4619      	mov	r1, r3
 80086d0:	6838      	ldr	r0, [r7, #0]
 80086d2:	f7fc fab7 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80086d6:	4603      	mov	r3, r0
 80086d8:	60fb      	str	r3, [r7, #12]
 80086da:	6838      	ldr	r0, [r7, #0]
 80086dc:	f7fc facb 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80086e0:	4603      	mov	r3, r0
 80086e2:	617b      	str	r3, [r7, #20]
 80086e4:	f107 0214 	add.w	r2, r7, #20
 80086e8:	f107 030c 	add.w	r3, r7, #12
 80086ec:	4611      	mov	r1, r2
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fc face 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d01a      	beq.n	8008730 <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x7c>
	{
		strcat(packet,toCharArray(distance));
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	1d1c      	adds	r4, r3, #4
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8008706:	4619      	mov	r1, r3
 8008708:	4610      	mov	r0, r2
 800870a:	f7fb faa9 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 800870e:	4603      	mov	r3, r0
 8008710:	4619      	mov	r1, r3
 8008712:	4620      	mov	r0, r4
 8008714:	f00d ff92 	bl	801663c <strcat>
		strcat(packet,",");
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	1d1c      	adds	r4, r3, #4
 800871c:	4620      	mov	r0, r4
 800871e:	f7f7 fd57 	bl	80001d0 <strlen>
 8008722:	4603      	mov	r3, r0
 8008724:	4423      	add	r3, r4
 8008726:	4905      	ldr	r1, [pc, #20]	; (800873c <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x88>)
 8008728:	461a      	mov	r2, r3
 800872a:	460b      	mov	r3, r1
 800872c:	881b      	ldrh	r3, [r3, #0]
 800872e:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	3304      	adds	r3, #4
}
 8008734:	4618      	mov	r0, r3
 8008736:	371c      	adds	r7, #28
 8008738:	46bd      	mov	sp, r7
 800873a:	bd90      	pop	{r4, r7, pc}
 800873c:	08016810 	.word	0x08016810

08008740 <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688PR7VL53L0XR11PID_ControlS9_>:
 *      Author: Asus
 */

#include "PMW3901UY.hpp"

PMW3901UY::PMW3901UY(
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
 800874c:	70fb      	strb	r3, [r7, #3]
	,x_cm_pos {0}
	,y_cm_pos {0}
	,target_x {0}
	,target_y {0}
	,lastAngleX {0}
	,lastAngleY {0}
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3336      	adds	r3, #54	; 0x36
 8008752:	4618      	mov	r0, r3
 8008754:	f7fc fe0f 	bl	8005376 <_ZN7TimeoutC1Ev>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	4618      	mov	r0, r3
 800875c:	f7fb fac2 	bl	8003ce4 <_ZN15PrintableSensorC1Ev>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	3340      	adds	r3, #64	; 0x40
 8008764:	4618      	mov	r0, r3
 8008766:	f7fb fad3 	bl	8003d10 <_ZN12CallsCounterC1Ev>
 800876a:	4a36      	ldr	r2, [pc, #216]	; (8008844 <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688PR7VL53L0XR11PID_ControlS9_+0x104>)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	601a      	str	r2, [r3, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	22fe      	movs	r2, #254	; 0xfe
 8008774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2204      	movs	r2, #4
 800877c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	22aa      	movs	r2, #170	; 0xaa
 8008784:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	655a      	str	r2, [r3, #84]	; 0x54
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	659a      	str	r2, [r3, #88]	; 0x58
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	69ba      	ldr	r2, [r7, #24]
 8008798:	65da      	str	r2, [r3, #92]	; 0x5c
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	69fa      	ldr	r2, [r7, #28]
 800879e:	661a      	str	r2, [r3, #96]	; 0x60
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6a3a      	ldr	r2, [r7, #32]
 80087a4:	665a      	str	r2, [r3, #100]	; 0x64
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087aa:	669a      	str	r2, [r3, #104]	; 0x68
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	336c      	adds	r3, #108	; 0x6c
 80087b0:	2200      	movs	r2, #0
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	605a      	str	r2, [r3, #4]
 80087b6:	609a      	str	r2, [r3, #8]
 80087b8:	60da      	str	r2, [r3, #12]
 80087ba:	821a      	strh	r2, [r3, #16]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f04f 0200 	mov.w	r2, #0
 80087e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f04f 0200 	mov.w	r2, #0
 80087ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f04f 0200 	mov.w	r2, #0
 80087f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f04f 0200 	mov.w	r2, #0
 8008800:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f04f 0200 	mov.w	r2, #0
 800880a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f04f 0200 	mov.w	r2, #0
 8008814:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f04f 0200 	mov.w	r2, #0
 800881e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f04f 0200 	mov.w	r2, #0
 8008828:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
{
	setTimeoutValue(timeout);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	3336      	adds	r3, #54	; 0x36
 8008830:	78fa      	ldrb	r2, [r7, #3]
 8008832:	4611      	mov	r1, r2
 8008834:	4618      	mov	r0, r3
 8008836:	f7fc fd8f 	bl	8005358 <_ZN7Timeout15setTimeoutValueEh>
}
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	4618      	mov	r0, r3
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	08016b44 	.word	0x08016b44

08008848 <_ZN9PMW3901UY5beginEv>:

void PMW3901UY::begin()
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (uart_port, rx_buff, packet_length);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	336c      	adds	r3, #108	; 0x6c
 8008858:	2209      	movs	r2, #9
 800885a:	4619      	mov	r1, r3
 800885c:	f006 fcb0 	bl	800f1c0 <HAL_UART_Receive_DMA>
}
 8008860:	bf00      	nop
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <_ZN9PMW3901UY6updateEv>:

void PMW3901UY::update()
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->rx_buff[0]==this->BEGIN_BIT && this->rx_buff[1]==this->DATA_LEN_BIT && this->rx_buff[8]==this->END_BIT);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800887c:	429a      	cmp	r2, r3
 800887e:	d111      	bne.n	80088a4 <_ZN9PMW3901UY6updateEv+0x3c>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 206d 	ldrb.w	r2, [r3, #109]	; 0x6d
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800888c:	429a      	cmp	r2, r3
 800888e:	d109      	bne.n	80088a4 <_ZN9PMW3901UY6updateEv+0x3c>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800889c:	429a      	cmp	r2, r3
 800889e:	d101      	bne.n	80088a4 <_ZN9PMW3901UY6updateEv+0x3c>
 80088a0:	2301      	movs	r3, #1
 80088a2:	e000      	b.n	80088a6 <_ZN9PMW3901UY6updateEv+0x3e>
 80088a4:	2300      	movs	r3, #0
 80088a6:	73bb      	strb	r3, [r7, #14]

	if(isPacketOk)
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d052      	beq.n	8008954 <_ZN9PMW3901UY6updateEv+0xec>
	{
		this->flow_x = (int16_t)(this->rx_buff[3]<<8 | this->rx_buff[2]);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80088b4:	021b      	lsls	r3, r3, #8
 80088b6:	b21a      	sxth	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80088be:	b21b      	sxth	r3, r3
 80088c0:	4313      	orrs	r3, r2
 80088c2:	b21a      	sxth	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		this->flow_y = (int16_t)(this->rx_buff[5]<<8 | this->rx_buff[4]);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80088d0:	021b      	lsls	r3, r3, #8
 80088d2:	b21a      	sxth	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80088da:	b21b      	sxth	r3, r3
 80088dc:	4313      	orrs	r3, r2
 80088de:	b21a      	sxth	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		this->quality = this->rx_buff[7];
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

		this->x_pos += this->flow_x;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 80088fe:	ee07 3a90 	vmov	s15, r3
 8008902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		this->y_pos += this->flow_y;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 800891c:	ee07 3a90 	vmov	s15, r3
 8008920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		this->process();
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f862 	bl	80089f8 <_ZN9PMW3901UY7processEv>

		this->_pidX.update();
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008938:	4618      	mov	r0, r3
 800893a:	f000 f9ed 	bl	8008d18 <_ZN11PID_Control6updateEv>
		this->_pidY.update();
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008942:	4618      	mov	r0, r3
 8008944:	f000 f9e8 	bl	8008d18 <_ZN11PID_Control6updateEv>

		this->resetTimeoutCounter();
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	3336      	adds	r3, #54	; 0x36
 800894c:	4618      	mov	r0, r3
 800894e:	f7ff fdb7 	bl	80084c0 <_ZN7Timeout19resetTimeoutCounterEv>
 8008952:	e033      	b.n	80089bc <_ZN9PMW3901UY6updateEv+0x154>
	}
	else if (this->wrongDataReceived==false)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800895a:	2b00      	cmp	r3, #0
 800895c:	d12e      	bne.n	80089bc <_ZN9PMW3901UY6updateEv+0x154>
	{
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 800895e:	2300      	movs	r3, #0
 8008960:	73fb      	strb	r3, [r7, #15]
 8008962:	7bfb      	ldrb	r3, [r7, #15]
 8008964:	2b07      	cmp	r3, #7
 8008966:	d829      	bhi.n	80089bc <_ZN9PMW3901UY6updateEv+0x154>
		{
			if ((this->rx_buff[iter]==this->END_BIT) && (this->rx_buff[iter+1U]==this->BEGIN_BIT))
 8008968:	7bfb      	ldrb	r3, [r7, #15]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	4413      	add	r3, r2
 800896e:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008978:	429a      	cmp	r2, r3
 800897a:	d11b      	bne.n	80089b4 <_ZN9PMW3901UY6updateEv+0x14c>
 800897c:	7bfb      	ldrb	r3, [r7, #15]
 800897e:	3301      	adds	r3, #1
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	4413      	add	r3, r2
 8008984:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800898e:	429a      	cmp	r2, r3
 8008990:	d110      	bne.n	80089b4 <_ZN9PMW3901UY6updateEv+0x14c>
			{
				HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length+iter+1);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 800899c:	7bfb      	ldrb	r3, [r7, #15]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	330a      	adds	r3, #10
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	461a      	mov	r2, r3
 80089a6:	f006 fc0b 	bl	800f1c0 <HAL_UART_Receive_DMA>
				this->wrongDataReceived = true;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
				return;
 80089b2:	e01e      	b.n	80089f2 <_ZN9PMW3901UY6updateEv+0x18a>
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	3301      	adds	r3, #1
 80089b8:	73fb      	strb	r3, [r7, #15]
 80089ba:	e7d2      	b.n	8008962 <_ZN9PMW3901UY6updateEv+0xfa>
			}
		}
	}

	if (this->wrongDataReceived == true)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d103      	bne.n	80089ce <_ZN9PMW3901UY6updateEv+0x166>
		this->wrongDataReceived = false;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	336c      	adds	r3, #108	; 0x6c
 80089d6:	2209      	movs	r2, #9
 80089d8:	4619      	mov	r1, r3
 80089da:	f006 fbf1 	bl	800f1c0 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->uart_port_dma, DMA_IT_HT);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f022 0208 	bic.w	r2, r2, #8
 80089f0:	601a      	str	r2, [r3, #0]
}
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <_ZN9PMW3901UY7processEv>:

void PMW3901UY::process()
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
	float cpi = (this->_vl53.getAltitudeM() / 11.914F) * 2.54F;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 fc61 	bl	80092cc <_ZN7VL53L0X12getAltitudeMEv>
 8008a0a:	eeb0 7a40 	vmov.f32	s14, s0
 8008a0e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008aa0 <_ZN9PMW3901UY7processEv+0xa8>
 8008a12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008a16:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8008aa4 <_ZN9PMW3901UY7processEv+0xac>
 8008a1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a1e:	edc7 7a03 	vstr	s15, [r7, #12]
	this->x_cm_pos = this->x_cm_pos + static_cast<float>(this->flow_x)*cpi;// - this->lastAngleY * cpi * 10.0F;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8008a2e:	ee07 3a90 	vmov	s15, r3
 8008a32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008a36:	edd7 7a03 	vldr	s15, [r7, #12]
 8008a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	this->y_cm_pos = this->y_cm_pos + static_cast<float>(this->flow_y)*cpi;// - this->lastAngleX * cpi * 10.0F;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8008a54:	ee07 3a90 	vmov	s15, r3
 8008a58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008a5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

	lastAngleX = this->_icm.getEulerX();
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7ff fa46 	bl	8007f04 <_ZN9ICM42688P9getEulerXEv>
 8008a78:	eef0 7a40 	vmov.f32	s15, s0
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	lastAngleY = this->_icm.getEulerY();
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7ff fa58 	bl	8007f3c <_ZN9ICM42688P9getEulerYEv>
 8008a8c:	eef0 7a40 	vmov.f32	s15, s0
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
}
 8008a96:	bf00      	nop
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	413e9fbe 	.word	0x413e9fbe
 8008aa4:	40228f5c 	.word	0x40228f5c

08008aa8 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* PMW3901UY::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8008aa8:	b590      	push	{r4, r7, lr}
 8008aaa:	b093      	sub	sp, #76	; 0x4c
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_POS_X)!=senorsList.end())
 8008aba:	2315      	movs	r3, #21
 8008abc:	613b      	str	r3, [r7, #16]
 8008abe:	f107 0310 	add.w	r3, r7, #16
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	6838      	ldr	r0, [r7, #0]
 8008ac6:	f7fc f8bd 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008aca:	4603      	mov	r3, r0
 8008acc:	60fb      	str	r3, [r7, #12]
 8008ace:	6838      	ldr	r0, [r7, #0]
 8008ad0:	f7fc f8d1 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	617b      	str	r3, [r7, #20]
 8008ad8:	f107 0214 	add.w	r2, r7, #20
 8008adc:	f107 030c 	add.w	r3, r7, #12
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fc f8d4 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d01d      	beq.n	8008b2a <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x82>
	{
		strcat(packet,toCharArray(x_cm_pos));
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	1d1c      	adds	r4, r3, #4
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8008afa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008afe:	ee17 1a90 	vmov	r1, s15
 8008b02:	4610      	mov	r0, r2
 8008b04:	f7fb f8ac 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f00d fd95 	bl	801663c <strcat>
		strcat(packet,",");
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	1d1c      	adds	r4, r3, #4
 8008b16:	4620      	mov	r0, r4
 8008b18:	f7f7 fb5a 	bl	80001d0 <strlen>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	4423      	add	r3, r4
 8008b20:	4970      	ldr	r1, [pc, #448]	; (8008ce4 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x23c>)
 8008b22:	461a      	mov	r2, r3
 8008b24:	460b      	mov	r3, r1
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_POS_Y)!=senorsList.end())
 8008b2a:	2316      	movs	r3, #22
 8008b2c:	61fb      	str	r3, [r7, #28]
 8008b2e:	f107 031c 	add.w	r3, r7, #28
 8008b32:	4619      	mov	r1, r3
 8008b34:	6838      	ldr	r0, [r7, #0]
 8008b36:	f7fc f885 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	61bb      	str	r3, [r7, #24]
 8008b3e:	6838      	ldr	r0, [r7, #0]
 8008b40:	f7fc f899 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008b44:	4603      	mov	r3, r0
 8008b46:	623b      	str	r3, [r7, #32]
 8008b48:	f107 0220 	add.w	r2, r7, #32
 8008b4c:	f107 0318 	add.w	r3, r7, #24
 8008b50:	4611      	mov	r1, r2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fc f89c 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d01d      	beq.n	8008b9a <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0xf2>
	{
		strcat(packet,toCharArray(y_cm_pos));
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	1d1c      	adds	r4, r3, #4
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8008b6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b6e:	ee17 1a90 	vmov	r1, s15
 8008b72:	4610      	mov	r0, r2
 8008b74:	f7fb f874 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f00d fd5d 	bl	801663c <strcat>
		strcat(packet,",");
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	1d1c      	adds	r4, r3, #4
 8008b86:	4620      	mov	r0, r4
 8008b88:	f7f7 fb22 	bl	80001d0 <strlen>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	4423      	add	r3, r4
 8008b90:	4954      	ldr	r1, [pc, #336]	; (8008ce4 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x23c>)
 8008b92:	461a      	mov	r2, r3
 8008b94:	460b      	mov	r3, r1
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_FLOW_X)!=senorsList.end())
 8008b9a:	2317      	movs	r3, #23
 8008b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	6838      	ldr	r0, [r7, #0]
 8008ba6:	f7fc f84d 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008baa:	4603      	mov	r3, r0
 8008bac:	627b      	str	r3, [r7, #36]	; 0x24
 8008bae:	6838      	ldr	r0, [r7, #0]
 8008bb0:	f7fc f861 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bb8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fc f864 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d01a      	beq.n	8008c04 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x15c>
	{
		strcat(packet,toCharArray(flow_x));
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	1d1c      	adds	r4, r3, #4
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8008bda:	4619      	mov	r1, r3
 8008bdc:	4610      	mov	r0, r2
 8008bde:	f7fb f83f 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 8008be2:	4603      	mov	r3, r0
 8008be4:	4619      	mov	r1, r3
 8008be6:	4620      	mov	r0, r4
 8008be8:	f00d fd28 	bl	801663c <strcat>
		strcat(packet,",");
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	1d1c      	adds	r4, r3, #4
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f7f7 faed 	bl	80001d0 <strlen>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	4423      	add	r3, r4
 8008bfa:	493a      	ldr	r1, [pc, #232]	; (8008ce4 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x23c>)
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	460b      	mov	r3, r1
 8008c00:	881b      	ldrh	r3, [r3, #0]
 8008c02:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_FLOW_Y)!=senorsList.end())
 8008c04:	2318      	movs	r3, #24
 8008c06:	637b      	str	r3, [r7, #52]	; 0x34
 8008c08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6838      	ldr	r0, [r7, #0]
 8008c10:	f7fc f818 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008c14:	4603      	mov	r3, r0
 8008c16:	633b      	str	r3, [r7, #48]	; 0x30
 8008c18:	6838      	ldr	r0, [r7, #0]
 8008c1a:	f7fc f82c 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c22:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008c26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7fc f82f 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d01a      	beq.n	8008c6e <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1c6>
	{
		strcat(packet,toCharArray(flow_y));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	1d1c      	adds	r4, r3, #4
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8008c44:	4619      	mov	r1, r3
 8008c46:	4610      	mov	r0, r2
 8008c48:	f7fb f80a 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	4619      	mov	r1, r3
 8008c50:	4620      	mov	r0, r4
 8008c52:	f00d fcf3 	bl	801663c <strcat>
		strcat(packet,",");
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	1d1c      	adds	r4, r3, #4
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f7f7 fab8 	bl	80001d0 <strlen>
 8008c60:	4603      	mov	r3, r0
 8008c62:	4423      	add	r3, r4
 8008c64:	491f      	ldr	r1, [pc, #124]	; (8008ce4 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x23c>)
 8008c66:	461a      	mov	r2, r3
 8008c68:	460b      	mov	r3, r1
 8008c6a:	881b      	ldrh	r3, [r3, #0]
 8008c6c:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_QUALITY)!=senorsList.end())
 8008c6e:	2319      	movs	r3, #25
 8008c70:	643b      	str	r3, [r7, #64]	; 0x40
 8008c72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008c76:	4619      	mov	r1, r3
 8008c78:	6838      	ldr	r0, [r7, #0]
 8008c7a:	f7fb ffe3 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c82:	6838      	ldr	r0, [r7, #0]
 8008c84:	f7fb fff7 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8008c8c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008c90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008c94:	4611      	mov	r1, r2
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fb fffa 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d01a      	beq.n	8008cd8 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x230>
	{
		strcat(packet,toCharArray(quality));
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	1d1c      	adds	r4, r3, #4
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008cae:	4619      	mov	r1, r3
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	f7fa ffd5 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f00d fcbe 	bl	801663c <strcat>
		strcat(packet,",");
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	1d1c      	adds	r4, r3, #4
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f7f7 fa83 	bl	80001d0 <strlen>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	4423      	add	r3, r4
 8008cce:	4905      	ldr	r1, [pc, #20]	; (8008ce4 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x23c>)
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	3304      	adds	r3, #4
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	374c      	adds	r7, #76	; 0x4c
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd90      	pop	{r4, r7, pc}
 8008ce4:	08016814 	.word	0x08016814

08008ce8 <_ZN9PMW3901UY7getXposEv>:
{
	return quality;
}

float& PMW3901UY::getXpos()
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
	return x_cm_pos;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	3390      	adds	r3, #144	; 0x90
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <_ZN9PMW3901UY7getYposEv>:

float& PMW3901UY::getYpos()
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
	return y_cm_pos;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3394      	adds	r3, #148	; 0x94
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <_ZN11PID_Control6updateEv>:
 */

#include "PID_Control.hpp"

void PID_Control::update()
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
	this->error = this->reference - this->signal;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	ed93 7a00 	vldr	s14, [r3]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	edd3 7a00 	vldr	s15, [r3]
 8008d30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	edc3 7a05 	vstr	s15, [r3, #20]

	this->pid_p = this->error;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	695a      	ldr	r2, [r3, #20]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	61da      	str	r2, [r3, #28]
	this->pid_i = this->pid_i + this->error;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	ed93 7a08 	vldr	s14, [r3, #32]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	edd3 7a05 	vldr	s15, [r3, #20]
 8008d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	edc3 7a08 	vstr	s15, [r3, #32]
	this->pid_d = -(this->signal-this->last_signal);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	ed93 7a00 	vldr	s14, [r3]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	edd3 7a06 	vldr	s15, [r3, #24]
 8008d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d6a:	eef1 7a67 	vneg.f32	s15, s15
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	this->last_signal = this->signal;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	619a      	str	r2, [r3, #24]

	this->pid =  this->Kp * this->pid_p + this->Ki * this->pid_i + this->Kd * this->pid_d;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	ed93 7a02 	vldr	s14, [r3, #8]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	edd3 7a07 	vldr	s15, [r3, #28]
 8008d8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	edd3 6a03 	vldr	s13, [r3, #12]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	edd3 7a08 	vldr	s15, [r3, #32]
 8008d9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008d9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	edd3 6a04 	vldr	s13, [r3, #16]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008dae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <_ZN11PID_Control6getOutEv>:

float PID_Control::getOut()
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
	return this->pid;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd4:	ee07 3a90 	vmov	s15, r3
}
 8008dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <_ZSt17__size_to_integeri>:
      std::__fill_a(__first, __last, __value);
    }

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
 8008de6:	b480      	push	{r7}
 8008de8:	b083      	sub	sp, #12
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4618      	mov	r0, r3
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <_ZN14MPC_ControllerC1Ev>:
};

class MPC_Controller
{
public:
	MPC_Controller()
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
	{
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f04f 0200 	mov.w	r2, #0
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f04f 0200 	mov.w	r2, #0
 8008e12:	605a      	str	r2, [r3, #4]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f04f 0200 	mov.w	r2, #0
 8008e1a:	609a      	str	r2, [r3, #8]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f04f 0200 	mov.w	r2, #0
 8008e22:	60da      	str	r2, [r3, #12]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f04f 0200 	mov.w	r2, #0
 8008e2a:	611a      	str	r2, [r3, #16]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f04f 0200 	mov.w	r2, #0
 8008e32:	615a      	str	r2, [r3, #20]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f04f 0200 	mov.w	r2, #0
 8008e3a:	619a      	str	r2, [r3, #24]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008e42:	61da      	str	r2, [r3, #28]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a31      	ldr	r2, [pc, #196]	; (8008f0c <_ZN14MPC_ControllerC1Ev+0x110>)
 8008e48:	621a      	str	r2, [r3, #32]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a30      	ldr	r2, [pc, #192]	; (8008f10 <_ZN14MPC_ControllerC1Ev+0x114>)
 8008e4e:	3354      	adds	r3, #84	; 0x54
 8008e50:	4611      	mov	r1, r2
 8008e52:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8008e56:	4618      	mov	r0, r3
 8008e58:	f00d fa8c 	bl	8016374 <memcpy>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008e62:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008e66:	2100      	movs	r1, #0
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f00d faab 	bl	80163c4 <memset>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8008e74:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008e78:	2100      	movs	r1, #0
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f00d faa2 	bl	80163c4 <memset>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8008e86:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f00d fa99 	bl	80163c4 <memset>
		arm_mat_init_f32(&ft, 1, 100, (float32_t *)ft_data);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008e9e:	2264      	movs	r2, #100	; 0x64
 8008ea0:	2101      	movs	r1, #1
 8008ea2:	f00c f821 	bl	8014ee8 <arm_mat_init_f32>
		arm_mat_init_f32(&ft_t, 100, 1, (float32_t *)ft_t_data);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	2164      	movs	r1, #100	; 0x64
 8008eb6:	f00c f817 	bl	8014ee8 <arm_mat_init_f32>
		arm_mat_init_f32(&du, 100, 1, (float32_t *)du_data);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	2164      	movs	r1, #100	; 0x64
 8008eca:	f00c f80d 	bl	8014ee8 <arm_mat_init_f32>

		arm_mat_init_f32(&Fdbt, 104, 100, (float32_t *)Fdbt_data);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008ed4:	4b0f      	ldr	r3, [pc, #60]	; (8008f14 <_ZN14MPC_ControllerC1Ev+0x118>)
 8008ed6:	2264      	movs	r2, #100	; 0x64
 8008ed8:	2168      	movs	r1, #104	; 0x68
 8008eda:	f00c f805 	bl	8014ee8 <arm_mat_init_f32>
		arm_mat_init_f32(&HdbInv, 100, 100, (float32_t *)HdbInv_data);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8008ee4:	4b0c      	ldr	r3, [pc, #48]	; (8008f18 <_ZN14MPC_ControllerC1Ev+0x11c>)
 8008ee6:	2264      	movs	r2, #100	; 0x64
 8008ee8:	2164      	movs	r1, #100	; 0x64
 8008eea:	f00b fffd 	bl	8014ee8 <arm_mat_init_f32>
		arm_mat_init_f32(&xr, 1, 104, (float32_t *)xr_data);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	3354      	adds	r3, #84	; 0x54
 8008ef8:	2268      	movs	r2, #104	; 0x68
 8008efa:	2101      	movs	r1, #1
 8008efc:	f00b fff4 	bl	8014ee8 <arm_mat_init_f32>
	}
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4618      	mov	r0, r3
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	3dcccccd 	.word	0x3dcccccd
 8008f10:	08016818 	.word	0x08016818
 8008f14:	08016b48 	.word	0x08016b48
 8008f18:	08020dc8 	.word	0x08020dc8
 8008f1c:	00000000 	.word	0x00000000

08008f20 <_ZN14MPC_Controller7predictEff>:

	float32_t predict(float32_t x1,float32_t ref)
 8008f20:	b5b0      	push	{r4, r5, r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	ed87 0a02 	vstr	s0, [r7, #8]
 8008f2c:	edc7 0a01 	vstr	s1, [r7, #4]
	{
		arm_status status1 = arm_mat_mult_f32(&xr, &Fdbt, &ft);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	333c      	adds	r3, #60	; 0x3c
 8008f40:	461a      	mov	r2, r3
 8008f42:	f00b ff2d 	bl	8014da0 <arm_mat_mult_f32>
 8008f46:	4603      	mov	r3, r0
 8008f48:	75fb      	strb	r3, [r7, #23]
		arm_status status2 = arm_mat_trans_f32(&ft, &ft_t);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	3344      	adds	r3, #68	; 0x44
 8008f54:	4619      	mov	r1, r3
 8008f56:	4610      	mov	r0, r2
 8008f58:	f00b feb0 	bl	8014cbc <arm_mat_trans_f32>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	75bb      	strb	r3, [r7, #22]
		arm_status status3 = arm_mat_mult_f32(&HdbInv, &ft_t, &du);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	334c      	adds	r3, #76	; 0x4c
 8008f70:	461a      	mov	r2, r3
 8008f72:	f00b ff15 	bl	8014da0 <arm_mat_mult_f32>
 8008f76:	4603      	mov	r3, r0
 8008f78:	757b      	strb	r3, [r7, #21]

		this->du0 = *(du.pData+0);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	601a      	str	r2, [r3, #0]
		this->x_aug = this->x_aug + this->du0;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	ed93 7a01 	vldr	s14, [r3, #4]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	edd3 7a00 	vldr	s15, [r3]
 8008f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	edc3 7a01 	vstr	s15, [r3, #4]

		if (x1<0.05)
 8008f9a:	68b8      	ldr	r0, [r7, #8]
 8008f9c:	f7f7 fa84 	bl	80004a8 <__aeabi_f2d>
 8008fa0:	a347      	add	r3, pc, #284	; (adr r3, 80090c0 <_ZN14MPC_Controller7predictEff+0x1a0>)
 8008fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa6:	f7f7 fd49 	bl	8000a3c <__aeabi_dcmplt>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d013      	beq.n	8008fd8 <_ZN14MPC_Controller7predictEff+0xb8>
		{
			err = err + (ref-x1)*Ki;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	ed93 7a04 	vldr	s14, [r3, #16]
 8008fb6:	edd7 6a01 	vldr	s13, [r7, #4]
 8008fba:	edd7 7a02 	vldr	s15, [r7, #8]
 8008fbe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	edd3 7a07 	vldr	s15, [r3, #28]
 8008fc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	edc3 7a04 	vstr	s15, [r3, #16]
 8008fd6:	e012      	b.n	8008ffe <_ZN14MPC_Controller7predictEff+0xde>
		} else
		{
			err = err + (ref-x1)*Ki_s;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	ed93 7a04 	vldr	s14, [r3, #16]
 8008fde:	edd7 6a01 	vldr	s13, [r7, #4]
 8008fe2:	edd7 7a02 	vldr	s15, [r7, #8]
 8008fe6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	edd3 7a08 	vldr	s15, [r3, #32]
 8008ff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	edc3 7a04 	vstr	s15, [r3, #16]
		}

		this->x3 = this->x_aug*0.8 - prev_x3*0.666666666666667;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	4618      	mov	r0, r3
 8009004:	f7f7 fa50 	bl	80004a8 <__aeabi_f2d>
 8009008:	a32f      	add	r3, pc, #188	; (adr r3, 80090c8 <_ZN14MPC_Controller7predictEff+0x1a8>)
 800900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900e:	f7f7 faa3 	bl	8000558 <__aeabi_dmul>
 8009012:	4602      	mov	r2, r0
 8009014:	460b      	mov	r3, r1
 8009016:	4614      	mov	r4, r2
 8009018:	461d      	mov	r5, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	4618      	mov	r0, r3
 8009020:	f7f7 fa42 	bl	80004a8 <__aeabi_f2d>
 8009024:	a32a      	add	r3, pc, #168	; (adr r3, 80090d0 <_ZN14MPC_Controller7predictEff+0x1b0>)
 8009026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902a:	f7f7 fa95 	bl	8000558 <__aeabi_dmul>
 800902e:	4602      	mov	r2, r0
 8009030:	460b      	mov	r3, r1
 8009032:	4620      	mov	r0, r4
 8009034:	4629      	mov	r1, r5
 8009036:	f7f7 f8d7 	bl	80001e8 <__aeabi_dsub>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	4610      	mov	r0, r2
 8009040:	4619      	mov	r1, r3
 8009042:	f7f7 fd61 	bl	8000b08 <__aeabi_d2f>
 8009046:	4602      	mov	r2, r0
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	609a      	str	r2, [r3, #8]
		this->x1_dt = x1 - this->prev_x1;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	edd3 7a05 	vldr	s15, [r3, #20]
 8009052:	ed97 7a02 	vldr	s14, [r7, #8]
 8009056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	edc3 7a06 	vstr	s15, [r3, #24]

		std::fill_n(xr_data, 104, err);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	3310      	adds	r3, #16
 800906a:	461a      	mov	r2, r3
 800906c:	2168      	movs	r1, #104	; 0x68
 800906e:	f000 f99f 	bl	80093b0 <_ZSt6fill_nIPfifET_S1_T0_RKT1_>

		xr_data[0] = x1;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	68ba      	ldr	r2, [r7, #8]
 8009076:	655a      	str	r2, [r3, #84]	; 0x54
		xr_data[1] = x1_dt * 5.0F;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	edd3 7a06 	vldr	s15, [r3, #24]
 800907e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8009082:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		xr_data[2] = x3;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	689a      	ldr	r2, [r3, #8]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	65da      	str	r2, [r3, #92]	; 0x5c
		xr_data[3] = x_aug;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	661a      	str	r2, [r3, #96]	; 0x60

		this->prev_x1 = x1;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	615a      	str	r2, [r3, #20]
		this->prev_x3 = this->x3;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	689a      	ldr	r2, [r3, #8]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	60da      	str	r2, [r3, #12]

		return x_aug;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	ee07 3a90 	vmov	s15, r3
	}
 80090b2:	eeb0 0a67 	vmov.f32	s0, s15
 80090b6:	3718      	adds	r7, #24
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bdb0      	pop	{r4, r5, r7, pc}
 80090bc:	f3af 8000 	nop.w
 80090c0:	9999999a 	.word	0x9999999a
 80090c4:	3fa99999 	.word	0x3fa99999
 80090c8:	9999999a 	.word	0x9999999a
 80090cc:	3fe99999 	.word	0x3fe99999
 80090d0:	55555558 	.word	0x55555558
 80090d4:	3fe55555 	.word	0x3fe55555

080090d8 <_ZN7VL53L0XC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>:
 *      Author: Dragos
 */

#include "VL53L0X.hpp"

VL53L0X::VL53L0X(
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
 80090e4:	70fb      	strb	r3, [r7, #3]
	,uart_port_dma {uart_port_dma}
	,mpc {}
	,mpc_out {0}
	,rx_buff {}
	,wrongDataReceived {false}
	,distance {0}
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	3336      	adds	r3, #54	; 0x36
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fc f943 	bl	8005376 <_ZN7TimeoutC1Ev>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fa fdf6 	bl	8003ce4 <_ZN15PrintableSensorC1Ev>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	3340      	adds	r3, #64	; 0x40
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fa fe07 	bl	8003d10 <_ZN12CallsCounterC1Ev>
 8009102:	4a1c      	ldr	r2, [pc, #112]	; (8009174 <_ZN7VL53L0XC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh+0x9c>)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	601a      	str	r2, [r3, #0]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	225a      	movs	r2, #90	; 0x5a
 800910c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	225a      	movs	r2, #90	; 0x5a
 8009114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	655a      	str	r2, [r3, #84]	; 0x54
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	659a      	str	r2, [r3, #88]	; 0x58
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	335c      	adds	r3, #92	; 0x5c
 8009128:	4618      	mov	r0, r3
 800912a:	f7ff fe67 	bl	8008dfc <_ZN14MPC_ControllerC1Ev>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8009134:	f04f 0200 	mov.w	r2, #0
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8009140:	2200      	movs	r2, #0
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	605a      	str	r2, [r3, #4]
 8009146:	609a      	str	r2, [r3, #8]
 8009148:	60da      	str	r2, [r3, #12]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
{
	setTimeoutValue(timeout);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	3336      	adds	r3, #54	; 0x36
 800915e:	78fa      	ldrb	r2, [r7, #3]
 8009160:	4611      	mov	r1, r2
 8009162:	4618      	mov	r0, r3
 8009164:	f7fc f8f8 	bl	8005358 <_ZN7Timeout15setTimeoutValueEh>
}
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	0802aa10 	.word	0x0802aa10

08009178 <_ZN7VL53L0X5beginEv>:

void VL53L0X::begin()
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (uart_port, rx_buff, packet_length);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f203 7304 	addw	r3, r3, #1796	; 0x704
 800918a:	2208      	movs	r2, #8
 800918c:	4619      	mov	r1, r3
 800918e:	f006 f817 	bl	800f1c0 <HAL_UART_Receive_DMA>
}
 8009192:	bf00      	nop
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
	...

0800919c <_ZN7VL53L0X6updateEv>:

void VL53L0X::update()
{
 800919c:	b590      	push	{r4, r7, lr}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->rx_buff[0]==this->FIRST_BIT && this->rx_buff[1]==this->SECOND_BIT);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 2704 	ldrb.w	r2, [r3, #1796]	; 0x704
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d109      	bne.n	80091c8 <_ZN7VL53L0X6updateEv+0x2c>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 2705 	ldrb.w	r2, [r3, #1797]	; 0x705
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d101      	bne.n	80091c8 <_ZN7VL53L0X6updateEv+0x2c>
 80091c4:	2301      	movs	r3, #1
 80091c6:	e000      	b.n	80091ca <_ZN7VL53L0X6updateEv+0x2e>
 80091c8:	2300      	movs	r3, #0
 80091ca:	73bb      	strb	r3, [r7, #14]

	if(isPacketOk)
 80091cc:	7bbb      	ldrb	r3, [r7, #14]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d027      	beq.n	8009222 <_ZN7VL53L0X6updateEv+0x86>
	{
	    this->distance = rx_buff[4] << 8 | rx_buff[5];
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 3708 	ldrb.w	r3, [r3, #1800]	; 0x708
 80091d8:	021b      	lsls	r3, r3, #8
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	f892 2709 	ldrb.w	r2, [r2, #1801]	; 0x709
 80091e0:	4313      	orrs	r3, r2
 80091e2:	461a      	mov	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
		this->resetTimeoutCounter();
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	3336      	adds	r3, #54	; 0x36
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7ff f966 	bl	80084c0 <_ZN7Timeout19resetTimeoutCounterEv>

		this->mpc_out = this->mpc.predict(this->getAltitudeM(),0.15F);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f866 	bl	80092cc <_ZN7VL53L0X12getAltitudeMEv>
 8009200:	eef0 7a40 	vmov.f32	s15, s0
 8009204:	eddf 0a30 	vldr	s1, [pc, #192]	; 80092c8 <_ZN7VL53L0X6updateEv+0x12c>
 8009208:	eeb0 0a67 	vmov.f32	s0, s15
 800920c:	4620      	mov	r0, r4
 800920e:	f7ff fe87 	bl	8008f20 <_ZN14MPC_Controller7predictEff>
 8009212:	eef0 7a40 	vmov.f32	s15, s0
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 800921c:	edc3 7a00 	vstr	s15, [r3]
 8009220:	e033      	b.n	800928a <_ZN7VL53L0X6updateEv+0xee>
	}
	else if (this->wrongDataReceived==false)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 3714 	ldrb.w	r3, [r3, #1812]	; 0x714
 8009228:	2b00      	cmp	r3, #0
 800922a:	d12e      	bne.n	800928a <_ZN7VL53L0X6updateEv+0xee>
	{
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 800922c:	2300      	movs	r3, #0
 800922e:	73fb      	strb	r3, [r7, #15]
 8009230:	7bfb      	ldrb	r3, [r7, #15]
 8009232:	2b06      	cmp	r3, #6
 8009234:	d829      	bhi.n	800928a <_ZN7VL53L0X6updateEv+0xee>
		{
			if ((this->rx_buff[iter]==this->FIRST_BIT) && (this->rx_buff[iter+1U]==this->SECOND_BIT))
 8009236:	7bfb      	ldrb	r3, [r7, #15]
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	4413      	add	r3, r2
 800923c:	f893 2704 	ldrb.w	r2, [r3, #1796]	; 0x704
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009246:	429a      	cmp	r2, r3
 8009248:	d11b      	bne.n	8009282 <_ZN7VL53L0X6updateEv+0xe6>
 800924a:	7bfb      	ldrb	r3, [r7, #15]
 800924c:	3301      	adds	r3, #1
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	4413      	add	r3, r2
 8009252:	f893 2704 	ldrb.w	r2, [r3, #1796]	; 0x704
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800925c:	429a      	cmp	r2, r3
 800925e:	d110      	bne.n	8009282 <_ZN7VL53L0X6updateEv+0xe6>
			{
				HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length+iter);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f203 7104 	addw	r1, r3, #1796	; 0x704
 800926a:	7bfb      	ldrb	r3, [r7, #15]
 800926c:	b29b      	uxth	r3, r3
 800926e:	3308      	adds	r3, #8
 8009270:	b29b      	uxth	r3, r3
 8009272:	461a      	mov	r2, r3
 8009274:	f005 ffa4 	bl	800f1c0 <HAL_UART_Receive_DMA>
				this->wrongDataReceived = true;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
				return;
 8009280:	e01f      	b.n	80092c2 <_ZN7VL53L0X6updateEv+0x126>
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 8009282:	7bfb      	ldrb	r3, [r7, #15]
 8009284:	3301      	adds	r3, #1
 8009286:	73fb      	strb	r3, [r7, #15]
 8009288:	e7d2      	b.n	8009230 <_ZN7VL53L0X6updateEv+0x94>
			}
		}
	}

	if (this->wrongDataReceived == true)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f893 3714 	ldrb.w	r3, [r3, #1812]	; 0x714
 8009290:	2b01      	cmp	r3, #1
 8009292:	d103      	bne.n	800929c <_ZN7VL53L0X6updateEv+0x100>
		this->wrongDataReceived = false;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714

	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f203 7304 	addw	r3, r3, #1796	; 0x704
 80092a6:	2208      	movs	r2, #8
 80092a8:	4619      	mov	r1, r3
 80092aa:	f005 ff89 	bl	800f1c0 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->uart_port_dma, DMA_IT_HT);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f022 0208 	bic.w	r2, r2, #8
 80092c0:	601a      	str	r2, [r3, #0]
}
 80092c2:	3714      	adds	r7, #20
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd90      	pop	{r4, r7, pc}
 80092c8:	3e19999a 	.word	0x3e19999a

080092cc <_ZN7VL53L0X12getAltitudeMEv>:

float VL53L0X::getAltitudeM(void)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
	return static_cast<float>(this->distance)/1000.0F;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 3718 	ldr.w	r3, [r3, #1816]	; 0x718
 80092da:	ee07 3a90 	vmov	s15, r3
 80092de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80092fc <_ZN7VL53L0X12getAltitudeMEv+0x30>
 80092e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80092ea:	eef0 7a66 	vmov.f32	s15, s13
}
 80092ee:	eeb0 0a67 	vmov.f32	s0, s15
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	447a0000 	.word	0x447a0000

08009300 <_ZN7VL53L0X9getMPCoutEv>:

float VL53L0X::getMPCout(void)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
	return this->mpc_out;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	ee07 3a90 	vmov	s15, r3
}
 8009314:	eeb0 0a67 	vmov.f32	s0, s15
 8009318:	370c      	adds	r7, #12
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
	...

08009324 <_ZN7VL53L0X19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
{
	return this->distance;
}

const char* VL53L0X::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8009324:	b590      	push	{r4, r7, lr}
 8009326:	b087      	sub	sp, #28
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	3304      	adds	r3, #4
 8009332:	2200      	movs	r2, #0
 8009334:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::VL53_DISTANCE)!=senorsList.end())
 8009336:	2314      	movs	r3, #20
 8009338:	613b      	str	r3, [r7, #16]
 800933a:	f107 0310 	add.w	r3, r7, #16
 800933e:	4619      	mov	r1, r3
 8009340:	6838      	ldr	r0, [r7, #0]
 8009342:	f7fb fc7f 	bl	8004c44 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8009346:	4603      	mov	r3, r0
 8009348:	60fb      	str	r3, [r7, #12]
 800934a:	6838      	ldr	r0, [r7, #0]
 800934c:	f7fb fc93 	bl	8004c76 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8009350:	4603      	mov	r3, r0
 8009352:	617b      	str	r3, [r7, #20]
 8009354:	f107 0214 	add.w	r2, r7, #20
 8009358:	f107 030c 	add.w	r3, r7, #12
 800935c:	4611      	mov	r1, r2
 800935e:	4618      	mov	r0, r3
 8009360:	f7fb fc96 	bl	8004c90 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d01a      	beq.n	80093a0 <_ZN7VL53L0X19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x7c>
	{
		strcat(packet,toCharArray(distance));
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	1d1c      	adds	r4, r3, #4
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 3718 	ldr.w	r3, [r3, #1816]	; 0x718
 8009376:	4619      	mov	r1, r3
 8009378:	4610      	mov	r0, r2
 800937a:	f7fa fc71 	bl	8003c60 <_ZN15PrintableSensor11toCharArrayEi>
 800937e:	4603      	mov	r3, r0
 8009380:	4619      	mov	r1, r3
 8009382:	4620      	mov	r0, r4
 8009384:	f00d f95a 	bl	801663c <strcat>
		strcat(packet,",");
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	1d1c      	adds	r4, r3, #4
 800938c:	4620      	mov	r0, r4
 800938e:	f7f6 ff1f 	bl	80001d0 <strlen>
 8009392:	4603      	mov	r3, r0
 8009394:	4423      	add	r3, r4
 8009396:	4905      	ldr	r1, [pc, #20]	; (80093ac <_ZN7VL53L0X19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x88>)
 8009398:	461a      	mov	r2, r3
 800939a:	460b      	mov	r3, r1
 800939c:	881b      	ldrh	r3, [r3, #0]
 800939e:	8013      	strh	r3, [r2, #0]
	}
	return packet;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	3304      	adds	r3, #4
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	371c      	adds	r7, #28
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd90      	pop	{r4, r7, pc}
 80093ac:	080169b8 	.word	0x080169b8

080093b0 <_ZSt6fill_nIPfifET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 80093b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80093bc:	68fc      	ldr	r4, [r7, #12]
 80093be:	68b8      	ldr	r0, [r7, #8]
 80093c0:	f7ff fd11 	bl	8008de6 <_ZSt17__size_to_integeri>
 80093c4:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 80093c6:	f107 030c 	add.w	r3, r7, #12
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 f80b 	bl	80093e6 <_ZSt19__iterator_categoryIPfENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80093d0:	4633      	mov	r3, r6
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	4629      	mov	r1, r5
 80093d6:	4620      	mov	r0, r4
 80093d8:	f000 f810 	bl	80093fc <_ZSt10__fill_n_aIPfifET_S1_T0_RKT1_St26random_access_iterator_tag>
 80093dc:	4603      	mov	r3, r0
    }
 80093de:	4618      	mov	r0, r3
 80093e0:	3714      	adds	r7, #20
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080093e6 <_ZSt19__iterator_categoryIPfENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80093e6:	b480      	push	{r7}
 80093e8:	b083      	sub	sp, #12
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80093ee:	bf00      	nop
 80093f0:	4618      	mov	r0, r3
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <_ZSt10__fill_n_aIPfifET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
 8009408:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	dc01      	bgt.n	8009414 <_ZSt10__fill_n_aIPfifET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	e00c      	b.n	800942e <_ZSt10__fill_n_aIPfifET_S1_T0_RKT1_St26random_access_iterator_tag+0x32>
      std::__fill_a(__first, __first + __n, __value);
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	4413      	add	r3, r2
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	4619      	mov	r1, r3
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f000 f808 	bl	8009436 <_ZSt8__fill_aIPffEvT_S1_RKT0_>
      return __first + __n;
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	4413      	add	r3, r2
    }
 800942e:	4618      	mov	r0, r3
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <_ZSt8__fill_aIPffEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8009436:	b580      	push	{r7, lr}
 8009438:	b084      	sub	sp, #16
 800943a:	af00      	add	r7, sp, #0
 800943c:	60f8      	str	r0, [r7, #12]
 800943e:	60b9      	str	r1, [r7, #8]
 8009440:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	68b9      	ldr	r1, [r7, #8]
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f000 f804 	bl	8009454 <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 800944c:	bf00      	nop
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8009454:	b480      	push	{r7}
 8009456:	b087      	sub	sp, #28
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	429a      	cmp	r2, r3
 800946c:	d006      	beq.n	800947c <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x28>
	*__first = __tmp;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	697a      	ldr	r2, [r7, #20]
 8009472:	601a      	str	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	3304      	adds	r3, #4
 8009478:	60fb      	str	r3, [r7, #12]
 800947a:	e7f4      	b.n	8009466 <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x12>
    }
 800947c:	bf00      	nop
 800947e:	371c      	adds	r7, #28
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800948c:	4b0e      	ldr	r3, [pc, #56]	; (80094c8 <HAL_Init+0x40>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a0d      	ldr	r2, [pc, #52]	; (80094c8 <HAL_Init+0x40>)
 8009492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009498:	4b0b      	ldr	r3, [pc, #44]	; (80094c8 <HAL_Init+0x40>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a0a      	ldr	r2, [pc, #40]	; (80094c8 <HAL_Init+0x40>)
 800949e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80094a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80094a4:	4b08      	ldr	r3, [pc, #32]	; (80094c8 <HAL_Init+0x40>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a07      	ldr	r2, [pc, #28]	; (80094c8 <HAL_Init+0x40>)
 80094aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80094b0:	2003      	movs	r0, #3
 80094b2:	f000 fd0e 	bl	8009ed2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80094b6:	200f      	movs	r0, #15
 80094b8:	f7fa f9ee 	bl	8003898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80094bc:	f7f9 fd7c 	bl	8002fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	40023c00 	.word	0x40023c00

080094cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80094cc:	b480      	push	{r7}
 80094ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80094d0:	4b06      	ldr	r3, [pc, #24]	; (80094ec <HAL_IncTick+0x20>)
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	461a      	mov	r2, r3
 80094d6:	4b06      	ldr	r3, [pc, #24]	; (80094f0 <HAL_IncTick+0x24>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4413      	add	r3, r2
 80094dc:	4a04      	ldr	r2, [pc, #16]	; (80094f0 <HAL_IncTick+0x24>)
 80094de:	6013      	str	r3, [r2, #0]
}
 80094e0:	bf00      	nop
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	2000000c 	.word	0x2000000c
 80094f0:	20000948 	.word	0x20000948

080094f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80094f4:	b480      	push	{r7}
 80094f6:	af00      	add	r7, sp, #0
  return uwTick;
 80094f8:	4b03      	ldr	r3, [pc, #12]	; (8009508 <HAL_GetTick+0x14>)
 80094fa:	681b      	ldr	r3, [r3, #0]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	20000948 	.word	0x20000948

0800950c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009514:	f7ff ffee 	bl	80094f4 <HAL_GetTick>
 8009518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009524:	d005      	beq.n	8009532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009526:	4b0a      	ldr	r3, [pc, #40]	; (8009550 <HAL_Delay+0x44>)
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	461a      	mov	r2, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	4413      	add	r3, r2
 8009530:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009532:	bf00      	nop
 8009534:	f7ff ffde 	bl	80094f4 <HAL_GetTick>
 8009538:	4602      	mov	r2, r0
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	429a      	cmp	r2, r3
 8009542:	d8f7      	bhi.n	8009534 <HAL_Delay+0x28>
  {
  }
}
 8009544:	bf00      	nop
 8009546:	bf00      	nop
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	2000000c 	.word	0x2000000c

08009554 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800955c:	2300      	movs	r3, #0
 800955e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d101      	bne.n	800956a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	e033      	b.n	80095d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956e:	2b00      	cmp	r3, #0
 8009570:	d109      	bne.n	8009586 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7f9 fd4c 	bl	8003010 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958a:	f003 0310 	and.w	r3, r3, #16
 800958e:	2b00      	cmp	r3, #0
 8009590:	d118      	bne.n	80095c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009596:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800959a:	f023 0302 	bic.w	r3, r3, #2
 800959e:	f043 0202 	orr.w	r2, r3, #2
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fa68 	bl	8009a7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	f023 0303 	bic.w	r3, r3, #3
 80095ba:	f043 0201 	orr.w	r2, r3, #1
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	641a      	str	r2, [r3, #64]	; 0x40
 80095c2:	e001      	b.n	80095c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80095d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
	...

080095dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80095e8:	2300      	movs	r3, #0
 80095ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d101      	bne.n	80095fa <HAL_ADC_Start_DMA+0x1e>
 80095f6:	2302      	movs	r3, #2
 80095f8:	e0e9      	b.n	80097ce <HAL_ADC_Start_DMA+0x1f2>
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	2b01      	cmp	r3, #1
 800960e:	d018      	beq.n	8009642 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	689a      	ldr	r2, [r3, #8]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f042 0201 	orr.w	r2, r2, #1
 800961e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009620:	4b6d      	ldr	r3, [pc, #436]	; (80097d8 <HAL_ADC_Start_DMA+0x1fc>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a6d      	ldr	r2, [pc, #436]	; (80097dc <HAL_ADC_Start_DMA+0x200>)
 8009626:	fba2 2303 	umull	r2, r3, r2, r3
 800962a:	0c9a      	lsrs	r2, r3, #18
 800962c:	4613      	mov	r3, r2
 800962e:	005b      	lsls	r3, r3, #1
 8009630:	4413      	add	r3, r2
 8009632:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009634:	e002      	b.n	800963c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	3b01      	subs	r3, #1
 800963a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1f9      	bne.n	8009636 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800964c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009650:	d107      	bne.n	8009662 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	689a      	ldr	r2, [r3, #8]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009660:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	f003 0301 	and.w	r3, r3, #1
 800966c:	2b01      	cmp	r3, #1
 800966e:	f040 80a1 	bne.w	80097b4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009676:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800967a:	f023 0301 	bic.w	r3, r3, #1
 800967e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009690:	2b00      	cmp	r3, #0
 8009692:	d007      	beq.n	80096a4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009698:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800969c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80096ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096b0:	d106      	bne.n	80096c0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096b6:	f023 0206 	bic.w	r2, r3, #6
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	645a      	str	r2, [r3, #68]	; 0x44
 80096be:	e002      	b.n	80096c6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80096ce:	4b44      	ldr	r3, [pc, #272]	; (80097e0 <HAL_ADC_Start_DMA+0x204>)
 80096d0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d6:	4a43      	ldr	r2, [pc, #268]	; (80097e4 <HAL_ADC_Start_DMA+0x208>)
 80096d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096de:	4a42      	ldr	r2, [pc, #264]	; (80097e8 <HAL_ADC_Start_DMA+0x20c>)
 80096e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e6:	4a41      	ldr	r2, [pc, #260]	; (80097ec <HAL_ADC_Start_DMA+0x210>)
 80096e8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80096f2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685a      	ldr	r2, [r3, #4]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009702:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	689a      	ldr	r2, [r3, #8]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009712:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	334c      	adds	r3, #76	; 0x4c
 800971e:	4619      	mov	r1, r3
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f000 fcb8 	bl	800a098 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	f003 031f 	and.w	r3, r3, #31
 8009730:	2b00      	cmp	r3, #0
 8009732:	d12a      	bne.n	800978a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a2d      	ldr	r2, [pc, #180]	; (80097f0 <HAL_ADC_Start_DMA+0x214>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d015      	beq.n	800976a <HAL_ADC_Start_DMA+0x18e>
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a2c      	ldr	r2, [pc, #176]	; (80097f4 <HAL_ADC_Start_DMA+0x218>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d105      	bne.n	8009754 <HAL_ADC_Start_DMA+0x178>
 8009748:	4b25      	ldr	r3, [pc, #148]	; (80097e0 <HAL_ADC_Start_DMA+0x204>)
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	f003 031f 	and.w	r3, r3, #31
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00a      	beq.n	800976a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a27      	ldr	r2, [pc, #156]	; (80097f8 <HAL_ADC_Start_DMA+0x21c>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d136      	bne.n	80097cc <HAL_ADC_Start_DMA+0x1f0>
 800975e:	4b20      	ldr	r3, [pc, #128]	; (80097e0 <HAL_ADC_Start_DMA+0x204>)
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	f003 0310 	and.w	r3, r3, #16
 8009766:	2b00      	cmp	r3, #0
 8009768:	d130      	bne.n	80097cc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009774:	2b00      	cmp	r3, #0
 8009776:	d129      	bne.n	80097cc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	689a      	ldr	r2, [r3, #8]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009786:	609a      	str	r2, [r3, #8]
 8009788:	e020      	b.n	80097cc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a18      	ldr	r2, [pc, #96]	; (80097f0 <HAL_ADC_Start_DMA+0x214>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d11b      	bne.n	80097cc <HAL_ADC_Start_DMA+0x1f0>
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d114      	bne.n	80097cc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	689a      	ldr	r2, [r3, #8]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80097b0:	609a      	str	r2, [r3, #8]
 80097b2:	e00b      	b.n	80097cc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b8:	f043 0210 	orr.w	r2, r3, #16
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097c4:	f043 0201 	orr.w	r2, r3, #1
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3718      	adds	r7, #24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	20000004 	.word	0x20000004
 80097dc:	431bde83 	.word	0x431bde83
 80097e0:	40012300 	.word	0x40012300
 80097e4:	08009c75 	.word	0x08009c75
 80097e8:	08009d2f 	.word	0x08009d2f
 80097ec:	08009d4b 	.word	0x08009d4b
 80097f0:	40012000 	.word	0x40012000
 80097f4:	40012100 	.word	0x40012100
 80097f8:	40012200 	.word	0x40012200

080097fc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009804:	bf00      	nop
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009842:	2300      	movs	r3, #0
 8009844:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800984c:	2b01      	cmp	r3, #1
 800984e:	d101      	bne.n	8009854 <HAL_ADC_ConfigChannel+0x1c>
 8009850:	2302      	movs	r3, #2
 8009852:	e105      	b.n	8009a60 <HAL_ADC_ConfigChannel+0x228>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b09      	cmp	r3, #9
 8009862:	d925      	bls.n	80098b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	68d9      	ldr	r1, [r3, #12]
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	b29b      	uxth	r3, r3
 8009870:	461a      	mov	r2, r3
 8009872:	4613      	mov	r3, r2
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	4413      	add	r3, r2
 8009878:	3b1e      	subs	r3, #30
 800987a:	2207      	movs	r2, #7
 800987c:	fa02 f303 	lsl.w	r3, r2, r3
 8009880:	43da      	mvns	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	400a      	ands	r2, r1
 8009888:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68d9      	ldr	r1, [r3, #12]
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	689a      	ldr	r2, [r3, #8]
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	b29b      	uxth	r3, r3
 800989a:	4618      	mov	r0, r3
 800989c:	4603      	mov	r3, r0
 800989e:	005b      	lsls	r3, r3, #1
 80098a0:	4403      	add	r3, r0
 80098a2:	3b1e      	subs	r3, #30
 80098a4:	409a      	lsls	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	430a      	orrs	r2, r1
 80098ac:	60da      	str	r2, [r3, #12]
 80098ae:	e022      	b.n	80098f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6919      	ldr	r1, [r3, #16]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	461a      	mov	r2, r3
 80098be:	4613      	mov	r3, r2
 80098c0:	005b      	lsls	r3, r3, #1
 80098c2:	4413      	add	r3, r2
 80098c4:	2207      	movs	r2, #7
 80098c6:	fa02 f303 	lsl.w	r3, r2, r3
 80098ca:	43da      	mvns	r2, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	400a      	ands	r2, r1
 80098d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	6919      	ldr	r1, [r3, #16]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	689a      	ldr	r2, [r3, #8]
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	4618      	mov	r0, r3
 80098e6:	4603      	mov	r3, r0
 80098e8:	005b      	lsls	r3, r3, #1
 80098ea:	4403      	add	r3, r0
 80098ec:	409a      	lsls	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	430a      	orrs	r2, r1
 80098f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	2b06      	cmp	r3, #6
 80098fc:	d824      	bhi.n	8009948 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	685a      	ldr	r2, [r3, #4]
 8009908:	4613      	mov	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	3b05      	subs	r3, #5
 8009910:	221f      	movs	r2, #31
 8009912:	fa02 f303 	lsl.w	r3, r2, r3
 8009916:	43da      	mvns	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	400a      	ands	r2, r1
 800991e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	b29b      	uxth	r3, r3
 800992c:	4618      	mov	r0, r3
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	685a      	ldr	r2, [r3, #4]
 8009932:	4613      	mov	r3, r2
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4413      	add	r3, r2
 8009938:	3b05      	subs	r3, #5
 800993a:	fa00 f203 	lsl.w	r2, r0, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	430a      	orrs	r2, r1
 8009944:	635a      	str	r2, [r3, #52]	; 0x34
 8009946:	e04c      	b.n	80099e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	2b0c      	cmp	r3, #12
 800994e:	d824      	bhi.n	800999a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	685a      	ldr	r2, [r3, #4]
 800995a:	4613      	mov	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	3b23      	subs	r3, #35	; 0x23
 8009962:	221f      	movs	r2, #31
 8009964:	fa02 f303 	lsl.w	r3, r2, r3
 8009968:	43da      	mvns	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	400a      	ands	r2, r1
 8009970:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	b29b      	uxth	r3, r3
 800997e:	4618      	mov	r0, r3
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	685a      	ldr	r2, [r3, #4]
 8009984:	4613      	mov	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4413      	add	r3, r2
 800998a:	3b23      	subs	r3, #35	; 0x23
 800998c:	fa00 f203 	lsl.w	r2, r0, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	430a      	orrs	r2, r1
 8009996:	631a      	str	r2, [r3, #48]	; 0x30
 8009998:	e023      	b.n	80099e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	685a      	ldr	r2, [r3, #4]
 80099a4:	4613      	mov	r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4413      	add	r3, r2
 80099aa:	3b41      	subs	r3, #65	; 0x41
 80099ac:	221f      	movs	r2, #31
 80099ae:	fa02 f303 	lsl.w	r3, r2, r3
 80099b2:	43da      	mvns	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	400a      	ands	r2, r1
 80099ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	4618      	mov	r0, r3
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	685a      	ldr	r2, [r3, #4]
 80099ce:	4613      	mov	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	3b41      	subs	r3, #65	; 0x41
 80099d6:	fa00 f203 	lsl.w	r2, r0, r3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	430a      	orrs	r2, r1
 80099e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80099e2:	4b22      	ldr	r3, [pc, #136]	; (8009a6c <HAL_ADC_ConfigChannel+0x234>)
 80099e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a21      	ldr	r2, [pc, #132]	; (8009a70 <HAL_ADC_ConfigChannel+0x238>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d109      	bne.n	8009a04 <HAL_ADC_ConfigChannel+0x1cc>
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b12      	cmp	r3, #18
 80099f6:	d105      	bne.n	8009a04 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a19      	ldr	r2, [pc, #100]	; (8009a70 <HAL_ADC_ConfigChannel+0x238>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d123      	bne.n	8009a56 <HAL_ADC_ConfigChannel+0x21e>
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b10      	cmp	r3, #16
 8009a14:	d003      	beq.n	8009a1e <HAL_ADC_ConfigChannel+0x1e6>
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b11      	cmp	r3, #17
 8009a1c:	d11b      	bne.n	8009a56 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b10      	cmp	r3, #16
 8009a30:	d111      	bne.n	8009a56 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009a32:	4b10      	ldr	r3, [pc, #64]	; (8009a74 <HAL_ADC_ConfigChannel+0x23c>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a10      	ldr	r2, [pc, #64]	; (8009a78 <HAL_ADC_ConfigChannel+0x240>)
 8009a38:	fba2 2303 	umull	r2, r3, r2, r3
 8009a3c:	0c9a      	lsrs	r2, r3, #18
 8009a3e:	4613      	mov	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4413      	add	r3, r2
 8009a44:	005b      	lsls	r3, r3, #1
 8009a46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009a48:	e002      	b.n	8009a50 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1f9      	bne.n	8009a4a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3714      	adds	r7, #20
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr
 8009a6c:	40012300 	.word	0x40012300
 8009a70:	40012000 	.word	0x40012000
 8009a74:	20000004 	.word	0x20000004
 8009a78:	431bde83 	.word	0x431bde83

08009a7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009a84:	4b79      	ldr	r3, [pc, #484]	; (8009c6c <ADC_Init+0x1f0>)
 8009a86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	685a      	ldr	r2, [r3, #4]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	431a      	orrs	r2, r3
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	685a      	ldr	r2, [r3, #4]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ab0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	6859      	ldr	r1, [r3, #4]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	021a      	lsls	r2, r3, #8
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009ad4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	6859      	ldr	r1, [r3, #4]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	689a      	ldr	r2, [r3, #8]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	430a      	orrs	r2, r1
 8009ae6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	689a      	ldr	r2, [r3, #8]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009af6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	6899      	ldr	r1, [r3, #8]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	68da      	ldr	r2, [r3, #12]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b0e:	4a58      	ldr	r2, [pc, #352]	; (8009c70 <ADC_Init+0x1f4>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d022      	beq.n	8009b5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	689a      	ldr	r2, [r3, #8]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009b22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6899      	ldr	r1, [r3, #8]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	430a      	orrs	r2, r1
 8009b34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	689a      	ldr	r2, [r3, #8]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009b44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	6899      	ldr	r1, [r3, #8]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	430a      	orrs	r2, r1
 8009b56:	609a      	str	r2, [r3, #8]
 8009b58:	e00f      	b.n	8009b7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	689a      	ldr	r2, [r3, #8]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009b68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	689a      	ldr	r2, [r3, #8]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009b78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	689a      	ldr	r2, [r3, #8]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f022 0202 	bic.w	r2, r2, #2
 8009b88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	6899      	ldr	r1, [r3, #8]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	7e1b      	ldrb	r3, [r3, #24]
 8009b94:	005a      	lsls	r2, r3, #1
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	430a      	orrs	r2, r1
 8009b9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d01b      	beq.n	8009be0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	685a      	ldr	r2, [r3, #4]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009bc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6859      	ldr	r1, [r3, #4]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	035a      	lsls	r2, r3, #13
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	430a      	orrs	r2, r1
 8009bdc:	605a      	str	r2, [r3, #4]
 8009bde:	e007      	b.n	8009bf0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	685a      	ldr	r2, [r3, #4]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	69db      	ldr	r3, [r3, #28]
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	051a      	lsls	r2, r3, #20
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	430a      	orrs	r2, r1
 8009c14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	689a      	ldr	r2, [r3, #8]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009c24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	6899      	ldr	r1, [r3, #8]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c32:	025a      	lsls	r2, r3, #9
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	430a      	orrs	r2, r1
 8009c3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	689a      	ldr	r2, [r3, #8]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	6899      	ldr	r1, [r3, #8]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	029a      	lsls	r2, r3, #10
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	430a      	orrs	r2, r1
 8009c5e:	609a      	str	r2, [r3, #8]
}
 8009c60:	bf00      	nop
 8009c62:	3714      	adds	r7, #20
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr
 8009c6c:	40012300 	.word	0x40012300
 8009c70:	0f000001 	.word	0x0f000001

08009c74 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c80:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c86:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d13c      	bne.n	8009d08 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d12b      	bne.n	8009d00 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d127      	bne.n	8009d00 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d006      	beq.n	8009ccc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d119      	bne.n	8009d00 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	685a      	ldr	r2, [r3, #4]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f022 0220 	bic.w	r2, r2, #32
 8009cda:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d105      	bne.n	8009d00 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf8:	f043 0201 	orr.w	r2, r3, #1
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f7ff fd7b 	bl	80097fc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009d06:	e00e      	b.n	8009d26 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0c:	f003 0310 	and.w	r3, r3, #16
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d003      	beq.n	8009d1c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f7ff fd85 	bl	8009824 <HAL_ADC_ErrorCallback>
}
 8009d1a:	e004      	b.n	8009d26 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	4798      	blx	r3
}
 8009d26:	bf00      	nop
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b084      	sub	sp, #16
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f7ff fd67 	bl	8009810 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009d42:	bf00      	nop
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b084      	sub	sp, #16
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d56:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2240      	movs	r2, #64	; 0x40
 8009d5c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d62:	f043 0204 	orr.w	r2, r3, #4
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f7ff fd5a 	bl	8009824 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009d70:	bf00      	nop
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <__NVIC_SetPriorityGrouping>:
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f003 0307 	and.w	r3, r3, #7
 8009d86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009d88:	4b0c      	ldr	r3, [pc, #48]	; (8009dbc <__NVIC_SetPriorityGrouping+0x44>)
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009d8e:	68ba      	ldr	r2, [r7, #8]
 8009d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009d94:	4013      	ands	r3, r2
 8009d96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009daa:	4a04      	ldr	r2, [pc, #16]	; (8009dbc <__NVIC_SetPriorityGrouping+0x44>)
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	60d3      	str	r3, [r2, #12]
}
 8009db0:	bf00      	nop
 8009db2:	3714      	adds	r7, #20
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	e000ed00 	.word	0xe000ed00

08009dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009dc4:	4b04      	ldr	r3, [pc, #16]	; (8009dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	0a1b      	lsrs	r3, r3, #8
 8009dca:	f003 0307 	and.w	r3, r3, #7
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr
 8009dd8:	e000ed00 	.word	0xe000ed00

08009ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	4603      	mov	r3, r0
 8009de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	db0b      	blt.n	8009e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009dee:	79fb      	ldrb	r3, [r7, #7]
 8009df0:	f003 021f 	and.w	r2, r3, #31
 8009df4:	4907      	ldr	r1, [pc, #28]	; (8009e14 <__NVIC_EnableIRQ+0x38>)
 8009df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dfa:	095b      	lsrs	r3, r3, #5
 8009dfc:	2001      	movs	r0, #1
 8009dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8009e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009e06:	bf00      	nop
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	e000e100 	.word	0xe000e100

08009e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	6039      	str	r1, [r7, #0]
 8009e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	db0a      	blt.n	8009e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	b2da      	uxtb	r2, r3
 8009e30:	490c      	ldr	r1, [pc, #48]	; (8009e64 <__NVIC_SetPriority+0x4c>)
 8009e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e36:	0112      	lsls	r2, r2, #4
 8009e38:	b2d2      	uxtb	r2, r2
 8009e3a:	440b      	add	r3, r1
 8009e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009e40:	e00a      	b.n	8009e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	b2da      	uxtb	r2, r3
 8009e46:	4908      	ldr	r1, [pc, #32]	; (8009e68 <__NVIC_SetPriority+0x50>)
 8009e48:	79fb      	ldrb	r3, [r7, #7]
 8009e4a:	f003 030f 	and.w	r3, r3, #15
 8009e4e:	3b04      	subs	r3, #4
 8009e50:	0112      	lsls	r2, r2, #4
 8009e52:	b2d2      	uxtb	r2, r2
 8009e54:	440b      	add	r3, r1
 8009e56:	761a      	strb	r2, [r3, #24]
}
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr
 8009e64:	e000e100 	.word	0xe000e100
 8009e68:	e000ed00 	.word	0xe000ed00

08009e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b089      	sub	sp, #36	; 0x24
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f003 0307 	and.w	r3, r3, #7
 8009e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	f1c3 0307 	rsb	r3, r3, #7
 8009e86:	2b04      	cmp	r3, #4
 8009e88:	bf28      	it	cs
 8009e8a:	2304      	movcs	r3, #4
 8009e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	3304      	adds	r3, #4
 8009e92:	2b06      	cmp	r3, #6
 8009e94:	d902      	bls.n	8009e9c <NVIC_EncodePriority+0x30>
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	3b03      	subs	r3, #3
 8009e9a:	e000      	b.n	8009e9e <NVIC_EncodePriority+0x32>
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8009eaa:	43da      	mvns	r2, r3
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	401a      	ands	r2, r3
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	fa01 f303 	lsl.w	r3, r1, r3
 8009ebe:	43d9      	mvns	r1, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ec4:	4313      	orrs	r3, r2
         );
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3724      	adds	r7, #36	; 0x24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f7ff ff4c 	bl	8009d78 <__NVIC_SetPriorityGrouping>
}
 8009ee0:	bf00      	nop
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	4603      	mov	r3, r0
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
 8009ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009efa:	f7ff ff61 	bl	8009dc0 <__NVIC_GetPriorityGrouping>
 8009efe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	68b9      	ldr	r1, [r7, #8]
 8009f04:	6978      	ldr	r0, [r7, #20]
 8009f06:	f7ff ffb1 	bl	8009e6c <NVIC_EncodePriority>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f10:	4611      	mov	r1, r2
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7ff ff80 	bl	8009e18 <__NVIC_SetPriority>
}
 8009f18:	bf00      	nop
 8009f1a:	3718      	adds	r7, #24
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	4603      	mov	r3, r0
 8009f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7ff ff54 	bl	8009ddc <__NVIC_EnableIRQ>
}
 8009f34:	bf00      	nop
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b086      	sub	sp, #24
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009f44:	2300      	movs	r3, #0
 8009f46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009f48:	f7ff fad4 	bl	80094f4 <HAL_GetTick>
 8009f4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d101      	bne.n	8009f58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	e099      	b.n	800a08c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2202      	movs	r2, #2
 8009f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f022 0201 	bic.w	r2, r2, #1
 8009f76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009f78:	e00f      	b.n	8009f9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009f7a:	f7ff fabb 	bl	80094f4 <HAL_GetTick>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	2b05      	cmp	r3, #5
 8009f86:	d908      	bls.n	8009f9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2203      	movs	r2, #3
 8009f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009f96:	2303      	movs	r3, #3
 8009f98:	e078      	b.n	800a08c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 0301 	and.w	r3, r3, #1
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1e8      	bne.n	8009f7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	4b38      	ldr	r3, [pc, #224]	; (800a094 <HAL_DMA_Init+0x158>)
 8009fb4:	4013      	ands	r3, r2
 8009fb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	699b      	ldr	r3, [r3, #24]
 8009fd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009fde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a1b      	ldr	r3, [r3, #32]
 8009fe4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009fe6:	697a      	ldr	r2, [r7, #20]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff0:	2b04      	cmp	r3, #4
 8009ff2:	d107      	bne.n	800a004 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	697a      	ldr	r2, [r7, #20]
 800a000:	4313      	orrs	r3, r2
 800a002:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	695b      	ldr	r3, [r3, #20]
 800a012:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	f023 0307 	bic.w	r3, r3, #7
 800a01a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	4313      	orrs	r3, r2
 800a024:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02a:	2b04      	cmp	r3, #4
 800a02c:	d117      	bne.n	800a05e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a032:	697a      	ldr	r2, [r7, #20]
 800a034:	4313      	orrs	r3, r2
 800a036:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00e      	beq.n	800a05e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 fb01 	bl	800a648 <DMA_CheckFifoParam>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d008      	beq.n	800a05e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2240      	movs	r2, #64	; 0x40
 800a050:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2201      	movs	r2, #1
 800a056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a05a:	2301      	movs	r3, #1
 800a05c:	e016      	b.n	800a08c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 fab8 	bl	800a5dc <DMA_CalcBaseAndBitshift>
 800a06c:	4603      	mov	r3, r0
 800a06e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a074:	223f      	movs	r2, #63	; 0x3f
 800a076:	409a      	lsls	r2, r3
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a08a:	2300      	movs	r3, #0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3718      	adds	r7, #24
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	f010803f 	.word	0xf010803f

0800a098 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
 800a0a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d101      	bne.n	800a0be <HAL_DMA_Start_IT+0x26>
 800a0ba:	2302      	movs	r3, #2
 800a0bc:	e040      	b.n	800a140 <HAL_DMA_Start_IT+0xa8>
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d12f      	bne.n	800a132 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2202      	movs	r2, #2
 800a0d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	68b9      	ldr	r1, [r7, #8]
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f000 fa4a 	bl	800a580 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0f0:	223f      	movs	r2, #63	; 0x3f
 800a0f2:	409a      	lsls	r2, r3
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f042 0216 	orr.w	r2, r2, #22
 800a106:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d007      	beq.n	800a120 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f042 0208 	orr.w	r2, r2, #8
 800a11e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f042 0201 	orr.w	r2, r2, #1
 800a12e:	601a      	str	r2, [r3, #0]
 800a130:	e005      	b.n	800a13e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a13a:	2302      	movs	r3, #2
 800a13c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a13e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3718      	adds	r7, #24
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a154:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a156:	f7ff f9cd 	bl	80094f4 <HAL_GetTick>
 800a15a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b02      	cmp	r3, #2
 800a166:	d008      	beq.n	800a17a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2280      	movs	r2, #128	; 0x80
 800a16c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	e052      	b.n	800a220 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f022 0216 	bic.w	r2, r2, #22
 800a188:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	695a      	ldr	r2, [r3, #20]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a198:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d103      	bne.n	800a1aa <HAL_DMA_Abort+0x62>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d007      	beq.n	800a1ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f022 0208 	bic.w	r2, r2, #8
 800a1b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f022 0201 	bic.w	r2, r2, #1
 800a1c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a1ca:	e013      	b.n	800a1f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a1cc:	f7ff f992 	bl	80094f4 <HAL_GetTick>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	1ad3      	subs	r3, r2, r3
 800a1d6:	2b05      	cmp	r3, #5
 800a1d8:	d90c      	bls.n	800a1f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2220      	movs	r2, #32
 800a1de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2203      	movs	r2, #3
 800a1e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	e015      	b.n	800a220 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 0301 	and.w	r3, r3, #1
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1e4      	bne.n	800a1cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a206:	223f      	movs	r2, #63	; 0x3f
 800a208:	409a      	lsls	r2, r3
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2201      	movs	r2, #1
 800a212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a236:	b2db      	uxtb	r3, r3
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d004      	beq.n	800a246 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2280      	movs	r2, #128	; 0x80
 800a240:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e00c      	b.n	800a260 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2205      	movs	r2, #5
 800a24a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f022 0201 	bic.w	r2, r2, #1
 800a25c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a274:	2300      	movs	r3, #0
 800a276:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a278:	4b8e      	ldr	r3, [pc, #568]	; (800a4b4 <HAL_DMA_IRQHandler+0x248>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a8e      	ldr	r2, [pc, #568]	; (800a4b8 <HAL_DMA_IRQHandler+0x24c>)
 800a27e:	fba2 2303 	umull	r2, r3, r2, r3
 800a282:	0a9b      	lsrs	r3, r3, #10
 800a284:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a28a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a296:	2208      	movs	r2, #8
 800a298:	409a      	lsls	r2, r3
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	4013      	ands	r3, r2
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d01a      	beq.n	800a2d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 0304 	and.w	r3, r3, #4
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d013      	beq.n	800a2d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f022 0204 	bic.w	r2, r2, #4
 800a2be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2c4:	2208      	movs	r2, #8
 800a2c6:	409a      	lsls	r2, r3
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2d0:	f043 0201 	orr.w	r2, r3, #1
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2dc:	2201      	movs	r2, #1
 800a2de:	409a      	lsls	r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	4013      	ands	r3, r2
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d012      	beq.n	800a30e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	695b      	ldr	r3, [r3, #20]
 800a2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00b      	beq.n	800a30e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	409a      	lsls	r2, r3
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a306:	f043 0202 	orr.w	r2, r3, #2
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a312:	2204      	movs	r2, #4
 800a314:	409a      	lsls	r2, r3
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	4013      	ands	r3, r2
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d012      	beq.n	800a344 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 0302 	and.w	r3, r3, #2
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00b      	beq.n	800a344 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a330:	2204      	movs	r2, #4
 800a332:	409a      	lsls	r2, r3
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a33c:	f043 0204 	orr.w	r2, r3, #4
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a348:	2210      	movs	r2, #16
 800a34a:	409a      	lsls	r2, r3
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	4013      	ands	r3, r2
 800a350:	2b00      	cmp	r3, #0
 800a352:	d043      	beq.n	800a3dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f003 0308 	and.w	r3, r3, #8
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d03c      	beq.n	800a3dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a366:	2210      	movs	r2, #16
 800a368:	409a      	lsls	r2, r3
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d018      	beq.n	800a3ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a386:	2b00      	cmp	r3, #0
 800a388:	d108      	bne.n	800a39c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d024      	beq.n	800a3dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	4798      	blx	r3
 800a39a:	e01f      	b.n	800a3dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d01b      	beq.n	800a3dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	4798      	blx	r3
 800a3ac:	e016      	b.n	800a3dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d107      	bne.n	800a3cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f022 0208 	bic.w	r2, r2, #8
 800a3ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d003      	beq.n	800a3dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3e0:	2220      	movs	r2, #32
 800a3e2:	409a      	lsls	r2, r3
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	4013      	ands	r3, r2
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f000 808f 	beq.w	800a50c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f003 0310 	and.w	r3, r3, #16
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 8087 	beq.w	800a50c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a402:	2220      	movs	r2, #32
 800a404:	409a      	lsls	r2, r3
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a410:	b2db      	uxtb	r3, r3
 800a412:	2b05      	cmp	r3, #5
 800a414:	d136      	bne.n	800a484 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f022 0216 	bic.w	r2, r2, #22
 800a424:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	695a      	ldr	r2, [r3, #20]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a434:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d103      	bne.n	800a446 <HAL_DMA_IRQHandler+0x1da>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a442:	2b00      	cmp	r3, #0
 800a444:	d007      	beq.n	800a456 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f022 0208 	bic.w	r2, r2, #8
 800a454:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a45a:	223f      	movs	r2, #63	; 0x3f
 800a45c:	409a      	lsls	r2, r3
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2201      	movs	r2, #1
 800a466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a476:	2b00      	cmp	r3, #0
 800a478:	d07e      	beq.n	800a578 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	4798      	blx	r3
        }
        return;
 800a482:	e079      	b.n	800a578 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d01d      	beq.n	800a4ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10d      	bne.n	800a4bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d031      	beq.n	800a50c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	4798      	blx	r3
 800a4b0:	e02c      	b.n	800a50c <HAL_DMA_IRQHandler+0x2a0>
 800a4b2:	bf00      	nop
 800a4b4:	20000004 	.word	0x20000004
 800a4b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d023      	beq.n	800a50c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	4798      	blx	r3
 800a4cc:	e01e      	b.n	800a50c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10f      	bne.n	800a4fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f022 0210 	bic.w	r2, r2, #16
 800a4ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a500:	2b00      	cmp	r3, #0
 800a502:	d003      	beq.n	800a50c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a510:	2b00      	cmp	r3, #0
 800a512:	d032      	beq.n	800a57a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a518:	f003 0301 	and.w	r3, r3, #1
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d022      	beq.n	800a566 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2205      	movs	r2, #5
 800a524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f022 0201 	bic.w	r2, r2, #1
 800a536:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	3301      	adds	r3, #1
 800a53c:	60bb      	str	r3, [r7, #8]
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	429a      	cmp	r2, r3
 800a542:	d307      	bcc.n	800a554 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f003 0301 	and.w	r3, r3, #1
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1f2      	bne.n	800a538 <HAL_DMA_IRQHandler+0x2cc>
 800a552:	e000      	b.n	800a556 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800a554:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2201      	movs	r2, #1
 800a55a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d005      	beq.n	800a57a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	4798      	blx	r3
 800a576:	e000      	b.n	800a57a <HAL_DMA_IRQHandler+0x30e>
        return;
 800a578:	bf00      	nop
    }
  }
}
 800a57a:	3718      	adds	r7, #24
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
 800a58c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a59c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	683a      	ldr	r2, [r7, #0]
 800a5a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	2b40      	cmp	r3, #64	; 0x40
 800a5ac:	d108      	bne.n	800a5c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	68ba      	ldr	r2, [r7, #8]
 800a5bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a5be:	e007      	b.n	800a5d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	60da      	str	r2, [r3, #12]
}
 800a5d0:	bf00      	nop
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	3b10      	subs	r3, #16
 800a5ec:	4a14      	ldr	r2, [pc, #80]	; (800a640 <DMA_CalcBaseAndBitshift+0x64>)
 800a5ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a5f2:	091b      	lsrs	r3, r3, #4
 800a5f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a5f6:	4a13      	ldr	r2, [pc, #76]	; (800a644 <DMA_CalcBaseAndBitshift+0x68>)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	461a      	mov	r2, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2b03      	cmp	r3, #3
 800a608:	d909      	bls.n	800a61e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a612:	f023 0303 	bic.w	r3, r3, #3
 800a616:	1d1a      	adds	r2, r3, #4
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	659a      	str	r2, [r3, #88]	; 0x58
 800a61c:	e007      	b.n	800a62e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a626:	f023 0303 	bic.w	r3, r3, #3
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a632:	4618      	mov	r0, r3
 800a634:	3714      	adds	r7, #20
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	aaaaaaab 	.word	0xaaaaaaab
 800a644:	0802aa14 	.word	0x0802aa14

0800a648 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a650:	2300      	movs	r3, #0
 800a652:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a658:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d11f      	bne.n	800a6a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	2b03      	cmp	r3, #3
 800a666:	d856      	bhi.n	800a716 <DMA_CheckFifoParam+0xce>
 800a668:	a201      	add	r2, pc, #4	; (adr r2, 800a670 <DMA_CheckFifoParam+0x28>)
 800a66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a66e:	bf00      	nop
 800a670:	0800a681 	.word	0x0800a681
 800a674:	0800a693 	.word	0x0800a693
 800a678:	0800a681 	.word	0x0800a681
 800a67c:	0800a717 	.word	0x0800a717
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d046      	beq.n	800a71a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a690:	e043      	b.n	800a71a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a696:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a69a:	d140      	bne.n	800a71e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a6a0:	e03d      	b.n	800a71e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6aa:	d121      	bne.n	800a6f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	2b03      	cmp	r3, #3
 800a6b0:	d837      	bhi.n	800a722 <DMA_CheckFifoParam+0xda>
 800a6b2:	a201      	add	r2, pc, #4	; (adr r2, 800a6b8 <DMA_CheckFifoParam+0x70>)
 800a6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b8:	0800a6c9 	.word	0x0800a6c9
 800a6bc:	0800a6cf 	.word	0x0800a6cf
 800a6c0:	0800a6c9 	.word	0x0800a6c9
 800a6c4:	0800a6e1 	.word	0x0800a6e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a6cc:	e030      	b.n	800a730 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d025      	beq.n	800a726 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a6de:	e022      	b.n	800a726 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a6e8:	d11f      	bne.n	800a72a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a6ee:	e01c      	b.n	800a72a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d903      	bls.n	800a6fe <DMA_CheckFifoParam+0xb6>
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	2b03      	cmp	r3, #3
 800a6fa:	d003      	beq.n	800a704 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a6fc:	e018      	b.n	800a730 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	73fb      	strb	r3, [r7, #15]
      break;
 800a702:	e015      	b.n	800a730 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00e      	beq.n	800a72e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a710:	2301      	movs	r3, #1
 800a712:	73fb      	strb	r3, [r7, #15]
      break;
 800a714:	e00b      	b.n	800a72e <DMA_CheckFifoParam+0xe6>
      break;
 800a716:	bf00      	nop
 800a718:	e00a      	b.n	800a730 <DMA_CheckFifoParam+0xe8>
      break;
 800a71a:	bf00      	nop
 800a71c:	e008      	b.n	800a730 <DMA_CheckFifoParam+0xe8>
      break;
 800a71e:	bf00      	nop
 800a720:	e006      	b.n	800a730 <DMA_CheckFifoParam+0xe8>
      break;
 800a722:	bf00      	nop
 800a724:	e004      	b.n	800a730 <DMA_CheckFifoParam+0xe8>
      break;
 800a726:	bf00      	nop
 800a728:	e002      	b.n	800a730 <DMA_CheckFifoParam+0xe8>
      break;   
 800a72a:	bf00      	nop
 800a72c:	e000      	b.n	800a730 <DMA_CheckFifoParam+0xe8>
      break;
 800a72e:	bf00      	nop
    }
  } 
  
  return status; 
 800a730:	7bfb      	ldrb	r3, [r7, #15]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3714      	adds	r7, #20
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop

0800a740 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a74e:	2301      	movs	r3, #1
 800a750:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a752:	4b23      	ldr	r3, [pc, #140]	; (800a7e0 <HAL_FLASH_Program+0xa0>)
 800a754:	7e1b      	ldrb	r3, [r3, #24]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d101      	bne.n	800a75e <HAL_FLASH_Program+0x1e>
 800a75a:	2302      	movs	r3, #2
 800a75c:	e03b      	b.n	800a7d6 <HAL_FLASH_Program+0x96>
 800a75e:	4b20      	ldr	r3, [pc, #128]	; (800a7e0 <HAL_FLASH_Program+0xa0>)
 800a760:	2201      	movs	r2, #1
 800a762:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a764:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a768:	f000 f87c 	bl	800a864 <FLASH_WaitForLastOperation>
 800a76c:	4603      	mov	r3, r0
 800a76e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800a770:	7dfb      	ldrb	r3, [r7, #23]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d12b      	bne.n	800a7ce <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d105      	bne.n	800a788 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800a77c:	783b      	ldrb	r3, [r7, #0]
 800a77e:	4619      	mov	r1, r3
 800a780:	68b8      	ldr	r0, [r7, #8]
 800a782:	f000 f927 	bl	800a9d4 <FLASH_Program_Byte>
 800a786:	e016      	b.n	800a7b6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d105      	bne.n	800a79a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800a78e:	883b      	ldrh	r3, [r7, #0]
 800a790:	4619      	mov	r1, r3
 800a792:	68b8      	ldr	r0, [r7, #8]
 800a794:	f000 f8fa 	bl	800a98c <FLASH_Program_HalfWord>
 800a798:	e00d      	b.n	800a7b6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	d105      	bne.n	800a7ac <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	68b8      	ldr	r0, [r7, #8]
 800a7a6:	f000 f8cf 	bl	800a948 <FLASH_Program_Word>
 800a7aa:	e004      	b.n	800a7b6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800a7ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7b0:	68b8      	ldr	r0, [r7, #8]
 800a7b2:	f000 f897 	bl	800a8e4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a7b6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a7ba:	f000 f853 	bl	800a864 <FLASH_WaitForLastOperation>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800a7c2:	4b08      	ldr	r3, [pc, #32]	; (800a7e4 <HAL_FLASH_Program+0xa4>)
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	4a07      	ldr	r2, [pc, #28]	; (800a7e4 <HAL_FLASH_Program+0xa4>)
 800a7c8:	f023 0301 	bic.w	r3, r3, #1
 800a7cc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a7ce:	4b04      	ldr	r3, [pc, #16]	; (800a7e0 <HAL_FLASH_Program+0xa0>)
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	761a      	strb	r2, [r3, #24]
  
  return status;
 800a7d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3718      	adds	r7, #24
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	2000094c 	.word	0x2000094c
 800a7e4:	40023c00 	.word	0x40023c00

0800a7e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a7f2:	4b0b      	ldr	r3, [pc, #44]	; (800a820 <HAL_FLASH_Unlock+0x38>)
 800a7f4:	691b      	ldr	r3, [r3, #16]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	da0b      	bge.n	800a812 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a7fa:	4b09      	ldr	r3, [pc, #36]	; (800a820 <HAL_FLASH_Unlock+0x38>)
 800a7fc:	4a09      	ldr	r2, [pc, #36]	; (800a824 <HAL_FLASH_Unlock+0x3c>)
 800a7fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a800:	4b07      	ldr	r3, [pc, #28]	; (800a820 <HAL_FLASH_Unlock+0x38>)
 800a802:	4a09      	ldr	r2, [pc, #36]	; (800a828 <HAL_FLASH_Unlock+0x40>)
 800a804:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a806:	4b06      	ldr	r3, [pc, #24]	; (800a820 <HAL_FLASH_Unlock+0x38>)
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	da01      	bge.n	800a812 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800a812:	79fb      	ldrb	r3, [r7, #7]
}
 800a814:	4618      	mov	r0, r3
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	40023c00 	.word	0x40023c00
 800a824:	45670123 	.word	0x45670123
 800a828:	cdef89ab 	.word	0xcdef89ab

0800a82c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a82c:	b480      	push	{r7}
 800a82e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800a830:	4b05      	ldr	r3, [pc, #20]	; (800a848 <HAL_FLASH_Lock+0x1c>)
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	4a04      	ldr	r2, [pc, #16]	; (800a848 <HAL_FLASH_Lock+0x1c>)
 800a836:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a83a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr
 800a848:	40023c00 	.word	0x40023c00

0800a84c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800a84c:	b480      	push	{r7}
 800a84e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800a850:	4b03      	ldr	r3, [pc, #12]	; (800a860 <HAL_FLASH_GetError+0x14>)
 800a852:	69db      	ldr	r3, [r3, #28]
}  
 800a854:	4618      	mov	r0, r3
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	2000094c 	.word	0x2000094c

0800a864 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a86c:	2300      	movs	r3, #0
 800a86e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a870:	4b1a      	ldr	r3, [pc, #104]	; (800a8dc <FLASH_WaitForLastOperation+0x78>)
 800a872:	2200      	movs	r2, #0
 800a874:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800a876:	f7fe fe3d 	bl	80094f4 <HAL_GetTick>
 800a87a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a87c:	e010      	b.n	800a8a0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a884:	d00c      	beq.n	800a8a0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d007      	beq.n	800a89c <FLASH_WaitForLastOperation+0x38>
 800a88c:	f7fe fe32 	bl	80094f4 <HAL_GetTick>
 800a890:	4602      	mov	r2, r0
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d201      	bcs.n	800a8a0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a89c:	2303      	movs	r3, #3
 800a89e:	e019      	b.n	800a8d4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a8a0:	4b0f      	ldr	r3, [pc, #60]	; (800a8e0 <FLASH_WaitForLastOperation+0x7c>)
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d1e8      	bne.n	800a87e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a8ac:	4b0c      	ldr	r3, [pc, #48]	; (800a8e0 <FLASH_WaitForLastOperation+0x7c>)
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	f003 0301 	and.w	r3, r3, #1
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d002      	beq.n	800a8be <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a8b8:	4b09      	ldr	r3, [pc, #36]	; (800a8e0 <FLASH_WaitForLastOperation+0x7c>)
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a8be:	4b08      	ldr	r3, [pc, #32]	; (800a8e0 <FLASH_WaitForLastOperation+0x7c>)
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d003      	beq.n	800a8d2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a8ca:	f000 f8a5 	bl	800aa18 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e000      	b.n	800a8d4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
  
}  
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	2000094c 	.word	0x2000094c
 800a8e0:	40023c00 	.word	0x40023c00

0800a8e4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a8f0:	4b14      	ldr	r3, [pc, #80]	; (800a944 <FLASH_Program_DoubleWord+0x60>)
 800a8f2:	691b      	ldr	r3, [r3, #16]
 800a8f4:	4a13      	ldr	r2, [pc, #76]	; (800a944 <FLASH_Program_DoubleWord+0x60>)
 800a8f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800a8fc:	4b11      	ldr	r3, [pc, #68]	; (800a944 <FLASH_Program_DoubleWord+0x60>)
 800a8fe:	691b      	ldr	r3, [r3, #16]
 800a900:	4a10      	ldr	r2, [pc, #64]	; (800a944 <FLASH_Program_DoubleWord+0x60>)
 800a902:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a906:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a908:	4b0e      	ldr	r3, [pc, #56]	; (800a944 <FLASH_Program_DoubleWord+0x60>)
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	4a0d      	ldr	r2, [pc, #52]	; (800a944 <FLASH_Program_DoubleWord+0x60>)
 800a90e:	f043 0301 	orr.w	r3, r3, #1
 800a912:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	683a      	ldr	r2, [r7, #0]
 800a918:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800a91a:	f3bf 8f6f 	isb	sy
}
 800a91e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800a920:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a924:	f04f 0200 	mov.w	r2, #0
 800a928:	f04f 0300 	mov.w	r3, #0
 800a92c:	000a      	movs	r2, r1
 800a92e:	2300      	movs	r3, #0
 800a930:	68f9      	ldr	r1, [r7, #12]
 800a932:	3104      	adds	r1, #4
 800a934:	4613      	mov	r3, r2
 800a936:	600b      	str	r3, [r1, #0]
}
 800a938:	bf00      	nop
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr
 800a944:	40023c00 	.word	0x40023c00

0800a948 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a952:	4b0d      	ldr	r3, [pc, #52]	; (800a988 <FLASH_Program_Word+0x40>)
 800a954:	691b      	ldr	r3, [r3, #16]
 800a956:	4a0c      	ldr	r2, [pc, #48]	; (800a988 <FLASH_Program_Word+0x40>)
 800a958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a95c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800a95e:	4b0a      	ldr	r3, [pc, #40]	; (800a988 <FLASH_Program_Word+0x40>)
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	4a09      	ldr	r2, [pc, #36]	; (800a988 <FLASH_Program_Word+0x40>)
 800a964:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a968:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a96a:	4b07      	ldr	r3, [pc, #28]	; (800a988 <FLASH_Program_Word+0x40>)
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	4a06      	ldr	r2, [pc, #24]	; (800a988 <FLASH_Program_Word+0x40>)
 800a970:	f043 0301 	orr.w	r3, r3, #1
 800a974:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	683a      	ldr	r2, [r7, #0]
 800a97a:	601a      	str	r2, [r3, #0]
}
 800a97c:	bf00      	nop
 800a97e:	370c      	adds	r7, #12
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr
 800a988:	40023c00 	.word	0x40023c00

0800a98c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	460b      	mov	r3, r1
 800a996:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a998:	4b0d      	ldr	r3, [pc, #52]	; (800a9d0 <FLASH_Program_HalfWord+0x44>)
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	4a0c      	ldr	r2, [pc, #48]	; (800a9d0 <FLASH_Program_HalfWord+0x44>)
 800a99e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800a9a4:	4b0a      	ldr	r3, [pc, #40]	; (800a9d0 <FLASH_Program_HalfWord+0x44>)
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	4a09      	ldr	r2, [pc, #36]	; (800a9d0 <FLASH_Program_HalfWord+0x44>)
 800a9aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a9b0:	4b07      	ldr	r3, [pc, #28]	; (800a9d0 <FLASH_Program_HalfWord+0x44>)
 800a9b2:	691b      	ldr	r3, [r3, #16]
 800a9b4:	4a06      	ldr	r2, [pc, #24]	; (800a9d0 <FLASH_Program_HalfWord+0x44>)
 800a9b6:	f043 0301 	orr.w	r3, r3, #1
 800a9ba:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	887a      	ldrh	r2, [r7, #2]
 800a9c0:	801a      	strh	r2, [r3, #0]
}
 800a9c2:	bf00      	nop
 800a9c4:	370c      	adds	r7, #12
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	40023c00 	.word	0x40023c00

0800a9d4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a9e0:	4b0c      	ldr	r3, [pc, #48]	; (800aa14 <FLASH_Program_Byte+0x40>)
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	4a0b      	ldr	r2, [pc, #44]	; (800aa14 <FLASH_Program_Byte+0x40>)
 800a9e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800a9ec:	4b09      	ldr	r3, [pc, #36]	; (800aa14 <FLASH_Program_Byte+0x40>)
 800a9ee:	4a09      	ldr	r2, [pc, #36]	; (800aa14 <FLASH_Program_Byte+0x40>)
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a9f4:	4b07      	ldr	r3, [pc, #28]	; (800aa14 <FLASH_Program_Byte+0x40>)
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	4a06      	ldr	r2, [pc, #24]	; (800aa14 <FLASH_Program_Byte+0x40>)
 800a9fa:	f043 0301 	orr.w	r3, r3, #1
 800a9fe:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	78fa      	ldrb	r2, [r7, #3]
 800aa04:	701a      	strb	r2, [r3, #0]
}
 800aa06:	bf00      	nop
 800aa08:	370c      	adds	r7, #12
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	40023c00 	.word	0x40023c00

0800aa18 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800aa18:	b480      	push	{r7}
 800aa1a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800aa1c:	4b27      	ldr	r3, [pc, #156]	; (800aabc <FLASH_SetErrorCode+0xa4>)
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	f003 0310 	and.w	r3, r3, #16
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d008      	beq.n	800aa3a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800aa28:	4b25      	ldr	r3, [pc, #148]	; (800aac0 <FLASH_SetErrorCode+0xa8>)
 800aa2a:	69db      	ldr	r3, [r3, #28]
 800aa2c:	f043 0310 	orr.w	r3, r3, #16
 800aa30:	4a23      	ldr	r2, [pc, #140]	; (800aac0 <FLASH_SetErrorCode+0xa8>)
 800aa32:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800aa34:	4b21      	ldr	r3, [pc, #132]	; (800aabc <FLASH_SetErrorCode+0xa4>)
 800aa36:	2210      	movs	r2, #16
 800aa38:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800aa3a:	4b20      	ldr	r3, [pc, #128]	; (800aabc <FLASH_SetErrorCode+0xa4>)
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	f003 0320 	and.w	r3, r3, #32
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d008      	beq.n	800aa58 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800aa46:	4b1e      	ldr	r3, [pc, #120]	; (800aac0 <FLASH_SetErrorCode+0xa8>)
 800aa48:	69db      	ldr	r3, [r3, #28]
 800aa4a:	f043 0308 	orr.w	r3, r3, #8
 800aa4e:	4a1c      	ldr	r2, [pc, #112]	; (800aac0 <FLASH_SetErrorCode+0xa8>)
 800aa50:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800aa52:	4b1a      	ldr	r3, [pc, #104]	; (800aabc <FLASH_SetErrorCode+0xa4>)
 800aa54:	2220      	movs	r2, #32
 800aa56:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800aa58:	4b18      	ldr	r3, [pc, #96]	; (800aabc <FLASH_SetErrorCode+0xa4>)
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d008      	beq.n	800aa76 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800aa64:	4b16      	ldr	r3, [pc, #88]	; (800aac0 <FLASH_SetErrorCode+0xa8>)
 800aa66:	69db      	ldr	r3, [r3, #28]
 800aa68:	f043 0304 	orr.w	r3, r3, #4
 800aa6c:	4a14      	ldr	r2, [pc, #80]	; (800aac0 <FLASH_SetErrorCode+0xa8>)
 800aa6e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800aa70:	4b12      	ldr	r3, [pc, #72]	; (800aabc <FLASH_SetErrorCode+0xa4>)
 800aa72:	2240      	movs	r2, #64	; 0x40
 800aa74:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800aa76:	4b11      	ldr	r3, [pc, #68]	; (800aabc <FLASH_SetErrorCode+0xa4>)
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d008      	beq.n	800aa94 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800aa82:	4b0f      	ldr	r3, [pc, #60]	; (800aac0 <FLASH_SetErrorCode+0xa8>)
 800aa84:	69db      	ldr	r3, [r3, #28]
 800aa86:	f043 0302 	orr.w	r3, r3, #2
 800aa8a:	4a0d      	ldr	r2, [pc, #52]	; (800aac0 <FLASH_SetErrorCode+0xa8>)
 800aa8c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800aa8e:	4b0b      	ldr	r3, [pc, #44]	; (800aabc <FLASH_SetErrorCode+0xa4>)
 800aa90:	2280      	movs	r2, #128	; 0x80
 800aa92:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800aa94:	4b09      	ldr	r3, [pc, #36]	; (800aabc <FLASH_SetErrorCode+0xa4>)
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	f003 0302 	and.w	r3, r3, #2
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d008      	beq.n	800aab2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800aaa0:	4b07      	ldr	r3, [pc, #28]	; (800aac0 <FLASH_SetErrorCode+0xa8>)
 800aaa2:	69db      	ldr	r3, [r3, #28]
 800aaa4:	f043 0320 	orr.w	r3, r3, #32
 800aaa8:	4a05      	ldr	r2, [pc, #20]	; (800aac0 <FLASH_SetErrorCode+0xa8>)
 800aaaa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800aaac:	4b03      	ldr	r3, [pc, #12]	; (800aabc <FLASH_SetErrorCode+0xa4>)
 800aaae:	2202      	movs	r2, #2
 800aab0:	60da      	str	r2, [r3, #12]
  }
}
 800aab2:	bf00      	nop
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr
 800aabc:	40023c00 	.word	0x40023c00
 800aac0:	2000094c 	.word	0x2000094c

0800aac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b089      	sub	sp, #36	; 0x24
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800aace:	2300      	movs	r3, #0
 800aad0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800aad2:	2300      	movs	r3, #0
 800aad4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800aad6:	2300      	movs	r3, #0
 800aad8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aada:	2300      	movs	r3, #0
 800aadc:	61fb      	str	r3, [r7, #28]
 800aade:	e16b      	b.n	800adb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800aae0:	2201      	movs	r2, #1
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	fa02 f303 	lsl.w	r3, r2, r3
 800aae8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	697a      	ldr	r2, [r7, #20]
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800aaf4:	693a      	ldr	r2, [r7, #16]
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	f040 815a 	bne.w	800adb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	f003 0303 	and.w	r3, r3, #3
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d005      	beq.n	800ab16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	d130      	bne.n	800ab78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	005b      	lsls	r3, r3, #1
 800ab20:	2203      	movs	r2, #3
 800ab22:	fa02 f303 	lsl.w	r3, r2, r3
 800ab26:	43db      	mvns	r3, r3
 800ab28:	69ba      	ldr	r2, [r7, #24]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	68da      	ldr	r2, [r3, #12]
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	005b      	lsls	r3, r3, #1
 800ab36:	fa02 f303 	lsl.w	r3, r2, r3
 800ab3a:	69ba      	ldr	r2, [r7, #24]
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	69ba      	ldr	r2, [r7, #24]
 800ab44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	fa02 f303 	lsl.w	r3, r2, r3
 800ab54:	43db      	mvns	r3, r3
 800ab56:	69ba      	ldr	r2, [r7, #24]
 800ab58:	4013      	ands	r3, r2
 800ab5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	091b      	lsrs	r3, r3, #4
 800ab62:	f003 0201 	and.w	r2, r3, #1
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	fa02 f303 	lsl.w	r3, r2, r3
 800ab6c:	69ba      	ldr	r2, [r7, #24]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	69ba      	ldr	r2, [r7, #24]
 800ab76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	f003 0303 	and.w	r3, r3, #3
 800ab80:	2b03      	cmp	r3, #3
 800ab82:	d017      	beq.n	800abb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	005b      	lsls	r3, r3, #1
 800ab8e:	2203      	movs	r2, #3
 800ab90:	fa02 f303 	lsl.w	r3, r2, r3
 800ab94:	43db      	mvns	r3, r3
 800ab96:	69ba      	ldr	r2, [r7, #24]
 800ab98:	4013      	ands	r3, r2
 800ab9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	689a      	ldr	r2, [r3, #8]
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	005b      	lsls	r3, r3, #1
 800aba4:	fa02 f303 	lsl.w	r3, r2, r3
 800aba8:	69ba      	ldr	r2, [r7, #24]
 800abaa:	4313      	orrs	r3, r2
 800abac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	69ba      	ldr	r2, [r7, #24]
 800abb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	f003 0303 	and.w	r3, r3, #3
 800abbc:	2b02      	cmp	r3, #2
 800abbe:	d123      	bne.n	800ac08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	08da      	lsrs	r2, r3, #3
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	3208      	adds	r2, #8
 800abc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	f003 0307 	and.w	r3, r3, #7
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	220f      	movs	r2, #15
 800abd8:	fa02 f303 	lsl.w	r3, r2, r3
 800abdc:	43db      	mvns	r3, r3
 800abde:	69ba      	ldr	r2, [r7, #24]
 800abe0:	4013      	ands	r3, r2
 800abe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	691a      	ldr	r2, [r3, #16]
 800abe8:	69fb      	ldr	r3, [r7, #28]
 800abea:	f003 0307 	and.w	r3, r3, #7
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	fa02 f303 	lsl.w	r3, r2, r3
 800abf4:	69ba      	ldr	r2, [r7, #24]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	08da      	lsrs	r2, r3, #3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	3208      	adds	r2, #8
 800ac02:	69b9      	ldr	r1, [r7, #24]
 800ac04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	005b      	lsls	r3, r3, #1
 800ac12:	2203      	movs	r2, #3
 800ac14:	fa02 f303 	lsl.w	r3, r2, r3
 800ac18:	43db      	mvns	r3, r3
 800ac1a:	69ba      	ldr	r2, [r7, #24]
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	f003 0203 	and.w	r2, r3, #3
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	005b      	lsls	r3, r3, #1
 800ac2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac30:	69ba      	ldr	r2, [r7, #24]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	69ba      	ldr	r2, [r7, #24]
 800ac3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f000 80b4 	beq.w	800adb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	60fb      	str	r3, [r7, #12]
 800ac4e:	4b60      	ldr	r3, [pc, #384]	; (800add0 <HAL_GPIO_Init+0x30c>)
 800ac50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac52:	4a5f      	ldr	r2, [pc, #380]	; (800add0 <HAL_GPIO_Init+0x30c>)
 800ac54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac58:	6453      	str	r3, [r2, #68]	; 0x44
 800ac5a:	4b5d      	ldr	r3, [pc, #372]	; (800add0 <HAL_GPIO_Init+0x30c>)
 800ac5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac62:	60fb      	str	r3, [r7, #12]
 800ac64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ac66:	4a5b      	ldr	r2, [pc, #364]	; (800add4 <HAL_GPIO_Init+0x310>)
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	089b      	lsrs	r3, r3, #2
 800ac6c:	3302      	adds	r3, #2
 800ac6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	f003 0303 	and.w	r3, r3, #3
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	220f      	movs	r2, #15
 800ac7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac82:	43db      	mvns	r3, r3
 800ac84:	69ba      	ldr	r2, [r7, #24]
 800ac86:	4013      	ands	r3, r2
 800ac88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4a52      	ldr	r2, [pc, #328]	; (800add8 <HAL_GPIO_Init+0x314>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d02b      	beq.n	800acea <HAL_GPIO_Init+0x226>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4a51      	ldr	r2, [pc, #324]	; (800addc <HAL_GPIO_Init+0x318>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d025      	beq.n	800ace6 <HAL_GPIO_Init+0x222>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a50      	ldr	r2, [pc, #320]	; (800ade0 <HAL_GPIO_Init+0x31c>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d01f      	beq.n	800ace2 <HAL_GPIO_Init+0x21e>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a4f      	ldr	r2, [pc, #316]	; (800ade4 <HAL_GPIO_Init+0x320>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d019      	beq.n	800acde <HAL_GPIO_Init+0x21a>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a4e      	ldr	r2, [pc, #312]	; (800ade8 <HAL_GPIO_Init+0x324>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d013      	beq.n	800acda <HAL_GPIO_Init+0x216>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a4d      	ldr	r2, [pc, #308]	; (800adec <HAL_GPIO_Init+0x328>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d00d      	beq.n	800acd6 <HAL_GPIO_Init+0x212>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a4c      	ldr	r2, [pc, #304]	; (800adf0 <HAL_GPIO_Init+0x32c>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d007      	beq.n	800acd2 <HAL_GPIO_Init+0x20e>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a4b      	ldr	r2, [pc, #300]	; (800adf4 <HAL_GPIO_Init+0x330>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d101      	bne.n	800acce <HAL_GPIO_Init+0x20a>
 800acca:	2307      	movs	r3, #7
 800accc:	e00e      	b.n	800acec <HAL_GPIO_Init+0x228>
 800acce:	2308      	movs	r3, #8
 800acd0:	e00c      	b.n	800acec <HAL_GPIO_Init+0x228>
 800acd2:	2306      	movs	r3, #6
 800acd4:	e00a      	b.n	800acec <HAL_GPIO_Init+0x228>
 800acd6:	2305      	movs	r3, #5
 800acd8:	e008      	b.n	800acec <HAL_GPIO_Init+0x228>
 800acda:	2304      	movs	r3, #4
 800acdc:	e006      	b.n	800acec <HAL_GPIO_Init+0x228>
 800acde:	2303      	movs	r3, #3
 800ace0:	e004      	b.n	800acec <HAL_GPIO_Init+0x228>
 800ace2:	2302      	movs	r3, #2
 800ace4:	e002      	b.n	800acec <HAL_GPIO_Init+0x228>
 800ace6:	2301      	movs	r3, #1
 800ace8:	e000      	b.n	800acec <HAL_GPIO_Init+0x228>
 800acea:	2300      	movs	r3, #0
 800acec:	69fa      	ldr	r2, [r7, #28]
 800acee:	f002 0203 	and.w	r2, r2, #3
 800acf2:	0092      	lsls	r2, r2, #2
 800acf4:	4093      	lsls	r3, r2
 800acf6:	69ba      	ldr	r2, [r7, #24]
 800acf8:	4313      	orrs	r3, r2
 800acfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800acfc:	4935      	ldr	r1, [pc, #212]	; (800add4 <HAL_GPIO_Init+0x310>)
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	089b      	lsrs	r3, r3, #2
 800ad02:	3302      	adds	r3, #2
 800ad04:	69ba      	ldr	r2, [r7, #24]
 800ad06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ad0a:	4b3b      	ldr	r3, [pc, #236]	; (800adf8 <HAL_GPIO_Init+0x334>)
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	43db      	mvns	r3, r3
 800ad14:	69ba      	ldr	r2, [r7, #24]
 800ad16:	4013      	ands	r3, r2
 800ad18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d003      	beq.n	800ad2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800ad26:	69ba      	ldr	r2, [r7, #24]
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ad2e:	4a32      	ldr	r2, [pc, #200]	; (800adf8 <HAL_GPIO_Init+0x334>)
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ad34:	4b30      	ldr	r3, [pc, #192]	; (800adf8 <HAL_GPIO_Init+0x334>)
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	43db      	mvns	r3, r3
 800ad3e:	69ba      	ldr	r2, [r7, #24]
 800ad40:	4013      	ands	r3, r2
 800ad42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d003      	beq.n	800ad58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800ad50:	69ba      	ldr	r2, [r7, #24]
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ad58:	4a27      	ldr	r2, [pc, #156]	; (800adf8 <HAL_GPIO_Init+0x334>)
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800ad5e:	4b26      	ldr	r3, [pc, #152]	; (800adf8 <HAL_GPIO_Init+0x334>)
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	43db      	mvns	r3, r3
 800ad68:	69ba      	ldr	r2, [r7, #24]
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d003      	beq.n	800ad82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800ad7a:	69ba      	ldr	r2, [r7, #24]
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ad82:	4a1d      	ldr	r2, [pc, #116]	; (800adf8 <HAL_GPIO_Init+0x334>)
 800ad84:	69bb      	ldr	r3, [r7, #24]
 800ad86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ad88:	4b1b      	ldr	r3, [pc, #108]	; (800adf8 <HAL_GPIO_Init+0x334>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	43db      	mvns	r3, r3
 800ad92:	69ba      	ldr	r2, [r7, #24]
 800ad94:	4013      	ands	r3, r2
 800ad96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d003      	beq.n	800adac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800ada4:	69ba      	ldr	r2, [r7, #24]
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	4313      	orrs	r3, r2
 800adaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800adac:	4a12      	ldr	r2, [pc, #72]	; (800adf8 <HAL_GPIO_Init+0x334>)
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	3301      	adds	r3, #1
 800adb6:	61fb      	str	r3, [r7, #28]
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	2b0f      	cmp	r3, #15
 800adbc:	f67f ae90 	bls.w	800aae0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800adc0:	bf00      	nop
 800adc2:	bf00      	nop
 800adc4:	3724      	adds	r7, #36	; 0x24
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	40023800 	.word	0x40023800
 800add4:	40013800 	.word	0x40013800
 800add8:	40020000 	.word	0x40020000
 800addc:	40020400 	.word	0x40020400
 800ade0:	40020800 	.word	0x40020800
 800ade4:	40020c00 	.word	0x40020c00
 800ade8:	40021000 	.word	0x40021000
 800adec:	40021400 	.word	0x40021400
 800adf0:	40021800 	.word	0x40021800
 800adf4:	40021c00 	.word	0x40021c00
 800adf8:	40013c00 	.word	0x40013c00

0800adfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	460b      	mov	r3, r1
 800ae06:	807b      	strh	r3, [r7, #2]
 800ae08:	4613      	mov	r3, r2
 800ae0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ae0c:	787b      	ldrb	r3, [r7, #1]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d003      	beq.n	800ae1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ae12:	887a      	ldrh	r2, [r7, #2]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ae18:	e003      	b.n	800ae22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ae1a:	887b      	ldrh	r3, [r7, #2]
 800ae1c:	041a      	lsls	r2, r3, #16
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	619a      	str	r2, [r3, #24]
}
 800ae22:	bf00      	nop
 800ae24:	370c      	adds	r7, #12
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
	...

0800ae30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	4603      	mov	r3, r0
 800ae38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ae3a:	4b08      	ldr	r3, [pc, #32]	; (800ae5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ae3c:	695a      	ldr	r2, [r3, #20]
 800ae3e:	88fb      	ldrh	r3, [r7, #6]
 800ae40:	4013      	ands	r3, r2
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d006      	beq.n	800ae54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ae46:	4a05      	ldr	r2, [pc, #20]	; (800ae5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ae48:	88fb      	ldrh	r3, [r7, #6]
 800ae4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ae4c:	88fb      	ldrh	r3, [r7, #6]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7f7 fa80 	bl	8002354 <HAL_GPIO_EXTI_Callback>
  }
}
 800ae54:	bf00      	nop
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	40013c00 	.word	0x40013c00

0800ae60 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ae60:	b590      	push	{r4, r7, lr}
 800ae62:	b08d      	sub	sp, #52	; 0x34
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae6e:	6a3b      	ldr	r3, [r7, #32]
 800ae70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f006 ff37 	bl	8011cea <USB_GetMode>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f040 848a 	bne.w	800b798 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f006 fe9b 	bl	8011bc4 <USB_ReadInterrupts>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	f000 8480 	beq.w	800b796 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	0a1b      	lsrs	r3, r3, #8
 800aea0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f006 fe88 	bl	8011bc4 <USB_ReadInterrupts>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	f003 0302 	and.w	r3, r3, #2
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d107      	bne.n	800aece <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	695a      	ldr	r2, [r3, #20]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f002 0202 	and.w	r2, r2, #2
 800aecc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f006 fe76 	bl	8011bc4 <USB_ReadInterrupts>
 800aed8:	4603      	mov	r3, r0
 800aeda:	f003 0310 	and.w	r3, r3, #16
 800aede:	2b10      	cmp	r3, #16
 800aee0:	d161      	bne.n	800afa6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	699a      	ldr	r2, [r3, #24]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f022 0210 	bic.w	r2, r2, #16
 800aef0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800aef2:	6a3b      	ldr	r3, [r7, #32]
 800aef4:	6a1b      	ldr	r3, [r3, #32]
 800aef6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	f003 020f 	and.w	r2, r3, #15
 800aefe:	4613      	mov	r3, r2
 800af00:	00db      	lsls	r3, r3, #3
 800af02:	4413      	add	r3, r2
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	4413      	add	r3, r2
 800af0e:	3304      	adds	r3, #4
 800af10:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	0c5b      	lsrs	r3, r3, #17
 800af16:	f003 030f 	and.w	r3, r3, #15
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d124      	bne.n	800af68 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800af1e:	69ba      	ldr	r2, [r7, #24]
 800af20:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800af24:	4013      	ands	r3, r2
 800af26:	2b00      	cmp	r3, #0
 800af28:	d035      	beq.n	800af96 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	091b      	lsrs	r3, r3, #4
 800af32:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800af34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af38:	b29b      	uxth	r3, r3
 800af3a:	461a      	mov	r2, r3
 800af3c:	6a38      	ldr	r0, [r7, #32]
 800af3e:	f006 fcef 	bl	8011920 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	691a      	ldr	r2, [r3, #16]
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	091b      	lsrs	r3, r3, #4
 800af4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af4e:	441a      	add	r2, r3
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	6a1a      	ldr	r2, [r3, #32]
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	091b      	lsrs	r3, r3, #4
 800af5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af60:	441a      	add	r2, r3
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	621a      	str	r2, [r3, #32]
 800af66:	e016      	b.n	800af96 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	0c5b      	lsrs	r3, r3, #17
 800af6c:	f003 030f 	and.w	r3, r3, #15
 800af70:	2b06      	cmp	r3, #6
 800af72:	d110      	bne.n	800af96 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800af7a:	2208      	movs	r2, #8
 800af7c:	4619      	mov	r1, r3
 800af7e:	6a38      	ldr	r0, [r7, #32]
 800af80:	f006 fcce 	bl	8011920 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	6a1a      	ldr	r2, [r3, #32]
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	091b      	lsrs	r3, r3, #4
 800af8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af90:	441a      	add	r2, r3
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	699a      	ldr	r2, [r3, #24]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f042 0210 	orr.w	r2, r2, #16
 800afa4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4618      	mov	r0, r3
 800afac:	f006 fe0a 	bl	8011bc4 <USB_ReadInterrupts>
 800afb0:	4603      	mov	r3, r0
 800afb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800afb6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800afba:	f040 80a7 	bne.w	800b10c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800afbe:	2300      	movs	r3, #0
 800afc0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4618      	mov	r0, r3
 800afc8:	f006 fe0f 	bl	8011bea <USB_ReadDevAllOutEpInterrupt>
 800afcc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800afce:	e099      	b.n	800b104 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800afd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd2:	f003 0301 	and.w	r3, r3, #1
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	f000 808e 	beq.w	800b0f8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afe2:	b2d2      	uxtb	r2, r2
 800afe4:	4611      	mov	r1, r2
 800afe6:	4618      	mov	r0, r3
 800afe8:	f006 fe33 	bl	8011c52 <USB_ReadDevOutEPInterrupt>
 800afec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	f003 0301 	and.w	r3, r3, #1
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00c      	beq.n	800b012 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800aff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affa:	015a      	lsls	r2, r3, #5
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	4413      	add	r3, r2
 800b000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b004:	461a      	mov	r2, r3
 800b006:	2301      	movs	r3, #1
 800b008:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b00a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 fe61 	bl	800bcd4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	f003 0308 	and.w	r3, r3, #8
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00c      	beq.n	800b036 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01e:	015a      	lsls	r2, r3, #5
 800b020:	69fb      	ldr	r3, [r7, #28]
 800b022:	4413      	add	r3, r2
 800b024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b028:	461a      	mov	r2, r3
 800b02a:	2308      	movs	r3, #8
 800b02c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b02e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 ff37 	bl	800bea4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	f003 0310 	and.w	r3, r3, #16
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d008      	beq.n	800b052 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	015a      	lsls	r2, r3, #5
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	4413      	add	r3, r2
 800b048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b04c:	461a      	mov	r2, r3
 800b04e:	2310      	movs	r3, #16
 800b050:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	f003 0302 	and.w	r3, r3, #2
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d030      	beq.n	800b0be <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b05c:	6a3b      	ldr	r3, [r7, #32]
 800b05e:	695b      	ldr	r3, [r3, #20]
 800b060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b064:	2b80      	cmp	r3, #128	; 0x80
 800b066:	d109      	bne.n	800b07c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	69fa      	ldr	r2, [r7, #28]
 800b072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b076:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b07a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b07c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b07e:	4613      	mov	r3, r2
 800b080:	00db      	lsls	r3, r3, #3
 800b082:	4413      	add	r3, r2
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	4413      	add	r3, r2
 800b08e:	3304      	adds	r3, #4
 800b090:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	78db      	ldrb	r3, [r3, #3]
 800b096:	2b01      	cmp	r3, #1
 800b098:	d108      	bne.n	800b0ac <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	2200      	movs	r2, #0
 800b09e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f009 fcaa 	bl	8014a00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ae:	015a      	lsls	r2, r3, #5
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	4413      	add	r3, r2
 800b0b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	2302      	movs	r3, #2
 800b0bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	f003 0320 	and.w	r3, r3, #32
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d008      	beq.n	800b0da <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ca:	015a      	lsls	r2, r3, #5
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	2320      	movs	r3, #32
 800b0d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d009      	beq.n	800b0f8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e6:	015a      	lsls	r2, r3, #5
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	4413      	add	r3, r2
 800b0ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b0f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b100:	085b      	lsrs	r3, r3, #1
 800b102:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b106:	2b00      	cmp	r3, #0
 800b108:	f47f af62 	bne.w	800afd0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4618      	mov	r0, r3
 800b112:	f006 fd57 	bl	8011bc4 <USB_ReadInterrupts>
 800b116:	4603      	mov	r3, r0
 800b118:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b11c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b120:	f040 80db 	bne.w	800b2da <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4618      	mov	r0, r3
 800b12a:	f006 fd78 	bl	8011c1e <USB_ReadDevAllInEpInterrupt>
 800b12e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b130:	2300      	movs	r3, #0
 800b132:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b134:	e0cd      	b.n	800b2d2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b138:	f003 0301 	and.w	r3, r3, #1
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f000 80c2 	beq.w	800b2c6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b148:	b2d2      	uxtb	r2, r2
 800b14a:	4611      	mov	r1, r2
 800b14c:	4618      	mov	r0, r3
 800b14e:	f006 fd9e 	bl	8011c8e <USB_ReadDevInEPInterrupt>
 800b152:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	f003 0301 	and.w	r3, r3, #1
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d057      	beq.n	800b20e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b160:	f003 030f 	and.w	r3, r3, #15
 800b164:	2201      	movs	r2, #1
 800b166:	fa02 f303 	lsl.w	r3, r2, r3
 800b16a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	43db      	mvns	r3, r3
 800b178:	69f9      	ldr	r1, [r7, #28]
 800b17a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b17e:	4013      	ands	r3, r2
 800b180:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b184:	015a      	lsls	r2, r3, #5
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	4413      	add	r3, r2
 800b18a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b18e:	461a      	mov	r2, r3
 800b190:	2301      	movs	r3, #1
 800b192:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d132      	bne.n	800b202 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b19c:	6879      	ldr	r1, [r7, #4]
 800b19e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1a0:	4613      	mov	r3, r2
 800b1a2:	00db      	lsls	r3, r3, #3
 800b1a4:	4413      	add	r3, r2
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	440b      	add	r3, r1
 800b1aa:	334c      	adds	r3, #76	; 0x4c
 800b1ac:	6819      	ldr	r1, [r3, #0]
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	00db      	lsls	r3, r3, #3
 800b1b6:	4413      	add	r3, r2
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4403      	add	r3, r0
 800b1bc:	3348      	adds	r3, #72	; 0x48
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4419      	add	r1, r3
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	00db      	lsls	r3, r3, #3
 800b1ca:	4413      	add	r3, r2
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	4403      	add	r3, r0
 800b1d0:	334c      	adds	r3, #76	; 0x4c
 800b1d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d113      	bne.n	800b202 <HAL_PCD_IRQHandler+0x3a2>
 800b1da:	6879      	ldr	r1, [r7, #4]
 800b1dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1de:	4613      	mov	r3, r2
 800b1e0:	00db      	lsls	r3, r3, #3
 800b1e2:	4413      	add	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	440b      	add	r3, r1
 800b1e8:	3354      	adds	r3, #84	; 0x54
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d108      	bne.n	800b202 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6818      	ldr	r0, [r3, #0]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	2101      	movs	r1, #1
 800b1fe:	f006 fda5 	bl	8011d4c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b204:	b2db      	uxtb	r3, r3
 800b206:	4619      	mov	r1, r3
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f009 fb74 	bl	80148f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	f003 0308 	and.w	r3, r3, #8
 800b214:	2b00      	cmp	r3, #0
 800b216:	d008      	beq.n	800b22a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21a:	015a      	lsls	r2, r3, #5
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	4413      	add	r3, r2
 800b220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b224:	461a      	mov	r2, r3
 800b226:	2308      	movs	r3, #8
 800b228:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	f003 0310 	and.w	r3, r3, #16
 800b230:	2b00      	cmp	r3, #0
 800b232:	d008      	beq.n	800b246 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b236:	015a      	lsls	r2, r3, #5
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	4413      	add	r3, r2
 800b23c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b240:	461a      	mov	r2, r3
 800b242:	2310      	movs	r3, #16
 800b244:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d008      	beq.n	800b262 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b252:	015a      	lsls	r2, r3, #5
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	4413      	add	r3, r2
 800b258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b25c:	461a      	mov	r2, r3
 800b25e:	2340      	movs	r3, #64	; 0x40
 800b260:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	f003 0302 	and.w	r3, r3, #2
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d023      	beq.n	800b2b4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b26c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b26e:	6a38      	ldr	r0, [r7, #32]
 800b270:	f005 fdee 	bl	8010e50 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b276:	4613      	mov	r3, r2
 800b278:	00db      	lsls	r3, r3, #3
 800b27a:	4413      	add	r3, r2
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	3338      	adds	r3, #56	; 0x38
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	4413      	add	r3, r2
 800b284:	3304      	adds	r3, #4
 800b286:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	78db      	ldrb	r3, [r3, #3]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d108      	bne.n	800b2a2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	2200      	movs	r2, #0
 800b294:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	4619      	mov	r1, r3
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f009 fbc1 	bl	8014a24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a4:	015a      	lsls	r2, r3, #5
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d003      	beq.n	800b2c6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b2be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 fc79 	bl	800bbb8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ce:	085b      	lsrs	r3, r3, #1
 800b2d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f47f af2e 	bne.w	800b136 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f006 fc70 	bl	8011bc4 <USB_ReadInterrupts>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2ee:	d122      	bne.n	800b336 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	69fa      	ldr	r2, [r7, #28]
 800b2fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2fe:	f023 0301 	bic.w	r3, r3, #1
 800b302:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d108      	bne.n	800b320 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b316:	2100      	movs	r1, #0
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 fe09 	bl	800bf30 <HAL_PCDEx_LPM_Callback>
 800b31e:	e002      	b.n	800b326 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f009 fb5f 	bl	80149e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	695a      	ldr	r2, [r3, #20]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b334:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4618      	mov	r0, r3
 800b33c:	f006 fc42 	bl	8011bc4 <USB_ReadInterrupts>
 800b340:	4603      	mov	r3, r0
 800b342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b34a:	d112      	bne.n	800b372 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b34c:	69fb      	ldr	r3, [r7, #28]
 800b34e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	f003 0301 	and.w	r3, r3, #1
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d102      	bne.n	800b362 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f009 fb1b 	bl	8014998 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	695a      	ldr	r2, [r3, #20]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b370:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4618      	mov	r0, r3
 800b378:	f006 fc24 	bl	8011bc4 <USB_ReadInterrupts>
 800b37c:	4603      	mov	r3, r0
 800b37e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b386:	f040 80b7 	bne.w	800b4f8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	69fa      	ldr	r2, [r7, #28]
 800b394:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b398:	f023 0301 	bic.w	r3, r3, #1
 800b39c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2110      	movs	r1, #16
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f005 fd53 	bl	8010e50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3ae:	e046      	b.n	800b43e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b2:	015a      	lsls	r2, r3, #5
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3bc:	461a      	mov	r2, r3
 800b3be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b3c2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c6:	015a      	lsls	r2, r3, #5
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	4413      	add	r3, r2
 800b3cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3d4:	0151      	lsls	r1, r2, #5
 800b3d6:	69fa      	ldr	r2, [r7, #28]
 800b3d8:	440a      	add	r2, r1
 800b3da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b3e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e6:	015a      	lsls	r2, r3, #5
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b3f6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fa:	015a      	lsls	r2, r3, #5
 800b3fc:	69fb      	ldr	r3, [r7, #28]
 800b3fe:	4413      	add	r3, r2
 800b400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b408:	0151      	lsls	r1, r2, #5
 800b40a:	69fa      	ldr	r2, [r7, #28]
 800b40c:	440a      	add	r2, r1
 800b40e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b412:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b416:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b41a:	015a      	lsls	r2, r3, #5
 800b41c:	69fb      	ldr	r3, [r7, #28]
 800b41e:	4413      	add	r3, r2
 800b420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b428:	0151      	lsls	r1, r2, #5
 800b42a:	69fa      	ldr	r2, [r7, #28]
 800b42c:	440a      	add	r2, r1
 800b42e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b432:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b436:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43a:	3301      	adds	r3, #1
 800b43c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b444:	429a      	cmp	r2, r3
 800b446:	d3b3      	bcc.n	800b3b0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b44e:	69db      	ldr	r3, [r3, #28]
 800b450:	69fa      	ldr	r2, [r7, #28]
 800b452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b456:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b45a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b460:	2b00      	cmp	r3, #0
 800b462:	d016      	beq.n	800b492 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b46a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b46e:	69fa      	ldr	r2, [r7, #28]
 800b470:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b474:	f043 030b 	orr.w	r3, r3, #11
 800b478:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b484:	69fa      	ldr	r2, [r7, #28]
 800b486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b48a:	f043 030b 	orr.w	r3, r3, #11
 800b48e:	6453      	str	r3, [r2, #68]	; 0x44
 800b490:	e015      	b.n	800b4be <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b498:	695b      	ldr	r3, [r3, #20]
 800b49a:	69fa      	ldr	r2, [r7, #28]
 800b49c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b4a4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b4a8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	69fa      	ldr	r2, [r7, #28]
 800b4b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4b8:	f043 030b 	orr.w	r3, r3, #11
 800b4bc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b4be:	69fb      	ldr	r3, [r7, #28]
 800b4c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	69fa      	ldr	r2, [r7, #28]
 800b4c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b4d0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6818      	ldr	r0, [r3, #0]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	f006 fc32 	bl	8011d4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	695a      	ldr	r2, [r3, #20]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b4f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f006 fb61 	bl	8011bc4 <USB_ReadInterrupts>
 800b502:	4603      	mov	r3, r0
 800b504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b50c:	d124      	bne.n	800b558 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4618      	mov	r0, r3
 800b514:	f006 fbf7 	bl	8011d06 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f005 fccb 	bl	8010eb8 <USB_GetDevSpeed>
 800b522:	4603      	mov	r3, r0
 800b524:	461a      	mov	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681c      	ldr	r4, [r3, #0]
 800b52e:	f001 f96d 	bl	800c80c <HAL_RCC_GetHCLKFreq>
 800b532:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	461a      	mov	r2, r3
 800b53c:	4620      	mov	r0, r4
 800b53e:	f005 fbe5 	bl	8010d0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f009 f9ff 	bl	8014946 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	695a      	ldr	r2, [r3, #20]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b556:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4618      	mov	r0, r3
 800b55e:	f006 fb31 	bl	8011bc4 <USB_ReadInterrupts>
 800b562:	4603      	mov	r3, r0
 800b564:	f003 0308 	and.w	r3, r3, #8
 800b568:	2b08      	cmp	r3, #8
 800b56a:	d10a      	bne.n	800b582 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f009 f9dc 	bl	801492a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	695a      	ldr	r2, [r3, #20]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f002 0208 	and.w	r2, r2, #8
 800b580:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4618      	mov	r0, r3
 800b588:	f006 fb1c 	bl	8011bc4 <USB_ReadInterrupts>
 800b58c:	4603      	mov	r3, r0
 800b58e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b592:	2b80      	cmp	r3, #128	; 0x80
 800b594:	d122      	bne.n	800b5dc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b596:	6a3b      	ldr	r3, [r7, #32]
 800b598:	699b      	ldr	r3, [r3, #24]
 800b59a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b59e:	6a3b      	ldr	r3, [r7, #32]
 800b5a0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	627b      	str	r3, [r7, #36]	; 0x24
 800b5a6:	e014      	b.n	800b5d2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b5a8:	6879      	ldr	r1, [r7, #4]
 800b5aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	00db      	lsls	r3, r3, #3
 800b5b0:	4413      	add	r3, r2
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	440b      	add	r3, r1
 800b5b6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d105      	bne.n	800b5cc <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 fac5 	bl	800bb56 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	627b      	str	r3, [r7, #36]	; 0x24
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d3e5      	bcc.n	800b5a8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f006 faef 	bl	8011bc4 <USB_ReadInterrupts>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b5ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5f0:	d13b      	bne.n	800b66a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	627b      	str	r3, [r7, #36]	; 0x24
 800b5f6:	e02b      	b.n	800b650 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800b5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fa:	015a      	lsls	r2, r3, #5
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	4413      	add	r3, r2
 800b600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b608:	6879      	ldr	r1, [r7, #4]
 800b60a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b60c:	4613      	mov	r3, r2
 800b60e:	00db      	lsls	r3, r3, #3
 800b610:	4413      	add	r3, r2
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	440b      	add	r3, r1
 800b616:	3340      	adds	r3, #64	; 0x40
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d115      	bne.n	800b64a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800b61e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b620:	2b00      	cmp	r3, #0
 800b622:	da12      	bge.n	800b64a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800b624:	6879      	ldr	r1, [r7, #4]
 800b626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b628:	4613      	mov	r3, r2
 800b62a:	00db      	lsls	r3, r3, #3
 800b62c:	4413      	add	r3, r2
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	440b      	add	r3, r1
 800b632:	333f      	adds	r3, #63	; 0x3f
 800b634:	2201      	movs	r2, #1
 800b636:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800b638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b640:	b2db      	uxtb	r3, r3
 800b642:	4619      	mov	r1, r3
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 fa86 	bl	800bb56 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64c:	3301      	adds	r3, #1
 800b64e:	627b      	str	r3, [r7, #36]	; 0x24
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b656:	429a      	cmp	r2, r3
 800b658:	d3ce      	bcc.n	800b5f8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	695a      	ldr	r2, [r3, #20]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b668:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4618      	mov	r0, r3
 800b670:	f006 faa8 	bl	8011bc4 <USB_ReadInterrupts>
 800b674:	4603      	mov	r3, r0
 800b676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b67a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b67e:	d155      	bne.n	800b72c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b680:	2301      	movs	r3, #1
 800b682:	627b      	str	r3, [r7, #36]	; 0x24
 800b684:	e045      	b.n	800b712 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800b686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b688:	015a      	lsls	r2, r3, #5
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	4413      	add	r3, r2
 800b68e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b696:	6879      	ldr	r1, [r7, #4]
 800b698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b69a:	4613      	mov	r3, r2
 800b69c:	00db      	lsls	r3, r3, #3
 800b69e:	4413      	add	r3, r2
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	440b      	add	r3, r1
 800b6a4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d12e      	bne.n	800b70c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b6ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	da2b      	bge.n	800b70c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800b6c0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d121      	bne.n	800b70c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800b6c8:	6879      	ldr	r1, [r7, #4]
 800b6ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6cc:	4613      	mov	r3, r2
 800b6ce:	00db      	lsls	r3, r3, #3
 800b6d0:	4413      	add	r3, r2
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	440b      	add	r3, r1
 800b6d6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800b6da:	2201      	movs	r2, #1
 800b6dc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800b6de:	6a3b      	ldr	r3, [r7, #32]
 800b6e0:	699b      	ldr	r3, [r3, #24]
 800b6e2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b6e6:	6a3b      	ldr	r3, [r7, #32]
 800b6e8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800b6ea:	6a3b      	ldr	r3, [r7, #32]
 800b6ec:	695b      	ldr	r3, [r3, #20]
 800b6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d10a      	bne.n	800b70c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	69fa      	ldr	r2, [r7, #28]
 800b700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b704:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b708:	6053      	str	r3, [r2, #4]
            break;
 800b70a:	e007      	b.n	800b71c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70e:	3301      	adds	r3, #1
 800b710:	627b      	str	r3, [r7, #36]	; 0x24
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b718:	429a      	cmp	r2, r3
 800b71a:	d3b4      	bcc.n	800b686 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	695a      	ldr	r2, [r3, #20]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b72a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4618      	mov	r0, r3
 800b732:	f006 fa47 	bl	8011bc4 <USB_ReadInterrupts>
 800b736:	4603      	mov	r3, r0
 800b738:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b73c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b740:	d10a      	bne.n	800b758 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f009 f980 	bl	8014a48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	695a      	ldr	r2, [r3, #20]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b756:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4618      	mov	r0, r3
 800b75e:	f006 fa31 	bl	8011bc4 <USB_ReadInterrupts>
 800b762:	4603      	mov	r3, r0
 800b764:	f003 0304 	and.w	r3, r3, #4
 800b768:	2b04      	cmp	r3, #4
 800b76a:	d115      	bne.n	800b798 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	f003 0304 	and.w	r3, r3, #4
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d002      	beq.n	800b784 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f009 f970 	bl	8014a64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	6859      	ldr	r1, [r3, #4]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	69ba      	ldr	r2, [r7, #24]
 800b790:	430a      	orrs	r2, r1
 800b792:	605a      	str	r2, [r3, #4]
 800b794:	e000      	b.n	800b798 <HAL_PCD_IRQHandler+0x938>
      return;
 800b796:	bf00      	nop
    }
  }
}
 800b798:	3734      	adds	r7, #52	; 0x34
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd90      	pop	{r4, r7, pc}

0800b79e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b082      	sub	sp, #8
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d101      	bne.n	800b7b8 <HAL_PCD_SetAddress+0x1a>
 800b7b4:	2302      	movs	r3, #2
 800b7b6:	e013      	b.n	800b7e0 <HAL_PCD_SetAddress+0x42>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	78fa      	ldrb	r2, [r7, #3]
 800b7c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	78fa      	ldrb	r2, [r7, #3]
 800b7ce:	4611      	mov	r1, r2
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f006 f9d1 	bl	8011b78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3708      	adds	r7, #8
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	4608      	mov	r0, r1
 800b7f2:	4611      	mov	r1, r2
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	70fb      	strb	r3, [r7, #3]
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	803b      	strh	r3, [r7, #0]
 800b7fe:	4613      	mov	r3, r2
 800b800:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b802:	2300      	movs	r3, #0
 800b804:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b806:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	da0f      	bge.n	800b82e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b80e:	78fb      	ldrb	r3, [r7, #3]
 800b810:	f003 020f 	and.w	r2, r3, #15
 800b814:	4613      	mov	r3, r2
 800b816:	00db      	lsls	r3, r3, #3
 800b818:	4413      	add	r3, r2
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	3338      	adds	r3, #56	; 0x38
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	4413      	add	r3, r2
 800b822:	3304      	adds	r3, #4
 800b824:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2201      	movs	r2, #1
 800b82a:	705a      	strb	r2, [r3, #1]
 800b82c:	e00f      	b.n	800b84e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b82e:	78fb      	ldrb	r3, [r7, #3]
 800b830:	f003 020f 	and.w	r2, r3, #15
 800b834:	4613      	mov	r3, r2
 800b836:	00db      	lsls	r3, r3, #3
 800b838:	4413      	add	r3, r2
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b840:	687a      	ldr	r2, [r7, #4]
 800b842:	4413      	add	r3, r2
 800b844:	3304      	adds	r3, #4
 800b846:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2200      	movs	r2, #0
 800b84c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b84e:	78fb      	ldrb	r3, [r7, #3]
 800b850:	f003 030f 	and.w	r3, r3, #15
 800b854:	b2da      	uxtb	r2, r3
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b85a:	883a      	ldrh	r2, [r7, #0]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	78ba      	ldrb	r2, [r7, #2]
 800b864:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	785b      	ldrb	r3, [r3, #1]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d004      	beq.n	800b878 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	b29a      	uxth	r2, r3
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b878:	78bb      	ldrb	r3, [r7, #2]
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d102      	bne.n	800b884 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2200      	movs	r2, #0
 800b882:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d101      	bne.n	800b892 <HAL_PCD_EP_Open+0xaa>
 800b88e:	2302      	movs	r3, #2
 800b890:	e00e      	b.n	800b8b0 <HAL_PCD_EP_Open+0xc8>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2201      	movs	r2, #1
 800b896:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	68f9      	ldr	r1, [r7, #12]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f005 fb2e 	bl	8010f02 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800b8ae:	7afb      	ldrb	r3, [r7, #11]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3710      	adds	r7, #16
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b086      	sub	sp, #24
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	607a      	str	r2, [r7, #4]
 800b8c2:	603b      	str	r3, [r7, #0]
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b8c8:	7afb      	ldrb	r3, [r7, #11]
 800b8ca:	f003 020f 	and.w	r2, r3, #15
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	00db      	lsls	r3, r3, #3
 800b8d2:	4413      	add	r3, r2
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	4413      	add	r3, r2
 800b8de:	3304      	adds	r3, #4
 800b8e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	683a      	ldr	r2, [r7, #0]
 800b8ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b8fa:	7afb      	ldrb	r3, [r7, #11]
 800b8fc:	f003 030f 	and.w	r3, r3, #15
 800b900:	b2da      	uxtb	r2, r3
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	691b      	ldr	r3, [r3, #16]
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d102      	bne.n	800b914 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b914:	7afb      	ldrb	r3, [r7, #11]
 800b916:	f003 030f 	and.w	r3, r3, #15
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d109      	bne.n	800b932 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	6818      	ldr	r0, [r3, #0]
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	691b      	ldr	r3, [r3, #16]
 800b926:	b2db      	uxtb	r3, r3
 800b928:	461a      	mov	r2, r3
 800b92a:	6979      	ldr	r1, [r7, #20]
 800b92c:	f005 fdb8 	bl	80114a0 <USB_EP0StartXfer>
 800b930:	e008      	b.n	800b944 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6818      	ldr	r0, [r3, #0]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	691b      	ldr	r3, [r3, #16]
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	461a      	mov	r2, r3
 800b93e:	6979      	ldr	r1, [r7, #20]
 800b940:	f005 fb66 	bl	8011010 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3718      	adds	r7, #24
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b086      	sub	sp, #24
 800b952:	af00      	add	r7, sp, #0
 800b954:	60f8      	str	r0, [r7, #12]
 800b956:	607a      	str	r2, [r7, #4]
 800b958:	603b      	str	r3, [r7, #0]
 800b95a:	460b      	mov	r3, r1
 800b95c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b95e:	7afb      	ldrb	r3, [r7, #11]
 800b960:	f003 020f 	and.w	r2, r3, #15
 800b964:	4613      	mov	r3, r2
 800b966:	00db      	lsls	r3, r3, #3
 800b968:	4413      	add	r3, r2
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	3338      	adds	r3, #56	; 0x38
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	4413      	add	r3, r2
 800b972:	3304      	adds	r3, #4
 800b974:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	2200      	movs	r2, #0
 800b986:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	2201      	movs	r2, #1
 800b98c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b98e:	7afb      	ldrb	r3, [r7, #11]
 800b990:	f003 030f 	and.w	r3, r3, #15
 800b994:	b2da      	uxtb	r2, r3
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d102      	bne.n	800b9a8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b9a8:	7afb      	ldrb	r3, [r7, #11]
 800b9aa:	f003 030f 	and.w	r3, r3, #15
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d109      	bne.n	800b9c6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	6818      	ldr	r0, [r3, #0]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	461a      	mov	r2, r3
 800b9be:	6979      	ldr	r1, [r7, #20]
 800b9c0:	f005 fd6e 	bl	80114a0 <USB_EP0StartXfer>
 800b9c4:	e008      	b.n	800b9d8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6818      	ldr	r0, [r3, #0]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	691b      	ldr	r3, [r3, #16]
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	6979      	ldr	r1, [r7, #20]
 800b9d4:	f005 fb1c 	bl	8011010 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3718      	adds	r7, #24
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b084      	sub	sp, #16
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b9ee:	78fb      	ldrb	r3, [r7, #3]
 800b9f0:	f003 020f 	and.w	r2, r3, #15
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d901      	bls.n	800ba00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	e050      	b.n	800baa2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ba00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	da0f      	bge.n	800ba28 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba08:	78fb      	ldrb	r3, [r7, #3]
 800ba0a:	f003 020f 	and.w	r2, r3, #15
 800ba0e:	4613      	mov	r3, r2
 800ba10:	00db      	lsls	r3, r3, #3
 800ba12:	4413      	add	r3, r2
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	3338      	adds	r3, #56	; 0x38
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	3304      	adds	r3, #4
 800ba1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2201      	movs	r2, #1
 800ba24:	705a      	strb	r2, [r3, #1]
 800ba26:	e00d      	b.n	800ba44 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ba28:	78fa      	ldrb	r2, [r7, #3]
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	00db      	lsls	r3, r3, #3
 800ba2e:	4413      	add	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	4413      	add	r3, r2
 800ba3a:	3304      	adds	r3, #4
 800ba3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2200      	movs	r2, #0
 800ba42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2201      	movs	r2, #1
 800ba48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ba4a:	78fb      	ldrb	r3, [r7, #3]
 800ba4c:	f003 030f 	and.w	r3, r3, #15
 800ba50:	b2da      	uxtb	r2, r3
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d101      	bne.n	800ba64 <HAL_PCD_EP_SetStall+0x82>
 800ba60:	2302      	movs	r3, #2
 800ba62:	e01e      	b.n	800baa2 <HAL_PCD_EP_SetStall+0xc0>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2201      	movs	r2, #1
 800ba68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68f9      	ldr	r1, [r7, #12]
 800ba72:	4618      	mov	r0, r3
 800ba74:	f005 ffac 	bl	80119d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ba78:	78fb      	ldrb	r3, [r7, #3]
 800ba7a:	f003 030f 	and.w	r3, r3, #15
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10a      	bne.n	800ba98 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6818      	ldr	r0, [r3, #0]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	b2d9      	uxtb	r1, r3
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ba92:	461a      	mov	r2, r3
 800ba94:	f006 f95a 	bl	8011d4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b084      	sub	sp, #16
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
 800bab2:	460b      	mov	r3, r1
 800bab4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bab6:	78fb      	ldrb	r3, [r7, #3]
 800bab8:	f003 020f 	and.w	r2, r3, #15
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d901      	bls.n	800bac8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800bac4:	2301      	movs	r3, #1
 800bac6:	e042      	b.n	800bb4e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	da0f      	bge.n	800baf0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bad0:	78fb      	ldrb	r3, [r7, #3]
 800bad2:	f003 020f 	and.w	r2, r3, #15
 800bad6:	4613      	mov	r3, r2
 800bad8:	00db      	lsls	r3, r3, #3
 800bada:	4413      	add	r3, r2
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	3338      	adds	r3, #56	; 0x38
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	4413      	add	r3, r2
 800bae4:	3304      	adds	r3, #4
 800bae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2201      	movs	r2, #1
 800baec:	705a      	strb	r2, [r3, #1]
 800baee:	e00f      	b.n	800bb10 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800baf0:	78fb      	ldrb	r3, [r7, #3]
 800baf2:	f003 020f 	and.w	r2, r3, #15
 800baf6:	4613      	mov	r3, r2
 800baf8:	00db      	lsls	r3, r3, #3
 800bafa:	4413      	add	r3, r2
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	4413      	add	r3, r2
 800bb06:	3304      	adds	r3, #4
 800bb08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2200      	movs	r2, #0
 800bb14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bb16:	78fb      	ldrb	r3, [r7, #3]
 800bb18:	f003 030f 	and.w	r3, r3, #15
 800bb1c:	b2da      	uxtb	r2, r3
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d101      	bne.n	800bb30 <HAL_PCD_EP_ClrStall+0x86>
 800bb2c:	2302      	movs	r3, #2
 800bb2e:	e00e      	b.n	800bb4e <HAL_PCD_EP_ClrStall+0xa4>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68f9      	ldr	r1, [r7, #12]
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f005 ffb4 	bl	8011aac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b084      	sub	sp, #16
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
 800bb5e:	460b      	mov	r3, r1
 800bb60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800bb62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	da0c      	bge.n	800bb84 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bb6a:	78fb      	ldrb	r3, [r7, #3]
 800bb6c:	f003 020f 	and.w	r2, r3, #15
 800bb70:	4613      	mov	r3, r2
 800bb72:	00db      	lsls	r3, r3, #3
 800bb74:	4413      	add	r3, r2
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	3338      	adds	r3, #56	; 0x38
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	3304      	adds	r3, #4
 800bb80:	60fb      	str	r3, [r7, #12]
 800bb82:	e00c      	b.n	800bb9e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bb84:	78fb      	ldrb	r3, [r7, #3]
 800bb86:	f003 020f 	and.w	r2, r3, #15
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	00db      	lsls	r3, r3, #3
 800bb8e:	4413      	add	r3, r2
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	4413      	add	r3, r2
 800bb9a:	3304      	adds	r3, #4
 800bb9c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	68f9      	ldr	r1, [r7, #12]
 800bba4:	4618      	mov	r0, r3
 800bba6:	f005 fdd3 	bl	8011750 <USB_EPStopXfer>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	72fb      	strb	r3, [r7, #11]

  return ret;
 800bbae:	7afb      	ldrb	r3, [r7, #11]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3710      	adds	r7, #16
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b08a      	sub	sp, #40	; 0x28
 800bbbc:	af02      	add	r7, sp, #8
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800bbcc:	683a      	ldr	r2, [r7, #0]
 800bbce:	4613      	mov	r3, r2
 800bbd0:	00db      	lsls	r3, r3, #3
 800bbd2:	4413      	add	r3, r2
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	3338      	adds	r3, #56	; 0x38
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	4413      	add	r3, r2
 800bbdc:	3304      	adds	r3, #4
 800bbde:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	6a1a      	ldr	r2, [r3, #32]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	699b      	ldr	r3, [r3, #24]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d901      	bls.n	800bbf0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800bbec:	2301      	movs	r3, #1
 800bbee:	e06c      	b.n	800bcca <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	699a      	ldr	r2, [r3, #24]
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6a1b      	ldr	r3, [r3, #32]
 800bbf8:	1ad3      	subs	r3, r2, r3
 800bbfa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	69fa      	ldr	r2, [r7, #28]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d902      	bls.n	800bc0c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	3303      	adds	r3, #3
 800bc10:	089b      	lsrs	r3, r3, #2
 800bc12:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bc14:	e02b      	b.n	800bc6e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	699a      	ldr	r2, [r3, #24]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6a1b      	ldr	r3, [r3, #32]
 800bc1e:	1ad3      	subs	r3, r2, r3
 800bc20:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	68db      	ldr	r3, [r3, #12]
 800bc26:	69fa      	ldr	r2, [r7, #28]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d902      	bls.n	800bc32 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800bc32:	69fb      	ldr	r3, [r7, #28]
 800bc34:	3303      	adds	r3, #3
 800bc36:	089b      	lsrs	r3, r3, #2
 800bc38:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	6919      	ldr	r1, [r3, #16]
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	b2da      	uxtb	r2, r3
 800bc42:	69fb      	ldr	r3, [r7, #28]
 800bc44:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	9300      	str	r3, [sp, #0]
 800bc4e:	4603      	mov	r3, r0
 800bc50:	6978      	ldr	r0, [r7, #20]
 800bc52:	f005 fe27 	bl	80118a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	691a      	ldr	r2, [r3, #16]
 800bc5a:	69fb      	ldr	r3, [r7, #28]
 800bc5c:	441a      	add	r2, r3
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	6a1a      	ldr	r2, [r3, #32]
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	441a      	add	r2, r3
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	015a      	lsls	r2, r3, #5
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	4413      	add	r3, r2
 800bc76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc7a:	699b      	ldr	r3, [r3, #24]
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	69ba      	ldr	r2, [r7, #24]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d809      	bhi.n	800bc98 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6a1a      	ldr	r2, [r3, #32]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d203      	bcs.n	800bc98 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	699b      	ldr	r3, [r3, #24]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d1be      	bne.n	800bc16 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	699a      	ldr	r2, [r3, #24]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	6a1b      	ldr	r3, [r3, #32]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d811      	bhi.n	800bcc8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	f003 030f 	and.w	r3, r3, #15
 800bcaa:	2201      	movs	r2, #1
 800bcac:	fa02 f303 	lsl.w	r3, r2, r3
 800bcb0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	43db      	mvns	r3, r3
 800bcbe:	6939      	ldr	r1, [r7, #16]
 800bcc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcc4:	4013      	ands	r3, r2
 800bcc6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3720      	adds	r7, #32
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
	...

0800bcd4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b088      	sub	sp, #32
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	333c      	adds	r3, #60	; 0x3c
 800bcec:	3304      	adds	r3, #4
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	015a      	lsls	r2, r3, #5
 800bcf6:	69bb      	ldr	r3, [r7, #24]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	691b      	ldr	r3, [r3, #16]
 800bd06:	2b01      	cmp	r3, #1
 800bd08:	d17b      	bne.n	800be02 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	f003 0308 	and.w	r3, r3, #8
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d015      	beq.n	800bd40 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	4a61      	ldr	r2, [pc, #388]	; (800be9c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	f240 80b9 	bls.w	800be90 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	f000 80b3 	beq.w	800be90 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	015a      	lsls	r2, r3, #5
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	4413      	add	r3, r2
 800bd32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd36:	461a      	mov	r2, r3
 800bd38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd3c:	6093      	str	r3, [r2, #8]
 800bd3e:	e0a7      	b.n	800be90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	f003 0320 	and.w	r3, r3, #32
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d009      	beq.n	800bd5e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	015a      	lsls	r2, r3, #5
 800bd4e:	69bb      	ldr	r3, [r7, #24]
 800bd50:	4413      	add	r3, r2
 800bd52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd56:	461a      	mov	r2, r3
 800bd58:	2320      	movs	r3, #32
 800bd5a:	6093      	str	r3, [r2, #8]
 800bd5c:	e098      	b.n	800be90 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	f040 8093 	bne.w	800be90 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	4a4b      	ldr	r2, [pc, #300]	; (800be9c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d90f      	bls.n	800bd92 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d00a      	beq.n	800bd92 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	015a      	lsls	r2, r3, #5
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	4413      	add	r3, r2
 800bd84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd88:	461a      	mov	r2, r3
 800bd8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd8e:	6093      	str	r3, [r2, #8]
 800bd90:	e07e      	b.n	800be90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	4613      	mov	r3, r2
 800bd96:	00db      	lsls	r3, r3, #3
 800bd98:	4413      	add	r3, r2
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	4413      	add	r3, r2
 800bda4:	3304      	adds	r3, #4
 800bda6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	69da      	ldr	r2, [r3, #28]
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	0159      	lsls	r1, r3, #5
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	440b      	add	r3, r1
 800bdb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdbe:	1ad2      	subs	r2, r2, r3
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d114      	bne.n	800bdf4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	699b      	ldr	r3, [r3, #24]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d109      	bne.n	800bde6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6818      	ldr	r0, [r3, #0]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bddc:	461a      	mov	r2, r3
 800bdde:	2101      	movs	r1, #1
 800bde0:	f005 ffb4 	bl	8011d4c <USB_EP0_OutStart>
 800bde4:	e006      	b.n	800bdf4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	691a      	ldr	r2, [r3, #16]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	6a1b      	ldr	r3, [r3, #32]
 800bdee:	441a      	add	r2, r3
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f008 fd60 	bl	80148c0 <HAL_PCD_DataOutStageCallback>
 800be00:	e046      	b.n	800be90 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	4a26      	ldr	r2, [pc, #152]	; (800bea0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d124      	bne.n	800be54 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be10:	2b00      	cmp	r3, #0
 800be12:	d00a      	beq.n	800be2a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	015a      	lsls	r2, r3, #5
 800be18:	69bb      	ldr	r3, [r7, #24]
 800be1a:	4413      	add	r3, r2
 800be1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be20:	461a      	mov	r2, r3
 800be22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be26:	6093      	str	r3, [r2, #8]
 800be28:	e032      	b.n	800be90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	f003 0320 	and.w	r3, r3, #32
 800be30:	2b00      	cmp	r3, #0
 800be32:	d008      	beq.n	800be46 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	015a      	lsls	r2, r3, #5
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	4413      	add	r3, r2
 800be3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be40:	461a      	mov	r2, r3
 800be42:	2320      	movs	r3, #32
 800be44:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	4619      	mov	r1, r3
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f008 fd37 	bl	80148c0 <HAL_PCD_DataOutStageCallback>
 800be52:	e01d      	b.n	800be90 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d114      	bne.n	800be84 <PCD_EP_OutXfrComplete_int+0x1b0>
 800be5a:	6879      	ldr	r1, [r7, #4]
 800be5c:	683a      	ldr	r2, [r7, #0]
 800be5e:	4613      	mov	r3, r2
 800be60:	00db      	lsls	r3, r3, #3
 800be62:	4413      	add	r3, r2
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	440b      	add	r3, r1
 800be68:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d108      	bne.n	800be84 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6818      	ldr	r0, [r3, #0]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800be7c:	461a      	mov	r2, r3
 800be7e:	2100      	movs	r1, #0
 800be80:	f005 ff64 	bl	8011d4c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	b2db      	uxtb	r3, r3
 800be88:	4619      	mov	r1, r3
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f008 fd18 	bl	80148c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3720      	adds	r7, #32
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	4f54300a 	.word	0x4f54300a
 800bea0:	4f54310a 	.word	0x4f54310a

0800bea4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b086      	sub	sp, #24
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	333c      	adds	r3, #60	; 0x3c
 800bebc:	3304      	adds	r3, #4
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	015a      	lsls	r2, r3, #5
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	4413      	add	r3, r2
 800beca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	4a15      	ldr	r2, [pc, #84]	; (800bf2c <PCD_EP_OutSetupPacket_int+0x88>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d90e      	bls.n	800bef8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d009      	beq.n	800bef8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	015a      	lsls	r2, r3, #5
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	4413      	add	r3, r2
 800beec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bef0:	461a      	mov	r2, r3
 800bef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bef6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f008 fccf 	bl	801489c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	4a0a      	ldr	r2, [pc, #40]	; (800bf2c <PCD_EP_OutSetupPacket_int+0x88>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d90c      	bls.n	800bf20 <PCD_EP_OutSetupPacket_int+0x7c>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	691b      	ldr	r3, [r3, #16]
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d108      	bne.n	800bf20 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6818      	ldr	r0, [r3, #0]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bf18:	461a      	mov	r2, r3
 800bf1a:	2101      	movs	r1, #1
 800bf1c:	f005 ff16 	bl	8011d4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3718      	adds	r7, #24
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	4f54300a 	.word	0x4f54300a

0800bf30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800bf3c:	bf00      	nop
 800bf3e:	370c      	adds	r7, #12
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b086      	sub	sp, #24
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d101      	bne.n	800bf5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bf56:	2301      	movs	r3, #1
 800bf58:	e267      	b.n	800c42a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f003 0301 	and.w	r3, r3, #1
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d075      	beq.n	800c052 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bf66:	4b88      	ldr	r3, [pc, #544]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800bf68:	689b      	ldr	r3, [r3, #8]
 800bf6a:	f003 030c 	and.w	r3, r3, #12
 800bf6e:	2b04      	cmp	r3, #4
 800bf70:	d00c      	beq.n	800bf8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bf72:	4b85      	ldr	r3, [pc, #532]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bf7a:	2b08      	cmp	r3, #8
 800bf7c:	d112      	bne.n	800bfa4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bf7e:	4b82      	ldr	r3, [pc, #520]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf8a:	d10b      	bne.n	800bfa4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf8c:	4b7e      	ldr	r3, [pc, #504]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d05b      	beq.n	800c050 <HAL_RCC_OscConfig+0x108>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d157      	bne.n	800c050 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e242      	b.n	800c42a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfac:	d106      	bne.n	800bfbc <HAL_RCC_OscConfig+0x74>
 800bfae:	4b76      	ldr	r3, [pc, #472]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4a75      	ldr	r2, [pc, #468]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800bfb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bfb8:	6013      	str	r3, [r2, #0]
 800bfba:	e01d      	b.n	800bff8 <HAL_RCC_OscConfig+0xb0>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bfc4:	d10c      	bne.n	800bfe0 <HAL_RCC_OscConfig+0x98>
 800bfc6:	4b70      	ldr	r3, [pc, #448]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4a6f      	ldr	r2, [pc, #444]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800bfcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bfd0:	6013      	str	r3, [r2, #0]
 800bfd2:	4b6d      	ldr	r3, [pc, #436]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4a6c      	ldr	r2, [pc, #432]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800bfd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bfdc:	6013      	str	r3, [r2, #0]
 800bfde:	e00b      	b.n	800bff8 <HAL_RCC_OscConfig+0xb0>
 800bfe0:	4b69      	ldr	r3, [pc, #420]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a68      	ldr	r2, [pc, #416]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800bfe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bfea:	6013      	str	r3, [r2, #0]
 800bfec:	4b66      	ldr	r3, [pc, #408]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a65      	ldr	r2, [pc, #404]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800bff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d013      	beq.n	800c028 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c000:	f7fd fa78 	bl	80094f4 <HAL_GetTick>
 800c004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c006:	e008      	b.n	800c01a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c008:	f7fd fa74 	bl	80094f4 <HAL_GetTick>
 800c00c:	4602      	mov	r2, r0
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	1ad3      	subs	r3, r2, r3
 800c012:	2b64      	cmp	r3, #100	; 0x64
 800c014:	d901      	bls.n	800c01a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c016:	2303      	movs	r3, #3
 800c018:	e207      	b.n	800c42a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c01a:	4b5b      	ldr	r3, [pc, #364]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c022:	2b00      	cmp	r3, #0
 800c024:	d0f0      	beq.n	800c008 <HAL_RCC_OscConfig+0xc0>
 800c026:	e014      	b.n	800c052 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c028:	f7fd fa64 	bl	80094f4 <HAL_GetTick>
 800c02c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c02e:	e008      	b.n	800c042 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c030:	f7fd fa60 	bl	80094f4 <HAL_GetTick>
 800c034:	4602      	mov	r2, r0
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	1ad3      	subs	r3, r2, r3
 800c03a:	2b64      	cmp	r3, #100	; 0x64
 800c03c:	d901      	bls.n	800c042 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c03e:	2303      	movs	r3, #3
 800c040:	e1f3      	b.n	800c42a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c042:	4b51      	ldr	r3, [pc, #324]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1f0      	bne.n	800c030 <HAL_RCC_OscConfig+0xe8>
 800c04e:	e000      	b.n	800c052 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f003 0302 	and.w	r3, r3, #2
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d063      	beq.n	800c126 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c05e:	4b4a      	ldr	r3, [pc, #296]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	f003 030c 	and.w	r3, r3, #12
 800c066:	2b00      	cmp	r3, #0
 800c068:	d00b      	beq.n	800c082 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c06a:	4b47      	ldr	r3, [pc, #284]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c072:	2b08      	cmp	r3, #8
 800c074:	d11c      	bne.n	800c0b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c076:	4b44      	ldr	r3, [pc, #272]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d116      	bne.n	800c0b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c082:	4b41      	ldr	r3, [pc, #260]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f003 0302 	and.w	r3, r3, #2
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d005      	beq.n	800c09a <HAL_RCC_OscConfig+0x152>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	2b01      	cmp	r3, #1
 800c094:	d001      	beq.n	800c09a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c096:	2301      	movs	r3, #1
 800c098:	e1c7      	b.n	800c42a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c09a:	4b3b      	ldr	r3, [pc, #236]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	00db      	lsls	r3, r3, #3
 800c0a8:	4937      	ldr	r1, [pc, #220]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c0ae:	e03a      	b.n	800c126 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d020      	beq.n	800c0fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c0b8:	4b34      	ldr	r3, [pc, #208]	; (800c18c <HAL_RCC_OscConfig+0x244>)
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0be:	f7fd fa19 	bl	80094f4 <HAL_GetTick>
 800c0c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c0c4:	e008      	b.n	800c0d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c0c6:	f7fd fa15 	bl	80094f4 <HAL_GetTick>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	1ad3      	subs	r3, r2, r3
 800c0d0:	2b02      	cmp	r3, #2
 800c0d2:	d901      	bls.n	800c0d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c0d4:	2303      	movs	r3, #3
 800c0d6:	e1a8      	b.n	800c42a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c0d8:	4b2b      	ldr	r3, [pc, #172]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f003 0302 	and.w	r3, r3, #2
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d0f0      	beq.n	800c0c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c0e4:	4b28      	ldr	r3, [pc, #160]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	691b      	ldr	r3, [r3, #16]
 800c0f0:	00db      	lsls	r3, r3, #3
 800c0f2:	4925      	ldr	r1, [pc, #148]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	600b      	str	r3, [r1, #0]
 800c0f8:	e015      	b.n	800c126 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c0fa:	4b24      	ldr	r3, [pc, #144]	; (800c18c <HAL_RCC_OscConfig+0x244>)
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c100:	f7fd f9f8 	bl	80094f4 <HAL_GetTick>
 800c104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c106:	e008      	b.n	800c11a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c108:	f7fd f9f4 	bl	80094f4 <HAL_GetTick>
 800c10c:	4602      	mov	r2, r0
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	1ad3      	subs	r3, r2, r3
 800c112:	2b02      	cmp	r3, #2
 800c114:	d901      	bls.n	800c11a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c116:	2303      	movs	r3, #3
 800c118:	e187      	b.n	800c42a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c11a:	4b1b      	ldr	r3, [pc, #108]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f003 0302 	and.w	r3, r3, #2
 800c122:	2b00      	cmp	r3, #0
 800c124:	d1f0      	bne.n	800c108 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f003 0308 	and.w	r3, r3, #8
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d036      	beq.n	800c1a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	695b      	ldr	r3, [r3, #20]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d016      	beq.n	800c168 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c13a:	4b15      	ldr	r3, [pc, #84]	; (800c190 <HAL_RCC_OscConfig+0x248>)
 800c13c:	2201      	movs	r2, #1
 800c13e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c140:	f7fd f9d8 	bl	80094f4 <HAL_GetTick>
 800c144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c146:	e008      	b.n	800c15a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c148:	f7fd f9d4 	bl	80094f4 <HAL_GetTick>
 800c14c:	4602      	mov	r2, r0
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	2b02      	cmp	r3, #2
 800c154:	d901      	bls.n	800c15a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c156:	2303      	movs	r3, #3
 800c158:	e167      	b.n	800c42a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c15a:	4b0b      	ldr	r3, [pc, #44]	; (800c188 <HAL_RCC_OscConfig+0x240>)
 800c15c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c15e:	f003 0302 	and.w	r3, r3, #2
 800c162:	2b00      	cmp	r3, #0
 800c164:	d0f0      	beq.n	800c148 <HAL_RCC_OscConfig+0x200>
 800c166:	e01b      	b.n	800c1a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c168:	4b09      	ldr	r3, [pc, #36]	; (800c190 <HAL_RCC_OscConfig+0x248>)
 800c16a:	2200      	movs	r2, #0
 800c16c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c16e:	f7fd f9c1 	bl	80094f4 <HAL_GetTick>
 800c172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c174:	e00e      	b.n	800c194 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c176:	f7fd f9bd 	bl	80094f4 <HAL_GetTick>
 800c17a:	4602      	mov	r2, r0
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	1ad3      	subs	r3, r2, r3
 800c180:	2b02      	cmp	r3, #2
 800c182:	d907      	bls.n	800c194 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c184:	2303      	movs	r3, #3
 800c186:	e150      	b.n	800c42a <HAL_RCC_OscConfig+0x4e2>
 800c188:	40023800 	.word	0x40023800
 800c18c:	42470000 	.word	0x42470000
 800c190:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c194:	4b88      	ldr	r3, [pc, #544]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c198:	f003 0302 	and.w	r3, r3, #2
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1ea      	bne.n	800c176 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f003 0304 	and.w	r3, r3, #4
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f000 8097 	beq.w	800c2dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c1b2:	4b81      	ldr	r3, [pc, #516]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d10f      	bne.n	800c1de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c1be:	2300      	movs	r3, #0
 800c1c0:	60bb      	str	r3, [r7, #8]
 800c1c2:	4b7d      	ldr	r3, [pc, #500]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1c6:	4a7c      	ldr	r2, [pc, #496]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c1c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1cc:	6413      	str	r3, [r2, #64]	; 0x40
 800c1ce:	4b7a      	ldr	r3, [pc, #488]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1d6:	60bb      	str	r3, [r7, #8]
 800c1d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c1de:	4b77      	ldr	r3, [pc, #476]	; (800c3bc <HAL_RCC_OscConfig+0x474>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d118      	bne.n	800c21c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c1ea:	4b74      	ldr	r3, [pc, #464]	; (800c3bc <HAL_RCC_OscConfig+0x474>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4a73      	ldr	r2, [pc, #460]	; (800c3bc <HAL_RCC_OscConfig+0x474>)
 800c1f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c1f6:	f7fd f97d 	bl	80094f4 <HAL_GetTick>
 800c1fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c1fc:	e008      	b.n	800c210 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c1fe:	f7fd f979 	bl	80094f4 <HAL_GetTick>
 800c202:	4602      	mov	r2, r0
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	1ad3      	subs	r3, r2, r3
 800c208:	2b02      	cmp	r3, #2
 800c20a:	d901      	bls.n	800c210 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c20c:	2303      	movs	r3, #3
 800c20e:	e10c      	b.n	800c42a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c210:	4b6a      	ldr	r3, [pc, #424]	; (800c3bc <HAL_RCC_OscConfig+0x474>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d0f0      	beq.n	800c1fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	2b01      	cmp	r3, #1
 800c222:	d106      	bne.n	800c232 <HAL_RCC_OscConfig+0x2ea>
 800c224:	4b64      	ldr	r3, [pc, #400]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c228:	4a63      	ldr	r2, [pc, #396]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c22a:	f043 0301 	orr.w	r3, r3, #1
 800c22e:	6713      	str	r3, [r2, #112]	; 0x70
 800c230:	e01c      	b.n	800c26c <HAL_RCC_OscConfig+0x324>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	689b      	ldr	r3, [r3, #8]
 800c236:	2b05      	cmp	r3, #5
 800c238:	d10c      	bne.n	800c254 <HAL_RCC_OscConfig+0x30c>
 800c23a:	4b5f      	ldr	r3, [pc, #380]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c23c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c23e:	4a5e      	ldr	r2, [pc, #376]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c240:	f043 0304 	orr.w	r3, r3, #4
 800c244:	6713      	str	r3, [r2, #112]	; 0x70
 800c246:	4b5c      	ldr	r3, [pc, #368]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c24a:	4a5b      	ldr	r2, [pc, #364]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c24c:	f043 0301 	orr.w	r3, r3, #1
 800c250:	6713      	str	r3, [r2, #112]	; 0x70
 800c252:	e00b      	b.n	800c26c <HAL_RCC_OscConfig+0x324>
 800c254:	4b58      	ldr	r3, [pc, #352]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c258:	4a57      	ldr	r2, [pc, #348]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c25a:	f023 0301 	bic.w	r3, r3, #1
 800c25e:	6713      	str	r3, [r2, #112]	; 0x70
 800c260:	4b55      	ldr	r3, [pc, #340]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c264:	4a54      	ldr	r2, [pc, #336]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c266:	f023 0304 	bic.w	r3, r3, #4
 800c26a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d015      	beq.n	800c2a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c274:	f7fd f93e 	bl	80094f4 <HAL_GetTick>
 800c278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c27a:	e00a      	b.n	800c292 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c27c:	f7fd f93a 	bl	80094f4 <HAL_GetTick>
 800c280:	4602      	mov	r2, r0
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	1ad3      	subs	r3, r2, r3
 800c286:	f241 3288 	movw	r2, #5000	; 0x1388
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d901      	bls.n	800c292 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c28e:	2303      	movs	r3, #3
 800c290:	e0cb      	b.n	800c42a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c292:	4b49      	ldr	r3, [pc, #292]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c296:	f003 0302 	and.w	r3, r3, #2
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d0ee      	beq.n	800c27c <HAL_RCC_OscConfig+0x334>
 800c29e:	e014      	b.n	800c2ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c2a0:	f7fd f928 	bl	80094f4 <HAL_GetTick>
 800c2a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c2a6:	e00a      	b.n	800c2be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c2a8:	f7fd f924 	bl	80094f4 <HAL_GetTick>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	1ad3      	subs	r3, r2, r3
 800c2b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d901      	bls.n	800c2be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c2ba:	2303      	movs	r3, #3
 800c2bc:	e0b5      	b.n	800c42a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c2be:	4b3e      	ldr	r3, [pc, #248]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c2c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2c2:	f003 0302 	and.w	r3, r3, #2
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1ee      	bne.n	800c2a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c2ca:	7dfb      	ldrb	r3, [r7, #23]
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d105      	bne.n	800c2dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c2d0:	4b39      	ldr	r3, [pc, #228]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2d4:	4a38      	ldr	r2, [pc, #224]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c2d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	699b      	ldr	r3, [r3, #24]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f000 80a1 	beq.w	800c428 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c2e6:	4b34      	ldr	r3, [pc, #208]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	f003 030c 	and.w	r3, r3, #12
 800c2ee:	2b08      	cmp	r3, #8
 800c2f0:	d05c      	beq.n	800c3ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	699b      	ldr	r3, [r3, #24]
 800c2f6:	2b02      	cmp	r3, #2
 800c2f8:	d141      	bne.n	800c37e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c2fa:	4b31      	ldr	r3, [pc, #196]	; (800c3c0 <HAL_RCC_OscConfig+0x478>)
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c300:	f7fd f8f8 	bl	80094f4 <HAL_GetTick>
 800c304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c306:	e008      	b.n	800c31a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c308:	f7fd f8f4 	bl	80094f4 <HAL_GetTick>
 800c30c:	4602      	mov	r2, r0
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	1ad3      	subs	r3, r2, r3
 800c312:	2b02      	cmp	r3, #2
 800c314:	d901      	bls.n	800c31a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c316:	2303      	movs	r3, #3
 800c318:	e087      	b.n	800c42a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c31a:	4b27      	ldr	r3, [pc, #156]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c322:	2b00      	cmp	r3, #0
 800c324:	d1f0      	bne.n	800c308 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	69da      	ldr	r2, [r3, #28]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6a1b      	ldr	r3, [r3, #32]
 800c32e:	431a      	orrs	r2, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c334:	019b      	lsls	r3, r3, #6
 800c336:	431a      	orrs	r2, r3
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c33c:	085b      	lsrs	r3, r3, #1
 800c33e:	3b01      	subs	r3, #1
 800c340:	041b      	lsls	r3, r3, #16
 800c342:	431a      	orrs	r2, r3
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c348:	061b      	lsls	r3, r3, #24
 800c34a:	491b      	ldr	r1, [pc, #108]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c34c:	4313      	orrs	r3, r2
 800c34e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c350:	4b1b      	ldr	r3, [pc, #108]	; (800c3c0 <HAL_RCC_OscConfig+0x478>)
 800c352:	2201      	movs	r2, #1
 800c354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c356:	f7fd f8cd 	bl	80094f4 <HAL_GetTick>
 800c35a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c35c:	e008      	b.n	800c370 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c35e:	f7fd f8c9 	bl	80094f4 <HAL_GetTick>
 800c362:	4602      	mov	r2, r0
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	1ad3      	subs	r3, r2, r3
 800c368:	2b02      	cmp	r3, #2
 800c36a:	d901      	bls.n	800c370 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c36c:	2303      	movs	r3, #3
 800c36e:	e05c      	b.n	800c42a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c370:	4b11      	ldr	r3, [pc, #68]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d0f0      	beq.n	800c35e <HAL_RCC_OscConfig+0x416>
 800c37c:	e054      	b.n	800c428 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c37e:	4b10      	ldr	r3, [pc, #64]	; (800c3c0 <HAL_RCC_OscConfig+0x478>)
 800c380:	2200      	movs	r2, #0
 800c382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c384:	f7fd f8b6 	bl	80094f4 <HAL_GetTick>
 800c388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c38a:	e008      	b.n	800c39e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c38c:	f7fd f8b2 	bl	80094f4 <HAL_GetTick>
 800c390:	4602      	mov	r2, r0
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	1ad3      	subs	r3, r2, r3
 800c396:	2b02      	cmp	r3, #2
 800c398:	d901      	bls.n	800c39e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c39a:	2303      	movs	r3, #3
 800c39c:	e045      	b.n	800c42a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c39e:	4b06      	ldr	r3, [pc, #24]	; (800c3b8 <HAL_RCC_OscConfig+0x470>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d1f0      	bne.n	800c38c <HAL_RCC_OscConfig+0x444>
 800c3aa:	e03d      	b.n	800c428 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	699b      	ldr	r3, [r3, #24]
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d107      	bne.n	800c3c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	e038      	b.n	800c42a <HAL_RCC_OscConfig+0x4e2>
 800c3b8:	40023800 	.word	0x40023800
 800c3bc:	40007000 	.word	0x40007000
 800c3c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c3c4:	4b1b      	ldr	r3, [pc, #108]	; (800c434 <HAL_RCC_OscConfig+0x4ec>)
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	699b      	ldr	r3, [r3, #24]
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d028      	beq.n	800c424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d121      	bne.n	800c424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d11a      	bne.n	800c424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c3ee:	68fa      	ldr	r2, [r7, #12]
 800c3f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c3fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d111      	bne.n	800c424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c40a:	085b      	lsrs	r3, r3, #1
 800c40c:	3b01      	subs	r3, #1
 800c40e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c410:	429a      	cmp	r2, r3
 800c412:	d107      	bne.n	800c424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c420:	429a      	cmp	r2, r3
 800c422:	d001      	beq.n	800c428 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800c424:	2301      	movs	r3, #1
 800c426:	e000      	b.n	800c42a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c428:	2300      	movs	r3, #0
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3718      	adds	r7, #24
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	40023800 	.word	0x40023800

0800c438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d101      	bne.n	800c44c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c448:	2301      	movs	r3, #1
 800c44a:	e0cc      	b.n	800c5e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c44c:	4b68      	ldr	r3, [pc, #416]	; (800c5f0 <HAL_RCC_ClockConfig+0x1b8>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f003 0307 	and.w	r3, r3, #7
 800c454:	683a      	ldr	r2, [r7, #0]
 800c456:	429a      	cmp	r2, r3
 800c458:	d90c      	bls.n	800c474 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c45a:	4b65      	ldr	r3, [pc, #404]	; (800c5f0 <HAL_RCC_ClockConfig+0x1b8>)
 800c45c:	683a      	ldr	r2, [r7, #0]
 800c45e:	b2d2      	uxtb	r2, r2
 800c460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c462:	4b63      	ldr	r3, [pc, #396]	; (800c5f0 <HAL_RCC_ClockConfig+0x1b8>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f003 0307 	and.w	r3, r3, #7
 800c46a:	683a      	ldr	r2, [r7, #0]
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d001      	beq.n	800c474 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c470:	2301      	movs	r3, #1
 800c472:	e0b8      	b.n	800c5e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f003 0302 	and.w	r3, r3, #2
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d020      	beq.n	800c4c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f003 0304 	and.w	r3, r3, #4
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d005      	beq.n	800c498 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c48c:	4b59      	ldr	r3, [pc, #356]	; (800c5f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	4a58      	ldr	r2, [pc, #352]	; (800c5f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c492:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c496:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f003 0308 	and.w	r3, r3, #8
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d005      	beq.n	800c4b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c4a4:	4b53      	ldr	r3, [pc, #332]	; (800c5f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c4a6:	689b      	ldr	r3, [r3, #8]
 800c4a8:	4a52      	ldr	r2, [pc, #328]	; (800c5f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c4aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c4ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c4b0:	4b50      	ldr	r3, [pc, #320]	; (800c5f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	494d      	ldr	r1, [pc, #308]	; (800c5f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f003 0301 	and.w	r3, r3, #1
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d044      	beq.n	800c558 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d107      	bne.n	800c4e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c4d6:	4b47      	ldr	r3, [pc, #284]	; (800c5f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d119      	bne.n	800c516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e07f      	b.n	800c5e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	2b02      	cmp	r3, #2
 800c4ec:	d003      	beq.n	800c4f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c4f2:	2b03      	cmp	r3, #3
 800c4f4:	d107      	bne.n	800c506 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c4f6:	4b3f      	ldr	r3, [pc, #252]	; (800c5f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d109      	bne.n	800c516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c502:	2301      	movs	r3, #1
 800c504:	e06f      	b.n	800c5e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c506:	4b3b      	ldr	r3, [pc, #236]	; (800c5f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f003 0302 	and.w	r3, r3, #2
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d101      	bne.n	800c516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c512:	2301      	movs	r3, #1
 800c514:	e067      	b.n	800c5e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c516:	4b37      	ldr	r3, [pc, #220]	; (800c5f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c518:	689b      	ldr	r3, [r3, #8]
 800c51a:	f023 0203 	bic.w	r2, r3, #3
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	4934      	ldr	r1, [pc, #208]	; (800c5f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c524:	4313      	orrs	r3, r2
 800c526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c528:	f7fc ffe4 	bl	80094f4 <HAL_GetTick>
 800c52c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c52e:	e00a      	b.n	800c546 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c530:	f7fc ffe0 	bl	80094f4 <HAL_GetTick>
 800c534:	4602      	mov	r2, r0
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	1ad3      	subs	r3, r2, r3
 800c53a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c53e:	4293      	cmp	r3, r2
 800c540:	d901      	bls.n	800c546 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c542:	2303      	movs	r3, #3
 800c544:	e04f      	b.n	800c5e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c546:	4b2b      	ldr	r3, [pc, #172]	; (800c5f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c548:	689b      	ldr	r3, [r3, #8]
 800c54a:	f003 020c 	and.w	r2, r3, #12
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	429a      	cmp	r2, r3
 800c556:	d1eb      	bne.n	800c530 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c558:	4b25      	ldr	r3, [pc, #148]	; (800c5f0 <HAL_RCC_ClockConfig+0x1b8>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f003 0307 	and.w	r3, r3, #7
 800c560:	683a      	ldr	r2, [r7, #0]
 800c562:	429a      	cmp	r2, r3
 800c564:	d20c      	bcs.n	800c580 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c566:	4b22      	ldr	r3, [pc, #136]	; (800c5f0 <HAL_RCC_ClockConfig+0x1b8>)
 800c568:	683a      	ldr	r2, [r7, #0]
 800c56a:	b2d2      	uxtb	r2, r2
 800c56c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c56e:	4b20      	ldr	r3, [pc, #128]	; (800c5f0 <HAL_RCC_ClockConfig+0x1b8>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f003 0307 	and.w	r3, r3, #7
 800c576:	683a      	ldr	r2, [r7, #0]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d001      	beq.n	800c580 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c57c:	2301      	movs	r3, #1
 800c57e:	e032      	b.n	800c5e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f003 0304 	and.w	r3, r3, #4
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d008      	beq.n	800c59e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c58c:	4b19      	ldr	r3, [pc, #100]	; (800c5f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	4916      	ldr	r1, [pc, #88]	; (800c5f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c59a:	4313      	orrs	r3, r2
 800c59c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f003 0308 	and.w	r3, r3, #8
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d009      	beq.n	800c5be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c5aa:	4b12      	ldr	r3, [pc, #72]	; (800c5f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c5ac:	689b      	ldr	r3, [r3, #8]
 800c5ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	691b      	ldr	r3, [r3, #16]
 800c5b6:	00db      	lsls	r3, r3, #3
 800c5b8:	490e      	ldr	r1, [pc, #56]	; (800c5f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c5be:	f000 f821 	bl	800c604 <HAL_RCC_GetSysClockFreq>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	4b0b      	ldr	r3, [pc, #44]	; (800c5f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c5c6:	689b      	ldr	r3, [r3, #8]
 800c5c8:	091b      	lsrs	r3, r3, #4
 800c5ca:	f003 030f 	and.w	r3, r3, #15
 800c5ce:	490a      	ldr	r1, [pc, #40]	; (800c5f8 <HAL_RCC_ClockConfig+0x1c0>)
 800c5d0:	5ccb      	ldrb	r3, [r1, r3]
 800c5d2:	fa22 f303 	lsr.w	r3, r2, r3
 800c5d6:	4a09      	ldr	r2, [pc, #36]	; (800c5fc <HAL_RCC_ClockConfig+0x1c4>)
 800c5d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c5da:	4b09      	ldr	r3, [pc, #36]	; (800c600 <HAL_RCC_ClockConfig+0x1c8>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7f7 f95a 	bl	8003898 <HAL_InitTick>

  return HAL_OK;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	40023c00 	.word	0x40023c00
 800c5f4:	40023800 	.word	0x40023800
 800c5f8:	080169c4 	.word	0x080169c4
 800c5fc:	20000004 	.word	0x20000004
 800c600:	20000008 	.word	0x20000008

0800c604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c608:	b094      	sub	sp, #80	; 0x50
 800c60a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c60c:	2300      	movs	r3, #0
 800c60e:	647b      	str	r3, [r7, #68]	; 0x44
 800c610:	2300      	movs	r3, #0
 800c612:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c614:	2300      	movs	r3, #0
 800c616:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800c618:	2300      	movs	r3, #0
 800c61a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c61c:	4b79      	ldr	r3, [pc, #484]	; (800c804 <HAL_RCC_GetSysClockFreq+0x200>)
 800c61e:	689b      	ldr	r3, [r3, #8]
 800c620:	f003 030c 	and.w	r3, r3, #12
 800c624:	2b08      	cmp	r3, #8
 800c626:	d00d      	beq.n	800c644 <HAL_RCC_GetSysClockFreq+0x40>
 800c628:	2b08      	cmp	r3, #8
 800c62a:	f200 80e1 	bhi.w	800c7f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d002      	beq.n	800c638 <HAL_RCC_GetSysClockFreq+0x34>
 800c632:	2b04      	cmp	r3, #4
 800c634:	d003      	beq.n	800c63e <HAL_RCC_GetSysClockFreq+0x3a>
 800c636:	e0db      	b.n	800c7f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c638:	4b73      	ldr	r3, [pc, #460]	; (800c808 <HAL_RCC_GetSysClockFreq+0x204>)
 800c63a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800c63c:	e0db      	b.n	800c7f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c63e:	4b72      	ldr	r3, [pc, #456]	; (800c808 <HAL_RCC_GetSysClockFreq+0x204>)
 800c640:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c642:	e0d8      	b.n	800c7f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c644:	4b6f      	ldr	r3, [pc, #444]	; (800c804 <HAL_RCC_GetSysClockFreq+0x200>)
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c64c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c64e:	4b6d      	ldr	r3, [pc, #436]	; (800c804 <HAL_RCC_GetSysClockFreq+0x200>)
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c656:	2b00      	cmp	r3, #0
 800c658:	d063      	beq.n	800c722 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c65a:	4b6a      	ldr	r3, [pc, #424]	; (800c804 <HAL_RCC_GetSysClockFreq+0x200>)
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	099b      	lsrs	r3, r3, #6
 800c660:	2200      	movs	r2, #0
 800c662:	63bb      	str	r3, [r7, #56]	; 0x38
 800c664:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c66c:	633b      	str	r3, [r7, #48]	; 0x30
 800c66e:	2300      	movs	r3, #0
 800c670:	637b      	str	r3, [r7, #52]	; 0x34
 800c672:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c676:	4622      	mov	r2, r4
 800c678:	462b      	mov	r3, r5
 800c67a:	f04f 0000 	mov.w	r0, #0
 800c67e:	f04f 0100 	mov.w	r1, #0
 800c682:	0159      	lsls	r1, r3, #5
 800c684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c688:	0150      	lsls	r0, r2, #5
 800c68a:	4602      	mov	r2, r0
 800c68c:	460b      	mov	r3, r1
 800c68e:	4621      	mov	r1, r4
 800c690:	1a51      	subs	r1, r2, r1
 800c692:	6139      	str	r1, [r7, #16]
 800c694:	4629      	mov	r1, r5
 800c696:	eb63 0301 	sbc.w	r3, r3, r1
 800c69a:	617b      	str	r3, [r7, #20]
 800c69c:	f04f 0200 	mov.w	r2, #0
 800c6a0:	f04f 0300 	mov.w	r3, #0
 800c6a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c6a8:	4659      	mov	r1, fp
 800c6aa:	018b      	lsls	r3, r1, #6
 800c6ac:	4651      	mov	r1, sl
 800c6ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c6b2:	4651      	mov	r1, sl
 800c6b4:	018a      	lsls	r2, r1, #6
 800c6b6:	4651      	mov	r1, sl
 800c6b8:	ebb2 0801 	subs.w	r8, r2, r1
 800c6bc:	4659      	mov	r1, fp
 800c6be:	eb63 0901 	sbc.w	r9, r3, r1
 800c6c2:	f04f 0200 	mov.w	r2, #0
 800c6c6:	f04f 0300 	mov.w	r3, #0
 800c6ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c6ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c6d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c6d6:	4690      	mov	r8, r2
 800c6d8:	4699      	mov	r9, r3
 800c6da:	4623      	mov	r3, r4
 800c6dc:	eb18 0303 	adds.w	r3, r8, r3
 800c6e0:	60bb      	str	r3, [r7, #8]
 800c6e2:	462b      	mov	r3, r5
 800c6e4:	eb49 0303 	adc.w	r3, r9, r3
 800c6e8:	60fb      	str	r3, [r7, #12]
 800c6ea:	f04f 0200 	mov.w	r2, #0
 800c6ee:	f04f 0300 	mov.w	r3, #0
 800c6f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c6f6:	4629      	mov	r1, r5
 800c6f8:	028b      	lsls	r3, r1, #10
 800c6fa:	4621      	mov	r1, r4
 800c6fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c700:	4621      	mov	r1, r4
 800c702:	028a      	lsls	r2, r1, #10
 800c704:	4610      	mov	r0, r2
 800c706:	4619      	mov	r1, r3
 800c708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c70a:	2200      	movs	r2, #0
 800c70c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c70e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c710:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c714:	f7f4 fa48 	bl	8000ba8 <__aeabi_uldivmod>
 800c718:	4602      	mov	r2, r0
 800c71a:	460b      	mov	r3, r1
 800c71c:	4613      	mov	r3, r2
 800c71e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c720:	e058      	b.n	800c7d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c722:	4b38      	ldr	r3, [pc, #224]	; (800c804 <HAL_RCC_GetSysClockFreq+0x200>)
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	099b      	lsrs	r3, r3, #6
 800c728:	2200      	movs	r2, #0
 800c72a:	4618      	mov	r0, r3
 800c72c:	4611      	mov	r1, r2
 800c72e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c732:	623b      	str	r3, [r7, #32]
 800c734:	2300      	movs	r3, #0
 800c736:	627b      	str	r3, [r7, #36]	; 0x24
 800c738:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800c73c:	4642      	mov	r2, r8
 800c73e:	464b      	mov	r3, r9
 800c740:	f04f 0000 	mov.w	r0, #0
 800c744:	f04f 0100 	mov.w	r1, #0
 800c748:	0159      	lsls	r1, r3, #5
 800c74a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c74e:	0150      	lsls	r0, r2, #5
 800c750:	4602      	mov	r2, r0
 800c752:	460b      	mov	r3, r1
 800c754:	4641      	mov	r1, r8
 800c756:	ebb2 0a01 	subs.w	sl, r2, r1
 800c75a:	4649      	mov	r1, r9
 800c75c:	eb63 0b01 	sbc.w	fp, r3, r1
 800c760:	f04f 0200 	mov.w	r2, #0
 800c764:	f04f 0300 	mov.w	r3, #0
 800c768:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800c76c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800c770:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800c774:	ebb2 040a 	subs.w	r4, r2, sl
 800c778:	eb63 050b 	sbc.w	r5, r3, fp
 800c77c:	f04f 0200 	mov.w	r2, #0
 800c780:	f04f 0300 	mov.w	r3, #0
 800c784:	00eb      	lsls	r3, r5, #3
 800c786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c78a:	00e2      	lsls	r2, r4, #3
 800c78c:	4614      	mov	r4, r2
 800c78e:	461d      	mov	r5, r3
 800c790:	4643      	mov	r3, r8
 800c792:	18e3      	adds	r3, r4, r3
 800c794:	603b      	str	r3, [r7, #0]
 800c796:	464b      	mov	r3, r9
 800c798:	eb45 0303 	adc.w	r3, r5, r3
 800c79c:	607b      	str	r3, [r7, #4]
 800c79e:	f04f 0200 	mov.w	r2, #0
 800c7a2:	f04f 0300 	mov.w	r3, #0
 800c7a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c7aa:	4629      	mov	r1, r5
 800c7ac:	028b      	lsls	r3, r1, #10
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c7b4:	4621      	mov	r1, r4
 800c7b6:	028a      	lsls	r2, r1, #10
 800c7b8:	4610      	mov	r0, r2
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7be:	2200      	movs	r2, #0
 800c7c0:	61bb      	str	r3, [r7, #24]
 800c7c2:	61fa      	str	r2, [r7, #28]
 800c7c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c7c8:	f7f4 f9ee 	bl	8000ba8 <__aeabi_uldivmod>
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	4613      	mov	r3, r2
 800c7d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c7d4:	4b0b      	ldr	r3, [pc, #44]	; (800c804 <HAL_RCC_GetSysClockFreq+0x200>)
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	0c1b      	lsrs	r3, r3, #16
 800c7da:	f003 0303 	and.w	r3, r3, #3
 800c7de:	3301      	adds	r3, #1
 800c7e0:	005b      	lsls	r3, r3, #1
 800c7e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800c7e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c7e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c7ee:	e002      	b.n	800c7f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c7f0:	4b05      	ldr	r3, [pc, #20]	; (800c808 <HAL_RCC_GetSysClockFreq+0x204>)
 800c7f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c7f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c7f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3750      	adds	r7, #80	; 0x50
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c802:	bf00      	nop
 800c804:	40023800 	.word	0x40023800
 800c808:	00f42400 	.word	0x00f42400

0800c80c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c80c:	b480      	push	{r7}
 800c80e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c810:	4b03      	ldr	r3, [pc, #12]	; (800c820 <HAL_RCC_GetHCLKFreq+0x14>)
 800c812:	681b      	ldr	r3, [r3, #0]
}
 800c814:	4618      	mov	r0, r3
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr
 800c81e:	bf00      	nop
 800c820:	20000004 	.word	0x20000004

0800c824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c828:	f7ff fff0 	bl	800c80c <HAL_RCC_GetHCLKFreq>
 800c82c:	4602      	mov	r2, r0
 800c82e:	4b05      	ldr	r3, [pc, #20]	; (800c844 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c830:	689b      	ldr	r3, [r3, #8]
 800c832:	0a9b      	lsrs	r3, r3, #10
 800c834:	f003 0307 	and.w	r3, r3, #7
 800c838:	4903      	ldr	r1, [pc, #12]	; (800c848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c83a:	5ccb      	ldrb	r3, [r1, r3]
 800c83c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c840:	4618      	mov	r0, r3
 800c842:	bd80      	pop	{r7, pc}
 800c844:	40023800 	.word	0x40023800
 800c848:	080169d4 	.word	0x080169d4

0800c84c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c850:	f7ff ffdc 	bl	800c80c <HAL_RCC_GetHCLKFreq>
 800c854:	4602      	mov	r2, r0
 800c856:	4b05      	ldr	r3, [pc, #20]	; (800c86c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c858:	689b      	ldr	r3, [r3, #8]
 800c85a:	0b5b      	lsrs	r3, r3, #13
 800c85c:	f003 0307 	and.w	r3, r3, #7
 800c860:	4903      	ldr	r1, [pc, #12]	; (800c870 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c862:	5ccb      	ldrb	r3, [r1, r3]
 800c864:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c868:	4618      	mov	r0, r3
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	40023800 	.word	0x40023800
 800c870:	080169d4 	.word	0x080169d4

0800c874 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	220f      	movs	r2, #15
 800c882:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c884:	4b12      	ldr	r3, [pc, #72]	; (800c8d0 <HAL_RCC_GetClockConfig+0x5c>)
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	f003 0203 	and.w	r2, r3, #3
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c890:	4b0f      	ldr	r3, [pc, #60]	; (800c8d0 <HAL_RCC_GetClockConfig+0x5c>)
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c89c:	4b0c      	ldr	r3, [pc, #48]	; (800c8d0 <HAL_RCC_GetClockConfig+0x5c>)
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800c8a8:	4b09      	ldr	r3, [pc, #36]	; (800c8d0 <HAL_RCC_GetClockConfig+0x5c>)
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	08db      	lsrs	r3, r3, #3
 800c8ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c8b6:	4b07      	ldr	r3, [pc, #28]	; (800c8d4 <HAL_RCC_GetClockConfig+0x60>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f003 0207 	and.w	r2, r3, #7
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	601a      	str	r2, [r3, #0]
}
 800c8c2:	bf00      	nop
 800c8c4:	370c      	adds	r7, #12
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop
 800c8d0:	40023800 	.word	0x40023800
 800c8d4:	40023c00 	.word	0x40023c00

0800c8d8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d101      	bne.n	800c8ea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	e022      	b.n	800c930 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d105      	bne.n	800c902 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f7f6 fbfd 	bl	80030fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2203      	movs	r2, #3
 800c906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 f814 	bl	800c938 <HAL_SD_InitCard>
 800c910:	4603      	mov	r3, r0
 800c912:	2b00      	cmp	r3, #0
 800c914:	d001      	beq.n	800c91a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c916:	2301      	movs	r3, #1
 800c918:	e00a      	b.n	800c930 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2200      	movs	r2, #0
 800c91e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2201      	movs	r2, #1
 800c92a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c92e:	2300      	movs	r3, #0
}
 800c930:	4618      	mov	r0, r3
 800c932:	3708      	adds	r7, #8
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}

0800c938 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c938:	b5b0      	push	{r4, r5, r7, lr}
 800c93a:	b08e      	sub	sp, #56	; 0x38
 800c93c:	af04      	add	r7, sp, #16
 800c93e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800c940:	2300      	movs	r3, #0
 800c942:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800c944:	2300      	movs	r3, #0
 800c946:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c948:	2300      	movs	r3, #0
 800c94a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800c94c:	2300      	movs	r3, #0
 800c94e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c950:	2300      	movs	r3, #0
 800c952:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800c954:	2376      	movs	r3, #118	; 0x76
 800c956:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681d      	ldr	r5, [r3, #0]
 800c95c:	466c      	mov	r4, sp
 800c95e:	f107 0314 	add.w	r3, r7, #20
 800c962:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c966:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c96a:	f107 0308 	add.w	r3, r7, #8
 800c96e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c970:	4628      	mov	r0, r5
 800c972:	f003 fd35 	bl	80103e0 <SDIO_Init>
 800c976:	4603      	mov	r3, r0
 800c978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c97c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c980:	2b00      	cmp	r3, #0
 800c982:	d001      	beq.n	800c988 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c984:	2301      	movs	r3, #1
 800c986:	e04f      	b.n	800ca28 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800c988:	4b29      	ldr	r3, [pc, #164]	; (800ca30 <HAL_SD_InitCard+0xf8>)
 800c98a:	2200      	movs	r2, #0
 800c98c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4618      	mov	r0, r3
 800c994:	f003 fd5c 	bl	8010450 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800c998:	4b25      	ldr	r3, [pc, #148]	; (800ca30 <HAL_SD_InitCard+0xf8>)
 800c99a:	2201      	movs	r2, #1
 800c99c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800c99e:	2002      	movs	r0, #2
 800c9a0:	f7fc fdb4 	bl	800950c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fb53 	bl	800d050 <SD_PowerON>
 800c9aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c9ac:	6a3b      	ldr	r3, [r7, #32]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d00b      	beq.n	800c9ca <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9be:	6a3b      	ldr	r3, [r7, #32]
 800c9c0:	431a      	orrs	r2, r3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	e02e      	b.n	800ca28 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 fa72 	bl	800ceb4 <SD_InitCard>
 800c9d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c9d2:	6a3b      	ldr	r3, [r7, #32]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d00b      	beq.n	800c9f0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9e4:	6a3b      	ldr	r3, [r7, #32]
 800c9e6:	431a      	orrs	r2, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e01b      	b.n	800ca28 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f003 fdbb 	bl	8010574 <SDMMC_CmdBlockLength>
 800c9fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca00:	6a3b      	ldr	r3, [r7, #32]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d00f      	beq.n	800ca26 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a0a      	ldr	r2, [pc, #40]	; (800ca34 <HAL_SD_InitCard+0xfc>)
 800ca0c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca12:	6a3b      	ldr	r3, [r7, #32]
 800ca14:	431a      	orrs	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ca22:	2301      	movs	r3, #1
 800ca24:	e000      	b.n	800ca28 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800ca26:	2300      	movs	r3, #0
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3728      	adds	r7, #40	; 0x28
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bdb0      	pop	{r4, r5, r7, pc}
 800ca30:	422580a0 	.word	0x422580a0
 800ca34:	004005ff 	.word	0x004005ff

0800ca38 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b083      	sub	sp, #12
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca46:	0f9b      	lsrs	r3, r3, #30
 800ca48:	b2da      	uxtb	r2, r3
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca52:	0e9b      	lsrs	r3, r3, #26
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	f003 030f 	and.w	r3, r3, #15
 800ca5a:	b2da      	uxtb	r2, r3
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca64:	0e1b      	lsrs	r3, r3, #24
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	f003 0303 	and.w	r3, r3, #3
 800ca6c:	b2da      	uxtb	r2, r3
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca76:	0c1b      	lsrs	r3, r3, #16
 800ca78:	b2da      	uxtb	r2, r3
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca82:	0a1b      	lsrs	r3, r3, #8
 800ca84:	b2da      	uxtb	r2, r3
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca8e:	b2da      	uxtb	r2, r3
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca98:	0d1b      	lsrs	r3, r3, #20
 800ca9a:	b29a      	uxth	r2, r3
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800caa4:	0c1b      	lsrs	r3, r3, #16
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	f003 030f 	and.w	r3, r3, #15
 800caac:	b2da      	uxtb	r2, r3
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cab6:	0bdb      	lsrs	r3, r3, #15
 800cab8:	b2db      	uxtb	r3, r3
 800caba:	f003 0301 	and.w	r3, r3, #1
 800cabe:	b2da      	uxtb	r2, r3
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cac8:	0b9b      	lsrs	r3, r3, #14
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	f003 0301 	and.w	r3, r3, #1
 800cad0:	b2da      	uxtb	r2, r3
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cada:	0b5b      	lsrs	r3, r3, #13
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	f003 0301 	and.w	r3, r3, #1
 800cae2:	b2da      	uxtb	r2, r3
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800caec:	0b1b      	lsrs	r3, r3, #12
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	f003 0301 	and.w	r3, r3, #1
 800caf4:	b2da      	uxtb	r2, r3
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	2200      	movs	r2, #0
 800cafe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d163      	bne.n	800cbd0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb0c:	009a      	lsls	r2, r3, #2
 800cb0e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cb12:	4013      	ands	r3, r2
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800cb18:	0f92      	lsrs	r2, r2, #30
 800cb1a:	431a      	orrs	r2, r3
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb24:	0edb      	lsrs	r3, r3, #27
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	f003 0307 	and.w	r3, r3, #7
 800cb2c:	b2da      	uxtb	r2, r3
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb36:	0e1b      	lsrs	r3, r3, #24
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	f003 0307 	and.w	r3, r3, #7
 800cb3e:	b2da      	uxtb	r2, r3
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb48:	0d5b      	lsrs	r3, r3, #21
 800cb4a:	b2db      	uxtb	r3, r3
 800cb4c:	f003 0307 	and.w	r3, r3, #7
 800cb50:	b2da      	uxtb	r2, r3
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb5a:	0c9b      	lsrs	r3, r3, #18
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	f003 0307 	and.w	r3, r3, #7
 800cb62:	b2da      	uxtb	r2, r3
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb6c:	0bdb      	lsrs	r3, r3, #15
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	f003 0307 	and.w	r3, r3, #7
 800cb74:	b2da      	uxtb	r2, r3
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	691b      	ldr	r3, [r3, #16]
 800cb7e:	1c5a      	adds	r2, r3, #1
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	7e1b      	ldrb	r3, [r3, #24]
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	f003 0307 	and.w	r3, r3, #7
 800cb8e:	3302      	adds	r3, #2
 800cb90:	2201      	movs	r2, #1
 800cb92:	fa02 f303 	lsl.w	r3, r2, r3
 800cb96:	687a      	ldr	r2, [r7, #4]
 800cb98:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800cb9a:	fb03 f202 	mul.w	r2, r3, r2
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	7a1b      	ldrb	r3, [r3, #8]
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	f003 030f 	and.w	r3, r3, #15
 800cbac:	2201      	movs	r2, #1
 800cbae:	409a      	lsls	r2, r3
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbb8:	687a      	ldr	r2, [r7, #4]
 800cbba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800cbbc:	0a52      	lsrs	r2, r2, #9
 800cbbe:	fb03 f202 	mul.w	r2, r3, r2
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbcc:	661a      	str	r2, [r3, #96]	; 0x60
 800cbce:	e031      	b.n	800cc34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d11d      	bne.n	800cc14 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cbdc:	041b      	lsls	r3, r3, #16
 800cbde:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbe6:	0c1b      	lsrs	r3, r3, #16
 800cbe8:	431a      	orrs	r2, r3
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	691b      	ldr	r3, [r3, #16]
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	029a      	lsls	r2, r3, #10
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc08:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	661a      	str	r2, [r3, #96]	; 0x60
 800cc12:	e00f      	b.n	800cc34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a58      	ldr	r2, [pc, #352]	; (800cd7c <HAL_SD_GetCardCSD+0x344>)
 800cc1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cc30:	2301      	movs	r3, #1
 800cc32:	e09d      	b.n	800cd70 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc38:	0b9b      	lsrs	r3, r3, #14
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	f003 0301 	and.w	r3, r3, #1
 800cc40:	b2da      	uxtb	r2, r3
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc4a:	09db      	lsrs	r3, r3, #7
 800cc4c:	b2db      	uxtb	r3, r3
 800cc4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc52:	b2da      	uxtb	r2, r3
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc62:	b2da      	uxtb	r2, r3
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc6c:	0fdb      	lsrs	r3, r3, #31
 800cc6e:	b2da      	uxtb	r2, r3
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc78:	0f5b      	lsrs	r3, r3, #29
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	f003 0303 	and.w	r3, r3, #3
 800cc80:	b2da      	uxtb	r2, r3
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc8a:	0e9b      	lsrs	r3, r3, #26
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	f003 0307 	and.w	r3, r3, #7
 800cc92:	b2da      	uxtb	r2, r3
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc9c:	0d9b      	lsrs	r3, r3, #22
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	f003 030f 	and.w	r3, r3, #15
 800cca4:	b2da      	uxtb	r2, r3
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccae:	0d5b      	lsrs	r3, r3, #21
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	f003 0301 	and.w	r3, r3, #1
 800ccb6:	b2da      	uxtb	r2, r3
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccca:	0c1b      	lsrs	r3, r3, #16
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	f003 0301 	and.w	r3, r3, #1
 800ccd2:	b2da      	uxtb	r2, r3
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccde:	0bdb      	lsrs	r3, r3, #15
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	f003 0301 	and.w	r3, r3, #1
 800cce6:	b2da      	uxtb	r2, r3
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccf2:	0b9b      	lsrs	r3, r3, #14
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	f003 0301 	and.w	r3, r3, #1
 800ccfa:	b2da      	uxtb	r2, r3
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd06:	0b5b      	lsrs	r3, r3, #13
 800cd08:	b2db      	uxtb	r3, r3
 800cd0a:	f003 0301 	and.w	r3, r3, #1
 800cd0e:	b2da      	uxtb	r2, r3
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd1a:	0b1b      	lsrs	r3, r3, #12
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	f003 0301 	and.w	r3, r3, #1
 800cd22:	b2da      	uxtb	r2, r3
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd2e:	0a9b      	lsrs	r3, r3, #10
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	f003 0303 	and.w	r3, r3, #3
 800cd36:	b2da      	uxtb	r2, r3
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd42:	0a1b      	lsrs	r3, r3, #8
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	f003 0303 	and.w	r3, r3, #3
 800cd4a:	b2da      	uxtb	r2, r3
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd56:	085b      	lsrs	r3, r3, #1
 800cd58:	b2db      	uxtb	r3, r3
 800cd5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd5e:	b2da      	uxtb	r2, r3
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	2201      	movs	r2, #1
 800cd6a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800cd6e:	2300      	movs	r3, #0
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	370c      	adds	r7, #12
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr
 800cd7c:	004005ff 	.word	0x004005ff

0800cd80 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cd80:	b5b0      	push	{r4, r5, r7, lr}
 800cd82:	b08e      	sub	sp, #56	; 0x38
 800cd84:	af04      	add	r7, sp, #16
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2203      	movs	r2, #3
 800cd94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd9c:	2b03      	cmp	r3, #3
 800cd9e:	d02e      	beq.n	800cdfe <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cda6:	d106      	bne.n	800cdb6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	639a      	str	r2, [r3, #56]	; 0x38
 800cdb4:	e029      	b.n	800ce0a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdbc:	d10a      	bne.n	800cdd4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 f9d4 	bl	800d16c <SD_WideBus_Enable>
 800cdc4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdca:	6a3b      	ldr	r3, [r7, #32]
 800cdcc:	431a      	orrs	r2, r3
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	639a      	str	r2, [r3, #56]	; 0x38
 800cdd2:	e01a      	b.n	800ce0a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d10a      	bne.n	800cdf0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f000 fa11 	bl	800d202 <SD_WideBus_Disable>
 800cde0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cde6:	6a3b      	ldr	r3, [r7, #32]
 800cde8:	431a      	orrs	r2, r3
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	639a      	str	r2, [r3, #56]	; 0x38
 800cdee:	e00c      	b.n	800ce0a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	639a      	str	r2, [r3, #56]	; 0x38
 800cdfc:	e005      	b.n	800ce0a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce02:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00b      	beq.n	800ce2a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	4a26      	ldr	r2, [pc, #152]	; (800ceb0 <HAL_SD_ConfigWideBusOperation+0x130>)
 800ce18:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ce22:	2301      	movs	r3, #1
 800ce24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce28:	e01f      	b.n	800ce6a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	68db      	ldr	r3, [r3, #12]
 800ce3a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	695b      	ldr	r3, [r3, #20]
 800ce44:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	699b      	ldr	r3, [r3, #24]
 800ce4a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681d      	ldr	r5, [r3, #0]
 800ce50:	466c      	mov	r4, sp
 800ce52:	f107 0314 	add.w	r3, r7, #20
 800ce56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ce5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ce5e:	f107 0308 	add.w	r3, r7, #8
 800ce62:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ce64:	4628      	mov	r0, r5
 800ce66:	f003 fabb 	bl	80103e0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ce72:	4618      	mov	r0, r3
 800ce74:	f003 fb7e 	bl	8010574 <SDMMC_CmdBlockLength>
 800ce78:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce7a:	6a3b      	ldr	r3, [r7, #32]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00c      	beq.n	800ce9a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4a0a      	ldr	r2, [pc, #40]	; (800ceb0 <HAL_SD_ConfigWideBusOperation+0x130>)
 800ce86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce8c:	6a3b      	ldr	r3, [r7, #32]
 800ce8e:	431a      	orrs	r2, r3
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ce94:	2301      	movs	r3, #1
 800ce96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800cea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3728      	adds	r7, #40	; 0x28
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bdb0      	pop	{r4, r5, r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	004005ff 	.word	0x004005ff

0800ceb4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ceb4:	b5b0      	push	{r4, r5, r7, lr}
 800ceb6:	b094      	sub	sp, #80	; 0x50
 800ceb8:	af04      	add	r7, sp, #16
 800ceba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800cebc:	2301      	movs	r3, #1
 800cebe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4618      	mov	r0, r3
 800cec6:	f003 fad1 	bl	801046c <SDIO_GetPowerState>
 800ceca:	4603      	mov	r3, r0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d102      	bne.n	800ced6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ced0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ced4:	e0b8      	b.n	800d048 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceda:	2b03      	cmp	r3, #3
 800cedc:	d02f      	beq.n	800cf3e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4618      	mov	r0, r3
 800cee4:	f003 fc50 	bl	8010788 <SDMMC_CmdSendCID>
 800cee8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ceea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d001      	beq.n	800cef4 <SD_InitCard+0x40>
    {
      return errorstate;
 800cef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cef2:	e0a9      	b.n	800d048 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	2100      	movs	r1, #0
 800cefa:	4618      	mov	r0, r3
 800cefc:	f003 fafb 	bl	80104f6 <SDIO_GetResponse>
 800cf00:	4602      	mov	r2, r0
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2104      	movs	r1, #4
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f003 faf2 	bl	80104f6 <SDIO_GetResponse>
 800cf12:	4602      	mov	r2, r0
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2108      	movs	r1, #8
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f003 fae9 	bl	80104f6 <SDIO_GetResponse>
 800cf24:	4602      	mov	r2, r0
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	210c      	movs	r1, #12
 800cf30:	4618      	mov	r0, r3
 800cf32:	f003 fae0 	bl	80104f6 <SDIO_GetResponse>
 800cf36:	4602      	mov	r2, r0
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf42:	2b03      	cmp	r3, #3
 800cf44:	d00d      	beq.n	800cf62 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f107 020e 	add.w	r2, r7, #14
 800cf4e:	4611      	mov	r1, r2
 800cf50:	4618      	mov	r0, r3
 800cf52:	f003 fc56 	bl	8010802 <SDMMC_CmdSetRelAdd>
 800cf56:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d001      	beq.n	800cf62 <SD_InitCard+0xae>
    {
      return errorstate;
 800cf5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf60:	e072      	b.n	800d048 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf66:	2b03      	cmp	r3, #3
 800cf68:	d036      	beq.n	800cfd8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800cf6a:	89fb      	ldrh	r3, [r7, #14]
 800cf6c:	461a      	mov	r2, r3
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681a      	ldr	r2, [r3, #0]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf7a:	041b      	lsls	r3, r3, #16
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	4610      	mov	r0, r2
 800cf80:	f003 fc20 	bl	80107c4 <SDMMC_CmdSendCSD>
 800cf84:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d001      	beq.n	800cf90 <SD_InitCard+0xdc>
    {
      return errorstate;
 800cf8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf8e:	e05b      	b.n	800d048 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2100      	movs	r1, #0
 800cf96:	4618      	mov	r0, r3
 800cf98:	f003 faad 	bl	80104f6 <SDIO_GetResponse>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2104      	movs	r1, #4
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f003 faa4 	bl	80104f6 <SDIO_GetResponse>
 800cfae:	4602      	mov	r2, r0
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2108      	movs	r1, #8
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f003 fa9b 	bl	80104f6 <SDIO_GetResponse>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	210c      	movs	r1, #12
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f003 fa92 	bl	80104f6 <SDIO_GetResponse>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2104      	movs	r1, #4
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f003 fa89 	bl	80104f6 <SDIO_GetResponse>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	0d1a      	lsrs	r2, r3, #20
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cfec:	f107 0310 	add.w	r3, r7, #16
 800cff0:	4619      	mov	r1, r3
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f7ff fd20 	bl	800ca38 <HAL_SD_GetCardCSD>
 800cff8:	4603      	mov	r3, r0
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d002      	beq.n	800d004 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cffe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d002:	e021      	b.n	800d048 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6819      	ldr	r1, [r3, #0]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d00c:	041b      	lsls	r3, r3, #16
 800d00e:	2200      	movs	r2, #0
 800d010:	461c      	mov	r4, r3
 800d012:	4615      	mov	r5, r2
 800d014:	4622      	mov	r2, r4
 800d016:	462b      	mov	r3, r5
 800d018:	4608      	mov	r0, r1
 800d01a:	f003 facd 	bl	80105b8 <SDMMC_CmdSelDesel>
 800d01e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d022:	2b00      	cmp	r3, #0
 800d024:	d001      	beq.n	800d02a <SD_InitCard+0x176>
  {
    return errorstate;
 800d026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d028:	e00e      	b.n	800d048 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681d      	ldr	r5, [r3, #0]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	466c      	mov	r4, sp
 800d032:	f103 0210 	add.w	r2, r3, #16
 800d036:	ca07      	ldmia	r2, {r0, r1, r2}
 800d038:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d03c:	3304      	adds	r3, #4
 800d03e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d040:	4628      	mov	r0, r5
 800d042:	f003 f9cd 	bl	80103e0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d046:	2300      	movs	r3, #0
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3740      	adds	r7, #64	; 0x40
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bdb0      	pop	{r4, r5, r7, pc}

0800d050 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b086      	sub	sp, #24
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d058:	2300      	movs	r3, #0
 800d05a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d05c:	2300      	movs	r3, #0
 800d05e:	617b      	str	r3, [r7, #20]
 800d060:	2300      	movs	r3, #0
 800d062:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4618      	mov	r0, r3
 800d06a:	f003 fac8 	bl	80105fe <SDMMC_CmdGoIdleState>
 800d06e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d001      	beq.n	800d07a <SD_PowerON+0x2a>
  {
    return errorstate;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	e072      	b.n	800d160 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4618      	mov	r0, r3
 800d080:	f003 fadb 	bl	801063a <SDMMC_CmdOperCond>
 800d084:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d00d      	beq.n	800d0a8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4618      	mov	r0, r3
 800d098:	f003 fab1 	bl	80105fe <SDMMC_CmdGoIdleState>
 800d09c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d004      	beq.n	800d0ae <SD_PowerON+0x5e>
    {
      return errorstate;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	e05b      	b.n	800d160 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d137      	bne.n	800d126 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2100      	movs	r1, #0
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f003 fadb 	bl	8010678 <SDMMC_CmdAppCommand>
 800d0c2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d02d      	beq.n	800d126 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d0ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d0ce:	e047      	b.n	800d160 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	2100      	movs	r1, #0
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f003 face 	bl	8010678 <SDMMC_CmdAppCommand>
 800d0dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d001      	beq.n	800d0e8 <SD_PowerON+0x98>
    {
      return errorstate;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	e03b      	b.n	800d160 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	491e      	ldr	r1, [pc, #120]	; (800d168 <SD_PowerON+0x118>)
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f003 fae4 	bl	80106bc <SDMMC_CmdAppOperCommand>
 800d0f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d002      	beq.n	800d102 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d0fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d100:	e02e      	b.n	800d160 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2100      	movs	r1, #0
 800d108:	4618      	mov	r0, r3
 800d10a:	f003 f9f4 	bl	80104f6 <SDIO_GetResponse>
 800d10e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	0fdb      	lsrs	r3, r3, #31
 800d114:	2b01      	cmp	r3, #1
 800d116:	d101      	bne.n	800d11c <SD_PowerON+0xcc>
 800d118:	2301      	movs	r3, #1
 800d11a:	e000      	b.n	800d11e <SD_PowerON+0xce>
 800d11c:	2300      	movs	r3, #0
 800d11e:	613b      	str	r3, [r7, #16]

    count++;
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	3301      	adds	r3, #1
 800d124:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d802      	bhi.n	800d136 <SD_PowerON+0xe6>
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d0cc      	beq.n	800d0d0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d902      	bls.n	800d146 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d140:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d144:	e00c      	b.n	800d160 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d003      	beq.n	800d158 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2201      	movs	r2, #1
 800d154:	645a      	str	r2, [r3, #68]	; 0x44
 800d156:	e002      	b.n	800d15e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2200      	movs	r2, #0
 800d15c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d15e:	2300      	movs	r3, #0
}
 800d160:	4618      	mov	r0, r3
 800d162:	3718      	adds	r7, #24
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	c1100000 	.word	0xc1100000

0800d16c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b086      	sub	sp, #24
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d174:	2300      	movs	r3, #0
 800d176:	60fb      	str	r3, [r7, #12]
 800d178:	2300      	movs	r3, #0
 800d17a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	2100      	movs	r1, #0
 800d182:	4618      	mov	r0, r3
 800d184:	f003 f9b7 	bl	80104f6 <SDIO_GetResponse>
 800d188:	4603      	mov	r3, r0
 800d18a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d18e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d192:	d102      	bne.n	800d19a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d194:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d198:	e02f      	b.n	800d1fa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d19a:	f107 030c 	add.w	r3, r7, #12
 800d19e:	4619      	mov	r1, r3
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 f879 	bl	800d298 <SD_FindSCR>
 800d1a6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d001      	beq.n	800d1b2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	e023      	b.n	800d1fa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d01c      	beq.n	800d1f6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1c4:	041b      	lsls	r3, r3, #16
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	4610      	mov	r0, r2
 800d1ca:	f003 fa55 	bl	8010678 <SDMMC_CmdAppCommand>
 800d1ce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d001      	beq.n	800d1da <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	e00f      	b.n	800d1fa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	2102      	movs	r1, #2
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f003 fa8e 	bl	8010702 <SDMMC_CmdBusWidth>
 800d1e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d001      	beq.n	800d1f2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	e003      	b.n	800d1fa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	e001      	b.n	800d1fa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d1f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3718      	adds	r7, #24
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b086      	sub	sp, #24
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d20a:	2300      	movs	r3, #0
 800d20c:	60fb      	str	r3, [r7, #12]
 800d20e:	2300      	movs	r3, #0
 800d210:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2100      	movs	r1, #0
 800d218:	4618      	mov	r0, r3
 800d21a:	f003 f96c 	bl	80104f6 <SDIO_GetResponse>
 800d21e:	4603      	mov	r3, r0
 800d220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d224:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d228:	d102      	bne.n	800d230 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d22a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d22e:	e02f      	b.n	800d290 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d230:	f107 030c 	add.w	r3, r7, #12
 800d234:	4619      	mov	r1, r3
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 f82e 	bl	800d298 <SD_FindSCR>
 800d23c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d001      	beq.n	800d248 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	e023      	b.n	800d290 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d01c      	beq.n	800d28c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d25a:	041b      	lsls	r3, r3, #16
 800d25c:	4619      	mov	r1, r3
 800d25e:	4610      	mov	r0, r2
 800d260:	f003 fa0a 	bl	8010678 <SDMMC_CmdAppCommand>
 800d264:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d001      	beq.n	800d270 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	e00f      	b.n	800d290 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2100      	movs	r1, #0
 800d276:	4618      	mov	r0, r3
 800d278:	f003 fa43 	bl	8010702 <SDMMC_CmdBusWidth>
 800d27c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d001      	beq.n	800d288 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	e003      	b.n	800d290 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d288:	2300      	movs	r3, #0
 800d28a:	e001      	b.n	800d290 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d28c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d290:	4618      	mov	r0, r3
 800d292:	3718      	adds	r7, #24
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d298:	b590      	push	{r4, r7, lr}
 800d29a:	b08f      	sub	sp, #60	; 0x3c
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d2a2:	f7fc f927 	bl	80094f4 <HAL_GetTick>
 800d2a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	60bb      	str	r3, [r7, #8]
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2108      	movs	r1, #8
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f003 f958 	bl	8010574 <SDMMC_CmdBlockLength>
 800d2c4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d001      	beq.n	800d2d0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ce:	e0b2      	b.n	800d436 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2d8:	041b      	lsls	r3, r3, #16
 800d2da:	4619      	mov	r1, r3
 800d2dc:	4610      	mov	r0, r2
 800d2de:	f003 f9cb 	bl	8010678 <SDMMC_CmdAppCommand>
 800d2e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d001      	beq.n	800d2ee <SD_FindSCR+0x56>
  {
    return errorstate;
 800d2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ec:	e0a3      	b.n	800d436 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d2ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d2f2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d2f4:	2308      	movs	r3, #8
 800d2f6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800d2f8:	2330      	movs	r3, #48	; 0x30
 800d2fa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d2fc:	2302      	movs	r3, #2
 800d2fe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d300:	2300      	movs	r3, #0
 800d302:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800d304:	2301      	movs	r3, #1
 800d306:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f107 0210 	add.w	r2, r7, #16
 800d310:	4611      	mov	r1, r2
 800d312:	4618      	mov	r0, r3
 800d314:	f003 f902 	bl	801051c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4618      	mov	r0, r3
 800d31e:	f003 fa12 	bl	8010746 <SDMMC_CmdSendSCR>
 800d322:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d326:	2b00      	cmp	r3, #0
 800d328:	d02a      	beq.n	800d380 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800d32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32c:	e083      	b.n	800d436 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00f      	beq.n	800d35c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6819      	ldr	r1, [r3, #0]
 800d340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	f107 0208 	add.w	r2, r7, #8
 800d348:	18d4      	adds	r4, r2, r3
 800d34a:	4608      	mov	r0, r1
 800d34c:	f003 f873 	bl	8010436 <SDIO_ReadFIFO>
 800d350:	4603      	mov	r3, r0
 800d352:	6023      	str	r3, [r4, #0]
      index++;
 800d354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d356:	3301      	adds	r3, #1
 800d358:	637b      	str	r3, [r7, #52]	; 0x34
 800d35a:	e006      	b.n	800d36a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d366:	2b00      	cmp	r3, #0
 800d368:	d012      	beq.n	800d390 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d36a:	f7fc f8c3 	bl	80094f4 <HAL_GetTick>
 800d36e:	4602      	mov	r2, r0
 800d370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d372:	1ad3      	subs	r3, r2, r3
 800d374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d378:	d102      	bne.n	800d380 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d37a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d37e:	e05a      	b.n	800d436 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d386:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d0cf      	beq.n	800d32e <SD_FindSCR+0x96>
 800d38e:	e000      	b.n	800d392 <SD_FindSCR+0xfa>
      break;
 800d390:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d398:	f003 0308 	and.w	r3, r3, #8
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d005      	beq.n	800d3ac <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2208      	movs	r2, #8
 800d3a6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d3a8:	2308      	movs	r3, #8
 800d3aa:	e044      	b.n	800d436 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3b2:	f003 0302 	and.w	r3, r3, #2
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d005      	beq.n	800d3c6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	2202      	movs	r2, #2
 800d3c0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d3c2:	2302      	movs	r3, #2
 800d3c4:	e037      	b.n	800d436 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3cc:	f003 0320 	and.w	r3, r3, #32
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d005      	beq.n	800d3e0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	2220      	movs	r2, #32
 800d3da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d3dc:	2320      	movs	r3, #32
 800d3de:	e02a      	b.n	800d436 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f240 523a 	movw	r2, #1338	; 0x53a
 800d3e8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	061a      	lsls	r2, r3, #24
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	021b      	lsls	r3, r3, #8
 800d3f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d3f6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	0a1b      	lsrs	r3, r3, #8
 800d3fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d400:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	0e1b      	lsrs	r3, r3, #24
 800d406:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40a:	601a      	str	r2, [r3, #0]
    scr++;
 800d40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40e:	3304      	adds	r3, #4
 800d410:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	061a      	lsls	r2, r3, #24
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	021b      	lsls	r3, r3, #8
 800d41a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d41e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	0a1b      	lsrs	r3, r3, #8
 800d424:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d428:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	0e1b      	lsrs	r3, r3, #24
 800d42e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d432:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d434:	2300      	movs	r3, #0
}
 800d436:	4618      	mov	r0, r3
 800d438:	373c      	adds	r7, #60	; 0x3c
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd90      	pop	{r4, r7, pc}

0800d43e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d43e:	b580      	push	{r7, lr}
 800d440:	b082      	sub	sp, #8
 800d442:	af00      	add	r7, sp, #0
 800d444:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d101      	bne.n	800d450 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d44c:	2301      	movs	r3, #1
 800d44e:	e07b      	b.n	800d548 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d454:	2b00      	cmp	r3, #0
 800d456:	d108      	bne.n	800d46a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	685b      	ldr	r3, [r3, #4]
 800d45c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d460:	d009      	beq.n	800d476 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	61da      	str	r2, [r3, #28]
 800d468:	e005      	b.n	800d476 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2200      	movs	r2, #0
 800d46e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2200      	movs	r2, #0
 800d474:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d482:	b2db      	uxtb	r3, r3
 800d484:	2b00      	cmp	r3, #0
 800d486:	d106      	bne.n	800d496 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f7f5 fe9b 	bl	80031cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2202      	movs	r2, #2
 800d49a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d4ac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	689b      	ldr	r3, [r3, #8]
 800d4ba:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d4be:	431a      	orrs	r2, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	68db      	ldr	r3, [r3, #12]
 800d4c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d4c8:	431a      	orrs	r2, r3
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	691b      	ldr	r3, [r3, #16]
 800d4ce:	f003 0302 	and.w	r3, r3, #2
 800d4d2:	431a      	orrs	r2, r3
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	695b      	ldr	r3, [r3, #20]
 800d4d8:	f003 0301 	and.w	r3, r3, #1
 800d4dc:	431a      	orrs	r2, r3
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	699b      	ldr	r3, [r3, #24]
 800d4e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d4e6:	431a      	orrs	r2, r3
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	69db      	ldr	r3, [r3, #28]
 800d4ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d4f0:	431a      	orrs	r2, r3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6a1b      	ldr	r3, [r3, #32]
 800d4f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4fa:	ea42 0103 	orr.w	r1, r2, r3
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d502:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	430a      	orrs	r2, r1
 800d50c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	699b      	ldr	r3, [r3, #24]
 800d512:	0c1b      	lsrs	r3, r3, #16
 800d514:	f003 0104 	and.w	r1, r3, #4
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d51c:	f003 0210 	and.w	r2, r3, #16
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	430a      	orrs	r2, r1
 800d526:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	69da      	ldr	r2, [r3, #28]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d536:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2200      	movs	r2, #0
 800d53c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2201      	movs	r2, #1
 800d542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d546:	2300      	movs	r3, #0
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3708      	adds	r7, #8
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b086      	sub	sp, #24
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	4613      	mov	r3, r2
 800d55c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d55e:	2300      	movs	r3, #0
 800d560:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d568:	2b01      	cmp	r3, #1
 800d56a:	d101      	bne.n	800d570 <HAL_SPI_Transmit_DMA+0x20>
 800d56c:	2302      	movs	r3, #2
 800d56e:	e09b      	b.n	800d6a8 <HAL_SPI_Transmit_DMA+0x158>
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2201      	movs	r2, #1
 800d574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	2b01      	cmp	r3, #1
 800d582:	d002      	beq.n	800d58a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800d584:	2302      	movs	r3, #2
 800d586:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d588:	e089      	b.n	800d69e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d002      	beq.n	800d596 <HAL_SPI_Transmit_DMA+0x46>
 800d590:	88fb      	ldrh	r3, [r7, #6]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d102      	bne.n	800d59c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800d596:	2301      	movs	r3, #1
 800d598:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d59a:	e080      	b.n	800d69e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	2203      	movs	r2, #3
 800d5a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	68ba      	ldr	r2, [r7, #8]
 800d5ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	88fa      	ldrh	r2, [r7, #6]
 800d5b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	88fa      	ldrh	r2, [r7, #6]
 800d5ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d5e2:	d10f      	bne.n	800d604 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	681a      	ldr	r2, [r3, #0]
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d5f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d602:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d608:	4a29      	ldr	r2, [pc, #164]	; (800d6b0 <HAL_SPI_Transmit_DMA+0x160>)
 800d60a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d610:	4a28      	ldr	r2, [pc, #160]	; (800d6b4 <HAL_SPI_Transmit_DMA+0x164>)
 800d612:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d618:	4a27      	ldr	r2, [pc, #156]	; (800d6b8 <HAL_SPI_Transmit_DMA+0x168>)
 800d61a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d620:	2200      	movs	r2, #0
 800d622:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d62c:	4619      	mov	r1, r3
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	330c      	adds	r3, #12
 800d634:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d63a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d63c:	f7fc fd2c 	bl	800a098 <HAL_DMA_Start_IT>
 800d640:	4603      	mov	r3, r0
 800d642:	2b00      	cmp	r3, #0
 800d644:	d00c      	beq.n	800d660 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d64a:	f043 0210 	orr.w	r2, r3, #16
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800d652:	2301      	movs	r3, #1
 800d654:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2201      	movs	r2, #1
 800d65a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800d65e:	e01e      	b.n	800d69e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d66a:	2b40      	cmp	r3, #64	; 0x40
 800d66c:	d007      	beq.n	800d67e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	681a      	ldr	r2, [r3, #0]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d67c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	685a      	ldr	r2, [r3, #4]
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f042 0220 	orr.w	r2, r2, #32
 800d68c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	685a      	ldr	r2, [r3, #4]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f042 0202 	orr.w	r2, r2, #2
 800d69c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d6a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3718      	adds	r7, #24
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	0800dcbd 	.word	0x0800dcbd
 800d6b4:	0800dadd 	.word	0x0800dadd
 800d6b8:	0800dd11 	.word	0x0800dd11

0800d6bc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b086      	sub	sp, #24
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	60b9      	str	r1, [r7, #8]
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	689b      	ldr	r3, [r3, #8]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d110      	bne.n	800d6f8 <HAL_SPI_Receive_DMA+0x3c>
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d6de:	d10b      	bne.n	800d6f8 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	2204      	movs	r2, #4
 800d6e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800d6e8:	88fb      	ldrh	r3, [r7, #6]
 800d6ea:	68ba      	ldr	r2, [r7, #8]
 800d6ec:	68b9      	ldr	r1, [r7, #8]
 800d6ee:	68f8      	ldr	r0, [r7, #12]
 800d6f0:	f000 f8ac 	bl	800d84c <HAL_SPI_TransmitReceive_DMA>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	e09f      	b.n	800d838 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d101      	bne.n	800d706 <HAL_SPI_Receive_DMA+0x4a>
 800d702:	2302      	movs	r3, #2
 800d704:	e098      	b.n	800d838 <HAL_SPI_Receive_DMA+0x17c>
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2201      	movs	r2, #1
 800d70a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d714:	b2db      	uxtb	r3, r3
 800d716:	2b01      	cmp	r3, #1
 800d718:	d002      	beq.n	800d720 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800d71a:	2302      	movs	r3, #2
 800d71c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d71e:	e086      	b.n	800d82e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d002      	beq.n	800d72c <HAL_SPI_Receive_DMA+0x70>
 800d726:	88fb      	ldrh	r3, [r7, #6]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d102      	bne.n	800d732 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800d72c:	2301      	movs	r3, #1
 800d72e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d730:	e07d      	b.n	800d82e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2204      	movs	r2, #4
 800d736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2200      	movs	r2, #0
 800d73e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	68ba      	ldr	r2, [r7, #8]
 800d744:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	88fa      	ldrh	r2, [r7, #6]
 800d74a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	88fa      	ldrh	r2, [r7, #6]
 800d750:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	2200      	movs	r2, #0
 800d756:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	2200      	movs	r2, #0
 800d75c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	2200      	movs	r2, #0
 800d762:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2200      	movs	r2, #0
 800d768:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d772:	d10f      	bne.n	800d794 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d782:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d792:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d798:	4a29      	ldr	r2, [pc, #164]	; (800d840 <HAL_SPI_Receive_DMA+0x184>)
 800d79a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7a0:	4a28      	ldr	r2, [pc, #160]	; (800d844 <HAL_SPI_Receive_DMA+0x188>)
 800d7a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7a8:	4a27      	ldr	r2, [pc, #156]	; (800d848 <HAL_SPI_Receive_DMA+0x18c>)
 800d7aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	330c      	adds	r3, #12
 800d7be:	4619      	mov	r1, r3
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7ca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d7cc:	f7fc fc64 	bl	800a098 <HAL_DMA_Start_IT>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d00c      	beq.n	800d7f0 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7da:	f043 0210 	orr.w	r2, r3, #16
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800d7ee:	e01e      	b.n	800d82e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7fa:	2b40      	cmp	r3, #64	; 0x40
 800d7fc:	d007      	beq.n	800d80e <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	681a      	ldr	r2, [r3, #0]
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d80c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	685a      	ldr	r2, [r3, #4]
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f042 0220 	orr.w	r2, r2, #32
 800d81c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	685a      	ldr	r2, [r3, #4]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f042 0201 	orr.w	r2, r2, #1
 800d82c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2200      	movs	r2, #0
 800d832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d836:	7dfb      	ldrb	r3, [r7, #23]
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3718      	adds	r7, #24
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}
 800d840:	0800dcd9 	.word	0x0800dcd9
 800d844:	0800db85 	.word	0x0800db85
 800d848:	0800dd11 	.word	0x0800dd11

0800d84c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b086      	sub	sp, #24
 800d850:	af00      	add	r7, sp, #0
 800d852:	60f8      	str	r0, [r7, #12]
 800d854:	60b9      	str	r1, [r7, #8]
 800d856:	607a      	str	r2, [r7, #4]
 800d858:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d85a:	2300      	movs	r3, #0
 800d85c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d864:	2b01      	cmp	r3, #1
 800d866:	d101      	bne.n	800d86c <HAL_SPI_TransmitReceive_DMA+0x20>
 800d868:	2302      	movs	r3, #2
 800d86a:	e0e3      	b.n	800da34 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2201      	movs	r2, #1
 800d870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d87a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800d882:	7dbb      	ldrb	r3, [r7, #22]
 800d884:	2b01      	cmp	r3, #1
 800d886:	d00d      	beq.n	800d8a4 <HAL_SPI_TransmitReceive_DMA+0x58>
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d88e:	d106      	bne.n	800d89e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	689b      	ldr	r3, [r3, #8]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d102      	bne.n	800d89e <HAL_SPI_TransmitReceive_DMA+0x52>
 800d898:	7dbb      	ldrb	r3, [r7, #22]
 800d89a:	2b04      	cmp	r3, #4
 800d89c:	d002      	beq.n	800d8a4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800d89e:	2302      	movs	r3, #2
 800d8a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d8a2:	e0c2      	b.n	800da2a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d005      	beq.n	800d8b6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d002      	beq.n	800d8b6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800d8b0:	887b      	ldrh	r3, [r7, #2]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d102      	bne.n	800d8bc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d8ba:	e0b6      	b.n	800da2a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	2b04      	cmp	r3, #4
 800d8c6:	d003      	beq.n	800d8d0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2205      	movs	r2, #5
 800d8cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	68ba      	ldr	r2, [r7, #8]
 800d8da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	887a      	ldrh	r2, [r7, #2]
 800d8e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	887a      	ldrh	r2, [r7, #2]
 800d8e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	887a      	ldrh	r2, [r7, #2]
 800d8f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	887a      	ldrh	r2, [r7, #2]
 800d8f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	2200      	movs	r2, #0
 800d904:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	2b04      	cmp	r3, #4
 800d910:	d108      	bne.n	800d924 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d916:	4a49      	ldr	r2, [pc, #292]	; (800da3c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800d918:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d91e:	4a48      	ldr	r2, [pc, #288]	; (800da40 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800d920:	63da      	str	r2, [r3, #60]	; 0x3c
 800d922:	e007      	b.n	800d934 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d928:	4a46      	ldr	r2, [pc, #280]	; (800da44 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800d92a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d930:	4a45      	ldr	r2, [pc, #276]	; (800da48 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800d932:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d938:	4a44      	ldr	r2, [pc, #272]	; (800da4c <HAL_SPI_TransmitReceive_DMA+0x200>)
 800d93a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d940:	2200      	movs	r2, #0
 800d942:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	330c      	adds	r3, #12
 800d94e:	4619      	mov	r1, r3
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d954:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d95a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d95c:	f7fc fb9c 	bl	800a098 <HAL_DMA_Start_IT>
 800d960:	4603      	mov	r3, r0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d00c      	beq.n	800d980 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d96a:	f043 0210 	orr.w	r2, r3, #16
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800d972:	2301      	movs	r3, #1
 800d974:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2201      	movs	r2, #1
 800d97a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800d97e:	e054      	b.n	800da2a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	685a      	ldr	r2, [r3, #4]
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f042 0201 	orr.w	r2, r2, #1
 800d98e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d994:	2200      	movs	r2, #0
 800d996:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d99c:	2200      	movs	r2, #0
 800d99e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	330c      	adds	r3, #12
 800d9c0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d9c6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d9c8:	f7fc fb66 	bl	800a098 <HAL_DMA_Start_IT>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d00c      	beq.n	800d9ec <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9d6:	f043 0210 	orr.w	r2, r3, #16
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800d9ea:	e01e      	b.n	800da2a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9f6:	2b40      	cmp	r3, #64	; 0x40
 800d9f8:	d007      	beq.n	800da0a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	681a      	ldr	r2, [r3, #0]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da08:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	685a      	ldr	r2, [r3, #4]
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f042 0220 	orr.w	r2, r2, #32
 800da18:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	685a      	ldr	r2, [r3, #4]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f042 0202 	orr.w	r2, r2, #2
 800da28:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2200      	movs	r2, #0
 800da2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800da32:	7dfb      	ldrb	r3, [r7, #23]
}
 800da34:	4618      	mov	r0, r3
 800da36:	3718      	adds	r7, #24
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	0800dcd9 	.word	0x0800dcd9
 800da40:	0800db85 	.word	0x0800db85
 800da44:	0800dcf5 	.word	0x0800dcf5
 800da48:	0800dc2d 	.word	0x0800dc2d
 800da4c:	0800dd11 	.word	0x0800dd11

0800da50 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800da50:	b480      	push	{r7}
 800da52:	b083      	sub	sp, #12
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800da58:	bf00      	nop
 800da5a:	370c      	adds	r7, #12
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr

0800da64 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800da64:	b480      	push	{r7}
 800da66:	b083      	sub	sp, #12
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800da6c:	bf00      	nop
 800da6e:	370c      	adds	r7, #12
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800da80:	bf00      	nop
 800da82:	370c      	adds	r7, #12
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr

0800da8c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b083      	sub	sp, #12
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800da94:	bf00      	nop
 800da96:	370c      	adds	r7, #12
 800da98:	46bd      	mov	sp, r7
 800da9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9e:	4770      	bx	lr

0800daa0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800daa8:	bf00      	nop
 800daaa:	370c      	adds	r7, #12
 800daac:	46bd      	mov	sp, r7
 800daae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab2:	4770      	bx	lr

0800dab4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800dabc:	bf00      	nop
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr

0800dac8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800dad0:	bf00      	nop
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b086      	sub	sp, #24
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dae8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800daea:	f7fb fd03 	bl	80094f4 <HAL_GetTick>
 800daee:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dafa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dafe:	d03b      	beq.n	800db78 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	685a      	ldr	r2, [r3, #4]
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f022 0220 	bic.w	r2, r2, #32
 800db0e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	685a      	ldr	r2, [r3, #4]
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f022 0202 	bic.w	r2, r2, #2
 800db1e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800db20:	693a      	ldr	r2, [r7, #16]
 800db22:	2164      	movs	r1, #100	; 0x64
 800db24:	6978      	ldr	r0, [r7, #20]
 800db26:	f000 fa01 	bl	800df2c <SPI_EndRxTxTransaction>
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d005      	beq.n	800db3c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db34:	f043 0220 	orr.w	r2, r3, #32
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	689b      	ldr	r3, [r3, #8]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d10a      	bne.n	800db5a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800db44:	2300      	movs	r3, #0
 800db46:	60fb      	str	r3, [r7, #12]
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	60fb      	str	r3, [r7, #12]
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	689b      	ldr	r3, [r3, #8]
 800db56:	60fb      	str	r3, [r7, #12]
 800db58:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	2200      	movs	r2, #0
 800db5e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	2201      	movs	r2, #1
 800db64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d003      	beq.n	800db78 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800db70:	6978      	ldr	r0, [r7, #20]
 800db72:	f7ff ffa9 	bl	800dac8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800db76:	e002      	b.n	800db7e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800db78:	6978      	ldr	r0, [r7, #20]
 800db7a:	f7ff ff69 	bl	800da50 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800db7e:	3718      	adds	r7, #24
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b084      	sub	sp, #16
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db90:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db92:	f7fb fcaf 	bl	80094f4 <HAL_GetTick>
 800db96:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dba6:	d03b      	beq.n	800dc20 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	685a      	ldr	r2, [r3, #4]
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f022 0220 	bic.w	r2, r2, #32
 800dbb6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	689b      	ldr	r3, [r3, #8]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d10d      	bne.n	800dbdc <SPI_DMAReceiveCplt+0x58>
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dbc8:	d108      	bne.n	800dbdc <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	685a      	ldr	r2, [r3, #4]
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f022 0203 	bic.w	r2, r2, #3
 800dbd8:	605a      	str	r2, [r3, #4]
 800dbda:	e007      	b.n	800dbec <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	685a      	ldr	r2, [r3, #4]
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f022 0201 	bic.w	r2, r2, #1
 800dbea:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800dbec:	68ba      	ldr	r2, [r7, #8]
 800dbee:	2164      	movs	r1, #100	; 0x64
 800dbf0:	68f8      	ldr	r0, [r7, #12]
 800dbf2:	f000 f935 	bl	800de60 <SPI_EndRxTransaction>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d002      	beq.n	800dc02 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2220      	movs	r2, #32
 800dc00:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2200      	movs	r2, #0
 800dc06:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d003      	beq.n	800dc20 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800dc18:	68f8      	ldr	r0, [r7, #12]
 800dc1a:	f7ff ff55 	bl	800dac8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800dc1e:	e002      	b.n	800dc26 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800dc20:	68f8      	ldr	r0, [r7, #12]
 800dc22:	f7ff ff1f 	bl	800da64 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dc26:	3710      	adds	r7, #16
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b084      	sub	sp, #16
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc38:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dc3a:	f7fb fc5b 	bl	80094f4 <HAL_GetTick>
 800dc3e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc4e:	d02f      	beq.n	800dcb0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	685a      	ldr	r2, [r3, #4]
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f022 0220 	bic.w	r2, r2, #32
 800dc5e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800dc60:	68ba      	ldr	r2, [r7, #8]
 800dc62:	2164      	movs	r1, #100	; 0x64
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	f000 f961 	bl	800df2c <SPI_EndRxTxTransaction>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d005      	beq.n	800dc7c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc74:	f043 0220 	orr.w	r2, r3, #32
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	685a      	ldr	r2, [r3, #4]
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f022 0203 	bic.w	r2, r2, #3
 800dc8a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2200      	movs	r2, #0
 800dc96:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d003      	beq.n	800dcb0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800dca8:	68f8      	ldr	r0, [r7, #12]
 800dcaa:	f7ff ff0d 	bl	800dac8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800dcae:	e002      	b.n	800dcb6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800dcb0:	68f8      	ldr	r0, [r7, #12]
 800dcb2:	f7ff fee1 	bl	800da78 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dcb6:	3710      	adds	r7, #16
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b084      	sub	sp, #16
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800dcca:	68f8      	ldr	r0, [r7, #12]
 800dccc:	f7ff fede 	bl	800da8c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dcd0:	bf00      	nop
 800dcd2:	3710      	adds	r7, #16
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dce4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800dce6:	68f8      	ldr	r0, [r7, #12]
 800dce8:	f7ff feda 	bl	800daa0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dcec:	bf00      	nop
 800dcee:	3710      	adds	r7, #16
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}

0800dcf4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd00:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800dd02:	68f8      	ldr	r0, [r7, #12]
 800dd04:	f7ff fed6 	bl	800dab4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dd08:	bf00      	nop
 800dd0a:	3710      	adds	r7, #16
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b084      	sub	sp, #16
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd1c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	685a      	ldr	r2, [r3, #4]
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f022 0203 	bic.w	r2, r2, #3
 800dd2c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd32:	f043 0210 	orr.w	r2, r3, #16
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800dd42:	68f8      	ldr	r0, [r7, #12]
 800dd44:	f7ff fec0 	bl	800dac8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dd48:	bf00      	nop
 800dd4a:	3710      	adds	r7, #16
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b088      	sub	sp, #32
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	60b9      	str	r1, [r7, #8]
 800dd5a:	603b      	str	r3, [r7, #0]
 800dd5c:	4613      	mov	r3, r2
 800dd5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800dd60:	f7fb fbc8 	bl	80094f4 <HAL_GetTick>
 800dd64:	4602      	mov	r2, r0
 800dd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd68:	1a9b      	subs	r3, r3, r2
 800dd6a:	683a      	ldr	r2, [r7, #0]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800dd70:	f7fb fbc0 	bl	80094f4 <HAL_GetTick>
 800dd74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800dd76:	4b39      	ldr	r3, [pc, #228]	; (800de5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	015b      	lsls	r3, r3, #5
 800dd7c:	0d1b      	lsrs	r3, r3, #20
 800dd7e:	69fa      	ldr	r2, [r7, #28]
 800dd80:	fb02 f303 	mul.w	r3, r2, r3
 800dd84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dd86:	e054      	b.n	800de32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd8e:	d050      	beq.n	800de32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dd90:	f7fb fbb0 	bl	80094f4 <HAL_GetTick>
 800dd94:	4602      	mov	r2, r0
 800dd96:	69bb      	ldr	r3, [r7, #24]
 800dd98:	1ad3      	subs	r3, r2, r3
 800dd9a:	69fa      	ldr	r2, [r7, #28]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d902      	bls.n	800dda6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d13d      	bne.n	800de22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	685a      	ldr	r2, [r3, #4]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ddb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ddbe:	d111      	bne.n	800dde4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	689b      	ldr	r3, [r3, #8]
 800ddc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddc8:	d004      	beq.n	800ddd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ddd2:	d107      	bne.n	800dde4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	681a      	ldr	r2, [r3, #0]
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dde2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dde8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ddec:	d10f      	bne.n	800de0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	681a      	ldr	r2, [r3, #0]
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ddfc:	601a      	str	r2, [r3, #0]
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800de0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2201      	movs	r2, #1
 800de12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2200      	movs	r2, #0
 800de1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800de1e:	2303      	movs	r3, #3
 800de20:	e017      	b.n	800de52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d101      	bne.n	800de2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800de28:	2300      	movs	r3, #0
 800de2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	3b01      	subs	r3, #1
 800de30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	689a      	ldr	r2, [r3, #8]
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	4013      	ands	r3, r2
 800de3c:	68ba      	ldr	r2, [r7, #8]
 800de3e:	429a      	cmp	r2, r3
 800de40:	bf0c      	ite	eq
 800de42:	2301      	moveq	r3, #1
 800de44:	2300      	movne	r3, #0
 800de46:	b2db      	uxtb	r3, r3
 800de48:	461a      	mov	r2, r3
 800de4a:	79fb      	ldrb	r3, [r7, #7]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d19b      	bne.n	800dd88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800de50:	2300      	movs	r3, #0
}
 800de52:	4618      	mov	r0, r3
 800de54:	3720      	adds	r7, #32
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	20000004 	.word	0x20000004

0800de60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b086      	sub	sp, #24
 800de64:	af02      	add	r7, sp, #8
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	685b      	ldr	r3, [r3, #4]
 800de70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800de74:	d111      	bne.n	800de9a <SPI_EndRxTransaction+0x3a>
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	689b      	ldr	r3, [r3, #8]
 800de7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de7e:	d004      	beq.n	800de8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	689b      	ldr	r3, [r3, #8]
 800de84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de88:	d107      	bne.n	800de9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	681a      	ldr	r2, [r3, #0]
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de98:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dea2:	d12a      	bne.n	800defa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	689b      	ldr	r3, [r3, #8]
 800dea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800deac:	d012      	beq.n	800ded4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	9300      	str	r3, [sp, #0]
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	2200      	movs	r2, #0
 800deb6:	2180      	movs	r1, #128	; 0x80
 800deb8:	68f8      	ldr	r0, [r7, #12]
 800deba:	f7ff ff49 	bl	800dd50 <SPI_WaitFlagStateUntilTimeout>
 800debe:	4603      	mov	r3, r0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d02d      	beq.n	800df20 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dec8:	f043 0220 	orr.w	r2, r3, #32
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ded0:	2303      	movs	r3, #3
 800ded2:	e026      	b.n	800df22 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	9300      	str	r3, [sp, #0]
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	2200      	movs	r2, #0
 800dedc:	2101      	movs	r1, #1
 800dede:	68f8      	ldr	r0, [r7, #12]
 800dee0:	f7ff ff36 	bl	800dd50 <SPI_WaitFlagStateUntilTimeout>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d01a      	beq.n	800df20 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deee:	f043 0220 	orr.w	r2, r3, #32
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800def6:	2303      	movs	r3, #3
 800def8:	e013      	b.n	800df22 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	9300      	str	r3, [sp, #0]
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	2200      	movs	r2, #0
 800df02:	2101      	movs	r1, #1
 800df04:	68f8      	ldr	r0, [r7, #12]
 800df06:	f7ff ff23 	bl	800dd50 <SPI_WaitFlagStateUntilTimeout>
 800df0a:	4603      	mov	r3, r0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d007      	beq.n	800df20 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df14:	f043 0220 	orr.w	r2, r3, #32
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800df1c:	2303      	movs	r3, #3
 800df1e:	e000      	b.n	800df22 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800df20:	2300      	movs	r3, #0
}
 800df22:	4618      	mov	r0, r3
 800df24:	3710      	adds	r7, #16
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
	...

0800df2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b088      	sub	sp, #32
 800df30:	af02      	add	r7, sp, #8
 800df32:	60f8      	str	r0, [r7, #12]
 800df34:	60b9      	str	r1, [r7, #8]
 800df36:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800df38:	4b1b      	ldr	r3, [pc, #108]	; (800dfa8 <SPI_EndRxTxTransaction+0x7c>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4a1b      	ldr	r2, [pc, #108]	; (800dfac <SPI_EndRxTxTransaction+0x80>)
 800df3e:	fba2 2303 	umull	r2, r3, r2, r3
 800df42:	0d5b      	lsrs	r3, r3, #21
 800df44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800df48:	fb02 f303 	mul.w	r3, r2, r3
 800df4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	685b      	ldr	r3, [r3, #4]
 800df52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df56:	d112      	bne.n	800df7e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	9300      	str	r3, [sp, #0]
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	2200      	movs	r2, #0
 800df60:	2180      	movs	r1, #128	; 0x80
 800df62:	68f8      	ldr	r0, [r7, #12]
 800df64:	f7ff fef4 	bl	800dd50 <SPI_WaitFlagStateUntilTimeout>
 800df68:	4603      	mov	r3, r0
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d016      	beq.n	800df9c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df72:	f043 0220 	orr.w	r2, r3, #32
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800df7a:	2303      	movs	r3, #3
 800df7c:	e00f      	b.n	800df9e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d00a      	beq.n	800df9a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	3b01      	subs	r3, #1
 800df88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	689b      	ldr	r3, [r3, #8]
 800df90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df94:	2b80      	cmp	r3, #128	; 0x80
 800df96:	d0f2      	beq.n	800df7e <SPI_EndRxTxTransaction+0x52>
 800df98:	e000      	b.n	800df9c <SPI_EndRxTxTransaction+0x70>
        break;
 800df9a:	bf00      	nop
  }

  return HAL_OK;
 800df9c:	2300      	movs	r3, #0
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3718      	adds	r7, #24
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	20000004 	.word	0x20000004
 800dfac:	165e9f81 	.word	0x165e9f81

0800dfb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d101      	bne.n	800dfc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e041      	b.n	800e046 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d106      	bne.n	800dfdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f7f5 f9a4 	bl	8003324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2202      	movs	r2, #2
 800dfe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681a      	ldr	r2, [r3, #0]
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	3304      	adds	r3, #4
 800dfec:	4619      	mov	r1, r3
 800dfee:	4610      	mov	r0, r2
 800dff0:	f000 fc7a 	bl	800e8e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2201      	movs	r2, #1
 800dff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2201      	movs	r2, #1
 800e000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2201      	movs	r2, #1
 800e008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2201      	movs	r2, #1
 800e010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2201      	movs	r2, #1
 800e018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2201      	movs	r2, #1
 800e020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2201      	movs	r2, #1
 800e028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2201      	movs	r2, #1
 800e030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2201      	movs	r2, #1
 800e038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2201      	movs	r2, #1
 800e040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e044:	2300      	movs	r3, #0
}
 800e046:	4618      	mov	r0, r3
 800e048:	3708      	adds	r7, #8
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
	...

0800e050 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e050:	b480      	push	{r7}
 800e052:	b085      	sub	sp, #20
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e05e:	b2db      	uxtb	r3, r3
 800e060:	2b01      	cmp	r3, #1
 800e062:	d001      	beq.n	800e068 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e064:	2301      	movs	r3, #1
 800e066:	e04e      	b.n	800e106 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2202      	movs	r2, #2
 800e06c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	68da      	ldr	r2, [r3, #12]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f042 0201 	orr.w	r2, r2, #1
 800e07e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4a23      	ldr	r2, [pc, #140]	; (800e114 <HAL_TIM_Base_Start_IT+0xc4>)
 800e086:	4293      	cmp	r3, r2
 800e088:	d022      	beq.n	800e0d0 <HAL_TIM_Base_Start_IT+0x80>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e092:	d01d      	beq.n	800e0d0 <HAL_TIM_Base_Start_IT+0x80>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4a1f      	ldr	r2, [pc, #124]	; (800e118 <HAL_TIM_Base_Start_IT+0xc8>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d018      	beq.n	800e0d0 <HAL_TIM_Base_Start_IT+0x80>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	4a1e      	ldr	r2, [pc, #120]	; (800e11c <HAL_TIM_Base_Start_IT+0xcc>)
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d013      	beq.n	800e0d0 <HAL_TIM_Base_Start_IT+0x80>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4a1c      	ldr	r2, [pc, #112]	; (800e120 <HAL_TIM_Base_Start_IT+0xd0>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d00e      	beq.n	800e0d0 <HAL_TIM_Base_Start_IT+0x80>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	4a1b      	ldr	r2, [pc, #108]	; (800e124 <HAL_TIM_Base_Start_IT+0xd4>)
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	d009      	beq.n	800e0d0 <HAL_TIM_Base_Start_IT+0x80>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	4a19      	ldr	r2, [pc, #100]	; (800e128 <HAL_TIM_Base_Start_IT+0xd8>)
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	d004      	beq.n	800e0d0 <HAL_TIM_Base_Start_IT+0x80>
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	4a18      	ldr	r2, [pc, #96]	; (800e12c <HAL_TIM_Base_Start_IT+0xdc>)
 800e0cc:	4293      	cmp	r3, r2
 800e0ce:	d111      	bne.n	800e0f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	689b      	ldr	r3, [r3, #8]
 800e0d6:	f003 0307 	and.w	r3, r3, #7
 800e0da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	2b06      	cmp	r3, #6
 800e0e0:	d010      	beq.n	800e104 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	681a      	ldr	r2, [r3, #0]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f042 0201 	orr.w	r2, r2, #1
 800e0f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0f2:	e007      	b.n	800e104 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	f042 0201 	orr.w	r2, r2, #1
 800e102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e104:	2300      	movs	r3, #0
}
 800e106:	4618      	mov	r0, r3
 800e108:	3714      	adds	r7, #20
 800e10a:	46bd      	mov	sp, r7
 800e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e110:	4770      	bx	lr
 800e112:	bf00      	nop
 800e114:	40010000 	.word	0x40010000
 800e118:	40000400 	.word	0x40000400
 800e11c:	40000800 	.word	0x40000800
 800e120:	40000c00 	.word	0x40000c00
 800e124:	40010400 	.word	0x40010400
 800e128:	40014000 	.word	0x40014000
 800e12c:	40001800 	.word	0x40001800

0800e130 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b082      	sub	sp, #8
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d101      	bne.n	800e142 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e13e:	2301      	movs	r3, #1
 800e140:	e041      	b.n	800e1c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e148:	b2db      	uxtb	r3, r3
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d106      	bne.n	800e15c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2200      	movs	r2, #0
 800e152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f000 f839 	bl	800e1ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2202      	movs	r2, #2
 800e160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	3304      	adds	r3, #4
 800e16c:	4619      	mov	r1, r3
 800e16e:	4610      	mov	r0, r2
 800e170:	f000 fbba 	bl	800e8e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2201      	movs	r2, #1
 800e178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2201      	movs	r2, #1
 800e180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2201      	movs	r2, #1
 800e188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2201      	movs	r2, #1
 800e190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2201      	movs	r2, #1
 800e198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2201      	movs	r2, #1
 800e1a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2201      	movs	r2, #1
 800e1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e1c4:	2300      	movs	r3, #0
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3708      	adds	r7, #8
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}

0800e1ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e1ce:	b480      	push	{r7}
 800e1d0:	b083      	sub	sp, #12
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e1d6:	bf00      	nop
 800e1d8:	370c      	adds	r7, #12
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e0:	4770      	bx	lr
	...

0800e1e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b084      	sub	sp, #16
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d109      	bne.n	800e208 <HAL_TIM_PWM_Start+0x24>
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e1fa:	b2db      	uxtb	r3, r3
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	bf14      	ite	ne
 800e200:	2301      	movne	r3, #1
 800e202:	2300      	moveq	r3, #0
 800e204:	b2db      	uxtb	r3, r3
 800e206:	e022      	b.n	800e24e <HAL_TIM_PWM_Start+0x6a>
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	2b04      	cmp	r3, #4
 800e20c:	d109      	bne.n	800e222 <HAL_TIM_PWM_Start+0x3e>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e214:	b2db      	uxtb	r3, r3
 800e216:	2b01      	cmp	r3, #1
 800e218:	bf14      	ite	ne
 800e21a:	2301      	movne	r3, #1
 800e21c:	2300      	moveq	r3, #0
 800e21e:	b2db      	uxtb	r3, r3
 800e220:	e015      	b.n	800e24e <HAL_TIM_PWM_Start+0x6a>
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	2b08      	cmp	r3, #8
 800e226:	d109      	bne.n	800e23c <HAL_TIM_PWM_Start+0x58>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e22e:	b2db      	uxtb	r3, r3
 800e230:	2b01      	cmp	r3, #1
 800e232:	bf14      	ite	ne
 800e234:	2301      	movne	r3, #1
 800e236:	2300      	moveq	r3, #0
 800e238:	b2db      	uxtb	r3, r3
 800e23a:	e008      	b.n	800e24e <HAL_TIM_PWM_Start+0x6a>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e242:	b2db      	uxtb	r3, r3
 800e244:	2b01      	cmp	r3, #1
 800e246:	bf14      	ite	ne
 800e248:	2301      	movne	r3, #1
 800e24a:	2300      	moveq	r3, #0
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d001      	beq.n	800e256 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800e252:	2301      	movs	r3, #1
 800e254:	e07c      	b.n	800e350 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d104      	bne.n	800e266 <HAL_TIM_PWM_Start+0x82>
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2202      	movs	r2, #2
 800e260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e264:	e013      	b.n	800e28e <HAL_TIM_PWM_Start+0xaa>
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	2b04      	cmp	r3, #4
 800e26a:	d104      	bne.n	800e276 <HAL_TIM_PWM_Start+0x92>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2202      	movs	r2, #2
 800e270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e274:	e00b      	b.n	800e28e <HAL_TIM_PWM_Start+0xaa>
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	2b08      	cmp	r3, #8
 800e27a:	d104      	bne.n	800e286 <HAL_TIM_PWM_Start+0xa2>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2202      	movs	r2, #2
 800e280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e284:	e003      	b.n	800e28e <HAL_TIM_PWM_Start+0xaa>
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2202      	movs	r2, #2
 800e28a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	2201      	movs	r2, #1
 800e294:	6839      	ldr	r1, [r7, #0]
 800e296:	4618      	mov	r0, r3
 800e298:	f000 fe10 	bl	800eebc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4a2d      	ldr	r2, [pc, #180]	; (800e358 <HAL_TIM_PWM_Start+0x174>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d004      	beq.n	800e2b0 <HAL_TIM_PWM_Start+0xcc>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4a2c      	ldr	r2, [pc, #176]	; (800e35c <HAL_TIM_PWM_Start+0x178>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d101      	bne.n	800e2b4 <HAL_TIM_PWM_Start+0xd0>
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	e000      	b.n	800e2b6 <HAL_TIM_PWM_Start+0xd2>
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d007      	beq.n	800e2ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e2c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	4a22      	ldr	r2, [pc, #136]	; (800e358 <HAL_TIM_PWM_Start+0x174>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d022      	beq.n	800e31a <HAL_TIM_PWM_Start+0x136>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2dc:	d01d      	beq.n	800e31a <HAL_TIM_PWM_Start+0x136>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	4a1f      	ldr	r2, [pc, #124]	; (800e360 <HAL_TIM_PWM_Start+0x17c>)
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	d018      	beq.n	800e31a <HAL_TIM_PWM_Start+0x136>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4a1d      	ldr	r2, [pc, #116]	; (800e364 <HAL_TIM_PWM_Start+0x180>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d013      	beq.n	800e31a <HAL_TIM_PWM_Start+0x136>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	4a1c      	ldr	r2, [pc, #112]	; (800e368 <HAL_TIM_PWM_Start+0x184>)
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d00e      	beq.n	800e31a <HAL_TIM_PWM_Start+0x136>
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a16      	ldr	r2, [pc, #88]	; (800e35c <HAL_TIM_PWM_Start+0x178>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d009      	beq.n	800e31a <HAL_TIM_PWM_Start+0x136>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4a18      	ldr	r2, [pc, #96]	; (800e36c <HAL_TIM_PWM_Start+0x188>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d004      	beq.n	800e31a <HAL_TIM_PWM_Start+0x136>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4a16      	ldr	r2, [pc, #88]	; (800e370 <HAL_TIM_PWM_Start+0x18c>)
 800e316:	4293      	cmp	r3, r2
 800e318:	d111      	bne.n	800e33e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	689b      	ldr	r3, [r3, #8]
 800e320:	f003 0307 	and.w	r3, r3, #7
 800e324:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2b06      	cmp	r3, #6
 800e32a:	d010      	beq.n	800e34e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	681a      	ldr	r2, [r3, #0]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f042 0201 	orr.w	r2, r2, #1
 800e33a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e33c:	e007      	b.n	800e34e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	f042 0201 	orr.w	r2, r2, #1
 800e34c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e34e:	2300      	movs	r3, #0
}
 800e350:	4618      	mov	r0, r3
 800e352:	3710      	adds	r7, #16
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}
 800e358:	40010000 	.word	0x40010000
 800e35c:	40010400 	.word	0x40010400
 800e360:	40000400 	.word	0x40000400
 800e364:	40000800 	.word	0x40000800
 800e368:	40000c00 	.word	0x40000c00
 800e36c:	40014000 	.word	0x40014000
 800e370:	40001800 	.word	0x40001800

0800e374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	691b      	ldr	r3, [r3, #16]
 800e382:	f003 0302 	and.w	r3, r3, #2
 800e386:	2b02      	cmp	r3, #2
 800e388:	d122      	bne.n	800e3d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	68db      	ldr	r3, [r3, #12]
 800e390:	f003 0302 	and.w	r3, r3, #2
 800e394:	2b02      	cmp	r3, #2
 800e396:	d11b      	bne.n	800e3d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f06f 0202 	mvn.w	r2, #2
 800e3a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	699b      	ldr	r3, [r3, #24]
 800e3ae:	f003 0303 	and.w	r3, r3, #3
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d003      	beq.n	800e3be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f000 fa77 	bl	800e8aa <HAL_TIM_IC_CaptureCallback>
 800e3bc:	e005      	b.n	800e3ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f000 fa69 	bl	800e896 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f000 fa7a 	bl	800e8be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	691b      	ldr	r3, [r3, #16]
 800e3d6:	f003 0304 	and.w	r3, r3, #4
 800e3da:	2b04      	cmp	r3, #4
 800e3dc:	d122      	bne.n	800e424 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	68db      	ldr	r3, [r3, #12]
 800e3e4:	f003 0304 	and.w	r3, r3, #4
 800e3e8:	2b04      	cmp	r3, #4
 800e3ea:	d11b      	bne.n	800e424 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	f06f 0204 	mvn.w	r2, #4
 800e3f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2202      	movs	r2, #2
 800e3fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	699b      	ldr	r3, [r3, #24]
 800e402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e406:	2b00      	cmp	r3, #0
 800e408:	d003      	beq.n	800e412 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 fa4d 	bl	800e8aa <HAL_TIM_IC_CaptureCallback>
 800e410:	e005      	b.n	800e41e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 fa3f 	bl	800e896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f000 fa50 	bl	800e8be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2200      	movs	r2, #0
 800e422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	691b      	ldr	r3, [r3, #16]
 800e42a:	f003 0308 	and.w	r3, r3, #8
 800e42e:	2b08      	cmp	r3, #8
 800e430:	d122      	bne.n	800e478 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	68db      	ldr	r3, [r3, #12]
 800e438:	f003 0308 	and.w	r3, r3, #8
 800e43c:	2b08      	cmp	r3, #8
 800e43e:	d11b      	bne.n	800e478 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f06f 0208 	mvn.w	r2, #8
 800e448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2204      	movs	r2, #4
 800e44e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	69db      	ldr	r3, [r3, #28]
 800e456:	f003 0303 	and.w	r3, r3, #3
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d003      	beq.n	800e466 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f000 fa23 	bl	800e8aa <HAL_TIM_IC_CaptureCallback>
 800e464:	e005      	b.n	800e472 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f000 fa15 	bl	800e896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f000 fa26 	bl	800e8be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2200      	movs	r2, #0
 800e476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	691b      	ldr	r3, [r3, #16]
 800e47e:	f003 0310 	and.w	r3, r3, #16
 800e482:	2b10      	cmp	r3, #16
 800e484:	d122      	bne.n	800e4cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	68db      	ldr	r3, [r3, #12]
 800e48c:	f003 0310 	and.w	r3, r3, #16
 800e490:	2b10      	cmp	r3, #16
 800e492:	d11b      	bne.n	800e4cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f06f 0210 	mvn.w	r2, #16
 800e49c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2208      	movs	r2, #8
 800e4a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	69db      	ldr	r3, [r3, #28]
 800e4aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d003      	beq.n	800e4ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 f9f9 	bl	800e8aa <HAL_TIM_IC_CaptureCallback>
 800e4b8:	e005      	b.n	800e4c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f000 f9eb 	bl	800e896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f000 f9fc 	bl	800e8be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	691b      	ldr	r3, [r3, #16]
 800e4d2:	f003 0301 	and.w	r3, r3, #1
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d10e      	bne.n	800e4f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	68db      	ldr	r3, [r3, #12]
 800e4e0:	f003 0301 	and.w	r3, r3, #1
 800e4e4:	2b01      	cmp	r3, #1
 800e4e6:	d107      	bne.n	800e4f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f06f 0201 	mvn.w	r2, #1
 800e4f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f7f3 ff1c 	bl	8002330 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	691b      	ldr	r3, [r3, #16]
 800e4fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e502:	2b80      	cmp	r3, #128	; 0x80
 800e504:	d10e      	bne.n	800e524 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	68db      	ldr	r3, [r3, #12]
 800e50c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e510:	2b80      	cmp	r3, #128	; 0x80
 800e512:	d107      	bne.n	800e524 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e51c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f000 fd78 	bl	800f014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	691b      	ldr	r3, [r3, #16]
 800e52a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e52e:	2b40      	cmp	r3, #64	; 0x40
 800e530:	d10e      	bne.n	800e550 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	68db      	ldr	r3, [r3, #12]
 800e538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e53c:	2b40      	cmp	r3, #64	; 0x40
 800e53e:	d107      	bne.n	800e550 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f000 f9c1 	bl	800e8d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	691b      	ldr	r3, [r3, #16]
 800e556:	f003 0320 	and.w	r3, r3, #32
 800e55a:	2b20      	cmp	r3, #32
 800e55c:	d10e      	bne.n	800e57c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	68db      	ldr	r3, [r3, #12]
 800e564:	f003 0320 	and.w	r3, r3, #32
 800e568:	2b20      	cmp	r3, #32
 800e56a:	d107      	bne.n	800e57c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	f06f 0220 	mvn.w	r2, #32
 800e574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f000 fd42 	bl	800f000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e57c:	bf00      	nop
 800e57e:	3708      	adds	r7, #8
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b086      	sub	sp, #24
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	60b9      	str	r1, [r7, #8]
 800e58e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e590:	2300      	movs	r3, #0
 800e592:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d101      	bne.n	800e5a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e59e:	2302      	movs	r3, #2
 800e5a0:	e0ae      	b.n	800e700 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2b0c      	cmp	r3, #12
 800e5ae:	f200 809f 	bhi.w	800e6f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800e5b2:	a201      	add	r2, pc, #4	; (adr r2, 800e5b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b8:	0800e5ed 	.word	0x0800e5ed
 800e5bc:	0800e6f1 	.word	0x0800e6f1
 800e5c0:	0800e6f1 	.word	0x0800e6f1
 800e5c4:	0800e6f1 	.word	0x0800e6f1
 800e5c8:	0800e62d 	.word	0x0800e62d
 800e5cc:	0800e6f1 	.word	0x0800e6f1
 800e5d0:	0800e6f1 	.word	0x0800e6f1
 800e5d4:	0800e6f1 	.word	0x0800e6f1
 800e5d8:	0800e66f 	.word	0x0800e66f
 800e5dc:	0800e6f1 	.word	0x0800e6f1
 800e5e0:	0800e6f1 	.word	0x0800e6f1
 800e5e4:	0800e6f1 	.word	0x0800e6f1
 800e5e8:	0800e6af 	.word	0x0800e6af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	68b9      	ldr	r1, [r7, #8]
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f000 fa18 	bl	800ea28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	699a      	ldr	r2, [r3, #24]
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	f042 0208 	orr.w	r2, r2, #8
 800e606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	699a      	ldr	r2, [r3, #24]
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f022 0204 	bic.w	r2, r2, #4
 800e616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	6999      	ldr	r1, [r3, #24]
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	691a      	ldr	r2, [r3, #16]
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	430a      	orrs	r2, r1
 800e628:	619a      	str	r2, [r3, #24]
      break;
 800e62a:	e064      	b.n	800e6f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	68b9      	ldr	r1, [r7, #8]
 800e632:	4618      	mov	r0, r3
 800e634:	f000 fa68 	bl	800eb08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	699a      	ldr	r2, [r3, #24]
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	699a      	ldr	r2, [r3, #24]
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	6999      	ldr	r1, [r3, #24]
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	691b      	ldr	r3, [r3, #16]
 800e662:	021a      	lsls	r2, r3, #8
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	430a      	orrs	r2, r1
 800e66a:	619a      	str	r2, [r3, #24]
      break;
 800e66c:	e043      	b.n	800e6f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	68b9      	ldr	r1, [r7, #8]
 800e674:	4618      	mov	r0, r3
 800e676:	f000 fabd 	bl	800ebf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	69da      	ldr	r2, [r3, #28]
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f042 0208 	orr.w	r2, r2, #8
 800e688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	69da      	ldr	r2, [r3, #28]
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f022 0204 	bic.w	r2, r2, #4
 800e698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	69d9      	ldr	r1, [r3, #28]
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	691a      	ldr	r2, [r3, #16]
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	430a      	orrs	r2, r1
 800e6aa:	61da      	str	r2, [r3, #28]
      break;
 800e6ac:	e023      	b.n	800e6f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	68b9      	ldr	r1, [r7, #8]
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f000 fb11 	bl	800ecdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	69da      	ldr	r2, [r3, #28]
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e6c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	69da      	ldr	r2, [r3, #28]
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e6d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	69d9      	ldr	r1, [r3, #28]
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	691b      	ldr	r3, [r3, #16]
 800e6e4:	021a      	lsls	r2, r3, #8
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	430a      	orrs	r2, r1
 800e6ec:	61da      	str	r2, [r3, #28]
      break;
 800e6ee:	e002      	b.n	800e6f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	75fb      	strb	r3, [r7, #23]
      break;
 800e6f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e6fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800e700:	4618      	mov	r0, r3
 800e702:	3718      	adds	r7, #24
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}

0800e708 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b084      	sub	sp, #16
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e712:	2300      	movs	r3, #0
 800e714:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d101      	bne.n	800e724 <HAL_TIM_ConfigClockSource+0x1c>
 800e720:	2302      	movs	r3, #2
 800e722:	e0b4      	b.n	800e88e <HAL_TIM_ConfigClockSource+0x186>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2201      	movs	r2, #1
 800e728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2202      	movs	r2, #2
 800e730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	689b      	ldr	r3, [r3, #8]
 800e73a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e74a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	68ba      	ldr	r2, [r7, #8]
 800e752:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e75c:	d03e      	beq.n	800e7dc <HAL_TIM_ConfigClockSource+0xd4>
 800e75e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e762:	f200 8087 	bhi.w	800e874 <HAL_TIM_ConfigClockSource+0x16c>
 800e766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e76a:	f000 8086 	beq.w	800e87a <HAL_TIM_ConfigClockSource+0x172>
 800e76e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e772:	d87f      	bhi.n	800e874 <HAL_TIM_ConfigClockSource+0x16c>
 800e774:	2b70      	cmp	r3, #112	; 0x70
 800e776:	d01a      	beq.n	800e7ae <HAL_TIM_ConfigClockSource+0xa6>
 800e778:	2b70      	cmp	r3, #112	; 0x70
 800e77a:	d87b      	bhi.n	800e874 <HAL_TIM_ConfigClockSource+0x16c>
 800e77c:	2b60      	cmp	r3, #96	; 0x60
 800e77e:	d050      	beq.n	800e822 <HAL_TIM_ConfigClockSource+0x11a>
 800e780:	2b60      	cmp	r3, #96	; 0x60
 800e782:	d877      	bhi.n	800e874 <HAL_TIM_ConfigClockSource+0x16c>
 800e784:	2b50      	cmp	r3, #80	; 0x50
 800e786:	d03c      	beq.n	800e802 <HAL_TIM_ConfigClockSource+0xfa>
 800e788:	2b50      	cmp	r3, #80	; 0x50
 800e78a:	d873      	bhi.n	800e874 <HAL_TIM_ConfigClockSource+0x16c>
 800e78c:	2b40      	cmp	r3, #64	; 0x40
 800e78e:	d058      	beq.n	800e842 <HAL_TIM_ConfigClockSource+0x13a>
 800e790:	2b40      	cmp	r3, #64	; 0x40
 800e792:	d86f      	bhi.n	800e874 <HAL_TIM_ConfigClockSource+0x16c>
 800e794:	2b30      	cmp	r3, #48	; 0x30
 800e796:	d064      	beq.n	800e862 <HAL_TIM_ConfigClockSource+0x15a>
 800e798:	2b30      	cmp	r3, #48	; 0x30
 800e79a:	d86b      	bhi.n	800e874 <HAL_TIM_ConfigClockSource+0x16c>
 800e79c:	2b20      	cmp	r3, #32
 800e79e:	d060      	beq.n	800e862 <HAL_TIM_ConfigClockSource+0x15a>
 800e7a0:	2b20      	cmp	r3, #32
 800e7a2:	d867      	bhi.n	800e874 <HAL_TIM_ConfigClockSource+0x16c>
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d05c      	beq.n	800e862 <HAL_TIM_ConfigClockSource+0x15a>
 800e7a8:	2b10      	cmp	r3, #16
 800e7aa:	d05a      	beq.n	800e862 <HAL_TIM_ConfigClockSource+0x15a>
 800e7ac:	e062      	b.n	800e874 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6818      	ldr	r0, [r3, #0]
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	6899      	ldr	r1, [r3, #8]
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	685a      	ldr	r2, [r3, #4]
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	68db      	ldr	r3, [r3, #12]
 800e7be:	f000 fb5d 	bl	800ee7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	689b      	ldr	r3, [r3, #8]
 800e7c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e7d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	68ba      	ldr	r2, [r7, #8]
 800e7d8:	609a      	str	r2, [r3, #8]
      break;
 800e7da:	e04f      	b.n	800e87c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6818      	ldr	r0, [r3, #0]
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	6899      	ldr	r1, [r3, #8]
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	685a      	ldr	r2, [r3, #4]
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	f000 fb46 	bl	800ee7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	689a      	ldr	r2, [r3, #8]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e7fe:	609a      	str	r2, [r3, #8]
      break;
 800e800:	e03c      	b.n	800e87c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6818      	ldr	r0, [r3, #0]
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	6859      	ldr	r1, [r3, #4]
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	68db      	ldr	r3, [r3, #12]
 800e80e:	461a      	mov	r2, r3
 800e810:	f000 faba 	bl	800ed88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	2150      	movs	r1, #80	; 0x50
 800e81a:	4618      	mov	r0, r3
 800e81c:	f000 fb13 	bl	800ee46 <TIM_ITRx_SetConfig>
      break;
 800e820:	e02c      	b.n	800e87c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6818      	ldr	r0, [r3, #0]
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	6859      	ldr	r1, [r3, #4]
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	68db      	ldr	r3, [r3, #12]
 800e82e:	461a      	mov	r2, r3
 800e830:	f000 fad9 	bl	800ede6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	2160      	movs	r1, #96	; 0x60
 800e83a:	4618      	mov	r0, r3
 800e83c:	f000 fb03 	bl	800ee46 <TIM_ITRx_SetConfig>
      break;
 800e840:	e01c      	b.n	800e87c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6818      	ldr	r0, [r3, #0]
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	6859      	ldr	r1, [r3, #4]
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	68db      	ldr	r3, [r3, #12]
 800e84e:	461a      	mov	r2, r3
 800e850:	f000 fa9a 	bl	800ed88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	2140      	movs	r1, #64	; 0x40
 800e85a:	4618      	mov	r0, r3
 800e85c:	f000 faf3 	bl	800ee46 <TIM_ITRx_SetConfig>
      break;
 800e860:	e00c      	b.n	800e87c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	4619      	mov	r1, r3
 800e86c:	4610      	mov	r0, r2
 800e86e:	f000 faea 	bl	800ee46 <TIM_ITRx_SetConfig>
      break;
 800e872:	e003      	b.n	800e87c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e874:	2301      	movs	r3, #1
 800e876:	73fb      	strb	r3, [r7, #15]
      break;
 800e878:	e000      	b.n	800e87c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e87a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2201      	movs	r2, #1
 800e880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2200      	movs	r2, #0
 800e888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e88c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3710      	adds	r7, #16
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}

0800e896 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e896:	b480      	push	{r7}
 800e898:	b083      	sub	sp, #12
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e89e:	bf00      	nop
 800e8a0:	370c      	adds	r7, #12
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr

0800e8aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e8aa:	b480      	push	{r7}
 800e8ac:	b083      	sub	sp, #12
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e8b2:	bf00      	nop
 800e8b4:	370c      	adds	r7, #12
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr

0800e8be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e8be:	b480      	push	{r7}
 800e8c0:	b083      	sub	sp, #12
 800e8c2:	af00      	add	r7, sp, #0
 800e8c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e8c6:	bf00      	nop
 800e8c8:	370c      	adds	r7, #12
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d0:	4770      	bx	lr

0800e8d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e8d2:	b480      	push	{r7}
 800e8d4:	b083      	sub	sp, #12
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e8da:	bf00      	nop
 800e8dc:	370c      	adds	r7, #12
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e4:	4770      	bx	lr
	...

0800e8e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b085      	sub	sp, #20
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	4a40      	ldr	r2, [pc, #256]	; (800e9fc <TIM_Base_SetConfig+0x114>)
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d013      	beq.n	800e928 <TIM_Base_SetConfig+0x40>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e906:	d00f      	beq.n	800e928 <TIM_Base_SetConfig+0x40>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	4a3d      	ldr	r2, [pc, #244]	; (800ea00 <TIM_Base_SetConfig+0x118>)
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d00b      	beq.n	800e928 <TIM_Base_SetConfig+0x40>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	4a3c      	ldr	r2, [pc, #240]	; (800ea04 <TIM_Base_SetConfig+0x11c>)
 800e914:	4293      	cmp	r3, r2
 800e916:	d007      	beq.n	800e928 <TIM_Base_SetConfig+0x40>
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	4a3b      	ldr	r2, [pc, #236]	; (800ea08 <TIM_Base_SetConfig+0x120>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d003      	beq.n	800e928 <TIM_Base_SetConfig+0x40>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	4a3a      	ldr	r2, [pc, #232]	; (800ea0c <TIM_Base_SetConfig+0x124>)
 800e924:	4293      	cmp	r3, r2
 800e926:	d108      	bne.n	800e93a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e92e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	685b      	ldr	r3, [r3, #4]
 800e934:	68fa      	ldr	r2, [r7, #12]
 800e936:	4313      	orrs	r3, r2
 800e938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	4a2f      	ldr	r2, [pc, #188]	; (800e9fc <TIM_Base_SetConfig+0x114>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	d02b      	beq.n	800e99a <TIM_Base_SetConfig+0xb2>
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e948:	d027      	beq.n	800e99a <TIM_Base_SetConfig+0xb2>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	4a2c      	ldr	r2, [pc, #176]	; (800ea00 <TIM_Base_SetConfig+0x118>)
 800e94e:	4293      	cmp	r3, r2
 800e950:	d023      	beq.n	800e99a <TIM_Base_SetConfig+0xb2>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	4a2b      	ldr	r2, [pc, #172]	; (800ea04 <TIM_Base_SetConfig+0x11c>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d01f      	beq.n	800e99a <TIM_Base_SetConfig+0xb2>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	4a2a      	ldr	r2, [pc, #168]	; (800ea08 <TIM_Base_SetConfig+0x120>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	d01b      	beq.n	800e99a <TIM_Base_SetConfig+0xb2>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	4a29      	ldr	r2, [pc, #164]	; (800ea0c <TIM_Base_SetConfig+0x124>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d017      	beq.n	800e99a <TIM_Base_SetConfig+0xb2>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4a28      	ldr	r2, [pc, #160]	; (800ea10 <TIM_Base_SetConfig+0x128>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d013      	beq.n	800e99a <TIM_Base_SetConfig+0xb2>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	4a27      	ldr	r2, [pc, #156]	; (800ea14 <TIM_Base_SetConfig+0x12c>)
 800e976:	4293      	cmp	r3, r2
 800e978:	d00f      	beq.n	800e99a <TIM_Base_SetConfig+0xb2>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4a26      	ldr	r2, [pc, #152]	; (800ea18 <TIM_Base_SetConfig+0x130>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d00b      	beq.n	800e99a <TIM_Base_SetConfig+0xb2>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	4a25      	ldr	r2, [pc, #148]	; (800ea1c <TIM_Base_SetConfig+0x134>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d007      	beq.n	800e99a <TIM_Base_SetConfig+0xb2>
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4a24      	ldr	r2, [pc, #144]	; (800ea20 <TIM_Base_SetConfig+0x138>)
 800e98e:	4293      	cmp	r3, r2
 800e990:	d003      	beq.n	800e99a <TIM_Base_SetConfig+0xb2>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	4a23      	ldr	r2, [pc, #140]	; (800ea24 <TIM_Base_SetConfig+0x13c>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d108      	bne.n	800e9ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e9a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	68db      	ldr	r3, [r3, #12]
 800e9a6:	68fa      	ldr	r2, [r7, #12]
 800e9a8:	4313      	orrs	r3, r2
 800e9aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	695b      	ldr	r3, [r3, #20]
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	68fa      	ldr	r2, [r7, #12]
 800e9be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	689a      	ldr	r2, [r3, #8]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	681a      	ldr	r2, [r3, #0]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	4a0a      	ldr	r2, [pc, #40]	; (800e9fc <TIM_Base_SetConfig+0x114>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d003      	beq.n	800e9e0 <TIM_Base_SetConfig+0xf8>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	4a0c      	ldr	r2, [pc, #48]	; (800ea0c <TIM_Base_SetConfig+0x124>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d103      	bne.n	800e9e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	691a      	ldr	r2, [r3, #16]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	615a      	str	r2, [r3, #20]
}
 800e9ee:	bf00      	nop
 800e9f0:	3714      	adds	r7, #20
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f8:	4770      	bx	lr
 800e9fa:	bf00      	nop
 800e9fc:	40010000 	.word	0x40010000
 800ea00:	40000400 	.word	0x40000400
 800ea04:	40000800 	.word	0x40000800
 800ea08:	40000c00 	.word	0x40000c00
 800ea0c:	40010400 	.word	0x40010400
 800ea10:	40014000 	.word	0x40014000
 800ea14:	40014400 	.word	0x40014400
 800ea18:	40014800 	.word	0x40014800
 800ea1c:	40001800 	.word	0x40001800
 800ea20:	40001c00 	.word	0x40001c00
 800ea24:	40002000 	.word	0x40002000

0800ea28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ea28:	b480      	push	{r7}
 800ea2a:	b087      	sub	sp, #28
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6a1b      	ldr	r3, [r3, #32]
 800ea36:	f023 0201 	bic.w	r2, r3, #1
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	6a1b      	ldr	r3, [r3, #32]
 800ea42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	685b      	ldr	r3, [r3, #4]
 800ea48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	699b      	ldr	r3, [r3, #24]
 800ea4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f023 0303 	bic.w	r3, r3, #3
 800ea5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	68fa      	ldr	r2, [r7, #12]
 800ea66:	4313      	orrs	r3, r2
 800ea68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	f023 0302 	bic.w	r3, r3, #2
 800ea70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	689b      	ldr	r3, [r3, #8]
 800ea76:	697a      	ldr	r2, [r7, #20]
 800ea78:	4313      	orrs	r3, r2
 800ea7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	4a20      	ldr	r2, [pc, #128]	; (800eb00 <TIM_OC1_SetConfig+0xd8>)
 800ea80:	4293      	cmp	r3, r2
 800ea82:	d003      	beq.n	800ea8c <TIM_OC1_SetConfig+0x64>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	4a1f      	ldr	r2, [pc, #124]	; (800eb04 <TIM_OC1_SetConfig+0xdc>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d10c      	bne.n	800eaa6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	f023 0308 	bic.w	r3, r3, #8
 800ea92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	68db      	ldr	r3, [r3, #12]
 800ea98:	697a      	ldr	r2, [r7, #20]
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	f023 0304 	bic.w	r3, r3, #4
 800eaa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	4a15      	ldr	r2, [pc, #84]	; (800eb00 <TIM_OC1_SetConfig+0xd8>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d003      	beq.n	800eab6 <TIM_OC1_SetConfig+0x8e>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	4a14      	ldr	r2, [pc, #80]	; (800eb04 <TIM_OC1_SetConfig+0xdc>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d111      	bne.n	800eada <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eabc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	695b      	ldr	r3, [r3, #20]
 800eaca:	693a      	ldr	r2, [r7, #16]
 800eacc:	4313      	orrs	r3, r2
 800eace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	699b      	ldr	r3, [r3, #24]
 800ead4:	693a      	ldr	r2, [r7, #16]
 800ead6:	4313      	orrs	r3, r2
 800ead8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	693a      	ldr	r2, [r7, #16]
 800eade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	68fa      	ldr	r2, [r7, #12]
 800eae4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	685a      	ldr	r2, [r3, #4]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	697a      	ldr	r2, [r7, #20]
 800eaf2:	621a      	str	r2, [r3, #32]
}
 800eaf4:	bf00      	nop
 800eaf6:	371c      	adds	r7, #28
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr
 800eb00:	40010000 	.word	0x40010000
 800eb04:	40010400 	.word	0x40010400

0800eb08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b087      	sub	sp, #28
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6a1b      	ldr	r3, [r3, #32]
 800eb16:	f023 0210 	bic.w	r2, r3, #16
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6a1b      	ldr	r3, [r3, #32]
 800eb22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	685b      	ldr	r3, [r3, #4]
 800eb28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	699b      	ldr	r3, [r3, #24]
 800eb2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	021b      	lsls	r3, r3, #8
 800eb46:	68fa      	ldr	r2, [r7, #12]
 800eb48:	4313      	orrs	r3, r2
 800eb4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	f023 0320 	bic.w	r3, r3, #32
 800eb52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	689b      	ldr	r3, [r3, #8]
 800eb58:	011b      	lsls	r3, r3, #4
 800eb5a:	697a      	ldr	r2, [r7, #20]
 800eb5c:	4313      	orrs	r3, r2
 800eb5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	4a22      	ldr	r2, [pc, #136]	; (800ebec <TIM_OC2_SetConfig+0xe4>)
 800eb64:	4293      	cmp	r3, r2
 800eb66:	d003      	beq.n	800eb70 <TIM_OC2_SetConfig+0x68>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	4a21      	ldr	r2, [pc, #132]	; (800ebf0 <TIM_OC2_SetConfig+0xe8>)
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	d10d      	bne.n	800eb8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	68db      	ldr	r3, [r3, #12]
 800eb7c:	011b      	lsls	r3, r3, #4
 800eb7e:	697a      	ldr	r2, [r7, #20]
 800eb80:	4313      	orrs	r3, r2
 800eb82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	4a17      	ldr	r2, [pc, #92]	; (800ebec <TIM_OC2_SetConfig+0xe4>)
 800eb90:	4293      	cmp	r3, r2
 800eb92:	d003      	beq.n	800eb9c <TIM_OC2_SetConfig+0x94>
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	4a16      	ldr	r2, [pc, #88]	; (800ebf0 <TIM_OC2_SetConfig+0xe8>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d113      	bne.n	800ebc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eba2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ebaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	695b      	ldr	r3, [r3, #20]
 800ebb0:	009b      	lsls	r3, r3, #2
 800ebb2:	693a      	ldr	r2, [r7, #16]
 800ebb4:	4313      	orrs	r3, r2
 800ebb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	699b      	ldr	r3, [r3, #24]
 800ebbc:	009b      	lsls	r3, r3, #2
 800ebbe:	693a      	ldr	r2, [r7, #16]
 800ebc0:	4313      	orrs	r3, r2
 800ebc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	693a      	ldr	r2, [r7, #16]
 800ebc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	685a      	ldr	r2, [r3, #4]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	697a      	ldr	r2, [r7, #20]
 800ebdc:	621a      	str	r2, [r3, #32]
}
 800ebde:	bf00      	nop
 800ebe0:	371c      	adds	r7, #28
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe8:	4770      	bx	lr
 800ebea:	bf00      	nop
 800ebec:	40010000 	.word	0x40010000
 800ebf0:	40010400 	.word	0x40010400

0800ebf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b087      	sub	sp, #28
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6a1b      	ldr	r3, [r3, #32]
 800ec02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6a1b      	ldr	r3, [r3, #32]
 800ec0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	69db      	ldr	r3, [r3, #28]
 800ec1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f023 0303 	bic.w	r3, r3, #3
 800ec2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	68fa      	ldr	r2, [r7, #12]
 800ec32:	4313      	orrs	r3, r2
 800ec34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ec3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	689b      	ldr	r3, [r3, #8]
 800ec42:	021b      	lsls	r3, r3, #8
 800ec44:	697a      	ldr	r2, [r7, #20]
 800ec46:	4313      	orrs	r3, r2
 800ec48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	4a21      	ldr	r2, [pc, #132]	; (800ecd4 <TIM_OC3_SetConfig+0xe0>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d003      	beq.n	800ec5a <TIM_OC3_SetConfig+0x66>
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	4a20      	ldr	r2, [pc, #128]	; (800ecd8 <TIM_OC3_SetConfig+0xe4>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d10d      	bne.n	800ec76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ec60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	68db      	ldr	r3, [r3, #12]
 800ec66:	021b      	lsls	r3, r3, #8
 800ec68:	697a      	ldr	r2, [r7, #20]
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ec74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	4a16      	ldr	r2, [pc, #88]	; (800ecd4 <TIM_OC3_SetConfig+0xe0>)
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	d003      	beq.n	800ec86 <TIM_OC3_SetConfig+0x92>
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	4a15      	ldr	r2, [pc, #84]	; (800ecd8 <TIM_OC3_SetConfig+0xe4>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d113      	bne.n	800ecae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ec94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	695b      	ldr	r3, [r3, #20]
 800ec9a:	011b      	lsls	r3, r3, #4
 800ec9c:	693a      	ldr	r2, [r7, #16]
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	699b      	ldr	r3, [r3, #24]
 800eca6:	011b      	lsls	r3, r3, #4
 800eca8:	693a      	ldr	r2, [r7, #16]
 800ecaa:	4313      	orrs	r3, r2
 800ecac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	693a      	ldr	r2, [r7, #16]
 800ecb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	68fa      	ldr	r2, [r7, #12]
 800ecb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	685a      	ldr	r2, [r3, #4]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	697a      	ldr	r2, [r7, #20]
 800ecc6:	621a      	str	r2, [r3, #32]
}
 800ecc8:	bf00      	nop
 800ecca:	371c      	adds	r7, #28
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr
 800ecd4:	40010000 	.word	0x40010000
 800ecd8:	40010400 	.word	0x40010400

0800ecdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b087      	sub	sp, #28
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6a1b      	ldr	r3, [r3, #32]
 800ecea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6a1b      	ldr	r3, [r3, #32]
 800ecf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	69db      	ldr	r3, [r3, #28]
 800ed02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ed12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	021b      	lsls	r3, r3, #8
 800ed1a:	68fa      	ldr	r2, [r7, #12]
 800ed1c:	4313      	orrs	r3, r2
 800ed1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ed26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	689b      	ldr	r3, [r3, #8]
 800ed2c:	031b      	lsls	r3, r3, #12
 800ed2e:	693a      	ldr	r2, [r7, #16]
 800ed30:	4313      	orrs	r3, r2
 800ed32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	4a12      	ldr	r2, [pc, #72]	; (800ed80 <TIM_OC4_SetConfig+0xa4>)
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	d003      	beq.n	800ed44 <TIM_OC4_SetConfig+0x68>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	4a11      	ldr	r2, [pc, #68]	; (800ed84 <TIM_OC4_SetConfig+0xa8>)
 800ed40:	4293      	cmp	r3, r2
 800ed42:	d109      	bne.n	800ed58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ed4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	695b      	ldr	r3, [r3, #20]
 800ed50:	019b      	lsls	r3, r3, #6
 800ed52:	697a      	ldr	r2, [r7, #20]
 800ed54:	4313      	orrs	r3, r2
 800ed56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	697a      	ldr	r2, [r7, #20]
 800ed5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	68fa      	ldr	r2, [r7, #12]
 800ed62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	685a      	ldr	r2, [r3, #4]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	693a      	ldr	r2, [r7, #16]
 800ed70:	621a      	str	r2, [r3, #32]
}
 800ed72:	bf00      	nop
 800ed74:	371c      	adds	r7, #28
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr
 800ed7e:	bf00      	nop
 800ed80:	40010000 	.word	0x40010000
 800ed84:	40010400 	.word	0x40010400

0800ed88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ed88:	b480      	push	{r7}
 800ed8a:	b087      	sub	sp, #28
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	60f8      	str	r0, [r7, #12]
 800ed90:	60b9      	str	r1, [r7, #8]
 800ed92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	6a1b      	ldr	r3, [r3, #32]
 800ed98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	6a1b      	ldr	r3, [r3, #32]
 800ed9e:	f023 0201 	bic.w	r2, r3, #1
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	699b      	ldr	r3, [r3, #24]
 800edaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800edb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	011b      	lsls	r3, r3, #4
 800edb8:	693a      	ldr	r2, [r7, #16]
 800edba:	4313      	orrs	r3, r2
 800edbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	f023 030a 	bic.w	r3, r3, #10
 800edc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800edc6:	697a      	ldr	r2, [r7, #20]
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	4313      	orrs	r3, r2
 800edcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	693a      	ldr	r2, [r7, #16]
 800edd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	697a      	ldr	r2, [r7, #20]
 800edd8:	621a      	str	r2, [r3, #32]
}
 800edda:	bf00      	nop
 800eddc:	371c      	adds	r7, #28
 800edde:	46bd      	mov	sp, r7
 800ede0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede4:	4770      	bx	lr

0800ede6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ede6:	b480      	push	{r7}
 800ede8:	b087      	sub	sp, #28
 800edea:	af00      	add	r7, sp, #0
 800edec:	60f8      	str	r0, [r7, #12]
 800edee:	60b9      	str	r1, [r7, #8]
 800edf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	6a1b      	ldr	r3, [r3, #32]
 800edf6:	f023 0210 	bic.w	r2, r3, #16
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	699b      	ldr	r3, [r3, #24]
 800ee02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	6a1b      	ldr	r3, [r3, #32]
 800ee08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ee10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	031b      	lsls	r3, r3, #12
 800ee16:	697a      	ldr	r2, [r7, #20]
 800ee18:	4313      	orrs	r3, r2
 800ee1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ee22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	011b      	lsls	r3, r3, #4
 800ee28:	693a      	ldr	r2, [r7, #16]
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	697a      	ldr	r2, [r7, #20]
 800ee32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	693a      	ldr	r2, [r7, #16]
 800ee38:	621a      	str	r2, [r3, #32]
}
 800ee3a:	bf00      	nop
 800ee3c:	371c      	adds	r7, #28
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee44:	4770      	bx	lr

0800ee46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ee46:	b480      	push	{r7}
 800ee48:	b085      	sub	sp, #20
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	6078      	str	r0, [r7, #4]
 800ee4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	689b      	ldr	r3, [r3, #8]
 800ee54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ee5e:	683a      	ldr	r2, [r7, #0]
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	4313      	orrs	r3, r2
 800ee64:	f043 0307 	orr.w	r3, r3, #7
 800ee68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	68fa      	ldr	r2, [r7, #12]
 800ee6e:	609a      	str	r2, [r3, #8]
}
 800ee70:	bf00      	nop
 800ee72:	3714      	adds	r7, #20
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b087      	sub	sp, #28
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	60b9      	str	r1, [r7, #8]
 800ee86:	607a      	str	r2, [r7, #4]
 800ee88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	689b      	ldr	r3, [r3, #8]
 800ee8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ee96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	021a      	lsls	r2, r3, #8
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	431a      	orrs	r2, r3
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	4313      	orrs	r3, r2
 800eea4:	697a      	ldr	r2, [r7, #20]
 800eea6:	4313      	orrs	r3, r2
 800eea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	697a      	ldr	r2, [r7, #20]
 800eeae:	609a      	str	r2, [r3, #8]
}
 800eeb0:	bf00      	nop
 800eeb2:	371c      	adds	r7, #28
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr

0800eebc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b087      	sub	sp, #28
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	60f8      	str	r0, [r7, #12]
 800eec4:	60b9      	str	r1, [r7, #8]
 800eec6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	f003 031f 	and.w	r3, r3, #31
 800eece:	2201      	movs	r2, #1
 800eed0:	fa02 f303 	lsl.w	r3, r2, r3
 800eed4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	6a1a      	ldr	r2, [r3, #32]
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	43db      	mvns	r3, r3
 800eede:	401a      	ands	r2, r3
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	6a1a      	ldr	r2, [r3, #32]
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	f003 031f 	and.w	r3, r3, #31
 800eeee:	6879      	ldr	r1, [r7, #4]
 800eef0:	fa01 f303 	lsl.w	r3, r1, r3
 800eef4:	431a      	orrs	r2, r3
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	621a      	str	r2, [r3, #32]
}
 800eefa:	bf00      	nop
 800eefc:	371c      	adds	r7, #28
 800eefe:	46bd      	mov	sp, r7
 800ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef04:	4770      	bx	lr
	...

0800ef08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b085      	sub	sp, #20
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef18:	2b01      	cmp	r3, #1
 800ef1a:	d101      	bne.n	800ef20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ef1c:	2302      	movs	r3, #2
 800ef1e:	e05a      	b.n	800efd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2201      	movs	r2, #1
 800ef24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2202      	movs	r2, #2
 800ef2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	685b      	ldr	r3, [r3, #4]
 800ef36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	689b      	ldr	r3, [r3, #8]
 800ef3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	68fa      	ldr	r2, [r7, #12]
 800ef4e:	4313      	orrs	r3, r2
 800ef50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	68fa      	ldr	r2, [r7, #12]
 800ef58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4a21      	ldr	r2, [pc, #132]	; (800efe4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d022      	beq.n	800efaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef6c:	d01d      	beq.n	800efaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	4a1d      	ldr	r2, [pc, #116]	; (800efe8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d018      	beq.n	800efaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	4a1b      	ldr	r2, [pc, #108]	; (800efec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d013      	beq.n	800efaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	4a1a      	ldr	r2, [pc, #104]	; (800eff0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d00e      	beq.n	800efaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	4a18      	ldr	r2, [pc, #96]	; (800eff4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d009      	beq.n	800efaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	4a17      	ldr	r2, [pc, #92]	; (800eff8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d004      	beq.n	800efaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4a15      	ldr	r2, [pc, #84]	; (800effc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d10c      	bne.n	800efc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800efb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	68ba      	ldr	r2, [r7, #8]
 800efb8:	4313      	orrs	r3, r2
 800efba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	68ba      	ldr	r2, [r7, #8]
 800efc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2201      	movs	r2, #1
 800efc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2200      	movs	r2, #0
 800efd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800efd4:	2300      	movs	r3, #0
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3714      	adds	r7, #20
 800efda:	46bd      	mov	sp, r7
 800efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe0:	4770      	bx	lr
 800efe2:	bf00      	nop
 800efe4:	40010000 	.word	0x40010000
 800efe8:	40000400 	.word	0x40000400
 800efec:	40000800 	.word	0x40000800
 800eff0:	40000c00 	.word	0x40000c00
 800eff4:	40010400 	.word	0x40010400
 800eff8:	40014000 	.word	0x40014000
 800effc:	40001800 	.word	0x40001800

0800f000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f000:	b480      	push	{r7}
 800f002:	b083      	sub	sp, #12
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f008:	bf00      	nop
 800f00a:	370c      	adds	r7, #12
 800f00c:	46bd      	mov	sp, r7
 800f00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f012:	4770      	bx	lr

0800f014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f014:	b480      	push	{r7}
 800f016:	b083      	sub	sp, #12
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f01c:	bf00      	nop
 800f01e:	370c      	adds	r7, #12
 800f020:	46bd      	mov	sp, r7
 800f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f026:	4770      	bx	lr

0800f028 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b082      	sub	sp, #8
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d101      	bne.n	800f03a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f036:	2301      	movs	r3, #1
 800f038:	e03f      	b.n	800f0ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f040:	b2db      	uxtb	r3, r3
 800f042:	2b00      	cmp	r3, #0
 800f044:	d106      	bne.n	800f054 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2200      	movs	r2, #0
 800f04a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f7f4 fa00 	bl	8003454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2224      	movs	r2, #36	; 0x24
 800f058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	68da      	ldr	r2, [r3, #12]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f06a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f000 ff43 	bl	800fef8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	691a      	ldr	r2, [r3, #16]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f080:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	695a      	ldr	r2, [r3, #20]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f090:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	68da      	ldr	r2, [r3, #12]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f0a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2220      	movs	r2, #32
 800f0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2220      	movs	r2, #32
 800f0b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f0b8:	2300      	movs	r3, #0
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3708      	adds	r7, #8
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
	...

0800f0c4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b08c      	sub	sp, #48	; 0x30
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	60f8      	str	r0, [r7, #12]
 800f0cc:	60b9      	str	r1, [r7, #8]
 800f0ce:	4613      	mov	r3, r2
 800f0d0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f0d8:	b2db      	uxtb	r3, r3
 800f0da:	2b20      	cmp	r3, #32
 800f0dc:	d165      	bne.n	800f1aa <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d002      	beq.n	800f0ea <HAL_UART_Transmit_DMA+0x26>
 800f0e4:	88fb      	ldrh	r3, [r7, #6]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d101      	bne.n	800f0ee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	e05e      	b.n	800f1ac <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	d101      	bne.n	800f0fc <HAL_UART_Transmit_DMA+0x38>
 800f0f8:	2302      	movs	r3, #2
 800f0fa:	e057      	b.n	800f1ac <HAL_UART_Transmit_DMA+0xe8>
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	2201      	movs	r2, #1
 800f100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800f104:	68ba      	ldr	r2, [r7, #8]
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	88fa      	ldrh	r2, [r7, #6]
 800f10e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	88fa      	ldrh	r2, [r7, #6]
 800f114:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2200      	movs	r2, #0
 800f11a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	2221      	movs	r2, #33	; 0x21
 800f120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f128:	4a22      	ldr	r2, [pc, #136]	; (800f1b4 <HAL_UART_Transmit_DMA+0xf0>)
 800f12a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f130:	4a21      	ldr	r2, [pc, #132]	; (800f1b8 <HAL_UART_Transmit_DMA+0xf4>)
 800f132:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f138:	4a20      	ldr	r2, [pc, #128]	; (800f1bc <HAL_UART_Transmit_DMA+0xf8>)
 800f13a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f140:	2200      	movs	r2, #0
 800f142:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800f144:	f107 0308 	add.w	r3, r7, #8
 800f148:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f150:	6819      	ldr	r1, [r3, #0]
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	3304      	adds	r3, #4
 800f158:	461a      	mov	r2, r3
 800f15a:	88fb      	ldrh	r3, [r7, #6]
 800f15c:	f7fa ff9c 	bl	800a098 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f168:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	2200      	movs	r2, #0
 800f16e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	3314      	adds	r3, #20
 800f178:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f17a:	69bb      	ldr	r3, [r7, #24]
 800f17c:	e853 3f00 	ldrex	r3, [r3]
 800f180:	617b      	str	r3, [r7, #20]
   return(result);
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f188:	62bb      	str	r3, [r7, #40]	; 0x28
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	3314      	adds	r3, #20
 800f190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f192:	627a      	str	r2, [r7, #36]	; 0x24
 800f194:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f196:	6a39      	ldr	r1, [r7, #32]
 800f198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f19a:	e841 2300 	strex	r3, r2, [r1]
 800f19e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f1a0:	69fb      	ldr	r3, [r7, #28]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d1e5      	bne.n	800f172 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	e000      	b.n	800f1ac <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800f1aa:	2302      	movs	r3, #2
  }
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3730      	adds	r7, #48	; 0x30
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	0800f791 	.word	0x0800f791
 800f1b8:	0800f82b 	.word	0x0800f82b
 800f1bc:	0800f9a3 	.word	0x0800f9a3

0800f1c0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b084      	sub	sp, #16
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	60f8      	str	r0, [r7, #12]
 800f1c8:	60b9      	str	r1, [r7, #8]
 800f1ca:	4613      	mov	r3, r2
 800f1cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f1d4:	b2db      	uxtb	r3, r3
 800f1d6:	2b20      	cmp	r3, #32
 800f1d8:	d11d      	bne.n	800f216 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d002      	beq.n	800f1e6 <HAL_UART_Receive_DMA+0x26>
 800f1e0:	88fb      	ldrh	r3, [r7, #6]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d101      	bne.n	800f1ea <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	e016      	b.n	800f218 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d101      	bne.n	800f1f8 <HAL_UART_Receive_DMA+0x38>
 800f1f4:	2302      	movs	r3, #2
 800f1f6:	e00f      	b.n	800f218 <HAL_UART_Receive_DMA+0x58>
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2200      	movs	r2, #0
 800f204:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f206:	88fb      	ldrh	r3, [r7, #6]
 800f208:	461a      	mov	r2, r3
 800f20a:	68b9      	ldr	r1, [r7, #8]
 800f20c:	68f8      	ldr	r0, [r7, #12]
 800f20e:	f000 fc13 	bl	800fa38 <UART_Start_Receive_DMA>
 800f212:	4603      	mov	r3, r0
 800f214:	e000      	b.n	800f218 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800f216:	2302      	movs	r3, #2
  }
}
 800f218:	4618      	mov	r0, r3
 800f21a:	3710      	adds	r7, #16
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}

0800f220 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b0ba      	sub	sp, #232	; 0xe8
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	68db      	ldr	r3, [r3, #12]
 800f238:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	695b      	ldr	r3, [r3, #20]
 800f242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800f246:	2300      	movs	r3, #0
 800f248:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800f24c:	2300      	movs	r3, #0
 800f24e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f256:	f003 030f 	and.w	r3, r3, #15
 800f25a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800f25e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f262:	2b00      	cmp	r3, #0
 800f264:	d10f      	bne.n	800f286 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f26a:	f003 0320 	and.w	r3, r3, #32
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d009      	beq.n	800f286 <HAL_UART_IRQHandler+0x66>
 800f272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f276:	f003 0320 	and.w	r3, r3, #32
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d003      	beq.n	800f286 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 fd7f 	bl	800fd82 <UART_Receive_IT>
      return;
 800f284:	e256      	b.n	800f734 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f286:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	f000 80de 	beq.w	800f44c <HAL_UART_IRQHandler+0x22c>
 800f290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f294:	f003 0301 	and.w	r3, r3, #1
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d106      	bne.n	800f2aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f29c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	f000 80d1 	beq.w	800f44c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f2aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2ae:	f003 0301 	and.w	r3, r3, #1
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d00b      	beq.n	800f2ce <HAL_UART_IRQHandler+0xae>
 800f2b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d005      	beq.n	800f2ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2c6:	f043 0201 	orr.w	r2, r3, #1
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f2ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2d2:	f003 0304 	and.w	r3, r3, #4
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d00b      	beq.n	800f2f2 <HAL_UART_IRQHandler+0xd2>
 800f2da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f2de:	f003 0301 	and.w	r3, r3, #1
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d005      	beq.n	800f2f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2ea:	f043 0202 	orr.w	r2, r3, #2
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f2f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2f6:	f003 0302 	and.w	r3, r3, #2
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d00b      	beq.n	800f316 <HAL_UART_IRQHandler+0xf6>
 800f2fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f302:	f003 0301 	and.w	r3, r3, #1
 800f306:	2b00      	cmp	r3, #0
 800f308:	d005      	beq.n	800f316 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f30e:	f043 0204 	orr.w	r2, r3, #4
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800f316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f31a:	f003 0308 	and.w	r3, r3, #8
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d011      	beq.n	800f346 <HAL_UART_IRQHandler+0x126>
 800f322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f326:	f003 0320 	and.w	r3, r3, #32
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d105      	bne.n	800f33a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800f32e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f332:	f003 0301 	and.w	r3, r3, #1
 800f336:	2b00      	cmp	r3, #0
 800f338:	d005      	beq.n	800f346 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f33e:	f043 0208 	orr.w	r2, r3, #8
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	f000 81ed 	beq.w	800f72a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f354:	f003 0320 	and.w	r3, r3, #32
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d008      	beq.n	800f36e <HAL_UART_IRQHandler+0x14e>
 800f35c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f360:	f003 0320 	and.w	r3, r3, #32
 800f364:	2b00      	cmp	r3, #0
 800f366:	d002      	beq.n	800f36e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f000 fd0a 	bl	800fd82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	695b      	ldr	r3, [r3, #20]
 800f374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f378:	2b40      	cmp	r3, #64	; 0x40
 800f37a:	bf0c      	ite	eq
 800f37c:	2301      	moveq	r3, #1
 800f37e:	2300      	movne	r3, #0
 800f380:	b2db      	uxtb	r3, r3
 800f382:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f38a:	f003 0308 	and.w	r3, r3, #8
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d103      	bne.n	800f39a <HAL_UART_IRQHandler+0x17a>
 800f392:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f396:	2b00      	cmp	r3, #0
 800f398:	d04f      	beq.n	800f43a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f000 fc12 	bl	800fbc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	695b      	ldr	r3, [r3, #20]
 800f3a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3aa:	2b40      	cmp	r3, #64	; 0x40
 800f3ac:	d141      	bne.n	800f432 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	3314      	adds	r3, #20
 800f3b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f3bc:	e853 3f00 	ldrex	r3, [r3]
 800f3c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f3c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f3c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f3cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	3314      	adds	r3, #20
 800f3d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f3da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f3de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f3e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f3ea:	e841 2300 	strex	r3, r2, [r1]
 800f3ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f3f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d1d9      	bne.n	800f3ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d013      	beq.n	800f42a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f406:	4a7d      	ldr	r2, [pc, #500]	; (800f5fc <HAL_UART_IRQHandler+0x3dc>)
 800f408:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f40e:	4618      	mov	r0, r3
 800f410:	f7fa ff0a 	bl	800a228 <HAL_DMA_Abort_IT>
 800f414:	4603      	mov	r3, r0
 800f416:	2b00      	cmp	r3, #0
 800f418:	d016      	beq.n	800f448 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f41e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f420:	687a      	ldr	r2, [r7, #4]
 800f422:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f424:	4610      	mov	r0, r2
 800f426:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f428:	e00e      	b.n	800f448 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f000 f99a 	bl	800f764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f430:	e00a      	b.n	800f448 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f000 f996 	bl	800f764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f438:	e006      	b.n	800f448 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f000 f992 	bl	800f764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2200      	movs	r2, #0
 800f444:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800f446:	e170      	b.n	800f72a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f448:	bf00      	nop
    return;
 800f44a:	e16e      	b.n	800f72a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f450:	2b01      	cmp	r3, #1
 800f452:	f040 814a 	bne.w	800f6ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800f456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f45a:	f003 0310 	and.w	r3, r3, #16
 800f45e:	2b00      	cmp	r3, #0
 800f460:	f000 8143 	beq.w	800f6ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800f464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f468:	f003 0310 	and.w	r3, r3, #16
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	f000 813c 	beq.w	800f6ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f472:	2300      	movs	r3, #0
 800f474:	60bb      	str	r3, [r7, #8]
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	60bb      	str	r3, [r7, #8]
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	60bb      	str	r3, [r7, #8]
 800f486:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	695b      	ldr	r3, [r3, #20]
 800f48e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f492:	2b40      	cmp	r3, #64	; 0x40
 800f494:	f040 80b4 	bne.w	800f600 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f4a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	f000 8140 	beq.w	800f72e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f4b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	f080 8139 	bcs.w	800f72e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f4c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4c8:	69db      	ldr	r3, [r3, #28]
 800f4ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4ce:	f000 8088 	beq.w	800f5e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	330c      	adds	r3, #12
 800f4d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f4e0:	e853 3f00 	ldrex	r3, [r3]
 800f4e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f4e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f4ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f4f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	330c      	adds	r3, #12
 800f4fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800f4fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f506:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f50a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f50e:	e841 2300 	strex	r3, r2, [r1]
 800f512:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f516:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d1d9      	bne.n	800f4d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	3314      	adds	r3, #20
 800f524:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f528:	e853 3f00 	ldrex	r3, [r3]
 800f52c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f52e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f530:	f023 0301 	bic.w	r3, r3, #1
 800f534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	3314      	adds	r3, #20
 800f53e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f542:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f546:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f548:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f54a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f54e:	e841 2300 	strex	r3, r2, [r1]
 800f552:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f556:	2b00      	cmp	r3, #0
 800f558:	d1e1      	bne.n	800f51e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	3314      	adds	r3, #20
 800f560:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f562:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f564:	e853 3f00 	ldrex	r3, [r3]
 800f568:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f56a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f56c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f570:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	3314      	adds	r3, #20
 800f57a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f57e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f580:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f582:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f584:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f586:	e841 2300 	strex	r3, r2, [r1]
 800f58a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f58c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d1e3      	bne.n	800f55a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2220      	movs	r2, #32
 800f596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	2200      	movs	r2, #0
 800f59e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	330c      	adds	r3, #12
 800f5a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5aa:	e853 3f00 	ldrex	r3, [r3]
 800f5ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f5b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5b2:	f023 0310 	bic.w	r3, r3, #16
 800f5b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	330c      	adds	r3, #12
 800f5c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f5c4:	65ba      	str	r2, [r7, #88]	; 0x58
 800f5c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f5ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f5cc:	e841 2300 	strex	r3, r2, [r1]
 800f5d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f5d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d1e3      	bne.n	800f5a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f7fa fdb3 	bl	800a148 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f5ea:	b29b      	uxth	r3, r3
 800f5ec:	1ad3      	subs	r3, r2, r3
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	4619      	mov	r1, r3
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f000 f8c0 	bl	800f778 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f5f8:	e099      	b.n	800f72e <HAL_UART_IRQHandler+0x50e>
 800f5fa:	bf00      	nop
 800f5fc:	0800fc8b 	.word	0x0800fc8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f608:	b29b      	uxth	r3, r3
 800f60a:	1ad3      	subs	r3, r2, r3
 800f60c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f614:	b29b      	uxth	r3, r3
 800f616:	2b00      	cmp	r3, #0
 800f618:	f000 808b 	beq.w	800f732 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800f61c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f620:	2b00      	cmp	r3, #0
 800f622:	f000 8086 	beq.w	800f732 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	330c      	adds	r3, #12
 800f62c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f630:	e853 3f00 	ldrex	r3, [r3]
 800f634:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f638:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f63c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	330c      	adds	r3, #12
 800f646:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800f64a:	647a      	str	r2, [r7, #68]	; 0x44
 800f64c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f64e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f650:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f652:	e841 2300 	strex	r3, r2, [r1]
 800f656:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d1e3      	bne.n	800f626 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	3314      	adds	r3, #20
 800f664:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f668:	e853 3f00 	ldrex	r3, [r3]
 800f66c:	623b      	str	r3, [r7, #32]
   return(result);
 800f66e:	6a3b      	ldr	r3, [r7, #32]
 800f670:	f023 0301 	bic.w	r3, r3, #1
 800f674:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	3314      	adds	r3, #20
 800f67e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f682:	633a      	str	r2, [r7, #48]	; 0x30
 800f684:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f68a:	e841 2300 	strex	r3, r2, [r1]
 800f68e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f692:	2b00      	cmp	r3, #0
 800f694:	d1e3      	bne.n	800f65e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2220      	movs	r2, #32
 800f69a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	330c      	adds	r3, #12
 800f6aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	e853 3f00 	ldrex	r3, [r3]
 800f6b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	f023 0310 	bic.w	r3, r3, #16
 800f6ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	330c      	adds	r3, #12
 800f6c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800f6c8:	61fa      	str	r2, [r7, #28]
 800f6ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6cc:	69b9      	ldr	r1, [r7, #24]
 800f6ce:	69fa      	ldr	r2, [r7, #28]
 800f6d0:	e841 2300 	strex	r3, r2, [r1]
 800f6d4:	617b      	str	r3, [r7, #20]
   return(result);
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d1e3      	bne.n	800f6a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f6dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	f000 f848 	bl	800f778 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f6e8:	e023      	b.n	800f732 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800f6ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d009      	beq.n	800f70a <HAL_UART_IRQHandler+0x4ea>
 800f6f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f6fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d003      	beq.n	800f70a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f000 fad5 	bl	800fcb2 <UART_Transmit_IT>
    return;
 800f708:	e014      	b.n	800f734 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800f70a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f70e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f712:	2b00      	cmp	r3, #0
 800f714:	d00e      	beq.n	800f734 <HAL_UART_IRQHandler+0x514>
 800f716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f71a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d008      	beq.n	800f734 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f000 fb15 	bl	800fd52 <UART_EndTransmit_IT>
    return;
 800f728:	e004      	b.n	800f734 <HAL_UART_IRQHandler+0x514>
    return;
 800f72a:	bf00      	nop
 800f72c:	e002      	b.n	800f734 <HAL_UART_IRQHandler+0x514>
      return;
 800f72e:	bf00      	nop
 800f730:	e000      	b.n	800f734 <HAL_UART_IRQHandler+0x514>
      return;
 800f732:	bf00      	nop
  }
}
 800f734:	37e8      	adds	r7, #232	; 0xe8
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}
 800f73a:	bf00      	nop

0800f73c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f73c:	b480      	push	{r7}
 800f73e:	b083      	sub	sp, #12
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800f744:	bf00      	nop
 800f746:	370c      	adds	r7, #12
 800f748:	46bd      	mov	sp, r7
 800f74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74e:	4770      	bx	lr

0800f750 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f750:	b480      	push	{r7}
 800f752:	b083      	sub	sp, #12
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800f758:	bf00      	nop
 800f75a:	370c      	adds	r7, #12
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr

0800f764 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f764:	b480      	push	{r7}
 800f766:	b083      	sub	sp, #12
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800f76c:	bf00      	nop
 800f76e:	370c      	adds	r7, #12
 800f770:	46bd      	mov	sp, r7
 800f772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f776:	4770      	bx	lr

0800f778 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f778:	b480      	push	{r7}
 800f77a:	b083      	sub	sp, #12
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	460b      	mov	r3, r1
 800f782:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f784:	bf00      	nop
 800f786:	370c      	adds	r7, #12
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr

0800f790 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b090      	sub	sp, #64	; 0x40
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f79c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d137      	bne.n	800f81c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800f7ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	3314      	adds	r3, #20
 800f7b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7bc:	e853 3f00 	ldrex	r3, [r3]
 800f7c0:	623b      	str	r3, [r7, #32]
   return(result);
 800f7c2:	6a3b      	ldr	r3, [r7, #32]
 800f7c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f7c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800f7ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	3314      	adds	r3, #20
 800f7d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7d2:	633a      	str	r2, [r7, #48]	; 0x30
 800f7d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f7d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7da:	e841 2300 	strex	r3, r2, [r1]
 800f7de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d1e5      	bne.n	800f7b2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f7e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	330c      	adds	r3, #12
 800f7ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ee:	693b      	ldr	r3, [r7, #16]
 800f7f0:	e853 3f00 	ldrex	r3, [r3]
 800f7f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7fc:	637b      	str	r3, [r7, #52]	; 0x34
 800f7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	330c      	adds	r3, #12
 800f804:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f806:	61fa      	str	r2, [r7, #28]
 800f808:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f80a:	69b9      	ldr	r1, [r7, #24]
 800f80c:	69fa      	ldr	r2, [r7, #28]
 800f80e:	e841 2300 	strex	r3, r2, [r1]
 800f812:	617b      	str	r3, [r7, #20]
   return(result);
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d1e5      	bne.n	800f7e6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f81a:	e002      	b.n	800f822 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800f81c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f81e:	f7f2 fd6d 	bl	80022fc <HAL_UART_TxCpltCallback>
}
 800f822:	bf00      	nop
 800f824:	3740      	adds	r7, #64	; 0x40
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}

0800f82a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f82a:	b580      	push	{r7, lr}
 800f82c:	b084      	sub	sp, #16
 800f82e:	af00      	add	r7, sp, #0
 800f830:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f836:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f838:	68f8      	ldr	r0, [r7, #12]
 800f83a:	f7ff ff7f 	bl	800f73c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f83e:	bf00      	nop
 800f840:	3710      	adds	r7, #16
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}

0800f846 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f846:	b580      	push	{r7, lr}
 800f848:	b09c      	sub	sp, #112	; 0x70
 800f84a:	af00      	add	r7, sp, #0
 800f84c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f852:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d172      	bne.n	800f948 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800f862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f864:	2200      	movs	r2, #0
 800f866:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	330c      	adds	r3, #12
 800f86e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f872:	e853 3f00 	ldrex	r3, [r3]
 800f876:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f87a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f87e:	66bb      	str	r3, [r7, #104]	; 0x68
 800f880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	330c      	adds	r3, #12
 800f886:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f888:	65ba      	str	r2, [r7, #88]	; 0x58
 800f88a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f88c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f88e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f890:	e841 2300 	strex	r3, r2, [r1]
 800f894:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d1e5      	bne.n	800f868 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f89c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	3314      	adds	r3, #20
 800f8a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a6:	e853 3f00 	ldrex	r3, [r3]
 800f8aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ae:	f023 0301 	bic.w	r3, r3, #1
 800f8b2:	667b      	str	r3, [r7, #100]	; 0x64
 800f8b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	3314      	adds	r3, #20
 800f8ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f8bc:	647a      	str	r2, [r7, #68]	; 0x44
 800f8be:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f8c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8c4:	e841 2300 	strex	r3, r2, [r1]
 800f8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d1e5      	bne.n	800f89c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f8d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	3314      	adds	r3, #20
 800f8d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8da:	e853 3f00 	ldrex	r3, [r3]
 800f8de:	623b      	str	r3, [r7, #32]
   return(result);
 800f8e0:	6a3b      	ldr	r3, [r7, #32]
 800f8e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8e6:	663b      	str	r3, [r7, #96]	; 0x60
 800f8e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	3314      	adds	r3, #20
 800f8ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f8f0:	633a      	str	r2, [r7, #48]	; 0x30
 800f8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8f8:	e841 2300 	strex	r3, r2, [r1]
 800f8fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f900:	2b00      	cmp	r3, #0
 800f902:	d1e5      	bne.n	800f8d0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f906:	2220      	movs	r2, #32
 800f908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f90c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f910:	2b01      	cmp	r3, #1
 800f912:	d119      	bne.n	800f948 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	330c      	adds	r3, #12
 800f91a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	e853 3f00 	ldrex	r3, [r3]
 800f922:	60fb      	str	r3, [r7, #12]
   return(result);
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	f023 0310 	bic.w	r3, r3, #16
 800f92a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f92c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	330c      	adds	r3, #12
 800f932:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f934:	61fa      	str	r2, [r7, #28]
 800f936:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f938:	69b9      	ldr	r1, [r7, #24]
 800f93a:	69fa      	ldr	r2, [r7, #28]
 800f93c:	e841 2300 	strex	r3, r2, [r1]
 800f940:	617b      	str	r3, [r7, #20]
   return(result);
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d1e5      	bne.n	800f914 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f94a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f94c:	2b01      	cmp	r3, #1
 800f94e:	d106      	bne.n	800f95e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f952:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f954:	4619      	mov	r1, r3
 800f956:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f958:	f7ff ff0e 	bl	800f778 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f95c:	e002      	b.n	800f964 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800f95e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f960:	f7f2 fd74 	bl	800244c <HAL_UART_RxCpltCallback>
}
 800f964:	bf00      	nop
 800f966:	3770      	adds	r7, #112	; 0x70
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}

0800f96c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b084      	sub	sp, #16
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f978:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f97e:	2b01      	cmp	r3, #1
 800f980:	d108      	bne.n	800f994 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f986:	085b      	lsrs	r3, r3, #1
 800f988:	b29b      	uxth	r3, r3
 800f98a:	4619      	mov	r1, r3
 800f98c:	68f8      	ldr	r0, [r7, #12]
 800f98e:	f7ff fef3 	bl	800f778 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f992:	e002      	b.n	800f99a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800f994:	68f8      	ldr	r0, [r7, #12]
 800f996:	f7ff fedb 	bl	800f750 <HAL_UART_RxHalfCpltCallback>
}
 800f99a:	bf00      	nop
 800f99c:	3710      	adds	r7, #16
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}

0800f9a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f9a2:	b580      	push	{r7, lr}
 800f9a4:	b084      	sub	sp, #16
 800f9a6:	af00      	add	r7, sp, #0
 800f9a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	695b      	ldr	r3, [r3, #20]
 800f9ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9be:	2b80      	cmp	r3, #128	; 0x80
 800f9c0:	bf0c      	ite	eq
 800f9c2:	2301      	moveq	r3, #1
 800f9c4:	2300      	movne	r3, #0
 800f9c6:	b2db      	uxtb	r3, r3
 800f9c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f9d0:	b2db      	uxtb	r3, r3
 800f9d2:	2b21      	cmp	r3, #33	; 0x21
 800f9d4:	d108      	bne.n	800f9e8 <UART_DMAError+0x46>
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d005      	beq.n	800f9e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800f9e2:	68b8      	ldr	r0, [r7, #8]
 800f9e4:	f000 f8c6 	bl	800fb74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	695b      	ldr	r3, [r3, #20]
 800f9ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9f2:	2b40      	cmp	r3, #64	; 0x40
 800f9f4:	bf0c      	ite	eq
 800f9f6:	2301      	moveq	r3, #1
 800f9f8:	2300      	movne	r3, #0
 800f9fa:	b2db      	uxtb	r3, r3
 800f9fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fa04:	b2db      	uxtb	r3, r3
 800fa06:	2b22      	cmp	r3, #34	; 0x22
 800fa08:	d108      	bne.n	800fa1c <UART_DMAError+0x7a>
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d005      	beq.n	800fa1c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	2200      	movs	r2, #0
 800fa14:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800fa16:	68b8      	ldr	r0, [r7, #8]
 800fa18:	f000 f8d4 	bl	800fbc4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa20:	f043 0210 	orr.w	r2, r3, #16
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fa28:	68b8      	ldr	r0, [r7, #8]
 800fa2a:	f7ff fe9b 	bl	800f764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa2e:	bf00      	nop
 800fa30:	3710      	adds	r7, #16
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
	...

0800fa38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b098      	sub	sp, #96	; 0x60
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	60f8      	str	r0, [r7, #12]
 800fa40:	60b9      	str	r1, [r7, #8]
 800fa42:	4613      	mov	r3, r2
 800fa44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800fa46:	68ba      	ldr	r2, [r7, #8]
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	88fa      	ldrh	r2, [r7, #6]
 800fa50:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2200      	movs	r2, #0
 800fa56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	2222      	movs	r2, #34	; 0x22
 800fa5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa64:	4a40      	ldr	r2, [pc, #256]	; (800fb68 <UART_Start_Receive_DMA+0x130>)
 800fa66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa6c:	4a3f      	ldr	r2, [pc, #252]	; (800fb6c <UART_Start_Receive_DMA+0x134>)
 800fa6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa74:	4a3e      	ldr	r2, [pc, #248]	; (800fb70 <UART_Start_Receive_DMA+0x138>)
 800fa76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800fa80:	f107 0308 	add.w	r3, r7, #8
 800fa84:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	3304      	adds	r3, #4
 800fa90:	4619      	mov	r1, r3
 800fa92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa94:	681a      	ldr	r2, [r3, #0]
 800fa96:	88fb      	ldrh	r3, [r7, #6]
 800fa98:	f7fa fafe 	bl	800a098 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	613b      	str	r3, [r7, #16]
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	613b      	str	r3, [r7, #16]
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	685b      	ldr	r3, [r3, #4]
 800faae:	613b      	str	r3, [r7, #16]
 800fab0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	2200      	movs	r2, #0
 800fab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	691b      	ldr	r3, [r3, #16]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d019      	beq.n	800faf6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	330c      	adds	r3, #12
 800fac8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800facc:	e853 3f00 	ldrex	r3, [r3]
 800fad0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fad8:	65bb      	str	r3, [r7, #88]	; 0x58
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	330c      	adds	r3, #12
 800fae0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fae2:	64fa      	str	r2, [r7, #76]	; 0x4c
 800fae4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fae6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fae8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800faea:	e841 2300 	strex	r3, r2, [r1]
 800faee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800faf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d1e5      	bne.n	800fac2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	3314      	adds	r3, #20
 800fafc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb00:	e853 3f00 	ldrex	r3, [r3]
 800fb04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb08:	f043 0301 	orr.w	r3, r3, #1
 800fb0c:	657b      	str	r3, [r7, #84]	; 0x54
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	3314      	adds	r3, #20
 800fb14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fb16:	63ba      	str	r2, [r7, #56]	; 0x38
 800fb18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fb1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb1e:	e841 2300 	strex	r3, r2, [r1]
 800fb22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d1e5      	bne.n	800faf6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	3314      	adds	r3, #20
 800fb30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb32:	69bb      	ldr	r3, [r7, #24]
 800fb34:	e853 3f00 	ldrex	r3, [r3]
 800fb38:	617b      	str	r3, [r7, #20]
   return(result);
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb40:	653b      	str	r3, [r7, #80]	; 0x50
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	3314      	adds	r3, #20
 800fb48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb4a:	627a      	str	r2, [r7, #36]	; 0x24
 800fb4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb4e:	6a39      	ldr	r1, [r7, #32]
 800fb50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb52:	e841 2300 	strex	r3, r2, [r1]
 800fb56:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb58:	69fb      	ldr	r3, [r7, #28]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d1e5      	bne.n	800fb2a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800fb5e:	2300      	movs	r3, #0
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	3760      	adds	r7, #96	; 0x60
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	0800f847 	.word	0x0800f847
 800fb6c:	0800f96d 	.word	0x0800f96d
 800fb70:	0800f9a3 	.word	0x0800f9a3

0800fb74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fb74:	b480      	push	{r7}
 800fb76:	b089      	sub	sp, #36	; 0x24
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	330c      	adds	r3, #12
 800fb82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	e853 3f00 	ldrex	r3, [r3]
 800fb8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fb92:	61fb      	str	r3, [r7, #28]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	330c      	adds	r3, #12
 800fb9a:	69fa      	ldr	r2, [r7, #28]
 800fb9c:	61ba      	str	r2, [r7, #24]
 800fb9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fba0:	6979      	ldr	r1, [r7, #20]
 800fba2:	69ba      	ldr	r2, [r7, #24]
 800fba4:	e841 2300 	strex	r3, r2, [r1]
 800fba8:	613b      	str	r3, [r7, #16]
   return(result);
 800fbaa:	693b      	ldr	r3, [r7, #16]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d1e5      	bne.n	800fb7c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2220      	movs	r2, #32
 800fbb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800fbb8:	bf00      	nop
 800fbba:	3724      	adds	r7, #36	; 0x24
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	4770      	bx	lr

0800fbc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b095      	sub	sp, #84	; 0x54
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	330c      	adds	r3, #12
 800fbd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbd6:	e853 3f00 	ldrex	r3, [r3]
 800fbda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fbe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	330c      	adds	r3, #12
 800fbea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fbec:	643a      	str	r2, [r7, #64]	; 0x40
 800fbee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fbf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fbf4:	e841 2300 	strex	r3, r2, [r1]
 800fbf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d1e5      	bne.n	800fbcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	3314      	adds	r3, #20
 800fc06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc08:	6a3b      	ldr	r3, [r7, #32]
 800fc0a:	e853 3f00 	ldrex	r3, [r3]
 800fc0e:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc10:	69fb      	ldr	r3, [r7, #28]
 800fc12:	f023 0301 	bic.w	r3, r3, #1
 800fc16:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	3314      	adds	r3, #20
 800fc1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc20:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fc22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc28:	e841 2300 	strex	r3, r2, [r1]
 800fc2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d1e5      	bne.n	800fc00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d119      	bne.n	800fc70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	330c      	adds	r3, #12
 800fc42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	e853 3f00 	ldrex	r3, [r3]
 800fc4a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	f023 0310 	bic.w	r3, r3, #16
 800fc52:	647b      	str	r3, [r7, #68]	; 0x44
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	330c      	adds	r3, #12
 800fc5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc5c:	61ba      	str	r2, [r7, #24]
 800fc5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc60:	6979      	ldr	r1, [r7, #20]
 800fc62:	69ba      	ldr	r2, [r7, #24]
 800fc64:	e841 2300 	strex	r3, r2, [r1]
 800fc68:	613b      	str	r3, [r7, #16]
   return(result);
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d1e5      	bne.n	800fc3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2220      	movs	r2, #32
 800fc74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800fc7e:	bf00      	nop
 800fc80:	3754      	adds	r7, #84	; 0x54
 800fc82:	46bd      	mov	sp, r7
 800fc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc88:	4770      	bx	lr

0800fc8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fc8a:	b580      	push	{r7, lr}
 800fc8c:	b084      	sub	sp, #16
 800fc8e:	af00      	add	r7, sp, #0
 800fc90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	2200      	movs	r2, #0
 800fca2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fca4:	68f8      	ldr	r0, [r7, #12]
 800fca6:	f7ff fd5d 	bl	800f764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcaa:	bf00      	nop
 800fcac:	3710      	adds	r7, #16
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}

0800fcb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800fcb2:	b480      	push	{r7}
 800fcb4:	b085      	sub	sp, #20
 800fcb6:	af00      	add	r7, sp, #0
 800fcb8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fcc0:	b2db      	uxtb	r3, r3
 800fcc2:	2b21      	cmp	r3, #33	; 0x21
 800fcc4:	d13e      	bne.n	800fd44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	689b      	ldr	r3, [r3, #8]
 800fcca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcce:	d114      	bne.n	800fcfa <UART_Transmit_IT+0x48>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	691b      	ldr	r3, [r3, #16]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d110      	bne.n	800fcfa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	6a1b      	ldr	r3, [r3, #32]
 800fcdc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	881b      	ldrh	r3, [r3, #0]
 800fce2:	461a      	mov	r2, r3
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fcec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6a1b      	ldr	r3, [r3, #32]
 800fcf2:	1c9a      	adds	r2, r3, #2
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	621a      	str	r2, [r3, #32]
 800fcf8:	e008      	b.n	800fd0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6a1b      	ldr	r3, [r3, #32]
 800fcfe:	1c59      	adds	r1, r3, #1
 800fd00:	687a      	ldr	r2, [r7, #4]
 800fd02:	6211      	str	r1, [r2, #32]
 800fd04:	781a      	ldrb	r2, [r3, #0]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fd10:	b29b      	uxth	r3, r3
 800fd12:	3b01      	subs	r3, #1
 800fd14:	b29b      	uxth	r3, r3
 800fd16:	687a      	ldr	r2, [r7, #4]
 800fd18:	4619      	mov	r1, r3
 800fd1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d10f      	bne.n	800fd40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	68da      	ldr	r2, [r3, #12]
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fd2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	68da      	ldr	r2, [r3, #12]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800fd40:	2300      	movs	r3, #0
 800fd42:	e000      	b.n	800fd46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800fd44:	2302      	movs	r3, #2
  }
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3714      	adds	r7, #20
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd50:	4770      	bx	lr

0800fd52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fd52:	b580      	push	{r7, lr}
 800fd54:	b082      	sub	sp, #8
 800fd56:	af00      	add	r7, sp, #0
 800fd58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	68da      	ldr	r2, [r3, #12]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fd68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2220      	movs	r2, #32
 800fd6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fd72:	6878      	ldr	r0, [r7, #4]
 800fd74:	f7f2 fac2 	bl	80022fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800fd78:	2300      	movs	r3, #0
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3708      	adds	r7, #8
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}

0800fd82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800fd82:	b580      	push	{r7, lr}
 800fd84:	b08c      	sub	sp, #48	; 0x30
 800fd86:	af00      	add	r7, sp, #0
 800fd88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fd90:	b2db      	uxtb	r3, r3
 800fd92:	2b22      	cmp	r3, #34	; 0x22
 800fd94:	f040 80ab 	bne.w	800feee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	689b      	ldr	r3, [r3, #8]
 800fd9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fda0:	d117      	bne.n	800fdd2 <UART_Receive_IT+0x50>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	691b      	ldr	r3, [r3, #16]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d113      	bne.n	800fdd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdb2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	685b      	ldr	r3, [r3, #4]
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdc0:	b29a      	uxth	r2, r3
 800fdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdca:	1c9a      	adds	r2, r3, #2
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	629a      	str	r2, [r3, #40]	; 0x28
 800fdd0:	e026      	b.n	800fe20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800fdd8:	2300      	movs	r3, #0
 800fdda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	689b      	ldr	r3, [r3, #8]
 800fde0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fde4:	d007      	beq.n	800fdf6 <UART_Receive_IT+0x74>
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	689b      	ldr	r3, [r3, #8]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d10a      	bne.n	800fe04 <UART_Receive_IT+0x82>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	691b      	ldr	r3, [r3, #16]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d106      	bne.n	800fe04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	685b      	ldr	r3, [r3, #4]
 800fdfc:	b2da      	uxtb	r2, r3
 800fdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe00:	701a      	strb	r2, [r3, #0]
 800fe02:	e008      	b.n	800fe16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	685b      	ldr	r3, [r3, #4]
 800fe0a:	b2db      	uxtb	r3, r3
 800fe0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe10:	b2da      	uxtb	r2, r3
 800fe12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe1a:	1c5a      	adds	r2, r3, #1
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fe24:	b29b      	uxth	r3, r3
 800fe26:	3b01      	subs	r3, #1
 800fe28:	b29b      	uxth	r3, r3
 800fe2a:	687a      	ldr	r2, [r7, #4]
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d15a      	bne.n	800feea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	68da      	ldr	r2, [r3, #12]
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	f022 0220 	bic.w	r2, r2, #32
 800fe42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	68da      	ldr	r2, [r3, #12]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fe52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	695a      	ldr	r2, [r3, #20]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	f022 0201 	bic.w	r2, r2, #1
 800fe62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2220      	movs	r2, #32
 800fe68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe70:	2b01      	cmp	r3, #1
 800fe72:	d135      	bne.n	800fee0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2200      	movs	r2, #0
 800fe78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	330c      	adds	r3, #12
 800fe80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	e853 3f00 	ldrex	r3, [r3]
 800fe88:	613b      	str	r3, [r7, #16]
   return(result);
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	f023 0310 	bic.w	r3, r3, #16
 800fe90:	627b      	str	r3, [r7, #36]	; 0x24
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	330c      	adds	r3, #12
 800fe98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe9a:	623a      	str	r2, [r7, #32]
 800fe9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe9e:	69f9      	ldr	r1, [r7, #28]
 800fea0:	6a3a      	ldr	r2, [r7, #32]
 800fea2:	e841 2300 	strex	r3, r2, [r1]
 800fea6:	61bb      	str	r3, [r7, #24]
   return(result);
 800fea8:	69bb      	ldr	r3, [r7, #24]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d1e5      	bne.n	800fe7a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	f003 0310 	and.w	r3, r3, #16
 800feb8:	2b10      	cmp	r3, #16
 800feba:	d10a      	bne.n	800fed2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800febc:	2300      	movs	r3, #0
 800febe:	60fb      	str	r3, [r7, #12]
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	60fb      	str	r3, [r7, #12]
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	685b      	ldr	r3, [r3, #4]
 800fece:	60fb      	str	r3, [r7, #12]
 800fed0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fed6:	4619      	mov	r1, r3
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f7ff fc4d 	bl	800f778 <HAL_UARTEx_RxEventCallback>
 800fede:	e002      	b.n	800fee6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f7f2 fab3 	bl	800244c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800fee6:	2300      	movs	r3, #0
 800fee8:	e002      	b.n	800fef0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800feea:	2300      	movs	r3, #0
 800feec:	e000      	b.n	800fef0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800feee:	2302      	movs	r3, #2
  }
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	3730      	adds	r7, #48	; 0x30
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}

0800fef8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fefc:	b0c0      	sub	sp, #256	; 0x100
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ff04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	691b      	ldr	r3, [r3, #16]
 800ff0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ff10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff14:	68d9      	ldr	r1, [r3, #12]
 800ff16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff1a:	681a      	ldr	r2, [r3, #0]
 800ff1c:	ea40 0301 	orr.w	r3, r0, r1
 800ff20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ff22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff26:	689a      	ldr	r2, [r3, #8]
 800ff28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff2c:	691b      	ldr	r3, [r3, #16]
 800ff2e:	431a      	orrs	r2, r3
 800ff30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff34:	695b      	ldr	r3, [r3, #20]
 800ff36:	431a      	orrs	r2, r3
 800ff38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff3c:	69db      	ldr	r3, [r3, #28]
 800ff3e:	4313      	orrs	r3, r2
 800ff40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ff44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	68db      	ldr	r3, [r3, #12]
 800ff4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ff50:	f021 010c 	bic.w	r1, r1, #12
 800ff54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff58:	681a      	ldr	r2, [r3, #0]
 800ff5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ff5e:	430b      	orrs	r3, r1
 800ff60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ff62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	695b      	ldr	r3, [r3, #20]
 800ff6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ff6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff72:	6999      	ldr	r1, [r3, #24]
 800ff74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff78:	681a      	ldr	r2, [r3, #0]
 800ff7a:	ea40 0301 	orr.w	r3, r0, r1
 800ff7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ff80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff84:	681a      	ldr	r2, [r3, #0]
 800ff86:	4b8f      	ldr	r3, [pc, #572]	; (80101c4 <UART_SetConfig+0x2cc>)
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d005      	beq.n	800ff98 <UART_SetConfig+0xa0>
 800ff8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	4b8d      	ldr	r3, [pc, #564]	; (80101c8 <UART_SetConfig+0x2d0>)
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d104      	bne.n	800ffa2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ff98:	f7fc fc58 	bl	800c84c <HAL_RCC_GetPCLK2Freq>
 800ff9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ffa0:	e003      	b.n	800ffaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ffa2:	f7fc fc3f 	bl	800c824 <HAL_RCC_GetPCLK1Freq>
 800ffa6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ffaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ffae:	69db      	ldr	r3, [r3, #28]
 800ffb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ffb4:	f040 810c 	bne.w	80101d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ffb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ffc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ffc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ffca:	4622      	mov	r2, r4
 800ffcc:	462b      	mov	r3, r5
 800ffce:	1891      	adds	r1, r2, r2
 800ffd0:	65b9      	str	r1, [r7, #88]	; 0x58
 800ffd2:	415b      	adcs	r3, r3
 800ffd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ffd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ffda:	4621      	mov	r1, r4
 800ffdc:	eb12 0801 	adds.w	r8, r2, r1
 800ffe0:	4629      	mov	r1, r5
 800ffe2:	eb43 0901 	adc.w	r9, r3, r1
 800ffe6:	f04f 0200 	mov.w	r2, #0
 800ffea:	f04f 0300 	mov.w	r3, #0
 800ffee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800fff2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800fff6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800fffa:	4690      	mov	r8, r2
 800fffc:	4699      	mov	r9, r3
 800fffe:	4623      	mov	r3, r4
 8010000:	eb18 0303 	adds.w	r3, r8, r3
 8010004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010008:	462b      	mov	r3, r5
 801000a:	eb49 0303 	adc.w	r3, r9, r3
 801000e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	2200      	movs	r2, #0
 801001a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801001e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8010022:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8010026:	460b      	mov	r3, r1
 8010028:	18db      	adds	r3, r3, r3
 801002a:	653b      	str	r3, [r7, #80]	; 0x50
 801002c:	4613      	mov	r3, r2
 801002e:	eb42 0303 	adc.w	r3, r2, r3
 8010032:	657b      	str	r3, [r7, #84]	; 0x54
 8010034:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010038:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801003c:	f7f0 fdb4 	bl	8000ba8 <__aeabi_uldivmod>
 8010040:	4602      	mov	r2, r0
 8010042:	460b      	mov	r3, r1
 8010044:	4b61      	ldr	r3, [pc, #388]	; (80101cc <UART_SetConfig+0x2d4>)
 8010046:	fba3 2302 	umull	r2, r3, r3, r2
 801004a:	095b      	lsrs	r3, r3, #5
 801004c:	011c      	lsls	r4, r3, #4
 801004e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010052:	2200      	movs	r2, #0
 8010054:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010058:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801005c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8010060:	4642      	mov	r2, r8
 8010062:	464b      	mov	r3, r9
 8010064:	1891      	adds	r1, r2, r2
 8010066:	64b9      	str	r1, [r7, #72]	; 0x48
 8010068:	415b      	adcs	r3, r3
 801006a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801006c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8010070:	4641      	mov	r1, r8
 8010072:	eb12 0a01 	adds.w	sl, r2, r1
 8010076:	4649      	mov	r1, r9
 8010078:	eb43 0b01 	adc.w	fp, r3, r1
 801007c:	f04f 0200 	mov.w	r2, #0
 8010080:	f04f 0300 	mov.w	r3, #0
 8010084:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010088:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801008c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010090:	4692      	mov	sl, r2
 8010092:	469b      	mov	fp, r3
 8010094:	4643      	mov	r3, r8
 8010096:	eb1a 0303 	adds.w	r3, sl, r3
 801009a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801009e:	464b      	mov	r3, r9
 80100a0:	eb4b 0303 	adc.w	r3, fp, r3
 80100a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80100a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80100ac:	685b      	ldr	r3, [r3, #4]
 80100ae:	2200      	movs	r2, #0
 80100b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80100b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80100b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80100bc:	460b      	mov	r3, r1
 80100be:	18db      	adds	r3, r3, r3
 80100c0:	643b      	str	r3, [r7, #64]	; 0x40
 80100c2:	4613      	mov	r3, r2
 80100c4:	eb42 0303 	adc.w	r3, r2, r3
 80100c8:	647b      	str	r3, [r7, #68]	; 0x44
 80100ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80100ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80100d2:	f7f0 fd69 	bl	8000ba8 <__aeabi_uldivmod>
 80100d6:	4602      	mov	r2, r0
 80100d8:	460b      	mov	r3, r1
 80100da:	4611      	mov	r1, r2
 80100dc:	4b3b      	ldr	r3, [pc, #236]	; (80101cc <UART_SetConfig+0x2d4>)
 80100de:	fba3 2301 	umull	r2, r3, r3, r1
 80100e2:	095b      	lsrs	r3, r3, #5
 80100e4:	2264      	movs	r2, #100	; 0x64
 80100e6:	fb02 f303 	mul.w	r3, r2, r3
 80100ea:	1acb      	subs	r3, r1, r3
 80100ec:	00db      	lsls	r3, r3, #3
 80100ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80100f2:	4b36      	ldr	r3, [pc, #216]	; (80101cc <UART_SetConfig+0x2d4>)
 80100f4:	fba3 2302 	umull	r2, r3, r3, r2
 80100f8:	095b      	lsrs	r3, r3, #5
 80100fa:	005b      	lsls	r3, r3, #1
 80100fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010100:	441c      	add	r4, r3
 8010102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010106:	2200      	movs	r2, #0
 8010108:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801010c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010110:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8010114:	4642      	mov	r2, r8
 8010116:	464b      	mov	r3, r9
 8010118:	1891      	adds	r1, r2, r2
 801011a:	63b9      	str	r1, [r7, #56]	; 0x38
 801011c:	415b      	adcs	r3, r3
 801011e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010120:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010124:	4641      	mov	r1, r8
 8010126:	1851      	adds	r1, r2, r1
 8010128:	6339      	str	r1, [r7, #48]	; 0x30
 801012a:	4649      	mov	r1, r9
 801012c:	414b      	adcs	r3, r1
 801012e:	637b      	str	r3, [r7, #52]	; 0x34
 8010130:	f04f 0200 	mov.w	r2, #0
 8010134:	f04f 0300 	mov.w	r3, #0
 8010138:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801013c:	4659      	mov	r1, fp
 801013e:	00cb      	lsls	r3, r1, #3
 8010140:	4651      	mov	r1, sl
 8010142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010146:	4651      	mov	r1, sl
 8010148:	00ca      	lsls	r2, r1, #3
 801014a:	4610      	mov	r0, r2
 801014c:	4619      	mov	r1, r3
 801014e:	4603      	mov	r3, r0
 8010150:	4642      	mov	r2, r8
 8010152:	189b      	adds	r3, r3, r2
 8010154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010158:	464b      	mov	r3, r9
 801015a:	460a      	mov	r2, r1
 801015c:	eb42 0303 	adc.w	r3, r2, r3
 8010160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010168:	685b      	ldr	r3, [r3, #4]
 801016a:	2200      	movs	r2, #0
 801016c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010170:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8010174:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8010178:	460b      	mov	r3, r1
 801017a:	18db      	adds	r3, r3, r3
 801017c:	62bb      	str	r3, [r7, #40]	; 0x28
 801017e:	4613      	mov	r3, r2
 8010180:	eb42 0303 	adc.w	r3, r2, r3
 8010184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010186:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801018a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801018e:	f7f0 fd0b 	bl	8000ba8 <__aeabi_uldivmod>
 8010192:	4602      	mov	r2, r0
 8010194:	460b      	mov	r3, r1
 8010196:	4b0d      	ldr	r3, [pc, #52]	; (80101cc <UART_SetConfig+0x2d4>)
 8010198:	fba3 1302 	umull	r1, r3, r3, r2
 801019c:	095b      	lsrs	r3, r3, #5
 801019e:	2164      	movs	r1, #100	; 0x64
 80101a0:	fb01 f303 	mul.w	r3, r1, r3
 80101a4:	1ad3      	subs	r3, r2, r3
 80101a6:	00db      	lsls	r3, r3, #3
 80101a8:	3332      	adds	r3, #50	; 0x32
 80101aa:	4a08      	ldr	r2, [pc, #32]	; (80101cc <UART_SetConfig+0x2d4>)
 80101ac:	fba2 2303 	umull	r2, r3, r2, r3
 80101b0:	095b      	lsrs	r3, r3, #5
 80101b2:	f003 0207 	and.w	r2, r3, #7
 80101b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	4422      	add	r2, r4
 80101be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80101c0:	e105      	b.n	80103ce <UART_SetConfig+0x4d6>
 80101c2:	bf00      	nop
 80101c4:	40011000 	.word	0x40011000
 80101c8:	40011400 	.word	0x40011400
 80101cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80101d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80101d4:	2200      	movs	r2, #0
 80101d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80101da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80101de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80101e2:	4642      	mov	r2, r8
 80101e4:	464b      	mov	r3, r9
 80101e6:	1891      	adds	r1, r2, r2
 80101e8:	6239      	str	r1, [r7, #32]
 80101ea:	415b      	adcs	r3, r3
 80101ec:	627b      	str	r3, [r7, #36]	; 0x24
 80101ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80101f2:	4641      	mov	r1, r8
 80101f4:	1854      	adds	r4, r2, r1
 80101f6:	4649      	mov	r1, r9
 80101f8:	eb43 0501 	adc.w	r5, r3, r1
 80101fc:	f04f 0200 	mov.w	r2, #0
 8010200:	f04f 0300 	mov.w	r3, #0
 8010204:	00eb      	lsls	r3, r5, #3
 8010206:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801020a:	00e2      	lsls	r2, r4, #3
 801020c:	4614      	mov	r4, r2
 801020e:	461d      	mov	r5, r3
 8010210:	4643      	mov	r3, r8
 8010212:	18e3      	adds	r3, r4, r3
 8010214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010218:	464b      	mov	r3, r9
 801021a:	eb45 0303 	adc.w	r3, r5, r3
 801021e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010226:	685b      	ldr	r3, [r3, #4]
 8010228:	2200      	movs	r2, #0
 801022a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801022e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010232:	f04f 0200 	mov.w	r2, #0
 8010236:	f04f 0300 	mov.w	r3, #0
 801023a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801023e:	4629      	mov	r1, r5
 8010240:	008b      	lsls	r3, r1, #2
 8010242:	4621      	mov	r1, r4
 8010244:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010248:	4621      	mov	r1, r4
 801024a:	008a      	lsls	r2, r1, #2
 801024c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8010250:	f7f0 fcaa 	bl	8000ba8 <__aeabi_uldivmod>
 8010254:	4602      	mov	r2, r0
 8010256:	460b      	mov	r3, r1
 8010258:	4b60      	ldr	r3, [pc, #384]	; (80103dc <UART_SetConfig+0x4e4>)
 801025a:	fba3 2302 	umull	r2, r3, r3, r2
 801025e:	095b      	lsrs	r3, r3, #5
 8010260:	011c      	lsls	r4, r3, #4
 8010262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010266:	2200      	movs	r2, #0
 8010268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801026c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010270:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8010274:	4642      	mov	r2, r8
 8010276:	464b      	mov	r3, r9
 8010278:	1891      	adds	r1, r2, r2
 801027a:	61b9      	str	r1, [r7, #24]
 801027c:	415b      	adcs	r3, r3
 801027e:	61fb      	str	r3, [r7, #28]
 8010280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010284:	4641      	mov	r1, r8
 8010286:	1851      	adds	r1, r2, r1
 8010288:	6139      	str	r1, [r7, #16]
 801028a:	4649      	mov	r1, r9
 801028c:	414b      	adcs	r3, r1
 801028e:	617b      	str	r3, [r7, #20]
 8010290:	f04f 0200 	mov.w	r2, #0
 8010294:	f04f 0300 	mov.w	r3, #0
 8010298:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801029c:	4659      	mov	r1, fp
 801029e:	00cb      	lsls	r3, r1, #3
 80102a0:	4651      	mov	r1, sl
 80102a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80102a6:	4651      	mov	r1, sl
 80102a8:	00ca      	lsls	r2, r1, #3
 80102aa:	4610      	mov	r0, r2
 80102ac:	4619      	mov	r1, r3
 80102ae:	4603      	mov	r3, r0
 80102b0:	4642      	mov	r2, r8
 80102b2:	189b      	adds	r3, r3, r2
 80102b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80102b8:	464b      	mov	r3, r9
 80102ba:	460a      	mov	r2, r1
 80102bc:	eb42 0303 	adc.w	r3, r2, r3
 80102c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80102c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80102c8:	685b      	ldr	r3, [r3, #4]
 80102ca:	2200      	movs	r2, #0
 80102cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80102ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80102d0:	f04f 0200 	mov.w	r2, #0
 80102d4:	f04f 0300 	mov.w	r3, #0
 80102d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80102dc:	4649      	mov	r1, r9
 80102de:	008b      	lsls	r3, r1, #2
 80102e0:	4641      	mov	r1, r8
 80102e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80102e6:	4641      	mov	r1, r8
 80102e8:	008a      	lsls	r2, r1, #2
 80102ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80102ee:	f7f0 fc5b 	bl	8000ba8 <__aeabi_uldivmod>
 80102f2:	4602      	mov	r2, r0
 80102f4:	460b      	mov	r3, r1
 80102f6:	4b39      	ldr	r3, [pc, #228]	; (80103dc <UART_SetConfig+0x4e4>)
 80102f8:	fba3 1302 	umull	r1, r3, r3, r2
 80102fc:	095b      	lsrs	r3, r3, #5
 80102fe:	2164      	movs	r1, #100	; 0x64
 8010300:	fb01 f303 	mul.w	r3, r1, r3
 8010304:	1ad3      	subs	r3, r2, r3
 8010306:	011b      	lsls	r3, r3, #4
 8010308:	3332      	adds	r3, #50	; 0x32
 801030a:	4a34      	ldr	r2, [pc, #208]	; (80103dc <UART_SetConfig+0x4e4>)
 801030c:	fba2 2303 	umull	r2, r3, r2, r3
 8010310:	095b      	lsrs	r3, r3, #5
 8010312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010316:	441c      	add	r4, r3
 8010318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801031c:	2200      	movs	r2, #0
 801031e:	673b      	str	r3, [r7, #112]	; 0x70
 8010320:	677a      	str	r2, [r7, #116]	; 0x74
 8010322:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8010326:	4642      	mov	r2, r8
 8010328:	464b      	mov	r3, r9
 801032a:	1891      	adds	r1, r2, r2
 801032c:	60b9      	str	r1, [r7, #8]
 801032e:	415b      	adcs	r3, r3
 8010330:	60fb      	str	r3, [r7, #12]
 8010332:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010336:	4641      	mov	r1, r8
 8010338:	1851      	adds	r1, r2, r1
 801033a:	6039      	str	r1, [r7, #0]
 801033c:	4649      	mov	r1, r9
 801033e:	414b      	adcs	r3, r1
 8010340:	607b      	str	r3, [r7, #4]
 8010342:	f04f 0200 	mov.w	r2, #0
 8010346:	f04f 0300 	mov.w	r3, #0
 801034a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801034e:	4659      	mov	r1, fp
 8010350:	00cb      	lsls	r3, r1, #3
 8010352:	4651      	mov	r1, sl
 8010354:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010358:	4651      	mov	r1, sl
 801035a:	00ca      	lsls	r2, r1, #3
 801035c:	4610      	mov	r0, r2
 801035e:	4619      	mov	r1, r3
 8010360:	4603      	mov	r3, r0
 8010362:	4642      	mov	r2, r8
 8010364:	189b      	adds	r3, r3, r2
 8010366:	66bb      	str	r3, [r7, #104]	; 0x68
 8010368:	464b      	mov	r3, r9
 801036a:	460a      	mov	r2, r1
 801036c:	eb42 0303 	adc.w	r3, r2, r3
 8010370:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	2200      	movs	r2, #0
 801037a:	663b      	str	r3, [r7, #96]	; 0x60
 801037c:	667a      	str	r2, [r7, #100]	; 0x64
 801037e:	f04f 0200 	mov.w	r2, #0
 8010382:	f04f 0300 	mov.w	r3, #0
 8010386:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801038a:	4649      	mov	r1, r9
 801038c:	008b      	lsls	r3, r1, #2
 801038e:	4641      	mov	r1, r8
 8010390:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010394:	4641      	mov	r1, r8
 8010396:	008a      	lsls	r2, r1, #2
 8010398:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801039c:	f7f0 fc04 	bl	8000ba8 <__aeabi_uldivmod>
 80103a0:	4602      	mov	r2, r0
 80103a2:	460b      	mov	r3, r1
 80103a4:	4b0d      	ldr	r3, [pc, #52]	; (80103dc <UART_SetConfig+0x4e4>)
 80103a6:	fba3 1302 	umull	r1, r3, r3, r2
 80103aa:	095b      	lsrs	r3, r3, #5
 80103ac:	2164      	movs	r1, #100	; 0x64
 80103ae:	fb01 f303 	mul.w	r3, r1, r3
 80103b2:	1ad3      	subs	r3, r2, r3
 80103b4:	011b      	lsls	r3, r3, #4
 80103b6:	3332      	adds	r3, #50	; 0x32
 80103b8:	4a08      	ldr	r2, [pc, #32]	; (80103dc <UART_SetConfig+0x4e4>)
 80103ba:	fba2 2303 	umull	r2, r3, r2, r3
 80103be:	095b      	lsrs	r3, r3, #5
 80103c0:	f003 020f 	and.w	r2, r3, #15
 80103c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	4422      	add	r2, r4
 80103cc:	609a      	str	r2, [r3, #8]
}
 80103ce:	bf00      	nop
 80103d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80103d4:	46bd      	mov	sp, r7
 80103d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80103da:	bf00      	nop
 80103dc:	51eb851f 	.word	0x51eb851f

080103e0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80103e0:	b084      	sub	sp, #16
 80103e2:	b480      	push	{r7}
 80103e4:	b085      	sub	sp, #20
 80103e6:	af00      	add	r7, sp, #0
 80103e8:	6078      	str	r0, [r7, #4]
 80103ea:	f107 001c 	add.w	r0, r7, #28
 80103ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80103f2:	2300      	movs	r3, #0
 80103f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80103f6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80103f8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80103fa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80103fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80103fe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010400:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8010402:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8010406:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 801040a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 801040c:	68fa      	ldr	r2, [r7, #12]
 801040e:	4313      	orrs	r3, r2
 8010410:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	685b      	ldr	r3, [r3, #4]
 8010416:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 801041a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801041e:	68fa      	ldr	r2, [r7, #12]
 8010420:	431a      	orrs	r2, r3
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010426:	2300      	movs	r3, #0
}
 8010428:	4618      	mov	r0, r3
 801042a:	3714      	adds	r7, #20
 801042c:	46bd      	mov	sp, r7
 801042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010432:	b004      	add	sp, #16
 8010434:	4770      	bx	lr

08010436 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8010436:	b480      	push	{r7}
 8010438:	b083      	sub	sp, #12
 801043a:	af00      	add	r7, sp, #0
 801043c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010444:	4618      	mov	r0, r3
 8010446:	370c      	adds	r7, #12
 8010448:	46bd      	mov	sp, r7
 801044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044e:	4770      	bx	lr

08010450 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8010450:	b480      	push	{r7}
 8010452:	b083      	sub	sp, #12
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2203      	movs	r2, #3
 801045c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801045e:	2300      	movs	r3, #0
}
 8010460:	4618      	mov	r0, r3
 8010462:	370c      	adds	r7, #12
 8010464:	46bd      	mov	sp, r7
 8010466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046a:	4770      	bx	lr

0801046c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 801046c:	b480      	push	{r7}
 801046e:	b083      	sub	sp, #12
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	f003 0303 	and.w	r3, r3, #3
}
 801047c:	4618      	mov	r0, r3
 801047e:	370c      	adds	r7, #12
 8010480:	46bd      	mov	sp, r7
 8010482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010486:	4770      	bx	lr

08010488 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8010488:	b480      	push	{r7}
 801048a:	b085      	sub	sp, #20
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010492:	2300      	movs	r3, #0
 8010494:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	681a      	ldr	r2, [r3, #0]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80104a6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80104ac:	431a      	orrs	r2, r3
                       Command->CPSM);
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80104b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80104b4:	68fa      	ldr	r2, [r7, #12]
 80104b6:	4313      	orrs	r3, r2
 80104b8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	68db      	ldr	r3, [r3, #12]
 80104be:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80104c2:	f023 030f 	bic.w	r3, r3, #15
 80104c6:	68fa      	ldr	r2, [r7, #12]
 80104c8:	431a      	orrs	r2, r3
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80104ce:	2300      	movs	r3, #0
}
 80104d0:	4618      	mov	r0, r3
 80104d2:	3714      	adds	r7, #20
 80104d4:	46bd      	mov	sp, r7
 80104d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104da:	4770      	bx	lr

080104dc <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80104dc:	b480      	push	{r7}
 80104de:	b083      	sub	sp, #12
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	691b      	ldr	r3, [r3, #16]
 80104e8:	b2db      	uxtb	r3, r3
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	370c      	adds	r7, #12
 80104ee:	46bd      	mov	sp, r7
 80104f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f4:	4770      	bx	lr

080104f6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80104f6:	b480      	push	{r7}
 80104f8:	b085      	sub	sp, #20
 80104fa:	af00      	add	r7, sp, #0
 80104fc:	6078      	str	r0, [r7, #4]
 80104fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	3314      	adds	r3, #20
 8010504:	461a      	mov	r2, r3
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	4413      	add	r3, r2
 801050a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	681b      	ldr	r3, [r3, #0]
}  
 8010510:	4618      	mov	r0, r3
 8010512:	3714      	adds	r7, #20
 8010514:	46bd      	mov	sp, r7
 8010516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051a:	4770      	bx	lr

0801051c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 801051c:	b480      	push	{r7}
 801051e:	b085      	sub	sp, #20
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010526:	2300      	movs	r3, #0
 8010528:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	681a      	ldr	r2, [r3, #0]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	685a      	ldr	r2, [r3, #4]
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010542:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010548:	431a      	orrs	r2, r3
                       Data->DPSM);
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801054e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010550:	68fa      	ldr	r2, [r7, #12]
 8010552:	4313      	orrs	r3, r2
 8010554:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801055a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	431a      	orrs	r2, r3
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010566:	2300      	movs	r3, #0

}
 8010568:	4618      	mov	r0, r3
 801056a:	3714      	adds	r7, #20
 801056c:	46bd      	mov	sp, r7
 801056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010572:	4770      	bx	lr

08010574 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b088      	sub	sp, #32
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
 801057c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010582:	2310      	movs	r3, #16
 8010584:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010586:	2340      	movs	r3, #64	; 0x40
 8010588:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801058a:	2300      	movs	r3, #0
 801058c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801058e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010592:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010594:	f107 0308 	add.w	r3, r7, #8
 8010598:	4619      	mov	r1, r3
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f7ff ff74 	bl	8010488 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80105a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80105a4:	2110      	movs	r1, #16
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f000 f94c 	bl	8010844 <SDMMC_GetCmdResp1>
 80105ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105ae:	69fb      	ldr	r3, [r7, #28]
}
 80105b0:	4618      	mov	r0, r3
 80105b2:	3720      	adds	r7, #32
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}

080105b8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b08a      	sub	sp, #40	; 0x28
 80105bc:	af00      	add	r7, sp, #0
 80105be:	60f8      	str	r0, [r7, #12]
 80105c0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80105c8:	2307      	movs	r3, #7
 80105ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80105cc:	2340      	movs	r3, #64	; 0x40
 80105ce:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80105d0:	2300      	movs	r3, #0
 80105d2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80105d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105d8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80105da:	f107 0310 	add.w	r3, r7, #16
 80105de:	4619      	mov	r1, r3
 80105e0:	68f8      	ldr	r0, [r7, #12]
 80105e2:	f7ff ff51 	bl	8010488 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80105e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80105ea:	2107      	movs	r1, #7
 80105ec:	68f8      	ldr	r0, [r7, #12]
 80105ee:	f000 f929 	bl	8010844 <SDMMC_GetCmdResp1>
 80105f2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80105f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	3728      	adds	r7, #40	; 0x28
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}

080105fe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80105fe:	b580      	push	{r7, lr}
 8010600:	b088      	sub	sp, #32
 8010602:	af00      	add	r7, sp, #0
 8010604:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010606:	2300      	movs	r3, #0
 8010608:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801060a:	2300      	movs	r3, #0
 801060c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 801060e:	2300      	movs	r3, #0
 8010610:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010612:	2300      	movs	r3, #0
 8010614:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801061a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801061c:	f107 0308 	add.w	r3, r7, #8
 8010620:	4619      	mov	r1, r3
 8010622:	6878      	ldr	r0, [r7, #4]
 8010624:	f7ff ff30 	bl	8010488 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f000 fb43 	bl	8010cb4 <SDMMC_GetCmdError>
 801062e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010630:	69fb      	ldr	r3, [r7, #28]
}
 8010632:	4618      	mov	r0, r3
 8010634:	3720      	adds	r7, #32
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}

0801063a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 801063a:	b580      	push	{r7, lr}
 801063c:	b088      	sub	sp, #32
 801063e:	af00      	add	r7, sp, #0
 8010640:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010642:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010646:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010648:	2308      	movs	r3, #8
 801064a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801064c:	2340      	movs	r3, #64	; 0x40
 801064e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010650:	2300      	movs	r3, #0
 8010652:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010658:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801065a:	f107 0308 	add.w	r3, r7, #8
 801065e:	4619      	mov	r1, r3
 8010660:	6878      	ldr	r0, [r7, #4]
 8010662:	f7ff ff11 	bl	8010488 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f000 fad6 	bl	8010c18 <SDMMC_GetCmdResp7>
 801066c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801066e:	69fb      	ldr	r3, [r7, #28]
}
 8010670:	4618      	mov	r0, r3
 8010672:	3720      	adds	r7, #32
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}

08010678 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b088      	sub	sp, #32
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
 8010680:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010686:	2337      	movs	r3, #55	; 0x37
 8010688:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801068a:	2340      	movs	r3, #64	; 0x40
 801068c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801068e:	2300      	movs	r3, #0
 8010690:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010696:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010698:	f107 0308 	add.w	r3, r7, #8
 801069c:	4619      	mov	r1, r3
 801069e:	6878      	ldr	r0, [r7, #4]
 80106a0:	f7ff fef2 	bl	8010488 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80106a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80106a8:	2137      	movs	r1, #55	; 0x37
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f000 f8ca 	bl	8010844 <SDMMC_GetCmdResp1>
 80106b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106b2:	69fb      	ldr	r3, [r7, #28]
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	3720      	adds	r7, #32
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}

080106bc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b088      	sub	sp, #32
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80106cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80106d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80106d2:	2329      	movs	r3, #41	; 0x29
 80106d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80106d6:	2340      	movs	r3, #64	; 0x40
 80106d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106da:	2300      	movs	r3, #0
 80106dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106e4:	f107 0308 	add.w	r3, r7, #8
 80106e8:	4619      	mov	r1, r3
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f7ff fecc 	bl	8010488 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f000 f9dd 	bl	8010ab0 <SDMMC_GetCmdResp3>
 80106f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106f8:	69fb      	ldr	r3, [r7, #28]
}
 80106fa:	4618      	mov	r0, r3
 80106fc:	3720      	adds	r7, #32
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}

08010702 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010702:	b580      	push	{r7, lr}
 8010704:	b088      	sub	sp, #32
 8010706:	af00      	add	r7, sp, #0
 8010708:	6078      	str	r0, [r7, #4]
 801070a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010710:	2306      	movs	r3, #6
 8010712:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010714:	2340      	movs	r3, #64	; 0x40
 8010716:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010718:	2300      	movs	r3, #0
 801071a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801071c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010720:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010722:	f107 0308 	add.w	r3, r7, #8
 8010726:	4619      	mov	r1, r3
 8010728:	6878      	ldr	r0, [r7, #4]
 801072a:	f7ff fead 	bl	8010488 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 801072e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010732:	2106      	movs	r1, #6
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f000 f885 	bl	8010844 <SDMMC_GetCmdResp1>
 801073a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801073c:	69fb      	ldr	r3, [r7, #28]
}
 801073e:	4618      	mov	r0, r3
 8010740:	3720      	adds	r7, #32
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}

08010746 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010746:	b580      	push	{r7, lr}
 8010748:	b088      	sub	sp, #32
 801074a:	af00      	add	r7, sp, #0
 801074c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801074e:	2300      	movs	r3, #0
 8010750:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010752:	2333      	movs	r3, #51	; 0x33
 8010754:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010756:	2340      	movs	r3, #64	; 0x40
 8010758:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801075a:	2300      	movs	r3, #0
 801075c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801075e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010762:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010764:	f107 0308 	add.w	r3, r7, #8
 8010768:	4619      	mov	r1, r3
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	f7ff fe8c 	bl	8010488 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010770:	f241 3288 	movw	r2, #5000	; 0x1388
 8010774:	2133      	movs	r1, #51	; 0x33
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f000 f864 	bl	8010844 <SDMMC_GetCmdResp1>
 801077c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801077e:	69fb      	ldr	r3, [r7, #28]
}
 8010780:	4618      	mov	r0, r3
 8010782:	3720      	adds	r7, #32
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}

08010788 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b088      	sub	sp, #32
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010790:	2300      	movs	r3, #0
 8010792:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010794:	2302      	movs	r3, #2
 8010796:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010798:	23c0      	movs	r3, #192	; 0xc0
 801079a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801079c:	2300      	movs	r3, #0
 801079e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80107a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80107a6:	f107 0308 	add.w	r3, r7, #8
 80107aa:	4619      	mov	r1, r3
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f7ff fe6b 	bl	8010488 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f000 f934 	bl	8010a20 <SDMMC_GetCmdResp2>
 80107b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107ba:	69fb      	ldr	r3, [r7, #28]
}
 80107bc:	4618      	mov	r0, r3
 80107be:	3720      	adds	r7, #32
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}

080107c4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b088      	sub	sp, #32
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
 80107cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80107d2:	2309      	movs	r3, #9
 80107d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80107d6:	23c0      	movs	r3, #192	; 0xc0
 80107d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80107da:	2300      	movs	r3, #0
 80107dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80107de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80107e4:	f107 0308 	add.w	r3, r7, #8
 80107e8:	4619      	mov	r1, r3
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f7ff fe4c 	bl	8010488 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f000 f915 	bl	8010a20 <SDMMC_GetCmdResp2>
 80107f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107f8:	69fb      	ldr	r3, [r7, #28]
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3720      	adds	r7, #32
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}

08010802 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010802:	b580      	push	{r7, lr}
 8010804:	b088      	sub	sp, #32
 8010806:	af00      	add	r7, sp, #0
 8010808:	6078      	str	r0, [r7, #4]
 801080a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801080c:	2300      	movs	r3, #0
 801080e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010810:	2303      	movs	r3, #3
 8010812:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010814:	2340      	movs	r3, #64	; 0x40
 8010816:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010818:	2300      	movs	r3, #0
 801081a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801081c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010820:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010822:	f107 0308 	add.w	r3, r7, #8
 8010826:	4619      	mov	r1, r3
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f7ff fe2d 	bl	8010488 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801082e:	683a      	ldr	r2, [r7, #0]
 8010830:	2103      	movs	r1, #3
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f000 f97a 	bl	8010b2c <SDMMC_GetCmdResp6>
 8010838:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801083a:	69fb      	ldr	r3, [r7, #28]
}
 801083c:	4618      	mov	r0, r3
 801083e:	3720      	adds	r7, #32
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}

08010844 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b088      	sub	sp, #32
 8010848:	af00      	add	r7, sp, #0
 801084a:	60f8      	str	r0, [r7, #12]
 801084c:	460b      	mov	r3, r1
 801084e:	607a      	str	r2, [r7, #4]
 8010850:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010852:	4b70      	ldr	r3, [pc, #448]	; (8010a14 <SDMMC_GetCmdResp1+0x1d0>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	4a70      	ldr	r2, [pc, #448]	; (8010a18 <SDMMC_GetCmdResp1+0x1d4>)
 8010858:	fba2 2303 	umull	r2, r3, r2, r3
 801085c:	0a5a      	lsrs	r2, r3, #9
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	fb02 f303 	mul.w	r3, r2, r3
 8010864:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010866:	69fb      	ldr	r3, [r7, #28]
 8010868:	1e5a      	subs	r2, r3, #1
 801086a:	61fa      	str	r2, [r7, #28]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d102      	bne.n	8010876 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010870:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010874:	e0c9      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801087a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801087c:	69bb      	ldr	r3, [r7, #24]
 801087e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010882:	2b00      	cmp	r3, #0
 8010884:	d0ef      	beq.n	8010866 <SDMMC_GetCmdResp1+0x22>
 8010886:	69bb      	ldr	r3, [r7, #24]
 8010888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801088c:	2b00      	cmp	r3, #0
 801088e:	d1ea      	bne.n	8010866 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010894:	f003 0304 	and.w	r3, r3, #4
 8010898:	2b00      	cmp	r3, #0
 801089a:	d004      	beq.n	80108a6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2204      	movs	r2, #4
 80108a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80108a2:	2304      	movs	r3, #4
 80108a4:	e0b1      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108aa:	f003 0301 	and.w	r3, r3, #1
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d004      	beq.n	80108bc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	2201      	movs	r2, #1
 80108b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80108b8:	2301      	movs	r3, #1
 80108ba:	e0a6      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	22c5      	movs	r2, #197	; 0xc5
 80108c0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80108c2:	68f8      	ldr	r0, [r7, #12]
 80108c4:	f7ff fe0a 	bl	80104dc <SDIO_GetCommandResponse>
 80108c8:	4603      	mov	r3, r0
 80108ca:	461a      	mov	r2, r3
 80108cc:	7afb      	ldrb	r3, [r7, #11]
 80108ce:	4293      	cmp	r3, r2
 80108d0:	d001      	beq.n	80108d6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80108d2:	2301      	movs	r3, #1
 80108d4:	e099      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80108d6:	2100      	movs	r1, #0
 80108d8:	68f8      	ldr	r0, [r7, #12]
 80108da:	f7ff fe0c 	bl	80104f6 <SDIO_GetResponse>
 80108de:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80108e0:	697a      	ldr	r2, [r7, #20]
 80108e2:	4b4e      	ldr	r3, [pc, #312]	; (8010a1c <SDMMC_GetCmdResp1+0x1d8>)
 80108e4:	4013      	ands	r3, r2
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d101      	bne.n	80108ee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80108ea:	2300      	movs	r3, #0
 80108ec:	e08d      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	da02      	bge.n	80108fa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80108f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80108f8:	e087      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80108fa:	697b      	ldr	r3, [r7, #20]
 80108fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010900:	2b00      	cmp	r3, #0
 8010902:	d001      	beq.n	8010908 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010904:	2340      	movs	r3, #64	; 0x40
 8010906:	e080      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801090e:	2b00      	cmp	r3, #0
 8010910:	d001      	beq.n	8010916 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010912:	2380      	movs	r3, #128	; 0x80
 8010914:	e079      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801091c:	2b00      	cmp	r3, #0
 801091e:	d002      	beq.n	8010926 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010924:	e071      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801092c:	2b00      	cmp	r3, #0
 801092e:	d002      	beq.n	8010936 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010934:	e069      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801093c:	2b00      	cmp	r3, #0
 801093e:	d002      	beq.n	8010946 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010944:	e061      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801094c:	2b00      	cmp	r3, #0
 801094e:	d002      	beq.n	8010956 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010950:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010954:	e059      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801095c:	2b00      	cmp	r3, #0
 801095e:	d002      	beq.n	8010966 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010964:	e051      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801096c:	2b00      	cmp	r3, #0
 801096e:	d002      	beq.n	8010976 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010974:	e049      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801097c:	2b00      	cmp	r3, #0
 801097e:	d002      	beq.n	8010986 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010980:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010984:	e041      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801098c:	2b00      	cmp	r3, #0
 801098e:	d002      	beq.n	8010996 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010994:	e039      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801099c:	2b00      	cmp	r3, #0
 801099e:	d002      	beq.n	80109a6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80109a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80109a4:	e031      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80109a6:	697b      	ldr	r3, [r7, #20]
 80109a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d002      	beq.n	80109b6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80109b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80109b4:	e029      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d002      	beq.n	80109c6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80109c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80109c4:	e021      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80109c6:	697b      	ldr	r3, [r7, #20]
 80109c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d002      	beq.n	80109d6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80109d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80109d4:	e019      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d002      	beq.n	80109e6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80109e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80109e4:	e011      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d002      	beq.n	80109f6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80109f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80109f4:	e009      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	f003 0308 	and.w	r3, r3, #8
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d002      	beq.n	8010a06 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010a00:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010a04:	e001      	b.n	8010a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010a06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	3720      	adds	r7, #32
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}
 8010a12:	bf00      	nop
 8010a14:	20000004 	.word	0x20000004
 8010a18:	10624dd3 	.word	0x10624dd3
 8010a1c:	fdffe008 	.word	0xfdffe008

08010a20 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010a20:	b480      	push	{r7}
 8010a22:	b085      	sub	sp, #20
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a28:	4b1f      	ldr	r3, [pc, #124]	; (8010aa8 <SDMMC_GetCmdResp2+0x88>)
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	4a1f      	ldr	r2, [pc, #124]	; (8010aac <SDMMC_GetCmdResp2+0x8c>)
 8010a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8010a32:	0a5b      	lsrs	r3, r3, #9
 8010a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a38:	fb02 f303 	mul.w	r3, r2, r3
 8010a3c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	1e5a      	subs	r2, r3, #1
 8010a42:	60fa      	str	r2, [r7, #12]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d102      	bne.n	8010a4e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a4c:	e026      	b.n	8010a9c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a52:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d0ef      	beq.n	8010a3e <SDMMC_GetCmdResp2+0x1e>
 8010a5e:	68bb      	ldr	r3, [r7, #8]
 8010a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d1ea      	bne.n	8010a3e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a6c:	f003 0304 	and.w	r3, r3, #4
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d004      	beq.n	8010a7e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2204      	movs	r2, #4
 8010a78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a7a:	2304      	movs	r3, #4
 8010a7c:	e00e      	b.n	8010a9c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a82:	f003 0301 	and.w	r3, r3, #1
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d004      	beq.n	8010a94 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2201      	movs	r2, #1
 8010a8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a90:	2301      	movs	r3, #1
 8010a92:	e003      	b.n	8010a9c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	22c5      	movs	r2, #197	; 0xc5
 8010a98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a9a:	2300      	movs	r3, #0
}
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3714      	adds	r7, #20
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa6:	4770      	bx	lr
 8010aa8:	20000004 	.word	0x20000004
 8010aac:	10624dd3 	.word	0x10624dd3

08010ab0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b085      	sub	sp, #20
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010ab8:	4b1a      	ldr	r3, [pc, #104]	; (8010b24 <SDMMC_GetCmdResp3+0x74>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	4a1a      	ldr	r2, [pc, #104]	; (8010b28 <SDMMC_GetCmdResp3+0x78>)
 8010abe:	fba2 2303 	umull	r2, r3, r2, r3
 8010ac2:	0a5b      	lsrs	r3, r3, #9
 8010ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ac8:	fb02 f303 	mul.w	r3, r2, r3
 8010acc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	1e5a      	subs	r2, r3, #1
 8010ad2:	60fa      	str	r2, [r7, #12]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d102      	bne.n	8010ade <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ad8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010adc:	e01b      	b.n	8010b16 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ae2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d0ef      	beq.n	8010ace <SDMMC_GetCmdResp3+0x1e>
 8010aee:	68bb      	ldr	r3, [r7, #8]
 8010af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d1ea      	bne.n	8010ace <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010afc:	f003 0304 	and.w	r3, r3, #4
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d004      	beq.n	8010b0e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2204      	movs	r2, #4
 8010b08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b0a:	2304      	movs	r3, #4
 8010b0c:	e003      	b.n	8010b16 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	22c5      	movs	r2, #197	; 0xc5
 8010b12:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010b14:	2300      	movs	r3, #0
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	3714      	adds	r7, #20
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b20:	4770      	bx	lr
 8010b22:	bf00      	nop
 8010b24:	20000004 	.word	0x20000004
 8010b28:	10624dd3 	.word	0x10624dd3

08010b2c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b088      	sub	sp, #32
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	60f8      	str	r0, [r7, #12]
 8010b34:	460b      	mov	r3, r1
 8010b36:	607a      	str	r2, [r7, #4]
 8010b38:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010b3a:	4b35      	ldr	r3, [pc, #212]	; (8010c10 <SDMMC_GetCmdResp6+0xe4>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	4a35      	ldr	r2, [pc, #212]	; (8010c14 <SDMMC_GetCmdResp6+0xe8>)
 8010b40:	fba2 2303 	umull	r2, r3, r2, r3
 8010b44:	0a5b      	lsrs	r3, r3, #9
 8010b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b4a:	fb02 f303 	mul.w	r3, r2, r3
 8010b4e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	1e5a      	subs	r2, r3, #1
 8010b54:	61fa      	str	r2, [r7, #28]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d102      	bne.n	8010b60 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b5e:	e052      	b.n	8010c06 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b64:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b66:	69bb      	ldr	r3, [r7, #24]
 8010b68:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d0ef      	beq.n	8010b50 <SDMMC_GetCmdResp6+0x24>
 8010b70:	69bb      	ldr	r3, [r7, #24]
 8010b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d1ea      	bne.n	8010b50 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b7e:	f003 0304 	and.w	r3, r3, #4
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d004      	beq.n	8010b90 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	2204      	movs	r2, #4
 8010b8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b8c:	2304      	movs	r3, #4
 8010b8e:	e03a      	b.n	8010c06 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b94:	f003 0301 	and.w	r3, r3, #1
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d004      	beq.n	8010ba6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	2201      	movs	r2, #1
 8010ba0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ba2:	2301      	movs	r3, #1
 8010ba4:	e02f      	b.n	8010c06 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010ba6:	68f8      	ldr	r0, [r7, #12]
 8010ba8:	f7ff fc98 	bl	80104dc <SDIO_GetCommandResponse>
 8010bac:	4603      	mov	r3, r0
 8010bae:	461a      	mov	r2, r3
 8010bb0:	7afb      	ldrb	r3, [r7, #11]
 8010bb2:	4293      	cmp	r3, r2
 8010bb4:	d001      	beq.n	8010bba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	e025      	b.n	8010c06 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	22c5      	movs	r2, #197	; 0xc5
 8010bbe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010bc0:	2100      	movs	r1, #0
 8010bc2:	68f8      	ldr	r0, [r7, #12]
 8010bc4:	f7ff fc97 	bl	80104f6 <SDIO_GetResponse>
 8010bc8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d106      	bne.n	8010be2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	0c1b      	lsrs	r3, r3, #16
 8010bd8:	b29a      	uxth	r2, r3
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010bde:	2300      	movs	r3, #0
 8010be0:	e011      	b.n	8010c06 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d002      	beq.n	8010bf2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010bf0:	e009      	b.n	8010c06 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d002      	beq.n	8010c02 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c00:	e001      	b.n	8010c06 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010c02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3720      	adds	r7, #32
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}
 8010c0e:	bf00      	nop
 8010c10:	20000004 	.word	0x20000004
 8010c14:	10624dd3 	.word	0x10624dd3

08010c18 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010c18:	b480      	push	{r7}
 8010c1a:	b085      	sub	sp, #20
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010c20:	4b22      	ldr	r3, [pc, #136]	; (8010cac <SDMMC_GetCmdResp7+0x94>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	4a22      	ldr	r2, [pc, #136]	; (8010cb0 <SDMMC_GetCmdResp7+0x98>)
 8010c26:	fba2 2303 	umull	r2, r3, r2, r3
 8010c2a:	0a5b      	lsrs	r3, r3, #9
 8010c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c30:	fb02 f303 	mul.w	r3, r2, r3
 8010c34:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	1e5a      	subs	r2, r3, #1
 8010c3a:	60fa      	str	r2, [r7, #12]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d102      	bne.n	8010c46 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c44:	e02c      	b.n	8010ca0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c4a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d0ef      	beq.n	8010c36 <SDMMC_GetCmdResp7+0x1e>
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d1ea      	bne.n	8010c36 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c64:	f003 0304 	and.w	r3, r3, #4
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d004      	beq.n	8010c76 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2204      	movs	r2, #4
 8010c70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c72:	2304      	movs	r3, #4
 8010c74:	e014      	b.n	8010ca0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c7a:	f003 0301 	and.w	r3, r3, #1
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d004      	beq.n	8010c8c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2201      	movs	r2, #1
 8010c86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c88:	2301      	movs	r3, #1
 8010c8a:	e009      	b.n	8010ca0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d002      	beq.n	8010c9e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2240      	movs	r2, #64	; 0x40
 8010c9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010c9e:	2300      	movs	r3, #0
  
}
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3714      	adds	r7, #20
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010caa:	4770      	bx	lr
 8010cac:	20000004 	.word	0x20000004
 8010cb0:	10624dd3 	.word	0x10624dd3

08010cb4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010cb4:	b480      	push	{r7}
 8010cb6:	b085      	sub	sp, #20
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010cbc:	4b11      	ldr	r3, [pc, #68]	; (8010d04 <SDMMC_GetCmdError+0x50>)
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	4a11      	ldr	r2, [pc, #68]	; (8010d08 <SDMMC_GetCmdError+0x54>)
 8010cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8010cc6:	0a5b      	lsrs	r3, r3, #9
 8010cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ccc:	fb02 f303 	mul.w	r3, r2, r3
 8010cd0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	1e5a      	subs	r2, r3, #1
 8010cd6:	60fa      	str	r2, [r7, #12]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d102      	bne.n	8010ce2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010cdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010ce0:	e009      	b.n	8010cf6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d0f1      	beq.n	8010cd2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	22c5      	movs	r2, #197	; 0xc5
 8010cf2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010cf4:	2300      	movs	r3, #0
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3714      	adds	r7, #20
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d00:	4770      	bx	lr
 8010d02:	bf00      	nop
 8010d04:	20000004 	.word	0x20000004
 8010d08:	10624dd3 	.word	0x10624dd3

08010d0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b087      	sub	sp, #28
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	60f8      	str	r0, [r7, #12]
 8010d14:	60b9      	str	r1, [r7, #8]
 8010d16:	4613      	mov	r3, r2
 8010d18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010d1a:	79fb      	ldrb	r3, [r7, #7]
 8010d1c:	2b02      	cmp	r3, #2
 8010d1e:	d165      	bne.n	8010dec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010d20:	68bb      	ldr	r3, [r7, #8]
 8010d22:	4a41      	ldr	r2, [pc, #260]	; (8010e28 <USB_SetTurnaroundTime+0x11c>)
 8010d24:	4293      	cmp	r3, r2
 8010d26:	d906      	bls.n	8010d36 <USB_SetTurnaroundTime+0x2a>
 8010d28:	68bb      	ldr	r3, [r7, #8]
 8010d2a:	4a40      	ldr	r2, [pc, #256]	; (8010e2c <USB_SetTurnaroundTime+0x120>)
 8010d2c:	4293      	cmp	r3, r2
 8010d2e:	d202      	bcs.n	8010d36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010d30:	230f      	movs	r3, #15
 8010d32:	617b      	str	r3, [r7, #20]
 8010d34:	e062      	b.n	8010dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	4a3c      	ldr	r2, [pc, #240]	; (8010e2c <USB_SetTurnaroundTime+0x120>)
 8010d3a:	4293      	cmp	r3, r2
 8010d3c:	d306      	bcc.n	8010d4c <USB_SetTurnaroundTime+0x40>
 8010d3e:	68bb      	ldr	r3, [r7, #8]
 8010d40:	4a3b      	ldr	r2, [pc, #236]	; (8010e30 <USB_SetTurnaroundTime+0x124>)
 8010d42:	4293      	cmp	r3, r2
 8010d44:	d202      	bcs.n	8010d4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010d46:	230e      	movs	r3, #14
 8010d48:	617b      	str	r3, [r7, #20]
 8010d4a:	e057      	b.n	8010dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	4a38      	ldr	r2, [pc, #224]	; (8010e30 <USB_SetTurnaroundTime+0x124>)
 8010d50:	4293      	cmp	r3, r2
 8010d52:	d306      	bcc.n	8010d62 <USB_SetTurnaroundTime+0x56>
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	4a37      	ldr	r2, [pc, #220]	; (8010e34 <USB_SetTurnaroundTime+0x128>)
 8010d58:	4293      	cmp	r3, r2
 8010d5a:	d202      	bcs.n	8010d62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010d5c:	230d      	movs	r3, #13
 8010d5e:	617b      	str	r3, [r7, #20]
 8010d60:	e04c      	b.n	8010dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010d62:	68bb      	ldr	r3, [r7, #8]
 8010d64:	4a33      	ldr	r2, [pc, #204]	; (8010e34 <USB_SetTurnaroundTime+0x128>)
 8010d66:	4293      	cmp	r3, r2
 8010d68:	d306      	bcc.n	8010d78 <USB_SetTurnaroundTime+0x6c>
 8010d6a:	68bb      	ldr	r3, [r7, #8]
 8010d6c:	4a32      	ldr	r2, [pc, #200]	; (8010e38 <USB_SetTurnaroundTime+0x12c>)
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d802      	bhi.n	8010d78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010d72:	230c      	movs	r3, #12
 8010d74:	617b      	str	r3, [r7, #20]
 8010d76:	e041      	b.n	8010dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	4a2f      	ldr	r2, [pc, #188]	; (8010e38 <USB_SetTurnaroundTime+0x12c>)
 8010d7c:	4293      	cmp	r3, r2
 8010d7e:	d906      	bls.n	8010d8e <USB_SetTurnaroundTime+0x82>
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	4a2e      	ldr	r2, [pc, #184]	; (8010e3c <USB_SetTurnaroundTime+0x130>)
 8010d84:	4293      	cmp	r3, r2
 8010d86:	d802      	bhi.n	8010d8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010d88:	230b      	movs	r3, #11
 8010d8a:	617b      	str	r3, [r7, #20]
 8010d8c:	e036      	b.n	8010dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010d8e:	68bb      	ldr	r3, [r7, #8]
 8010d90:	4a2a      	ldr	r2, [pc, #168]	; (8010e3c <USB_SetTurnaroundTime+0x130>)
 8010d92:	4293      	cmp	r3, r2
 8010d94:	d906      	bls.n	8010da4 <USB_SetTurnaroundTime+0x98>
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	4a29      	ldr	r2, [pc, #164]	; (8010e40 <USB_SetTurnaroundTime+0x134>)
 8010d9a:	4293      	cmp	r3, r2
 8010d9c:	d802      	bhi.n	8010da4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010d9e:	230a      	movs	r3, #10
 8010da0:	617b      	str	r3, [r7, #20]
 8010da2:	e02b      	b.n	8010dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010da4:	68bb      	ldr	r3, [r7, #8]
 8010da6:	4a26      	ldr	r2, [pc, #152]	; (8010e40 <USB_SetTurnaroundTime+0x134>)
 8010da8:	4293      	cmp	r3, r2
 8010daa:	d906      	bls.n	8010dba <USB_SetTurnaroundTime+0xae>
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	4a25      	ldr	r2, [pc, #148]	; (8010e44 <USB_SetTurnaroundTime+0x138>)
 8010db0:	4293      	cmp	r3, r2
 8010db2:	d202      	bcs.n	8010dba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010db4:	2309      	movs	r3, #9
 8010db6:	617b      	str	r3, [r7, #20]
 8010db8:	e020      	b.n	8010dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	4a21      	ldr	r2, [pc, #132]	; (8010e44 <USB_SetTurnaroundTime+0x138>)
 8010dbe:	4293      	cmp	r3, r2
 8010dc0:	d306      	bcc.n	8010dd0 <USB_SetTurnaroundTime+0xc4>
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	4a20      	ldr	r2, [pc, #128]	; (8010e48 <USB_SetTurnaroundTime+0x13c>)
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	d802      	bhi.n	8010dd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010dca:	2308      	movs	r3, #8
 8010dcc:	617b      	str	r3, [r7, #20]
 8010dce:	e015      	b.n	8010dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	4a1d      	ldr	r2, [pc, #116]	; (8010e48 <USB_SetTurnaroundTime+0x13c>)
 8010dd4:	4293      	cmp	r3, r2
 8010dd6:	d906      	bls.n	8010de6 <USB_SetTurnaroundTime+0xda>
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	4a1c      	ldr	r2, [pc, #112]	; (8010e4c <USB_SetTurnaroundTime+0x140>)
 8010ddc:	4293      	cmp	r3, r2
 8010dde:	d202      	bcs.n	8010de6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010de0:	2307      	movs	r3, #7
 8010de2:	617b      	str	r3, [r7, #20]
 8010de4:	e00a      	b.n	8010dfc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010de6:	2306      	movs	r3, #6
 8010de8:	617b      	str	r3, [r7, #20]
 8010dea:	e007      	b.n	8010dfc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010dec:	79fb      	ldrb	r3, [r7, #7]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d102      	bne.n	8010df8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010df2:	2309      	movs	r3, #9
 8010df4:	617b      	str	r3, [r7, #20]
 8010df6:	e001      	b.n	8010dfc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010df8:	2309      	movs	r3, #9
 8010dfa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	68db      	ldr	r3, [r3, #12]
 8010e00:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	68da      	ldr	r2, [r3, #12]
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	029b      	lsls	r3, r3, #10
 8010e10:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010e14:	431a      	orrs	r2, r3
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010e1a:	2300      	movs	r3, #0
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	371c      	adds	r7, #28
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr
 8010e28:	00d8acbf 	.word	0x00d8acbf
 8010e2c:	00e4e1c0 	.word	0x00e4e1c0
 8010e30:	00f42400 	.word	0x00f42400
 8010e34:	01067380 	.word	0x01067380
 8010e38:	011a499f 	.word	0x011a499f
 8010e3c:	01312cff 	.word	0x01312cff
 8010e40:	014ca43f 	.word	0x014ca43f
 8010e44:	016e3600 	.word	0x016e3600
 8010e48:	01a6ab1f 	.word	0x01a6ab1f
 8010e4c:	01e84800 	.word	0x01e84800

08010e50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010e50:	b480      	push	{r7}
 8010e52:	b085      	sub	sp, #20
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
 8010e58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	3301      	adds	r3, #1
 8010e62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	4a13      	ldr	r2, [pc, #76]	; (8010eb4 <USB_FlushTxFifo+0x64>)
 8010e68:	4293      	cmp	r3, r2
 8010e6a:	d901      	bls.n	8010e70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010e6c:	2303      	movs	r3, #3
 8010e6e:	e01b      	b.n	8010ea8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	691b      	ldr	r3, [r3, #16]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	daf2      	bge.n	8010e5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	019b      	lsls	r3, r3, #6
 8010e80:	f043 0220 	orr.w	r2, r3, #32
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	4a08      	ldr	r2, [pc, #32]	; (8010eb4 <USB_FlushTxFifo+0x64>)
 8010e92:	4293      	cmp	r3, r2
 8010e94:	d901      	bls.n	8010e9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010e96:	2303      	movs	r3, #3
 8010e98:	e006      	b.n	8010ea8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	691b      	ldr	r3, [r3, #16]
 8010e9e:	f003 0320 	and.w	r3, r3, #32
 8010ea2:	2b20      	cmp	r3, #32
 8010ea4:	d0f0      	beq.n	8010e88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010ea6:	2300      	movs	r3, #0
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3714      	adds	r7, #20
 8010eac:	46bd      	mov	sp, r7
 8010eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb2:	4770      	bx	lr
 8010eb4:	00030d40 	.word	0x00030d40

08010eb8 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	b087      	sub	sp, #28
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010ec4:	693b      	ldr	r3, [r7, #16]
 8010ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010eca:	689b      	ldr	r3, [r3, #8]
 8010ecc:	f003 0306 	and.w	r3, r3, #6
 8010ed0:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d102      	bne.n	8010ede <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	75fb      	strb	r3, [r7, #23]
 8010edc:	e00a      	b.n	8010ef4 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	2b02      	cmp	r3, #2
 8010ee2:	d002      	beq.n	8010eea <USB_GetDevSpeed+0x32>
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	2b06      	cmp	r3, #6
 8010ee8:	d102      	bne.n	8010ef0 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010eea:	2302      	movs	r3, #2
 8010eec:	75fb      	strb	r3, [r7, #23]
 8010eee:	e001      	b.n	8010ef4 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010ef0:	230f      	movs	r3, #15
 8010ef2:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	371c      	adds	r7, #28
 8010efa:	46bd      	mov	sp, r7
 8010efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f00:	4770      	bx	lr

08010f02 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010f02:	b480      	push	{r7}
 8010f04:	b085      	sub	sp, #20
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	6078      	str	r0, [r7, #4]
 8010f0a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010f16:	683b      	ldr	r3, [r7, #0]
 8010f18:	785b      	ldrb	r3, [r3, #1]
 8010f1a:	2b01      	cmp	r3, #1
 8010f1c:	d13a      	bne.n	8010f94 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f24:	69da      	ldr	r2, [r3, #28]
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	781b      	ldrb	r3, [r3, #0]
 8010f2a:	f003 030f 	and.w	r3, r3, #15
 8010f2e:	2101      	movs	r1, #1
 8010f30:	fa01 f303 	lsl.w	r3, r1, r3
 8010f34:	b29b      	uxth	r3, r3
 8010f36:	68f9      	ldr	r1, [r7, #12]
 8010f38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010f3c:	4313      	orrs	r3, r2
 8010f3e:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	015a      	lsls	r2, r3, #5
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	4413      	add	r3, r2
 8010f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d155      	bne.n	8011002 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	015a      	lsls	r2, r3, #5
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	4413      	add	r3, r2
 8010f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f62:	681a      	ldr	r2, [r3, #0]
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	68db      	ldr	r3, [r3, #12]
 8010f68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	791b      	ldrb	r3, [r3, #4]
 8010f70:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010f72:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	059b      	lsls	r3, r3, #22
 8010f78:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010f7a:	4313      	orrs	r3, r2
 8010f7c:	68ba      	ldr	r2, [r7, #8]
 8010f7e:	0151      	lsls	r1, r2, #5
 8010f80:	68fa      	ldr	r2, [r7, #12]
 8010f82:	440a      	add	r2, r1
 8010f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f90:	6013      	str	r3, [r2, #0]
 8010f92:	e036      	b.n	8011002 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f9a:	69da      	ldr	r2, [r3, #28]
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	781b      	ldrb	r3, [r3, #0]
 8010fa0:	f003 030f 	and.w	r3, r3, #15
 8010fa4:	2101      	movs	r1, #1
 8010fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8010faa:	041b      	lsls	r3, r3, #16
 8010fac:	68f9      	ldr	r1, [r7, #12]
 8010fae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010fb2:	4313      	orrs	r3, r2
 8010fb4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	015a      	lsls	r2, r3, #5
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	4413      	add	r3, r2
 8010fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d11a      	bne.n	8011002 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	015a      	lsls	r2, r3, #5
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	4413      	add	r3, r2
 8010fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fd8:	681a      	ldr	r2, [r3, #0]
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	68db      	ldr	r3, [r3, #12]
 8010fde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	791b      	ldrb	r3, [r3, #4]
 8010fe6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010fe8:	430b      	orrs	r3, r1
 8010fea:	4313      	orrs	r3, r2
 8010fec:	68ba      	ldr	r2, [r7, #8]
 8010fee:	0151      	lsls	r1, r2, #5
 8010ff0:	68fa      	ldr	r2, [r7, #12]
 8010ff2:	440a      	add	r2, r1
 8010ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011000:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011002:	2300      	movs	r3, #0
}
 8011004:	4618      	mov	r0, r3
 8011006:	3714      	adds	r7, #20
 8011008:	46bd      	mov	sp, r7
 801100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100e:	4770      	bx	lr

08011010 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b08a      	sub	sp, #40	; 0x28
 8011014:	af02      	add	r7, sp, #8
 8011016:	60f8      	str	r0, [r7, #12]
 8011018:	60b9      	str	r1, [r7, #8]
 801101a:	4613      	mov	r3, r2
 801101c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	781b      	ldrb	r3, [r3, #0]
 8011026:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	785b      	ldrb	r3, [r3, #1]
 801102c:	2b01      	cmp	r3, #1
 801102e:	f040 815c 	bne.w	80112ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	699b      	ldr	r3, [r3, #24]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d132      	bne.n	80110a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801103a:	69bb      	ldr	r3, [r7, #24]
 801103c:	015a      	lsls	r2, r3, #5
 801103e:	69fb      	ldr	r3, [r7, #28]
 8011040:	4413      	add	r3, r2
 8011042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011046:	691b      	ldr	r3, [r3, #16]
 8011048:	69ba      	ldr	r2, [r7, #24]
 801104a:	0151      	lsls	r1, r2, #5
 801104c:	69fa      	ldr	r2, [r7, #28]
 801104e:	440a      	add	r2, r1
 8011050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011054:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011058:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801105c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801105e:	69bb      	ldr	r3, [r7, #24]
 8011060:	015a      	lsls	r2, r3, #5
 8011062:	69fb      	ldr	r3, [r7, #28]
 8011064:	4413      	add	r3, r2
 8011066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801106a:	691b      	ldr	r3, [r3, #16]
 801106c:	69ba      	ldr	r2, [r7, #24]
 801106e:	0151      	lsls	r1, r2, #5
 8011070:	69fa      	ldr	r2, [r7, #28]
 8011072:	440a      	add	r2, r1
 8011074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011078:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801107c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801107e:	69bb      	ldr	r3, [r7, #24]
 8011080:	015a      	lsls	r2, r3, #5
 8011082:	69fb      	ldr	r3, [r7, #28]
 8011084:	4413      	add	r3, r2
 8011086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801108a:	691b      	ldr	r3, [r3, #16]
 801108c:	69ba      	ldr	r2, [r7, #24]
 801108e:	0151      	lsls	r1, r2, #5
 8011090:	69fa      	ldr	r2, [r7, #28]
 8011092:	440a      	add	r2, r1
 8011094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011098:	0cdb      	lsrs	r3, r3, #19
 801109a:	04db      	lsls	r3, r3, #19
 801109c:	6113      	str	r3, [r2, #16]
 801109e:	e074      	b.n	801118a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80110a0:	69bb      	ldr	r3, [r7, #24]
 80110a2:	015a      	lsls	r2, r3, #5
 80110a4:	69fb      	ldr	r3, [r7, #28]
 80110a6:	4413      	add	r3, r2
 80110a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110ac:	691b      	ldr	r3, [r3, #16]
 80110ae:	69ba      	ldr	r2, [r7, #24]
 80110b0:	0151      	lsls	r1, r2, #5
 80110b2:	69fa      	ldr	r2, [r7, #28]
 80110b4:	440a      	add	r2, r1
 80110b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80110ba:	0cdb      	lsrs	r3, r3, #19
 80110bc:	04db      	lsls	r3, r3, #19
 80110be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80110c0:	69bb      	ldr	r3, [r7, #24]
 80110c2:	015a      	lsls	r2, r3, #5
 80110c4:	69fb      	ldr	r3, [r7, #28]
 80110c6:	4413      	add	r3, r2
 80110c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110cc:	691b      	ldr	r3, [r3, #16]
 80110ce:	69ba      	ldr	r2, [r7, #24]
 80110d0:	0151      	lsls	r1, r2, #5
 80110d2:	69fa      	ldr	r2, [r7, #28]
 80110d4:	440a      	add	r2, r1
 80110d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80110da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80110de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80110e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80110e4:	69bb      	ldr	r3, [r7, #24]
 80110e6:	015a      	lsls	r2, r3, #5
 80110e8:	69fb      	ldr	r3, [r7, #28]
 80110ea:	4413      	add	r3, r2
 80110ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110f0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80110f2:	68bb      	ldr	r3, [r7, #8]
 80110f4:	6999      	ldr	r1, [r3, #24]
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	68db      	ldr	r3, [r3, #12]
 80110fa:	440b      	add	r3, r1
 80110fc:	1e59      	subs	r1, r3, #1
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	68db      	ldr	r3, [r3, #12]
 8011102:	fbb1 f3f3 	udiv	r3, r1, r3
 8011106:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011108:	4b9d      	ldr	r3, [pc, #628]	; (8011380 <USB_EPStartXfer+0x370>)
 801110a:	400b      	ands	r3, r1
 801110c:	69b9      	ldr	r1, [r7, #24]
 801110e:	0148      	lsls	r0, r1, #5
 8011110:	69f9      	ldr	r1, [r7, #28]
 8011112:	4401      	add	r1, r0
 8011114:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011118:	4313      	orrs	r3, r2
 801111a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801111c:	69bb      	ldr	r3, [r7, #24]
 801111e:	015a      	lsls	r2, r3, #5
 8011120:	69fb      	ldr	r3, [r7, #28]
 8011122:	4413      	add	r3, r2
 8011124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011128:	691a      	ldr	r2, [r3, #16]
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	699b      	ldr	r3, [r3, #24]
 801112e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011132:	69b9      	ldr	r1, [r7, #24]
 8011134:	0148      	lsls	r0, r1, #5
 8011136:	69f9      	ldr	r1, [r7, #28]
 8011138:	4401      	add	r1, r0
 801113a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801113e:	4313      	orrs	r3, r2
 8011140:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	791b      	ldrb	r3, [r3, #4]
 8011146:	2b01      	cmp	r3, #1
 8011148:	d11f      	bne.n	801118a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801114a:	69bb      	ldr	r3, [r7, #24]
 801114c:	015a      	lsls	r2, r3, #5
 801114e:	69fb      	ldr	r3, [r7, #28]
 8011150:	4413      	add	r3, r2
 8011152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011156:	691b      	ldr	r3, [r3, #16]
 8011158:	69ba      	ldr	r2, [r7, #24]
 801115a:	0151      	lsls	r1, r2, #5
 801115c:	69fa      	ldr	r2, [r7, #28]
 801115e:	440a      	add	r2, r1
 8011160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011164:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011168:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801116a:	69bb      	ldr	r3, [r7, #24]
 801116c:	015a      	lsls	r2, r3, #5
 801116e:	69fb      	ldr	r3, [r7, #28]
 8011170:	4413      	add	r3, r2
 8011172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011176:	691b      	ldr	r3, [r3, #16]
 8011178:	69ba      	ldr	r2, [r7, #24]
 801117a:	0151      	lsls	r1, r2, #5
 801117c:	69fa      	ldr	r2, [r7, #28]
 801117e:	440a      	add	r2, r1
 8011180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011184:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011188:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801118a:	79fb      	ldrb	r3, [r7, #7]
 801118c:	2b01      	cmp	r3, #1
 801118e:	d14b      	bne.n	8011228 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011190:	68bb      	ldr	r3, [r7, #8]
 8011192:	695b      	ldr	r3, [r3, #20]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d009      	beq.n	80111ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011198:	69bb      	ldr	r3, [r7, #24]
 801119a:	015a      	lsls	r2, r3, #5
 801119c:	69fb      	ldr	r3, [r7, #28]
 801119e:	4413      	add	r3, r2
 80111a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111a4:	461a      	mov	r2, r3
 80111a6:	68bb      	ldr	r3, [r7, #8]
 80111a8:	695b      	ldr	r3, [r3, #20]
 80111aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	791b      	ldrb	r3, [r3, #4]
 80111b0:	2b01      	cmp	r3, #1
 80111b2:	d128      	bne.n	8011206 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80111b4:	69fb      	ldr	r3, [r7, #28]
 80111b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111ba:	689b      	ldr	r3, [r3, #8]
 80111bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d110      	bne.n	80111e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80111c4:	69bb      	ldr	r3, [r7, #24]
 80111c6:	015a      	lsls	r2, r3, #5
 80111c8:	69fb      	ldr	r3, [r7, #28]
 80111ca:	4413      	add	r3, r2
 80111cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	69ba      	ldr	r2, [r7, #24]
 80111d4:	0151      	lsls	r1, r2, #5
 80111d6:	69fa      	ldr	r2, [r7, #28]
 80111d8:	440a      	add	r2, r1
 80111da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80111de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80111e2:	6013      	str	r3, [r2, #0]
 80111e4:	e00f      	b.n	8011206 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80111e6:	69bb      	ldr	r3, [r7, #24]
 80111e8:	015a      	lsls	r2, r3, #5
 80111ea:	69fb      	ldr	r3, [r7, #28]
 80111ec:	4413      	add	r3, r2
 80111ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	69ba      	ldr	r2, [r7, #24]
 80111f6:	0151      	lsls	r1, r2, #5
 80111f8:	69fa      	ldr	r2, [r7, #28]
 80111fa:	440a      	add	r2, r1
 80111fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011204:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011206:	69bb      	ldr	r3, [r7, #24]
 8011208:	015a      	lsls	r2, r3, #5
 801120a:	69fb      	ldr	r3, [r7, #28]
 801120c:	4413      	add	r3, r2
 801120e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	69ba      	ldr	r2, [r7, #24]
 8011216:	0151      	lsls	r1, r2, #5
 8011218:	69fa      	ldr	r2, [r7, #28]
 801121a:	440a      	add	r2, r1
 801121c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011220:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011224:	6013      	str	r3, [r2, #0]
 8011226:	e133      	b.n	8011490 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011228:	69bb      	ldr	r3, [r7, #24]
 801122a:	015a      	lsls	r2, r3, #5
 801122c:	69fb      	ldr	r3, [r7, #28]
 801122e:	4413      	add	r3, r2
 8011230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	69ba      	ldr	r2, [r7, #24]
 8011238:	0151      	lsls	r1, r2, #5
 801123a:	69fa      	ldr	r2, [r7, #28]
 801123c:	440a      	add	r2, r1
 801123e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011242:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011246:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011248:	68bb      	ldr	r3, [r7, #8]
 801124a:	791b      	ldrb	r3, [r3, #4]
 801124c:	2b01      	cmp	r3, #1
 801124e:	d015      	beq.n	801127c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011250:	68bb      	ldr	r3, [r7, #8]
 8011252:	699b      	ldr	r3, [r3, #24]
 8011254:	2b00      	cmp	r3, #0
 8011256:	f000 811b 	beq.w	8011490 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801125a:	69fb      	ldr	r3, [r7, #28]
 801125c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	f003 030f 	and.w	r3, r3, #15
 801126a:	2101      	movs	r1, #1
 801126c:	fa01 f303 	lsl.w	r3, r1, r3
 8011270:	69f9      	ldr	r1, [r7, #28]
 8011272:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011276:	4313      	orrs	r3, r2
 8011278:	634b      	str	r3, [r1, #52]	; 0x34
 801127a:	e109      	b.n	8011490 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801127c:	69fb      	ldr	r3, [r7, #28]
 801127e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011282:	689b      	ldr	r3, [r3, #8]
 8011284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011288:	2b00      	cmp	r3, #0
 801128a:	d110      	bne.n	80112ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801128c:	69bb      	ldr	r3, [r7, #24]
 801128e:	015a      	lsls	r2, r3, #5
 8011290:	69fb      	ldr	r3, [r7, #28]
 8011292:	4413      	add	r3, r2
 8011294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	69ba      	ldr	r2, [r7, #24]
 801129c:	0151      	lsls	r1, r2, #5
 801129e:	69fa      	ldr	r2, [r7, #28]
 80112a0:	440a      	add	r2, r1
 80112a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80112a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80112aa:	6013      	str	r3, [r2, #0]
 80112ac:	e00f      	b.n	80112ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80112ae:	69bb      	ldr	r3, [r7, #24]
 80112b0:	015a      	lsls	r2, r3, #5
 80112b2:	69fb      	ldr	r3, [r7, #28]
 80112b4:	4413      	add	r3, r2
 80112b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	69ba      	ldr	r2, [r7, #24]
 80112be:	0151      	lsls	r1, r2, #5
 80112c0:	69fa      	ldr	r2, [r7, #28]
 80112c2:	440a      	add	r2, r1
 80112c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80112c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80112cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	6919      	ldr	r1, [r3, #16]
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	781a      	ldrb	r2, [r3, #0]
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	699b      	ldr	r3, [r3, #24]
 80112da:	b298      	uxth	r0, r3
 80112dc:	79fb      	ldrb	r3, [r7, #7]
 80112de:	9300      	str	r3, [sp, #0]
 80112e0:	4603      	mov	r3, r0
 80112e2:	68f8      	ldr	r0, [r7, #12]
 80112e4:	f000 fade 	bl	80118a4 <USB_WritePacket>
 80112e8:	e0d2      	b.n	8011490 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80112ea:	69bb      	ldr	r3, [r7, #24]
 80112ec:	015a      	lsls	r2, r3, #5
 80112ee:	69fb      	ldr	r3, [r7, #28]
 80112f0:	4413      	add	r3, r2
 80112f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112f6:	691b      	ldr	r3, [r3, #16]
 80112f8:	69ba      	ldr	r2, [r7, #24]
 80112fa:	0151      	lsls	r1, r2, #5
 80112fc:	69fa      	ldr	r2, [r7, #28]
 80112fe:	440a      	add	r2, r1
 8011300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011304:	0cdb      	lsrs	r3, r3, #19
 8011306:	04db      	lsls	r3, r3, #19
 8011308:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801130a:	69bb      	ldr	r3, [r7, #24]
 801130c:	015a      	lsls	r2, r3, #5
 801130e:	69fb      	ldr	r3, [r7, #28]
 8011310:	4413      	add	r3, r2
 8011312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011316:	691b      	ldr	r3, [r3, #16]
 8011318:	69ba      	ldr	r2, [r7, #24]
 801131a:	0151      	lsls	r1, r2, #5
 801131c:	69fa      	ldr	r2, [r7, #28]
 801131e:	440a      	add	r2, r1
 8011320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011324:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011328:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801132c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801132e:	68bb      	ldr	r3, [r7, #8]
 8011330:	699b      	ldr	r3, [r3, #24]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d126      	bne.n	8011384 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011336:	69bb      	ldr	r3, [r7, #24]
 8011338:	015a      	lsls	r2, r3, #5
 801133a:	69fb      	ldr	r3, [r7, #28]
 801133c:	4413      	add	r3, r2
 801133e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011342:	691a      	ldr	r2, [r3, #16]
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	68db      	ldr	r3, [r3, #12]
 8011348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801134c:	69b9      	ldr	r1, [r7, #24]
 801134e:	0148      	lsls	r0, r1, #5
 8011350:	69f9      	ldr	r1, [r7, #28]
 8011352:	4401      	add	r1, r0
 8011354:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011358:	4313      	orrs	r3, r2
 801135a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801135c:	69bb      	ldr	r3, [r7, #24]
 801135e:	015a      	lsls	r2, r3, #5
 8011360:	69fb      	ldr	r3, [r7, #28]
 8011362:	4413      	add	r3, r2
 8011364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011368:	691b      	ldr	r3, [r3, #16]
 801136a:	69ba      	ldr	r2, [r7, #24]
 801136c:	0151      	lsls	r1, r2, #5
 801136e:	69fa      	ldr	r2, [r7, #28]
 8011370:	440a      	add	r2, r1
 8011372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011376:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801137a:	6113      	str	r3, [r2, #16]
 801137c:	e03a      	b.n	80113f4 <USB_EPStartXfer+0x3e4>
 801137e:	bf00      	nop
 8011380:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	699a      	ldr	r2, [r3, #24]
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	68db      	ldr	r3, [r3, #12]
 801138c:	4413      	add	r3, r2
 801138e:	1e5a      	subs	r2, r3, #1
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	68db      	ldr	r3, [r3, #12]
 8011394:	fbb2 f3f3 	udiv	r3, r2, r3
 8011398:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	68db      	ldr	r3, [r3, #12]
 801139e:	8afa      	ldrh	r2, [r7, #22]
 80113a0:	fb03 f202 	mul.w	r2, r3, r2
 80113a4:	68bb      	ldr	r3, [r7, #8]
 80113a6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80113a8:	69bb      	ldr	r3, [r7, #24]
 80113aa:	015a      	lsls	r2, r3, #5
 80113ac:	69fb      	ldr	r3, [r7, #28]
 80113ae:	4413      	add	r3, r2
 80113b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113b4:	691a      	ldr	r2, [r3, #16]
 80113b6:	8afb      	ldrh	r3, [r7, #22]
 80113b8:	04d9      	lsls	r1, r3, #19
 80113ba:	4b38      	ldr	r3, [pc, #224]	; (801149c <USB_EPStartXfer+0x48c>)
 80113bc:	400b      	ands	r3, r1
 80113be:	69b9      	ldr	r1, [r7, #24]
 80113c0:	0148      	lsls	r0, r1, #5
 80113c2:	69f9      	ldr	r1, [r7, #28]
 80113c4:	4401      	add	r1, r0
 80113c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80113ca:	4313      	orrs	r3, r2
 80113cc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80113ce:	69bb      	ldr	r3, [r7, #24]
 80113d0:	015a      	lsls	r2, r3, #5
 80113d2:	69fb      	ldr	r3, [r7, #28]
 80113d4:	4413      	add	r3, r2
 80113d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113da:	691a      	ldr	r2, [r3, #16]
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	69db      	ldr	r3, [r3, #28]
 80113e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80113e4:	69b9      	ldr	r1, [r7, #24]
 80113e6:	0148      	lsls	r0, r1, #5
 80113e8:	69f9      	ldr	r1, [r7, #28]
 80113ea:	4401      	add	r1, r0
 80113ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80113f0:	4313      	orrs	r3, r2
 80113f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80113f4:	79fb      	ldrb	r3, [r7, #7]
 80113f6:	2b01      	cmp	r3, #1
 80113f8:	d10d      	bne.n	8011416 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	691b      	ldr	r3, [r3, #16]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d009      	beq.n	8011416 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011402:	68bb      	ldr	r3, [r7, #8]
 8011404:	6919      	ldr	r1, [r3, #16]
 8011406:	69bb      	ldr	r3, [r7, #24]
 8011408:	015a      	lsls	r2, r3, #5
 801140a:	69fb      	ldr	r3, [r7, #28]
 801140c:	4413      	add	r3, r2
 801140e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011412:	460a      	mov	r2, r1
 8011414:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	791b      	ldrb	r3, [r3, #4]
 801141a:	2b01      	cmp	r3, #1
 801141c:	d128      	bne.n	8011470 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801141e:	69fb      	ldr	r3, [r7, #28]
 8011420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011424:	689b      	ldr	r3, [r3, #8]
 8011426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801142a:	2b00      	cmp	r3, #0
 801142c:	d110      	bne.n	8011450 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801142e:	69bb      	ldr	r3, [r7, #24]
 8011430:	015a      	lsls	r2, r3, #5
 8011432:	69fb      	ldr	r3, [r7, #28]
 8011434:	4413      	add	r3, r2
 8011436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	69ba      	ldr	r2, [r7, #24]
 801143e:	0151      	lsls	r1, r2, #5
 8011440:	69fa      	ldr	r2, [r7, #28]
 8011442:	440a      	add	r2, r1
 8011444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011448:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801144c:	6013      	str	r3, [r2, #0]
 801144e:	e00f      	b.n	8011470 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011450:	69bb      	ldr	r3, [r7, #24]
 8011452:	015a      	lsls	r2, r3, #5
 8011454:	69fb      	ldr	r3, [r7, #28]
 8011456:	4413      	add	r3, r2
 8011458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	69ba      	ldr	r2, [r7, #24]
 8011460:	0151      	lsls	r1, r2, #5
 8011462:	69fa      	ldr	r2, [r7, #28]
 8011464:	440a      	add	r2, r1
 8011466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801146a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801146e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011470:	69bb      	ldr	r3, [r7, #24]
 8011472:	015a      	lsls	r2, r3, #5
 8011474:	69fb      	ldr	r3, [r7, #28]
 8011476:	4413      	add	r3, r2
 8011478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	69ba      	ldr	r2, [r7, #24]
 8011480:	0151      	lsls	r1, r2, #5
 8011482:	69fa      	ldr	r2, [r7, #28]
 8011484:	440a      	add	r2, r1
 8011486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801148a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801148e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011490:	2300      	movs	r3, #0
}
 8011492:	4618      	mov	r0, r3
 8011494:	3720      	adds	r7, #32
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
 801149a:	bf00      	nop
 801149c:	1ff80000 	.word	0x1ff80000

080114a0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80114a0:	b480      	push	{r7}
 80114a2:	b087      	sub	sp, #28
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	60f8      	str	r0, [r7, #12]
 80114a8:	60b9      	str	r1, [r7, #8]
 80114aa:	4613      	mov	r3, r2
 80114ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	785b      	ldrb	r3, [r3, #1]
 80114bc:	2b01      	cmp	r3, #1
 80114be:	f040 80ce 	bne.w	801165e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	699b      	ldr	r3, [r3, #24]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d132      	bne.n	8011530 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	015a      	lsls	r2, r3, #5
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	4413      	add	r3, r2
 80114d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114d6:	691b      	ldr	r3, [r3, #16]
 80114d8:	693a      	ldr	r2, [r7, #16]
 80114da:	0151      	lsls	r1, r2, #5
 80114dc:	697a      	ldr	r2, [r7, #20]
 80114de:	440a      	add	r2, r1
 80114e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80114e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80114ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	015a      	lsls	r2, r3, #5
 80114f2:	697b      	ldr	r3, [r7, #20]
 80114f4:	4413      	add	r3, r2
 80114f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114fa:	691b      	ldr	r3, [r3, #16]
 80114fc:	693a      	ldr	r2, [r7, #16]
 80114fe:	0151      	lsls	r1, r2, #5
 8011500:	697a      	ldr	r2, [r7, #20]
 8011502:	440a      	add	r2, r1
 8011504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011508:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801150c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	015a      	lsls	r2, r3, #5
 8011512:	697b      	ldr	r3, [r7, #20]
 8011514:	4413      	add	r3, r2
 8011516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801151a:	691b      	ldr	r3, [r3, #16]
 801151c:	693a      	ldr	r2, [r7, #16]
 801151e:	0151      	lsls	r1, r2, #5
 8011520:	697a      	ldr	r2, [r7, #20]
 8011522:	440a      	add	r2, r1
 8011524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011528:	0cdb      	lsrs	r3, r3, #19
 801152a:	04db      	lsls	r3, r3, #19
 801152c:	6113      	str	r3, [r2, #16]
 801152e:	e04e      	b.n	80115ce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	015a      	lsls	r2, r3, #5
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	4413      	add	r3, r2
 8011538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801153c:	691b      	ldr	r3, [r3, #16]
 801153e:	693a      	ldr	r2, [r7, #16]
 8011540:	0151      	lsls	r1, r2, #5
 8011542:	697a      	ldr	r2, [r7, #20]
 8011544:	440a      	add	r2, r1
 8011546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801154a:	0cdb      	lsrs	r3, r3, #19
 801154c:	04db      	lsls	r3, r3, #19
 801154e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	015a      	lsls	r2, r3, #5
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	4413      	add	r3, r2
 8011558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801155c:	691b      	ldr	r3, [r3, #16]
 801155e:	693a      	ldr	r2, [r7, #16]
 8011560:	0151      	lsls	r1, r2, #5
 8011562:	697a      	ldr	r2, [r7, #20]
 8011564:	440a      	add	r2, r1
 8011566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801156a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801156e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011572:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	699a      	ldr	r2, [r3, #24]
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	429a      	cmp	r2, r3
 801157e:	d903      	bls.n	8011588 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	68da      	ldr	r2, [r3, #12]
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011588:	693b      	ldr	r3, [r7, #16]
 801158a:	015a      	lsls	r2, r3, #5
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	4413      	add	r3, r2
 8011590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011594:	691b      	ldr	r3, [r3, #16]
 8011596:	693a      	ldr	r2, [r7, #16]
 8011598:	0151      	lsls	r1, r2, #5
 801159a:	697a      	ldr	r2, [r7, #20]
 801159c:	440a      	add	r2, r1
 801159e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80115a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80115a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80115a8:	693b      	ldr	r3, [r7, #16]
 80115aa:	015a      	lsls	r2, r3, #5
 80115ac:	697b      	ldr	r3, [r7, #20]
 80115ae:	4413      	add	r3, r2
 80115b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115b4:	691a      	ldr	r2, [r3, #16]
 80115b6:	68bb      	ldr	r3, [r7, #8]
 80115b8:	699b      	ldr	r3, [r3, #24]
 80115ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80115be:	6939      	ldr	r1, [r7, #16]
 80115c0:	0148      	lsls	r0, r1, #5
 80115c2:	6979      	ldr	r1, [r7, #20]
 80115c4:	4401      	add	r1, r0
 80115c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80115ca:	4313      	orrs	r3, r2
 80115cc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80115ce:	79fb      	ldrb	r3, [r7, #7]
 80115d0:	2b01      	cmp	r3, #1
 80115d2:	d11e      	bne.n	8011612 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80115d4:	68bb      	ldr	r3, [r7, #8]
 80115d6:	695b      	ldr	r3, [r3, #20]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d009      	beq.n	80115f0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80115dc:	693b      	ldr	r3, [r7, #16]
 80115de:	015a      	lsls	r2, r3, #5
 80115e0:	697b      	ldr	r3, [r7, #20]
 80115e2:	4413      	add	r3, r2
 80115e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115e8:	461a      	mov	r2, r3
 80115ea:	68bb      	ldr	r3, [r7, #8]
 80115ec:	695b      	ldr	r3, [r3, #20]
 80115ee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	015a      	lsls	r2, r3, #5
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	4413      	add	r3, r2
 80115f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	693a      	ldr	r2, [r7, #16]
 8011600:	0151      	lsls	r1, r2, #5
 8011602:	697a      	ldr	r2, [r7, #20]
 8011604:	440a      	add	r2, r1
 8011606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801160a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801160e:	6013      	str	r3, [r2, #0]
 8011610:	e097      	b.n	8011742 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011612:	693b      	ldr	r3, [r7, #16]
 8011614:	015a      	lsls	r2, r3, #5
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	4413      	add	r3, r2
 801161a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	693a      	ldr	r2, [r7, #16]
 8011622:	0151      	lsls	r1, r2, #5
 8011624:	697a      	ldr	r2, [r7, #20]
 8011626:	440a      	add	r2, r1
 8011628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801162c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011630:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	699b      	ldr	r3, [r3, #24]
 8011636:	2b00      	cmp	r3, #0
 8011638:	f000 8083 	beq.w	8011742 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801163c:	697b      	ldr	r3, [r7, #20]
 801163e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	781b      	ldrb	r3, [r3, #0]
 8011648:	f003 030f 	and.w	r3, r3, #15
 801164c:	2101      	movs	r1, #1
 801164e:	fa01 f303 	lsl.w	r3, r1, r3
 8011652:	6979      	ldr	r1, [r7, #20]
 8011654:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011658:	4313      	orrs	r3, r2
 801165a:	634b      	str	r3, [r1, #52]	; 0x34
 801165c:	e071      	b.n	8011742 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801165e:	693b      	ldr	r3, [r7, #16]
 8011660:	015a      	lsls	r2, r3, #5
 8011662:	697b      	ldr	r3, [r7, #20]
 8011664:	4413      	add	r3, r2
 8011666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801166a:	691b      	ldr	r3, [r3, #16]
 801166c:	693a      	ldr	r2, [r7, #16]
 801166e:	0151      	lsls	r1, r2, #5
 8011670:	697a      	ldr	r2, [r7, #20]
 8011672:	440a      	add	r2, r1
 8011674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011678:	0cdb      	lsrs	r3, r3, #19
 801167a:	04db      	lsls	r3, r3, #19
 801167c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	015a      	lsls	r2, r3, #5
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	4413      	add	r3, r2
 8011686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801168a:	691b      	ldr	r3, [r3, #16]
 801168c:	693a      	ldr	r2, [r7, #16]
 801168e:	0151      	lsls	r1, r2, #5
 8011690:	697a      	ldr	r2, [r7, #20]
 8011692:	440a      	add	r2, r1
 8011694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011698:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801169c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80116a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	699b      	ldr	r3, [r3, #24]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d003      	beq.n	80116b2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80116aa:	68bb      	ldr	r3, [r7, #8]
 80116ac:	68da      	ldr	r2, [r3, #12]
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	68da      	ldr	r2, [r3, #12]
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80116ba:	693b      	ldr	r3, [r7, #16]
 80116bc:	015a      	lsls	r2, r3, #5
 80116be:	697b      	ldr	r3, [r7, #20]
 80116c0:	4413      	add	r3, r2
 80116c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116c6:	691b      	ldr	r3, [r3, #16]
 80116c8:	693a      	ldr	r2, [r7, #16]
 80116ca:	0151      	lsls	r1, r2, #5
 80116cc:	697a      	ldr	r2, [r7, #20]
 80116ce:	440a      	add	r2, r1
 80116d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80116d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80116d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80116da:	693b      	ldr	r3, [r7, #16]
 80116dc:	015a      	lsls	r2, r3, #5
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	4413      	add	r3, r2
 80116e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116e6:	691a      	ldr	r2, [r3, #16]
 80116e8:	68bb      	ldr	r3, [r7, #8]
 80116ea:	69db      	ldr	r3, [r3, #28]
 80116ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80116f0:	6939      	ldr	r1, [r7, #16]
 80116f2:	0148      	lsls	r0, r1, #5
 80116f4:	6979      	ldr	r1, [r7, #20]
 80116f6:	4401      	add	r1, r0
 80116f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80116fc:	4313      	orrs	r3, r2
 80116fe:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8011700:	79fb      	ldrb	r3, [r7, #7]
 8011702:	2b01      	cmp	r3, #1
 8011704:	d10d      	bne.n	8011722 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	691b      	ldr	r3, [r3, #16]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d009      	beq.n	8011722 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	6919      	ldr	r1, [r3, #16]
 8011712:	693b      	ldr	r3, [r7, #16]
 8011714:	015a      	lsls	r2, r3, #5
 8011716:	697b      	ldr	r3, [r7, #20]
 8011718:	4413      	add	r3, r2
 801171a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801171e:	460a      	mov	r2, r1
 8011720:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	015a      	lsls	r2, r3, #5
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	4413      	add	r3, r2
 801172a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	693a      	ldr	r2, [r7, #16]
 8011732:	0151      	lsls	r1, r2, #5
 8011734:	697a      	ldr	r2, [r7, #20]
 8011736:	440a      	add	r2, r1
 8011738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801173c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011740:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011742:	2300      	movs	r3, #0
}
 8011744:	4618      	mov	r0, r3
 8011746:	371c      	adds	r7, #28
 8011748:	46bd      	mov	sp, r7
 801174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174e:	4770      	bx	lr

08011750 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011750:	b480      	push	{r7}
 8011752:	b087      	sub	sp, #28
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801175a:	2300      	movs	r3, #0
 801175c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801175e:	2300      	movs	r3, #0
 8011760:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	785b      	ldrb	r3, [r3, #1]
 801176a:	2b01      	cmp	r3, #1
 801176c:	d14a      	bne.n	8011804 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	781b      	ldrb	r3, [r3, #0]
 8011772:	015a      	lsls	r2, r3, #5
 8011774:	693b      	ldr	r3, [r7, #16]
 8011776:	4413      	add	r3, r2
 8011778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011786:	f040 8086 	bne.w	8011896 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	781b      	ldrb	r3, [r3, #0]
 801178e:	015a      	lsls	r2, r3, #5
 8011790:	693b      	ldr	r3, [r7, #16]
 8011792:	4413      	add	r3, r2
 8011794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	683a      	ldr	r2, [r7, #0]
 801179c:	7812      	ldrb	r2, [r2, #0]
 801179e:	0151      	lsls	r1, r2, #5
 80117a0:	693a      	ldr	r2, [r7, #16]
 80117a2:	440a      	add	r2, r1
 80117a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80117a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80117ac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	781b      	ldrb	r3, [r3, #0]
 80117b2:	015a      	lsls	r2, r3, #5
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	4413      	add	r3, r2
 80117b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	683a      	ldr	r2, [r7, #0]
 80117c0:	7812      	ldrb	r2, [r2, #0]
 80117c2:	0151      	lsls	r1, r2, #5
 80117c4:	693a      	ldr	r2, [r7, #16]
 80117c6:	440a      	add	r2, r1
 80117c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80117cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80117d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	3301      	adds	r3, #1
 80117d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	f242 7210 	movw	r2, #10000	; 0x2710
 80117de:	4293      	cmp	r3, r2
 80117e0:	d902      	bls.n	80117e8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80117e2:	2301      	movs	r3, #1
 80117e4:	75fb      	strb	r3, [r7, #23]
          break;
 80117e6:	e056      	b.n	8011896 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	781b      	ldrb	r3, [r3, #0]
 80117ec:	015a      	lsls	r2, r3, #5
 80117ee:	693b      	ldr	r3, [r7, #16]
 80117f0:	4413      	add	r3, r2
 80117f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80117fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011800:	d0e7      	beq.n	80117d2 <USB_EPStopXfer+0x82>
 8011802:	e048      	b.n	8011896 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011804:	683b      	ldr	r3, [r7, #0]
 8011806:	781b      	ldrb	r3, [r3, #0]
 8011808:	015a      	lsls	r2, r3, #5
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	4413      	add	r3, r2
 801180e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801181c:	d13b      	bne.n	8011896 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	781b      	ldrb	r3, [r3, #0]
 8011822:	015a      	lsls	r2, r3, #5
 8011824:	693b      	ldr	r3, [r7, #16]
 8011826:	4413      	add	r3, r2
 8011828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	683a      	ldr	r2, [r7, #0]
 8011830:	7812      	ldrb	r2, [r2, #0]
 8011832:	0151      	lsls	r1, r2, #5
 8011834:	693a      	ldr	r2, [r7, #16]
 8011836:	440a      	add	r2, r1
 8011838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801183c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011840:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	781b      	ldrb	r3, [r3, #0]
 8011846:	015a      	lsls	r2, r3, #5
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	4413      	add	r3, r2
 801184c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	683a      	ldr	r2, [r7, #0]
 8011854:	7812      	ldrb	r2, [r2, #0]
 8011856:	0151      	lsls	r1, r2, #5
 8011858:	693a      	ldr	r2, [r7, #16]
 801185a:	440a      	add	r2, r1
 801185c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011860:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011864:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	3301      	adds	r3, #1
 801186a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	f242 7210 	movw	r2, #10000	; 0x2710
 8011872:	4293      	cmp	r3, r2
 8011874:	d902      	bls.n	801187c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8011876:	2301      	movs	r3, #1
 8011878:	75fb      	strb	r3, [r7, #23]
          break;
 801187a:	e00c      	b.n	8011896 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	781b      	ldrb	r3, [r3, #0]
 8011880:	015a      	lsls	r2, r3, #5
 8011882:	693b      	ldr	r3, [r7, #16]
 8011884:	4413      	add	r3, r2
 8011886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011890:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011894:	d0e7      	beq.n	8011866 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8011896:	7dfb      	ldrb	r3, [r7, #23]
}
 8011898:	4618      	mov	r0, r3
 801189a:	371c      	adds	r7, #28
 801189c:	46bd      	mov	sp, r7
 801189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a2:	4770      	bx	lr

080118a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b089      	sub	sp, #36	; 0x24
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	60f8      	str	r0, [r7, #12]
 80118ac:	60b9      	str	r1, [r7, #8]
 80118ae:	4611      	mov	r1, r2
 80118b0:	461a      	mov	r2, r3
 80118b2:	460b      	mov	r3, r1
 80118b4:	71fb      	strb	r3, [r7, #7]
 80118b6:	4613      	mov	r3, r2
 80118b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80118be:	68bb      	ldr	r3, [r7, #8]
 80118c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80118c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d123      	bne.n	8011912 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80118ca:	88bb      	ldrh	r3, [r7, #4]
 80118cc:	3303      	adds	r3, #3
 80118ce:	089b      	lsrs	r3, r3, #2
 80118d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80118d2:	2300      	movs	r3, #0
 80118d4:	61bb      	str	r3, [r7, #24]
 80118d6:	e018      	b.n	801190a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80118d8:	79fb      	ldrb	r3, [r7, #7]
 80118da:	031a      	lsls	r2, r3, #12
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	4413      	add	r3, r2
 80118e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80118e4:	461a      	mov	r2, r3
 80118e6:	69fb      	ldr	r3, [r7, #28]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80118ec:	69fb      	ldr	r3, [r7, #28]
 80118ee:	3301      	adds	r3, #1
 80118f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80118f2:	69fb      	ldr	r3, [r7, #28]
 80118f4:	3301      	adds	r3, #1
 80118f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80118f8:	69fb      	ldr	r3, [r7, #28]
 80118fa:	3301      	adds	r3, #1
 80118fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80118fe:	69fb      	ldr	r3, [r7, #28]
 8011900:	3301      	adds	r3, #1
 8011902:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011904:	69bb      	ldr	r3, [r7, #24]
 8011906:	3301      	adds	r3, #1
 8011908:	61bb      	str	r3, [r7, #24]
 801190a:	69ba      	ldr	r2, [r7, #24]
 801190c:	693b      	ldr	r3, [r7, #16]
 801190e:	429a      	cmp	r2, r3
 8011910:	d3e2      	bcc.n	80118d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011912:	2300      	movs	r3, #0
}
 8011914:	4618      	mov	r0, r3
 8011916:	3724      	adds	r7, #36	; 0x24
 8011918:	46bd      	mov	sp, r7
 801191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191e:	4770      	bx	lr

08011920 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011920:	b480      	push	{r7}
 8011922:	b08b      	sub	sp, #44	; 0x2c
 8011924:	af00      	add	r7, sp, #0
 8011926:	60f8      	str	r0, [r7, #12]
 8011928:	60b9      	str	r1, [r7, #8]
 801192a:	4613      	mov	r3, r2
 801192c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011936:	88fb      	ldrh	r3, [r7, #6]
 8011938:	089b      	lsrs	r3, r3, #2
 801193a:	b29b      	uxth	r3, r3
 801193c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801193e:	88fb      	ldrh	r3, [r7, #6]
 8011940:	f003 0303 	and.w	r3, r3, #3
 8011944:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011946:	2300      	movs	r3, #0
 8011948:	623b      	str	r3, [r7, #32]
 801194a:	e014      	b.n	8011976 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801194c:	69bb      	ldr	r3, [r7, #24]
 801194e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011952:	681a      	ldr	r2, [r3, #0]
 8011954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011956:	601a      	str	r2, [r3, #0]
    pDest++;
 8011958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801195a:	3301      	adds	r3, #1
 801195c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011960:	3301      	adds	r3, #1
 8011962:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011966:	3301      	adds	r3, #1
 8011968:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801196c:	3301      	adds	r3, #1
 801196e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8011970:	6a3b      	ldr	r3, [r7, #32]
 8011972:	3301      	adds	r3, #1
 8011974:	623b      	str	r3, [r7, #32]
 8011976:	6a3a      	ldr	r2, [r7, #32]
 8011978:	697b      	ldr	r3, [r7, #20]
 801197a:	429a      	cmp	r2, r3
 801197c:	d3e6      	bcc.n	801194c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801197e:	8bfb      	ldrh	r3, [r7, #30]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d01e      	beq.n	80119c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011984:	2300      	movs	r3, #0
 8011986:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011988:	69bb      	ldr	r3, [r7, #24]
 801198a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801198e:	461a      	mov	r2, r3
 8011990:	f107 0310 	add.w	r3, r7, #16
 8011994:	6812      	ldr	r2, [r2, #0]
 8011996:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011998:	693a      	ldr	r2, [r7, #16]
 801199a:	6a3b      	ldr	r3, [r7, #32]
 801199c:	b2db      	uxtb	r3, r3
 801199e:	00db      	lsls	r3, r3, #3
 80119a0:	fa22 f303 	lsr.w	r3, r2, r3
 80119a4:	b2da      	uxtb	r2, r3
 80119a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a8:	701a      	strb	r2, [r3, #0]
      i++;
 80119aa:	6a3b      	ldr	r3, [r7, #32]
 80119ac:	3301      	adds	r3, #1
 80119ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80119b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b2:	3301      	adds	r3, #1
 80119b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80119b6:	8bfb      	ldrh	r3, [r7, #30]
 80119b8:	3b01      	subs	r3, #1
 80119ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80119bc:	8bfb      	ldrh	r3, [r7, #30]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d1ea      	bne.n	8011998 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80119c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80119c4:	4618      	mov	r0, r3
 80119c6:	372c      	adds	r7, #44	; 0x2c
 80119c8:	46bd      	mov	sp, r7
 80119ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ce:	4770      	bx	lr

080119d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80119d0:	b480      	push	{r7}
 80119d2:	b085      	sub	sp, #20
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
 80119d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80119de:	683b      	ldr	r3, [r7, #0]
 80119e0:	781b      	ldrb	r3, [r3, #0]
 80119e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	785b      	ldrb	r3, [r3, #1]
 80119e8:	2b01      	cmp	r3, #1
 80119ea:	d12c      	bne.n	8011a46 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80119ec:	68bb      	ldr	r3, [r7, #8]
 80119ee:	015a      	lsls	r2, r3, #5
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	4413      	add	r3, r2
 80119f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	db12      	blt.n	8011a24 <USB_EPSetStall+0x54>
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d00f      	beq.n	8011a24 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	015a      	lsls	r2, r3, #5
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	4413      	add	r3, r2
 8011a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	68ba      	ldr	r2, [r7, #8]
 8011a14:	0151      	lsls	r1, r2, #5
 8011a16:	68fa      	ldr	r2, [r7, #12]
 8011a18:	440a      	add	r2, r1
 8011a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011a22:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	015a      	lsls	r2, r3, #5
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	4413      	add	r3, r2
 8011a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	68ba      	ldr	r2, [r7, #8]
 8011a34:	0151      	lsls	r1, r2, #5
 8011a36:	68fa      	ldr	r2, [r7, #12]
 8011a38:	440a      	add	r2, r1
 8011a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011a42:	6013      	str	r3, [r2, #0]
 8011a44:	e02b      	b.n	8011a9e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	015a      	lsls	r2, r3, #5
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	4413      	add	r3, r2
 8011a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	db12      	blt.n	8011a7e <USB_EPSetStall+0xae>
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d00f      	beq.n	8011a7e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	015a      	lsls	r2, r3, #5
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	4413      	add	r3, r2
 8011a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	68ba      	ldr	r2, [r7, #8]
 8011a6e:	0151      	lsls	r1, r2, #5
 8011a70:	68fa      	ldr	r2, [r7, #12]
 8011a72:	440a      	add	r2, r1
 8011a74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011a7c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	015a      	lsls	r2, r3, #5
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	4413      	add	r3, r2
 8011a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	68ba      	ldr	r2, [r7, #8]
 8011a8e:	0151      	lsls	r1, r2, #5
 8011a90:	68fa      	ldr	r2, [r7, #12]
 8011a92:	440a      	add	r2, r1
 8011a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011a9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011a9e:	2300      	movs	r3, #0
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	3714      	adds	r7, #20
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aaa:	4770      	bx	lr

08011aac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011aac:	b480      	push	{r7}
 8011aae:	b085      	sub	sp, #20
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
 8011ab4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	781b      	ldrb	r3, [r3, #0]
 8011abe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	785b      	ldrb	r3, [r3, #1]
 8011ac4:	2b01      	cmp	r3, #1
 8011ac6:	d128      	bne.n	8011b1a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	015a      	lsls	r2, r3, #5
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	4413      	add	r3, r2
 8011ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	68ba      	ldr	r2, [r7, #8]
 8011ad8:	0151      	lsls	r1, r2, #5
 8011ada:	68fa      	ldr	r2, [r7, #12]
 8011adc:	440a      	add	r2, r1
 8011ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ae2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011ae6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	791b      	ldrb	r3, [r3, #4]
 8011aec:	2b03      	cmp	r3, #3
 8011aee:	d003      	beq.n	8011af8 <USB_EPClearStall+0x4c>
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	791b      	ldrb	r3, [r3, #4]
 8011af4:	2b02      	cmp	r3, #2
 8011af6:	d138      	bne.n	8011b6a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011af8:	68bb      	ldr	r3, [r7, #8]
 8011afa:	015a      	lsls	r2, r3, #5
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	4413      	add	r3, r2
 8011b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	68ba      	ldr	r2, [r7, #8]
 8011b08:	0151      	lsls	r1, r2, #5
 8011b0a:	68fa      	ldr	r2, [r7, #12]
 8011b0c:	440a      	add	r2, r1
 8011b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011b16:	6013      	str	r3, [r2, #0]
 8011b18:	e027      	b.n	8011b6a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011b1a:	68bb      	ldr	r3, [r7, #8]
 8011b1c:	015a      	lsls	r2, r3, #5
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	4413      	add	r3, r2
 8011b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	68ba      	ldr	r2, [r7, #8]
 8011b2a:	0151      	lsls	r1, r2, #5
 8011b2c:	68fa      	ldr	r2, [r7, #12]
 8011b2e:	440a      	add	r2, r1
 8011b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011b34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011b38:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	791b      	ldrb	r3, [r3, #4]
 8011b3e:	2b03      	cmp	r3, #3
 8011b40:	d003      	beq.n	8011b4a <USB_EPClearStall+0x9e>
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	791b      	ldrb	r3, [r3, #4]
 8011b46:	2b02      	cmp	r3, #2
 8011b48:	d10f      	bne.n	8011b6a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	015a      	lsls	r2, r3, #5
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	4413      	add	r3, r2
 8011b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	68ba      	ldr	r2, [r7, #8]
 8011b5a:	0151      	lsls	r1, r2, #5
 8011b5c:	68fa      	ldr	r2, [r7, #12]
 8011b5e:	440a      	add	r2, r1
 8011b60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011b68:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011b6a:	2300      	movs	r3, #0
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3714      	adds	r7, #20
 8011b70:	46bd      	mov	sp, r7
 8011b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b76:	4770      	bx	lr

08011b78 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011b78:	b480      	push	{r7}
 8011b7a:	b085      	sub	sp, #20
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	460b      	mov	r3, r1
 8011b82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	68fa      	ldr	r2, [r7, #12]
 8011b92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011b96:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011b9a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ba2:	681a      	ldr	r2, [r3, #0]
 8011ba4:	78fb      	ldrb	r3, [r7, #3]
 8011ba6:	011b      	lsls	r3, r3, #4
 8011ba8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011bac:	68f9      	ldr	r1, [r7, #12]
 8011bae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011bb2:	4313      	orrs	r3, r2
 8011bb4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011bb6:	2300      	movs	r3, #0
}
 8011bb8:	4618      	mov	r0, r3
 8011bba:	3714      	adds	r7, #20
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc2:	4770      	bx	lr

08011bc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011bc4:	b480      	push	{r7}
 8011bc6:	b085      	sub	sp, #20
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	695b      	ldr	r3, [r3, #20]
 8011bd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	699b      	ldr	r3, [r3, #24]
 8011bd6:	68fa      	ldr	r2, [r7, #12]
 8011bd8:	4013      	ands	r3, r2
 8011bda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3714      	adds	r7, #20
 8011be2:	46bd      	mov	sp, r7
 8011be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be8:	4770      	bx	lr

08011bea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011bea:	b480      	push	{r7}
 8011bec:	b085      	sub	sp, #20
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011bfc:	699b      	ldr	r3, [r3, #24]
 8011bfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c06:	69db      	ldr	r3, [r3, #28]
 8011c08:	68ba      	ldr	r2, [r7, #8]
 8011c0a:	4013      	ands	r3, r2
 8011c0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	0c1b      	lsrs	r3, r3, #16
}
 8011c12:	4618      	mov	r0, r3
 8011c14:	3714      	adds	r7, #20
 8011c16:	46bd      	mov	sp, r7
 8011c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1c:	4770      	bx	lr

08011c1e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011c1e:	b480      	push	{r7}
 8011c20:	b085      	sub	sp, #20
 8011c22:	af00      	add	r7, sp, #0
 8011c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c30:	699b      	ldr	r3, [r3, #24]
 8011c32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c3a:	69db      	ldr	r3, [r3, #28]
 8011c3c:	68ba      	ldr	r2, [r7, #8]
 8011c3e:	4013      	ands	r3, r2
 8011c40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	b29b      	uxth	r3, r3
}
 8011c46:	4618      	mov	r0, r3
 8011c48:	3714      	adds	r7, #20
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c50:	4770      	bx	lr

08011c52 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011c52:	b480      	push	{r7}
 8011c54:	b085      	sub	sp, #20
 8011c56:	af00      	add	r7, sp, #0
 8011c58:	6078      	str	r0, [r7, #4]
 8011c5a:	460b      	mov	r3, r1
 8011c5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011c62:	78fb      	ldrb	r3, [r7, #3]
 8011c64:	015a      	lsls	r2, r3, #5
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	4413      	add	r3, r2
 8011c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c6e:	689b      	ldr	r3, [r3, #8]
 8011c70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c78:	695b      	ldr	r3, [r3, #20]
 8011c7a:	68ba      	ldr	r2, [r7, #8]
 8011c7c:	4013      	ands	r3, r2
 8011c7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011c80:	68bb      	ldr	r3, [r7, #8]
}
 8011c82:	4618      	mov	r0, r3
 8011c84:	3714      	adds	r7, #20
 8011c86:	46bd      	mov	sp, r7
 8011c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8c:	4770      	bx	lr

08011c8e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011c8e:	b480      	push	{r7}
 8011c90:	b087      	sub	sp, #28
 8011c92:	af00      	add	r7, sp, #0
 8011c94:	6078      	str	r0, [r7, #4]
 8011c96:	460b      	mov	r3, r1
 8011c98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ca4:	691b      	ldr	r3, [r3, #16]
 8011ca6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cb0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011cb2:	78fb      	ldrb	r3, [r7, #3]
 8011cb4:	f003 030f 	and.w	r3, r3, #15
 8011cb8:	68fa      	ldr	r2, [r7, #12]
 8011cba:	fa22 f303 	lsr.w	r3, r2, r3
 8011cbe:	01db      	lsls	r3, r3, #7
 8011cc0:	b2db      	uxtb	r3, r3
 8011cc2:	693a      	ldr	r2, [r7, #16]
 8011cc4:	4313      	orrs	r3, r2
 8011cc6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011cc8:	78fb      	ldrb	r3, [r7, #3]
 8011cca:	015a      	lsls	r2, r3, #5
 8011ccc:	697b      	ldr	r3, [r7, #20]
 8011cce:	4413      	add	r3, r2
 8011cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cd4:	689b      	ldr	r3, [r3, #8]
 8011cd6:	693a      	ldr	r2, [r7, #16]
 8011cd8:	4013      	ands	r3, r2
 8011cda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011cdc:	68bb      	ldr	r3, [r7, #8]
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	371c      	adds	r7, #28
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce8:	4770      	bx	lr

08011cea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011cea:	b480      	push	{r7}
 8011cec:	b083      	sub	sp, #12
 8011cee:	af00      	add	r7, sp, #0
 8011cf0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	695b      	ldr	r3, [r3, #20]
 8011cf6:	f003 0301 	and.w	r3, r3, #1
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	370c      	adds	r7, #12
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d04:	4770      	bx	lr

08011d06 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8011d06:	b480      	push	{r7}
 8011d08:	b085      	sub	sp, #20
 8011d0a:	af00      	add	r7, sp, #0
 8011d0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	68fa      	ldr	r2, [r7, #12]
 8011d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011d24:	f023 0307 	bic.w	r3, r3, #7
 8011d28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d30:	685b      	ldr	r3, [r3, #4]
 8011d32:	68fa      	ldr	r2, [r7, #12]
 8011d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011d3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011d3e:	2300      	movs	r3, #0
}
 8011d40:	4618      	mov	r0, r3
 8011d42:	3714      	adds	r7, #20
 8011d44:	46bd      	mov	sp, r7
 8011d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4a:	4770      	bx	lr

08011d4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8011d4c:	b480      	push	{r7}
 8011d4e:	b087      	sub	sp, #28
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	60f8      	str	r0, [r7, #12]
 8011d54:	460b      	mov	r3, r1
 8011d56:	607a      	str	r2, [r7, #4]
 8011d58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	333c      	adds	r3, #60	; 0x3c
 8011d62:	3304      	adds	r3, #4
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011d68:	693b      	ldr	r3, [r7, #16]
 8011d6a:	4a26      	ldr	r2, [pc, #152]	; (8011e04 <USB_EP0_OutStart+0xb8>)
 8011d6c:	4293      	cmp	r3, r2
 8011d6e:	d90a      	bls.n	8011d86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011d70:	697b      	ldr	r3, [r7, #20]
 8011d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011d80:	d101      	bne.n	8011d86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8011d82:	2300      	movs	r3, #0
 8011d84:	e037      	b.n	8011df6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d8c:	461a      	mov	r2, r3
 8011d8e:	2300      	movs	r3, #0
 8011d90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011d92:	697b      	ldr	r3, [r7, #20]
 8011d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d98:	691b      	ldr	r3, [r3, #16]
 8011d9a:	697a      	ldr	r2, [r7, #20]
 8011d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011da0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011da4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011da6:	697b      	ldr	r3, [r7, #20]
 8011da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011dac:	691b      	ldr	r3, [r3, #16]
 8011dae:	697a      	ldr	r2, [r7, #20]
 8011db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011db4:	f043 0318 	orr.w	r3, r3, #24
 8011db8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011dba:	697b      	ldr	r3, [r7, #20]
 8011dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011dc0:	691b      	ldr	r3, [r3, #16]
 8011dc2:	697a      	ldr	r2, [r7, #20]
 8011dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011dc8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011dcc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8011dce:	7afb      	ldrb	r3, [r7, #11]
 8011dd0:	2b01      	cmp	r3, #1
 8011dd2:	d10f      	bne.n	8011df4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011dda:	461a      	mov	r2, r3
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	697a      	ldr	r2, [r7, #20]
 8011dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011dee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8011df2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011df4:	2300      	movs	r3, #0
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	371c      	adds	r7, #28
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e00:	4770      	bx	lr
 8011e02:	bf00      	nop
 8011e04:	4f54300a 	.word	0x4f54300a

08011e08 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011e08:	b480      	push	{r7}
 8011e0a:	b083      	sub	sp, #12
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011e10:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011e12:	4618      	mov	r0, r3
 8011e14:	370c      	adds	r7, #12
 8011e16:	46bd      	mov	sp, r7
 8011e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1c:	4770      	bx	lr

08011e1e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011e1e:	b580      	push	{r7, lr}
 8011e20:	b084      	sub	sp, #16
 8011e22:	af00      	add	r7, sp, #0
 8011e24:	6078      	str	r0, [r7, #4]
 8011e26:	460b      	mov	r3, r1
 8011e28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d009      	beq.n	8011e4c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	78fa      	ldrb	r2, [r7, #3]
 8011e42:	4611      	mov	r1, r2
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	4798      	blx	r3
 8011e48:	4603      	mov	r3, r0
 8011e4a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3710      	adds	r7, #16
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}

08011e56 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011e56:	b580      	push	{r7, lr}
 8011e58:	b084      	sub	sp, #16
 8011e5a:	af00      	add	r7, sp, #0
 8011e5c:	6078      	str	r0, [r7, #4]
 8011e5e:	460b      	mov	r3, r1
 8011e60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e62:	2300      	movs	r3, #0
 8011e64:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e6c:	685b      	ldr	r3, [r3, #4]
 8011e6e:	78fa      	ldrb	r2, [r7, #3]
 8011e70:	4611      	mov	r1, r2
 8011e72:	6878      	ldr	r0, [r7, #4]
 8011e74:	4798      	blx	r3
 8011e76:	4603      	mov	r3, r0
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d001      	beq.n	8011e80 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011e7c:	2303      	movs	r3, #3
 8011e7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e82:	4618      	mov	r0, r3
 8011e84:	3710      	adds	r7, #16
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}

08011e8a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011e8a:	b580      	push	{r7, lr}
 8011e8c:	b084      	sub	sp, #16
 8011e8e:	af00      	add	r7, sp, #0
 8011e90:	6078      	str	r0, [r7, #4]
 8011e92:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011e9a:	6839      	ldr	r1, [r7, #0]
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	f001 f8b2 	bl	8013006 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	2201      	movs	r2, #1
 8011ea6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011eb0:	461a      	mov	r2, r3
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011ebe:	f003 031f 	and.w	r3, r3, #31
 8011ec2:	2b02      	cmp	r3, #2
 8011ec4:	d01a      	beq.n	8011efc <USBD_LL_SetupStage+0x72>
 8011ec6:	2b02      	cmp	r3, #2
 8011ec8:	d822      	bhi.n	8011f10 <USBD_LL_SetupStage+0x86>
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d002      	beq.n	8011ed4 <USBD_LL_SetupStage+0x4a>
 8011ece:	2b01      	cmp	r3, #1
 8011ed0:	d00a      	beq.n	8011ee8 <USBD_LL_SetupStage+0x5e>
 8011ed2:	e01d      	b.n	8011f10 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011eda:	4619      	mov	r1, r3
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f000 fb09 	bl	80124f4 <USBD_StdDevReq>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	73fb      	strb	r3, [r7, #15]
      break;
 8011ee6:	e020      	b.n	8011f2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011eee:	4619      	mov	r1, r3
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f000 fb71 	bl	80125d8 <USBD_StdItfReq>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	73fb      	strb	r3, [r7, #15]
      break;
 8011efa:	e016      	b.n	8011f2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011f02:	4619      	mov	r1, r3
 8011f04:	6878      	ldr	r0, [r7, #4]
 8011f06:	f000 fbd3 	bl	80126b0 <USBD_StdEPReq>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	73fb      	strb	r3, [r7, #15]
      break;
 8011f0e:	e00c      	b.n	8011f2a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011f16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011f1a:	b2db      	uxtb	r3, r3
 8011f1c:	4619      	mov	r1, r3
 8011f1e:	6878      	ldr	r0, [r7, #4]
 8011f20:	f002 fdd4 	bl	8014acc <USBD_LL_StallEP>
 8011f24:	4603      	mov	r3, r0
 8011f26:	73fb      	strb	r3, [r7, #15]
      break;
 8011f28:	bf00      	nop
  }

  return ret;
 8011f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	3710      	adds	r7, #16
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bd80      	pop	{r7, pc}

08011f34 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b086      	sub	sp, #24
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	60f8      	str	r0, [r7, #12]
 8011f3c:	460b      	mov	r3, r1
 8011f3e:	607a      	str	r2, [r7, #4]
 8011f40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011f42:	2300      	movs	r3, #0
 8011f44:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011f46:	7afb      	ldrb	r3, [r7, #11]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d16e      	bne.n	801202a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011f52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011f5a:	2b03      	cmp	r3, #3
 8011f5c:	f040 8098 	bne.w	8012090 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	689a      	ldr	r2, [r3, #8]
 8011f64:	693b      	ldr	r3, [r7, #16]
 8011f66:	68db      	ldr	r3, [r3, #12]
 8011f68:	429a      	cmp	r2, r3
 8011f6a:	d913      	bls.n	8011f94 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011f6c:	693b      	ldr	r3, [r7, #16]
 8011f6e:	689a      	ldr	r2, [r3, #8]
 8011f70:	693b      	ldr	r3, [r7, #16]
 8011f72:	68db      	ldr	r3, [r3, #12]
 8011f74:	1ad2      	subs	r2, r2, r3
 8011f76:	693b      	ldr	r3, [r7, #16]
 8011f78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	68da      	ldr	r2, [r3, #12]
 8011f7e:	693b      	ldr	r3, [r7, #16]
 8011f80:	689b      	ldr	r3, [r3, #8]
 8011f82:	4293      	cmp	r3, r2
 8011f84:	bf28      	it	cs
 8011f86:	4613      	movcs	r3, r2
 8011f88:	461a      	mov	r2, r3
 8011f8a:	6879      	ldr	r1, [r7, #4]
 8011f8c:	68f8      	ldr	r0, [r7, #12]
 8011f8e:	f001 f8b1 	bl	80130f4 <USBD_CtlContinueRx>
 8011f92:	e07d      	b.n	8012090 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011f9a:	f003 031f 	and.w	r3, r3, #31
 8011f9e:	2b02      	cmp	r3, #2
 8011fa0:	d014      	beq.n	8011fcc <USBD_LL_DataOutStage+0x98>
 8011fa2:	2b02      	cmp	r3, #2
 8011fa4:	d81d      	bhi.n	8011fe2 <USBD_LL_DataOutStage+0xae>
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d002      	beq.n	8011fb0 <USBD_LL_DataOutStage+0x7c>
 8011faa:	2b01      	cmp	r3, #1
 8011fac:	d003      	beq.n	8011fb6 <USBD_LL_DataOutStage+0x82>
 8011fae:	e018      	b.n	8011fe2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	75bb      	strb	r3, [r7, #22]
            break;
 8011fb4:	e018      	b.n	8011fe8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011fbc:	b2db      	uxtb	r3, r3
 8011fbe:	4619      	mov	r1, r3
 8011fc0:	68f8      	ldr	r0, [r7, #12]
 8011fc2:	f000 fa5e 	bl	8012482 <USBD_CoreFindIF>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	75bb      	strb	r3, [r7, #22]
            break;
 8011fca:	e00d      	b.n	8011fe8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011fd2:	b2db      	uxtb	r3, r3
 8011fd4:	4619      	mov	r1, r3
 8011fd6:	68f8      	ldr	r0, [r7, #12]
 8011fd8:	f000 fa60 	bl	801249c <USBD_CoreFindEP>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	75bb      	strb	r3, [r7, #22]
            break;
 8011fe0:	e002      	b.n	8011fe8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	75bb      	strb	r3, [r7, #22]
            break;
 8011fe6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011fe8:	7dbb      	ldrb	r3, [r7, #22]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d119      	bne.n	8012022 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ff4:	b2db      	uxtb	r3, r3
 8011ff6:	2b03      	cmp	r3, #3
 8011ff8:	d113      	bne.n	8012022 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011ffa:	7dba      	ldrb	r2, [r7, #22]
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	32ae      	adds	r2, #174	; 0xae
 8012000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012004:	691b      	ldr	r3, [r3, #16]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d00b      	beq.n	8012022 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801200a:	7dba      	ldrb	r2, [r7, #22]
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8012012:	7dba      	ldrb	r2, [r7, #22]
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	32ae      	adds	r2, #174	; 0xae
 8012018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801201c:	691b      	ldr	r3, [r3, #16]
 801201e:	68f8      	ldr	r0, [r7, #12]
 8012020:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012022:	68f8      	ldr	r0, [r7, #12]
 8012024:	f001 f877 	bl	8013116 <USBD_CtlSendStatus>
 8012028:	e032      	b.n	8012090 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801202a:	7afb      	ldrb	r3, [r7, #11]
 801202c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012030:	b2db      	uxtb	r3, r3
 8012032:	4619      	mov	r1, r3
 8012034:	68f8      	ldr	r0, [r7, #12]
 8012036:	f000 fa31 	bl	801249c <USBD_CoreFindEP>
 801203a:	4603      	mov	r3, r0
 801203c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801203e:	7dbb      	ldrb	r3, [r7, #22]
 8012040:	2bff      	cmp	r3, #255	; 0xff
 8012042:	d025      	beq.n	8012090 <USBD_LL_DataOutStage+0x15c>
 8012044:	7dbb      	ldrb	r3, [r7, #22]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d122      	bne.n	8012090 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012050:	b2db      	uxtb	r3, r3
 8012052:	2b03      	cmp	r3, #3
 8012054:	d117      	bne.n	8012086 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8012056:	7dba      	ldrb	r2, [r7, #22]
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	32ae      	adds	r2, #174	; 0xae
 801205c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012060:	699b      	ldr	r3, [r3, #24]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d00f      	beq.n	8012086 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8012066:	7dba      	ldrb	r2, [r7, #22]
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801206e:	7dba      	ldrb	r2, [r7, #22]
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	32ae      	adds	r2, #174	; 0xae
 8012074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012078:	699b      	ldr	r3, [r3, #24]
 801207a:	7afa      	ldrb	r2, [r7, #11]
 801207c:	4611      	mov	r1, r2
 801207e:	68f8      	ldr	r0, [r7, #12]
 8012080:	4798      	blx	r3
 8012082:	4603      	mov	r3, r0
 8012084:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8012086:	7dfb      	ldrb	r3, [r7, #23]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d001      	beq.n	8012090 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801208c:	7dfb      	ldrb	r3, [r7, #23]
 801208e:	e000      	b.n	8012092 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8012090:	2300      	movs	r3, #0
}
 8012092:	4618      	mov	r0, r3
 8012094:	3718      	adds	r7, #24
 8012096:	46bd      	mov	sp, r7
 8012098:	bd80      	pop	{r7, pc}

0801209a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801209a:	b580      	push	{r7, lr}
 801209c:	b086      	sub	sp, #24
 801209e:	af00      	add	r7, sp, #0
 80120a0:	60f8      	str	r0, [r7, #12]
 80120a2:	460b      	mov	r3, r1
 80120a4:	607a      	str	r2, [r7, #4]
 80120a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80120a8:	7afb      	ldrb	r3, [r7, #11]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d16f      	bne.n	801218e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	3314      	adds	r3, #20
 80120b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80120ba:	2b02      	cmp	r3, #2
 80120bc:	d15a      	bne.n	8012174 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80120be:	693b      	ldr	r3, [r7, #16]
 80120c0:	689a      	ldr	r2, [r3, #8]
 80120c2:	693b      	ldr	r3, [r7, #16]
 80120c4:	68db      	ldr	r3, [r3, #12]
 80120c6:	429a      	cmp	r2, r3
 80120c8:	d914      	bls.n	80120f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80120ca:	693b      	ldr	r3, [r7, #16]
 80120cc:	689a      	ldr	r2, [r3, #8]
 80120ce:	693b      	ldr	r3, [r7, #16]
 80120d0:	68db      	ldr	r3, [r3, #12]
 80120d2:	1ad2      	subs	r2, r2, r3
 80120d4:	693b      	ldr	r3, [r7, #16]
 80120d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	689b      	ldr	r3, [r3, #8]
 80120dc:	461a      	mov	r2, r3
 80120de:	6879      	ldr	r1, [r7, #4]
 80120e0:	68f8      	ldr	r0, [r7, #12]
 80120e2:	f000 fff6 	bl	80130d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80120e6:	2300      	movs	r3, #0
 80120e8:	2200      	movs	r2, #0
 80120ea:	2100      	movs	r1, #0
 80120ec:	68f8      	ldr	r0, [r7, #12]
 80120ee:	f002 fd97 	bl	8014c20 <USBD_LL_PrepareReceive>
 80120f2:	e03f      	b.n	8012174 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80120f4:	693b      	ldr	r3, [r7, #16]
 80120f6:	68da      	ldr	r2, [r3, #12]
 80120f8:	693b      	ldr	r3, [r7, #16]
 80120fa:	689b      	ldr	r3, [r3, #8]
 80120fc:	429a      	cmp	r2, r3
 80120fe:	d11c      	bne.n	801213a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012100:	693b      	ldr	r3, [r7, #16]
 8012102:	685a      	ldr	r2, [r3, #4]
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012108:	429a      	cmp	r2, r3
 801210a:	d316      	bcc.n	801213a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801210c:	693b      	ldr	r3, [r7, #16]
 801210e:	685a      	ldr	r2, [r3, #4]
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012116:	429a      	cmp	r2, r3
 8012118:	d20f      	bcs.n	801213a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801211a:	2200      	movs	r2, #0
 801211c:	2100      	movs	r1, #0
 801211e:	68f8      	ldr	r0, [r7, #12]
 8012120:	f000 ffd7 	bl	80130d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	2200      	movs	r2, #0
 8012128:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801212c:	2300      	movs	r3, #0
 801212e:	2200      	movs	r2, #0
 8012130:	2100      	movs	r1, #0
 8012132:	68f8      	ldr	r0, [r7, #12]
 8012134:	f002 fd74 	bl	8014c20 <USBD_LL_PrepareReceive>
 8012138:	e01c      	b.n	8012174 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012140:	b2db      	uxtb	r3, r3
 8012142:	2b03      	cmp	r3, #3
 8012144:	d10f      	bne.n	8012166 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801214c:	68db      	ldr	r3, [r3, #12]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d009      	beq.n	8012166 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	2200      	movs	r2, #0
 8012156:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012160:	68db      	ldr	r3, [r3, #12]
 8012162:	68f8      	ldr	r0, [r7, #12]
 8012164:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012166:	2180      	movs	r1, #128	; 0x80
 8012168:	68f8      	ldr	r0, [r7, #12]
 801216a:	f002 fcaf 	bl	8014acc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801216e:	68f8      	ldr	r0, [r7, #12]
 8012170:	f000 ffe4 	bl	801313c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801217a:	2b00      	cmp	r3, #0
 801217c:	d03a      	beq.n	80121f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801217e:	68f8      	ldr	r0, [r7, #12]
 8012180:	f7ff fe42 	bl	8011e08 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	2200      	movs	r2, #0
 8012188:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801218c:	e032      	b.n	80121f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801218e:	7afb      	ldrb	r3, [r7, #11]
 8012190:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012194:	b2db      	uxtb	r3, r3
 8012196:	4619      	mov	r1, r3
 8012198:	68f8      	ldr	r0, [r7, #12]
 801219a:	f000 f97f 	bl	801249c <USBD_CoreFindEP>
 801219e:	4603      	mov	r3, r0
 80121a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80121a2:	7dfb      	ldrb	r3, [r7, #23]
 80121a4:	2bff      	cmp	r3, #255	; 0xff
 80121a6:	d025      	beq.n	80121f4 <USBD_LL_DataInStage+0x15a>
 80121a8:	7dfb      	ldrb	r3, [r7, #23]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d122      	bne.n	80121f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121b4:	b2db      	uxtb	r3, r3
 80121b6:	2b03      	cmp	r3, #3
 80121b8:	d11c      	bne.n	80121f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80121ba:	7dfa      	ldrb	r2, [r7, #23]
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	32ae      	adds	r2, #174	; 0xae
 80121c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121c4:	695b      	ldr	r3, [r3, #20]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d014      	beq.n	80121f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80121ca:	7dfa      	ldrb	r2, [r7, #23]
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80121d2:	7dfa      	ldrb	r2, [r7, #23]
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	32ae      	adds	r2, #174	; 0xae
 80121d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121dc:	695b      	ldr	r3, [r3, #20]
 80121de:	7afa      	ldrb	r2, [r7, #11]
 80121e0:	4611      	mov	r1, r2
 80121e2:	68f8      	ldr	r0, [r7, #12]
 80121e4:	4798      	blx	r3
 80121e6:	4603      	mov	r3, r0
 80121e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80121ea:	7dbb      	ldrb	r3, [r7, #22]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d001      	beq.n	80121f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80121f0:	7dbb      	ldrb	r3, [r7, #22]
 80121f2:	e000      	b.n	80121f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80121f4:	2300      	movs	r3, #0
}
 80121f6:	4618      	mov	r0, r3
 80121f8:	3718      	adds	r7, #24
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}

080121fe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80121fe:	b580      	push	{r7, lr}
 8012200:	b084      	sub	sp, #16
 8012202:	af00      	add	r7, sp, #0
 8012204:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8012206:	2300      	movs	r3, #0
 8012208:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2201      	movs	r2, #1
 801220e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2200      	movs	r2, #0
 8012216:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2200      	movs	r2, #0
 801221e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2200      	movs	r2, #0
 8012224:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2200      	movs	r2, #0
 801222c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012236:	2b00      	cmp	r3, #0
 8012238:	d014      	beq.n	8012264 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012240:	685b      	ldr	r3, [r3, #4]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d00e      	beq.n	8012264 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801224c:	685b      	ldr	r3, [r3, #4]
 801224e:	687a      	ldr	r2, [r7, #4]
 8012250:	6852      	ldr	r2, [r2, #4]
 8012252:	b2d2      	uxtb	r2, r2
 8012254:	4611      	mov	r1, r2
 8012256:	6878      	ldr	r0, [r7, #4]
 8012258:	4798      	blx	r3
 801225a:	4603      	mov	r3, r0
 801225c:	2b00      	cmp	r3, #0
 801225e:	d001      	beq.n	8012264 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8012260:	2303      	movs	r3, #3
 8012262:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012264:	2340      	movs	r3, #64	; 0x40
 8012266:	2200      	movs	r2, #0
 8012268:	2100      	movs	r1, #0
 801226a:	6878      	ldr	r0, [r7, #4]
 801226c:	f002 fc08 	bl	8014a80 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	2201      	movs	r2, #1
 8012274:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	2240      	movs	r2, #64	; 0x40
 801227c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012280:	2340      	movs	r3, #64	; 0x40
 8012282:	2200      	movs	r2, #0
 8012284:	2180      	movs	r1, #128	; 0x80
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f002 fbfa 	bl	8014a80 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	2201      	movs	r2, #1
 8012290:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	2240      	movs	r2, #64	; 0x40
 8012296:	621a      	str	r2, [r3, #32]

  return ret;
 8012298:	7bfb      	ldrb	r3, [r7, #15]
}
 801229a:	4618      	mov	r0, r3
 801229c:	3710      	adds	r7, #16
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}

080122a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80122a2:	b480      	push	{r7}
 80122a4:	b083      	sub	sp, #12
 80122a6:	af00      	add	r7, sp, #0
 80122a8:	6078      	str	r0, [r7, #4]
 80122aa:	460b      	mov	r3, r1
 80122ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	78fa      	ldrb	r2, [r7, #3]
 80122b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80122b4:	2300      	movs	r3, #0
}
 80122b6:	4618      	mov	r0, r3
 80122b8:	370c      	adds	r7, #12
 80122ba:	46bd      	mov	sp, r7
 80122bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c0:	4770      	bx	lr

080122c2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80122c2:	b480      	push	{r7}
 80122c4:	b083      	sub	sp, #12
 80122c6:	af00      	add	r7, sp, #0
 80122c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122d0:	b2da      	uxtb	r2, r3
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2204      	movs	r2, #4
 80122dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80122e0:	2300      	movs	r3, #0
}
 80122e2:	4618      	mov	r0, r3
 80122e4:	370c      	adds	r7, #12
 80122e6:	46bd      	mov	sp, r7
 80122e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ec:	4770      	bx	lr

080122ee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80122ee:	b480      	push	{r7}
 80122f0:	b083      	sub	sp, #12
 80122f2:	af00      	add	r7, sp, #0
 80122f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122fc:	b2db      	uxtb	r3, r3
 80122fe:	2b04      	cmp	r3, #4
 8012300:	d106      	bne.n	8012310 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8012308:	b2da      	uxtb	r2, r3
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8012310:	2300      	movs	r3, #0
}
 8012312:	4618      	mov	r0, r3
 8012314:	370c      	adds	r7, #12
 8012316:	46bd      	mov	sp, r7
 8012318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231c:	4770      	bx	lr

0801231e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801231e:	b580      	push	{r7, lr}
 8012320:	b082      	sub	sp, #8
 8012322:	af00      	add	r7, sp, #0
 8012324:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801232c:	b2db      	uxtb	r3, r3
 801232e:	2b03      	cmp	r3, #3
 8012330:	d110      	bne.n	8012354 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012338:	2b00      	cmp	r3, #0
 801233a:	d00b      	beq.n	8012354 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012342:	69db      	ldr	r3, [r3, #28]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d005      	beq.n	8012354 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801234e:	69db      	ldr	r3, [r3, #28]
 8012350:	6878      	ldr	r0, [r7, #4]
 8012352:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8012354:	2300      	movs	r3, #0
}
 8012356:	4618      	mov	r0, r3
 8012358:	3708      	adds	r7, #8
 801235a:	46bd      	mov	sp, r7
 801235c:	bd80      	pop	{r7, pc}

0801235e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801235e:	b580      	push	{r7, lr}
 8012360:	b082      	sub	sp, #8
 8012362:	af00      	add	r7, sp, #0
 8012364:	6078      	str	r0, [r7, #4]
 8012366:	460b      	mov	r3, r1
 8012368:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	32ae      	adds	r2, #174	; 0xae
 8012374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d101      	bne.n	8012380 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801237c:	2303      	movs	r3, #3
 801237e:	e01c      	b.n	80123ba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012386:	b2db      	uxtb	r3, r3
 8012388:	2b03      	cmp	r3, #3
 801238a:	d115      	bne.n	80123b8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	32ae      	adds	r2, #174	; 0xae
 8012396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801239a:	6a1b      	ldr	r3, [r3, #32]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d00b      	beq.n	80123b8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	32ae      	adds	r2, #174	; 0xae
 80123aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123ae:	6a1b      	ldr	r3, [r3, #32]
 80123b0:	78fa      	ldrb	r2, [r7, #3]
 80123b2:	4611      	mov	r1, r2
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80123b8:	2300      	movs	r3, #0
}
 80123ba:	4618      	mov	r0, r3
 80123bc:	3708      	adds	r7, #8
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}

080123c2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80123c2:	b580      	push	{r7, lr}
 80123c4:	b082      	sub	sp, #8
 80123c6:	af00      	add	r7, sp, #0
 80123c8:	6078      	str	r0, [r7, #4]
 80123ca:	460b      	mov	r3, r1
 80123cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	32ae      	adds	r2, #174	; 0xae
 80123d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d101      	bne.n	80123e4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80123e0:	2303      	movs	r3, #3
 80123e2:	e01c      	b.n	801241e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	2b03      	cmp	r3, #3
 80123ee:	d115      	bne.n	801241c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	32ae      	adds	r2, #174	; 0xae
 80123fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012400:	2b00      	cmp	r3, #0
 8012402:	d00b      	beq.n	801241c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	32ae      	adds	r2, #174	; 0xae
 801240e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012414:	78fa      	ldrb	r2, [r7, #3]
 8012416:	4611      	mov	r1, r2
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801241c:	2300      	movs	r3, #0
}
 801241e:	4618      	mov	r0, r3
 8012420:	3708      	adds	r7, #8
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}

08012426 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012426:	b480      	push	{r7}
 8012428:	b083      	sub	sp, #12
 801242a:	af00      	add	r7, sp, #0
 801242c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801242e:	2300      	movs	r3, #0
}
 8012430:	4618      	mov	r0, r3
 8012432:	370c      	adds	r7, #12
 8012434:	46bd      	mov	sp, r7
 8012436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243a:	4770      	bx	lr

0801243c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b084      	sub	sp, #16
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8012444:	2300      	movs	r3, #0
 8012446:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2201      	movs	r2, #1
 801244c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012456:	2b00      	cmp	r3, #0
 8012458:	d00e      	beq.n	8012478 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012460:	685b      	ldr	r3, [r3, #4]
 8012462:	687a      	ldr	r2, [r7, #4]
 8012464:	6852      	ldr	r2, [r2, #4]
 8012466:	b2d2      	uxtb	r2, r2
 8012468:	4611      	mov	r1, r2
 801246a:	6878      	ldr	r0, [r7, #4]
 801246c:	4798      	blx	r3
 801246e:	4603      	mov	r3, r0
 8012470:	2b00      	cmp	r3, #0
 8012472:	d001      	beq.n	8012478 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8012474:	2303      	movs	r3, #3
 8012476:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012478:	7bfb      	ldrb	r3, [r7, #15]
}
 801247a:	4618      	mov	r0, r3
 801247c:	3710      	adds	r7, #16
 801247e:	46bd      	mov	sp, r7
 8012480:	bd80      	pop	{r7, pc}

08012482 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012482:	b480      	push	{r7}
 8012484:	b083      	sub	sp, #12
 8012486:	af00      	add	r7, sp, #0
 8012488:	6078      	str	r0, [r7, #4]
 801248a:	460b      	mov	r3, r1
 801248c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801248e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012490:	4618      	mov	r0, r3
 8012492:	370c      	adds	r7, #12
 8012494:	46bd      	mov	sp, r7
 8012496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249a:	4770      	bx	lr

0801249c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801249c:	b480      	push	{r7}
 801249e:	b083      	sub	sp, #12
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
 80124a4:	460b      	mov	r3, r1
 80124a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80124a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80124aa:	4618      	mov	r0, r3
 80124ac:	370c      	adds	r7, #12
 80124ae:	46bd      	mov	sp, r7
 80124b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b4:	4770      	bx	lr

080124b6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80124b6:	b480      	push	{r7}
 80124b8:	b087      	sub	sp, #28
 80124ba:	af00      	add	r7, sp, #0
 80124bc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	781b      	ldrb	r3, [r3, #0]
 80124c6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80124c8:	697b      	ldr	r3, [r7, #20]
 80124ca:	3301      	adds	r3, #1
 80124cc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80124ce:	697b      	ldr	r3, [r7, #20]
 80124d0:	781b      	ldrb	r3, [r3, #0]
 80124d2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80124d4:	8a3b      	ldrh	r3, [r7, #16]
 80124d6:	021b      	lsls	r3, r3, #8
 80124d8:	b21a      	sxth	r2, r3
 80124da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80124de:	4313      	orrs	r3, r2
 80124e0:	b21b      	sxth	r3, r3
 80124e2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80124e4:	89fb      	ldrh	r3, [r7, #14]
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	371c      	adds	r7, #28
 80124ea:	46bd      	mov	sp, r7
 80124ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f0:	4770      	bx	lr
	...

080124f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b084      	sub	sp, #16
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
 80124fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80124fe:	2300      	movs	r3, #0
 8012500:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	781b      	ldrb	r3, [r3, #0]
 8012506:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801250a:	2b40      	cmp	r3, #64	; 0x40
 801250c:	d005      	beq.n	801251a <USBD_StdDevReq+0x26>
 801250e:	2b40      	cmp	r3, #64	; 0x40
 8012510:	d857      	bhi.n	80125c2 <USBD_StdDevReq+0xce>
 8012512:	2b00      	cmp	r3, #0
 8012514:	d00f      	beq.n	8012536 <USBD_StdDevReq+0x42>
 8012516:	2b20      	cmp	r3, #32
 8012518:	d153      	bne.n	80125c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	32ae      	adds	r2, #174	; 0xae
 8012524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012528:	689b      	ldr	r3, [r3, #8]
 801252a:	6839      	ldr	r1, [r7, #0]
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	4798      	blx	r3
 8012530:	4603      	mov	r3, r0
 8012532:	73fb      	strb	r3, [r7, #15]
      break;
 8012534:	e04a      	b.n	80125cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	785b      	ldrb	r3, [r3, #1]
 801253a:	2b09      	cmp	r3, #9
 801253c:	d83b      	bhi.n	80125b6 <USBD_StdDevReq+0xc2>
 801253e:	a201      	add	r2, pc, #4	; (adr r2, 8012544 <USBD_StdDevReq+0x50>)
 8012540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012544:	08012599 	.word	0x08012599
 8012548:	080125ad 	.word	0x080125ad
 801254c:	080125b7 	.word	0x080125b7
 8012550:	080125a3 	.word	0x080125a3
 8012554:	080125b7 	.word	0x080125b7
 8012558:	08012577 	.word	0x08012577
 801255c:	0801256d 	.word	0x0801256d
 8012560:	080125b7 	.word	0x080125b7
 8012564:	0801258f 	.word	0x0801258f
 8012568:	08012581 	.word	0x08012581
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801256c:	6839      	ldr	r1, [r7, #0]
 801256e:	6878      	ldr	r0, [r7, #4]
 8012570:	f000 fa3c 	bl	80129ec <USBD_GetDescriptor>
          break;
 8012574:	e024      	b.n	80125c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012576:	6839      	ldr	r1, [r7, #0]
 8012578:	6878      	ldr	r0, [r7, #4]
 801257a:	f000 fba1 	bl	8012cc0 <USBD_SetAddress>
          break;
 801257e:	e01f      	b.n	80125c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012580:	6839      	ldr	r1, [r7, #0]
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f000 fbe0 	bl	8012d48 <USBD_SetConfig>
 8012588:	4603      	mov	r3, r0
 801258a:	73fb      	strb	r3, [r7, #15]
          break;
 801258c:	e018      	b.n	80125c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801258e:	6839      	ldr	r1, [r7, #0]
 8012590:	6878      	ldr	r0, [r7, #4]
 8012592:	f000 fc83 	bl	8012e9c <USBD_GetConfig>
          break;
 8012596:	e013      	b.n	80125c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012598:	6839      	ldr	r1, [r7, #0]
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f000 fcb4 	bl	8012f08 <USBD_GetStatus>
          break;
 80125a0:	e00e      	b.n	80125c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80125a2:	6839      	ldr	r1, [r7, #0]
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f000 fce3 	bl	8012f70 <USBD_SetFeature>
          break;
 80125aa:	e009      	b.n	80125c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80125ac:	6839      	ldr	r1, [r7, #0]
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f000 fd07 	bl	8012fc2 <USBD_ClrFeature>
          break;
 80125b4:	e004      	b.n	80125c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80125b6:	6839      	ldr	r1, [r7, #0]
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f000 fd5e 	bl	801307a <USBD_CtlError>
          break;
 80125be:	bf00      	nop
      }
      break;
 80125c0:	e004      	b.n	80125cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80125c2:	6839      	ldr	r1, [r7, #0]
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f000 fd58 	bl	801307a <USBD_CtlError>
      break;
 80125ca:	bf00      	nop
  }

  return ret;
 80125cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	3710      	adds	r7, #16
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd80      	pop	{r7, pc}
 80125d6:	bf00      	nop

080125d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b084      	sub	sp, #16
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
 80125e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80125e2:	2300      	movs	r3, #0
 80125e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80125e6:	683b      	ldr	r3, [r7, #0]
 80125e8:	781b      	ldrb	r3, [r3, #0]
 80125ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80125ee:	2b40      	cmp	r3, #64	; 0x40
 80125f0:	d005      	beq.n	80125fe <USBD_StdItfReq+0x26>
 80125f2:	2b40      	cmp	r3, #64	; 0x40
 80125f4:	d852      	bhi.n	801269c <USBD_StdItfReq+0xc4>
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d001      	beq.n	80125fe <USBD_StdItfReq+0x26>
 80125fa:	2b20      	cmp	r3, #32
 80125fc:	d14e      	bne.n	801269c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012604:	b2db      	uxtb	r3, r3
 8012606:	3b01      	subs	r3, #1
 8012608:	2b02      	cmp	r3, #2
 801260a:	d840      	bhi.n	801268e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	889b      	ldrh	r3, [r3, #4]
 8012610:	b2db      	uxtb	r3, r3
 8012612:	2b01      	cmp	r3, #1
 8012614:	d836      	bhi.n	8012684 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	889b      	ldrh	r3, [r3, #4]
 801261a:	b2db      	uxtb	r3, r3
 801261c:	4619      	mov	r1, r3
 801261e:	6878      	ldr	r0, [r7, #4]
 8012620:	f7ff ff2f 	bl	8012482 <USBD_CoreFindIF>
 8012624:	4603      	mov	r3, r0
 8012626:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012628:	7bbb      	ldrb	r3, [r7, #14]
 801262a:	2bff      	cmp	r3, #255	; 0xff
 801262c:	d01d      	beq.n	801266a <USBD_StdItfReq+0x92>
 801262e:	7bbb      	ldrb	r3, [r7, #14]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d11a      	bne.n	801266a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8012634:	7bba      	ldrb	r2, [r7, #14]
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	32ae      	adds	r2, #174	; 0xae
 801263a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801263e:	689b      	ldr	r3, [r3, #8]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d00f      	beq.n	8012664 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8012644:	7bba      	ldrb	r2, [r7, #14]
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801264c:	7bba      	ldrb	r2, [r7, #14]
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	32ae      	adds	r2, #174	; 0xae
 8012652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012656:	689b      	ldr	r3, [r3, #8]
 8012658:	6839      	ldr	r1, [r7, #0]
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	4798      	blx	r3
 801265e:	4603      	mov	r3, r0
 8012660:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012662:	e004      	b.n	801266e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8012664:	2303      	movs	r3, #3
 8012666:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012668:	e001      	b.n	801266e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801266a:	2303      	movs	r3, #3
 801266c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	88db      	ldrh	r3, [r3, #6]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d110      	bne.n	8012698 <USBD_StdItfReq+0xc0>
 8012676:	7bfb      	ldrb	r3, [r7, #15]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d10d      	bne.n	8012698 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801267c:	6878      	ldr	r0, [r7, #4]
 801267e:	f000 fd4a 	bl	8013116 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012682:	e009      	b.n	8012698 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8012684:	6839      	ldr	r1, [r7, #0]
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	f000 fcf7 	bl	801307a <USBD_CtlError>
          break;
 801268c:	e004      	b.n	8012698 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801268e:	6839      	ldr	r1, [r7, #0]
 8012690:	6878      	ldr	r0, [r7, #4]
 8012692:	f000 fcf2 	bl	801307a <USBD_CtlError>
          break;
 8012696:	e000      	b.n	801269a <USBD_StdItfReq+0xc2>
          break;
 8012698:	bf00      	nop
      }
      break;
 801269a:	e004      	b.n	80126a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801269c:	6839      	ldr	r1, [r7, #0]
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f000 fceb 	bl	801307a <USBD_CtlError>
      break;
 80126a4:	bf00      	nop
  }

  return ret;
 80126a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80126a8:	4618      	mov	r0, r3
 80126aa:	3710      	adds	r7, #16
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bd80      	pop	{r7, pc}

080126b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b084      	sub	sp, #16
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
 80126b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80126ba:	2300      	movs	r3, #0
 80126bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	889b      	ldrh	r3, [r3, #4]
 80126c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80126c4:	683b      	ldr	r3, [r7, #0]
 80126c6:	781b      	ldrb	r3, [r3, #0]
 80126c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80126cc:	2b40      	cmp	r3, #64	; 0x40
 80126ce:	d007      	beq.n	80126e0 <USBD_StdEPReq+0x30>
 80126d0:	2b40      	cmp	r3, #64	; 0x40
 80126d2:	f200 817f 	bhi.w	80129d4 <USBD_StdEPReq+0x324>
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d02a      	beq.n	8012730 <USBD_StdEPReq+0x80>
 80126da:	2b20      	cmp	r3, #32
 80126dc:	f040 817a 	bne.w	80129d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80126e0:	7bbb      	ldrb	r3, [r7, #14]
 80126e2:	4619      	mov	r1, r3
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f7ff fed9 	bl	801249c <USBD_CoreFindEP>
 80126ea:	4603      	mov	r3, r0
 80126ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80126ee:	7b7b      	ldrb	r3, [r7, #13]
 80126f0:	2bff      	cmp	r3, #255	; 0xff
 80126f2:	f000 8174 	beq.w	80129de <USBD_StdEPReq+0x32e>
 80126f6:	7b7b      	ldrb	r3, [r7, #13]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	f040 8170 	bne.w	80129de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80126fe:	7b7a      	ldrb	r2, [r7, #13]
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8012706:	7b7a      	ldrb	r2, [r7, #13]
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	32ae      	adds	r2, #174	; 0xae
 801270c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012710:	689b      	ldr	r3, [r3, #8]
 8012712:	2b00      	cmp	r3, #0
 8012714:	f000 8163 	beq.w	80129de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012718:	7b7a      	ldrb	r2, [r7, #13]
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	32ae      	adds	r2, #174	; 0xae
 801271e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012722:	689b      	ldr	r3, [r3, #8]
 8012724:	6839      	ldr	r1, [r7, #0]
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	4798      	blx	r3
 801272a:	4603      	mov	r3, r0
 801272c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801272e:	e156      	b.n	80129de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	785b      	ldrb	r3, [r3, #1]
 8012734:	2b03      	cmp	r3, #3
 8012736:	d008      	beq.n	801274a <USBD_StdEPReq+0x9a>
 8012738:	2b03      	cmp	r3, #3
 801273a:	f300 8145 	bgt.w	80129c8 <USBD_StdEPReq+0x318>
 801273e:	2b00      	cmp	r3, #0
 8012740:	f000 809b 	beq.w	801287a <USBD_StdEPReq+0x1ca>
 8012744:	2b01      	cmp	r3, #1
 8012746:	d03c      	beq.n	80127c2 <USBD_StdEPReq+0x112>
 8012748:	e13e      	b.n	80129c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012750:	b2db      	uxtb	r3, r3
 8012752:	2b02      	cmp	r3, #2
 8012754:	d002      	beq.n	801275c <USBD_StdEPReq+0xac>
 8012756:	2b03      	cmp	r3, #3
 8012758:	d016      	beq.n	8012788 <USBD_StdEPReq+0xd8>
 801275a:	e02c      	b.n	80127b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801275c:	7bbb      	ldrb	r3, [r7, #14]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d00d      	beq.n	801277e <USBD_StdEPReq+0xce>
 8012762:	7bbb      	ldrb	r3, [r7, #14]
 8012764:	2b80      	cmp	r3, #128	; 0x80
 8012766:	d00a      	beq.n	801277e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012768:	7bbb      	ldrb	r3, [r7, #14]
 801276a:	4619      	mov	r1, r3
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f002 f9ad 	bl	8014acc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012772:	2180      	movs	r1, #128	; 0x80
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f002 f9a9 	bl	8014acc <USBD_LL_StallEP>
 801277a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801277c:	e020      	b.n	80127c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801277e:	6839      	ldr	r1, [r7, #0]
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	f000 fc7a 	bl	801307a <USBD_CtlError>
              break;
 8012786:	e01b      	b.n	80127c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	885b      	ldrh	r3, [r3, #2]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d10e      	bne.n	80127ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012790:	7bbb      	ldrb	r3, [r7, #14]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d00b      	beq.n	80127ae <USBD_StdEPReq+0xfe>
 8012796:	7bbb      	ldrb	r3, [r7, #14]
 8012798:	2b80      	cmp	r3, #128	; 0x80
 801279a:	d008      	beq.n	80127ae <USBD_StdEPReq+0xfe>
 801279c:	683b      	ldr	r3, [r7, #0]
 801279e:	88db      	ldrh	r3, [r3, #6]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d104      	bne.n	80127ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80127a4:	7bbb      	ldrb	r3, [r7, #14]
 80127a6:	4619      	mov	r1, r3
 80127a8:	6878      	ldr	r0, [r7, #4]
 80127aa:	f002 f98f 	bl	8014acc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80127ae:	6878      	ldr	r0, [r7, #4]
 80127b0:	f000 fcb1 	bl	8013116 <USBD_CtlSendStatus>

              break;
 80127b4:	e004      	b.n	80127c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80127b6:	6839      	ldr	r1, [r7, #0]
 80127b8:	6878      	ldr	r0, [r7, #4]
 80127ba:	f000 fc5e 	bl	801307a <USBD_CtlError>
              break;
 80127be:	bf00      	nop
          }
          break;
 80127c0:	e107      	b.n	80129d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127c8:	b2db      	uxtb	r3, r3
 80127ca:	2b02      	cmp	r3, #2
 80127cc:	d002      	beq.n	80127d4 <USBD_StdEPReq+0x124>
 80127ce:	2b03      	cmp	r3, #3
 80127d0:	d016      	beq.n	8012800 <USBD_StdEPReq+0x150>
 80127d2:	e04b      	b.n	801286c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80127d4:	7bbb      	ldrb	r3, [r7, #14]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d00d      	beq.n	80127f6 <USBD_StdEPReq+0x146>
 80127da:	7bbb      	ldrb	r3, [r7, #14]
 80127dc:	2b80      	cmp	r3, #128	; 0x80
 80127de:	d00a      	beq.n	80127f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80127e0:	7bbb      	ldrb	r3, [r7, #14]
 80127e2:	4619      	mov	r1, r3
 80127e4:	6878      	ldr	r0, [r7, #4]
 80127e6:	f002 f971 	bl	8014acc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80127ea:	2180      	movs	r1, #128	; 0x80
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f002 f96d 	bl	8014acc <USBD_LL_StallEP>
 80127f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80127f4:	e040      	b.n	8012878 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80127f6:	6839      	ldr	r1, [r7, #0]
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	f000 fc3e 	bl	801307a <USBD_CtlError>
              break;
 80127fe:	e03b      	b.n	8012878 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012800:	683b      	ldr	r3, [r7, #0]
 8012802:	885b      	ldrh	r3, [r3, #2]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d136      	bne.n	8012876 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012808:	7bbb      	ldrb	r3, [r7, #14]
 801280a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801280e:	2b00      	cmp	r3, #0
 8012810:	d004      	beq.n	801281c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012812:	7bbb      	ldrb	r3, [r7, #14]
 8012814:	4619      	mov	r1, r3
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	f002 f977 	bl	8014b0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801281c:	6878      	ldr	r0, [r7, #4]
 801281e:	f000 fc7a 	bl	8013116 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8012822:	7bbb      	ldrb	r3, [r7, #14]
 8012824:	4619      	mov	r1, r3
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f7ff fe38 	bl	801249c <USBD_CoreFindEP>
 801282c:	4603      	mov	r3, r0
 801282e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012830:	7b7b      	ldrb	r3, [r7, #13]
 8012832:	2bff      	cmp	r3, #255	; 0xff
 8012834:	d01f      	beq.n	8012876 <USBD_StdEPReq+0x1c6>
 8012836:	7b7b      	ldrb	r3, [r7, #13]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d11c      	bne.n	8012876 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801283c:	7b7a      	ldrb	r2, [r7, #13]
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8012844:	7b7a      	ldrb	r2, [r7, #13]
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	32ae      	adds	r2, #174	; 0xae
 801284a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801284e:	689b      	ldr	r3, [r3, #8]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d010      	beq.n	8012876 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012854:	7b7a      	ldrb	r2, [r7, #13]
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	32ae      	adds	r2, #174	; 0xae
 801285a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801285e:	689b      	ldr	r3, [r3, #8]
 8012860:	6839      	ldr	r1, [r7, #0]
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	4798      	blx	r3
 8012866:	4603      	mov	r3, r0
 8012868:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801286a:	e004      	b.n	8012876 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801286c:	6839      	ldr	r1, [r7, #0]
 801286e:	6878      	ldr	r0, [r7, #4]
 8012870:	f000 fc03 	bl	801307a <USBD_CtlError>
              break;
 8012874:	e000      	b.n	8012878 <USBD_StdEPReq+0x1c8>
              break;
 8012876:	bf00      	nop
          }
          break;
 8012878:	e0ab      	b.n	80129d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012880:	b2db      	uxtb	r3, r3
 8012882:	2b02      	cmp	r3, #2
 8012884:	d002      	beq.n	801288c <USBD_StdEPReq+0x1dc>
 8012886:	2b03      	cmp	r3, #3
 8012888:	d032      	beq.n	80128f0 <USBD_StdEPReq+0x240>
 801288a:	e097      	b.n	80129bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801288c:	7bbb      	ldrb	r3, [r7, #14]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d007      	beq.n	80128a2 <USBD_StdEPReq+0x1f2>
 8012892:	7bbb      	ldrb	r3, [r7, #14]
 8012894:	2b80      	cmp	r3, #128	; 0x80
 8012896:	d004      	beq.n	80128a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8012898:	6839      	ldr	r1, [r7, #0]
 801289a:	6878      	ldr	r0, [r7, #4]
 801289c:	f000 fbed 	bl	801307a <USBD_CtlError>
                break;
 80128a0:	e091      	b.n	80129c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80128a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	da0b      	bge.n	80128c2 <USBD_StdEPReq+0x212>
 80128aa:	7bbb      	ldrb	r3, [r7, #14]
 80128ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80128b0:	4613      	mov	r3, r2
 80128b2:	009b      	lsls	r3, r3, #2
 80128b4:	4413      	add	r3, r2
 80128b6:	009b      	lsls	r3, r3, #2
 80128b8:	3310      	adds	r3, #16
 80128ba:	687a      	ldr	r2, [r7, #4]
 80128bc:	4413      	add	r3, r2
 80128be:	3304      	adds	r3, #4
 80128c0:	e00b      	b.n	80128da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80128c2:	7bbb      	ldrb	r3, [r7, #14]
 80128c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80128c8:	4613      	mov	r3, r2
 80128ca:	009b      	lsls	r3, r3, #2
 80128cc:	4413      	add	r3, r2
 80128ce:	009b      	lsls	r3, r3, #2
 80128d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80128d4:	687a      	ldr	r2, [r7, #4]
 80128d6:	4413      	add	r3, r2
 80128d8:	3304      	adds	r3, #4
 80128da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80128dc:	68bb      	ldr	r3, [r7, #8]
 80128de:	2200      	movs	r2, #0
 80128e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80128e2:	68bb      	ldr	r3, [r7, #8]
 80128e4:	2202      	movs	r2, #2
 80128e6:	4619      	mov	r1, r3
 80128e8:	6878      	ldr	r0, [r7, #4]
 80128ea:	f000 fbd7 	bl	801309c <USBD_CtlSendData>
              break;
 80128ee:	e06a      	b.n	80129c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80128f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	da11      	bge.n	801291c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80128f8:	7bbb      	ldrb	r3, [r7, #14]
 80128fa:	f003 020f 	and.w	r2, r3, #15
 80128fe:	6879      	ldr	r1, [r7, #4]
 8012900:	4613      	mov	r3, r2
 8012902:	009b      	lsls	r3, r3, #2
 8012904:	4413      	add	r3, r2
 8012906:	009b      	lsls	r3, r3, #2
 8012908:	440b      	add	r3, r1
 801290a:	3324      	adds	r3, #36	; 0x24
 801290c:	881b      	ldrh	r3, [r3, #0]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d117      	bne.n	8012942 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012912:	6839      	ldr	r1, [r7, #0]
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f000 fbb0 	bl	801307a <USBD_CtlError>
                  break;
 801291a:	e054      	b.n	80129c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801291c:	7bbb      	ldrb	r3, [r7, #14]
 801291e:	f003 020f 	and.w	r2, r3, #15
 8012922:	6879      	ldr	r1, [r7, #4]
 8012924:	4613      	mov	r3, r2
 8012926:	009b      	lsls	r3, r3, #2
 8012928:	4413      	add	r3, r2
 801292a:	009b      	lsls	r3, r3, #2
 801292c:	440b      	add	r3, r1
 801292e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012932:	881b      	ldrh	r3, [r3, #0]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d104      	bne.n	8012942 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012938:	6839      	ldr	r1, [r7, #0]
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f000 fb9d 	bl	801307a <USBD_CtlError>
                  break;
 8012940:	e041      	b.n	80129c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012942:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012946:	2b00      	cmp	r3, #0
 8012948:	da0b      	bge.n	8012962 <USBD_StdEPReq+0x2b2>
 801294a:	7bbb      	ldrb	r3, [r7, #14]
 801294c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012950:	4613      	mov	r3, r2
 8012952:	009b      	lsls	r3, r3, #2
 8012954:	4413      	add	r3, r2
 8012956:	009b      	lsls	r3, r3, #2
 8012958:	3310      	adds	r3, #16
 801295a:	687a      	ldr	r2, [r7, #4]
 801295c:	4413      	add	r3, r2
 801295e:	3304      	adds	r3, #4
 8012960:	e00b      	b.n	801297a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012962:	7bbb      	ldrb	r3, [r7, #14]
 8012964:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012968:	4613      	mov	r3, r2
 801296a:	009b      	lsls	r3, r3, #2
 801296c:	4413      	add	r3, r2
 801296e:	009b      	lsls	r3, r3, #2
 8012970:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012974:	687a      	ldr	r2, [r7, #4]
 8012976:	4413      	add	r3, r2
 8012978:	3304      	adds	r3, #4
 801297a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801297c:	7bbb      	ldrb	r3, [r7, #14]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d002      	beq.n	8012988 <USBD_StdEPReq+0x2d8>
 8012982:	7bbb      	ldrb	r3, [r7, #14]
 8012984:	2b80      	cmp	r3, #128	; 0x80
 8012986:	d103      	bne.n	8012990 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8012988:	68bb      	ldr	r3, [r7, #8]
 801298a:	2200      	movs	r2, #0
 801298c:	601a      	str	r2, [r3, #0]
 801298e:	e00e      	b.n	80129ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012990:	7bbb      	ldrb	r3, [r7, #14]
 8012992:	4619      	mov	r1, r3
 8012994:	6878      	ldr	r0, [r7, #4]
 8012996:	f002 f8d7 	bl	8014b48 <USBD_LL_IsStallEP>
 801299a:	4603      	mov	r3, r0
 801299c:	2b00      	cmp	r3, #0
 801299e:	d003      	beq.n	80129a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	2201      	movs	r2, #1
 80129a4:	601a      	str	r2, [r3, #0]
 80129a6:	e002      	b.n	80129ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80129a8:	68bb      	ldr	r3, [r7, #8]
 80129aa:	2200      	movs	r2, #0
 80129ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	2202      	movs	r2, #2
 80129b2:	4619      	mov	r1, r3
 80129b4:	6878      	ldr	r0, [r7, #4]
 80129b6:	f000 fb71 	bl	801309c <USBD_CtlSendData>
              break;
 80129ba:	e004      	b.n	80129c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80129bc:	6839      	ldr	r1, [r7, #0]
 80129be:	6878      	ldr	r0, [r7, #4]
 80129c0:	f000 fb5b 	bl	801307a <USBD_CtlError>
              break;
 80129c4:	bf00      	nop
          }
          break;
 80129c6:	e004      	b.n	80129d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80129c8:	6839      	ldr	r1, [r7, #0]
 80129ca:	6878      	ldr	r0, [r7, #4]
 80129cc:	f000 fb55 	bl	801307a <USBD_CtlError>
          break;
 80129d0:	bf00      	nop
      }
      break;
 80129d2:	e005      	b.n	80129e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80129d4:	6839      	ldr	r1, [r7, #0]
 80129d6:	6878      	ldr	r0, [r7, #4]
 80129d8:	f000 fb4f 	bl	801307a <USBD_CtlError>
      break;
 80129dc:	e000      	b.n	80129e0 <USBD_StdEPReq+0x330>
      break;
 80129de:	bf00      	nop
  }

  return ret;
 80129e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80129e2:	4618      	mov	r0, r3
 80129e4:	3710      	adds	r7, #16
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}
	...

080129ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b084      	sub	sp, #16
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
 80129f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80129f6:	2300      	movs	r3, #0
 80129f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80129fa:	2300      	movs	r3, #0
 80129fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80129fe:	2300      	movs	r3, #0
 8012a00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	885b      	ldrh	r3, [r3, #2]
 8012a06:	0a1b      	lsrs	r3, r3, #8
 8012a08:	b29b      	uxth	r3, r3
 8012a0a:	3b01      	subs	r3, #1
 8012a0c:	2b06      	cmp	r3, #6
 8012a0e:	f200 8128 	bhi.w	8012c62 <USBD_GetDescriptor+0x276>
 8012a12:	a201      	add	r2, pc, #4	; (adr r2, 8012a18 <USBD_GetDescriptor+0x2c>)
 8012a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a18:	08012a35 	.word	0x08012a35
 8012a1c:	08012a4d 	.word	0x08012a4d
 8012a20:	08012a8d 	.word	0x08012a8d
 8012a24:	08012c63 	.word	0x08012c63
 8012a28:	08012c63 	.word	0x08012c63
 8012a2c:	08012c03 	.word	0x08012c03
 8012a30:	08012c2f 	.word	0x08012c2f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	687a      	ldr	r2, [r7, #4]
 8012a3e:	7c12      	ldrb	r2, [r2, #16]
 8012a40:	f107 0108 	add.w	r1, r7, #8
 8012a44:	4610      	mov	r0, r2
 8012a46:	4798      	blx	r3
 8012a48:	60f8      	str	r0, [r7, #12]
      break;
 8012a4a:	e112      	b.n	8012c72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	7c1b      	ldrb	r3, [r3, #16]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d10d      	bne.n	8012a70 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a5c:	f107 0208 	add.w	r2, r7, #8
 8012a60:	4610      	mov	r0, r2
 8012a62:	4798      	blx	r3
 8012a64:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	3301      	adds	r3, #1
 8012a6a:	2202      	movs	r2, #2
 8012a6c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012a6e:	e100      	b.n	8012c72 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a78:	f107 0208 	add.w	r2, r7, #8
 8012a7c:	4610      	mov	r0, r2
 8012a7e:	4798      	blx	r3
 8012a80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	3301      	adds	r3, #1
 8012a86:	2202      	movs	r2, #2
 8012a88:	701a      	strb	r2, [r3, #0]
      break;
 8012a8a:	e0f2      	b.n	8012c72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012a8c:	683b      	ldr	r3, [r7, #0]
 8012a8e:	885b      	ldrh	r3, [r3, #2]
 8012a90:	b2db      	uxtb	r3, r3
 8012a92:	2b05      	cmp	r3, #5
 8012a94:	f200 80ac 	bhi.w	8012bf0 <USBD_GetDescriptor+0x204>
 8012a98:	a201      	add	r2, pc, #4	; (adr r2, 8012aa0 <USBD_GetDescriptor+0xb4>)
 8012a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a9e:	bf00      	nop
 8012aa0:	08012ab9 	.word	0x08012ab9
 8012aa4:	08012aed 	.word	0x08012aed
 8012aa8:	08012b21 	.word	0x08012b21
 8012aac:	08012b55 	.word	0x08012b55
 8012ab0:	08012b89 	.word	0x08012b89
 8012ab4:	08012bbd 	.word	0x08012bbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012abe:	685b      	ldr	r3, [r3, #4]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d00b      	beq.n	8012adc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012aca:	685b      	ldr	r3, [r3, #4]
 8012acc:	687a      	ldr	r2, [r7, #4]
 8012ace:	7c12      	ldrb	r2, [r2, #16]
 8012ad0:	f107 0108 	add.w	r1, r7, #8
 8012ad4:	4610      	mov	r0, r2
 8012ad6:	4798      	blx	r3
 8012ad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012ada:	e091      	b.n	8012c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012adc:	6839      	ldr	r1, [r7, #0]
 8012ade:	6878      	ldr	r0, [r7, #4]
 8012ae0:	f000 facb 	bl	801307a <USBD_CtlError>
            err++;
 8012ae4:	7afb      	ldrb	r3, [r7, #11]
 8012ae6:	3301      	adds	r3, #1
 8012ae8:	72fb      	strb	r3, [r7, #11]
          break;
 8012aea:	e089      	b.n	8012c00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012af2:	689b      	ldr	r3, [r3, #8]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d00b      	beq.n	8012b10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012afe:	689b      	ldr	r3, [r3, #8]
 8012b00:	687a      	ldr	r2, [r7, #4]
 8012b02:	7c12      	ldrb	r2, [r2, #16]
 8012b04:	f107 0108 	add.w	r1, r7, #8
 8012b08:	4610      	mov	r0, r2
 8012b0a:	4798      	blx	r3
 8012b0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012b0e:	e077      	b.n	8012c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012b10:	6839      	ldr	r1, [r7, #0]
 8012b12:	6878      	ldr	r0, [r7, #4]
 8012b14:	f000 fab1 	bl	801307a <USBD_CtlError>
            err++;
 8012b18:	7afb      	ldrb	r3, [r7, #11]
 8012b1a:	3301      	adds	r3, #1
 8012b1c:	72fb      	strb	r3, [r7, #11]
          break;
 8012b1e:	e06f      	b.n	8012c00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b26:	68db      	ldr	r3, [r3, #12]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d00b      	beq.n	8012b44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b32:	68db      	ldr	r3, [r3, #12]
 8012b34:	687a      	ldr	r2, [r7, #4]
 8012b36:	7c12      	ldrb	r2, [r2, #16]
 8012b38:	f107 0108 	add.w	r1, r7, #8
 8012b3c:	4610      	mov	r0, r2
 8012b3e:	4798      	blx	r3
 8012b40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012b42:	e05d      	b.n	8012c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012b44:	6839      	ldr	r1, [r7, #0]
 8012b46:	6878      	ldr	r0, [r7, #4]
 8012b48:	f000 fa97 	bl	801307a <USBD_CtlError>
            err++;
 8012b4c:	7afb      	ldrb	r3, [r7, #11]
 8012b4e:	3301      	adds	r3, #1
 8012b50:	72fb      	strb	r3, [r7, #11]
          break;
 8012b52:	e055      	b.n	8012c00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b5a:	691b      	ldr	r3, [r3, #16]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d00b      	beq.n	8012b78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b66:	691b      	ldr	r3, [r3, #16]
 8012b68:	687a      	ldr	r2, [r7, #4]
 8012b6a:	7c12      	ldrb	r2, [r2, #16]
 8012b6c:	f107 0108 	add.w	r1, r7, #8
 8012b70:	4610      	mov	r0, r2
 8012b72:	4798      	blx	r3
 8012b74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012b76:	e043      	b.n	8012c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012b78:	6839      	ldr	r1, [r7, #0]
 8012b7a:	6878      	ldr	r0, [r7, #4]
 8012b7c:	f000 fa7d 	bl	801307a <USBD_CtlError>
            err++;
 8012b80:	7afb      	ldrb	r3, [r7, #11]
 8012b82:	3301      	adds	r3, #1
 8012b84:	72fb      	strb	r3, [r7, #11]
          break;
 8012b86:	e03b      	b.n	8012c00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b8e:	695b      	ldr	r3, [r3, #20]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d00b      	beq.n	8012bac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b9a:	695b      	ldr	r3, [r3, #20]
 8012b9c:	687a      	ldr	r2, [r7, #4]
 8012b9e:	7c12      	ldrb	r2, [r2, #16]
 8012ba0:	f107 0108 	add.w	r1, r7, #8
 8012ba4:	4610      	mov	r0, r2
 8012ba6:	4798      	blx	r3
 8012ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012baa:	e029      	b.n	8012c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012bac:	6839      	ldr	r1, [r7, #0]
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	f000 fa63 	bl	801307a <USBD_CtlError>
            err++;
 8012bb4:	7afb      	ldrb	r3, [r7, #11]
 8012bb6:	3301      	adds	r3, #1
 8012bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8012bba:	e021      	b.n	8012c00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012bc2:	699b      	ldr	r3, [r3, #24]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d00b      	beq.n	8012be0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012bce:	699b      	ldr	r3, [r3, #24]
 8012bd0:	687a      	ldr	r2, [r7, #4]
 8012bd2:	7c12      	ldrb	r2, [r2, #16]
 8012bd4:	f107 0108 	add.w	r1, r7, #8
 8012bd8:	4610      	mov	r0, r2
 8012bda:	4798      	blx	r3
 8012bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012bde:	e00f      	b.n	8012c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012be0:	6839      	ldr	r1, [r7, #0]
 8012be2:	6878      	ldr	r0, [r7, #4]
 8012be4:	f000 fa49 	bl	801307a <USBD_CtlError>
            err++;
 8012be8:	7afb      	ldrb	r3, [r7, #11]
 8012bea:	3301      	adds	r3, #1
 8012bec:	72fb      	strb	r3, [r7, #11]
          break;
 8012bee:	e007      	b.n	8012c00 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012bf0:	6839      	ldr	r1, [r7, #0]
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f000 fa41 	bl	801307a <USBD_CtlError>
          err++;
 8012bf8:	7afb      	ldrb	r3, [r7, #11]
 8012bfa:	3301      	adds	r3, #1
 8012bfc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012bfe:	bf00      	nop
      }
      break;
 8012c00:	e037      	b.n	8012c72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	7c1b      	ldrb	r3, [r3, #16]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d109      	bne.n	8012c1e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c12:	f107 0208 	add.w	r2, r7, #8
 8012c16:	4610      	mov	r0, r2
 8012c18:	4798      	blx	r3
 8012c1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012c1c:	e029      	b.n	8012c72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012c1e:	6839      	ldr	r1, [r7, #0]
 8012c20:	6878      	ldr	r0, [r7, #4]
 8012c22:	f000 fa2a 	bl	801307a <USBD_CtlError>
        err++;
 8012c26:	7afb      	ldrb	r3, [r7, #11]
 8012c28:	3301      	adds	r3, #1
 8012c2a:	72fb      	strb	r3, [r7, #11]
      break;
 8012c2c:	e021      	b.n	8012c72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	7c1b      	ldrb	r3, [r3, #16]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d10d      	bne.n	8012c52 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c3e:	f107 0208 	add.w	r2, r7, #8
 8012c42:	4610      	mov	r0, r2
 8012c44:	4798      	blx	r3
 8012c46:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	3301      	adds	r3, #1
 8012c4c:	2207      	movs	r2, #7
 8012c4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012c50:	e00f      	b.n	8012c72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012c52:	6839      	ldr	r1, [r7, #0]
 8012c54:	6878      	ldr	r0, [r7, #4]
 8012c56:	f000 fa10 	bl	801307a <USBD_CtlError>
        err++;
 8012c5a:	7afb      	ldrb	r3, [r7, #11]
 8012c5c:	3301      	adds	r3, #1
 8012c5e:	72fb      	strb	r3, [r7, #11]
      break;
 8012c60:	e007      	b.n	8012c72 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8012c62:	6839      	ldr	r1, [r7, #0]
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f000 fa08 	bl	801307a <USBD_CtlError>
      err++;
 8012c6a:	7afb      	ldrb	r3, [r7, #11]
 8012c6c:	3301      	adds	r3, #1
 8012c6e:	72fb      	strb	r3, [r7, #11]
      break;
 8012c70:	bf00      	nop
  }

  if (err != 0U)
 8012c72:	7afb      	ldrb	r3, [r7, #11]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d11e      	bne.n	8012cb6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8012c78:	683b      	ldr	r3, [r7, #0]
 8012c7a:	88db      	ldrh	r3, [r3, #6]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d016      	beq.n	8012cae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8012c80:	893b      	ldrh	r3, [r7, #8]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d00e      	beq.n	8012ca4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	88da      	ldrh	r2, [r3, #6]
 8012c8a:	893b      	ldrh	r3, [r7, #8]
 8012c8c:	4293      	cmp	r3, r2
 8012c8e:	bf28      	it	cs
 8012c90:	4613      	movcs	r3, r2
 8012c92:	b29b      	uxth	r3, r3
 8012c94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012c96:	893b      	ldrh	r3, [r7, #8]
 8012c98:	461a      	mov	r2, r3
 8012c9a:	68f9      	ldr	r1, [r7, #12]
 8012c9c:	6878      	ldr	r0, [r7, #4]
 8012c9e:	f000 f9fd 	bl	801309c <USBD_CtlSendData>
 8012ca2:	e009      	b.n	8012cb8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012ca4:	6839      	ldr	r1, [r7, #0]
 8012ca6:	6878      	ldr	r0, [r7, #4]
 8012ca8:	f000 f9e7 	bl	801307a <USBD_CtlError>
 8012cac:	e004      	b.n	8012cb8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012cae:	6878      	ldr	r0, [r7, #4]
 8012cb0:	f000 fa31 	bl	8013116 <USBD_CtlSendStatus>
 8012cb4:	e000      	b.n	8012cb8 <USBD_GetDescriptor+0x2cc>
    return;
 8012cb6:	bf00      	nop
  }
}
 8012cb8:	3710      	adds	r7, #16
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}
 8012cbe:	bf00      	nop

08012cc0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b084      	sub	sp, #16
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
 8012cc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012cca:	683b      	ldr	r3, [r7, #0]
 8012ccc:	889b      	ldrh	r3, [r3, #4]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d131      	bne.n	8012d36 <USBD_SetAddress+0x76>
 8012cd2:	683b      	ldr	r3, [r7, #0]
 8012cd4:	88db      	ldrh	r3, [r3, #6]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d12d      	bne.n	8012d36 <USBD_SetAddress+0x76>
 8012cda:	683b      	ldr	r3, [r7, #0]
 8012cdc:	885b      	ldrh	r3, [r3, #2]
 8012cde:	2b7f      	cmp	r3, #127	; 0x7f
 8012ce0:	d829      	bhi.n	8012d36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012ce2:	683b      	ldr	r3, [r7, #0]
 8012ce4:	885b      	ldrh	r3, [r3, #2]
 8012ce6:	b2db      	uxtb	r3, r3
 8012ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012cec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012cf4:	b2db      	uxtb	r3, r3
 8012cf6:	2b03      	cmp	r3, #3
 8012cf8:	d104      	bne.n	8012d04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012cfa:	6839      	ldr	r1, [r7, #0]
 8012cfc:	6878      	ldr	r0, [r7, #4]
 8012cfe:	f000 f9bc 	bl	801307a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012d02:	e01d      	b.n	8012d40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	7bfa      	ldrb	r2, [r7, #15]
 8012d08:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012d0c:	7bfb      	ldrb	r3, [r7, #15]
 8012d0e:	4619      	mov	r1, r3
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f001 ff45 	bl	8014ba0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012d16:	6878      	ldr	r0, [r7, #4]
 8012d18:	f000 f9fd 	bl	8013116 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012d1c:	7bfb      	ldrb	r3, [r7, #15]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d004      	beq.n	8012d2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	2202      	movs	r2, #2
 8012d26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012d2a:	e009      	b.n	8012d40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2201      	movs	r2, #1
 8012d30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012d34:	e004      	b.n	8012d40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012d36:	6839      	ldr	r1, [r7, #0]
 8012d38:	6878      	ldr	r0, [r7, #4]
 8012d3a:	f000 f99e 	bl	801307a <USBD_CtlError>
  }
}
 8012d3e:	bf00      	nop
 8012d40:	bf00      	nop
 8012d42:	3710      	adds	r7, #16
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd80      	pop	{r7, pc}

08012d48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b084      	sub	sp, #16
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
 8012d50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012d52:	2300      	movs	r3, #0
 8012d54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012d56:	683b      	ldr	r3, [r7, #0]
 8012d58:	885b      	ldrh	r3, [r3, #2]
 8012d5a:	b2da      	uxtb	r2, r3
 8012d5c:	4b4e      	ldr	r3, [pc, #312]	; (8012e98 <USBD_SetConfig+0x150>)
 8012d5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012d60:	4b4d      	ldr	r3, [pc, #308]	; (8012e98 <USBD_SetConfig+0x150>)
 8012d62:	781b      	ldrb	r3, [r3, #0]
 8012d64:	2b01      	cmp	r3, #1
 8012d66:	d905      	bls.n	8012d74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012d68:	6839      	ldr	r1, [r7, #0]
 8012d6a:	6878      	ldr	r0, [r7, #4]
 8012d6c:	f000 f985 	bl	801307a <USBD_CtlError>
    return USBD_FAIL;
 8012d70:	2303      	movs	r3, #3
 8012d72:	e08c      	b.n	8012e8e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012d7a:	b2db      	uxtb	r3, r3
 8012d7c:	2b02      	cmp	r3, #2
 8012d7e:	d002      	beq.n	8012d86 <USBD_SetConfig+0x3e>
 8012d80:	2b03      	cmp	r3, #3
 8012d82:	d029      	beq.n	8012dd8 <USBD_SetConfig+0x90>
 8012d84:	e075      	b.n	8012e72 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012d86:	4b44      	ldr	r3, [pc, #272]	; (8012e98 <USBD_SetConfig+0x150>)
 8012d88:	781b      	ldrb	r3, [r3, #0]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d020      	beq.n	8012dd0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012d8e:	4b42      	ldr	r3, [pc, #264]	; (8012e98 <USBD_SetConfig+0x150>)
 8012d90:	781b      	ldrb	r3, [r3, #0]
 8012d92:	461a      	mov	r2, r3
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012d98:	4b3f      	ldr	r3, [pc, #252]	; (8012e98 <USBD_SetConfig+0x150>)
 8012d9a:	781b      	ldrb	r3, [r3, #0]
 8012d9c:	4619      	mov	r1, r3
 8012d9e:	6878      	ldr	r0, [r7, #4]
 8012da0:	f7ff f83d 	bl	8011e1e <USBD_SetClassConfig>
 8012da4:	4603      	mov	r3, r0
 8012da6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012da8:	7bfb      	ldrb	r3, [r7, #15]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d008      	beq.n	8012dc0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012dae:	6839      	ldr	r1, [r7, #0]
 8012db0:	6878      	ldr	r0, [r7, #4]
 8012db2:	f000 f962 	bl	801307a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	2202      	movs	r2, #2
 8012dba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012dbe:	e065      	b.n	8012e8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f000 f9a8 	bl	8013116 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	2203      	movs	r2, #3
 8012dca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012dce:	e05d      	b.n	8012e8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012dd0:	6878      	ldr	r0, [r7, #4]
 8012dd2:	f000 f9a0 	bl	8013116 <USBD_CtlSendStatus>
      break;
 8012dd6:	e059      	b.n	8012e8c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012dd8:	4b2f      	ldr	r3, [pc, #188]	; (8012e98 <USBD_SetConfig+0x150>)
 8012dda:	781b      	ldrb	r3, [r3, #0]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d112      	bne.n	8012e06 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	2202      	movs	r2, #2
 8012de4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012de8:	4b2b      	ldr	r3, [pc, #172]	; (8012e98 <USBD_SetConfig+0x150>)
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	461a      	mov	r2, r3
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012df2:	4b29      	ldr	r3, [pc, #164]	; (8012e98 <USBD_SetConfig+0x150>)
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	4619      	mov	r1, r3
 8012df8:	6878      	ldr	r0, [r7, #4]
 8012dfa:	f7ff f82c 	bl	8011e56 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012dfe:	6878      	ldr	r0, [r7, #4]
 8012e00:	f000 f989 	bl	8013116 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012e04:	e042      	b.n	8012e8c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012e06:	4b24      	ldr	r3, [pc, #144]	; (8012e98 <USBD_SetConfig+0x150>)
 8012e08:	781b      	ldrb	r3, [r3, #0]
 8012e0a:	461a      	mov	r2, r3
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	685b      	ldr	r3, [r3, #4]
 8012e10:	429a      	cmp	r2, r3
 8012e12:	d02a      	beq.n	8012e6a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	685b      	ldr	r3, [r3, #4]
 8012e18:	b2db      	uxtb	r3, r3
 8012e1a:	4619      	mov	r1, r3
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	f7ff f81a 	bl	8011e56 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012e22:	4b1d      	ldr	r3, [pc, #116]	; (8012e98 <USBD_SetConfig+0x150>)
 8012e24:	781b      	ldrb	r3, [r3, #0]
 8012e26:	461a      	mov	r2, r3
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012e2c:	4b1a      	ldr	r3, [pc, #104]	; (8012e98 <USBD_SetConfig+0x150>)
 8012e2e:	781b      	ldrb	r3, [r3, #0]
 8012e30:	4619      	mov	r1, r3
 8012e32:	6878      	ldr	r0, [r7, #4]
 8012e34:	f7fe fff3 	bl	8011e1e <USBD_SetClassConfig>
 8012e38:	4603      	mov	r3, r0
 8012e3a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012e3c:	7bfb      	ldrb	r3, [r7, #15]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d00f      	beq.n	8012e62 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8012e42:	6839      	ldr	r1, [r7, #0]
 8012e44:	6878      	ldr	r0, [r7, #4]
 8012e46:	f000 f918 	bl	801307a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	685b      	ldr	r3, [r3, #4]
 8012e4e:	b2db      	uxtb	r3, r3
 8012e50:	4619      	mov	r1, r3
 8012e52:	6878      	ldr	r0, [r7, #4]
 8012e54:	f7fe ffff 	bl	8011e56 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	2202      	movs	r2, #2
 8012e5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012e60:	e014      	b.n	8012e8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012e62:	6878      	ldr	r0, [r7, #4]
 8012e64:	f000 f957 	bl	8013116 <USBD_CtlSendStatus>
      break;
 8012e68:	e010      	b.n	8012e8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012e6a:	6878      	ldr	r0, [r7, #4]
 8012e6c:	f000 f953 	bl	8013116 <USBD_CtlSendStatus>
      break;
 8012e70:	e00c      	b.n	8012e8c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012e72:	6839      	ldr	r1, [r7, #0]
 8012e74:	6878      	ldr	r0, [r7, #4]
 8012e76:	f000 f900 	bl	801307a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012e7a:	4b07      	ldr	r3, [pc, #28]	; (8012e98 <USBD_SetConfig+0x150>)
 8012e7c:	781b      	ldrb	r3, [r3, #0]
 8012e7e:	4619      	mov	r1, r3
 8012e80:	6878      	ldr	r0, [r7, #4]
 8012e82:	f7fe ffe8 	bl	8011e56 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012e86:	2303      	movs	r3, #3
 8012e88:	73fb      	strb	r3, [r7, #15]
      break;
 8012e8a:	bf00      	nop
  }

  return ret;
 8012e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3710      	adds	r7, #16
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}
 8012e96:	bf00      	nop
 8012e98:	2000096c 	.word	0x2000096c

08012e9c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b082      	sub	sp, #8
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
 8012ea4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	88db      	ldrh	r3, [r3, #6]
 8012eaa:	2b01      	cmp	r3, #1
 8012eac:	d004      	beq.n	8012eb8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012eae:	6839      	ldr	r1, [r7, #0]
 8012eb0:	6878      	ldr	r0, [r7, #4]
 8012eb2:	f000 f8e2 	bl	801307a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012eb6:	e023      	b.n	8012f00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ebe:	b2db      	uxtb	r3, r3
 8012ec0:	2b02      	cmp	r3, #2
 8012ec2:	dc02      	bgt.n	8012eca <USBD_GetConfig+0x2e>
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	dc03      	bgt.n	8012ed0 <USBD_GetConfig+0x34>
 8012ec8:	e015      	b.n	8012ef6 <USBD_GetConfig+0x5a>
 8012eca:	2b03      	cmp	r3, #3
 8012ecc:	d00b      	beq.n	8012ee6 <USBD_GetConfig+0x4a>
 8012ece:	e012      	b.n	8012ef6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	3308      	adds	r3, #8
 8012eda:	2201      	movs	r2, #1
 8012edc:	4619      	mov	r1, r3
 8012ede:	6878      	ldr	r0, [r7, #4]
 8012ee0:	f000 f8dc 	bl	801309c <USBD_CtlSendData>
        break;
 8012ee4:	e00c      	b.n	8012f00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	3304      	adds	r3, #4
 8012eea:	2201      	movs	r2, #1
 8012eec:	4619      	mov	r1, r3
 8012eee:	6878      	ldr	r0, [r7, #4]
 8012ef0:	f000 f8d4 	bl	801309c <USBD_CtlSendData>
        break;
 8012ef4:	e004      	b.n	8012f00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012ef6:	6839      	ldr	r1, [r7, #0]
 8012ef8:	6878      	ldr	r0, [r7, #4]
 8012efa:	f000 f8be 	bl	801307a <USBD_CtlError>
        break;
 8012efe:	bf00      	nop
}
 8012f00:	bf00      	nop
 8012f02:	3708      	adds	r7, #8
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd80      	pop	{r7, pc}

08012f08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b082      	sub	sp, #8
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
 8012f10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f18:	b2db      	uxtb	r3, r3
 8012f1a:	3b01      	subs	r3, #1
 8012f1c:	2b02      	cmp	r3, #2
 8012f1e:	d81e      	bhi.n	8012f5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	88db      	ldrh	r3, [r3, #6]
 8012f24:	2b02      	cmp	r3, #2
 8012f26:	d004      	beq.n	8012f32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012f28:	6839      	ldr	r1, [r7, #0]
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f000 f8a5 	bl	801307a <USBD_CtlError>
        break;
 8012f30:	e01a      	b.n	8012f68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	2201      	movs	r2, #1
 8012f36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d005      	beq.n	8012f4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	68db      	ldr	r3, [r3, #12]
 8012f46:	f043 0202 	orr.w	r2, r3, #2
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	330c      	adds	r3, #12
 8012f52:	2202      	movs	r2, #2
 8012f54:	4619      	mov	r1, r3
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f000 f8a0 	bl	801309c <USBD_CtlSendData>
      break;
 8012f5c:	e004      	b.n	8012f68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012f5e:	6839      	ldr	r1, [r7, #0]
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	f000 f88a 	bl	801307a <USBD_CtlError>
      break;
 8012f66:	bf00      	nop
  }
}
 8012f68:	bf00      	nop
 8012f6a:	3708      	adds	r7, #8
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}

08012f70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b082      	sub	sp, #8
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
 8012f78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012f7a:	683b      	ldr	r3, [r7, #0]
 8012f7c:	885b      	ldrh	r3, [r3, #2]
 8012f7e:	2b01      	cmp	r3, #1
 8012f80:	d107      	bne.n	8012f92 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	2201      	movs	r2, #1
 8012f86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	f000 f8c3 	bl	8013116 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012f90:	e013      	b.n	8012fba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	885b      	ldrh	r3, [r3, #2]
 8012f96:	2b02      	cmp	r3, #2
 8012f98:	d10b      	bne.n	8012fb2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	889b      	ldrh	r3, [r3, #4]
 8012f9e:	0a1b      	lsrs	r3, r3, #8
 8012fa0:	b29b      	uxth	r3, r3
 8012fa2:	b2da      	uxtb	r2, r3
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8012faa:	6878      	ldr	r0, [r7, #4]
 8012fac:	f000 f8b3 	bl	8013116 <USBD_CtlSendStatus>
}
 8012fb0:	e003      	b.n	8012fba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012fb2:	6839      	ldr	r1, [r7, #0]
 8012fb4:	6878      	ldr	r0, [r7, #4]
 8012fb6:	f000 f860 	bl	801307a <USBD_CtlError>
}
 8012fba:	bf00      	nop
 8012fbc:	3708      	adds	r7, #8
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}

08012fc2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012fc2:	b580      	push	{r7, lr}
 8012fc4:	b082      	sub	sp, #8
 8012fc6:	af00      	add	r7, sp, #0
 8012fc8:	6078      	str	r0, [r7, #4]
 8012fca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012fd2:	b2db      	uxtb	r3, r3
 8012fd4:	3b01      	subs	r3, #1
 8012fd6:	2b02      	cmp	r3, #2
 8012fd8:	d80b      	bhi.n	8012ff2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012fda:	683b      	ldr	r3, [r7, #0]
 8012fdc:	885b      	ldrh	r3, [r3, #2]
 8012fde:	2b01      	cmp	r3, #1
 8012fe0:	d10c      	bne.n	8012ffc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012fea:	6878      	ldr	r0, [r7, #4]
 8012fec:	f000 f893 	bl	8013116 <USBD_CtlSendStatus>
      }
      break;
 8012ff0:	e004      	b.n	8012ffc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012ff2:	6839      	ldr	r1, [r7, #0]
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f000 f840 	bl	801307a <USBD_CtlError>
      break;
 8012ffa:	e000      	b.n	8012ffe <USBD_ClrFeature+0x3c>
      break;
 8012ffc:	bf00      	nop
  }
}
 8012ffe:	bf00      	nop
 8013000:	3708      	adds	r7, #8
 8013002:	46bd      	mov	sp, r7
 8013004:	bd80      	pop	{r7, pc}

08013006 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013006:	b580      	push	{r7, lr}
 8013008:	b084      	sub	sp, #16
 801300a:	af00      	add	r7, sp, #0
 801300c:	6078      	str	r0, [r7, #4]
 801300e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013010:	683b      	ldr	r3, [r7, #0]
 8013012:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	781a      	ldrb	r2, [r3, #0]
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	3301      	adds	r3, #1
 8013020:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	781a      	ldrb	r2, [r3, #0]
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	3301      	adds	r3, #1
 801302e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013030:	68f8      	ldr	r0, [r7, #12]
 8013032:	f7ff fa40 	bl	80124b6 <SWAPBYTE>
 8013036:	4603      	mov	r3, r0
 8013038:	461a      	mov	r2, r3
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	3301      	adds	r3, #1
 8013042:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	3301      	adds	r3, #1
 8013048:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801304a:	68f8      	ldr	r0, [r7, #12]
 801304c:	f7ff fa33 	bl	80124b6 <SWAPBYTE>
 8013050:	4603      	mov	r3, r0
 8013052:	461a      	mov	r2, r3
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	3301      	adds	r3, #1
 801305c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	3301      	adds	r3, #1
 8013062:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013064:	68f8      	ldr	r0, [r7, #12]
 8013066:	f7ff fa26 	bl	80124b6 <SWAPBYTE>
 801306a:	4603      	mov	r3, r0
 801306c:	461a      	mov	r2, r3
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	80da      	strh	r2, [r3, #6]
}
 8013072:	bf00      	nop
 8013074:	3710      	adds	r7, #16
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}

0801307a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801307a:	b580      	push	{r7, lr}
 801307c:	b082      	sub	sp, #8
 801307e:	af00      	add	r7, sp, #0
 8013080:	6078      	str	r0, [r7, #4]
 8013082:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013084:	2180      	movs	r1, #128	; 0x80
 8013086:	6878      	ldr	r0, [r7, #4]
 8013088:	f001 fd20 	bl	8014acc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801308c:	2100      	movs	r1, #0
 801308e:	6878      	ldr	r0, [r7, #4]
 8013090:	f001 fd1c 	bl	8014acc <USBD_LL_StallEP>
}
 8013094:	bf00      	nop
 8013096:	3708      	adds	r7, #8
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}

0801309c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b084      	sub	sp, #16
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	60f8      	str	r0, [r7, #12]
 80130a4:	60b9      	str	r1, [r7, #8]
 80130a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	2202      	movs	r2, #2
 80130ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	687a      	ldr	r2, [r7, #4]
 80130b4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	687a      	ldr	r2, [r7, #4]
 80130ba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	68ba      	ldr	r2, [r7, #8]
 80130c0:	2100      	movs	r1, #0
 80130c2:	68f8      	ldr	r0, [r7, #12]
 80130c4:	f001 fd8b 	bl	8014bde <USBD_LL_Transmit>

  return USBD_OK;
 80130c8:	2300      	movs	r3, #0
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	3710      	adds	r7, #16
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}

080130d2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80130d2:	b580      	push	{r7, lr}
 80130d4:	b084      	sub	sp, #16
 80130d6:	af00      	add	r7, sp, #0
 80130d8:	60f8      	str	r0, [r7, #12]
 80130da:	60b9      	str	r1, [r7, #8]
 80130dc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	68ba      	ldr	r2, [r7, #8]
 80130e2:	2100      	movs	r1, #0
 80130e4:	68f8      	ldr	r0, [r7, #12]
 80130e6:	f001 fd7a 	bl	8014bde <USBD_LL_Transmit>

  return USBD_OK;
 80130ea:	2300      	movs	r3, #0
}
 80130ec:	4618      	mov	r0, r3
 80130ee:	3710      	adds	r7, #16
 80130f0:	46bd      	mov	sp, r7
 80130f2:	bd80      	pop	{r7, pc}

080130f4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b084      	sub	sp, #16
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	60f8      	str	r0, [r7, #12]
 80130fc:	60b9      	str	r1, [r7, #8]
 80130fe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	68ba      	ldr	r2, [r7, #8]
 8013104:	2100      	movs	r1, #0
 8013106:	68f8      	ldr	r0, [r7, #12]
 8013108:	f001 fd8a 	bl	8014c20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801310c:	2300      	movs	r3, #0
}
 801310e:	4618      	mov	r0, r3
 8013110:	3710      	adds	r7, #16
 8013112:	46bd      	mov	sp, r7
 8013114:	bd80      	pop	{r7, pc}

08013116 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013116:	b580      	push	{r7, lr}
 8013118:	b082      	sub	sp, #8
 801311a:	af00      	add	r7, sp, #0
 801311c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	2204      	movs	r2, #4
 8013122:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013126:	2300      	movs	r3, #0
 8013128:	2200      	movs	r2, #0
 801312a:	2100      	movs	r1, #0
 801312c:	6878      	ldr	r0, [r7, #4]
 801312e:	f001 fd56 	bl	8014bde <USBD_LL_Transmit>

  return USBD_OK;
 8013132:	2300      	movs	r3, #0
}
 8013134:	4618      	mov	r0, r3
 8013136:	3708      	adds	r7, #8
 8013138:	46bd      	mov	sp, r7
 801313a:	bd80      	pop	{r7, pc}

0801313c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b082      	sub	sp, #8
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2205      	movs	r2, #5
 8013148:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801314c:	2300      	movs	r3, #0
 801314e:	2200      	movs	r2, #0
 8013150:	2100      	movs	r1, #0
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	f001 fd64 	bl	8014c20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013158:	2300      	movs	r3, #0
}
 801315a:	4618      	mov	r0, r3
 801315c:	3708      	adds	r7, #8
 801315e:	46bd      	mov	sp, r7
 8013160:	bd80      	pop	{r7, pc}

08013162 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013162:	b480      	push	{r7}
 8013164:	b083      	sub	sp, #12
 8013166:	af00      	add	r7, sp, #0
 8013168:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	f103 0208 	add.w	r2, r3, #8
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	f04f 32ff 	mov.w	r2, #4294967295
 801317a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	f103 0208 	add.w	r2, r3, #8
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	f103 0208 	add.w	r2, r3, #8
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	2200      	movs	r2, #0
 8013194:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013196:	bf00      	nop
 8013198:	370c      	adds	r7, #12
 801319a:	46bd      	mov	sp, r7
 801319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a0:	4770      	bx	lr

080131a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80131a2:	b480      	push	{r7}
 80131a4:	b083      	sub	sp, #12
 80131a6:	af00      	add	r7, sp, #0
 80131a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	2200      	movs	r2, #0
 80131ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80131b0:	bf00      	nop
 80131b2:	370c      	adds	r7, #12
 80131b4:	46bd      	mov	sp, r7
 80131b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ba:	4770      	bx	lr

080131bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80131bc:	b480      	push	{r7}
 80131be:	b085      	sub	sp, #20
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
 80131c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	685b      	ldr	r3, [r3, #4]
 80131ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	68fa      	ldr	r2, [r7, #12]
 80131d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	689a      	ldr	r2, [r3, #8]
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	689b      	ldr	r3, [r3, #8]
 80131de:	683a      	ldr	r2, [r7, #0]
 80131e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	683a      	ldr	r2, [r7, #0]
 80131e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80131e8:	683b      	ldr	r3, [r7, #0]
 80131ea:	687a      	ldr	r2, [r7, #4]
 80131ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	1c5a      	adds	r2, r3, #1
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	601a      	str	r2, [r3, #0]
}
 80131f8:	bf00      	nop
 80131fa:	3714      	adds	r7, #20
 80131fc:	46bd      	mov	sp, r7
 80131fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013202:	4770      	bx	lr

08013204 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013204:	b480      	push	{r7}
 8013206:	b085      	sub	sp, #20
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
 801320c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	f1b3 3fff 	cmp.w	r3, #4294967295
 801321a:	d103      	bne.n	8013224 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	691b      	ldr	r3, [r3, #16]
 8013220:	60fb      	str	r3, [r7, #12]
 8013222:	e00c      	b.n	801323e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	3308      	adds	r3, #8
 8013228:	60fb      	str	r3, [r7, #12]
 801322a:	e002      	b.n	8013232 <vListInsert+0x2e>
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	685b      	ldr	r3, [r3, #4]
 8013230:	60fb      	str	r3, [r7, #12]
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	685b      	ldr	r3, [r3, #4]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	68ba      	ldr	r2, [r7, #8]
 801323a:	429a      	cmp	r2, r3
 801323c:	d2f6      	bcs.n	801322c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	685a      	ldr	r2, [r3, #4]
 8013242:	683b      	ldr	r3, [r7, #0]
 8013244:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013246:	683b      	ldr	r3, [r7, #0]
 8013248:	685b      	ldr	r3, [r3, #4]
 801324a:	683a      	ldr	r2, [r7, #0]
 801324c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	68fa      	ldr	r2, [r7, #12]
 8013252:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	683a      	ldr	r2, [r7, #0]
 8013258:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801325a:	683b      	ldr	r3, [r7, #0]
 801325c:	687a      	ldr	r2, [r7, #4]
 801325e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	1c5a      	adds	r2, r3, #1
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	601a      	str	r2, [r3, #0]
}
 801326a:	bf00      	nop
 801326c:	3714      	adds	r7, #20
 801326e:	46bd      	mov	sp, r7
 8013270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013274:	4770      	bx	lr

08013276 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013276:	b480      	push	{r7}
 8013278:	b085      	sub	sp, #20
 801327a:	af00      	add	r7, sp, #0
 801327c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	691b      	ldr	r3, [r3, #16]
 8013282:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	685b      	ldr	r3, [r3, #4]
 8013288:	687a      	ldr	r2, [r7, #4]
 801328a:	6892      	ldr	r2, [r2, #8]
 801328c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	689b      	ldr	r3, [r3, #8]
 8013292:	687a      	ldr	r2, [r7, #4]
 8013294:	6852      	ldr	r2, [r2, #4]
 8013296:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	685b      	ldr	r3, [r3, #4]
 801329c:	687a      	ldr	r2, [r7, #4]
 801329e:	429a      	cmp	r2, r3
 80132a0:	d103      	bne.n	80132aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	689a      	ldr	r2, [r3, #8]
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	2200      	movs	r2, #0
 80132ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	1e5a      	subs	r2, r3, #1
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	681b      	ldr	r3, [r3, #0]
}
 80132be:	4618      	mov	r0, r3
 80132c0:	3714      	adds	r7, #20
 80132c2:	46bd      	mov	sp, r7
 80132c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c8:	4770      	bx	lr

080132ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80132ca:	b580      	push	{r7, lr}
 80132cc:	b08e      	sub	sp, #56	; 0x38
 80132ce:	af04      	add	r7, sp, #16
 80132d0:	60f8      	str	r0, [r7, #12]
 80132d2:	60b9      	str	r1, [r7, #8]
 80132d4:	607a      	str	r2, [r7, #4]
 80132d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80132d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d10a      	bne.n	80132f4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80132de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132e2:	f383 8811 	msr	BASEPRI, r3
 80132e6:	f3bf 8f6f 	isb	sy
 80132ea:	f3bf 8f4f 	dsb	sy
 80132ee:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80132f0:	bf00      	nop
 80132f2:	e7fe      	b.n	80132f2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80132f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d10a      	bne.n	8013310 <xTaskCreateStatic+0x46>
	__asm volatile
 80132fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132fe:	f383 8811 	msr	BASEPRI, r3
 8013302:	f3bf 8f6f 	isb	sy
 8013306:	f3bf 8f4f 	dsb	sy
 801330a:	61fb      	str	r3, [r7, #28]
}
 801330c:	bf00      	nop
 801330e:	e7fe      	b.n	801330e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013310:	2354      	movs	r3, #84	; 0x54
 8013312:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013314:	693b      	ldr	r3, [r7, #16]
 8013316:	2b54      	cmp	r3, #84	; 0x54
 8013318:	d00a      	beq.n	8013330 <xTaskCreateStatic+0x66>
	__asm volatile
 801331a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801331e:	f383 8811 	msr	BASEPRI, r3
 8013322:	f3bf 8f6f 	isb	sy
 8013326:	f3bf 8f4f 	dsb	sy
 801332a:	61bb      	str	r3, [r7, #24]
}
 801332c:	bf00      	nop
 801332e:	e7fe      	b.n	801332e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013330:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013334:	2b00      	cmp	r3, #0
 8013336:	d01e      	beq.n	8013376 <xTaskCreateStatic+0xac>
 8013338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801333a:	2b00      	cmp	r3, #0
 801333c:	d01b      	beq.n	8013376 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801333e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013340:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013346:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801334a:	2202      	movs	r2, #2
 801334c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013350:	2300      	movs	r3, #0
 8013352:	9303      	str	r3, [sp, #12]
 8013354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013356:	9302      	str	r3, [sp, #8]
 8013358:	f107 0314 	add.w	r3, r7, #20
 801335c:	9301      	str	r3, [sp, #4]
 801335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013360:	9300      	str	r3, [sp, #0]
 8013362:	683b      	ldr	r3, [r7, #0]
 8013364:	687a      	ldr	r2, [r7, #4]
 8013366:	68b9      	ldr	r1, [r7, #8]
 8013368:	68f8      	ldr	r0, [r7, #12]
 801336a:	f000 f850 	bl	801340e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801336e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013370:	f000 f8d4 	bl	801351c <prvAddNewTaskToReadyList>
 8013374:	e001      	b.n	801337a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013376:	2300      	movs	r3, #0
 8013378:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801337a:	697b      	ldr	r3, [r7, #20]
	}
 801337c:	4618      	mov	r0, r3
 801337e:	3728      	adds	r7, #40	; 0x28
 8013380:	46bd      	mov	sp, r7
 8013382:	bd80      	pop	{r7, pc}

08013384 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013384:	b580      	push	{r7, lr}
 8013386:	b08c      	sub	sp, #48	; 0x30
 8013388:	af04      	add	r7, sp, #16
 801338a:	60f8      	str	r0, [r7, #12]
 801338c:	60b9      	str	r1, [r7, #8]
 801338e:	603b      	str	r3, [r7, #0]
 8013390:	4613      	mov	r3, r2
 8013392:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013394:	88fb      	ldrh	r3, [r7, #6]
 8013396:	009b      	lsls	r3, r3, #2
 8013398:	4618      	mov	r0, r3
 801339a:	f001 f895 	bl	80144c8 <pvPortMalloc>
 801339e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d00e      	beq.n	80133c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80133a6:	2054      	movs	r0, #84	; 0x54
 80133a8:	f001 f88e 	bl	80144c8 <pvPortMalloc>
 80133ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80133ae:	69fb      	ldr	r3, [r7, #28]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d003      	beq.n	80133bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80133b4:	69fb      	ldr	r3, [r7, #28]
 80133b6:	697a      	ldr	r2, [r7, #20]
 80133b8:	631a      	str	r2, [r3, #48]	; 0x30
 80133ba:	e005      	b.n	80133c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80133bc:	6978      	ldr	r0, [r7, #20]
 80133be:	f001 f94f 	bl	8014660 <vPortFree>
 80133c2:	e001      	b.n	80133c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80133c4:	2300      	movs	r3, #0
 80133c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80133c8:	69fb      	ldr	r3, [r7, #28]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d017      	beq.n	80133fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80133ce:	69fb      	ldr	r3, [r7, #28]
 80133d0:	2200      	movs	r2, #0
 80133d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80133d6:	88fa      	ldrh	r2, [r7, #6]
 80133d8:	2300      	movs	r3, #0
 80133da:	9303      	str	r3, [sp, #12]
 80133dc:	69fb      	ldr	r3, [r7, #28]
 80133de:	9302      	str	r3, [sp, #8]
 80133e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133e2:	9301      	str	r3, [sp, #4]
 80133e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e6:	9300      	str	r3, [sp, #0]
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	68b9      	ldr	r1, [r7, #8]
 80133ec:	68f8      	ldr	r0, [r7, #12]
 80133ee:	f000 f80e 	bl	801340e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80133f2:	69f8      	ldr	r0, [r7, #28]
 80133f4:	f000 f892 	bl	801351c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80133f8:	2301      	movs	r3, #1
 80133fa:	61bb      	str	r3, [r7, #24]
 80133fc:	e002      	b.n	8013404 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80133fe:	f04f 33ff 	mov.w	r3, #4294967295
 8013402:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013404:	69bb      	ldr	r3, [r7, #24]
	}
 8013406:	4618      	mov	r0, r3
 8013408:	3720      	adds	r7, #32
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}

0801340e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801340e:	b580      	push	{r7, lr}
 8013410:	b088      	sub	sp, #32
 8013412:	af00      	add	r7, sp, #0
 8013414:	60f8      	str	r0, [r7, #12]
 8013416:	60b9      	str	r1, [r7, #8]
 8013418:	607a      	str	r2, [r7, #4]
 801341a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801341c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801341e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013426:	3b01      	subs	r3, #1
 8013428:	009b      	lsls	r3, r3, #2
 801342a:	4413      	add	r3, r2
 801342c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801342e:	69bb      	ldr	r3, [r7, #24]
 8013430:	f023 0307 	bic.w	r3, r3, #7
 8013434:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013436:	69bb      	ldr	r3, [r7, #24]
 8013438:	f003 0307 	and.w	r3, r3, #7
 801343c:	2b00      	cmp	r3, #0
 801343e:	d00a      	beq.n	8013456 <prvInitialiseNewTask+0x48>
	__asm volatile
 8013440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013444:	f383 8811 	msr	BASEPRI, r3
 8013448:	f3bf 8f6f 	isb	sy
 801344c:	f3bf 8f4f 	dsb	sy
 8013450:	617b      	str	r3, [r7, #20]
}
 8013452:	bf00      	nop
 8013454:	e7fe      	b.n	8013454 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013456:	68bb      	ldr	r3, [r7, #8]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d01f      	beq.n	801349c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801345c:	2300      	movs	r3, #0
 801345e:	61fb      	str	r3, [r7, #28]
 8013460:	e012      	b.n	8013488 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013462:	68ba      	ldr	r2, [r7, #8]
 8013464:	69fb      	ldr	r3, [r7, #28]
 8013466:	4413      	add	r3, r2
 8013468:	7819      	ldrb	r1, [r3, #0]
 801346a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801346c:	69fb      	ldr	r3, [r7, #28]
 801346e:	4413      	add	r3, r2
 8013470:	3334      	adds	r3, #52	; 0x34
 8013472:	460a      	mov	r2, r1
 8013474:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013476:	68ba      	ldr	r2, [r7, #8]
 8013478:	69fb      	ldr	r3, [r7, #28]
 801347a:	4413      	add	r3, r2
 801347c:	781b      	ldrb	r3, [r3, #0]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d006      	beq.n	8013490 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013482:	69fb      	ldr	r3, [r7, #28]
 8013484:	3301      	adds	r3, #1
 8013486:	61fb      	str	r3, [r7, #28]
 8013488:	69fb      	ldr	r3, [r7, #28]
 801348a:	2b0f      	cmp	r3, #15
 801348c:	d9e9      	bls.n	8013462 <prvInitialiseNewTask+0x54>
 801348e:	e000      	b.n	8013492 <prvInitialiseNewTask+0x84>
			{
				break;
 8013490:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013494:	2200      	movs	r2, #0
 8013496:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801349a:	e003      	b.n	80134a4 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801349e:	2200      	movs	r2, #0
 80134a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80134a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134a6:	2b06      	cmp	r3, #6
 80134a8:	d901      	bls.n	80134ae <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80134aa:	2306      	movs	r3, #6
 80134ac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80134ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134b2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80134b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134b8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80134ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134bc:	2200      	movs	r2, #0
 80134be:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80134c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134c2:	3304      	adds	r3, #4
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7ff fe6c 	bl	80131a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80134ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134cc:	3318      	adds	r3, #24
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7ff fe67 	bl	80131a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80134d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80134d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80134da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134dc:	f1c3 0207 	rsb	r2, r3, #7
 80134e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80134e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80134e8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80134ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ec:	2200      	movs	r2, #0
 80134ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80134f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134f2:	2200      	movs	r2, #0
 80134f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80134f8:	683a      	ldr	r2, [r7, #0]
 80134fa:	68f9      	ldr	r1, [r7, #12]
 80134fc:	69b8      	ldr	r0, [r7, #24]
 80134fe:	f000 fd93 	bl	8014028 <pxPortInitialiseStack>
 8013502:	4602      	mov	r2, r0
 8013504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013506:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801350a:	2b00      	cmp	r3, #0
 801350c:	d002      	beq.n	8013514 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801350e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013512:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013514:	bf00      	nop
 8013516:	3720      	adds	r7, #32
 8013518:	46bd      	mov	sp, r7
 801351a:	bd80      	pop	{r7, pc}

0801351c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b082      	sub	sp, #8
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013524:	f000 feae 	bl	8014284 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013528:	4b2a      	ldr	r3, [pc, #168]	; (80135d4 <prvAddNewTaskToReadyList+0xb8>)
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	3301      	adds	r3, #1
 801352e:	4a29      	ldr	r2, [pc, #164]	; (80135d4 <prvAddNewTaskToReadyList+0xb8>)
 8013530:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013532:	4b29      	ldr	r3, [pc, #164]	; (80135d8 <prvAddNewTaskToReadyList+0xbc>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d109      	bne.n	801354e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801353a:	4a27      	ldr	r2, [pc, #156]	; (80135d8 <prvAddNewTaskToReadyList+0xbc>)
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013540:	4b24      	ldr	r3, [pc, #144]	; (80135d4 <prvAddNewTaskToReadyList+0xb8>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	2b01      	cmp	r3, #1
 8013546:	d110      	bne.n	801356a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013548:	f000 fb16 	bl	8013b78 <prvInitialiseTaskLists>
 801354c:	e00d      	b.n	801356a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801354e:	4b23      	ldr	r3, [pc, #140]	; (80135dc <prvAddNewTaskToReadyList+0xc0>)
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d109      	bne.n	801356a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013556:	4b20      	ldr	r3, [pc, #128]	; (80135d8 <prvAddNewTaskToReadyList+0xbc>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013560:	429a      	cmp	r2, r3
 8013562:	d802      	bhi.n	801356a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013564:	4a1c      	ldr	r2, [pc, #112]	; (80135d8 <prvAddNewTaskToReadyList+0xbc>)
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801356a:	4b1d      	ldr	r3, [pc, #116]	; (80135e0 <prvAddNewTaskToReadyList+0xc4>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	3301      	adds	r3, #1
 8013570:	4a1b      	ldr	r2, [pc, #108]	; (80135e0 <prvAddNewTaskToReadyList+0xc4>)
 8013572:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013578:	2201      	movs	r2, #1
 801357a:	409a      	lsls	r2, r3
 801357c:	4b19      	ldr	r3, [pc, #100]	; (80135e4 <prvAddNewTaskToReadyList+0xc8>)
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	4313      	orrs	r3, r2
 8013582:	4a18      	ldr	r2, [pc, #96]	; (80135e4 <prvAddNewTaskToReadyList+0xc8>)
 8013584:	6013      	str	r3, [r2, #0]
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801358a:	4613      	mov	r3, r2
 801358c:	009b      	lsls	r3, r3, #2
 801358e:	4413      	add	r3, r2
 8013590:	009b      	lsls	r3, r3, #2
 8013592:	4a15      	ldr	r2, [pc, #84]	; (80135e8 <prvAddNewTaskToReadyList+0xcc>)
 8013594:	441a      	add	r2, r3
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	3304      	adds	r3, #4
 801359a:	4619      	mov	r1, r3
 801359c:	4610      	mov	r0, r2
 801359e:	f7ff fe0d 	bl	80131bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80135a2:	f000 fe9f 	bl	80142e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80135a6:	4b0d      	ldr	r3, [pc, #52]	; (80135dc <prvAddNewTaskToReadyList+0xc0>)
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d00e      	beq.n	80135cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80135ae:	4b0a      	ldr	r3, [pc, #40]	; (80135d8 <prvAddNewTaskToReadyList+0xbc>)
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135b8:	429a      	cmp	r2, r3
 80135ba:	d207      	bcs.n	80135cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80135bc:	4b0b      	ldr	r3, [pc, #44]	; (80135ec <prvAddNewTaskToReadyList+0xd0>)
 80135be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135c2:	601a      	str	r2, [r3, #0]
 80135c4:	f3bf 8f4f 	dsb	sy
 80135c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80135cc:	bf00      	nop
 80135ce:	3708      	adds	r7, #8
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd80      	pop	{r7, pc}
 80135d4:	20000a70 	.word	0x20000a70
 80135d8:	20000970 	.word	0x20000970
 80135dc:	20000a7c 	.word	0x20000a7c
 80135e0:	20000a8c 	.word	0x20000a8c
 80135e4:	20000a78 	.word	0x20000a78
 80135e8:	20000974 	.word	0x20000974
 80135ec:	e000ed04 	.word	0xe000ed04

080135f0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b08a      	sub	sp, #40	; 0x28
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
 80135f8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80135fa:	2300      	movs	r3, #0
 80135fc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d10a      	bne.n	801361a <vTaskDelayUntil+0x2a>
	__asm volatile
 8013604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013608:	f383 8811 	msr	BASEPRI, r3
 801360c:	f3bf 8f6f 	isb	sy
 8013610:	f3bf 8f4f 	dsb	sy
 8013614:	617b      	str	r3, [r7, #20]
}
 8013616:	bf00      	nop
 8013618:	e7fe      	b.n	8013618 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 801361a:	683b      	ldr	r3, [r7, #0]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d10a      	bne.n	8013636 <vTaskDelayUntil+0x46>
	__asm volatile
 8013620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013624:	f383 8811 	msr	BASEPRI, r3
 8013628:	f3bf 8f6f 	isb	sy
 801362c:	f3bf 8f4f 	dsb	sy
 8013630:	613b      	str	r3, [r7, #16]
}
 8013632:	bf00      	nop
 8013634:	e7fe      	b.n	8013634 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8013636:	4b2a      	ldr	r3, [pc, #168]	; (80136e0 <vTaskDelayUntil+0xf0>)
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d00a      	beq.n	8013654 <vTaskDelayUntil+0x64>
	__asm volatile
 801363e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013642:	f383 8811 	msr	BASEPRI, r3
 8013646:	f3bf 8f6f 	isb	sy
 801364a:	f3bf 8f4f 	dsb	sy
 801364e:	60fb      	str	r3, [r7, #12]
}
 8013650:	bf00      	nop
 8013652:	e7fe      	b.n	8013652 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8013654:	f000 f8aa 	bl	80137ac <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8013658:	4b22      	ldr	r3, [pc, #136]	; (80136e4 <vTaskDelayUntil+0xf4>)
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	683a      	ldr	r2, [r7, #0]
 8013664:	4413      	add	r3, r2
 8013666:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	6a3a      	ldr	r2, [r7, #32]
 801366e:	429a      	cmp	r2, r3
 8013670:	d20b      	bcs.n	801368a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	69fa      	ldr	r2, [r7, #28]
 8013678:	429a      	cmp	r2, r3
 801367a:	d211      	bcs.n	80136a0 <vTaskDelayUntil+0xb0>
 801367c:	69fa      	ldr	r2, [r7, #28]
 801367e:	6a3b      	ldr	r3, [r7, #32]
 8013680:	429a      	cmp	r2, r3
 8013682:	d90d      	bls.n	80136a0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8013684:	2301      	movs	r3, #1
 8013686:	627b      	str	r3, [r7, #36]	; 0x24
 8013688:	e00a      	b.n	80136a0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	69fa      	ldr	r2, [r7, #28]
 8013690:	429a      	cmp	r2, r3
 8013692:	d303      	bcc.n	801369c <vTaskDelayUntil+0xac>
 8013694:	69fa      	ldr	r2, [r7, #28]
 8013696:	6a3b      	ldr	r3, [r7, #32]
 8013698:	429a      	cmp	r2, r3
 801369a:	d901      	bls.n	80136a0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 801369c:	2301      	movs	r3, #1
 801369e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	69fa      	ldr	r2, [r7, #28]
 80136a4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80136a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d006      	beq.n	80136ba <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80136ac:	69fa      	ldr	r2, [r7, #28]
 80136ae:	6a3b      	ldr	r3, [r7, #32]
 80136b0:	1ad3      	subs	r3, r2, r3
 80136b2:	2100      	movs	r1, #0
 80136b4:	4618      	mov	r0, r3
 80136b6:	f000 fc51 	bl	8013f5c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80136ba:	f000 f885 	bl	80137c8 <xTaskResumeAll>
 80136be:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80136c0:	69bb      	ldr	r3, [r7, #24]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d107      	bne.n	80136d6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80136c6:	4b08      	ldr	r3, [pc, #32]	; (80136e8 <vTaskDelayUntil+0xf8>)
 80136c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136cc:	601a      	str	r2, [r3, #0]
 80136ce:	f3bf 8f4f 	dsb	sy
 80136d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80136d6:	bf00      	nop
 80136d8:	3728      	adds	r7, #40	; 0x28
 80136da:	46bd      	mov	sp, r7
 80136dc:	bd80      	pop	{r7, pc}
 80136de:	bf00      	nop
 80136e0:	20000a98 	.word	0x20000a98
 80136e4:	20000a74 	.word	0x20000a74
 80136e8:	e000ed04 	.word	0xe000ed04

080136ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b08a      	sub	sp, #40	; 0x28
 80136f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80136f2:	2300      	movs	r3, #0
 80136f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80136f6:	2300      	movs	r3, #0
 80136f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80136fa:	463a      	mov	r2, r7
 80136fc:	1d39      	adds	r1, r7, #4
 80136fe:	f107 0308 	add.w	r3, r7, #8
 8013702:	4618      	mov	r0, r3
 8013704:	f7ee f976 	bl	80019f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013708:	6839      	ldr	r1, [r7, #0]
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	68ba      	ldr	r2, [r7, #8]
 801370e:	9202      	str	r2, [sp, #8]
 8013710:	9301      	str	r3, [sp, #4]
 8013712:	2300      	movs	r3, #0
 8013714:	9300      	str	r3, [sp, #0]
 8013716:	2300      	movs	r3, #0
 8013718:	460a      	mov	r2, r1
 801371a:	491e      	ldr	r1, [pc, #120]	; (8013794 <vTaskStartScheduler+0xa8>)
 801371c:	481e      	ldr	r0, [pc, #120]	; (8013798 <vTaskStartScheduler+0xac>)
 801371e:	f7ff fdd4 	bl	80132ca <xTaskCreateStatic>
 8013722:	4603      	mov	r3, r0
 8013724:	4a1d      	ldr	r2, [pc, #116]	; (801379c <vTaskStartScheduler+0xb0>)
 8013726:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013728:	4b1c      	ldr	r3, [pc, #112]	; (801379c <vTaskStartScheduler+0xb0>)
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d002      	beq.n	8013736 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013730:	2301      	movs	r3, #1
 8013732:	617b      	str	r3, [r7, #20]
 8013734:	e001      	b.n	801373a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013736:	2300      	movs	r3, #0
 8013738:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801373a:	697b      	ldr	r3, [r7, #20]
 801373c:	2b01      	cmp	r3, #1
 801373e:	d116      	bne.n	801376e <vTaskStartScheduler+0x82>
	__asm volatile
 8013740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013744:	f383 8811 	msr	BASEPRI, r3
 8013748:	f3bf 8f6f 	isb	sy
 801374c:	f3bf 8f4f 	dsb	sy
 8013750:	613b      	str	r3, [r7, #16]
}
 8013752:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013754:	4b12      	ldr	r3, [pc, #72]	; (80137a0 <vTaskStartScheduler+0xb4>)
 8013756:	f04f 32ff 	mov.w	r2, #4294967295
 801375a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801375c:	4b11      	ldr	r3, [pc, #68]	; (80137a4 <vTaskStartScheduler+0xb8>)
 801375e:	2201      	movs	r2, #1
 8013760:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013762:	4b11      	ldr	r3, [pc, #68]	; (80137a8 <vTaskStartScheduler+0xbc>)
 8013764:	2200      	movs	r2, #0
 8013766:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013768:	f000 fcea 	bl	8014140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801376c:	e00e      	b.n	801378c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801376e:	697b      	ldr	r3, [r7, #20]
 8013770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013774:	d10a      	bne.n	801378c <vTaskStartScheduler+0xa0>
	__asm volatile
 8013776:	f04f 0350 	mov.w	r3, #80	; 0x50
 801377a:	f383 8811 	msr	BASEPRI, r3
 801377e:	f3bf 8f6f 	isb	sy
 8013782:	f3bf 8f4f 	dsb	sy
 8013786:	60fb      	str	r3, [r7, #12]
}
 8013788:	bf00      	nop
 801378a:	e7fe      	b.n	801378a <vTaskStartScheduler+0x9e>
}
 801378c:	bf00      	nop
 801378e:	3718      	adds	r7, #24
 8013790:	46bd      	mov	sp, r7
 8013792:	bd80      	pop	{r7, pc}
 8013794:	080169bc 	.word	0x080169bc
 8013798:	08013b49 	.word	0x08013b49
 801379c:	20000a94 	.word	0x20000a94
 80137a0:	20000a90 	.word	0x20000a90
 80137a4:	20000a7c 	.word	0x20000a7c
 80137a8:	20000a74 	.word	0x20000a74

080137ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80137ac:	b480      	push	{r7}
 80137ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80137b0:	4b04      	ldr	r3, [pc, #16]	; (80137c4 <vTaskSuspendAll+0x18>)
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	3301      	adds	r3, #1
 80137b6:	4a03      	ldr	r2, [pc, #12]	; (80137c4 <vTaskSuspendAll+0x18>)
 80137b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80137ba:	bf00      	nop
 80137bc:	46bd      	mov	sp, r7
 80137be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c2:	4770      	bx	lr
 80137c4:	20000a98 	.word	0x20000a98

080137c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b084      	sub	sp, #16
 80137cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80137ce:	2300      	movs	r3, #0
 80137d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80137d2:	2300      	movs	r3, #0
 80137d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80137d6:	4b41      	ldr	r3, [pc, #260]	; (80138dc <xTaskResumeAll+0x114>)
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d10a      	bne.n	80137f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80137de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137e2:	f383 8811 	msr	BASEPRI, r3
 80137e6:	f3bf 8f6f 	isb	sy
 80137ea:	f3bf 8f4f 	dsb	sy
 80137ee:	603b      	str	r3, [r7, #0]
}
 80137f0:	bf00      	nop
 80137f2:	e7fe      	b.n	80137f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80137f4:	f000 fd46 	bl	8014284 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80137f8:	4b38      	ldr	r3, [pc, #224]	; (80138dc <xTaskResumeAll+0x114>)
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	3b01      	subs	r3, #1
 80137fe:	4a37      	ldr	r2, [pc, #220]	; (80138dc <xTaskResumeAll+0x114>)
 8013800:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013802:	4b36      	ldr	r3, [pc, #216]	; (80138dc <xTaskResumeAll+0x114>)
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d161      	bne.n	80138ce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801380a:	4b35      	ldr	r3, [pc, #212]	; (80138e0 <xTaskResumeAll+0x118>)
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d05d      	beq.n	80138ce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013812:	e02e      	b.n	8013872 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013814:	4b33      	ldr	r3, [pc, #204]	; (80138e4 <xTaskResumeAll+0x11c>)
 8013816:	68db      	ldr	r3, [r3, #12]
 8013818:	68db      	ldr	r3, [r3, #12]
 801381a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	3318      	adds	r3, #24
 8013820:	4618      	mov	r0, r3
 8013822:	f7ff fd28 	bl	8013276 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	3304      	adds	r3, #4
 801382a:	4618      	mov	r0, r3
 801382c:	f7ff fd23 	bl	8013276 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013834:	2201      	movs	r2, #1
 8013836:	409a      	lsls	r2, r3
 8013838:	4b2b      	ldr	r3, [pc, #172]	; (80138e8 <xTaskResumeAll+0x120>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	4313      	orrs	r3, r2
 801383e:	4a2a      	ldr	r2, [pc, #168]	; (80138e8 <xTaskResumeAll+0x120>)
 8013840:	6013      	str	r3, [r2, #0]
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013846:	4613      	mov	r3, r2
 8013848:	009b      	lsls	r3, r3, #2
 801384a:	4413      	add	r3, r2
 801384c:	009b      	lsls	r3, r3, #2
 801384e:	4a27      	ldr	r2, [pc, #156]	; (80138ec <xTaskResumeAll+0x124>)
 8013850:	441a      	add	r2, r3
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	3304      	adds	r3, #4
 8013856:	4619      	mov	r1, r3
 8013858:	4610      	mov	r0, r2
 801385a:	f7ff fcaf 	bl	80131bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013862:	4b23      	ldr	r3, [pc, #140]	; (80138f0 <xTaskResumeAll+0x128>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013868:	429a      	cmp	r2, r3
 801386a:	d302      	bcc.n	8013872 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801386c:	4b21      	ldr	r3, [pc, #132]	; (80138f4 <xTaskResumeAll+0x12c>)
 801386e:	2201      	movs	r2, #1
 8013870:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013872:	4b1c      	ldr	r3, [pc, #112]	; (80138e4 <xTaskResumeAll+0x11c>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d1cc      	bne.n	8013814 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d001      	beq.n	8013884 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013880:	f000 fa18 	bl	8013cb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013884:	4b1c      	ldr	r3, [pc, #112]	; (80138f8 <xTaskResumeAll+0x130>)
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d010      	beq.n	80138b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013890:	f000 f846 	bl	8013920 <xTaskIncrementTick>
 8013894:	4603      	mov	r3, r0
 8013896:	2b00      	cmp	r3, #0
 8013898:	d002      	beq.n	80138a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801389a:	4b16      	ldr	r3, [pc, #88]	; (80138f4 <xTaskResumeAll+0x12c>)
 801389c:	2201      	movs	r2, #1
 801389e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	3b01      	subs	r3, #1
 80138a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d1f1      	bne.n	8013890 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80138ac:	4b12      	ldr	r3, [pc, #72]	; (80138f8 <xTaskResumeAll+0x130>)
 80138ae:	2200      	movs	r2, #0
 80138b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80138b2:	4b10      	ldr	r3, [pc, #64]	; (80138f4 <xTaskResumeAll+0x12c>)
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d009      	beq.n	80138ce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80138ba:	2301      	movs	r3, #1
 80138bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80138be:	4b0f      	ldr	r3, [pc, #60]	; (80138fc <xTaskResumeAll+0x134>)
 80138c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138c4:	601a      	str	r2, [r3, #0]
 80138c6:	f3bf 8f4f 	dsb	sy
 80138ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80138ce:	f000 fd09 	bl	80142e4 <vPortExitCritical>

	return xAlreadyYielded;
 80138d2:	68bb      	ldr	r3, [r7, #8]
}
 80138d4:	4618      	mov	r0, r3
 80138d6:	3710      	adds	r7, #16
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd80      	pop	{r7, pc}
 80138dc:	20000a98 	.word	0x20000a98
 80138e0:	20000a70 	.word	0x20000a70
 80138e4:	20000a30 	.word	0x20000a30
 80138e8:	20000a78 	.word	0x20000a78
 80138ec:	20000974 	.word	0x20000974
 80138f0:	20000970 	.word	0x20000970
 80138f4:	20000a84 	.word	0x20000a84
 80138f8:	20000a80 	.word	0x20000a80
 80138fc:	e000ed04 	.word	0xe000ed04

08013900 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013900:	b480      	push	{r7}
 8013902:	b083      	sub	sp, #12
 8013904:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013906:	4b05      	ldr	r3, [pc, #20]	; (801391c <xTaskGetTickCount+0x1c>)
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801390c:	687b      	ldr	r3, [r7, #4]
}
 801390e:	4618      	mov	r0, r3
 8013910:	370c      	adds	r7, #12
 8013912:	46bd      	mov	sp, r7
 8013914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013918:	4770      	bx	lr
 801391a:	bf00      	nop
 801391c:	20000a74 	.word	0x20000a74

08013920 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b086      	sub	sp, #24
 8013924:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013926:	2300      	movs	r3, #0
 8013928:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801392a:	4b4e      	ldr	r3, [pc, #312]	; (8013a64 <xTaskIncrementTick+0x144>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	2b00      	cmp	r3, #0
 8013930:	f040 808e 	bne.w	8013a50 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013934:	4b4c      	ldr	r3, [pc, #304]	; (8013a68 <xTaskIncrementTick+0x148>)
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	3301      	adds	r3, #1
 801393a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801393c:	4a4a      	ldr	r2, [pc, #296]	; (8013a68 <xTaskIncrementTick+0x148>)
 801393e:	693b      	ldr	r3, [r7, #16]
 8013940:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013942:	693b      	ldr	r3, [r7, #16]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d120      	bne.n	801398a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013948:	4b48      	ldr	r3, [pc, #288]	; (8013a6c <xTaskIncrementTick+0x14c>)
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d00a      	beq.n	8013968 <xTaskIncrementTick+0x48>
	__asm volatile
 8013952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013956:	f383 8811 	msr	BASEPRI, r3
 801395a:	f3bf 8f6f 	isb	sy
 801395e:	f3bf 8f4f 	dsb	sy
 8013962:	603b      	str	r3, [r7, #0]
}
 8013964:	bf00      	nop
 8013966:	e7fe      	b.n	8013966 <xTaskIncrementTick+0x46>
 8013968:	4b40      	ldr	r3, [pc, #256]	; (8013a6c <xTaskIncrementTick+0x14c>)
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	60fb      	str	r3, [r7, #12]
 801396e:	4b40      	ldr	r3, [pc, #256]	; (8013a70 <xTaskIncrementTick+0x150>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	4a3e      	ldr	r2, [pc, #248]	; (8013a6c <xTaskIncrementTick+0x14c>)
 8013974:	6013      	str	r3, [r2, #0]
 8013976:	4a3e      	ldr	r2, [pc, #248]	; (8013a70 <xTaskIncrementTick+0x150>)
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	6013      	str	r3, [r2, #0]
 801397c:	4b3d      	ldr	r3, [pc, #244]	; (8013a74 <xTaskIncrementTick+0x154>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	3301      	adds	r3, #1
 8013982:	4a3c      	ldr	r2, [pc, #240]	; (8013a74 <xTaskIncrementTick+0x154>)
 8013984:	6013      	str	r3, [r2, #0]
 8013986:	f000 f995 	bl	8013cb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801398a:	4b3b      	ldr	r3, [pc, #236]	; (8013a78 <xTaskIncrementTick+0x158>)
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	693a      	ldr	r2, [r7, #16]
 8013990:	429a      	cmp	r2, r3
 8013992:	d348      	bcc.n	8013a26 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013994:	4b35      	ldr	r3, [pc, #212]	; (8013a6c <xTaskIncrementTick+0x14c>)
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d104      	bne.n	80139a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801399e:	4b36      	ldr	r3, [pc, #216]	; (8013a78 <xTaskIncrementTick+0x158>)
 80139a0:	f04f 32ff 	mov.w	r2, #4294967295
 80139a4:	601a      	str	r2, [r3, #0]
					break;
 80139a6:	e03e      	b.n	8013a26 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80139a8:	4b30      	ldr	r3, [pc, #192]	; (8013a6c <xTaskIncrementTick+0x14c>)
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	68db      	ldr	r3, [r3, #12]
 80139ae:	68db      	ldr	r3, [r3, #12]
 80139b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80139b2:	68bb      	ldr	r3, [r7, #8]
 80139b4:	685b      	ldr	r3, [r3, #4]
 80139b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80139b8:	693a      	ldr	r2, [r7, #16]
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	429a      	cmp	r2, r3
 80139be:	d203      	bcs.n	80139c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80139c0:	4a2d      	ldr	r2, [pc, #180]	; (8013a78 <xTaskIncrementTick+0x158>)
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80139c6:	e02e      	b.n	8013a26 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80139c8:	68bb      	ldr	r3, [r7, #8]
 80139ca:	3304      	adds	r3, #4
 80139cc:	4618      	mov	r0, r3
 80139ce:	f7ff fc52 	bl	8013276 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80139d2:	68bb      	ldr	r3, [r7, #8]
 80139d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d004      	beq.n	80139e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80139da:	68bb      	ldr	r3, [r7, #8]
 80139dc:	3318      	adds	r3, #24
 80139de:	4618      	mov	r0, r3
 80139e0:	f7ff fc49 	bl	8013276 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80139e4:	68bb      	ldr	r3, [r7, #8]
 80139e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139e8:	2201      	movs	r2, #1
 80139ea:	409a      	lsls	r2, r3
 80139ec:	4b23      	ldr	r3, [pc, #140]	; (8013a7c <xTaskIncrementTick+0x15c>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	4313      	orrs	r3, r2
 80139f2:	4a22      	ldr	r2, [pc, #136]	; (8013a7c <xTaskIncrementTick+0x15c>)
 80139f4:	6013      	str	r3, [r2, #0]
 80139f6:	68bb      	ldr	r3, [r7, #8]
 80139f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139fa:	4613      	mov	r3, r2
 80139fc:	009b      	lsls	r3, r3, #2
 80139fe:	4413      	add	r3, r2
 8013a00:	009b      	lsls	r3, r3, #2
 8013a02:	4a1f      	ldr	r2, [pc, #124]	; (8013a80 <xTaskIncrementTick+0x160>)
 8013a04:	441a      	add	r2, r3
 8013a06:	68bb      	ldr	r3, [r7, #8]
 8013a08:	3304      	adds	r3, #4
 8013a0a:	4619      	mov	r1, r3
 8013a0c:	4610      	mov	r0, r2
 8013a0e:	f7ff fbd5 	bl	80131bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a16:	4b1b      	ldr	r3, [pc, #108]	; (8013a84 <xTaskIncrementTick+0x164>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a1c:	429a      	cmp	r2, r3
 8013a1e:	d3b9      	bcc.n	8013994 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013a20:	2301      	movs	r3, #1
 8013a22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013a24:	e7b6      	b.n	8013994 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013a26:	4b17      	ldr	r3, [pc, #92]	; (8013a84 <xTaskIncrementTick+0x164>)
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a2c:	4914      	ldr	r1, [pc, #80]	; (8013a80 <xTaskIncrementTick+0x160>)
 8013a2e:	4613      	mov	r3, r2
 8013a30:	009b      	lsls	r3, r3, #2
 8013a32:	4413      	add	r3, r2
 8013a34:	009b      	lsls	r3, r3, #2
 8013a36:	440b      	add	r3, r1
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	2b01      	cmp	r3, #1
 8013a3c:	d901      	bls.n	8013a42 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8013a3e:	2301      	movs	r3, #1
 8013a40:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013a42:	4b11      	ldr	r3, [pc, #68]	; (8013a88 <xTaskIncrementTick+0x168>)
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d007      	beq.n	8013a5a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8013a4a:	2301      	movs	r3, #1
 8013a4c:	617b      	str	r3, [r7, #20]
 8013a4e:	e004      	b.n	8013a5a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013a50:	4b0e      	ldr	r3, [pc, #56]	; (8013a8c <xTaskIncrementTick+0x16c>)
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	3301      	adds	r3, #1
 8013a56:	4a0d      	ldr	r2, [pc, #52]	; (8013a8c <xTaskIncrementTick+0x16c>)
 8013a58:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013a5a:	697b      	ldr	r3, [r7, #20]
}
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	3718      	adds	r7, #24
 8013a60:	46bd      	mov	sp, r7
 8013a62:	bd80      	pop	{r7, pc}
 8013a64:	20000a98 	.word	0x20000a98
 8013a68:	20000a74 	.word	0x20000a74
 8013a6c:	20000a28 	.word	0x20000a28
 8013a70:	20000a2c 	.word	0x20000a2c
 8013a74:	20000a88 	.word	0x20000a88
 8013a78:	20000a90 	.word	0x20000a90
 8013a7c:	20000a78 	.word	0x20000a78
 8013a80:	20000974 	.word	0x20000974
 8013a84:	20000970 	.word	0x20000970
 8013a88:	20000a84 	.word	0x20000a84
 8013a8c:	20000a80 	.word	0x20000a80

08013a90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013a90:	b480      	push	{r7}
 8013a92:	b087      	sub	sp, #28
 8013a94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013a96:	4b27      	ldr	r3, [pc, #156]	; (8013b34 <vTaskSwitchContext+0xa4>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d003      	beq.n	8013aa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013a9e:	4b26      	ldr	r3, [pc, #152]	; (8013b38 <vTaskSwitchContext+0xa8>)
 8013aa0:	2201      	movs	r2, #1
 8013aa2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013aa4:	e03f      	b.n	8013b26 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8013aa6:	4b24      	ldr	r3, [pc, #144]	; (8013b38 <vTaskSwitchContext+0xa8>)
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013aac:	4b23      	ldr	r3, [pc, #140]	; (8013b3c <vTaskSwitchContext+0xac>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	fab3 f383 	clz	r3, r3
 8013ab8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013aba:	7afb      	ldrb	r3, [r7, #11]
 8013abc:	f1c3 031f 	rsb	r3, r3, #31
 8013ac0:	617b      	str	r3, [r7, #20]
 8013ac2:	491f      	ldr	r1, [pc, #124]	; (8013b40 <vTaskSwitchContext+0xb0>)
 8013ac4:	697a      	ldr	r2, [r7, #20]
 8013ac6:	4613      	mov	r3, r2
 8013ac8:	009b      	lsls	r3, r3, #2
 8013aca:	4413      	add	r3, r2
 8013acc:	009b      	lsls	r3, r3, #2
 8013ace:	440b      	add	r3, r1
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d10a      	bne.n	8013aec <vTaskSwitchContext+0x5c>
	__asm volatile
 8013ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ada:	f383 8811 	msr	BASEPRI, r3
 8013ade:	f3bf 8f6f 	isb	sy
 8013ae2:	f3bf 8f4f 	dsb	sy
 8013ae6:	607b      	str	r3, [r7, #4]
}
 8013ae8:	bf00      	nop
 8013aea:	e7fe      	b.n	8013aea <vTaskSwitchContext+0x5a>
 8013aec:	697a      	ldr	r2, [r7, #20]
 8013aee:	4613      	mov	r3, r2
 8013af0:	009b      	lsls	r3, r3, #2
 8013af2:	4413      	add	r3, r2
 8013af4:	009b      	lsls	r3, r3, #2
 8013af6:	4a12      	ldr	r2, [pc, #72]	; (8013b40 <vTaskSwitchContext+0xb0>)
 8013af8:	4413      	add	r3, r2
 8013afa:	613b      	str	r3, [r7, #16]
 8013afc:	693b      	ldr	r3, [r7, #16]
 8013afe:	685b      	ldr	r3, [r3, #4]
 8013b00:	685a      	ldr	r2, [r3, #4]
 8013b02:	693b      	ldr	r3, [r7, #16]
 8013b04:	605a      	str	r2, [r3, #4]
 8013b06:	693b      	ldr	r3, [r7, #16]
 8013b08:	685a      	ldr	r2, [r3, #4]
 8013b0a:	693b      	ldr	r3, [r7, #16]
 8013b0c:	3308      	adds	r3, #8
 8013b0e:	429a      	cmp	r2, r3
 8013b10:	d104      	bne.n	8013b1c <vTaskSwitchContext+0x8c>
 8013b12:	693b      	ldr	r3, [r7, #16]
 8013b14:	685b      	ldr	r3, [r3, #4]
 8013b16:	685a      	ldr	r2, [r3, #4]
 8013b18:	693b      	ldr	r3, [r7, #16]
 8013b1a:	605a      	str	r2, [r3, #4]
 8013b1c:	693b      	ldr	r3, [r7, #16]
 8013b1e:	685b      	ldr	r3, [r3, #4]
 8013b20:	68db      	ldr	r3, [r3, #12]
 8013b22:	4a08      	ldr	r2, [pc, #32]	; (8013b44 <vTaskSwitchContext+0xb4>)
 8013b24:	6013      	str	r3, [r2, #0]
}
 8013b26:	bf00      	nop
 8013b28:	371c      	adds	r7, #28
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b30:	4770      	bx	lr
 8013b32:	bf00      	nop
 8013b34:	20000a98 	.word	0x20000a98
 8013b38:	20000a84 	.word	0x20000a84
 8013b3c:	20000a78 	.word	0x20000a78
 8013b40:	20000974 	.word	0x20000974
 8013b44:	20000970 	.word	0x20000970

08013b48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b082      	sub	sp, #8
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013b50:	f000 f852 	bl	8013bf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013b54:	4b06      	ldr	r3, [pc, #24]	; (8013b70 <prvIdleTask+0x28>)
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	2b01      	cmp	r3, #1
 8013b5a:	d9f9      	bls.n	8013b50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013b5c:	4b05      	ldr	r3, [pc, #20]	; (8013b74 <prvIdleTask+0x2c>)
 8013b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b62:	601a      	str	r2, [r3, #0]
 8013b64:	f3bf 8f4f 	dsb	sy
 8013b68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013b6c:	e7f0      	b.n	8013b50 <prvIdleTask+0x8>
 8013b6e:	bf00      	nop
 8013b70:	20000974 	.word	0x20000974
 8013b74:	e000ed04 	.word	0xe000ed04

08013b78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	b082      	sub	sp, #8
 8013b7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013b7e:	2300      	movs	r3, #0
 8013b80:	607b      	str	r3, [r7, #4]
 8013b82:	e00c      	b.n	8013b9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013b84:	687a      	ldr	r2, [r7, #4]
 8013b86:	4613      	mov	r3, r2
 8013b88:	009b      	lsls	r3, r3, #2
 8013b8a:	4413      	add	r3, r2
 8013b8c:	009b      	lsls	r3, r3, #2
 8013b8e:	4a12      	ldr	r2, [pc, #72]	; (8013bd8 <prvInitialiseTaskLists+0x60>)
 8013b90:	4413      	add	r3, r2
 8013b92:	4618      	mov	r0, r3
 8013b94:	f7ff fae5 	bl	8013162 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	3301      	adds	r3, #1
 8013b9c:	607b      	str	r3, [r7, #4]
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	2b06      	cmp	r3, #6
 8013ba2:	d9ef      	bls.n	8013b84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013ba4:	480d      	ldr	r0, [pc, #52]	; (8013bdc <prvInitialiseTaskLists+0x64>)
 8013ba6:	f7ff fadc 	bl	8013162 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013baa:	480d      	ldr	r0, [pc, #52]	; (8013be0 <prvInitialiseTaskLists+0x68>)
 8013bac:	f7ff fad9 	bl	8013162 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013bb0:	480c      	ldr	r0, [pc, #48]	; (8013be4 <prvInitialiseTaskLists+0x6c>)
 8013bb2:	f7ff fad6 	bl	8013162 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013bb6:	480c      	ldr	r0, [pc, #48]	; (8013be8 <prvInitialiseTaskLists+0x70>)
 8013bb8:	f7ff fad3 	bl	8013162 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013bbc:	480b      	ldr	r0, [pc, #44]	; (8013bec <prvInitialiseTaskLists+0x74>)
 8013bbe:	f7ff fad0 	bl	8013162 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013bc2:	4b0b      	ldr	r3, [pc, #44]	; (8013bf0 <prvInitialiseTaskLists+0x78>)
 8013bc4:	4a05      	ldr	r2, [pc, #20]	; (8013bdc <prvInitialiseTaskLists+0x64>)
 8013bc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013bc8:	4b0a      	ldr	r3, [pc, #40]	; (8013bf4 <prvInitialiseTaskLists+0x7c>)
 8013bca:	4a05      	ldr	r2, [pc, #20]	; (8013be0 <prvInitialiseTaskLists+0x68>)
 8013bcc:	601a      	str	r2, [r3, #0]
}
 8013bce:	bf00      	nop
 8013bd0:	3708      	adds	r7, #8
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	bd80      	pop	{r7, pc}
 8013bd6:	bf00      	nop
 8013bd8:	20000974 	.word	0x20000974
 8013bdc:	20000a00 	.word	0x20000a00
 8013be0:	20000a14 	.word	0x20000a14
 8013be4:	20000a30 	.word	0x20000a30
 8013be8:	20000a44 	.word	0x20000a44
 8013bec:	20000a5c 	.word	0x20000a5c
 8013bf0:	20000a28 	.word	0x20000a28
 8013bf4:	20000a2c 	.word	0x20000a2c

08013bf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b082      	sub	sp, #8
 8013bfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013bfe:	e019      	b.n	8013c34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013c00:	f000 fb40 	bl	8014284 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c04:	4b10      	ldr	r3, [pc, #64]	; (8013c48 <prvCheckTasksWaitingTermination+0x50>)
 8013c06:	68db      	ldr	r3, [r3, #12]
 8013c08:	68db      	ldr	r3, [r3, #12]
 8013c0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	3304      	adds	r3, #4
 8013c10:	4618      	mov	r0, r3
 8013c12:	f7ff fb30 	bl	8013276 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013c16:	4b0d      	ldr	r3, [pc, #52]	; (8013c4c <prvCheckTasksWaitingTermination+0x54>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	3b01      	subs	r3, #1
 8013c1c:	4a0b      	ldr	r2, [pc, #44]	; (8013c4c <prvCheckTasksWaitingTermination+0x54>)
 8013c1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013c20:	4b0b      	ldr	r3, [pc, #44]	; (8013c50 <prvCheckTasksWaitingTermination+0x58>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	3b01      	subs	r3, #1
 8013c26:	4a0a      	ldr	r2, [pc, #40]	; (8013c50 <prvCheckTasksWaitingTermination+0x58>)
 8013c28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013c2a:	f000 fb5b 	bl	80142e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013c2e:	6878      	ldr	r0, [r7, #4]
 8013c30:	f000 f810 	bl	8013c54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013c34:	4b06      	ldr	r3, [pc, #24]	; (8013c50 <prvCheckTasksWaitingTermination+0x58>)
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d1e1      	bne.n	8013c00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013c3c:	bf00      	nop
 8013c3e:	bf00      	nop
 8013c40:	3708      	adds	r7, #8
 8013c42:	46bd      	mov	sp, r7
 8013c44:	bd80      	pop	{r7, pc}
 8013c46:	bf00      	nop
 8013c48:	20000a44 	.word	0x20000a44
 8013c4c:	20000a70 	.word	0x20000a70
 8013c50:	20000a58 	.word	0x20000a58

08013c54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b084      	sub	sp, #16
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d108      	bne.n	8013c78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f000 fcf8 	bl	8014660 <vPortFree>
				vPortFree( pxTCB );
 8013c70:	6878      	ldr	r0, [r7, #4]
 8013c72:	f000 fcf5 	bl	8014660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013c76:	e018      	b.n	8013caa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013c7e:	2b01      	cmp	r3, #1
 8013c80:	d103      	bne.n	8013c8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	f000 fcec 	bl	8014660 <vPortFree>
	}
 8013c88:	e00f      	b.n	8013caa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013c90:	2b02      	cmp	r3, #2
 8013c92:	d00a      	beq.n	8013caa <prvDeleteTCB+0x56>
	__asm volatile
 8013c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c98:	f383 8811 	msr	BASEPRI, r3
 8013c9c:	f3bf 8f6f 	isb	sy
 8013ca0:	f3bf 8f4f 	dsb	sy
 8013ca4:	60fb      	str	r3, [r7, #12]
}
 8013ca6:	bf00      	nop
 8013ca8:	e7fe      	b.n	8013ca8 <prvDeleteTCB+0x54>
	}
 8013caa:	bf00      	nop
 8013cac:	3710      	adds	r7, #16
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	bd80      	pop	{r7, pc}
	...

08013cb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013cb4:	b480      	push	{r7}
 8013cb6:	b083      	sub	sp, #12
 8013cb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013cba:	4b0c      	ldr	r3, [pc, #48]	; (8013cec <prvResetNextTaskUnblockTime+0x38>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d104      	bne.n	8013cce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013cc4:	4b0a      	ldr	r3, [pc, #40]	; (8013cf0 <prvResetNextTaskUnblockTime+0x3c>)
 8013cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8013cca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013ccc:	e008      	b.n	8013ce0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013cce:	4b07      	ldr	r3, [pc, #28]	; (8013cec <prvResetNextTaskUnblockTime+0x38>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	68db      	ldr	r3, [r3, #12]
 8013cd4:	68db      	ldr	r3, [r3, #12]
 8013cd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	685b      	ldr	r3, [r3, #4]
 8013cdc:	4a04      	ldr	r2, [pc, #16]	; (8013cf0 <prvResetNextTaskUnblockTime+0x3c>)
 8013cde:	6013      	str	r3, [r2, #0]
}
 8013ce0:	bf00      	nop
 8013ce2:	370c      	adds	r7, #12
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cea:	4770      	bx	lr
 8013cec:	20000a28 	.word	0x20000a28
 8013cf0:	20000a90 	.word	0x20000a90

08013cf4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b086      	sub	sp, #24
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	60f8      	str	r0, [r7, #12]
 8013cfc:	60b9      	str	r1, [r7, #8]
 8013cfe:	607a      	str	r2, [r7, #4]
 8013d00:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8013d02:	f000 fabf 	bl	8014284 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8013d06:	4b26      	ldr	r3, [pc, #152]	; (8013da0 <xTaskNotifyWait+0xac>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013d0e:	b2db      	uxtb	r3, r3
 8013d10:	2b02      	cmp	r3, #2
 8013d12:	d01a      	beq.n	8013d4a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8013d14:	4b22      	ldr	r3, [pc, #136]	; (8013da0 <xTaskNotifyWait+0xac>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013d1a:	68fa      	ldr	r2, [r7, #12]
 8013d1c:	43d2      	mvns	r2, r2
 8013d1e:	400a      	ands	r2, r1
 8013d20:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8013d22:	4b1f      	ldr	r3, [pc, #124]	; (8013da0 <xTaskNotifyWait+0xac>)
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	2201      	movs	r2, #1
 8013d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8013d2c:	683b      	ldr	r3, [r7, #0]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d00b      	beq.n	8013d4a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013d32:	2101      	movs	r1, #1
 8013d34:	6838      	ldr	r0, [r7, #0]
 8013d36:	f000 f911 	bl	8013f5c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8013d3a:	4b1a      	ldr	r3, [pc, #104]	; (8013da4 <xTaskNotifyWait+0xb0>)
 8013d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d40:	601a      	str	r2, [r3, #0]
 8013d42:	f3bf 8f4f 	dsb	sy
 8013d46:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013d4a:	f000 facb 	bl	80142e4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8013d4e:	f000 fa99 	bl	8014284 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d004      	beq.n	8013d62 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8013d58:	4b11      	ldr	r3, [pc, #68]	; (8013da0 <xTaskNotifyWait+0xac>)
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8013d62:	4b0f      	ldr	r3, [pc, #60]	; (8013da0 <xTaskNotifyWait+0xac>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013d6a:	b2db      	uxtb	r3, r3
 8013d6c:	2b02      	cmp	r3, #2
 8013d6e:	d002      	beq.n	8013d76 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8013d70:	2300      	movs	r3, #0
 8013d72:	617b      	str	r3, [r7, #20]
 8013d74:	e008      	b.n	8013d88 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8013d76:	4b0a      	ldr	r3, [pc, #40]	; (8013da0 <xTaskNotifyWait+0xac>)
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013d7c:	68ba      	ldr	r2, [r7, #8]
 8013d7e:	43d2      	mvns	r2, r2
 8013d80:	400a      	ands	r2, r1
 8013d82:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8013d84:	2301      	movs	r3, #1
 8013d86:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013d88:	4b05      	ldr	r3, [pc, #20]	; (8013da0 <xTaskNotifyWait+0xac>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8013d92:	f000 faa7 	bl	80142e4 <vPortExitCritical>

		return xReturn;
 8013d96:	697b      	ldr	r3, [r7, #20]
	}
 8013d98:	4618      	mov	r0, r3
 8013d9a:	3718      	adds	r7, #24
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}
 8013da0:	20000970 	.word	0x20000970
 8013da4:	e000ed04 	.word	0xe000ed04

08013da8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b08e      	sub	sp, #56	; 0x38
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	60f8      	str	r0, [r7, #12]
 8013db0:	60b9      	str	r1, [r7, #8]
 8013db2:	603b      	str	r3, [r7, #0]
 8013db4:	4613      	mov	r3, r2
 8013db6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8013db8:	2301      	movs	r3, #1
 8013dba:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d10a      	bne.n	8013dd8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8013dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dc6:	f383 8811 	msr	BASEPRI, r3
 8013dca:	f3bf 8f6f 	isb	sy
 8013dce:	f3bf 8f4f 	dsb	sy
 8013dd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013dd4:	bf00      	nop
 8013dd6:	e7fe      	b.n	8013dd6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013dd8:	f000 fb36 	bl	8014448 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013de0:	f3ef 8211 	mrs	r2, BASEPRI
 8013de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013de8:	f383 8811 	msr	BASEPRI, r3
 8013dec:	f3bf 8f6f 	isb	sy
 8013df0:	f3bf 8f4f 	dsb	sy
 8013df4:	623a      	str	r2, [r7, #32]
 8013df6:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013df8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8013dfc:	683b      	ldr	r3, [r7, #0]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d003      	beq.n	8013e0a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013e06:	683b      	ldr	r3, [r7, #0]
 8013e08:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013e10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e16:	2202      	movs	r2, #2
 8013e18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8013e1c:	79fb      	ldrb	r3, [r7, #7]
 8013e1e:	2b04      	cmp	r3, #4
 8013e20:	d828      	bhi.n	8013e74 <xTaskGenericNotifyFromISR+0xcc>
 8013e22:	a201      	add	r2, pc, #4	; (adr r2, 8013e28 <xTaskGenericNotifyFromISR+0x80>)
 8013e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e28:	08013e95 	.word	0x08013e95
 8013e2c:	08013e3d 	.word	0x08013e3d
 8013e30:	08013e4b 	.word	0x08013e4b
 8013e34:	08013e57 	.word	0x08013e57
 8013e38:	08013e5f 	.word	0x08013e5f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013e40:	68bb      	ldr	r3, [r7, #8]
 8013e42:	431a      	orrs	r2, r3
 8013e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e46:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013e48:	e027      	b.n	8013e9a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8013e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013e4e:	1c5a      	adds	r2, r3, #1
 8013e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e52:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013e54:	e021      	b.n	8013e9a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8013e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e58:	68ba      	ldr	r2, [r7, #8]
 8013e5a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013e5c:	e01d      	b.n	8013e9a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013e5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013e62:	2b02      	cmp	r3, #2
 8013e64:	d003      	beq.n	8013e6e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e68:	68ba      	ldr	r2, [r7, #8]
 8013e6a:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8013e6c:	e015      	b.n	8013e9a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8013e6e:	2300      	movs	r3, #0
 8013e70:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8013e72:	e012      	b.n	8013e9a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8013e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e7c:	d00c      	beq.n	8013e98 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8013e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e82:	f383 8811 	msr	BASEPRI, r3
 8013e86:	f3bf 8f6f 	isb	sy
 8013e8a:	f3bf 8f4f 	dsb	sy
 8013e8e:	61bb      	str	r3, [r7, #24]
}
 8013e90:	bf00      	nop
 8013e92:	e7fe      	b.n	8013e92 <xTaskGenericNotifyFromISR+0xea>
					break;
 8013e94:	bf00      	nop
 8013e96:	e000      	b.n	8013e9a <xTaskGenericNotifyFromISR+0xf2>
					break;
 8013e98:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013e9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013e9e:	2b01      	cmp	r3, #1
 8013ea0:	d145      	bne.n	8013f2e <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d00a      	beq.n	8013ec0 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8013eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eae:	f383 8811 	msr	BASEPRI, r3
 8013eb2:	f3bf 8f6f 	isb	sy
 8013eb6:	f3bf 8f4f 	dsb	sy
 8013eba:	617b      	str	r3, [r7, #20]
}
 8013ebc:	bf00      	nop
 8013ebe:	e7fe      	b.n	8013ebe <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ec0:	4b20      	ldr	r3, [pc, #128]	; (8013f44 <xTaskGenericNotifyFromISR+0x19c>)
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d11c      	bne.n	8013f02 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eca:	3304      	adds	r3, #4
 8013ecc:	4618      	mov	r0, r3
 8013ece:	f7ff f9d2 	bl	8013276 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ed6:	2201      	movs	r2, #1
 8013ed8:	409a      	lsls	r2, r3
 8013eda:	4b1b      	ldr	r3, [pc, #108]	; (8013f48 <xTaskGenericNotifyFromISR+0x1a0>)
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	4313      	orrs	r3, r2
 8013ee0:	4a19      	ldr	r2, [pc, #100]	; (8013f48 <xTaskGenericNotifyFromISR+0x1a0>)
 8013ee2:	6013      	str	r3, [r2, #0]
 8013ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ee8:	4613      	mov	r3, r2
 8013eea:	009b      	lsls	r3, r3, #2
 8013eec:	4413      	add	r3, r2
 8013eee:	009b      	lsls	r3, r3, #2
 8013ef0:	4a16      	ldr	r2, [pc, #88]	; (8013f4c <xTaskGenericNotifyFromISR+0x1a4>)
 8013ef2:	441a      	add	r2, r3
 8013ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ef6:	3304      	adds	r3, #4
 8013ef8:	4619      	mov	r1, r3
 8013efa:	4610      	mov	r0, r2
 8013efc:	f7ff f95e 	bl	80131bc <vListInsertEnd>
 8013f00:	e005      	b.n	8013f0e <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8013f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f04:	3318      	adds	r3, #24
 8013f06:	4619      	mov	r1, r3
 8013f08:	4811      	ldr	r0, [pc, #68]	; (8013f50 <xTaskGenericNotifyFromISR+0x1a8>)
 8013f0a:	f7ff f957 	bl	80131bc <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f12:	4b10      	ldr	r3, [pc, #64]	; (8013f54 <xTaskGenericNotifyFromISR+0x1ac>)
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f18:	429a      	cmp	r2, r3
 8013f1a:	d908      	bls.n	8013f2e <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8013f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d002      	beq.n	8013f28 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8013f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f24:	2201      	movs	r2, #1
 8013f26:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8013f28:	4b0b      	ldr	r3, [pc, #44]	; (8013f58 <xTaskGenericNotifyFromISR+0x1b0>)
 8013f2a:	2201      	movs	r2, #1
 8013f2c:	601a      	str	r2, [r3, #0]
 8013f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f30:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013f38:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8013f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	3738      	adds	r7, #56	; 0x38
 8013f40:	46bd      	mov	sp, r7
 8013f42:	bd80      	pop	{r7, pc}
 8013f44:	20000a98 	.word	0x20000a98
 8013f48:	20000a78 	.word	0x20000a78
 8013f4c:	20000974 	.word	0x20000974
 8013f50:	20000a30 	.word	0x20000a30
 8013f54:	20000970 	.word	0x20000970
 8013f58:	20000a84 	.word	0x20000a84

08013f5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b084      	sub	sp, #16
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
 8013f64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013f66:	4b29      	ldr	r3, [pc, #164]	; (801400c <prvAddCurrentTaskToDelayedList+0xb0>)
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013f6c:	4b28      	ldr	r3, [pc, #160]	; (8014010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	3304      	adds	r3, #4
 8013f72:	4618      	mov	r0, r3
 8013f74:	f7ff f97f 	bl	8013276 <uxListRemove>
 8013f78:	4603      	mov	r3, r0
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d10b      	bne.n	8013f96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013f7e:	4b24      	ldr	r3, [pc, #144]	; (8014010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f84:	2201      	movs	r2, #1
 8013f86:	fa02 f303 	lsl.w	r3, r2, r3
 8013f8a:	43da      	mvns	r2, r3
 8013f8c:	4b21      	ldr	r3, [pc, #132]	; (8014014 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	4013      	ands	r3, r2
 8013f92:	4a20      	ldr	r2, [pc, #128]	; (8014014 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013f94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f9c:	d10a      	bne.n	8013fb4 <prvAddCurrentTaskToDelayedList+0x58>
 8013f9e:	683b      	ldr	r3, [r7, #0]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d007      	beq.n	8013fb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013fa4:	4b1a      	ldr	r3, [pc, #104]	; (8014010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	3304      	adds	r3, #4
 8013faa:	4619      	mov	r1, r3
 8013fac:	481a      	ldr	r0, [pc, #104]	; (8014018 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013fae:	f7ff f905 	bl	80131bc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013fb2:	e026      	b.n	8014002 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013fb4:	68fa      	ldr	r2, [r7, #12]
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	4413      	add	r3, r2
 8013fba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013fbc:	4b14      	ldr	r3, [pc, #80]	; (8014010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	68ba      	ldr	r2, [r7, #8]
 8013fc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013fc4:	68ba      	ldr	r2, [r7, #8]
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	d209      	bcs.n	8013fe0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013fcc:	4b13      	ldr	r3, [pc, #76]	; (801401c <prvAddCurrentTaskToDelayedList+0xc0>)
 8013fce:	681a      	ldr	r2, [r3, #0]
 8013fd0:	4b0f      	ldr	r3, [pc, #60]	; (8014010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	3304      	adds	r3, #4
 8013fd6:	4619      	mov	r1, r3
 8013fd8:	4610      	mov	r0, r2
 8013fda:	f7ff f913 	bl	8013204 <vListInsert>
}
 8013fde:	e010      	b.n	8014002 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013fe0:	4b0f      	ldr	r3, [pc, #60]	; (8014020 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013fe2:	681a      	ldr	r2, [r3, #0]
 8013fe4:	4b0a      	ldr	r3, [pc, #40]	; (8014010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	3304      	adds	r3, #4
 8013fea:	4619      	mov	r1, r3
 8013fec:	4610      	mov	r0, r2
 8013fee:	f7ff f909 	bl	8013204 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013ff2:	4b0c      	ldr	r3, [pc, #48]	; (8014024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	68ba      	ldr	r2, [r7, #8]
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d202      	bcs.n	8014002 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013ffc:	4a09      	ldr	r2, [pc, #36]	; (8014024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	6013      	str	r3, [r2, #0]
}
 8014002:	bf00      	nop
 8014004:	3710      	adds	r7, #16
 8014006:	46bd      	mov	sp, r7
 8014008:	bd80      	pop	{r7, pc}
 801400a:	bf00      	nop
 801400c:	20000a74 	.word	0x20000a74
 8014010:	20000970 	.word	0x20000970
 8014014:	20000a78 	.word	0x20000a78
 8014018:	20000a5c 	.word	0x20000a5c
 801401c:	20000a2c 	.word	0x20000a2c
 8014020:	20000a28 	.word	0x20000a28
 8014024:	20000a90 	.word	0x20000a90

08014028 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014028:	b480      	push	{r7}
 801402a:	b085      	sub	sp, #20
 801402c:	af00      	add	r7, sp, #0
 801402e:	60f8      	str	r0, [r7, #12]
 8014030:	60b9      	str	r1, [r7, #8]
 8014032:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	3b04      	subs	r3, #4
 8014038:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	3b04      	subs	r3, #4
 8014046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014048:	68bb      	ldr	r3, [r7, #8]
 801404a:	f023 0201 	bic.w	r2, r3, #1
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	3b04      	subs	r3, #4
 8014056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014058:	4a0c      	ldr	r2, [pc, #48]	; (801408c <pxPortInitialiseStack+0x64>)
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	3b14      	subs	r3, #20
 8014062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014064:	687a      	ldr	r2, [r7, #4]
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	3b04      	subs	r3, #4
 801406e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	f06f 0202 	mvn.w	r2, #2
 8014076:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	3b20      	subs	r3, #32
 801407c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801407e:	68fb      	ldr	r3, [r7, #12]
}
 8014080:	4618      	mov	r0, r3
 8014082:	3714      	adds	r7, #20
 8014084:	46bd      	mov	sp, r7
 8014086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408a:	4770      	bx	lr
 801408c:	08014091 	.word	0x08014091

08014090 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014090:	b480      	push	{r7}
 8014092:	b085      	sub	sp, #20
 8014094:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014096:	2300      	movs	r3, #0
 8014098:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801409a:	4b12      	ldr	r3, [pc, #72]	; (80140e4 <prvTaskExitError+0x54>)
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140a2:	d00a      	beq.n	80140ba <prvTaskExitError+0x2a>
	__asm volatile
 80140a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140a8:	f383 8811 	msr	BASEPRI, r3
 80140ac:	f3bf 8f6f 	isb	sy
 80140b0:	f3bf 8f4f 	dsb	sy
 80140b4:	60fb      	str	r3, [r7, #12]
}
 80140b6:	bf00      	nop
 80140b8:	e7fe      	b.n	80140b8 <prvTaskExitError+0x28>
	__asm volatile
 80140ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140be:	f383 8811 	msr	BASEPRI, r3
 80140c2:	f3bf 8f6f 	isb	sy
 80140c6:	f3bf 8f4f 	dsb	sy
 80140ca:	60bb      	str	r3, [r7, #8]
}
 80140cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80140ce:	bf00      	nop
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d0fc      	beq.n	80140d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80140d6:	bf00      	nop
 80140d8:	bf00      	nop
 80140da:	3714      	adds	r7, #20
 80140dc:	46bd      	mov	sp, r7
 80140de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e2:	4770      	bx	lr
 80140e4:	20000010 	.word	0x20000010
	...

080140f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80140f0:	4b07      	ldr	r3, [pc, #28]	; (8014110 <pxCurrentTCBConst2>)
 80140f2:	6819      	ldr	r1, [r3, #0]
 80140f4:	6808      	ldr	r0, [r1, #0]
 80140f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140fa:	f380 8809 	msr	PSP, r0
 80140fe:	f3bf 8f6f 	isb	sy
 8014102:	f04f 0000 	mov.w	r0, #0
 8014106:	f380 8811 	msr	BASEPRI, r0
 801410a:	4770      	bx	lr
 801410c:	f3af 8000 	nop.w

08014110 <pxCurrentTCBConst2>:
 8014110:	20000970 	.word	0x20000970
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014114:	bf00      	nop
 8014116:	bf00      	nop

08014118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014118:	4808      	ldr	r0, [pc, #32]	; (801413c <prvPortStartFirstTask+0x24>)
 801411a:	6800      	ldr	r0, [r0, #0]
 801411c:	6800      	ldr	r0, [r0, #0]
 801411e:	f380 8808 	msr	MSP, r0
 8014122:	f04f 0000 	mov.w	r0, #0
 8014126:	f380 8814 	msr	CONTROL, r0
 801412a:	b662      	cpsie	i
 801412c:	b661      	cpsie	f
 801412e:	f3bf 8f4f 	dsb	sy
 8014132:	f3bf 8f6f 	isb	sy
 8014136:	df00      	svc	0
 8014138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801413a:	bf00      	nop
 801413c:	e000ed08 	.word	0xe000ed08

08014140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b086      	sub	sp, #24
 8014144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014146:	4b46      	ldr	r3, [pc, #280]	; (8014260 <xPortStartScheduler+0x120>)
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	4a46      	ldr	r2, [pc, #280]	; (8014264 <xPortStartScheduler+0x124>)
 801414c:	4293      	cmp	r3, r2
 801414e:	d10a      	bne.n	8014166 <xPortStartScheduler+0x26>
	__asm volatile
 8014150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014154:	f383 8811 	msr	BASEPRI, r3
 8014158:	f3bf 8f6f 	isb	sy
 801415c:	f3bf 8f4f 	dsb	sy
 8014160:	613b      	str	r3, [r7, #16]
}
 8014162:	bf00      	nop
 8014164:	e7fe      	b.n	8014164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014166:	4b3e      	ldr	r3, [pc, #248]	; (8014260 <xPortStartScheduler+0x120>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	4a3f      	ldr	r2, [pc, #252]	; (8014268 <xPortStartScheduler+0x128>)
 801416c:	4293      	cmp	r3, r2
 801416e:	d10a      	bne.n	8014186 <xPortStartScheduler+0x46>
	__asm volatile
 8014170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014174:	f383 8811 	msr	BASEPRI, r3
 8014178:	f3bf 8f6f 	isb	sy
 801417c:	f3bf 8f4f 	dsb	sy
 8014180:	60fb      	str	r3, [r7, #12]
}
 8014182:	bf00      	nop
 8014184:	e7fe      	b.n	8014184 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014186:	4b39      	ldr	r3, [pc, #228]	; (801426c <xPortStartScheduler+0x12c>)
 8014188:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801418a:	697b      	ldr	r3, [r7, #20]
 801418c:	781b      	ldrb	r3, [r3, #0]
 801418e:	b2db      	uxtb	r3, r3
 8014190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014192:	697b      	ldr	r3, [r7, #20]
 8014194:	22ff      	movs	r2, #255	; 0xff
 8014196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014198:	697b      	ldr	r3, [r7, #20]
 801419a:	781b      	ldrb	r3, [r3, #0]
 801419c:	b2db      	uxtb	r3, r3
 801419e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80141a0:	78fb      	ldrb	r3, [r7, #3]
 80141a2:	b2db      	uxtb	r3, r3
 80141a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80141a8:	b2da      	uxtb	r2, r3
 80141aa:	4b31      	ldr	r3, [pc, #196]	; (8014270 <xPortStartScheduler+0x130>)
 80141ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80141ae:	4b31      	ldr	r3, [pc, #196]	; (8014274 <xPortStartScheduler+0x134>)
 80141b0:	2207      	movs	r2, #7
 80141b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80141b4:	e009      	b.n	80141ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80141b6:	4b2f      	ldr	r3, [pc, #188]	; (8014274 <xPortStartScheduler+0x134>)
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	3b01      	subs	r3, #1
 80141bc:	4a2d      	ldr	r2, [pc, #180]	; (8014274 <xPortStartScheduler+0x134>)
 80141be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80141c0:	78fb      	ldrb	r3, [r7, #3]
 80141c2:	b2db      	uxtb	r3, r3
 80141c4:	005b      	lsls	r3, r3, #1
 80141c6:	b2db      	uxtb	r3, r3
 80141c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80141ca:	78fb      	ldrb	r3, [r7, #3]
 80141cc:	b2db      	uxtb	r3, r3
 80141ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80141d2:	2b80      	cmp	r3, #128	; 0x80
 80141d4:	d0ef      	beq.n	80141b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80141d6:	4b27      	ldr	r3, [pc, #156]	; (8014274 <xPortStartScheduler+0x134>)
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	f1c3 0307 	rsb	r3, r3, #7
 80141de:	2b04      	cmp	r3, #4
 80141e0:	d00a      	beq.n	80141f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80141e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e6:	f383 8811 	msr	BASEPRI, r3
 80141ea:	f3bf 8f6f 	isb	sy
 80141ee:	f3bf 8f4f 	dsb	sy
 80141f2:	60bb      	str	r3, [r7, #8]
}
 80141f4:	bf00      	nop
 80141f6:	e7fe      	b.n	80141f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80141f8:	4b1e      	ldr	r3, [pc, #120]	; (8014274 <xPortStartScheduler+0x134>)
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	021b      	lsls	r3, r3, #8
 80141fe:	4a1d      	ldr	r2, [pc, #116]	; (8014274 <xPortStartScheduler+0x134>)
 8014200:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014202:	4b1c      	ldr	r3, [pc, #112]	; (8014274 <xPortStartScheduler+0x134>)
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801420a:	4a1a      	ldr	r2, [pc, #104]	; (8014274 <xPortStartScheduler+0x134>)
 801420c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	b2da      	uxtb	r2, r3
 8014212:	697b      	ldr	r3, [r7, #20]
 8014214:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014216:	4b18      	ldr	r3, [pc, #96]	; (8014278 <xPortStartScheduler+0x138>)
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	4a17      	ldr	r2, [pc, #92]	; (8014278 <xPortStartScheduler+0x138>)
 801421c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014222:	4b15      	ldr	r3, [pc, #84]	; (8014278 <xPortStartScheduler+0x138>)
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	4a14      	ldr	r2, [pc, #80]	; (8014278 <xPortStartScheduler+0x138>)
 8014228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801422c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801422e:	f000 f8dd 	bl	80143ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014232:	4b12      	ldr	r3, [pc, #72]	; (801427c <xPortStartScheduler+0x13c>)
 8014234:	2200      	movs	r2, #0
 8014236:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014238:	f000 f8fc 	bl	8014434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801423c:	4b10      	ldr	r3, [pc, #64]	; (8014280 <xPortStartScheduler+0x140>)
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	4a0f      	ldr	r2, [pc, #60]	; (8014280 <xPortStartScheduler+0x140>)
 8014242:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014246:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014248:	f7ff ff66 	bl	8014118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801424c:	f7ff fc20 	bl	8013a90 <vTaskSwitchContext>
	prvTaskExitError();
 8014250:	f7ff ff1e 	bl	8014090 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014254:	2300      	movs	r3, #0
}
 8014256:	4618      	mov	r0, r3
 8014258:	3718      	adds	r7, #24
 801425a:	46bd      	mov	sp, r7
 801425c:	bd80      	pop	{r7, pc}
 801425e:	bf00      	nop
 8014260:	e000ed00 	.word	0xe000ed00
 8014264:	410fc271 	.word	0x410fc271
 8014268:	410fc270 	.word	0x410fc270
 801426c:	e000e400 	.word	0xe000e400
 8014270:	20000a9c 	.word	0x20000a9c
 8014274:	20000aa0 	.word	0x20000aa0
 8014278:	e000ed20 	.word	0xe000ed20
 801427c:	20000010 	.word	0x20000010
 8014280:	e000ef34 	.word	0xe000ef34

08014284 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014284:	b480      	push	{r7}
 8014286:	b083      	sub	sp, #12
 8014288:	af00      	add	r7, sp, #0
	__asm volatile
 801428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801428e:	f383 8811 	msr	BASEPRI, r3
 8014292:	f3bf 8f6f 	isb	sy
 8014296:	f3bf 8f4f 	dsb	sy
 801429a:	607b      	str	r3, [r7, #4]
}
 801429c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801429e:	4b0f      	ldr	r3, [pc, #60]	; (80142dc <vPortEnterCritical+0x58>)
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	3301      	adds	r3, #1
 80142a4:	4a0d      	ldr	r2, [pc, #52]	; (80142dc <vPortEnterCritical+0x58>)
 80142a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80142a8:	4b0c      	ldr	r3, [pc, #48]	; (80142dc <vPortEnterCritical+0x58>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	2b01      	cmp	r3, #1
 80142ae:	d10f      	bne.n	80142d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80142b0:	4b0b      	ldr	r3, [pc, #44]	; (80142e0 <vPortEnterCritical+0x5c>)
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	b2db      	uxtb	r3, r3
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d00a      	beq.n	80142d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80142ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142be:	f383 8811 	msr	BASEPRI, r3
 80142c2:	f3bf 8f6f 	isb	sy
 80142c6:	f3bf 8f4f 	dsb	sy
 80142ca:	603b      	str	r3, [r7, #0]
}
 80142cc:	bf00      	nop
 80142ce:	e7fe      	b.n	80142ce <vPortEnterCritical+0x4a>
	}
}
 80142d0:	bf00      	nop
 80142d2:	370c      	adds	r7, #12
 80142d4:	46bd      	mov	sp, r7
 80142d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142da:	4770      	bx	lr
 80142dc:	20000010 	.word	0x20000010
 80142e0:	e000ed04 	.word	0xe000ed04

080142e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80142e4:	b480      	push	{r7}
 80142e6:	b083      	sub	sp, #12
 80142e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80142ea:	4b12      	ldr	r3, [pc, #72]	; (8014334 <vPortExitCritical+0x50>)
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d10a      	bne.n	8014308 <vPortExitCritical+0x24>
	__asm volatile
 80142f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f6:	f383 8811 	msr	BASEPRI, r3
 80142fa:	f3bf 8f6f 	isb	sy
 80142fe:	f3bf 8f4f 	dsb	sy
 8014302:	607b      	str	r3, [r7, #4]
}
 8014304:	bf00      	nop
 8014306:	e7fe      	b.n	8014306 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014308:	4b0a      	ldr	r3, [pc, #40]	; (8014334 <vPortExitCritical+0x50>)
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	3b01      	subs	r3, #1
 801430e:	4a09      	ldr	r2, [pc, #36]	; (8014334 <vPortExitCritical+0x50>)
 8014310:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014312:	4b08      	ldr	r3, [pc, #32]	; (8014334 <vPortExitCritical+0x50>)
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d105      	bne.n	8014326 <vPortExitCritical+0x42>
 801431a:	2300      	movs	r3, #0
 801431c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801431e:	683b      	ldr	r3, [r7, #0]
 8014320:	f383 8811 	msr	BASEPRI, r3
}
 8014324:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014326:	bf00      	nop
 8014328:	370c      	adds	r7, #12
 801432a:	46bd      	mov	sp, r7
 801432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014330:	4770      	bx	lr
 8014332:	bf00      	nop
 8014334:	20000010 	.word	0x20000010
	...

08014340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014340:	f3ef 8009 	mrs	r0, PSP
 8014344:	f3bf 8f6f 	isb	sy
 8014348:	4b15      	ldr	r3, [pc, #84]	; (80143a0 <pxCurrentTCBConst>)
 801434a:	681a      	ldr	r2, [r3, #0]
 801434c:	f01e 0f10 	tst.w	lr, #16
 8014350:	bf08      	it	eq
 8014352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801435a:	6010      	str	r0, [r2, #0]
 801435c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014364:	f380 8811 	msr	BASEPRI, r0
 8014368:	f3bf 8f4f 	dsb	sy
 801436c:	f3bf 8f6f 	isb	sy
 8014370:	f7ff fb8e 	bl	8013a90 <vTaskSwitchContext>
 8014374:	f04f 0000 	mov.w	r0, #0
 8014378:	f380 8811 	msr	BASEPRI, r0
 801437c:	bc09      	pop	{r0, r3}
 801437e:	6819      	ldr	r1, [r3, #0]
 8014380:	6808      	ldr	r0, [r1, #0]
 8014382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014386:	f01e 0f10 	tst.w	lr, #16
 801438a:	bf08      	it	eq
 801438c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014390:	f380 8809 	msr	PSP, r0
 8014394:	f3bf 8f6f 	isb	sy
 8014398:	4770      	bx	lr
 801439a:	bf00      	nop
 801439c:	f3af 8000 	nop.w

080143a0 <pxCurrentTCBConst>:
 80143a0:	20000970 	.word	0x20000970
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80143a4:	bf00      	nop
 80143a6:	bf00      	nop

080143a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b082      	sub	sp, #8
 80143ac:	af00      	add	r7, sp, #0
	__asm volatile
 80143ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143b2:	f383 8811 	msr	BASEPRI, r3
 80143b6:	f3bf 8f6f 	isb	sy
 80143ba:	f3bf 8f4f 	dsb	sy
 80143be:	607b      	str	r3, [r7, #4]
}
 80143c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80143c2:	f7ff faad 	bl	8013920 <xTaskIncrementTick>
 80143c6:	4603      	mov	r3, r0
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d003      	beq.n	80143d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80143cc:	4b06      	ldr	r3, [pc, #24]	; (80143e8 <SysTick_Handler+0x40>)
 80143ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143d2:	601a      	str	r2, [r3, #0]
 80143d4:	2300      	movs	r3, #0
 80143d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80143d8:	683b      	ldr	r3, [r7, #0]
 80143da:	f383 8811 	msr	BASEPRI, r3
}
 80143de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80143e0:	bf00      	nop
 80143e2:	3708      	adds	r7, #8
 80143e4:	46bd      	mov	sp, r7
 80143e6:	bd80      	pop	{r7, pc}
 80143e8:	e000ed04 	.word	0xe000ed04

080143ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80143ec:	b480      	push	{r7}
 80143ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80143f0:	4b0b      	ldr	r3, [pc, #44]	; (8014420 <vPortSetupTimerInterrupt+0x34>)
 80143f2:	2200      	movs	r2, #0
 80143f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80143f6:	4b0b      	ldr	r3, [pc, #44]	; (8014424 <vPortSetupTimerInterrupt+0x38>)
 80143f8:	2200      	movs	r2, #0
 80143fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80143fc:	4b0a      	ldr	r3, [pc, #40]	; (8014428 <vPortSetupTimerInterrupt+0x3c>)
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	4a0a      	ldr	r2, [pc, #40]	; (801442c <vPortSetupTimerInterrupt+0x40>)
 8014402:	fba2 2303 	umull	r2, r3, r2, r3
 8014406:	099b      	lsrs	r3, r3, #6
 8014408:	4a09      	ldr	r2, [pc, #36]	; (8014430 <vPortSetupTimerInterrupt+0x44>)
 801440a:	3b01      	subs	r3, #1
 801440c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801440e:	4b04      	ldr	r3, [pc, #16]	; (8014420 <vPortSetupTimerInterrupt+0x34>)
 8014410:	2207      	movs	r2, #7
 8014412:	601a      	str	r2, [r3, #0]
}
 8014414:	bf00      	nop
 8014416:	46bd      	mov	sp, r7
 8014418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441c:	4770      	bx	lr
 801441e:	bf00      	nop
 8014420:	e000e010 	.word	0xe000e010
 8014424:	e000e018 	.word	0xe000e018
 8014428:	20000004 	.word	0x20000004
 801442c:	10624dd3 	.word	0x10624dd3
 8014430:	e000e014 	.word	0xe000e014

08014434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014444 <vPortEnableVFP+0x10>
 8014438:	6801      	ldr	r1, [r0, #0]
 801443a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801443e:	6001      	str	r1, [r0, #0]
 8014440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014442:	bf00      	nop
 8014444:	e000ed88 	.word	0xe000ed88

08014448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014448:	b480      	push	{r7}
 801444a:	b085      	sub	sp, #20
 801444c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801444e:	f3ef 8305 	mrs	r3, IPSR
 8014452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	2b0f      	cmp	r3, #15
 8014458:	d914      	bls.n	8014484 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801445a:	4a17      	ldr	r2, [pc, #92]	; (80144b8 <vPortValidateInterruptPriority+0x70>)
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	4413      	add	r3, r2
 8014460:	781b      	ldrb	r3, [r3, #0]
 8014462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014464:	4b15      	ldr	r3, [pc, #84]	; (80144bc <vPortValidateInterruptPriority+0x74>)
 8014466:	781b      	ldrb	r3, [r3, #0]
 8014468:	7afa      	ldrb	r2, [r7, #11]
 801446a:	429a      	cmp	r2, r3
 801446c:	d20a      	bcs.n	8014484 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014472:	f383 8811 	msr	BASEPRI, r3
 8014476:	f3bf 8f6f 	isb	sy
 801447a:	f3bf 8f4f 	dsb	sy
 801447e:	607b      	str	r3, [r7, #4]
}
 8014480:	bf00      	nop
 8014482:	e7fe      	b.n	8014482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014484:	4b0e      	ldr	r3, [pc, #56]	; (80144c0 <vPortValidateInterruptPriority+0x78>)
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801448c:	4b0d      	ldr	r3, [pc, #52]	; (80144c4 <vPortValidateInterruptPriority+0x7c>)
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	429a      	cmp	r2, r3
 8014492:	d90a      	bls.n	80144aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014498:	f383 8811 	msr	BASEPRI, r3
 801449c:	f3bf 8f6f 	isb	sy
 80144a0:	f3bf 8f4f 	dsb	sy
 80144a4:	603b      	str	r3, [r7, #0]
}
 80144a6:	bf00      	nop
 80144a8:	e7fe      	b.n	80144a8 <vPortValidateInterruptPriority+0x60>
	}
 80144aa:	bf00      	nop
 80144ac:	3714      	adds	r7, #20
 80144ae:	46bd      	mov	sp, r7
 80144b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b4:	4770      	bx	lr
 80144b6:	bf00      	nop
 80144b8:	e000e3f0 	.word	0xe000e3f0
 80144bc:	20000a9c 	.word	0x20000a9c
 80144c0:	e000ed0c 	.word	0xe000ed0c
 80144c4:	20000aa0 	.word	0x20000aa0

080144c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b08a      	sub	sp, #40	; 0x28
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80144d0:	2300      	movs	r3, #0
 80144d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80144d4:	f7ff f96a 	bl	80137ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80144d8:	4b5b      	ldr	r3, [pc, #364]	; (8014648 <pvPortMalloc+0x180>)
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d101      	bne.n	80144e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80144e0:	f000 f920 	bl	8014724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80144e4:	4b59      	ldr	r3, [pc, #356]	; (801464c <pvPortMalloc+0x184>)
 80144e6:	681a      	ldr	r2, [r3, #0]
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	4013      	ands	r3, r2
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	f040 8093 	bne.w	8014618 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d01d      	beq.n	8014534 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80144f8:	2208      	movs	r2, #8
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	4413      	add	r3, r2
 80144fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	f003 0307 	and.w	r3, r3, #7
 8014506:	2b00      	cmp	r3, #0
 8014508:	d014      	beq.n	8014534 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	f023 0307 	bic.w	r3, r3, #7
 8014510:	3308      	adds	r3, #8
 8014512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	f003 0307 	and.w	r3, r3, #7
 801451a:	2b00      	cmp	r3, #0
 801451c:	d00a      	beq.n	8014534 <pvPortMalloc+0x6c>
	__asm volatile
 801451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014522:	f383 8811 	msr	BASEPRI, r3
 8014526:	f3bf 8f6f 	isb	sy
 801452a:	f3bf 8f4f 	dsb	sy
 801452e:	617b      	str	r3, [r7, #20]
}
 8014530:	bf00      	nop
 8014532:	e7fe      	b.n	8014532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d06e      	beq.n	8014618 <pvPortMalloc+0x150>
 801453a:	4b45      	ldr	r3, [pc, #276]	; (8014650 <pvPortMalloc+0x188>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	687a      	ldr	r2, [r7, #4]
 8014540:	429a      	cmp	r2, r3
 8014542:	d869      	bhi.n	8014618 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014544:	4b43      	ldr	r3, [pc, #268]	; (8014654 <pvPortMalloc+0x18c>)
 8014546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014548:	4b42      	ldr	r3, [pc, #264]	; (8014654 <pvPortMalloc+0x18c>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801454e:	e004      	b.n	801455a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801455c:	685b      	ldr	r3, [r3, #4]
 801455e:	687a      	ldr	r2, [r7, #4]
 8014560:	429a      	cmp	r2, r3
 8014562:	d903      	bls.n	801456c <pvPortMalloc+0xa4>
 8014564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d1f1      	bne.n	8014550 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801456c:	4b36      	ldr	r3, [pc, #216]	; (8014648 <pvPortMalloc+0x180>)
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014572:	429a      	cmp	r2, r3
 8014574:	d050      	beq.n	8014618 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014576:	6a3b      	ldr	r3, [r7, #32]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	2208      	movs	r2, #8
 801457c:	4413      	add	r3, r2
 801457e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014582:	681a      	ldr	r2, [r3, #0]
 8014584:	6a3b      	ldr	r3, [r7, #32]
 8014586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801458a:	685a      	ldr	r2, [r3, #4]
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	1ad2      	subs	r2, r2, r3
 8014590:	2308      	movs	r3, #8
 8014592:	005b      	lsls	r3, r3, #1
 8014594:	429a      	cmp	r2, r3
 8014596:	d91f      	bls.n	80145d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	4413      	add	r3, r2
 801459e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80145a0:	69bb      	ldr	r3, [r7, #24]
 80145a2:	f003 0307 	and.w	r3, r3, #7
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d00a      	beq.n	80145c0 <pvPortMalloc+0xf8>
	__asm volatile
 80145aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145ae:	f383 8811 	msr	BASEPRI, r3
 80145b2:	f3bf 8f6f 	isb	sy
 80145b6:	f3bf 8f4f 	dsb	sy
 80145ba:	613b      	str	r3, [r7, #16]
}
 80145bc:	bf00      	nop
 80145be:	e7fe      	b.n	80145be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80145c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145c2:	685a      	ldr	r2, [r3, #4]
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	1ad2      	subs	r2, r2, r3
 80145c8:	69bb      	ldr	r3, [r7, #24]
 80145ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80145cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145ce:	687a      	ldr	r2, [r7, #4]
 80145d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80145d2:	69b8      	ldr	r0, [r7, #24]
 80145d4:	f000 f908 	bl	80147e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80145d8:	4b1d      	ldr	r3, [pc, #116]	; (8014650 <pvPortMalloc+0x188>)
 80145da:	681a      	ldr	r2, [r3, #0]
 80145dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145de:	685b      	ldr	r3, [r3, #4]
 80145e0:	1ad3      	subs	r3, r2, r3
 80145e2:	4a1b      	ldr	r2, [pc, #108]	; (8014650 <pvPortMalloc+0x188>)
 80145e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80145e6:	4b1a      	ldr	r3, [pc, #104]	; (8014650 <pvPortMalloc+0x188>)
 80145e8:	681a      	ldr	r2, [r3, #0]
 80145ea:	4b1b      	ldr	r3, [pc, #108]	; (8014658 <pvPortMalloc+0x190>)
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	429a      	cmp	r2, r3
 80145f0:	d203      	bcs.n	80145fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80145f2:	4b17      	ldr	r3, [pc, #92]	; (8014650 <pvPortMalloc+0x188>)
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	4a18      	ldr	r2, [pc, #96]	; (8014658 <pvPortMalloc+0x190>)
 80145f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80145fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145fc:	685a      	ldr	r2, [r3, #4]
 80145fe:	4b13      	ldr	r3, [pc, #76]	; (801464c <pvPortMalloc+0x184>)
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	431a      	orrs	r2, r3
 8014604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801460a:	2200      	movs	r2, #0
 801460c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801460e:	4b13      	ldr	r3, [pc, #76]	; (801465c <pvPortMalloc+0x194>)
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	3301      	adds	r3, #1
 8014614:	4a11      	ldr	r2, [pc, #68]	; (801465c <pvPortMalloc+0x194>)
 8014616:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014618:	f7ff f8d6 	bl	80137c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801461c:	69fb      	ldr	r3, [r7, #28]
 801461e:	f003 0307 	and.w	r3, r3, #7
 8014622:	2b00      	cmp	r3, #0
 8014624:	d00a      	beq.n	801463c <pvPortMalloc+0x174>
	__asm volatile
 8014626:	f04f 0350 	mov.w	r3, #80	; 0x50
 801462a:	f383 8811 	msr	BASEPRI, r3
 801462e:	f3bf 8f6f 	isb	sy
 8014632:	f3bf 8f4f 	dsb	sy
 8014636:	60fb      	str	r3, [r7, #12]
}
 8014638:	bf00      	nop
 801463a:	e7fe      	b.n	801463a <pvPortMalloc+0x172>
	return pvReturn;
 801463c:	69fb      	ldr	r3, [r7, #28]
}
 801463e:	4618      	mov	r0, r3
 8014640:	3728      	adds	r7, #40	; 0x28
 8014642:	46bd      	mov	sp, r7
 8014644:	bd80      	pop	{r7, pc}
 8014646:	bf00      	nop
 8014648:	2000d2ac 	.word	0x2000d2ac
 801464c:	2000d2c0 	.word	0x2000d2c0
 8014650:	2000d2b0 	.word	0x2000d2b0
 8014654:	2000d2a4 	.word	0x2000d2a4
 8014658:	2000d2b4 	.word	0x2000d2b4
 801465c:	2000d2b8 	.word	0x2000d2b8

08014660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014660:	b580      	push	{r7, lr}
 8014662:	b086      	sub	sp, #24
 8014664:	af00      	add	r7, sp, #0
 8014666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d04d      	beq.n	801470e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014672:	2308      	movs	r3, #8
 8014674:	425b      	negs	r3, r3
 8014676:	697a      	ldr	r2, [r7, #20]
 8014678:	4413      	add	r3, r2
 801467a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801467c:	697b      	ldr	r3, [r7, #20]
 801467e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014680:	693b      	ldr	r3, [r7, #16]
 8014682:	685a      	ldr	r2, [r3, #4]
 8014684:	4b24      	ldr	r3, [pc, #144]	; (8014718 <vPortFree+0xb8>)
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	4013      	ands	r3, r2
 801468a:	2b00      	cmp	r3, #0
 801468c:	d10a      	bne.n	80146a4 <vPortFree+0x44>
	__asm volatile
 801468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014692:	f383 8811 	msr	BASEPRI, r3
 8014696:	f3bf 8f6f 	isb	sy
 801469a:	f3bf 8f4f 	dsb	sy
 801469e:	60fb      	str	r3, [r7, #12]
}
 80146a0:	bf00      	nop
 80146a2:	e7fe      	b.n	80146a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80146a4:	693b      	ldr	r3, [r7, #16]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d00a      	beq.n	80146c2 <vPortFree+0x62>
	__asm volatile
 80146ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146b0:	f383 8811 	msr	BASEPRI, r3
 80146b4:	f3bf 8f6f 	isb	sy
 80146b8:	f3bf 8f4f 	dsb	sy
 80146bc:	60bb      	str	r3, [r7, #8]
}
 80146be:	bf00      	nop
 80146c0:	e7fe      	b.n	80146c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80146c2:	693b      	ldr	r3, [r7, #16]
 80146c4:	685a      	ldr	r2, [r3, #4]
 80146c6:	4b14      	ldr	r3, [pc, #80]	; (8014718 <vPortFree+0xb8>)
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	4013      	ands	r3, r2
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d01e      	beq.n	801470e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80146d0:	693b      	ldr	r3, [r7, #16]
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d11a      	bne.n	801470e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80146d8:	693b      	ldr	r3, [r7, #16]
 80146da:	685a      	ldr	r2, [r3, #4]
 80146dc:	4b0e      	ldr	r3, [pc, #56]	; (8014718 <vPortFree+0xb8>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	43db      	mvns	r3, r3
 80146e2:	401a      	ands	r2, r3
 80146e4:	693b      	ldr	r3, [r7, #16]
 80146e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80146e8:	f7ff f860 	bl	80137ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80146ec:	693b      	ldr	r3, [r7, #16]
 80146ee:	685a      	ldr	r2, [r3, #4]
 80146f0:	4b0a      	ldr	r3, [pc, #40]	; (801471c <vPortFree+0xbc>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	4413      	add	r3, r2
 80146f6:	4a09      	ldr	r2, [pc, #36]	; (801471c <vPortFree+0xbc>)
 80146f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80146fa:	6938      	ldr	r0, [r7, #16]
 80146fc:	f000 f874 	bl	80147e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014700:	4b07      	ldr	r3, [pc, #28]	; (8014720 <vPortFree+0xc0>)
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	3301      	adds	r3, #1
 8014706:	4a06      	ldr	r2, [pc, #24]	; (8014720 <vPortFree+0xc0>)
 8014708:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801470a:	f7ff f85d 	bl	80137c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801470e:	bf00      	nop
 8014710:	3718      	adds	r7, #24
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}
 8014716:	bf00      	nop
 8014718:	2000d2c0 	.word	0x2000d2c0
 801471c:	2000d2b0 	.word	0x2000d2b0
 8014720:	2000d2bc 	.word	0x2000d2bc

08014724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014724:	b480      	push	{r7}
 8014726:	b085      	sub	sp, #20
 8014728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801472a:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 801472e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014730:	4b27      	ldr	r3, [pc, #156]	; (80147d0 <prvHeapInit+0xac>)
 8014732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	f003 0307 	and.w	r3, r3, #7
 801473a:	2b00      	cmp	r3, #0
 801473c:	d00c      	beq.n	8014758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	3307      	adds	r3, #7
 8014742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	f023 0307 	bic.w	r3, r3, #7
 801474a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801474c:	68ba      	ldr	r2, [r7, #8]
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	1ad3      	subs	r3, r2, r3
 8014752:	4a1f      	ldr	r2, [pc, #124]	; (80147d0 <prvHeapInit+0xac>)
 8014754:	4413      	add	r3, r2
 8014756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801475c:	4a1d      	ldr	r2, [pc, #116]	; (80147d4 <prvHeapInit+0xb0>)
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014762:	4b1c      	ldr	r3, [pc, #112]	; (80147d4 <prvHeapInit+0xb0>)
 8014764:	2200      	movs	r2, #0
 8014766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	68ba      	ldr	r2, [r7, #8]
 801476c:	4413      	add	r3, r2
 801476e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014770:	2208      	movs	r2, #8
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	1a9b      	subs	r3, r3, r2
 8014776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	f023 0307 	bic.w	r3, r3, #7
 801477e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	4a15      	ldr	r2, [pc, #84]	; (80147d8 <prvHeapInit+0xb4>)
 8014784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014786:	4b14      	ldr	r3, [pc, #80]	; (80147d8 <prvHeapInit+0xb4>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	2200      	movs	r2, #0
 801478c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801478e:	4b12      	ldr	r3, [pc, #72]	; (80147d8 <prvHeapInit+0xb4>)
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	2200      	movs	r2, #0
 8014794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801479a:	683b      	ldr	r3, [r7, #0]
 801479c:	68fa      	ldr	r2, [r7, #12]
 801479e:	1ad2      	subs	r2, r2, r3
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80147a4:	4b0c      	ldr	r3, [pc, #48]	; (80147d8 <prvHeapInit+0xb4>)
 80147a6:	681a      	ldr	r2, [r3, #0]
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80147ac:	683b      	ldr	r3, [r7, #0]
 80147ae:	685b      	ldr	r3, [r3, #4]
 80147b0:	4a0a      	ldr	r2, [pc, #40]	; (80147dc <prvHeapInit+0xb8>)
 80147b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80147b4:	683b      	ldr	r3, [r7, #0]
 80147b6:	685b      	ldr	r3, [r3, #4]
 80147b8:	4a09      	ldr	r2, [pc, #36]	; (80147e0 <prvHeapInit+0xbc>)
 80147ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80147bc:	4b09      	ldr	r3, [pc, #36]	; (80147e4 <prvHeapInit+0xc0>)
 80147be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80147c2:	601a      	str	r2, [r3, #0]
}
 80147c4:	bf00      	nop
 80147c6:	3714      	adds	r7, #20
 80147c8:	46bd      	mov	sp, r7
 80147ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ce:	4770      	bx	lr
 80147d0:	20000aa4 	.word	0x20000aa4
 80147d4:	2000d2a4 	.word	0x2000d2a4
 80147d8:	2000d2ac 	.word	0x2000d2ac
 80147dc:	2000d2b4 	.word	0x2000d2b4
 80147e0:	2000d2b0 	.word	0x2000d2b0
 80147e4:	2000d2c0 	.word	0x2000d2c0

080147e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80147e8:	b480      	push	{r7}
 80147ea:	b085      	sub	sp, #20
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80147f0:	4b28      	ldr	r3, [pc, #160]	; (8014894 <prvInsertBlockIntoFreeList+0xac>)
 80147f2:	60fb      	str	r3, [r7, #12]
 80147f4:	e002      	b.n	80147fc <prvInsertBlockIntoFreeList+0x14>
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	60fb      	str	r3, [r7, #12]
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	687a      	ldr	r2, [r7, #4]
 8014802:	429a      	cmp	r2, r3
 8014804:	d8f7      	bhi.n	80147f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	685b      	ldr	r3, [r3, #4]
 801480e:	68ba      	ldr	r2, [r7, #8]
 8014810:	4413      	add	r3, r2
 8014812:	687a      	ldr	r2, [r7, #4]
 8014814:	429a      	cmp	r2, r3
 8014816:	d108      	bne.n	801482a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	685a      	ldr	r2, [r3, #4]
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	685b      	ldr	r3, [r3, #4]
 8014820:	441a      	add	r2, r3
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	685b      	ldr	r3, [r3, #4]
 8014832:	68ba      	ldr	r2, [r7, #8]
 8014834:	441a      	add	r2, r3
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	429a      	cmp	r2, r3
 801483c:	d118      	bne.n	8014870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	681a      	ldr	r2, [r3, #0]
 8014842:	4b15      	ldr	r3, [pc, #84]	; (8014898 <prvInsertBlockIntoFreeList+0xb0>)
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	429a      	cmp	r2, r3
 8014848:	d00d      	beq.n	8014866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	685a      	ldr	r2, [r3, #4]
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	685b      	ldr	r3, [r3, #4]
 8014854:	441a      	add	r2, r3
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	681a      	ldr	r2, [r3, #0]
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	601a      	str	r2, [r3, #0]
 8014864:	e008      	b.n	8014878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014866:	4b0c      	ldr	r3, [pc, #48]	; (8014898 <prvInsertBlockIntoFreeList+0xb0>)
 8014868:	681a      	ldr	r2, [r3, #0]
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	601a      	str	r2, [r3, #0]
 801486e:	e003      	b.n	8014878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	681a      	ldr	r2, [r3, #0]
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014878:	68fa      	ldr	r2, [r7, #12]
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	429a      	cmp	r2, r3
 801487e:	d002      	beq.n	8014886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	687a      	ldr	r2, [r7, #4]
 8014884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014886:	bf00      	nop
 8014888:	3714      	adds	r7, #20
 801488a:	46bd      	mov	sp, r7
 801488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014890:	4770      	bx	lr
 8014892:	bf00      	nop
 8014894:	2000d2a4 	.word	0x2000d2a4
 8014898:	2000d2ac 	.word	0x2000d2ac

0801489c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b082      	sub	sp, #8
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80148b0:	4619      	mov	r1, r3
 80148b2:	4610      	mov	r0, r2
 80148b4:	f7fd fae9 	bl	8011e8a <USBD_LL_SetupStage>
}
 80148b8:	bf00      	nop
 80148ba:	3708      	adds	r7, #8
 80148bc:	46bd      	mov	sp, r7
 80148be:	bd80      	pop	{r7, pc}

080148c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	b082      	sub	sp, #8
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
 80148c8:	460b      	mov	r3, r1
 80148ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80148d2:	78fa      	ldrb	r2, [r7, #3]
 80148d4:	6879      	ldr	r1, [r7, #4]
 80148d6:	4613      	mov	r3, r2
 80148d8:	00db      	lsls	r3, r3, #3
 80148da:	4413      	add	r3, r2
 80148dc:	009b      	lsls	r3, r3, #2
 80148de:	440b      	add	r3, r1
 80148e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80148e4:	681a      	ldr	r2, [r3, #0]
 80148e6:	78fb      	ldrb	r3, [r7, #3]
 80148e8:	4619      	mov	r1, r3
 80148ea:	f7fd fb23 	bl	8011f34 <USBD_LL_DataOutStage>
}
 80148ee:	bf00      	nop
 80148f0:	3708      	adds	r7, #8
 80148f2:	46bd      	mov	sp, r7
 80148f4:	bd80      	pop	{r7, pc}

080148f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80148f6:	b580      	push	{r7, lr}
 80148f8:	b082      	sub	sp, #8
 80148fa:	af00      	add	r7, sp, #0
 80148fc:	6078      	str	r0, [r7, #4]
 80148fe:	460b      	mov	r3, r1
 8014900:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8014908:	78fa      	ldrb	r2, [r7, #3]
 801490a:	6879      	ldr	r1, [r7, #4]
 801490c:	4613      	mov	r3, r2
 801490e:	00db      	lsls	r3, r3, #3
 8014910:	4413      	add	r3, r2
 8014912:	009b      	lsls	r3, r3, #2
 8014914:	440b      	add	r3, r1
 8014916:	334c      	adds	r3, #76	; 0x4c
 8014918:	681a      	ldr	r2, [r3, #0]
 801491a:	78fb      	ldrb	r3, [r7, #3]
 801491c:	4619      	mov	r1, r3
 801491e:	f7fd fbbc 	bl	801209a <USBD_LL_DataInStage>
}
 8014922:	bf00      	nop
 8014924:	3708      	adds	r7, #8
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}

0801492a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801492a:	b580      	push	{r7, lr}
 801492c:	b082      	sub	sp, #8
 801492e:	af00      	add	r7, sp, #0
 8014930:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014938:	4618      	mov	r0, r3
 801493a:	f7fd fcf0 	bl	801231e <USBD_LL_SOF>
}
 801493e:	bf00      	nop
 8014940:	3708      	adds	r7, #8
 8014942:	46bd      	mov	sp, r7
 8014944:	bd80      	pop	{r7, pc}

08014946 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014946:	b580      	push	{r7, lr}
 8014948:	b084      	sub	sp, #16
 801494a:	af00      	add	r7, sp, #0
 801494c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801494e:	2301      	movs	r3, #1
 8014950:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	68db      	ldr	r3, [r3, #12]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d102      	bne.n	8014960 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801495a:	2300      	movs	r3, #0
 801495c:	73fb      	strb	r3, [r7, #15]
 801495e:	e008      	b.n	8014972 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	68db      	ldr	r3, [r3, #12]
 8014964:	2b02      	cmp	r3, #2
 8014966:	d102      	bne.n	801496e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014968:	2301      	movs	r3, #1
 801496a:	73fb      	strb	r3, [r7, #15]
 801496c:	e001      	b.n	8014972 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801496e:	f7ee fb1d 	bl	8002fac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014978:	7bfa      	ldrb	r2, [r7, #15]
 801497a:	4611      	mov	r1, r2
 801497c:	4618      	mov	r0, r3
 801497e:	f7fd fc90 	bl	80122a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014988:	4618      	mov	r0, r3
 801498a:	f7fd fc38 	bl	80121fe <USBD_LL_Reset>
}
 801498e:	bf00      	nop
 8014990:	3710      	adds	r7, #16
 8014992:	46bd      	mov	sp, r7
 8014994:	bd80      	pop	{r7, pc}
	...

08014998 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014998:	b580      	push	{r7, lr}
 801499a:	b082      	sub	sp, #8
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80149a6:	4618      	mov	r0, r3
 80149a8:	f7fd fc8b 	bl	80122c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	687a      	ldr	r2, [r7, #4]
 80149b8:	6812      	ldr	r2, [r2, #0]
 80149ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80149be:	f043 0301 	orr.w	r3, r3, #1
 80149c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	6a1b      	ldr	r3, [r3, #32]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d005      	beq.n	80149d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80149cc:	4b04      	ldr	r3, [pc, #16]	; (80149e0 <HAL_PCD_SuspendCallback+0x48>)
 80149ce:	691b      	ldr	r3, [r3, #16]
 80149d0:	4a03      	ldr	r2, [pc, #12]	; (80149e0 <HAL_PCD_SuspendCallback+0x48>)
 80149d2:	f043 0306 	orr.w	r3, r3, #6
 80149d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80149d8:	bf00      	nop
 80149da:	3708      	adds	r7, #8
 80149dc:	46bd      	mov	sp, r7
 80149de:	bd80      	pop	{r7, pc}
 80149e0:	e000ed00 	.word	0xe000ed00

080149e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b082      	sub	sp, #8
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80149f2:	4618      	mov	r0, r3
 80149f4:	f7fd fc7b 	bl	80122ee <USBD_LL_Resume>
}
 80149f8:	bf00      	nop
 80149fa:	3708      	adds	r7, #8
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd80      	pop	{r7, pc}

08014a00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b082      	sub	sp, #8
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
 8014a08:	460b      	mov	r3, r1
 8014a0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014a12:	78fa      	ldrb	r2, [r7, #3]
 8014a14:	4611      	mov	r1, r2
 8014a16:	4618      	mov	r0, r3
 8014a18:	f7fd fcd3 	bl	80123c2 <USBD_LL_IsoOUTIncomplete>
}
 8014a1c:	bf00      	nop
 8014a1e:	3708      	adds	r7, #8
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd80      	pop	{r7, pc}

08014a24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b082      	sub	sp, #8
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
 8014a2c:	460b      	mov	r3, r1
 8014a2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014a36:	78fa      	ldrb	r2, [r7, #3]
 8014a38:	4611      	mov	r1, r2
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	f7fd fc8f 	bl	801235e <USBD_LL_IsoINIncomplete>
}
 8014a40:	bf00      	nop
 8014a42:	3708      	adds	r7, #8
 8014a44:	46bd      	mov	sp, r7
 8014a46:	bd80      	pop	{r7, pc}

08014a48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b082      	sub	sp, #8
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014a56:	4618      	mov	r0, r3
 8014a58:	f7fd fce5 	bl	8012426 <USBD_LL_DevConnected>
}
 8014a5c:	bf00      	nop
 8014a5e:	3708      	adds	r7, #8
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bd80      	pop	{r7, pc}

08014a64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b082      	sub	sp, #8
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014a72:	4618      	mov	r0, r3
 8014a74:	f7fd fce2 	bl	801243c <USBD_LL_DevDisconnected>
}
 8014a78:	bf00      	nop
 8014a7a:	3708      	adds	r7, #8
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	bd80      	pop	{r7, pc}

08014a80 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b084      	sub	sp, #16
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
 8014a88:	4608      	mov	r0, r1
 8014a8a:	4611      	mov	r1, r2
 8014a8c:	461a      	mov	r2, r3
 8014a8e:	4603      	mov	r3, r0
 8014a90:	70fb      	strb	r3, [r7, #3]
 8014a92:	460b      	mov	r3, r1
 8014a94:	70bb      	strb	r3, [r7, #2]
 8014a96:	4613      	mov	r3, r2
 8014a98:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014aa8:	78bb      	ldrb	r3, [r7, #2]
 8014aaa:	883a      	ldrh	r2, [r7, #0]
 8014aac:	78f9      	ldrb	r1, [r7, #3]
 8014aae:	f7f6 fe9b 	bl	800b7e8 <HAL_PCD_EP_Open>
 8014ab2:	4603      	mov	r3, r0
 8014ab4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ab6:	7bfb      	ldrb	r3, [r7, #15]
 8014ab8:	4618      	mov	r0, r3
 8014aba:	f000 f8d3 	bl	8014c64 <USBD_Get_USB_Status>
 8014abe:	4603      	mov	r3, r0
 8014ac0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014ac2:	7bbb      	ldrb	r3, [r7, #14]
}
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	3710      	adds	r7, #16
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	bd80      	pop	{r7, pc}

08014acc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b084      	sub	sp, #16
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
 8014ad4:	460b      	mov	r3, r1
 8014ad6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ad8:	2300      	movs	r3, #0
 8014ada:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014adc:	2300      	movs	r3, #0
 8014ade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014ae6:	78fa      	ldrb	r2, [r7, #3]
 8014ae8:	4611      	mov	r1, r2
 8014aea:	4618      	mov	r0, r3
 8014aec:	f7f6 ff79 	bl	800b9e2 <HAL_PCD_EP_SetStall>
 8014af0:	4603      	mov	r3, r0
 8014af2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014af4:	7bfb      	ldrb	r3, [r7, #15]
 8014af6:	4618      	mov	r0, r3
 8014af8:	f000 f8b4 	bl	8014c64 <USBD_Get_USB_Status>
 8014afc:	4603      	mov	r3, r0
 8014afe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014b00:	7bbb      	ldrb	r3, [r7, #14]
}
 8014b02:	4618      	mov	r0, r3
 8014b04:	3710      	adds	r7, #16
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}

08014b0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014b0a:	b580      	push	{r7, lr}
 8014b0c:	b084      	sub	sp, #16
 8014b0e:	af00      	add	r7, sp, #0
 8014b10:	6078      	str	r0, [r7, #4]
 8014b12:	460b      	mov	r3, r1
 8014b14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b16:	2300      	movs	r3, #0
 8014b18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014b24:	78fa      	ldrb	r2, [r7, #3]
 8014b26:	4611      	mov	r1, r2
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f7f6 ffbe 	bl	800baaa <HAL_PCD_EP_ClrStall>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b32:	7bfb      	ldrb	r3, [r7, #15]
 8014b34:	4618      	mov	r0, r3
 8014b36:	f000 f895 	bl	8014c64 <USBD_Get_USB_Status>
 8014b3a:	4603      	mov	r3, r0
 8014b3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014b3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014b40:	4618      	mov	r0, r3
 8014b42:	3710      	adds	r7, #16
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bd80      	pop	{r7, pc}

08014b48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014b48:	b480      	push	{r7}
 8014b4a:	b085      	sub	sp, #20
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
 8014b50:	460b      	mov	r3, r1
 8014b52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014b5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014b5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	da0b      	bge.n	8014b7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014b64:	78fb      	ldrb	r3, [r7, #3]
 8014b66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014b6a:	68f9      	ldr	r1, [r7, #12]
 8014b6c:	4613      	mov	r3, r2
 8014b6e:	00db      	lsls	r3, r3, #3
 8014b70:	4413      	add	r3, r2
 8014b72:	009b      	lsls	r3, r3, #2
 8014b74:	440b      	add	r3, r1
 8014b76:	333e      	adds	r3, #62	; 0x3e
 8014b78:	781b      	ldrb	r3, [r3, #0]
 8014b7a:	e00b      	b.n	8014b94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014b7c:	78fb      	ldrb	r3, [r7, #3]
 8014b7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014b82:	68f9      	ldr	r1, [r7, #12]
 8014b84:	4613      	mov	r3, r2
 8014b86:	00db      	lsls	r3, r3, #3
 8014b88:	4413      	add	r3, r2
 8014b8a:	009b      	lsls	r3, r3, #2
 8014b8c:	440b      	add	r3, r1
 8014b8e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8014b92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014b94:	4618      	mov	r0, r3
 8014b96:	3714      	adds	r7, #20
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9e:	4770      	bx	lr

08014ba0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b084      	sub	sp, #16
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
 8014ba8:	460b      	mov	r3, r1
 8014baa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014bac:	2300      	movs	r3, #0
 8014bae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014bba:	78fa      	ldrb	r2, [r7, #3]
 8014bbc:	4611      	mov	r1, r2
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f7f6 fded 	bl	800b79e <HAL_PCD_SetAddress>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014bc8:	7bfb      	ldrb	r3, [r7, #15]
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f000 f84a 	bl	8014c64 <USBD_Get_USB_Status>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014bd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	3710      	adds	r7, #16
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd80      	pop	{r7, pc}

08014bde <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014bde:	b580      	push	{r7, lr}
 8014be0:	b086      	sub	sp, #24
 8014be2:	af00      	add	r7, sp, #0
 8014be4:	60f8      	str	r0, [r7, #12]
 8014be6:	607a      	str	r2, [r7, #4]
 8014be8:	603b      	str	r3, [r7, #0]
 8014bea:	460b      	mov	r3, r1
 8014bec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014bee:	2300      	movs	r3, #0
 8014bf0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014bfc:	7af9      	ldrb	r1, [r7, #11]
 8014bfe:	683b      	ldr	r3, [r7, #0]
 8014c00:	687a      	ldr	r2, [r7, #4]
 8014c02:	f7f6 fea4 	bl	800b94e <HAL_PCD_EP_Transmit>
 8014c06:	4603      	mov	r3, r0
 8014c08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c0a:	7dfb      	ldrb	r3, [r7, #23]
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	f000 f829 	bl	8014c64 <USBD_Get_USB_Status>
 8014c12:	4603      	mov	r3, r0
 8014c14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014c16:	7dbb      	ldrb	r3, [r7, #22]
}
 8014c18:	4618      	mov	r0, r3
 8014c1a:	3718      	adds	r7, #24
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	bd80      	pop	{r7, pc}

08014c20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b086      	sub	sp, #24
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	60f8      	str	r0, [r7, #12]
 8014c28:	607a      	str	r2, [r7, #4]
 8014c2a:	603b      	str	r3, [r7, #0]
 8014c2c:	460b      	mov	r3, r1
 8014c2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c30:	2300      	movs	r3, #0
 8014c32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c34:	2300      	movs	r3, #0
 8014c36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014c3e:	7af9      	ldrb	r1, [r7, #11]
 8014c40:	683b      	ldr	r3, [r7, #0]
 8014c42:	687a      	ldr	r2, [r7, #4]
 8014c44:	f7f6 fe38 	bl	800b8b8 <HAL_PCD_EP_Receive>
 8014c48:	4603      	mov	r3, r0
 8014c4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c4c:	7dfb      	ldrb	r3, [r7, #23]
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f000 f808 	bl	8014c64 <USBD_Get_USB_Status>
 8014c54:	4603      	mov	r3, r0
 8014c56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014c58:	7dbb      	ldrb	r3, [r7, #22]
}
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	3718      	adds	r7, #24
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}
	...

08014c64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014c64:	b480      	push	{r7}
 8014c66:	b085      	sub	sp, #20
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c6e:	2300      	movs	r3, #0
 8014c70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014c72:	79fb      	ldrb	r3, [r7, #7]
 8014c74:	2b03      	cmp	r3, #3
 8014c76:	d817      	bhi.n	8014ca8 <USBD_Get_USB_Status+0x44>
 8014c78:	a201      	add	r2, pc, #4	; (adr r2, 8014c80 <USBD_Get_USB_Status+0x1c>)
 8014c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c7e:	bf00      	nop
 8014c80:	08014c91 	.word	0x08014c91
 8014c84:	08014c97 	.word	0x08014c97
 8014c88:	08014c9d 	.word	0x08014c9d
 8014c8c:	08014ca3 	.word	0x08014ca3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014c90:	2300      	movs	r3, #0
 8014c92:	73fb      	strb	r3, [r7, #15]
    break;
 8014c94:	e00b      	b.n	8014cae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014c96:	2303      	movs	r3, #3
 8014c98:	73fb      	strb	r3, [r7, #15]
    break;
 8014c9a:	e008      	b.n	8014cae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014c9c:	2301      	movs	r3, #1
 8014c9e:	73fb      	strb	r3, [r7, #15]
    break;
 8014ca0:	e005      	b.n	8014cae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014ca2:	2303      	movs	r3, #3
 8014ca4:	73fb      	strb	r3, [r7, #15]
    break;
 8014ca6:	e002      	b.n	8014cae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014ca8:	2303      	movs	r3, #3
 8014caa:	73fb      	strb	r3, [r7, #15]
    break;
 8014cac:	bf00      	nop
  }
  return usb_status;
 8014cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	3714      	adds	r7, #20
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cba:	4770      	bx	lr

08014cbc <arm_mat_trans_f32>:
 8014cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cc0:	f8b0 c000 	ldrh.w	ip, [r0]
 8014cc4:	884a      	ldrh	r2, [r1, #2]
 8014cc6:	6844      	ldr	r4, [r0, #4]
 8014cc8:	8843      	ldrh	r3, [r0, #2]
 8014cca:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8014cce:	4562      	cmp	r2, ip
 8014cd0:	b083      	sub	sp, #12
 8014cd2:	d15f      	bne.n	8014d94 <arm_mat_trans_f32+0xd8>
 8014cd4:	f8b1 e000 	ldrh.w	lr, [r1]
 8014cd8:	459e      	cmp	lr, r3
 8014cda:	d15b      	bne.n	8014d94 <arm_mat_trans_f32+0xd8>
 8014cdc:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8014ce0:	f00e 0303 	and.w	r3, lr, #3
 8014ce4:	461a      	mov	r2, r3
 8014ce6:	9301      	str	r3, [sp, #4]
 8014ce8:	f108 33ff 	add.w	r3, r8, #4294967295
 8014cec:	b29b      	uxth	r3, r3
 8014cee:	f103 0902 	add.w	r9, r3, #2
 8014cf2:	3a01      	subs	r2, #1
 8014cf4:	3301      	adds	r3, #1
 8014cf6:	ea4f 170c 	mov.w	r7, ip, lsl #4
 8014cfa:	fb03 f707 	mul.w	r7, r3, r7
 8014cfe:	b292      	uxth	r2, r2
 8014d00:	3201      	adds	r2, #1
 8014d02:	ea4f 1b03 	mov.w	fp, r3, lsl #4
 8014d06:	463b      	mov	r3, r7
 8014d08:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8014d0c:	4647      	mov	r7, r8
 8014d0e:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8014d12:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8014d16:	2600      	movs	r6, #0
 8014d18:	4698      	mov	r8, r3
 8014d1a:	eb0a 0086 	add.w	r0, sl, r6, lsl #2
 8014d1e:	b3bf      	cbz	r7, 8014d90 <arm_mat_trans_f32+0xd4>
 8014d20:	f104 0210 	add.w	r2, r4, #16
 8014d24:	eb04 0509 	add.w	r5, r4, r9
 8014d28:	4603      	mov	r3, r0
 8014d2a:	ed52 7a04 	vldr	s15, [r2, #-16]
 8014d2e:	edc3 7a00 	vstr	s15, [r3]
 8014d32:	ed52 7a03 	vldr	s15, [r2, #-12]
 8014d36:	440b      	add	r3, r1
 8014d38:	edc3 7a00 	vstr	s15, [r3]
 8014d3c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8014d40:	440b      	add	r3, r1
 8014d42:	edc3 7a00 	vstr	s15, [r3]
 8014d46:	ed52 7a01 	vldr	s15, [r2, #-4]
 8014d4a:	3210      	adds	r2, #16
 8014d4c:	440b      	add	r3, r1
 8014d4e:	42aa      	cmp	r2, r5
 8014d50:	edc3 7a00 	vstr	s15, [r3]
 8014d54:	440b      	add	r3, r1
 8014d56:	d1e8      	bne.n	8014d2a <arm_mat_trans_f32+0x6e>
 8014d58:	eb04 030b 	add.w	r3, r4, fp
 8014d5c:	4440      	add	r0, r8
 8014d5e:	9a01      	ldr	r2, [sp, #4]
 8014d60:	b182      	cbz	r2, 8014d84 <arm_mat_trans_f32+0xc8>
 8014d62:	eb03 040e 	add.w	r4, r3, lr
 8014d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d6a:	6002      	str	r2, [r0, #0]
 8014d6c:	42a3      	cmp	r3, r4
 8014d6e:	4408      	add	r0, r1
 8014d70:	d1f9      	bne.n	8014d66 <arm_mat_trans_f32+0xaa>
 8014d72:	3601      	adds	r6, #1
 8014d74:	b2b6      	uxth	r6, r6
 8014d76:	4566      	cmp	r6, ip
 8014d78:	d1cf      	bne.n	8014d1a <arm_mat_trans_f32+0x5e>
 8014d7a:	2000      	movs	r0, #0
 8014d7c:	b240      	sxtb	r0, r0
 8014d7e:	b003      	add	sp, #12
 8014d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d84:	3601      	adds	r6, #1
 8014d86:	b2b6      	uxth	r6, r6
 8014d88:	4566      	cmp	r6, ip
 8014d8a:	461c      	mov	r4, r3
 8014d8c:	d1c5      	bne.n	8014d1a <arm_mat_trans_f32+0x5e>
 8014d8e:	e7f4      	b.n	8014d7a <arm_mat_trans_f32+0xbe>
 8014d90:	4623      	mov	r3, r4
 8014d92:	e7e4      	b.n	8014d5e <arm_mat_trans_f32+0xa2>
 8014d94:	20fd      	movs	r0, #253	; 0xfd
 8014d96:	b240      	sxtb	r0, r0
 8014d98:	b003      	add	sp, #12
 8014d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d9e:	bf00      	nop

08014da0 <arm_mat_mult_f32>:
 8014da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014da4:	8843      	ldrh	r3, [r0, #2]
 8014da6:	880d      	ldrh	r5, [r1, #0]
 8014da8:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8014dac:	6854      	ldr	r4, [r2, #4]
 8014dae:	8800      	ldrh	r0, [r0, #0]
 8014db0:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 8014db4:	b087      	sub	sp, #28
 8014db6:	429d      	cmp	r5, r3
 8014db8:	9003      	str	r0, [sp, #12]
 8014dba:	9404      	str	r4, [sp, #16]
 8014dbc:	f040 808d 	bne.w	8014eda <arm_mat_mult_f32+0x13a>
 8014dc0:	8813      	ldrh	r3, [r2, #0]
 8014dc2:	4283      	cmp	r3, r0
 8014dc4:	f040 8089 	bne.w	8014eda <arm_mat_mult_f32+0x13a>
 8014dc8:	8853      	ldrh	r3, [r2, #2]
 8014dca:	4543      	cmp	r3, r8
 8014dcc:	f040 8085 	bne.w	8014eda <arm_mat_mult_f32+0x13a>
 8014dd0:	ea4f 0a95 	mov.w	sl, r5, lsr #2
 8014dd4:	f005 0303 	and.w	r3, r5, #3
 8014dd8:	461a      	mov	r2, r3
 8014dda:	9301      	str	r3, [sp, #4]
 8014ddc:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014de0:	b29b      	uxth	r3, r3
 8014de2:	3301      	adds	r3, #1
 8014de4:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8014de8:	fb0b fb03 	mul.w	fp, fp, r3
 8014dec:	3a01      	subs	r2, #1
 8014dee:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
 8014df2:	00ab      	lsls	r3, r5, #2
 8014df4:	b292      	uxth	r2, r2
 8014df6:	9305      	str	r3, [sp, #20]
 8014df8:	2300      	movs	r3, #0
 8014dfa:	3201      	adds	r2, #1
 8014dfc:	9302      	str	r3, [sp, #8]
 8014dfe:	460b      	mov	r3, r1
 8014e00:	684c      	ldr	r4, [r1, #4]
 8014e02:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8014e06:	4651      	mov	r1, sl
 8014e08:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8014e0c:	46da      	mov	sl, fp
 8014e0e:	469b      	mov	fp, r3
 8014e10:	9b04      	ldr	r3, [sp, #16]
 8014e12:	9a02      	ldr	r2, [sp, #8]
 8014e14:	2600      	movs	r6, #0
 8014e16:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 8014e1a:	f10c 0510 	add.w	r5, ip, #16
 8014e1e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8014ee4 <arm_mat_mult_f32+0x144>
 8014e22:	2900      	cmp	r1, #0
 8014e24:	d057      	beq.n	8014ed6 <arm_mat_mult_f32+0x136>
 8014e26:	f10e 0210 	add.w	r2, lr, #16
 8014e2a:	4623      	mov	r3, r4
 8014e2c:	ed52 5a04 	vldr	s11, [r2, #-16]
 8014e30:	edd3 6a00 	vldr	s13, [r3]
 8014e34:	ed12 7a03 	vldr	s14, [r2, #-12]
 8014e38:	ed12 5a02 	vldr	s10, [r2, #-8]
 8014e3c:	ed12 6a01 	vldr	s12, [r2, #-4]
 8014e40:	4403      	add	r3, r0
 8014e42:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8014e46:	edd3 6a00 	vldr	s13, [r3]
 8014e4a:	4403      	add	r3, r0
 8014e4c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014e50:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8014e54:	edd3 6a00 	vldr	s13, [r3]
 8014e58:	4403      	add	r3, r0
 8014e5a:	ee77 5a27 	vadd.f32	s11, s14, s15
 8014e5e:	ee65 7a26 	vmul.f32	s15, s10, s13
 8014e62:	edd3 6a00 	vldr	s13, [r3]
 8014e66:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8014e6a:	3210      	adds	r2, #16
 8014e6c:	ee66 7a26 	vmul.f32	s15, s12, s13
 8014e70:	42aa      	cmp	r2, r5
 8014e72:	4403      	add	r3, r0
 8014e74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014e78:	d1d8      	bne.n	8014e2c <arm_mat_mult_f32+0x8c>
 8014e7a:	4454      	add	r4, sl
 8014e7c:	4663      	mov	r3, ip
 8014e7e:	9a01      	ldr	r2, [sp, #4]
 8014e80:	b162      	cbz	r2, 8014e9c <arm_mat_mult_f32+0xfc>
 8014e82:	eb03 0209 	add.w	r2, r3, r9
 8014e86:	ecf3 6a01 	vldmia	r3!, {s13}
 8014e8a:	ed94 7a00 	vldr	s14, [r4]
 8014e8e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8014e92:	4293      	cmp	r3, r2
 8014e94:	4404      	add	r4, r0
 8014e96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014e9a:	d1f4      	bne.n	8014e86 <arm_mat_mult_f32+0xe6>
 8014e9c:	ece7 7a01 	vstmia	r7!, {s15}
 8014ea0:	3601      	adds	r6, #1
 8014ea2:	b2b6      	uxth	r6, r6
 8014ea4:	f8db 3004 	ldr.w	r3, [fp, #4]
 8014ea8:	4546      	cmp	r6, r8
 8014eaa:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8014eae:	d1b6      	bne.n	8014e1e <arm_mat_mult_f32+0x7e>
 8014eb0:	9a03      	ldr	r2, [sp, #12]
 8014eb2:	9c02      	ldr	r4, [sp, #8]
 8014eb4:	9d05      	ldr	r5, [sp, #20]
 8014eb6:	3a01      	subs	r2, #1
 8014eb8:	4434      	add	r4, r6
 8014eba:	b2a4      	uxth	r4, r4
 8014ebc:	b292      	uxth	r2, r2
 8014ebe:	9402      	str	r4, [sp, #8]
 8014ec0:	9203      	str	r2, [sp, #12]
 8014ec2:	44ae      	add	lr, r5
 8014ec4:	44ac      	add	ip, r5
 8014ec6:	461c      	mov	r4, r3
 8014ec8:	2a00      	cmp	r2, #0
 8014eca:	d1a1      	bne.n	8014e10 <arm_mat_mult_f32+0x70>
 8014ecc:	4610      	mov	r0, r2
 8014ece:	b240      	sxtb	r0, r0
 8014ed0:	b007      	add	sp, #28
 8014ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ed6:	4673      	mov	r3, lr
 8014ed8:	e7d1      	b.n	8014e7e <arm_mat_mult_f32+0xde>
 8014eda:	20fd      	movs	r0, #253	; 0xfd
 8014edc:	b240      	sxtb	r0, r0
 8014ede:	b007      	add	sp, #28
 8014ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ee4:	00000000 	.word	0x00000000

08014ee8 <arm_mat_init_f32>:
 8014ee8:	8001      	strh	r1, [r0, #0]
 8014eea:	8042      	strh	r2, [r0, #2]
 8014eec:	6043      	str	r3, [r0, #4]
 8014eee:	4770      	bx	lr

08014ef0 <_ZdlPvj>:
 8014ef0:	f000 b923 	b.w	801513a <_ZdlPv>

08014ef4 <_Znwj>:
 8014ef4:	2801      	cmp	r0, #1
 8014ef6:	bf38      	it	cc
 8014ef8:	2001      	movcc	r0, #1
 8014efa:	b510      	push	{r4, lr}
 8014efc:	4604      	mov	r4, r0
 8014efe:	4620      	mov	r0, r4
 8014f00:	f001 fa28 	bl	8016354 <malloc>
 8014f04:	b930      	cbnz	r0, 8014f14 <_Znwj+0x20>
 8014f06:	f000 f92d 	bl	8015164 <_ZSt15get_new_handlerv>
 8014f0a:	b908      	cbnz	r0, 8014f10 <_Znwj+0x1c>
 8014f0c:	f001 f9ed 	bl	80162ea <abort>
 8014f10:	4780      	blx	r0
 8014f12:	e7f4      	b.n	8014efe <_Znwj+0xa>
 8014f14:	bd10      	pop	{r4, pc}

08014f16 <__cxa_pure_virtual>:
 8014f16:	b508      	push	{r3, lr}
 8014f18:	f000 f91e 	bl	8015158 <_ZSt9terminatev>

08014f1c <_ZNSaIcEC1Ev>:
 8014f1c:	4770      	bx	lr

08014f1e <_ZNSaIcED1Ev>:
 8014f1e:	4770      	bx	lr

08014f20 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8014f20:	68c3      	ldr	r3, [r0, #12]
 8014f22:	689a      	ldr	r2, [r3, #8]
 8014f24:	60c2      	str	r2, [r0, #12]
 8014f26:	b510      	push	{r4, lr}
 8014f28:	b102      	cbz	r2, 8014f2c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8014f2a:	6050      	str	r0, [r2, #4]
 8014f2c:	6842      	ldr	r2, [r0, #4]
 8014f2e:	605a      	str	r2, [r3, #4]
 8014f30:	680c      	ldr	r4, [r1, #0]
 8014f32:	4284      	cmp	r4, r0
 8014f34:	d103      	bne.n	8014f3e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8014f36:	600b      	str	r3, [r1, #0]
 8014f38:	6098      	str	r0, [r3, #8]
 8014f3a:	6043      	str	r3, [r0, #4]
 8014f3c:	bd10      	pop	{r4, pc}
 8014f3e:	6891      	ldr	r1, [r2, #8]
 8014f40:	4281      	cmp	r1, r0
 8014f42:	bf0c      	ite	eq
 8014f44:	6093      	streq	r3, [r2, #8]
 8014f46:	60d3      	strne	r3, [r2, #12]
 8014f48:	e7f6      	b.n	8014f38 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08014f4a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8014f4a:	6883      	ldr	r3, [r0, #8]
 8014f4c:	68da      	ldr	r2, [r3, #12]
 8014f4e:	6082      	str	r2, [r0, #8]
 8014f50:	b510      	push	{r4, lr}
 8014f52:	b102      	cbz	r2, 8014f56 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8014f54:	6050      	str	r0, [r2, #4]
 8014f56:	6842      	ldr	r2, [r0, #4]
 8014f58:	605a      	str	r2, [r3, #4]
 8014f5a:	680c      	ldr	r4, [r1, #0]
 8014f5c:	4284      	cmp	r4, r0
 8014f5e:	d103      	bne.n	8014f68 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8014f60:	600b      	str	r3, [r1, #0]
 8014f62:	60d8      	str	r0, [r3, #12]
 8014f64:	6043      	str	r3, [r0, #4]
 8014f66:	bd10      	pop	{r4, pc}
 8014f68:	68d1      	ldr	r1, [r2, #12]
 8014f6a:	4281      	cmp	r1, r0
 8014f6c:	bf0c      	ite	eq
 8014f6e:	60d3      	streq	r3, [r2, #12]
 8014f70:	6093      	strne	r3, [r2, #8]
 8014f72:	e7f6      	b.n	8014f62 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08014f74 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8014f74:	7803      	ldrb	r3, [r0, #0]
 8014f76:	b933      	cbnz	r3, 8014f86 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8014f78:	6843      	ldr	r3, [r0, #4]
 8014f7a:	685b      	ldr	r3, [r3, #4]
 8014f7c:	4283      	cmp	r3, r0
 8014f7e:	d102      	bne.n	8014f86 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8014f80:	68db      	ldr	r3, [r3, #12]
 8014f82:	4618      	mov	r0, r3
 8014f84:	4770      	bx	lr
 8014f86:	6882      	ldr	r2, [r0, #8]
 8014f88:	b122      	cbz	r2, 8014f94 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8014f8a:	4613      	mov	r3, r2
 8014f8c:	68d2      	ldr	r2, [r2, #12]
 8014f8e:	2a00      	cmp	r2, #0
 8014f90:	d1fb      	bne.n	8014f8a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8014f92:	e7f6      	b.n	8014f82 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8014f94:	6843      	ldr	r3, [r0, #4]
 8014f96:	689a      	ldr	r2, [r3, #8]
 8014f98:	4282      	cmp	r2, r0
 8014f9a:	d1f2      	bne.n	8014f82 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	685b      	ldr	r3, [r3, #4]
 8014fa0:	e7f9      	b.n	8014f96 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08014fa2 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8014fa2:	f7ff bfe7 	b.w	8014f74 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08014fa6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8014fa6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014faa:	461e      	mov	r6, r3
 8014fac:	f103 0804 	add.w	r8, r3, #4
 8014fb0:	2300      	movs	r3, #0
 8014fb2:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8014fb6:	460c      	mov	r4, r1
 8014fb8:	604a      	str	r2, [r1, #4]
 8014fba:	700b      	strb	r3, [r1, #0]
 8014fbc:	b300      	cbz	r0, 8015000 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8014fbe:	4296      	cmp	r6, r2
 8014fc0:	6091      	str	r1, [r2, #8]
 8014fc2:	d118      	bne.n	8014ff6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8014fc4:	6071      	str	r1, [r6, #4]
 8014fc6:	60f4      	str	r4, [r6, #12]
 8014fc8:	2701      	movs	r7, #1
 8014fca:	f04f 0900 	mov.w	r9, #0
 8014fce:	6873      	ldr	r3, [r6, #4]
 8014fd0:	42a3      	cmp	r3, r4
 8014fd2:	d03f      	beq.n	8015054 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8014fd4:	6860      	ldr	r0, [r4, #4]
 8014fd6:	7802      	ldrb	r2, [r0, #0]
 8014fd8:	2a00      	cmp	r2, #0
 8014fda:	d13b      	bne.n	8015054 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8014fdc:	6845      	ldr	r5, [r0, #4]
 8014fde:	68ab      	ldr	r3, [r5, #8]
 8014fe0:	4298      	cmp	r0, r3
 8014fe2:	d123      	bne.n	801502c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 8014fe4:	68eb      	ldr	r3, [r5, #12]
 8014fe6:	b183      	cbz	r3, 801500a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8014fe8:	781a      	ldrb	r2, [r3, #0]
 8014fea:	b972      	cbnz	r2, 801500a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8014fec:	7007      	strb	r7, [r0, #0]
 8014fee:	701f      	strb	r7, [r3, #0]
 8014ff0:	702a      	strb	r2, [r5, #0]
 8014ff2:	462c      	mov	r4, r5
 8014ff4:	e7eb      	b.n	8014fce <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8014ff6:	68b3      	ldr	r3, [r6, #8]
 8014ff8:	4293      	cmp	r3, r2
 8014ffa:	d1e5      	bne.n	8014fc8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8014ffc:	60b1      	str	r1, [r6, #8]
 8014ffe:	e7e3      	b.n	8014fc8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8015000:	60d1      	str	r1, [r2, #12]
 8015002:	68f3      	ldr	r3, [r6, #12]
 8015004:	4293      	cmp	r3, r2
 8015006:	d1df      	bne.n	8014fc8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8015008:	e7dd      	b.n	8014fc6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 801500a:	68c3      	ldr	r3, [r0, #12]
 801500c:	42a3      	cmp	r3, r4
 801500e:	d103      	bne.n	8015018 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 8015010:	4641      	mov	r1, r8
 8015012:	f7ff ff85 	bl	8014f20 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8015016:	4604      	mov	r4, r0
 8015018:	6863      	ldr	r3, [r4, #4]
 801501a:	4641      	mov	r1, r8
 801501c:	701f      	strb	r7, [r3, #0]
 801501e:	4628      	mov	r0, r5
 8015020:	f885 9000 	strb.w	r9, [r5]
 8015024:	f7ff ff91 	bl	8014f4a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8015028:	4625      	mov	r5, r4
 801502a:	e7e2      	b.n	8014ff2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 801502c:	b113      	cbz	r3, 8015034 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 801502e:	781a      	ldrb	r2, [r3, #0]
 8015030:	2a00      	cmp	r2, #0
 8015032:	d0db      	beq.n	8014fec <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 8015034:	6883      	ldr	r3, [r0, #8]
 8015036:	42a3      	cmp	r3, r4
 8015038:	d103      	bne.n	8015042 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 801503a:	4641      	mov	r1, r8
 801503c:	f7ff ff85 	bl	8014f4a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8015040:	4604      	mov	r4, r0
 8015042:	6863      	ldr	r3, [r4, #4]
 8015044:	4641      	mov	r1, r8
 8015046:	701f      	strb	r7, [r3, #0]
 8015048:	4628      	mov	r0, r5
 801504a:	f885 9000 	strb.w	r9, [r5]
 801504e:	f7ff ff67 	bl	8014f20 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8015052:	e7e9      	b.n	8015028 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 8015054:	2201      	movs	r2, #1
 8015056:	701a      	strb	r2, [r3, #0]
 8015058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801505c <_ZSt17__throw_bad_allocv>:
 801505c:	b508      	push	{r3, lr}
 801505e:	f001 f944 	bl	80162ea <abort>

08015062 <_ZSt20__throw_length_errorPKc>:
 8015062:	b508      	push	{r3, lr}
 8015064:	f001 f941 	bl	80162ea <abort>

08015068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8015068:	b508      	push	{r3, lr}
 801506a:	680b      	ldr	r3, [r1, #0]
 801506c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015070:	d302      	bcc.n	8015078 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8015072:	480d      	ldr	r0, [pc, #52]	; (80150a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8015074:	f7ff fff5 	bl	8015062 <_ZSt20__throw_length_errorPKc>
 8015078:	4293      	cmp	r3, r2
 801507a:	d90b      	bls.n	8015094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801507c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8015080:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8015084:	d206      	bcs.n	8015094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8015086:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801508a:	bf2a      	itet	cs
 801508c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8015090:	6008      	strcc	r0, [r1, #0]
 8015092:	600b      	strcs	r3, [r1, #0]
 8015094:	6808      	ldr	r0, [r1, #0]
 8015096:	3001      	adds	r0, #1
 8015098:	d501      	bpl.n	801509e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801509a:	f7ff ffdf 	bl	801505c <_ZSt17__throw_bad_allocv>
 801509e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80150a2:	f7ff bf27 	b.w	8014ef4 <_Znwj>
 80150a6:	bf00      	nop
 80150a8:	0802aa1c 	.word	0x0802aa1c

080150ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80150ac:	f850 3b08 	ldr.w	r3, [r0], #8
 80150b0:	4283      	cmp	r3, r0
 80150b2:	d002      	beq.n	80150ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80150b4:	4618      	mov	r0, r3
 80150b6:	f000 b840 	b.w	801513a <_ZdlPv>
 80150ba:	4770      	bx	lr

080150bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 80150bc:	460b      	mov	r3, r1
 80150be:	2b01      	cmp	r3, #1
 80150c0:	b410      	push	{r4}
 80150c2:	4611      	mov	r1, r2
 80150c4:	4604      	mov	r4, r0
 80150c6:	d103      	bne.n	80150d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 80150c8:	7022      	strb	r2, [r4, #0]
 80150ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150ce:	4770      	bx	lr
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d0fa      	beq.n	80150ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 80150d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150d8:	461a      	mov	r2, r3
 80150da:	f001 b973 	b.w	80163c4 <memset>

080150de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 80150de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80150e0:	290f      	cmp	r1, #15
 80150e2:	4604      	mov	r4, r0
 80150e4:	9101      	str	r1, [sp, #4]
 80150e6:	4615      	mov	r5, r2
 80150e8:	d906      	bls.n	80150f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 80150ea:	2200      	movs	r2, #0
 80150ec:	a901      	add	r1, sp, #4
 80150ee:	f7ff ffbb 	bl	8015068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80150f2:	9b01      	ldr	r3, [sp, #4]
 80150f4:	6020      	str	r0, [r4, #0]
 80150f6:	60a3      	str	r3, [r4, #8]
 80150f8:	9901      	ldr	r1, [sp, #4]
 80150fa:	b119      	cbz	r1, 8015104 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 80150fc:	6820      	ldr	r0, [r4, #0]
 80150fe:	462a      	mov	r2, r5
 8015100:	f7ff ffdc 	bl	80150bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8015104:	9b01      	ldr	r3, [sp, #4]
 8015106:	6822      	ldr	r2, [r4, #0]
 8015108:	6063      	str	r3, [r4, #4]
 801510a:	2100      	movs	r1, #0
 801510c:	54d1      	strb	r1, [r2, r3]
 801510e:	b003      	add	sp, #12
 8015110:	bd30      	pop	{r4, r5, pc}

08015112 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 8015112:	b510      	push	{r4, lr}
 8015114:	f100 0308 	add.w	r3, r0, #8
 8015118:	4604      	mov	r4, r0
 801511a:	6003      	str	r3, [r0, #0]
 801511c:	f7ff ffdf 	bl	80150de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 8015120:	4620      	mov	r0, r4
 8015122:	bd10      	pop	{r4, pc}

08015124 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8015124:	b510      	push	{r4, lr}
 8015126:	4604      	mov	r4, r0
 8015128:	f7ff ffc0 	bl	80150ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801512c:	4620      	mov	r0, r4
 801512e:	bd10      	pop	{r4, pc}

08015130 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8015130:	6800      	ldr	r0, [r0, #0]
 8015132:	4408      	add	r0, r1
 8015134:	4770      	bx	lr

08015136 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8015136:	6800      	ldr	r0, [r0, #0]
 8015138:	4770      	bx	lr

0801513a <_ZdlPv>:
 801513a:	f001 b913 	b.w	8016364 <free>

0801513e <_ZN10__cxxabiv111__terminateEPFvvE>:
 801513e:	b508      	push	{r3, lr}
 8015140:	4780      	blx	r0
 8015142:	f001 f8d2 	bl	80162ea <abort>
	...

08015148 <_ZSt13get_terminatev>:
 8015148:	4b02      	ldr	r3, [pc, #8]	; (8015154 <_ZSt13get_terminatev+0xc>)
 801514a:	6818      	ldr	r0, [r3, #0]
 801514c:	f3bf 8f5b 	dmb	ish
 8015150:	4770      	bx	lr
 8015152:	bf00      	nop
 8015154:	20000014 	.word	0x20000014

08015158 <_ZSt9terminatev>:
 8015158:	b508      	push	{r3, lr}
 801515a:	f7ff fff5 	bl	8015148 <_ZSt13get_terminatev>
 801515e:	f7ff ffee 	bl	801513e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08015164 <_ZSt15get_new_handlerv>:
 8015164:	4b02      	ldr	r3, [pc, #8]	; (8015170 <_ZSt15get_new_handlerv+0xc>)
 8015166:	6818      	ldr	r0, [r3, #0]
 8015168:	f3bf 8f5b 	dmb	ish
 801516c:	4770      	bx	lr
 801516e:	bf00      	nop
 8015170:	2000d7d0 	.word	0x2000d7d0

08015174 <pow>:
 8015174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015176:	ed2d 8b02 	vpush	{d8}
 801517a:	eeb0 8a40 	vmov.f32	s16, s0
 801517e:	eef0 8a60 	vmov.f32	s17, s1
 8015182:	ec55 4b11 	vmov	r4, r5, d1
 8015186:	f000 f887 	bl	8015298 <__ieee754_pow>
 801518a:	4622      	mov	r2, r4
 801518c:	462b      	mov	r3, r5
 801518e:	4620      	mov	r0, r4
 8015190:	4629      	mov	r1, r5
 8015192:	ec57 6b10 	vmov	r6, r7, d0
 8015196:	f7eb fc79 	bl	8000a8c <__aeabi_dcmpun>
 801519a:	2800      	cmp	r0, #0
 801519c:	d13b      	bne.n	8015216 <pow+0xa2>
 801519e:	ec51 0b18 	vmov	r0, r1, d8
 80151a2:	2200      	movs	r2, #0
 80151a4:	2300      	movs	r3, #0
 80151a6:	f7eb fc3f 	bl	8000a28 <__aeabi_dcmpeq>
 80151aa:	b1b8      	cbz	r0, 80151dc <pow+0x68>
 80151ac:	2200      	movs	r2, #0
 80151ae:	2300      	movs	r3, #0
 80151b0:	4620      	mov	r0, r4
 80151b2:	4629      	mov	r1, r5
 80151b4:	f7eb fc38 	bl	8000a28 <__aeabi_dcmpeq>
 80151b8:	2800      	cmp	r0, #0
 80151ba:	d146      	bne.n	801524a <pow+0xd6>
 80151bc:	ec45 4b10 	vmov	d0, r4, r5
 80151c0:	f000 ff26 	bl	8016010 <finite>
 80151c4:	b338      	cbz	r0, 8015216 <pow+0xa2>
 80151c6:	2200      	movs	r2, #0
 80151c8:	2300      	movs	r3, #0
 80151ca:	4620      	mov	r0, r4
 80151cc:	4629      	mov	r1, r5
 80151ce:	f7eb fc35 	bl	8000a3c <__aeabi_dcmplt>
 80151d2:	b300      	cbz	r0, 8015216 <pow+0xa2>
 80151d4:	f001 f894 	bl	8016300 <__errno>
 80151d8:	2322      	movs	r3, #34	; 0x22
 80151da:	e01b      	b.n	8015214 <pow+0xa0>
 80151dc:	ec47 6b10 	vmov	d0, r6, r7
 80151e0:	f000 ff16 	bl	8016010 <finite>
 80151e4:	b9e0      	cbnz	r0, 8015220 <pow+0xac>
 80151e6:	eeb0 0a48 	vmov.f32	s0, s16
 80151ea:	eef0 0a68 	vmov.f32	s1, s17
 80151ee:	f000 ff0f 	bl	8016010 <finite>
 80151f2:	b1a8      	cbz	r0, 8015220 <pow+0xac>
 80151f4:	ec45 4b10 	vmov	d0, r4, r5
 80151f8:	f000 ff0a 	bl	8016010 <finite>
 80151fc:	b180      	cbz	r0, 8015220 <pow+0xac>
 80151fe:	4632      	mov	r2, r6
 8015200:	463b      	mov	r3, r7
 8015202:	4630      	mov	r0, r6
 8015204:	4639      	mov	r1, r7
 8015206:	f7eb fc41 	bl	8000a8c <__aeabi_dcmpun>
 801520a:	2800      	cmp	r0, #0
 801520c:	d0e2      	beq.n	80151d4 <pow+0x60>
 801520e:	f001 f877 	bl	8016300 <__errno>
 8015212:	2321      	movs	r3, #33	; 0x21
 8015214:	6003      	str	r3, [r0, #0]
 8015216:	ecbd 8b02 	vpop	{d8}
 801521a:	ec47 6b10 	vmov	d0, r6, r7
 801521e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015220:	2200      	movs	r2, #0
 8015222:	2300      	movs	r3, #0
 8015224:	4630      	mov	r0, r6
 8015226:	4639      	mov	r1, r7
 8015228:	f7eb fbfe 	bl	8000a28 <__aeabi_dcmpeq>
 801522c:	2800      	cmp	r0, #0
 801522e:	d0f2      	beq.n	8015216 <pow+0xa2>
 8015230:	eeb0 0a48 	vmov.f32	s0, s16
 8015234:	eef0 0a68 	vmov.f32	s1, s17
 8015238:	f000 feea 	bl	8016010 <finite>
 801523c:	2800      	cmp	r0, #0
 801523e:	d0ea      	beq.n	8015216 <pow+0xa2>
 8015240:	ec45 4b10 	vmov	d0, r4, r5
 8015244:	f000 fee4 	bl	8016010 <finite>
 8015248:	e7c3      	b.n	80151d2 <pow+0x5e>
 801524a:	4f01      	ldr	r7, [pc, #4]	; (8015250 <pow+0xdc>)
 801524c:	2600      	movs	r6, #0
 801524e:	e7e2      	b.n	8015216 <pow+0xa2>
 8015250:	3ff00000 	.word	0x3ff00000

08015254 <atan2f>:
 8015254:	f000 be00 	b.w	8015e58 <__ieee754_atan2f>

08015258 <sqrtf>:
 8015258:	b508      	push	{r3, lr}
 801525a:	ed2d 8b02 	vpush	{d8}
 801525e:	eeb0 8a40 	vmov.f32	s16, s0
 8015262:	f000 fe99 	bl	8015f98 <__ieee754_sqrtf>
 8015266:	eeb4 8a48 	vcmp.f32	s16, s16
 801526a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801526e:	d60c      	bvs.n	801528a <sqrtf+0x32>
 8015270:	eddf 8a07 	vldr	s17, [pc, #28]	; 8015290 <sqrtf+0x38>
 8015274:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8015278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801527c:	d505      	bpl.n	801528a <sqrtf+0x32>
 801527e:	f001 f83f 	bl	8016300 <__errno>
 8015282:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8015286:	2321      	movs	r3, #33	; 0x21
 8015288:	6003      	str	r3, [r0, #0]
 801528a:	ecbd 8b02 	vpop	{d8}
 801528e:	bd08      	pop	{r3, pc}
	...

08015298 <__ieee754_pow>:
 8015298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801529c:	ed2d 8b06 	vpush	{d8-d10}
 80152a0:	b089      	sub	sp, #36	; 0x24
 80152a2:	ed8d 1b00 	vstr	d1, [sp]
 80152a6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80152aa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80152ae:	ea58 0102 	orrs.w	r1, r8, r2
 80152b2:	ec57 6b10 	vmov	r6, r7, d0
 80152b6:	d115      	bne.n	80152e4 <__ieee754_pow+0x4c>
 80152b8:	19b3      	adds	r3, r6, r6
 80152ba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80152be:	4152      	adcs	r2, r2
 80152c0:	4299      	cmp	r1, r3
 80152c2:	4b89      	ldr	r3, [pc, #548]	; (80154e8 <__ieee754_pow+0x250>)
 80152c4:	4193      	sbcs	r3, r2
 80152c6:	f080 84d2 	bcs.w	8015c6e <__ieee754_pow+0x9d6>
 80152ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80152ce:	4630      	mov	r0, r6
 80152d0:	4639      	mov	r1, r7
 80152d2:	f7ea ff8b 	bl	80001ec <__adddf3>
 80152d6:	ec41 0b10 	vmov	d0, r0, r1
 80152da:	b009      	add	sp, #36	; 0x24
 80152dc:	ecbd 8b06 	vpop	{d8-d10}
 80152e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152e4:	4b81      	ldr	r3, [pc, #516]	; (80154ec <__ieee754_pow+0x254>)
 80152e6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80152ea:	429c      	cmp	r4, r3
 80152ec:	ee10 aa10 	vmov	sl, s0
 80152f0:	463d      	mov	r5, r7
 80152f2:	dc06      	bgt.n	8015302 <__ieee754_pow+0x6a>
 80152f4:	d101      	bne.n	80152fa <__ieee754_pow+0x62>
 80152f6:	2e00      	cmp	r6, #0
 80152f8:	d1e7      	bne.n	80152ca <__ieee754_pow+0x32>
 80152fa:	4598      	cmp	r8, r3
 80152fc:	dc01      	bgt.n	8015302 <__ieee754_pow+0x6a>
 80152fe:	d10f      	bne.n	8015320 <__ieee754_pow+0x88>
 8015300:	b172      	cbz	r2, 8015320 <__ieee754_pow+0x88>
 8015302:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8015306:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801530a:	ea55 050a 	orrs.w	r5, r5, sl
 801530e:	d1dc      	bne.n	80152ca <__ieee754_pow+0x32>
 8015310:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015314:	18db      	adds	r3, r3, r3
 8015316:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801531a:	4152      	adcs	r2, r2
 801531c:	429d      	cmp	r5, r3
 801531e:	e7d0      	b.n	80152c2 <__ieee754_pow+0x2a>
 8015320:	2d00      	cmp	r5, #0
 8015322:	da3b      	bge.n	801539c <__ieee754_pow+0x104>
 8015324:	4b72      	ldr	r3, [pc, #456]	; (80154f0 <__ieee754_pow+0x258>)
 8015326:	4598      	cmp	r8, r3
 8015328:	dc51      	bgt.n	80153ce <__ieee754_pow+0x136>
 801532a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801532e:	4598      	cmp	r8, r3
 8015330:	f340 84ac 	ble.w	8015c8c <__ieee754_pow+0x9f4>
 8015334:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015338:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801533c:	2b14      	cmp	r3, #20
 801533e:	dd0f      	ble.n	8015360 <__ieee754_pow+0xc8>
 8015340:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8015344:	fa22 f103 	lsr.w	r1, r2, r3
 8015348:	fa01 f303 	lsl.w	r3, r1, r3
 801534c:	4293      	cmp	r3, r2
 801534e:	f040 849d 	bne.w	8015c8c <__ieee754_pow+0x9f4>
 8015352:	f001 0101 	and.w	r1, r1, #1
 8015356:	f1c1 0302 	rsb	r3, r1, #2
 801535a:	9304      	str	r3, [sp, #16]
 801535c:	b182      	cbz	r2, 8015380 <__ieee754_pow+0xe8>
 801535e:	e05f      	b.n	8015420 <__ieee754_pow+0x188>
 8015360:	2a00      	cmp	r2, #0
 8015362:	d15b      	bne.n	801541c <__ieee754_pow+0x184>
 8015364:	f1c3 0314 	rsb	r3, r3, #20
 8015368:	fa48 f103 	asr.w	r1, r8, r3
 801536c:	fa01 f303 	lsl.w	r3, r1, r3
 8015370:	4543      	cmp	r3, r8
 8015372:	f040 8488 	bne.w	8015c86 <__ieee754_pow+0x9ee>
 8015376:	f001 0101 	and.w	r1, r1, #1
 801537a:	f1c1 0302 	rsb	r3, r1, #2
 801537e:	9304      	str	r3, [sp, #16]
 8015380:	4b5c      	ldr	r3, [pc, #368]	; (80154f4 <__ieee754_pow+0x25c>)
 8015382:	4598      	cmp	r8, r3
 8015384:	d132      	bne.n	80153ec <__ieee754_pow+0x154>
 8015386:	f1b9 0f00 	cmp.w	r9, #0
 801538a:	f280 8478 	bge.w	8015c7e <__ieee754_pow+0x9e6>
 801538e:	4959      	ldr	r1, [pc, #356]	; (80154f4 <__ieee754_pow+0x25c>)
 8015390:	4632      	mov	r2, r6
 8015392:	463b      	mov	r3, r7
 8015394:	2000      	movs	r0, #0
 8015396:	f7eb fa09 	bl	80007ac <__aeabi_ddiv>
 801539a:	e79c      	b.n	80152d6 <__ieee754_pow+0x3e>
 801539c:	2300      	movs	r3, #0
 801539e:	9304      	str	r3, [sp, #16]
 80153a0:	2a00      	cmp	r2, #0
 80153a2:	d13d      	bne.n	8015420 <__ieee754_pow+0x188>
 80153a4:	4b51      	ldr	r3, [pc, #324]	; (80154ec <__ieee754_pow+0x254>)
 80153a6:	4598      	cmp	r8, r3
 80153a8:	d1ea      	bne.n	8015380 <__ieee754_pow+0xe8>
 80153aa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80153ae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80153b2:	ea53 030a 	orrs.w	r3, r3, sl
 80153b6:	f000 845a 	beq.w	8015c6e <__ieee754_pow+0x9d6>
 80153ba:	4b4f      	ldr	r3, [pc, #316]	; (80154f8 <__ieee754_pow+0x260>)
 80153bc:	429c      	cmp	r4, r3
 80153be:	dd08      	ble.n	80153d2 <__ieee754_pow+0x13a>
 80153c0:	f1b9 0f00 	cmp.w	r9, #0
 80153c4:	f2c0 8457 	blt.w	8015c76 <__ieee754_pow+0x9de>
 80153c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153cc:	e783      	b.n	80152d6 <__ieee754_pow+0x3e>
 80153ce:	2302      	movs	r3, #2
 80153d0:	e7e5      	b.n	801539e <__ieee754_pow+0x106>
 80153d2:	f1b9 0f00 	cmp.w	r9, #0
 80153d6:	f04f 0000 	mov.w	r0, #0
 80153da:	f04f 0100 	mov.w	r1, #0
 80153de:	f6bf af7a 	bge.w	80152d6 <__ieee754_pow+0x3e>
 80153e2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80153e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80153ea:	e774      	b.n	80152d6 <__ieee754_pow+0x3e>
 80153ec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80153f0:	d106      	bne.n	8015400 <__ieee754_pow+0x168>
 80153f2:	4632      	mov	r2, r6
 80153f4:	463b      	mov	r3, r7
 80153f6:	4630      	mov	r0, r6
 80153f8:	4639      	mov	r1, r7
 80153fa:	f7eb f8ad 	bl	8000558 <__aeabi_dmul>
 80153fe:	e76a      	b.n	80152d6 <__ieee754_pow+0x3e>
 8015400:	4b3e      	ldr	r3, [pc, #248]	; (80154fc <__ieee754_pow+0x264>)
 8015402:	4599      	cmp	r9, r3
 8015404:	d10c      	bne.n	8015420 <__ieee754_pow+0x188>
 8015406:	2d00      	cmp	r5, #0
 8015408:	db0a      	blt.n	8015420 <__ieee754_pow+0x188>
 801540a:	ec47 6b10 	vmov	d0, r6, r7
 801540e:	b009      	add	sp, #36	; 0x24
 8015410:	ecbd 8b06 	vpop	{d8-d10}
 8015414:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015418:	f000 bc6c 	b.w	8015cf4 <__ieee754_sqrt>
 801541c:	2300      	movs	r3, #0
 801541e:	9304      	str	r3, [sp, #16]
 8015420:	ec47 6b10 	vmov	d0, r6, r7
 8015424:	f000 fdeb 	bl	8015ffe <fabs>
 8015428:	ec51 0b10 	vmov	r0, r1, d0
 801542c:	f1ba 0f00 	cmp.w	sl, #0
 8015430:	d129      	bne.n	8015486 <__ieee754_pow+0x1ee>
 8015432:	b124      	cbz	r4, 801543e <__ieee754_pow+0x1a6>
 8015434:	4b2f      	ldr	r3, [pc, #188]	; (80154f4 <__ieee754_pow+0x25c>)
 8015436:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801543a:	429a      	cmp	r2, r3
 801543c:	d123      	bne.n	8015486 <__ieee754_pow+0x1ee>
 801543e:	f1b9 0f00 	cmp.w	r9, #0
 8015442:	da05      	bge.n	8015450 <__ieee754_pow+0x1b8>
 8015444:	4602      	mov	r2, r0
 8015446:	460b      	mov	r3, r1
 8015448:	2000      	movs	r0, #0
 801544a:	492a      	ldr	r1, [pc, #168]	; (80154f4 <__ieee754_pow+0x25c>)
 801544c:	f7eb f9ae 	bl	80007ac <__aeabi_ddiv>
 8015450:	2d00      	cmp	r5, #0
 8015452:	f6bf af40 	bge.w	80152d6 <__ieee754_pow+0x3e>
 8015456:	9b04      	ldr	r3, [sp, #16]
 8015458:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801545c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015460:	4323      	orrs	r3, r4
 8015462:	d108      	bne.n	8015476 <__ieee754_pow+0x1de>
 8015464:	4602      	mov	r2, r0
 8015466:	460b      	mov	r3, r1
 8015468:	4610      	mov	r0, r2
 801546a:	4619      	mov	r1, r3
 801546c:	f7ea febc 	bl	80001e8 <__aeabi_dsub>
 8015470:	4602      	mov	r2, r0
 8015472:	460b      	mov	r3, r1
 8015474:	e78f      	b.n	8015396 <__ieee754_pow+0xfe>
 8015476:	9b04      	ldr	r3, [sp, #16]
 8015478:	2b01      	cmp	r3, #1
 801547a:	f47f af2c 	bne.w	80152d6 <__ieee754_pow+0x3e>
 801547e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015482:	4619      	mov	r1, r3
 8015484:	e727      	b.n	80152d6 <__ieee754_pow+0x3e>
 8015486:	0feb      	lsrs	r3, r5, #31
 8015488:	3b01      	subs	r3, #1
 801548a:	9306      	str	r3, [sp, #24]
 801548c:	9a06      	ldr	r2, [sp, #24]
 801548e:	9b04      	ldr	r3, [sp, #16]
 8015490:	4313      	orrs	r3, r2
 8015492:	d102      	bne.n	801549a <__ieee754_pow+0x202>
 8015494:	4632      	mov	r2, r6
 8015496:	463b      	mov	r3, r7
 8015498:	e7e6      	b.n	8015468 <__ieee754_pow+0x1d0>
 801549a:	4b19      	ldr	r3, [pc, #100]	; (8015500 <__ieee754_pow+0x268>)
 801549c:	4598      	cmp	r8, r3
 801549e:	f340 80fb 	ble.w	8015698 <__ieee754_pow+0x400>
 80154a2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80154a6:	4598      	cmp	r8, r3
 80154a8:	4b13      	ldr	r3, [pc, #76]	; (80154f8 <__ieee754_pow+0x260>)
 80154aa:	dd0c      	ble.n	80154c6 <__ieee754_pow+0x22e>
 80154ac:	429c      	cmp	r4, r3
 80154ae:	dc0f      	bgt.n	80154d0 <__ieee754_pow+0x238>
 80154b0:	f1b9 0f00 	cmp.w	r9, #0
 80154b4:	da0f      	bge.n	80154d6 <__ieee754_pow+0x23e>
 80154b6:	2000      	movs	r0, #0
 80154b8:	b009      	add	sp, #36	; 0x24
 80154ba:	ecbd 8b06 	vpop	{d8-d10}
 80154be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154c2:	f000 bd93 	b.w	8015fec <__math_oflow>
 80154c6:	429c      	cmp	r4, r3
 80154c8:	dbf2      	blt.n	80154b0 <__ieee754_pow+0x218>
 80154ca:	4b0a      	ldr	r3, [pc, #40]	; (80154f4 <__ieee754_pow+0x25c>)
 80154cc:	429c      	cmp	r4, r3
 80154ce:	dd19      	ble.n	8015504 <__ieee754_pow+0x26c>
 80154d0:	f1b9 0f00 	cmp.w	r9, #0
 80154d4:	dcef      	bgt.n	80154b6 <__ieee754_pow+0x21e>
 80154d6:	2000      	movs	r0, #0
 80154d8:	b009      	add	sp, #36	; 0x24
 80154da:	ecbd 8b06 	vpop	{d8-d10}
 80154de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154e2:	f000 bd7a 	b.w	8015fda <__math_uflow>
 80154e6:	bf00      	nop
 80154e8:	fff00000 	.word	0xfff00000
 80154ec:	7ff00000 	.word	0x7ff00000
 80154f0:	433fffff 	.word	0x433fffff
 80154f4:	3ff00000 	.word	0x3ff00000
 80154f8:	3fefffff 	.word	0x3fefffff
 80154fc:	3fe00000 	.word	0x3fe00000
 8015500:	41e00000 	.word	0x41e00000
 8015504:	4b60      	ldr	r3, [pc, #384]	; (8015688 <__ieee754_pow+0x3f0>)
 8015506:	2200      	movs	r2, #0
 8015508:	f7ea fe6e 	bl	80001e8 <__aeabi_dsub>
 801550c:	a354      	add	r3, pc, #336	; (adr r3, 8015660 <__ieee754_pow+0x3c8>)
 801550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015512:	4604      	mov	r4, r0
 8015514:	460d      	mov	r5, r1
 8015516:	f7eb f81f 	bl	8000558 <__aeabi_dmul>
 801551a:	a353      	add	r3, pc, #332	; (adr r3, 8015668 <__ieee754_pow+0x3d0>)
 801551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015520:	4606      	mov	r6, r0
 8015522:	460f      	mov	r7, r1
 8015524:	4620      	mov	r0, r4
 8015526:	4629      	mov	r1, r5
 8015528:	f7eb f816 	bl	8000558 <__aeabi_dmul>
 801552c:	4b57      	ldr	r3, [pc, #348]	; (801568c <__ieee754_pow+0x3f4>)
 801552e:	4682      	mov	sl, r0
 8015530:	468b      	mov	fp, r1
 8015532:	2200      	movs	r2, #0
 8015534:	4620      	mov	r0, r4
 8015536:	4629      	mov	r1, r5
 8015538:	f7eb f80e 	bl	8000558 <__aeabi_dmul>
 801553c:	4602      	mov	r2, r0
 801553e:	460b      	mov	r3, r1
 8015540:	a14b      	add	r1, pc, #300	; (adr r1, 8015670 <__ieee754_pow+0x3d8>)
 8015542:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015546:	f7ea fe4f 	bl	80001e8 <__aeabi_dsub>
 801554a:	4622      	mov	r2, r4
 801554c:	462b      	mov	r3, r5
 801554e:	f7eb f803 	bl	8000558 <__aeabi_dmul>
 8015552:	4602      	mov	r2, r0
 8015554:	460b      	mov	r3, r1
 8015556:	2000      	movs	r0, #0
 8015558:	494d      	ldr	r1, [pc, #308]	; (8015690 <__ieee754_pow+0x3f8>)
 801555a:	f7ea fe45 	bl	80001e8 <__aeabi_dsub>
 801555e:	4622      	mov	r2, r4
 8015560:	4680      	mov	r8, r0
 8015562:	4689      	mov	r9, r1
 8015564:	462b      	mov	r3, r5
 8015566:	4620      	mov	r0, r4
 8015568:	4629      	mov	r1, r5
 801556a:	f7ea fff5 	bl	8000558 <__aeabi_dmul>
 801556e:	4602      	mov	r2, r0
 8015570:	460b      	mov	r3, r1
 8015572:	4640      	mov	r0, r8
 8015574:	4649      	mov	r1, r9
 8015576:	f7ea ffef 	bl	8000558 <__aeabi_dmul>
 801557a:	a33f      	add	r3, pc, #252	; (adr r3, 8015678 <__ieee754_pow+0x3e0>)
 801557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015580:	f7ea ffea 	bl	8000558 <__aeabi_dmul>
 8015584:	4602      	mov	r2, r0
 8015586:	460b      	mov	r3, r1
 8015588:	4650      	mov	r0, sl
 801558a:	4659      	mov	r1, fp
 801558c:	f7ea fe2c 	bl	80001e8 <__aeabi_dsub>
 8015590:	4602      	mov	r2, r0
 8015592:	460b      	mov	r3, r1
 8015594:	4680      	mov	r8, r0
 8015596:	4689      	mov	r9, r1
 8015598:	4630      	mov	r0, r6
 801559a:	4639      	mov	r1, r7
 801559c:	f7ea fe26 	bl	80001ec <__adddf3>
 80155a0:	2000      	movs	r0, #0
 80155a2:	4632      	mov	r2, r6
 80155a4:	463b      	mov	r3, r7
 80155a6:	4604      	mov	r4, r0
 80155a8:	460d      	mov	r5, r1
 80155aa:	f7ea fe1d 	bl	80001e8 <__aeabi_dsub>
 80155ae:	4602      	mov	r2, r0
 80155b0:	460b      	mov	r3, r1
 80155b2:	4640      	mov	r0, r8
 80155b4:	4649      	mov	r1, r9
 80155b6:	f7ea fe17 	bl	80001e8 <__aeabi_dsub>
 80155ba:	9b04      	ldr	r3, [sp, #16]
 80155bc:	9a06      	ldr	r2, [sp, #24]
 80155be:	3b01      	subs	r3, #1
 80155c0:	4313      	orrs	r3, r2
 80155c2:	4682      	mov	sl, r0
 80155c4:	468b      	mov	fp, r1
 80155c6:	f040 81e7 	bne.w	8015998 <__ieee754_pow+0x700>
 80155ca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8015680 <__ieee754_pow+0x3e8>
 80155ce:	eeb0 8a47 	vmov.f32	s16, s14
 80155d2:	eef0 8a67 	vmov.f32	s17, s15
 80155d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80155da:	2600      	movs	r6, #0
 80155dc:	4632      	mov	r2, r6
 80155de:	463b      	mov	r3, r7
 80155e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155e4:	f7ea fe00 	bl	80001e8 <__aeabi_dsub>
 80155e8:	4622      	mov	r2, r4
 80155ea:	462b      	mov	r3, r5
 80155ec:	f7ea ffb4 	bl	8000558 <__aeabi_dmul>
 80155f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80155f4:	4680      	mov	r8, r0
 80155f6:	4689      	mov	r9, r1
 80155f8:	4650      	mov	r0, sl
 80155fa:	4659      	mov	r1, fp
 80155fc:	f7ea ffac 	bl	8000558 <__aeabi_dmul>
 8015600:	4602      	mov	r2, r0
 8015602:	460b      	mov	r3, r1
 8015604:	4640      	mov	r0, r8
 8015606:	4649      	mov	r1, r9
 8015608:	f7ea fdf0 	bl	80001ec <__adddf3>
 801560c:	4632      	mov	r2, r6
 801560e:	463b      	mov	r3, r7
 8015610:	4680      	mov	r8, r0
 8015612:	4689      	mov	r9, r1
 8015614:	4620      	mov	r0, r4
 8015616:	4629      	mov	r1, r5
 8015618:	f7ea ff9e 	bl	8000558 <__aeabi_dmul>
 801561c:	460b      	mov	r3, r1
 801561e:	4604      	mov	r4, r0
 8015620:	460d      	mov	r5, r1
 8015622:	4602      	mov	r2, r0
 8015624:	4649      	mov	r1, r9
 8015626:	4640      	mov	r0, r8
 8015628:	f7ea fde0 	bl	80001ec <__adddf3>
 801562c:	4b19      	ldr	r3, [pc, #100]	; (8015694 <__ieee754_pow+0x3fc>)
 801562e:	4299      	cmp	r1, r3
 8015630:	ec45 4b19 	vmov	d9, r4, r5
 8015634:	4606      	mov	r6, r0
 8015636:	460f      	mov	r7, r1
 8015638:	468b      	mov	fp, r1
 801563a:	f340 82f1 	ble.w	8015c20 <__ieee754_pow+0x988>
 801563e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8015642:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8015646:	4303      	orrs	r3, r0
 8015648:	f000 81e4 	beq.w	8015a14 <__ieee754_pow+0x77c>
 801564c:	ec51 0b18 	vmov	r0, r1, d8
 8015650:	2200      	movs	r2, #0
 8015652:	2300      	movs	r3, #0
 8015654:	f7eb f9f2 	bl	8000a3c <__aeabi_dcmplt>
 8015658:	3800      	subs	r0, #0
 801565a:	bf18      	it	ne
 801565c:	2001      	movne	r0, #1
 801565e:	e72b      	b.n	80154b8 <__ieee754_pow+0x220>
 8015660:	60000000 	.word	0x60000000
 8015664:	3ff71547 	.word	0x3ff71547
 8015668:	f85ddf44 	.word	0xf85ddf44
 801566c:	3e54ae0b 	.word	0x3e54ae0b
 8015670:	55555555 	.word	0x55555555
 8015674:	3fd55555 	.word	0x3fd55555
 8015678:	652b82fe 	.word	0x652b82fe
 801567c:	3ff71547 	.word	0x3ff71547
 8015680:	00000000 	.word	0x00000000
 8015684:	bff00000 	.word	0xbff00000
 8015688:	3ff00000 	.word	0x3ff00000
 801568c:	3fd00000 	.word	0x3fd00000
 8015690:	3fe00000 	.word	0x3fe00000
 8015694:	408fffff 	.word	0x408fffff
 8015698:	4bd5      	ldr	r3, [pc, #852]	; (80159f0 <__ieee754_pow+0x758>)
 801569a:	402b      	ands	r3, r5
 801569c:	2200      	movs	r2, #0
 801569e:	b92b      	cbnz	r3, 80156ac <__ieee754_pow+0x414>
 80156a0:	4bd4      	ldr	r3, [pc, #848]	; (80159f4 <__ieee754_pow+0x75c>)
 80156a2:	f7ea ff59 	bl	8000558 <__aeabi_dmul>
 80156a6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80156aa:	460c      	mov	r4, r1
 80156ac:	1523      	asrs	r3, r4, #20
 80156ae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80156b2:	4413      	add	r3, r2
 80156b4:	9305      	str	r3, [sp, #20]
 80156b6:	4bd0      	ldr	r3, [pc, #832]	; (80159f8 <__ieee754_pow+0x760>)
 80156b8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80156bc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80156c0:	429c      	cmp	r4, r3
 80156c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80156c6:	dd08      	ble.n	80156da <__ieee754_pow+0x442>
 80156c8:	4bcc      	ldr	r3, [pc, #816]	; (80159fc <__ieee754_pow+0x764>)
 80156ca:	429c      	cmp	r4, r3
 80156cc:	f340 8162 	ble.w	8015994 <__ieee754_pow+0x6fc>
 80156d0:	9b05      	ldr	r3, [sp, #20]
 80156d2:	3301      	adds	r3, #1
 80156d4:	9305      	str	r3, [sp, #20]
 80156d6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80156da:	2400      	movs	r4, #0
 80156dc:	00e3      	lsls	r3, r4, #3
 80156de:	9307      	str	r3, [sp, #28]
 80156e0:	4bc7      	ldr	r3, [pc, #796]	; (8015a00 <__ieee754_pow+0x768>)
 80156e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80156e6:	ed93 7b00 	vldr	d7, [r3]
 80156ea:	4629      	mov	r1, r5
 80156ec:	ec53 2b17 	vmov	r2, r3, d7
 80156f0:	eeb0 9a47 	vmov.f32	s18, s14
 80156f4:	eef0 9a67 	vmov.f32	s19, s15
 80156f8:	4682      	mov	sl, r0
 80156fa:	f7ea fd75 	bl	80001e8 <__aeabi_dsub>
 80156fe:	4652      	mov	r2, sl
 8015700:	4606      	mov	r6, r0
 8015702:	460f      	mov	r7, r1
 8015704:	462b      	mov	r3, r5
 8015706:	ec51 0b19 	vmov	r0, r1, d9
 801570a:	f7ea fd6f 	bl	80001ec <__adddf3>
 801570e:	4602      	mov	r2, r0
 8015710:	460b      	mov	r3, r1
 8015712:	2000      	movs	r0, #0
 8015714:	49bb      	ldr	r1, [pc, #748]	; (8015a04 <__ieee754_pow+0x76c>)
 8015716:	f7eb f849 	bl	80007ac <__aeabi_ddiv>
 801571a:	ec41 0b1a 	vmov	d10, r0, r1
 801571e:	4602      	mov	r2, r0
 8015720:	460b      	mov	r3, r1
 8015722:	4630      	mov	r0, r6
 8015724:	4639      	mov	r1, r7
 8015726:	f7ea ff17 	bl	8000558 <__aeabi_dmul>
 801572a:	2300      	movs	r3, #0
 801572c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015730:	9302      	str	r3, [sp, #8]
 8015732:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015736:	46ab      	mov	fp, r5
 8015738:	106d      	asrs	r5, r5, #1
 801573a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801573e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8015742:	ec41 0b18 	vmov	d8, r0, r1
 8015746:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801574a:	2200      	movs	r2, #0
 801574c:	4640      	mov	r0, r8
 801574e:	4649      	mov	r1, r9
 8015750:	4614      	mov	r4, r2
 8015752:	461d      	mov	r5, r3
 8015754:	f7ea ff00 	bl	8000558 <__aeabi_dmul>
 8015758:	4602      	mov	r2, r0
 801575a:	460b      	mov	r3, r1
 801575c:	4630      	mov	r0, r6
 801575e:	4639      	mov	r1, r7
 8015760:	f7ea fd42 	bl	80001e8 <__aeabi_dsub>
 8015764:	ec53 2b19 	vmov	r2, r3, d9
 8015768:	4606      	mov	r6, r0
 801576a:	460f      	mov	r7, r1
 801576c:	4620      	mov	r0, r4
 801576e:	4629      	mov	r1, r5
 8015770:	f7ea fd3a 	bl	80001e8 <__aeabi_dsub>
 8015774:	4602      	mov	r2, r0
 8015776:	460b      	mov	r3, r1
 8015778:	4650      	mov	r0, sl
 801577a:	4659      	mov	r1, fp
 801577c:	f7ea fd34 	bl	80001e8 <__aeabi_dsub>
 8015780:	4642      	mov	r2, r8
 8015782:	464b      	mov	r3, r9
 8015784:	f7ea fee8 	bl	8000558 <__aeabi_dmul>
 8015788:	4602      	mov	r2, r0
 801578a:	460b      	mov	r3, r1
 801578c:	4630      	mov	r0, r6
 801578e:	4639      	mov	r1, r7
 8015790:	f7ea fd2a 	bl	80001e8 <__aeabi_dsub>
 8015794:	ec53 2b1a 	vmov	r2, r3, d10
 8015798:	f7ea fede 	bl	8000558 <__aeabi_dmul>
 801579c:	ec53 2b18 	vmov	r2, r3, d8
 80157a0:	ec41 0b19 	vmov	d9, r0, r1
 80157a4:	ec51 0b18 	vmov	r0, r1, d8
 80157a8:	f7ea fed6 	bl	8000558 <__aeabi_dmul>
 80157ac:	a37c      	add	r3, pc, #496	; (adr r3, 80159a0 <__ieee754_pow+0x708>)
 80157ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157b2:	4604      	mov	r4, r0
 80157b4:	460d      	mov	r5, r1
 80157b6:	f7ea fecf 	bl	8000558 <__aeabi_dmul>
 80157ba:	a37b      	add	r3, pc, #492	; (adr r3, 80159a8 <__ieee754_pow+0x710>)
 80157bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157c0:	f7ea fd14 	bl	80001ec <__adddf3>
 80157c4:	4622      	mov	r2, r4
 80157c6:	462b      	mov	r3, r5
 80157c8:	f7ea fec6 	bl	8000558 <__aeabi_dmul>
 80157cc:	a378      	add	r3, pc, #480	; (adr r3, 80159b0 <__ieee754_pow+0x718>)
 80157ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157d2:	f7ea fd0b 	bl	80001ec <__adddf3>
 80157d6:	4622      	mov	r2, r4
 80157d8:	462b      	mov	r3, r5
 80157da:	f7ea febd 	bl	8000558 <__aeabi_dmul>
 80157de:	a376      	add	r3, pc, #472	; (adr r3, 80159b8 <__ieee754_pow+0x720>)
 80157e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157e4:	f7ea fd02 	bl	80001ec <__adddf3>
 80157e8:	4622      	mov	r2, r4
 80157ea:	462b      	mov	r3, r5
 80157ec:	f7ea feb4 	bl	8000558 <__aeabi_dmul>
 80157f0:	a373      	add	r3, pc, #460	; (adr r3, 80159c0 <__ieee754_pow+0x728>)
 80157f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157f6:	f7ea fcf9 	bl	80001ec <__adddf3>
 80157fa:	4622      	mov	r2, r4
 80157fc:	462b      	mov	r3, r5
 80157fe:	f7ea feab 	bl	8000558 <__aeabi_dmul>
 8015802:	a371      	add	r3, pc, #452	; (adr r3, 80159c8 <__ieee754_pow+0x730>)
 8015804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015808:	f7ea fcf0 	bl	80001ec <__adddf3>
 801580c:	4622      	mov	r2, r4
 801580e:	4606      	mov	r6, r0
 8015810:	460f      	mov	r7, r1
 8015812:	462b      	mov	r3, r5
 8015814:	4620      	mov	r0, r4
 8015816:	4629      	mov	r1, r5
 8015818:	f7ea fe9e 	bl	8000558 <__aeabi_dmul>
 801581c:	4602      	mov	r2, r0
 801581e:	460b      	mov	r3, r1
 8015820:	4630      	mov	r0, r6
 8015822:	4639      	mov	r1, r7
 8015824:	f7ea fe98 	bl	8000558 <__aeabi_dmul>
 8015828:	4642      	mov	r2, r8
 801582a:	4604      	mov	r4, r0
 801582c:	460d      	mov	r5, r1
 801582e:	464b      	mov	r3, r9
 8015830:	ec51 0b18 	vmov	r0, r1, d8
 8015834:	f7ea fcda 	bl	80001ec <__adddf3>
 8015838:	ec53 2b19 	vmov	r2, r3, d9
 801583c:	f7ea fe8c 	bl	8000558 <__aeabi_dmul>
 8015840:	4622      	mov	r2, r4
 8015842:	462b      	mov	r3, r5
 8015844:	f7ea fcd2 	bl	80001ec <__adddf3>
 8015848:	4642      	mov	r2, r8
 801584a:	4682      	mov	sl, r0
 801584c:	468b      	mov	fp, r1
 801584e:	464b      	mov	r3, r9
 8015850:	4640      	mov	r0, r8
 8015852:	4649      	mov	r1, r9
 8015854:	f7ea fe80 	bl	8000558 <__aeabi_dmul>
 8015858:	4b6b      	ldr	r3, [pc, #428]	; (8015a08 <__ieee754_pow+0x770>)
 801585a:	2200      	movs	r2, #0
 801585c:	4606      	mov	r6, r0
 801585e:	460f      	mov	r7, r1
 8015860:	f7ea fcc4 	bl	80001ec <__adddf3>
 8015864:	4652      	mov	r2, sl
 8015866:	465b      	mov	r3, fp
 8015868:	f7ea fcc0 	bl	80001ec <__adddf3>
 801586c:	2000      	movs	r0, #0
 801586e:	4604      	mov	r4, r0
 8015870:	460d      	mov	r5, r1
 8015872:	4602      	mov	r2, r0
 8015874:	460b      	mov	r3, r1
 8015876:	4640      	mov	r0, r8
 8015878:	4649      	mov	r1, r9
 801587a:	f7ea fe6d 	bl	8000558 <__aeabi_dmul>
 801587e:	4b62      	ldr	r3, [pc, #392]	; (8015a08 <__ieee754_pow+0x770>)
 8015880:	4680      	mov	r8, r0
 8015882:	4689      	mov	r9, r1
 8015884:	2200      	movs	r2, #0
 8015886:	4620      	mov	r0, r4
 8015888:	4629      	mov	r1, r5
 801588a:	f7ea fcad 	bl	80001e8 <__aeabi_dsub>
 801588e:	4632      	mov	r2, r6
 8015890:	463b      	mov	r3, r7
 8015892:	f7ea fca9 	bl	80001e8 <__aeabi_dsub>
 8015896:	4602      	mov	r2, r0
 8015898:	460b      	mov	r3, r1
 801589a:	4650      	mov	r0, sl
 801589c:	4659      	mov	r1, fp
 801589e:	f7ea fca3 	bl	80001e8 <__aeabi_dsub>
 80158a2:	ec53 2b18 	vmov	r2, r3, d8
 80158a6:	f7ea fe57 	bl	8000558 <__aeabi_dmul>
 80158aa:	4622      	mov	r2, r4
 80158ac:	4606      	mov	r6, r0
 80158ae:	460f      	mov	r7, r1
 80158b0:	462b      	mov	r3, r5
 80158b2:	ec51 0b19 	vmov	r0, r1, d9
 80158b6:	f7ea fe4f 	bl	8000558 <__aeabi_dmul>
 80158ba:	4602      	mov	r2, r0
 80158bc:	460b      	mov	r3, r1
 80158be:	4630      	mov	r0, r6
 80158c0:	4639      	mov	r1, r7
 80158c2:	f7ea fc93 	bl	80001ec <__adddf3>
 80158c6:	4606      	mov	r6, r0
 80158c8:	460f      	mov	r7, r1
 80158ca:	4602      	mov	r2, r0
 80158cc:	460b      	mov	r3, r1
 80158ce:	4640      	mov	r0, r8
 80158d0:	4649      	mov	r1, r9
 80158d2:	f7ea fc8b 	bl	80001ec <__adddf3>
 80158d6:	a33e      	add	r3, pc, #248	; (adr r3, 80159d0 <__ieee754_pow+0x738>)
 80158d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158dc:	2000      	movs	r0, #0
 80158de:	4604      	mov	r4, r0
 80158e0:	460d      	mov	r5, r1
 80158e2:	f7ea fe39 	bl	8000558 <__aeabi_dmul>
 80158e6:	4642      	mov	r2, r8
 80158e8:	ec41 0b18 	vmov	d8, r0, r1
 80158ec:	464b      	mov	r3, r9
 80158ee:	4620      	mov	r0, r4
 80158f0:	4629      	mov	r1, r5
 80158f2:	f7ea fc79 	bl	80001e8 <__aeabi_dsub>
 80158f6:	4602      	mov	r2, r0
 80158f8:	460b      	mov	r3, r1
 80158fa:	4630      	mov	r0, r6
 80158fc:	4639      	mov	r1, r7
 80158fe:	f7ea fc73 	bl	80001e8 <__aeabi_dsub>
 8015902:	a335      	add	r3, pc, #212	; (adr r3, 80159d8 <__ieee754_pow+0x740>)
 8015904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015908:	f7ea fe26 	bl	8000558 <__aeabi_dmul>
 801590c:	a334      	add	r3, pc, #208	; (adr r3, 80159e0 <__ieee754_pow+0x748>)
 801590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015912:	4606      	mov	r6, r0
 8015914:	460f      	mov	r7, r1
 8015916:	4620      	mov	r0, r4
 8015918:	4629      	mov	r1, r5
 801591a:	f7ea fe1d 	bl	8000558 <__aeabi_dmul>
 801591e:	4602      	mov	r2, r0
 8015920:	460b      	mov	r3, r1
 8015922:	4630      	mov	r0, r6
 8015924:	4639      	mov	r1, r7
 8015926:	f7ea fc61 	bl	80001ec <__adddf3>
 801592a:	9a07      	ldr	r2, [sp, #28]
 801592c:	4b37      	ldr	r3, [pc, #220]	; (8015a0c <__ieee754_pow+0x774>)
 801592e:	4413      	add	r3, r2
 8015930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015934:	f7ea fc5a 	bl	80001ec <__adddf3>
 8015938:	4682      	mov	sl, r0
 801593a:	9805      	ldr	r0, [sp, #20]
 801593c:	468b      	mov	fp, r1
 801593e:	f7ea fda1 	bl	8000484 <__aeabi_i2d>
 8015942:	9a07      	ldr	r2, [sp, #28]
 8015944:	4b32      	ldr	r3, [pc, #200]	; (8015a10 <__ieee754_pow+0x778>)
 8015946:	4413      	add	r3, r2
 8015948:	e9d3 8900 	ldrd	r8, r9, [r3]
 801594c:	4606      	mov	r6, r0
 801594e:	460f      	mov	r7, r1
 8015950:	4652      	mov	r2, sl
 8015952:	465b      	mov	r3, fp
 8015954:	ec51 0b18 	vmov	r0, r1, d8
 8015958:	f7ea fc48 	bl	80001ec <__adddf3>
 801595c:	4642      	mov	r2, r8
 801595e:	464b      	mov	r3, r9
 8015960:	f7ea fc44 	bl	80001ec <__adddf3>
 8015964:	4632      	mov	r2, r6
 8015966:	463b      	mov	r3, r7
 8015968:	f7ea fc40 	bl	80001ec <__adddf3>
 801596c:	2000      	movs	r0, #0
 801596e:	4632      	mov	r2, r6
 8015970:	463b      	mov	r3, r7
 8015972:	4604      	mov	r4, r0
 8015974:	460d      	mov	r5, r1
 8015976:	f7ea fc37 	bl	80001e8 <__aeabi_dsub>
 801597a:	4642      	mov	r2, r8
 801597c:	464b      	mov	r3, r9
 801597e:	f7ea fc33 	bl	80001e8 <__aeabi_dsub>
 8015982:	ec53 2b18 	vmov	r2, r3, d8
 8015986:	f7ea fc2f 	bl	80001e8 <__aeabi_dsub>
 801598a:	4602      	mov	r2, r0
 801598c:	460b      	mov	r3, r1
 801598e:	4650      	mov	r0, sl
 8015990:	4659      	mov	r1, fp
 8015992:	e610      	b.n	80155b6 <__ieee754_pow+0x31e>
 8015994:	2401      	movs	r4, #1
 8015996:	e6a1      	b.n	80156dc <__ieee754_pow+0x444>
 8015998:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80159e8 <__ieee754_pow+0x750>
 801599c:	e617      	b.n	80155ce <__ieee754_pow+0x336>
 801599e:	bf00      	nop
 80159a0:	4a454eef 	.word	0x4a454eef
 80159a4:	3fca7e28 	.word	0x3fca7e28
 80159a8:	93c9db65 	.word	0x93c9db65
 80159ac:	3fcd864a 	.word	0x3fcd864a
 80159b0:	a91d4101 	.word	0xa91d4101
 80159b4:	3fd17460 	.word	0x3fd17460
 80159b8:	518f264d 	.word	0x518f264d
 80159bc:	3fd55555 	.word	0x3fd55555
 80159c0:	db6fabff 	.word	0xdb6fabff
 80159c4:	3fdb6db6 	.word	0x3fdb6db6
 80159c8:	33333303 	.word	0x33333303
 80159cc:	3fe33333 	.word	0x3fe33333
 80159d0:	e0000000 	.word	0xe0000000
 80159d4:	3feec709 	.word	0x3feec709
 80159d8:	dc3a03fd 	.word	0xdc3a03fd
 80159dc:	3feec709 	.word	0x3feec709
 80159e0:	145b01f5 	.word	0x145b01f5
 80159e4:	be3e2fe0 	.word	0xbe3e2fe0
 80159e8:	00000000 	.word	0x00000000
 80159ec:	3ff00000 	.word	0x3ff00000
 80159f0:	7ff00000 	.word	0x7ff00000
 80159f4:	43400000 	.word	0x43400000
 80159f8:	0003988e 	.word	0x0003988e
 80159fc:	000bb679 	.word	0x000bb679
 8015a00:	0802aa38 	.word	0x0802aa38
 8015a04:	3ff00000 	.word	0x3ff00000
 8015a08:	40080000 	.word	0x40080000
 8015a0c:	0802aa58 	.word	0x0802aa58
 8015a10:	0802aa48 	.word	0x0802aa48
 8015a14:	a3b5      	add	r3, pc, #724	; (adr r3, 8015cec <__ieee754_pow+0xa54>)
 8015a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a1a:	4640      	mov	r0, r8
 8015a1c:	4649      	mov	r1, r9
 8015a1e:	f7ea fbe5 	bl	80001ec <__adddf3>
 8015a22:	4622      	mov	r2, r4
 8015a24:	ec41 0b1a 	vmov	d10, r0, r1
 8015a28:	462b      	mov	r3, r5
 8015a2a:	4630      	mov	r0, r6
 8015a2c:	4639      	mov	r1, r7
 8015a2e:	f7ea fbdb 	bl	80001e8 <__aeabi_dsub>
 8015a32:	4602      	mov	r2, r0
 8015a34:	460b      	mov	r3, r1
 8015a36:	ec51 0b1a 	vmov	r0, r1, d10
 8015a3a:	f7eb f81d 	bl	8000a78 <__aeabi_dcmpgt>
 8015a3e:	2800      	cmp	r0, #0
 8015a40:	f47f ae04 	bne.w	801564c <__ieee754_pow+0x3b4>
 8015a44:	4aa4      	ldr	r2, [pc, #656]	; (8015cd8 <__ieee754_pow+0xa40>)
 8015a46:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015a4a:	4293      	cmp	r3, r2
 8015a4c:	f340 8108 	ble.w	8015c60 <__ieee754_pow+0x9c8>
 8015a50:	151b      	asrs	r3, r3, #20
 8015a52:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8015a56:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8015a5a:	fa4a f303 	asr.w	r3, sl, r3
 8015a5e:	445b      	add	r3, fp
 8015a60:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8015a64:	4e9d      	ldr	r6, [pc, #628]	; (8015cdc <__ieee754_pow+0xa44>)
 8015a66:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015a6a:	4116      	asrs	r6, r2
 8015a6c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8015a70:	2000      	movs	r0, #0
 8015a72:	ea23 0106 	bic.w	r1, r3, r6
 8015a76:	f1c2 0214 	rsb	r2, r2, #20
 8015a7a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8015a7e:	fa4a fa02 	asr.w	sl, sl, r2
 8015a82:	f1bb 0f00 	cmp.w	fp, #0
 8015a86:	4602      	mov	r2, r0
 8015a88:	460b      	mov	r3, r1
 8015a8a:	4620      	mov	r0, r4
 8015a8c:	4629      	mov	r1, r5
 8015a8e:	bfb8      	it	lt
 8015a90:	f1ca 0a00 	rsblt	sl, sl, #0
 8015a94:	f7ea fba8 	bl	80001e8 <__aeabi_dsub>
 8015a98:	ec41 0b19 	vmov	d9, r0, r1
 8015a9c:	4642      	mov	r2, r8
 8015a9e:	464b      	mov	r3, r9
 8015aa0:	ec51 0b19 	vmov	r0, r1, d9
 8015aa4:	f7ea fba2 	bl	80001ec <__adddf3>
 8015aa8:	a37b      	add	r3, pc, #492	; (adr r3, 8015c98 <__ieee754_pow+0xa00>)
 8015aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aae:	2000      	movs	r0, #0
 8015ab0:	4604      	mov	r4, r0
 8015ab2:	460d      	mov	r5, r1
 8015ab4:	f7ea fd50 	bl	8000558 <__aeabi_dmul>
 8015ab8:	ec53 2b19 	vmov	r2, r3, d9
 8015abc:	4606      	mov	r6, r0
 8015abe:	460f      	mov	r7, r1
 8015ac0:	4620      	mov	r0, r4
 8015ac2:	4629      	mov	r1, r5
 8015ac4:	f7ea fb90 	bl	80001e8 <__aeabi_dsub>
 8015ac8:	4602      	mov	r2, r0
 8015aca:	460b      	mov	r3, r1
 8015acc:	4640      	mov	r0, r8
 8015ace:	4649      	mov	r1, r9
 8015ad0:	f7ea fb8a 	bl	80001e8 <__aeabi_dsub>
 8015ad4:	a372      	add	r3, pc, #456	; (adr r3, 8015ca0 <__ieee754_pow+0xa08>)
 8015ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ada:	f7ea fd3d 	bl	8000558 <__aeabi_dmul>
 8015ade:	a372      	add	r3, pc, #456	; (adr r3, 8015ca8 <__ieee754_pow+0xa10>)
 8015ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ae4:	4680      	mov	r8, r0
 8015ae6:	4689      	mov	r9, r1
 8015ae8:	4620      	mov	r0, r4
 8015aea:	4629      	mov	r1, r5
 8015aec:	f7ea fd34 	bl	8000558 <__aeabi_dmul>
 8015af0:	4602      	mov	r2, r0
 8015af2:	460b      	mov	r3, r1
 8015af4:	4640      	mov	r0, r8
 8015af6:	4649      	mov	r1, r9
 8015af8:	f7ea fb78 	bl	80001ec <__adddf3>
 8015afc:	4604      	mov	r4, r0
 8015afe:	460d      	mov	r5, r1
 8015b00:	4602      	mov	r2, r0
 8015b02:	460b      	mov	r3, r1
 8015b04:	4630      	mov	r0, r6
 8015b06:	4639      	mov	r1, r7
 8015b08:	f7ea fb70 	bl	80001ec <__adddf3>
 8015b0c:	4632      	mov	r2, r6
 8015b0e:	463b      	mov	r3, r7
 8015b10:	4680      	mov	r8, r0
 8015b12:	4689      	mov	r9, r1
 8015b14:	f7ea fb68 	bl	80001e8 <__aeabi_dsub>
 8015b18:	4602      	mov	r2, r0
 8015b1a:	460b      	mov	r3, r1
 8015b1c:	4620      	mov	r0, r4
 8015b1e:	4629      	mov	r1, r5
 8015b20:	f7ea fb62 	bl	80001e8 <__aeabi_dsub>
 8015b24:	4642      	mov	r2, r8
 8015b26:	4606      	mov	r6, r0
 8015b28:	460f      	mov	r7, r1
 8015b2a:	464b      	mov	r3, r9
 8015b2c:	4640      	mov	r0, r8
 8015b2e:	4649      	mov	r1, r9
 8015b30:	f7ea fd12 	bl	8000558 <__aeabi_dmul>
 8015b34:	a35e      	add	r3, pc, #376	; (adr r3, 8015cb0 <__ieee754_pow+0xa18>)
 8015b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b3a:	4604      	mov	r4, r0
 8015b3c:	460d      	mov	r5, r1
 8015b3e:	f7ea fd0b 	bl	8000558 <__aeabi_dmul>
 8015b42:	a35d      	add	r3, pc, #372	; (adr r3, 8015cb8 <__ieee754_pow+0xa20>)
 8015b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b48:	f7ea fb4e 	bl	80001e8 <__aeabi_dsub>
 8015b4c:	4622      	mov	r2, r4
 8015b4e:	462b      	mov	r3, r5
 8015b50:	f7ea fd02 	bl	8000558 <__aeabi_dmul>
 8015b54:	a35a      	add	r3, pc, #360	; (adr r3, 8015cc0 <__ieee754_pow+0xa28>)
 8015b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b5a:	f7ea fb47 	bl	80001ec <__adddf3>
 8015b5e:	4622      	mov	r2, r4
 8015b60:	462b      	mov	r3, r5
 8015b62:	f7ea fcf9 	bl	8000558 <__aeabi_dmul>
 8015b66:	a358      	add	r3, pc, #352	; (adr r3, 8015cc8 <__ieee754_pow+0xa30>)
 8015b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b6c:	f7ea fb3c 	bl	80001e8 <__aeabi_dsub>
 8015b70:	4622      	mov	r2, r4
 8015b72:	462b      	mov	r3, r5
 8015b74:	f7ea fcf0 	bl	8000558 <__aeabi_dmul>
 8015b78:	a355      	add	r3, pc, #340	; (adr r3, 8015cd0 <__ieee754_pow+0xa38>)
 8015b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b7e:	f7ea fb35 	bl	80001ec <__adddf3>
 8015b82:	4622      	mov	r2, r4
 8015b84:	462b      	mov	r3, r5
 8015b86:	f7ea fce7 	bl	8000558 <__aeabi_dmul>
 8015b8a:	4602      	mov	r2, r0
 8015b8c:	460b      	mov	r3, r1
 8015b8e:	4640      	mov	r0, r8
 8015b90:	4649      	mov	r1, r9
 8015b92:	f7ea fb29 	bl	80001e8 <__aeabi_dsub>
 8015b96:	4604      	mov	r4, r0
 8015b98:	460d      	mov	r5, r1
 8015b9a:	4602      	mov	r2, r0
 8015b9c:	460b      	mov	r3, r1
 8015b9e:	4640      	mov	r0, r8
 8015ba0:	4649      	mov	r1, r9
 8015ba2:	f7ea fcd9 	bl	8000558 <__aeabi_dmul>
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	ec41 0b19 	vmov	d9, r0, r1
 8015bac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015bb0:	4620      	mov	r0, r4
 8015bb2:	4629      	mov	r1, r5
 8015bb4:	f7ea fb18 	bl	80001e8 <__aeabi_dsub>
 8015bb8:	4602      	mov	r2, r0
 8015bba:	460b      	mov	r3, r1
 8015bbc:	ec51 0b19 	vmov	r0, r1, d9
 8015bc0:	f7ea fdf4 	bl	80007ac <__aeabi_ddiv>
 8015bc4:	4632      	mov	r2, r6
 8015bc6:	4604      	mov	r4, r0
 8015bc8:	460d      	mov	r5, r1
 8015bca:	463b      	mov	r3, r7
 8015bcc:	4640      	mov	r0, r8
 8015bce:	4649      	mov	r1, r9
 8015bd0:	f7ea fcc2 	bl	8000558 <__aeabi_dmul>
 8015bd4:	4632      	mov	r2, r6
 8015bd6:	463b      	mov	r3, r7
 8015bd8:	f7ea fb08 	bl	80001ec <__adddf3>
 8015bdc:	4602      	mov	r2, r0
 8015bde:	460b      	mov	r3, r1
 8015be0:	4620      	mov	r0, r4
 8015be2:	4629      	mov	r1, r5
 8015be4:	f7ea fb00 	bl	80001e8 <__aeabi_dsub>
 8015be8:	4642      	mov	r2, r8
 8015bea:	464b      	mov	r3, r9
 8015bec:	f7ea fafc 	bl	80001e8 <__aeabi_dsub>
 8015bf0:	460b      	mov	r3, r1
 8015bf2:	4602      	mov	r2, r0
 8015bf4:	493a      	ldr	r1, [pc, #232]	; (8015ce0 <__ieee754_pow+0xa48>)
 8015bf6:	2000      	movs	r0, #0
 8015bf8:	f7ea faf6 	bl	80001e8 <__aeabi_dsub>
 8015bfc:	ec41 0b10 	vmov	d0, r0, r1
 8015c00:	ee10 3a90 	vmov	r3, s1
 8015c04:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8015c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015c0c:	da2b      	bge.n	8015c66 <__ieee754_pow+0x9ce>
 8015c0e:	4650      	mov	r0, sl
 8015c10:	f000 fa0a 	bl	8016028 <scalbn>
 8015c14:	ec51 0b10 	vmov	r0, r1, d0
 8015c18:	ec53 2b18 	vmov	r2, r3, d8
 8015c1c:	f7ff bbed 	b.w	80153fa <__ieee754_pow+0x162>
 8015c20:	4b30      	ldr	r3, [pc, #192]	; (8015ce4 <__ieee754_pow+0xa4c>)
 8015c22:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015c26:	429e      	cmp	r6, r3
 8015c28:	f77f af0c 	ble.w	8015a44 <__ieee754_pow+0x7ac>
 8015c2c:	4b2e      	ldr	r3, [pc, #184]	; (8015ce8 <__ieee754_pow+0xa50>)
 8015c2e:	440b      	add	r3, r1
 8015c30:	4303      	orrs	r3, r0
 8015c32:	d009      	beq.n	8015c48 <__ieee754_pow+0x9b0>
 8015c34:	ec51 0b18 	vmov	r0, r1, d8
 8015c38:	2200      	movs	r2, #0
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	f7ea fefe 	bl	8000a3c <__aeabi_dcmplt>
 8015c40:	3800      	subs	r0, #0
 8015c42:	bf18      	it	ne
 8015c44:	2001      	movne	r0, #1
 8015c46:	e447      	b.n	80154d8 <__ieee754_pow+0x240>
 8015c48:	4622      	mov	r2, r4
 8015c4a:	462b      	mov	r3, r5
 8015c4c:	f7ea facc 	bl	80001e8 <__aeabi_dsub>
 8015c50:	4642      	mov	r2, r8
 8015c52:	464b      	mov	r3, r9
 8015c54:	f7ea ff06 	bl	8000a64 <__aeabi_dcmpge>
 8015c58:	2800      	cmp	r0, #0
 8015c5a:	f43f aef3 	beq.w	8015a44 <__ieee754_pow+0x7ac>
 8015c5e:	e7e9      	b.n	8015c34 <__ieee754_pow+0x99c>
 8015c60:	f04f 0a00 	mov.w	sl, #0
 8015c64:	e71a      	b.n	8015a9c <__ieee754_pow+0x804>
 8015c66:	ec51 0b10 	vmov	r0, r1, d0
 8015c6a:	4619      	mov	r1, r3
 8015c6c:	e7d4      	b.n	8015c18 <__ieee754_pow+0x980>
 8015c6e:	491c      	ldr	r1, [pc, #112]	; (8015ce0 <__ieee754_pow+0xa48>)
 8015c70:	2000      	movs	r0, #0
 8015c72:	f7ff bb30 	b.w	80152d6 <__ieee754_pow+0x3e>
 8015c76:	2000      	movs	r0, #0
 8015c78:	2100      	movs	r1, #0
 8015c7a:	f7ff bb2c 	b.w	80152d6 <__ieee754_pow+0x3e>
 8015c7e:	4630      	mov	r0, r6
 8015c80:	4639      	mov	r1, r7
 8015c82:	f7ff bb28 	b.w	80152d6 <__ieee754_pow+0x3e>
 8015c86:	9204      	str	r2, [sp, #16]
 8015c88:	f7ff bb7a 	b.w	8015380 <__ieee754_pow+0xe8>
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	f7ff bb64 	b.w	801535a <__ieee754_pow+0xc2>
 8015c92:	bf00      	nop
 8015c94:	f3af 8000 	nop.w
 8015c98:	00000000 	.word	0x00000000
 8015c9c:	3fe62e43 	.word	0x3fe62e43
 8015ca0:	fefa39ef 	.word	0xfefa39ef
 8015ca4:	3fe62e42 	.word	0x3fe62e42
 8015ca8:	0ca86c39 	.word	0x0ca86c39
 8015cac:	be205c61 	.word	0xbe205c61
 8015cb0:	72bea4d0 	.word	0x72bea4d0
 8015cb4:	3e663769 	.word	0x3e663769
 8015cb8:	c5d26bf1 	.word	0xc5d26bf1
 8015cbc:	3ebbbd41 	.word	0x3ebbbd41
 8015cc0:	af25de2c 	.word	0xaf25de2c
 8015cc4:	3f11566a 	.word	0x3f11566a
 8015cc8:	16bebd93 	.word	0x16bebd93
 8015ccc:	3f66c16c 	.word	0x3f66c16c
 8015cd0:	5555553e 	.word	0x5555553e
 8015cd4:	3fc55555 	.word	0x3fc55555
 8015cd8:	3fe00000 	.word	0x3fe00000
 8015cdc:	000fffff 	.word	0x000fffff
 8015ce0:	3ff00000 	.word	0x3ff00000
 8015ce4:	4090cbff 	.word	0x4090cbff
 8015ce8:	3f6f3400 	.word	0x3f6f3400
 8015cec:	652b82fe 	.word	0x652b82fe
 8015cf0:	3c971547 	.word	0x3c971547

08015cf4 <__ieee754_sqrt>:
 8015cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cf8:	ec55 4b10 	vmov	r4, r5, d0
 8015cfc:	4e55      	ldr	r6, [pc, #340]	; (8015e54 <__ieee754_sqrt+0x160>)
 8015cfe:	43ae      	bics	r6, r5
 8015d00:	ee10 0a10 	vmov	r0, s0
 8015d04:	ee10 3a10 	vmov	r3, s0
 8015d08:	462a      	mov	r2, r5
 8015d0a:	4629      	mov	r1, r5
 8015d0c:	d110      	bne.n	8015d30 <__ieee754_sqrt+0x3c>
 8015d0e:	ee10 2a10 	vmov	r2, s0
 8015d12:	462b      	mov	r3, r5
 8015d14:	f7ea fc20 	bl	8000558 <__aeabi_dmul>
 8015d18:	4602      	mov	r2, r0
 8015d1a:	460b      	mov	r3, r1
 8015d1c:	4620      	mov	r0, r4
 8015d1e:	4629      	mov	r1, r5
 8015d20:	f7ea fa64 	bl	80001ec <__adddf3>
 8015d24:	4604      	mov	r4, r0
 8015d26:	460d      	mov	r5, r1
 8015d28:	ec45 4b10 	vmov	d0, r4, r5
 8015d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d30:	2d00      	cmp	r5, #0
 8015d32:	dc10      	bgt.n	8015d56 <__ieee754_sqrt+0x62>
 8015d34:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015d38:	4330      	orrs	r0, r6
 8015d3a:	d0f5      	beq.n	8015d28 <__ieee754_sqrt+0x34>
 8015d3c:	b15d      	cbz	r5, 8015d56 <__ieee754_sqrt+0x62>
 8015d3e:	ee10 2a10 	vmov	r2, s0
 8015d42:	462b      	mov	r3, r5
 8015d44:	ee10 0a10 	vmov	r0, s0
 8015d48:	f7ea fa4e 	bl	80001e8 <__aeabi_dsub>
 8015d4c:	4602      	mov	r2, r0
 8015d4e:	460b      	mov	r3, r1
 8015d50:	f7ea fd2c 	bl	80007ac <__aeabi_ddiv>
 8015d54:	e7e6      	b.n	8015d24 <__ieee754_sqrt+0x30>
 8015d56:	1512      	asrs	r2, r2, #20
 8015d58:	d074      	beq.n	8015e44 <__ieee754_sqrt+0x150>
 8015d5a:	07d4      	lsls	r4, r2, #31
 8015d5c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8015d60:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8015d64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8015d68:	bf5e      	ittt	pl
 8015d6a:	0fda      	lsrpl	r2, r3, #31
 8015d6c:	005b      	lslpl	r3, r3, #1
 8015d6e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8015d72:	2400      	movs	r4, #0
 8015d74:	0fda      	lsrs	r2, r3, #31
 8015d76:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8015d7a:	107f      	asrs	r7, r7, #1
 8015d7c:	005b      	lsls	r3, r3, #1
 8015d7e:	2516      	movs	r5, #22
 8015d80:	4620      	mov	r0, r4
 8015d82:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8015d86:	1886      	adds	r6, r0, r2
 8015d88:	428e      	cmp	r6, r1
 8015d8a:	bfde      	ittt	le
 8015d8c:	1b89      	suble	r1, r1, r6
 8015d8e:	18b0      	addle	r0, r6, r2
 8015d90:	18a4      	addle	r4, r4, r2
 8015d92:	0049      	lsls	r1, r1, #1
 8015d94:	3d01      	subs	r5, #1
 8015d96:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8015d9a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8015d9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015da2:	d1f0      	bne.n	8015d86 <__ieee754_sqrt+0x92>
 8015da4:	462a      	mov	r2, r5
 8015da6:	f04f 0e20 	mov.w	lr, #32
 8015daa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015dae:	4281      	cmp	r1, r0
 8015db0:	eb06 0c05 	add.w	ip, r6, r5
 8015db4:	dc02      	bgt.n	8015dbc <__ieee754_sqrt+0xc8>
 8015db6:	d113      	bne.n	8015de0 <__ieee754_sqrt+0xec>
 8015db8:	459c      	cmp	ip, r3
 8015dba:	d811      	bhi.n	8015de0 <__ieee754_sqrt+0xec>
 8015dbc:	f1bc 0f00 	cmp.w	ip, #0
 8015dc0:	eb0c 0506 	add.w	r5, ip, r6
 8015dc4:	da43      	bge.n	8015e4e <__ieee754_sqrt+0x15a>
 8015dc6:	2d00      	cmp	r5, #0
 8015dc8:	db41      	blt.n	8015e4e <__ieee754_sqrt+0x15a>
 8015dca:	f100 0801 	add.w	r8, r0, #1
 8015dce:	1a09      	subs	r1, r1, r0
 8015dd0:	459c      	cmp	ip, r3
 8015dd2:	bf88      	it	hi
 8015dd4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8015dd8:	eba3 030c 	sub.w	r3, r3, ip
 8015ddc:	4432      	add	r2, r6
 8015dde:	4640      	mov	r0, r8
 8015de0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8015de4:	f1be 0e01 	subs.w	lr, lr, #1
 8015de8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8015dec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015df0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015df4:	d1db      	bne.n	8015dae <__ieee754_sqrt+0xba>
 8015df6:	430b      	orrs	r3, r1
 8015df8:	d006      	beq.n	8015e08 <__ieee754_sqrt+0x114>
 8015dfa:	1c50      	adds	r0, r2, #1
 8015dfc:	bf13      	iteet	ne
 8015dfe:	3201      	addne	r2, #1
 8015e00:	3401      	addeq	r4, #1
 8015e02:	4672      	moveq	r2, lr
 8015e04:	f022 0201 	bicne.w	r2, r2, #1
 8015e08:	1063      	asrs	r3, r4, #1
 8015e0a:	0852      	lsrs	r2, r2, #1
 8015e0c:	07e1      	lsls	r1, r4, #31
 8015e0e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8015e12:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8015e16:	bf48      	it	mi
 8015e18:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8015e1c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8015e20:	4614      	mov	r4, r2
 8015e22:	e781      	b.n	8015d28 <__ieee754_sqrt+0x34>
 8015e24:	0ad9      	lsrs	r1, r3, #11
 8015e26:	3815      	subs	r0, #21
 8015e28:	055b      	lsls	r3, r3, #21
 8015e2a:	2900      	cmp	r1, #0
 8015e2c:	d0fa      	beq.n	8015e24 <__ieee754_sqrt+0x130>
 8015e2e:	02cd      	lsls	r5, r1, #11
 8015e30:	d50a      	bpl.n	8015e48 <__ieee754_sqrt+0x154>
 8015e32:	f1c2 0420 	rsb	r4, r2, #32
 8015e36:	fa23 f404 	lsr.w	r4, r3, r4
 8015e3a:	1e55      	subs	r5, r2, #1
 8015e3c:	4093      	lsls	r3, r2
 8015e3e:	4321      	orrs	r1, r4
 8015e40:	1b42      	subs	r2, r0, r5
 8015e42:	e78a      	b.n	8015d5a <__ieee754_sqrt+0x66>
 8015e44:	4610      	mov	r0, r2
 8015e46:	e7f0      	b.n	8015e2a <__ieee754_sqrt+0x136>
 8015e48:	0049      	lsls	r1, r1, #1
 8015e4a:	3201      	adds	r2, #1
 8015e4c:	e7ef      	b.n	8015e2e <__ieee754_sqrt+0x13a>
 8015e4e:	4680      	mov	r8, r0
 8015e50:	e7bd      	b.n	8015dce <__ieee754_sqrt+0xda>
 8015e52:	bf00      	nop
 8015e54:	7ff00000 	.word	0x7ff00000

08015e58 <__ieee754_atan2f>:
 8015e58:	ee10 2a90 	vmov	r2, s1
 8015e5c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8015e60:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015e64:	b510      	push	{r4, lr}
 8015e66:	eef0 7a40 	vmov.f32	s15, s0
 8015e6a:	dc06      	bgt.n	8015e7a <__ieee754_atan2f+0x22>
 8015e6c:	ee10 0a10 	vmov	r0, s0
 8015e70:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8015e74:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015e78:	dd04      	ble.n	8015e84 <__ieee754_atan2f+0x2c>
 8015e7a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8015e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8015e82:	bd10      	pop	{r4, pc}
 8015e84:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8015e88:	d103      	bne.n	8015e92 <__ieee754_atan2f+0x3a>
 8015e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e8e:	f000 b951 	b.w	8016134 <atanf>
 8015e92:	1794      	asrs	r4, r2, #30
 8015e94:	f004 0402 	and.w	r4, r4, #2
 8015e98:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8015e9c:	b943      	cbnz	r3, 8015eb0 <__ieee754_atan2f+0x58>
 8015e9e:	2c02      	cmp	r4, #2
 8015ea0:	d05e      	beq.n	8015f60 <__ieee754_atan2f+0x108>
 8015ea2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8015f74 <__ieee754_atan2f+0x11c>
 8015ea6:	2c03      	cmp	r4, #3
 8015ea8:	bf08      	it	eq
 8015eaa:	eef0 7a47 	vmoveq.f32	s15, s14
 8015eae:	e7e6      	b.n	8015e7e <__ieee754_atan2f+0x26>
 8015eb0:	b941      	cbnz	r1, 8015ec4 <__ieee754_atan2f+0x6c>
 8015eb2:	eddf 7a31 	vldr	s15, [pc, #196]	; 8015f78 <__ieee754_atan2f+0x120>
 8015eb6:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8015f7c <__ieee754_atan2f+0x124>
 8015eba:	2800      	cmp	r0, #0
 8015ebc:	bfb8      	it	lt
 8015ebe:	eef0 7a40 	vmovlt.f32	s15, s0
 8015ec2:	e7dc      	b.n	8015e7e <__ieee754_atan2f+0x26>
 8015ec4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015ec8:	d110      	bne.n	8015eec <__ieee754_atan2f+0x94>
 8015eca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015ece:	f104 34ff 	add.w	r4, r4, #4294967295
 8015ed2:	d107      	bne.n	8015ee4 <__ieee754_atan2f+0x8c>
 8015ed4:	2c02      	cmp	r4, #2
 8015ed6:	d846      	bhi.n	8015f66 <__ieee754_atan2f+0x10e>
 8015ed8:	4b29      	ldr	r3, [pc, #164]	; (8015f80 <__ieee754_atan2f+0x128>)
 8015eda:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015ede:	edd4 7a00 	vldr	s15, [r4]
 8015ee2:	e7cc      	b.n	8015e7e <__ieee754_atan2f+0x26>
 8015ee4:	2c02      	cmp	r4, #2
 8015ee6:	d841      	bhi.n	8015f6c <__ieee754_atan2f+0x114>
 8015ee8:	4b26      	ldr	r3, [pc, #152]	; (8015f84 <__ieee754_atan2f+0x12c>)
 8015eea:	e7f6      	b.n	8015eda <__ieee754_atan2f+0x82>
 8015eec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015ef0:	d0df      	beq.n	8015eb2 <__ieee754_atan2f+0x5a>
 8015ef2:	1a5b      	subs	r3, r3, r1
 8015ef4:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8015ef8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8015efc:	da1a      	bge.n	8015f34 <__ieee754_atan2f+0xdc>
 8015efe:	2a00      	cmp	r2, #0
 8015f00:	da01      	bge.n	8015f06 <__ieee754_atan2f+0xae>
 8015f02:	313c      	adds	r1, #60	; 0x3c
 8015f04:	db19      	blt.n	8015f3a <__ieee754_atan2f+0xe2>
 8015f06:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8015f0a:	f000 f9e7 	bl	80162dc <fabsf>
 8015f0e:	f000 f911 	bl	8016134 <atanf>
 8015f12:	eef0 7a40 	vmov.f32	s15, s0
 8015f16:	2c01      	cmp	r4, #1
 8015f18:	d012      	beq.n	8015f40 <__ieee754_atan2f+0xe8>
 8015f1a:	2c02      	cmp	r4, #2
 8015f1c:	d017      	beq.n	8015f4e <__ieee754_atan2f+0xf6>
 8015f1e:	2c00      	cmp	r4, #0
 8015f20:	d0ad      	beq.n	8015e7e <__ieee754_atan2f+0x26>
 8015f22:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8015f88 <__ieee754_atan2f+0x130>
 8015f26:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015f2a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8015f8c <__ieee754_atan2f+0x134>
 8015f2e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015f32:	e7a4      	b.n	8015e7e <__ieee754_atan2f+0x26>
 8015f34:	eddf 7a10 	vldr	s15, [pc, #64]	; 8015f78 <__ieee754_atan2f+0x120>
 8015f38:	e7ed      	b.n	8015f16 <__ieee754_atan2f+0xbe>
 8015f3a:	eddf 7a15 	vldr	s15, [pc, #84]	; 8015f90 <__ieee754_atan2f+0x138>
 8015f3e:	e7ea      	b.n	8015f16 <__ieee754_atan2f+0xbe>
 8015f40:	ee17 3a90 	vmov	r3, s15
 8015f44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015f48:	ee07 3a90 	vmov	s15, r3
 8015f4c:	e797      	b.n	8015e7e <__ieee754_atan2f+0x26>
 8015f4e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8015f88 <__ieee754_atan2f+0x130>
 8015f52:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015f56:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8015f8c <__ieee754_atan2f+0x134>
 8015f5a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015f5e:	e78e      	b.n	8015e7e <__ieee754_atan2f+0x26>
 8015f60:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8015f8c <__ieee754_atan2f+0x134>
 8015f64:	e78b      	b.n	8015e7e <__ieee754_atan2f+0x26>
 8015f66:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8015f94 <__ieee754_atan2f+0x13c>
 8015f6a:	e788      	b.n	8015e7e <__ieee754_atan2f+0x26>
 8015f6c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8015f90 <__ieee754_atan2f+0x138>
 8015f70:	e785      	b.n	8015e7e <__ieee754_atan2f+0x26>
 8015f72:	bf00      	nop
 8015f74:	c0490fdb 	.word	0xc0490fdb
 8015f78:	3fc90fdb 	.word	0x3fc90fdb
 8015f7c:	bfc90fdb 	.word	0xbfc90fdb
 8015f80:	0802aa68 	.word	0x0802aa68
 8015f84:	0802aa74 	.word	0x0802aa74
 8015f88:	33bbbd2e 	.word	0x33bbbd2e
 8015f8c:	40490fdb 	.word	0x40490fdb
 8015f90:	00000000 	.word	0x00000000
 8015f94:	3f490fdb 	.word	0x3f490fdb

08015f98 <__ieee754_sqrtf>:
 8015f98:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015f9c:	4770      	bx	lr

08015f9e <with_errno>:
 8015f9e:	b570      	push	{r4, r5, r6, lr}
 8015fa0:	4604      	mov	r4, r0
 8015fa2:	460d      	mov	r5, r1
 8015fa4:	4616      	mov	r6, r2
 8015fa6:	f000 f9ab 	bl	8016300 <__errno>
 8015faa:	4629      	mov	r1, r5
 8015fac:	6006      	str	r6, [r0, #0]
 8015fae:	4620      	mov	r0, r4
 8015fb0:	bd70      	pop	{r4, r5, r6, pc}

08015fb2 <xflow>:
 8015fb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015fb4:	4614      	mov	r4, r2
 8015fb6:	461d      	mov	r5, r3
 8015fb8:	b108      	cbz	r0, 8015fbe <xflow+0xc>
 8015fba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015fbe:	e9cd 2300 	strd	r2, r3, [sp]
 8015fc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015fc6:	4620      	mov	r0, r4
 8015fc8:	4629      	mov	r1, r5
 8015fca:	f7ea fac5 	bl	8000558 <__aeabi_dmul>
 8015fce:	2222      	movs	r2, #34	; 0x22
 8015fd0:	b003      	add	sp, #12
 8015fd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015fd6:	f7ff bfe2 	b.w	8015f9e <with_errno>

08015fda <__math_uflow>:
 8015fda:	b508      	push	{r3, lr}
 8015fdc:	2200      	movs	r2, #0
 8015fde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8015fe2:	f7ff ffe6 	bl	8015fb2 <xflow>
 8015fe6:	ec41 0b10 	vmov	d0, r0, r1
 8015fea:	bd08      	pop	{r3, pc}

08015fec <__math_oflow>:
 8015fec:	b508      	push	{r3, lr}
 8015fee:	2200      	movs	r2, #0
 8015ff0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8015ff4:	f7ff ffdd 	bl	8015fb2 <xflow>
 8015ff8:	ec41 0b10 	vmov	d0, r0, r1
 8015ffc:	bd08      	pop	{r3, pc}

08015ffe <fabs>:
 8015ffe:	ec51 0b10 	vmov	r0, r1, d0
 8016002:	ee10 2a10 	vmov	r2, s0
 8016006:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801600a:	ec43 2b10 	vmov	d0, r2, r3
 801600e:	4770      	bx	lr

08016010 <finite>:
 8016010:	b082      	sub	sp, #8
 8016012:	ed8d 0b00 	vstr	d0, [sp]
 8016016:	9801      	ldr	r0, [sp, #4]
 8016018:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801601c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016020:	0fc0      	lsrs	r0, r0, #31
 8016022:	b002      	add	sp, #8
 8016024:	4770      	bx	lr
	...

08016028 <scalbn>:
 8016028:	b570      	push	{r4, r5, r6, lr}
 801602a:	ec55 4b10 	vmov	r4, r5, d0
 801602e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8016032:	4606      	mov	r6, r0
 8016034:	462b      	mov	r3, r5
 8016036:	b99a      	cbnz	r2, 8016060 <scalbn+0x38>
 8016038:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801603c:	4323      	orrs	r3, r4
 801603e:	d036      	beq.n	80160ae <scalbn+0x86>
 8016040:	4b39      	ldr	r3, [pc, #228]	; (8016128 <scalbn+0x100>)
 8016042:	4629      	mov	r1, r5
 8016044:	ee10 0a10 	vmov	r0, s0
 8016048:	2200      	movs	r2, #0
 801604a:	f7ea fa85 	bl	8000558 <__aeabi_dmul>
 801604e:	4b37      	ldr	r3, [pc, #220]	; (801612c <scalbn+0x104>)
 8016050:	429e      	cmp	r6, r3
 8016052:	4604      	mov	r4, r0
 8016054:	460d      	mov	r5, r1
 8016056:	da10      	bge.n	801607a <scalbn+0x52>
 8016058:	a32b      	add	r3, pc, #172	; (adr r3, 8016108 <scalbn+0xe0>)
 801605a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801605e:	e03a      	b.n	80160d6 <scalbn+0xae>
 8016060:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016064:	428a      	cmp	r2, r1
 8016066:	d10c      	bne.n	8016082 <scalbn+0x5a>
 8016068:	ee10 2a10 	vmov	r2, s0
 801606c:	4620      	mov	r0, r4
 801606e:	4629      	mov	r1, r5
 8016070:	f7ea f8bc 	bl	80001ec <__adddf3>
 8016074:	4604      	mov	r4, r0
 8016076:	460d      	mov	r5, r1
 8016078:	e019      	b.n	80160ae <scalbn+0x86>
 801607a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801607e:	460b      	mov	r3, r1
 8016080:	3a36      	subs	r2, #54	; 0x36
 8016082:	4432      	add	r2, r6
 8016084:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016088:	428a      	cmp	r2, r1
 801608a:	dd08      	ble.n	801609e <scalbn+0x76>
 801608c:	2d00      	cmp	r5, #0
 801608e:	a120      	add	r1, pc, #128	; (adr r1, 8016110 <scalbn+0xe8>)
 8016090:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016094:	da1c      	bge.n	80160d0 <scalbn+0xa8>
 8016096:	a120      	add	r1, pc, #128	; (adr r1, 8016118 <scalbn+0xf0>)
 8016098:	e9d1 0100 	ldrd	r0, r1, [r1]
 801609c:	e018      	b.n	80160d0 <scalbn+0xa8>
 801609e:	2a00      	cmp	r2, #0
 80160a0:	dd08      	ble.n	80160b4 <scalbn+0x8c>
 80160a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80160a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80160aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80160ae:	ec45 4b10 	vmov	d0, r4, r5
 80160b2:	bd70      	pop	{r4, r5, r6, pc}
 80160b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80160b8:	da19      	bge.n	80160ee <scalbn+0xc6>
 80160ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80160be:	429e      	cmp	r6, r3
 80160c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80160c4:	dd0a      	ble.n	80160dc <scalbn+0xb4>
 80160c6:	a112      	add	r1, pc, #72	; (adr r1, 8016110 <scalbn+0xe8>)
 80160c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d1e2      	bne.n	8016096 <scalbn+0x6e>
 80160d0:	a30f      	add	r3, pc, #60	; (adr r3, 8016110 <scalbn+0xe8>)
 80160d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160d6:	f7ea fa3f 	bl	8000558 <__aeabi_dmul>
 80160da:	e7cb      	b.n	8016074 <scalbn+0x4c>
 80160dc:	a10a      	add	r1, pc, #40	; (adr r1, 8016108 <scalbn+0xe0>)
 80160de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d0b8      	beq.n	8016058 <scalbn+0x30>
 80160e6:	a10e      	add	r1, pc, #56	; (adr r1, 8016120 <scalbn+0xf8>)
 80160e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80160ec:	e7b4      	b.n	8016058 <scalbn+0x30>
 80160ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80160f2:	3236      	adds	r2, #54	; 0x36
 80160f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80160f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80160fc:	4620      	mov	r0, r4
 80160fe:	4b0c      	ldr	r3, [pc, #48]	; (8016130 <scalbn+0x108>)
 8016100:	2200      	movs	r2, #0
 8016102:	e7e8      	b.n	80160d6 <scalbn+0xae>
 8016104:	f3af 8000 	nop.w
 8016108:	c2f8f359 	.word	0xc2f8f359
 801610c:	01a56e1f 	.word	0x01a56e1f
 8016110:	8800759c 	.word	0x8800759c
 8016114:	7e37e43c 	.word	0x7e37e43c
 8016118:	8800759c 	.word	0x8800759c
 801611c:	fe37e43c 	.word	0xfe37e43c
 8016120:	c2f8f359 	.word	0xc2f8f359
 8016124:	81a56e1f 	.word	0x81a56e1f
 8016128:	43500000 	.word	0x43500000
 801612c:	ffff3cb0 	.word	0xffff3cb0
 8016130:	3c900000 	.word	0x3c900000

08016134 <atanf>:
 8016134:	b538      	push	{r3, r4, r5, lr}
 8016136:	ee10 5a10 	vmov	r5, s0
 801613a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801613e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8016142:	eef0 7a40 	vmov.f32	s15, s0
 8016146:	db10      	blt.n	801616a <atanf+0x36>
 8016148:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801614c:	dd04      	ble.n	8016158 <atanf+0x24>
 801614e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8016152:	eeb0 0a67 	vmov.f32	s0, s15
 8016156:	bd38      	pop	{r3, r4, r5, pc}
 8016158:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8016290 <atanf+0x15c>
 801615c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8016294 <atanf+0x160>
 8016160:	2d00      	cmp	r5, #0
 8016162:	bfd8      	it	le
 8016164:	eef0 7a40 	vmovle.f32	s15, s0
 8016168:	e7f3      	b.n	8016152 <atanf+0x1e>
 801616a:	4b4b      	ldr	r3, [pc, #300]	; (8016298 <atanf+0x164>)
 801616c:	429c      	cmp	r4, r3
 801616e:	dc10      	bgt.n	8016192 <atanf+0x5e>
 8016170:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8016174:	da0a      	bge.n	801618c <atanf+0x58>
 8016176:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801629c <atanf+0x168>
 801617a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801617e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016182:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801618a:	dce2      	bgt.n	8016152 <atanf+0x1e>
 801618c:	f04f 33ff 	mov.w	r3, #4294967295
 8016190:	e013      	b.n	80161ba <atanf+0x86>
 8016192:	f000 f8a3 	bl	80162dc <fabsf>
 8016196:	4b42      	ldr	r3, [pc, #264]	; (80162a0 <atanf+0x16c>)
 8016198:	429c      	cmp	r4, r3
 801619a:	dc4f      	bgt.n	801623c <atanf+0x108>
 801619c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80161a0:	429c      	cmp	r4, r3
 80161a2:	dc41      	bgt.n	8016228 <atanf+0xf4>
 80161a4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80161a8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80161ac:	eea0 7a27 	vfma.f32	s14, s0, s15
 80161b0:	2300      	movs	r3, #0
 80161b2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80161b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80161ba:	1c5a      	adds	r2, r3, #1
 80161bc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80161c0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80162a4 <atanf+0x170>
 80161c4:	eddf 5a38 	vldr	s11, [pc, #224]	; 80162a8 <atanf+0x174>
 80161c8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80162ac <atanf+0x178>
 80161cc:	ee66 6a06 	vmul.f32	s13, s12, s12
 80161d0:	eee6 5a87 	vfma.f32	s11, s13, s14
 80161d4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80162b0 <atanf+0x17c>
 80161d8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80161dc:	eddf 5a35 	vldr	s11, [pc, #212]	; 80162b4 <atanf+0x180>
 80161e0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80161e4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80162b8 <atanf+0x184>
 80161e8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80161ec:	eddf 5a33 	vldr	s11, [pc, #204]	; 80162bc <atanf+0x188>
 80161f0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80161f4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80162c0 <atanf+0x18c>
 80161f8:	eea6 5a87 	vfma.f32	s10, s13, s14
 80161fc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80162c4 <atanf+0x190>
 8016200:	eea5 7a26 	vfma.f32	s14, s10, s13
 8016204:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80162c8 <atanf+0x194>
 8016208:	eea7 5a26 	vfma.f32	s10, s14, s13
 801620c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80162cc <atanf+0x198>
 8016210:	eea5 7a26 	vfma.f32	s14, s10, s13
 8016214:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016218:	eea5 7a86 	vfma.f32	s14, s11, s12
 801621c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8016220:	d121      	bne.n	8016266 <atanf+0x132>
 8016222:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016226:	e794      	b.n	8016152 <atanf+0x1e>
 8016228:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801622c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016230:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016234:	2301      	movs	r3, #1
 8016236:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801623a:	e7be      	b.n	80161ba <atanf+0x86>
 801623c:	4b24      	ldr	r3, [pc, #144]	; (80162d0 <atanf+0x19c>)
 801623e:	429c      	cmp	r4, r3
 8016240:	dc0b      	bgt.n	801625a <atanf+0x126>
 8016242:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8016246:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801624a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801624e:	2302      	movs	r3, #2
 8016250:	ee70 6a67 	vsub.f32	s13, s0, s15
 8016254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016258:	e7af      	b.n	80161ba <atanf+0x86>
 801625a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801625e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016262:	2303      	movs	r3, #3
 8016264:	e7a9      	b.n	80161ba <atanf+0x86>
 8016266:	4a1b      	ldr	r2, [pc, #108]	; (80162d4 <atanf+0x1a0>)
 8016268:	491b      	ldr	r1, [pc, #108]	; (80162d8 <atanf+0x1a4>)
 801626a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801626e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016272:	ed93 0a00 	vldr	s0, [r3]
 8016276:	ee37 7a40 	vsub.f32	s14, s14, s0
 801627a:	ed92 0a00 	vldr	s0, [r2]
 801627e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016282:	2d00      	cmp	r5, #0
 8016284:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016288:	bfb8      	it	lt
 801628a:	eef1 7a67 	vneglt.f32	s15, s15
 801628e:	e760      	b.n	8016152 <atanf+0x1e>
 8016290:	3fc90fdb 	.word	0x3fc90fdb
 8016294:	bfc90fdb 	.word	0xbfc90fdb
 8016298:	3edfffff 	.word	0x3edfffff
 801629c:	7149f2ca 	.word	0x7149f2ca
 80162a0:	3f97ffff 	.word	0x3f97ffff
 80162a4:	3c8569d7 	.word	0x3c8569d7
 80162a8:	3d4bda59 	.word	0x3d4bda59
 80162ac:	bd6ef16b 	.word	0xbd6ef16b
 80162b0:	3d886b35 	.word	0x3d886b35
 80162b4:	3dba2e6e 	.word	0x3dba2e6e
 80162b8:	3e124925 	.word	0x3e124925
 80162bc:	3eaaaaab 	.word	0x3eaaaaab
 80162c0:	bd15a221 	.word	0xbd15a221
 80162c4:	bd9d8795 	.word	0xbd9d8795
 80162c8:	bde38e38 	.word	0xbde38e38
 80162cc:	be4ccccd 	.word	0xbe4ccccd
 80162d0:	401bffff 	.word	0x401bffff
 80162d4:	0802aa80 	.word	0x0802aa80
 80162d8:	0802aa90 	.word	0x0802aa90

080162dc <fabsf>:
 80162dc:	ee10 3a10 	vmov	r3, s0
 80162e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80162e4:	ee00 3a10 	vmov	s0, r3
 80162e8:	4770      	bx	lr

080162ea <abort>:
 80162ea:	b508      	push	{r3, lr}
 80162ec:	2006      	movs	r0, #6
 80162ee:	f000 f989 	bl	8016604 <raise>
 80162f2:	2001      	movs	r0, #1
 80162f4:	f7ed fc00 	bl	8003af8 <_exit>

080162f8 <atoi>:
 80162f8:	220a      	movs	r2, #10
 80162fa:	2100      	movs	r1, #0
 80162fc:	f000 ba30 	b.w	8016760 <strtol>

08016300 <__errno>:
 8016300:	4b01      	ldr	r3, [pc, #4]	; (8016308 <__errno+0x8>)
 8016302:	6818      	ldr	r0, [r3, #0]
 8016304:	4770      	bx	lr
 8016306:	bf00      	nop
 8016308:	20000018 	.word	0x20000018

0801630c <__libc_init_array>:
 801630c:	b570      	push	{r4, r5, r6, lr}
 801630e:	4d0d      	ldr	r5, [pc, #52]	; (8016344 <__libc_init_array+0x38>)
 8016310:	4c0d      	ldr	r4, [pc, #52]	; (8016348 <__libc_init_array+0x3c>)
 8016312:	1b64      	subs	r4, r4, r5
 8016314:	10a4      	asrs	r4, r4, #2
 8016316:	2600      	movs	r6, #0
 8016318:	42a6      	cmp	r6, r4
 801631a:	d109      	bne.n	8016330 <__libc_init_array+0x24>
 801631c:	4d0b      	ldr	r5, [pc, #44]	; (801634c <__libc_init_array+0x40>)
 801631e:	4c0c      	ldr	r4, [pc, #48]	; (8016350 <__libc_init_array+0x44>)
 8016320:	f000 fa36 	bl	8016790 <_init>
 8016324:	1b64      	subs	r4, r4, r5
 8016326:	10a4      	asrs	r4, r4, #2
 8016328:	2600      	movs	r6, #0
 801632a:	42a6      	cmp	r6, r4
 801632c:	d105      	bne.n	801633a <__libc_init_array+0x2e>
 801632e:	bd70      	pop	{r4, r5, r6, pc}
 8016330:	f855 3b04 	ldr.w	r3, [r5], #4
 8016334:	4798      	blx	r3
 8016336:	3601      	adds	r6, #1
 8016338:	e7ee      	b.n	8016318 <__libc_init_array+0xc>
 801633a:	f855 3b04 	ldr.w	r3, [r5], #4
 801633e:	4798      	blx	r3
 8016340:	3601      	adds	r6, #1
 8016342:	e7f2      	b.n	801632a <__libc_init_array+0x1e>
 8016344:	0802abac 	.word	0x0802abac
 8016348:	0802abac 	.word	0x0802abac
 801634c:	0802abac 	.word	0x0802abac
 8016350:	0802abb4 	.word	0x0802abb4

08016354 <malloc>:
 8016354:	4b02      	ldr	r3, [pc, #8]	; (8016360 <malloc+0xc>)
 8016356:	4601      	mov	r1, r0
 8016358:	6818      	ldr	r0, [r3, #0]
 801635a:	f000 b8a7 	b.w	80164ac <_malloc_r>
 801635e:	bf00      	nop
 8016360:	20000018 	.word	0x20000018

08016364 <free>:
 8016364:	4b02      	ldr	r3, [pc, #8]	; (8016370 <free+0xc>)
 8016366:	4601      	mov	r1, r0
 8016368:	6818      	ldr	r0, [r3, #0]
 801636a:	f000 b833 	b.w	80163d4 <_free_r>
 801636e:	bf00      	nop
 8016370:	20000018 	.word	0x20000018

08016374 <memcpy>:
 8016374:	440a      	add	r2, r1
 8016376:	4291      	cmp	r1, r2
 8016378:	f100 33ff 	add.w	r3, r0, #4294967295
 801637c:	d100      	bne.n	8016380 <memcpy+0xc>
 801637e:	4770      	bx	lr
 8016380:	b510      	push	{r4, lr}
 8016382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016386:	f803 4f01 	strb.w	r4, [r3, #1]!
 801638a:	4291      	cmp	r1, r2
 801638c:	d1f9      	bne.n	8016382 <memcpy+0xe>
 801638e:	bd10      	pop	{r4, pc}

08016390 <memmove>:
 8016390:	4288      	cmp	r0, r1
 8016392:	b510      	push	{r4, lr}
 8016394:	eb01 0402 	add.w	r4, r1, r2
 8016398:	d902      	bls.n	80163a0 <memmove+0x10>
 801639a:	4284      	cmp	r4, r0
 801639c:	4623      	mov	r3, r4
 801639e:	d807      	bhi.n	80163b0 <memmove+0x20>
 80163a0:	1e43      	subs	r3, r0, #1
 80163a2:	42a1      	cmp	r1, r4
 80163a4:	d008      	beq.n	80163b8 <memmove+0x28>
 80163a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80163aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80163ae:	e7f8      	b.n	80163a2 <memmove+0x12>
 80163b0:	4402      	add	r2, r0
 80163b2:	4601      	mov	r1, r0
 80163b4:	428a      	cmp	r2, r1
 80163b6:	d100      	bne.n	80163ba <memmove+0x2a>
 80163b8:	bd10      	pop	{r4, pc}
 80163ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80163be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80163c2:	e7f7      	b.n	80163b4 <memmove+0x24>

080163c4 <memset>:
 80163c4:	4402      	add	r2, r0
 80163c6:	4603      	mov	r3, r0
 80163c8:	4293      	cmp	r3, r2
 80163ca:	d100      	bne.n	80163ce <memset+0xa>
 80163cc:	4770      	bx	lr
 80163ce:	f803 1b01 	strb.w	r1, [r3], #1
 80163d2:	e7f9      	b.n	80163c8 <memset+0x4>

080163d4 <_free_r>:
 80163d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80163d6:	2900      	cmp	r1, #0
 80163d8:	d044      	beq.n	8016464 <_free_r+0x90>
 80163da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80163de:	9001      	str	r0, [sp, #4]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	f1a1 0404 	sub.w	r4, r1, #4
 80163e6:	bfb8      	it	lt
 80163e8:	18e4      	addlt	r4, r4, r3
 80163ea:	f000 f9c3 	bl	8016774 <__malloc_lock>
 80163ee:	4a1e      	ldr	r2, [pc, #120]	; (8016468 <_free_r+0x94>)
 80163f0:	9801      	ldr	r0, [sp, #4]
 80163f2:	6813      	ldr	r3, [r2, #0]
 80163f4:	b933      	cbnz	r3, 8016404 <_free_r+0x30>
 80163f6:	6063      	str	r3, [r4, #4]
 80163f8:	6014      	str	r4, [r2, #0]
 80163fa:	b003      	add	sp, #12
 80163fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016400:	f000 b9be 	b.w	8016780 <__malloc_unlock>
 8016404:	42a3      	cmp	r3, r4
 8016406:	d908      	bls.n	801641a <_free_r+0x46>
 8016408:	6825      	ldr	r5, [r4, #0]
 801640a:	1961      	adds	r1, r4, r5
 801640c:	428b      	cmp	r3, r1
 801640e:	bf01      	itttt	eq
 8016410:	6819      	ldreq	r1, [r3, #0]
 8016412:	685b      	ldreq	r3, [r3, #4]
 8016414:	1949      	addeq	r1, r1, r5
 8016416:	6021      	streq	r1, [r4, #0]
 8016418:	e7ed      	b.n	80163f6 <_free_r+0x22>
 801641a:	461a      	mov	r2, r3
 801641c:	685b      	ldr	r3, [r3, #4]
 801641e:	b10b      	cbz	r3, 8016424 <_free_r+0x50>
 8016420:	42a3      	cmp	r3, r4
 8016422:	d9fa      	bls.n	801641a <_free_r+0x46>
 8016424:	6811      	ldr	r1, [r2, #0]
 8016426:	1855      	adds	r5, r2, r1
 8016428:	42a5      	cmp	r5, r4
 801642a:	d10b      	bne.n	8016444 <_free_r+0x70>
 801642c:	6824      	ldr	r4, [r4, #0]
 801642e:	4421      	add	r1, r4
 8016430:	1854      	adds	r4, r2, r1
 8016432:	42a3      	cmp	r3, r4
 8016434:	6011      	str	r1, [r2, #0]
 8016436:	d1e0      	bne.n	80163fa <_free_r+0x26>
 8016438:	681c      	ldr	r4, [r3, #0]
 801643a:	685b      	ldr	r3, [r3, #4]
 801643c:	6053      	str	r3, [r2, #4]
 801643e:	4421      	add	r1, r4
 8016440:	6011      	str	r1, [r2, #0]
 8016442:	e7da      	b.n	80163fa <_free_r+0x26>
 8016444:	d902      	bls.n	801644c <_free_r+0x78>
 8016446:	230c      	movs	r3, #12
 8016448:	6003      	str	r3, [r0, #0]
 801644a:	e7d6      	b.n	80163fa <_free_r+0x26>
 801644c:	6825      	ldr	r5, [r4, #0]
 801644e:	1961      	adds	r1, r4, r5
 8016450:	428b      	cmp	r3, r1
 8016452:	bf04      	itt	eq
 8016454:	6819      	ldreq	r1, [r3, #0]
 8016456:	685b      	ldreq	r3, [r3, #4]
 8016458:	6063      	str	r3, [r4, #4]
 801645a:	bf04      	itt	eq
 801645c:	1949      	addeq	r1, r1, r5
 801645e:	6021      	streq	r1, [r4, #0]
 8016460:	6054      	str	r4, [r2, #4]
 8016462:	e7ca      	b.n	80163fa <_free_r+0x26>
 8016464:	b003      	add	sp, #12
 8016466:	bd30      	pop	{r4, r5, pc}
 8016468:	2000d7d4 	.word	0x2000d7d4

0801646c <sbrk_aligned>:
 801646c:	b570      	push	{r4, r5, r6, lr}
 801646e:	4e0e      	ldr	r6, [pc, #56]	; (80164a8 <sbrk_aligned+0x3c>)
 8016470:	460c      	mov	r4, r1
 8016472:	6831      	ldr	r1, [r6, #0]
 8016474:	4605      	mov	r5, r0
 8016476:	b911      	cbnz	r1, 801647e <sbrk_aligned+0x12>
 8016478:	f000 f88c 	bl	8016594 <_sbrk_r>
 801647c:	6030      	str	r0, [r6, #0]
 801647e:	4621      	mov	r1, r4
 8016480:	4628      	mov	r0, r5
 8016482:	f000 f887 	bl	8016594 <_sbrk_r>
 8016486:	1c43      	adds	r3, r0, #1
 8016488:	d00a      	beq.n	80164a0 <sbrk_aligned+0x34>
 801648a:	1cc4      	adds	r4, r0, #3
 801648c:	f024 0403 	bic.w	r4, r4, #3
 8016490:	42a0      	cmp	r0, r4
 8016492:	d007      	beq.n	80164a4 <sbrk_aligned+0x38>
 8016494:	1a21      	subs	r1, r4, r0
 8016496:	4628      	mov	r0, r5
 8016498:	f000 f87c 	bl	8016594 <_sbrk_r>
 801649c:	3001      	adds	r0, #1
 801649e:	d101      	bne.n	80164a4 <sbrk_aligned+0x38>
 80164a0:	f04f 34ff 	mov.w	r4, #4294967295
 80164a4:	4620      	mov	r0, r4
 80164a6:	bd70      	pop	{r4, r5, r6, pc}
 80164a8:	2000d7d8 	.word	0x2000d7d8

080164ac <_malloc_r>:
 80164ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164b0:	1ccd      	adds	r5, r1, #3
 80164b2:	f025 0503 	bic.w	r5, r5, #3
 80164b6:	3508      	adds	r5, #8
 80164b8:	2d0c      	cmp	r5, #12
 80164ba:	bf38      	it	cc
 80164bc:	250c      	movcc	r5, #12
 80164be:	2d00      	cmp	r5, #0
 80164c0:	4607      	mov	r7, r0
 80164c2:	db01      	blt.n	80164c8 <_malloc_r+0x1c>
 80164c4:	42a9      	cmp	r1, r5
 80164c6:	d905      	bls.n	80164d4 <_malloc_r+0x28>
 80164c8:	230c      	movs	r3, #12
 80164ca:	603b      	str	r3, [r7, #0]
 80164cc:	2600      	movs	r6, #0
 80164ce:	4630      	mov	r0, r6
 80164d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164d4:	4e2e      	ldr	r6, [pc, #184]	; (8016590 <_malloc_r+0xe4>)
 80164d6:	f000 f94d 	bl	8016774 <__malloc_lock>
 80164da:	6833      	ldr	r3, [r6, #0]
 80164dc:	461c      	mov	r4, r3
 80164de:	bb34      	cbnz	r4, 801652e <_malloc_r+0x82>
 80164e0:	4629      	mov	r1, r5
 80164e2:	4638      	mov	r0, r7
 80164e4:	f7ff ffc2 	bl	801646c <sbrk_aligned>
 80164e8:	1c43      	adds	r3, r0, #1
 80164ea:	4604      	mov	r4, r0
 80164ec:	d14d      	bne.n	801658a <_malloc_r+0xde>
 80164ee:	6834      	ldr	r4, [r6, #0]
 80164f0:	4626      	mov	r6, r4
 80164f2:	2e00      	cmp	r6, #0
 80164f4:	d140      	bne.n	8016578 <_malloc_r+0xcc>
 80164f6:	6823      	ldr	r3, [r4, #0]
 80164f8:	4631      	mov	r1, r6
 80164fa:	4638      	mov	r0, r7
 80164fc:	eb04 0803 	add.w	r8, r4, r3
 8016500:	f000 f848 	bl	8016594 <_sbrk_r>
 8016504:	4580      	cmp	r8, r0
 8016506:	d13a      	bne.n	801657e <_malloc_r+0xd2>
 8016508:	6821      	ldr	r1, [r4, #0]
 801650a:	3503      	adds	r5, #3
 801650c:	1a6d      	subs	r5, r5, r1
 801650e:	f025 0503 	bic.w	r5, r5, #3
 8016512:	3508      	adds	r5, #8
 8016514:	2d0c      	cmp	r5, #12
 8016516:	bf38      	it	cc
 8016518:	250c      	movcc	r5, #12
 801651a:	4629      	mov	r1, r5
 801651c:	4638      	mov	r0, r7
 801651e:	f7ff ffa5 	bl	801646c <sbrk_aligned>
 8016522:	3001      	adds	r0, #1
 8016524:	d02b      	beq.n	801657e <_malloc_r+0xd2>
 8016526:	6823      	ldr	r3, [r4, #0]
 8016528:	442b      	add	r3, r5
 801652a:	6023      	str	r3, [r4, #0]
 801652c:	e00e      	b.n	801654c <_malloc_r+0xa0>
 801652e:	6822      	ldr	r2, [r4, #0]
 8016530:	1b52      	subs	r2, r2, r5
 8016532:	d41e      	bmi.n	8016572 <_malloc_r+0xc6>
 8016534:	2a0b      	cmp	r2, #11
 8016536:	d916      	bls.n	8016566 <_malloc_r+0xba>
 8016538:	1961      	adds	r1, r4, r5
 801653a:	42a3      	cmp	r3, r4
 801653c:	6025      	str	r5, [r4, #0]
 801653e:	bf18      	it	ne
 8016540:	6059      	strne	r1, [r3, #4]
 8016542:	6863      	ldr	r3, [r4, #4]
 8016544:	bf08      	it	eq
 8016546:	6031      	streq	r1, [r6, #0]
 8016548:	5162      	str	r2, [r4, r5]
 801654a:	604b      	str	r3, [r1, #4]
 801654c:	4638      	mov	r0, r7
 801654e:	f104 060b 	add.w	r6, r4, #11
 8016552:	f000 f915 	bl	8016780 <__malloc_unlock>
 8016556:	f026 0607 	bic.w	r6, r6, #7
 801655a:	1d23      	adds	r3, r4, #4
 801655c:	1af2      	subs	r2, r6, r3
 801655e:	d0b6      	beq.n	80164ce <_malloc_r+0x22>
 8016560:	1b9b      	subs	r3, r3, r6
 8016562:	50a3      	str	r3, [r4, r2]
 8016564:	e7b3      	b.n	80164ce <_malloc_r+0x22>
 8016566:	6862      	ldr	r2, [r4, #4]
 8016568:	42a3      	cmp	r3, r4
 801656a:	bf0c      	ite	eq
 801656c:	6032      	streq	r2, [r6, #0]
 801656e:	605a      	strne	r2, [r3, #4]
 8016570:	e7ec      	b.n	801654c <_malloc_r+0xa0>
 8016572:	4623      	mov	r3, r4
 8016574:	6864      	ldr	r4, [r4, #4]
 8016576:	e7b2      	b.n	80164de <_malloc_r+0x32>
 8016578:	4634      	mov	r4, r6
 801657a:	6876      	ldr	r6, [r6, #4]
 801657c:	e7b9      	b.n	80164f2 <_malloc_r+0x46>
 801657e:	230c      	movs	r3, #12
 8016580:	603b      	str	r3, [r7, #0]
 8016582:	4638      	mov	r0, r7
 8016584:	f000 f8fc 	bl	8016780 <__malloc_unlock>
 8016588:	e7a1      	b.n	80164ce <_malloc_r+0x22>
 801658a:	6025      	str	r5, [r4, #0]
 801658c:	e7de      	b.n	801654c <_malloc_r+0xa0>
 801658e:	bf00      	nop
 8016590:	2000d7d4 	.word	0x2000d7d4

08016594 <_sbrk_r>:
 8016594:	b538      	push	{r3, r4, r5, lr}
 8016596:	4d06      	ldr	r5, [pc, #24]	; (80165b0 <_sbrk_r+0x1c>)
 8016598:	2300      	movs	r3, #0
 801659a:	4604      	mov	r4, r0
 801659c:	4608      	mov	r0, r1
 801659e:	602b      	str	r3, [r5, #0]
 80165a0:	f7ed fab4 	bl	8003b0c <_sbrk>
 80165a4:	1c43      	adds	r3, r0, #1
 80165a6:	d102      	bne.n	80165ae <_sbrk_r+0x1a>
 80165a8:	682b      	ldr	r3, [r5, #0]
 80165aa:	b103      	cbz	r3, 80165ae <_sbrk_r+0x1a>
 80165ac:	6023      	str	r3, [r4, #0]
 80165ae:	bd38      	pop	{r3, r4, r5, pc}
 80165b0:	2000d7dc 	.word	0x2000d7dc

080165b4 <_raise_r>:
 80165b4:	291f      	cmp	r1, #31
 80165b6:	b538      	push	{r3, r4, r5, lr}
 80165b8:	4604      	mov	r4, r0
 80165ba:	460d      	mov	r5, r1
 80165bc:	d904      	bls.n	80165c8 <_raise_r+0x14>
 80165be:	2316      	movs	r3, #22
 80165c0:	6003      	str	r3, [r0, #0]
 80165c2:	f04f 30ff 	mov.w	r0, #4294967295
 80165c6:	bd38      	pop	{r3, r4, r5, pc}
 80165c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80165ca:	b112      	cbz	r2, 80165d2 <_raise_r+0x1e>
 80165cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80165d0:	b94b      	cbnz	r3, 80165e6 <_raise_r+0x32>
 80165d2:	4620      	mov	r0, r4
 80165d4:	f000 f830 	bl	8016638 <_getpid_r>
 80165d8:	462a      	mov	r2, r5
 80165da:	4601      	mov	r1, r0
 80165dc:	4620      	mov	r0, r4
 80165de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80165e2:	f000 b817 	b.w	8016614 <_kill_r>
 80165e6:	2b01      	cmp	r3, #1
 80165e8:	d00a      	beq.n	8016600 <_raise_r+0x4c>
 80165ea:	1c59      	adds	r1, r3, #1
 80165ec:	d103      	bne.n	80165f6 <_raise_r+0x42>
 80165ee:	2316      	movs	r3, #22
 80165f0:	6003      	str	r3, [r0, #0]
 80165f2:	2001      	movs	r0, #1
 80165f4:	e7e7      	b.n	80165c6 <_raise_r+0x12>
 80165f6:	2400      	movs	r4, #0
 80165f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80165fc:	4628      	mov	r0, r5
 80165fe:	4798      	blx	r3
 8016600:	2000      	movs	r0, #0
 8016602:	e7e0      	b.n	80165c6 <_raise_r+0x12>

08016604 <raise>:
 8016604:	4b02      	ldr	r3, [pc, #8]	; (8016610 <raise+0xc>)
 8016606:	4601      	mov	r1, r0
 8016608:	6818      	ldr	r0, [r3, #0]
 801660a:	f7ff bfd3 	b.w	80165b4 <_raise_r>
 801660e:	bf00      	nop
 8016610:	20000018 	.word	0x20000018

08016614 <_kill_r>:
 8016614:	b538      	push	{r3, r4, r5, lr}
 8016616:	4d07      	ldr	r5, [pc, #28]	; (8016634 <_kill_r+0x20>)
 8016618:	2300      	movs	r3, #0
 801661a:	4604      	mov	r4, r0
 801661c:	4608      	mov	r0, r1
 801661e:	4611      	mov	r1, r2
 8016620:	602b      	str	r3, [r5, #0]
 8016622:	f7ed fa59 	bl	8003ad8 <_kill>
 8016626:	1c43      	adds	r3, r0, #1
 8016628:	d102      	bne.n	8016630 <_kill_r+0x1c>
 801662a:	682b      	ldr	r3, [r5, #0]
 801662c:	b103      	cbz	r3, 8016630 <_kill_r+0x1c>
 801662e:	6023      	str	r3, [r4, #0]
 8016630:	bd38      	pop	{r3, r4, r5, pc}
 8016632:	bf00      	nop
 8016634:	2000d7dc 	.word	0x2000d7dc

08016638 <_getpid_r>:
 8016638:	f7ed ba46 	b.w	8003ac8 <_getpid>

0801663c <strcat>:
 801663c:	b510      	push	{r4, lr}
 801663e:	4602      	mov	r2, r0
 8016640:	7814      	ldrb	r4, [r2, #0]
 8016642:	4613      	mov	r3, r2
 8016644:	3201      	adds	r2, #1
 8016646:	2c00      	cmp	r4, #0
 8016648:	d1fa      	bne.n	8016640 <strcat+0x4>
 801664a:	3b01      	subs	r3, #1
 801664c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016650:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016654:	2a00      	cmp	r2, #0
 8016656:	d1f9      	bne.n	801664c <strcat+0x10>
 8016658:	bd10      	pop	{r4, pc}
	...

0801665c <_strtol_l.constprop.0>:
 801665c:	2b01      	cmp	r3, #1
 801665e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016662:	d001      	beq.n	8016668 <_strtol_l.constprop.0+0xc>
 8016664:	2b24      	cmp	r3, #36	; 0x24
 8016666:	d906      	bls.n	8016676 <_strtol_l.constprop.0+0x1a>
 8016668:	f7ff fe4a 	bl	8016300 <__errno>
 801666c:	2316      	movs	r3, #22
 801666e:	6003      	str	r3, [r0, #0]
 8016670:	2000      	movs	r0, #0
 8016672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016676:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801675c <_strtol_l.constprop.0+0x100>
 801667a:	460d      	mov	r5, r1
 801667c:	462e      	mov	r6, r5
 801667e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016682:	f814 700c 	ldrb.w	r7, [r4, ip]
 8016686:	f017 0708 	ands.w	r7, r7, #8
 801668a:	d1f7      	bne.n	801667c <_strtol_l.constprop.0+0x20>
 801668c:	2c2d      	cmp	r4, #45	; 0x2d
 801668e:	d132      	bne.n	80166f6 <_strtol_l.constprop.0+0x9a>
 8016690:	782c      	ldrb	r4, [r5, #0]
 8016692:	2701      	movs	r7, #1
 8016694:	1cb5      	adds	r5, r6, #2
 8016696:	2b00      	cmp	r3, #0
 8016698:	d05b      	beq.n	8016752 <_strtol_l.constprop.0+0xf6>
 801669a:	2b10      	cmp	r3, #16
 801669c:	d109      	bne.n	80166b2 <_strtol_l.constprop.0+0x56>
 801669e:	2c30      	cmp	r4, #48	; 0x30
 80166a0:	d107      	bne.n	80166b2 <_strtol_l.constprop.0+0x56>
 80166a2:	782c      	ldrb	r4, [r5, #0]
 80166a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80166a8:	2c58      	cmp	r4, #88	; 0x58
 80166aa:	d14d      	bne.n	8016748 <_strtol_l.constprop.0+0xec>
 80166ac:	786c      	ldrb	r4, [r5, #1]
 80166ae:	2310      	movs	r3, #16
 80166b0:	3502      	adds	r5, #2
 80166b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80166b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80166ba:	f04f 0c00 	mov.w	ip, #0
 80166be:	fbb8 f9f3 	udiv	r9, r8, r3
 80166c2:	4666      	mov	r6, ip
 80166c4:	fb03 8a19 	mls	sl, r3, r9, r8
 80166c8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80166cc:	f1be 0f09 	cmp.w	lr, #9
 80166d0:	d816      	bhi.n	8016700 <_strtol_l.constprop.0+0xa4>
 80166d2:	4674      	mov	r4, lr
 80166d4:	42a3      	cmp	r3, r4
 80166d6:	dd24      	ble.n	8016722 <_strtol_l.constprop.0+0xc6>
 80166d8:	f1bc 0f00 	cmp.w	ip, #0
 80166dc:	db1e      	blt.n	801671c <_strtol_l.constprop.0+0xc0>
 80166de:	45b1      	cmp	r9, r6
 80166e0:	d31c      	bcc.n	801671c <_strtol_l.constprop.0+0xc0>
 80166e2:	d101      	bne.n	80166e8 <_strtol_l.constprop.0+0x8c>
 80166e4:	45a2      	cmp	sl, r4
 80166e6:	db19      	blt.n	801671c <_strtol_l.constprop.0+0xc0>
 80166e8:	fb06 4603 	mla	r6, r6, r3, r4
 80166ec:	f04f 0c01 	mov.w	ip, #1
 80166f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80166f4:	e7e8      	b.n	80166c8 <_strtol_l.constprop.0+0x6c>
 80166f6:	2c2b      	cmp	r4, #43	; 0x2b
 80166f8:	bf04      	itt	eq
 80166fa:	782c      	ldrbeq	r4, [r5, #0]
 80166fc:	1cb5      	addeq	r5, r6, #2
 80166fe:	e7ca      	b.n	8016696 <_strtol_l.constprop.0+0x3a>
 8016700:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8016704:	f1be 0f19 	cmp.w	lr, #25
 8016708:	d801      	bhi.n	801670e <_strtol_l.constprop.0+0xb2>
 801670a:	3c37      	subs	r4, #55	; 0x37
 801670c:	e7e2      	b.n	80166d4 <_strtol_l.constprop.0+0x78>
 801670e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8016712:	f1be 0f19 	cmp.w	lr, #25
 8016716:	d804      	bhi.n	8016722 <_strtol_l.constprop.0+0xc6>
 8016718:	3c57      	subs	r4, #87	; 0x57
 801671a:	e7db      	b.n	80166d4 <_strtol_l.constprop.0+0x78>
 801671c:	f04f 3cff 	mov.w	ip, #4294967295
 8016720:	e7e6      	b.n	80166f0 <_strtol_l.constprop.0+0x94>
 8016722:	f1bc 0f00 	cmp.w	ip, #0
 8016726:	da05      	bge.n	8016734 <_strtol_l.constprop.0+0xd8>
 8016728:	2322      	movs	r3, #34	; 0x22
 801672a:	6003      	str	r3, [r0, #0]
 801672c:	4646      	mov	r6, r8
 801672e:	b942      	cbnz	r2, 8016742 <_strtol_l.constprop.0+0xe6>
 8016730:	4630      	mov	r0, r6
 8016732:	e79e      	b.n	8016672 <_strtol_l.constprop.0+0x16>
 8016734:	b107      	cbz	r7, 8016738 <_strtol_l.constprop.0+0xdc>
 8016736:	4276      	negs	r6, r6
 8016738:	2a00      	cmp	r2, #0
 801673a:	d0f9      	beq.n	8016730 <_strtol_l.constprop.0+0xd4>
 801673c:	f1bc 0f00 	cmp.w	ip, #0
 8016740:	d000      	beq.n	8016744 <_strtol_l.constprop.0+0xe8>
 8016742:	1e69      	subs	r1, r5, #1
 8016744:	6011      	str	r1, [r2, #0]
 8016746:	e7f3      	b.n	8016730 <_strtol_l.constprop.0+0xd4>
 8016748:	2430      	movs	r4, #48	; 0x30
 801674a:	2b00      	cmp	r3, #0
 801674c:	d1b1      	bne.n	80166b2 <_strtol_l.constprop.0+0x56>
 801674e:	2308      	movs	r3, #8
 8016750:	e7af      	b.n	80166b2 <_strtol_l.constprop.0+0x56>
 8016752:	2c30      	cmp	r4, #48	; 0x30
 8016754:	d0a5      	beq.n	80166a2 <_strtol_l.constprop.0+0x46>
 8016756:	230a      	movs	r3, #10
 8016758:	e7ab      	b.n	80166b2 <_strtol_l.constprop.0+0x56>
 801675a:	bf00      	nop
 801675c:	0802aaa1 	.word	0x0802aaa1

08016760 <strtol>:
 8016760:	4613      	mov	r3, r2
 8016762:	460a      	mov	r2, r1
 8016764:	4601      	mov	r1, r0
 8016766:	4802      	ldr	r0, [pc, #8]	; (8016770 <strtol+0x10>)
 8016768:	6800      	ldr	r0, [r0, #0]
 801676a:	f7ff bf77 	b.w	801665c <_strtol_l.constprop.0>
 801676e:	bf00      	nop
 8016770:	20000018 	.word	0x20000018

08016774 <__malloc_lock>:
 8016774:	4801      	ldr	r0, [pc, #4]	; (801677c <__malloc_lock+0x8>)
 8016776:	f000 b809 	b.w	801678c <__retarget_lock_acquire_recursive>
 801677a:	bf00      	nop
 801677c:	2000d7e0 	.word	0x2000d7e0

08016780 <__malloc_unlock>:
 8016780:	4801      	ldr	r0, [pc, #4]	; (8016788 <__malloc_unlock+0x8>)
 8016782:	f000 b804 	b.w	801678e <__retarget_lock_release_recursive>
 8016786:	bf00      	nop
 8016788:	2000d7e0 	.word	0x2000d7e0

0801678c <__retarget_lock_acquire_recursive>:
 801678c:	4770      	bx	lr

0801678e <__retarget_lock_release_recursive>:
 801678e:	4770      	bx	lr

08016790 <_init>:
 8016790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016792:	bf00      	nop
 8016794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016796:	bc08      	pop	{r3}
 8016798:	469e      	mov	lr, r3
 801679a:	4770      	bx	lr

0801679c <_fini>:
 801679c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801679e:	bf00      	nop
 80167a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167a2:	bc08      	pop	{r3}
 80167a4:	469e      	mov	lr, r3
 80167a6:	4770      	bx	lr
