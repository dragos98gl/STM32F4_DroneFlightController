
flightController_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a358  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014464  0801a4e8  0801a4e8  0002a4e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e94c  0802e94c  00040194  2**0
                  CONTENTS
  4 .ARM          00000008  0802e94c  0802e94c  0003e94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802e954  0802e954  00040194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802e954  0802e954  0003e954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802e95c  0802e95c  0003e95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0802e960  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040194  2**0
                  CONTENTS
 10 .bss          0000debc  20000194  20000194  00040194  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000e050  2000e050  00040194  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040194  2**0
                  CONTENTS, READONLY
 13 .debug_info   000b05db  00000000  00000000  000401c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000d5d8  00000000  00000000  000f079f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000031b0  00000000  00000000  000fdd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002e60  00000000  00000000  00100f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032d66  00000000  00000000  00103d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003ebc2  00000000  00000000  00136aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00104648  00000000  00000000  001756b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c0  00000000  00000000  00279cf8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000f4cc  00000000  00000000  00279db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000070f  00000000  00000000  00289284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000194 	.word	0x20000194
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a4d0 	.word	0x0801a4d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000198 	.word	0x20000198
 80001cc:	0801a4d0 	.word	0x0801a4d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <_ZN30FlightControllorImplementation18getRollPidInstanceEv>:
{
	return this->nvmInstance;
}

PID_Control& FlightControllorImplementation::getRollPidInstance()
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	return this->roll_pid;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_ZN30FlightControllorImplementation19getPitchPidInstanceEv>:

PID_Control& FlightControllorImplementation::getPitchPidInstance()
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
	return this->pitch_pid;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f603 335c 	addw	r3, r3, #2908	; 0xb5c
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_ZN30FlightControllorImplementation17getYawPidInstanceEv>:

PID_Control& FlightControllorImplementation::getYawPidInstance()
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	return this->yaw_pid;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f603 3388 	addw	r3, r3, #2952	; 0xb88
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <_ZN30FlightControllorImplementation23getXPositionPidInstanceEv>:

PID_Control& FlightControllorImplementation::getXPositionPidInstance()
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
	return this->xPosition_pid;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f603 33b4 	addw	r3, r3, #2996	; 0xbb4
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <_ZN30FlightControllorImplementation23getYPositionPidInstanceEv>:

PID_Control& FlightControllorImplementation::getYPositionPidInstance()
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	return this->yPosition_pid;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>:

LIS3MDLTR& FlightControllorImplementation::getLIS3MDLTRinstance()
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
	return this->lis;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	33a0      	adds	r3, #160	; 0xa0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <_ZN30FlightControllorImplementation17getBuzzerinstanceEv>:

Buzzer& FlightControllorImplementation::getBuzzerinstance()
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
	return this->buzz;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3388      	adds	r3, #136	; 0x88
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <_ZN30FlightControllorImplementation17getBMP390instanceEv>:

BMP390& FlightControllorImplementation::getBMP390instance()
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
	return this->bmp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f503 7388 	add.w	r3, r3, #272	; 0x110
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>:

ICM42688P& FlightControllorImplementation::getICM42688Pinstance()
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	return this->icm;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <_ZN30FlightControllorImplementation15getHC05instanceEv>:

HC05& FlightControllorImplementation::getHC05instance()
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
	return this->bt;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f503 7304 	add.w	r3, r3, #528	; 0x210
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>:

PMW3901UY& FlightControllorImplementation::getPMW3901UYinstance()
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	return this->pmw;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f603 5308 	addw	r3, r3, #3336	; 0xd08
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>:

FrSkyRX& FlightControllorImplementation::getFrSkyRXinstance()
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
	return this->remote_rx;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <_ZN30FlightControllorImplementation17getMB1043instanceEv>:

MB1043& FlightControllorImplementation::getMB1043instance()
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	return this->sonar;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f503 735e 	add.w	r3, r3, #888	; 0x378
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>:

VL53L0X& FlightControllorImplementation::getVL53L0Xinstance()
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
	return this->vl53;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <_ZN30FlightControllorImplementation28getBatteryManagementinstanceEv>:

BatteryManagement& FlightControllorImplementation::getBatteryManagementinstance()
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	return this->battMgmt;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f603 3308 	addw	r3, r3, #2824	; 0xb08
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_ZN30FlightControllorImplementation24getFaultsCheckHandlerPtrEv>:

TaskHandle_t* FlightControllorImplementation::getFaultsCheckHandlerPtr()
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	return &this->_faultsCheckHandler;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f603 53b4 	addw	r3, r3, #3508	; 0xdb4
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>:

TaskHandle_t* FlightControllorImplementation::getSensorsDataReadHandlerPtr()
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	return &this->_sensorsDataReadHandler;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f603 53b8 	addw	r3, r3, #3512	; 0xdb8
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_ZN30FlightControllorImplementation28getDynamicsProcessHandlerPtrEv>:

TaskHandle_t* FlightControllorImplementation::getDynamicsProcessHandlerPtr()
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
	return &this->_dynamicsProcessHandler;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f603 53bc 	addw	r3, r3, #3516	; 0xdbc
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>:

FaultsStatus FlightControllorImplementation::getCurrentFaultsStatus() const
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	return this->_currentFaultsStatus;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f8d3 3db0 	ldr.w	r3, [r3, #3504]	; 0xdb0
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>:

void FlightControllorImplementation::setCurrentFaultsStatus(FaultsStatus faultsStatus)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	6039      	str	r1, [r7, #0]
	this->_currentFaultsStatus = faultsStatus;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	f8c3 2db0 	str.w	r2, [r3, #3504]	; 0xdb0
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <_ZN6BuzzerC1Ev>:

	void Buzz_on();
	void Buzz_off();
	uint16_t msToTick(uint16_t ms);
public:
	Buzzer():
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
		freqTick {0U}
		,pauseTick {0U}
		,counterStart {0U}
		,counterEnd {0U}
		,repetitions {0U}
		,busy {false}
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2210      	movs	r2, #16
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <_ZN6BuzzerC1Ev+0x50>)
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	819a      	strh	r2, [r3, #12]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	81da      	strh	r2, [r3, #14]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	821a      	strh	r2, [r3, #16]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	825a      	strh	r2, [r3, #18]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	829a      	strh	r2, [r3, #20]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	759a      	strb	r2, [r3, #22]
	{
	}
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40020000 	.word	0x40020000

08001108 <_ZN11PID_ControlC1ERfS0_fff>:
	float pid_p = 0;
	float pid_i = 0;
	float pid_d = 0;
	float pid = 0;
public:
	PID_Control(float &signal, float &reference,float Kp,float Ki,float Kd):
 8001108:	b480      	push	{r7}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6178      	str	r0, [r7, #20]
 8001110:	6139      	str	r1, [r7, #16]
 8001112:	60fa      	str	r2, [r7, #12]
 8001114:	ed87 0a02 	vstr	s0, [r7, #8]
 8001118:	edc7 0a01 	vstr	s1, [r7, #4]
 800111c:	ed87 1a00 	vstr	s2, [r7]
	,error {0.0F}
	,last_signal {0.0F}
	,pid_p {0.0F}
	,pid_i {0.0F}
	,pid_d {0.0F}
	,pid {0.0F}
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	611a      	str	r2, [r3, #16]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	629a      	str	r2, [r3, #40]	; 0x28
	{
		last_signal = signal;
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	619a      	str	r2, [r3, #24]
	};
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	4618      	mov	r0, r3
 800117a:	371c      	adds	r7, #28
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <_ZN17BatteryManagementC1EP17ADC_HandleTypeDefP6Buzzert>:
	float batteryVoltage;

	uint16_t msToTick(uint16_t ms);
	void toPercentage();
public:
	BatteryManagement(ADC_HandleTypeDef *adc_port,Buzzer *buzz,uint16_t frequency_ms):
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	807b      	strh	r3, [r7, #2]
		,buzz(buzz)
		,frequency_tick{0}
		,tick_counter{0}
		,batteryVal{0}
		,batteryPercentage{0}
		,batteryVoltage{0}
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f640 3222 	movw	r2, #2850	; 0xb22
 8001198:	801a      	strh	r2, [r3, #0]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80011a0:	805a      	strh	r2, [r3, #2]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80011a8:	809a      	strh	r2, [r3, #4]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	611a      	str	r2, [r3, #16]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2200      	movs	r2, #0
 80011c2:	829a      	strh	r2, [r3, #20]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2200      	movs	r2, #0
 80011ce:	61da      	str	r2, [r3, #28]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
	{
		frequency_tick = msToTick(frequency_ms);
 80011e0:	887b      	ldrh	r3, [r7, #2]
 80011e2:	4619      	mov	r1, r3
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f003 ffbb 	bl	8005160 <_ZN17BatteryManagement8msToTickEt>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	829a      	strh	r2, [r3, #20]
	}
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <_ZN16FlashMemoryBlockC1Em>:
};

class FlashMemoryBlock
{
public:
	FlashMemoryBlock(uint32_t address):
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
		PID_PITCH_I{address},
		PID_PITCH_D{address},
		PID_YAW_P{address},
		PID_YAW_I{address},
		PID_YAW_D{address},
		address{address}
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	463a      	mov	r2, r7
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f000 faa5 	bl	800175c <_ZN10memoryDataI6intObjEC1ERm>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3308      	adds	r3, #8
 8001216:	463a      	mov	r2, r7
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fa9e 	bl	800175c <_ZN10memoryDataI6intObjEC1ERm>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3310      	adds	r3, #16
 8001224:	463a      	mov	r2, r7
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f000 faac 	bl	8001786 <_ZN10memoryDataI8floatObjEC1ERm>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3318      	adds	r3, #24
 8001232:	463a      	mov	r2, r7
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f000 faa5 	bl	8001786 <_ZN10memoryDataI8floatObjEC1ERm>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3320      	adds	r3, #32
 8001240:	463a      	mov	r2, r7
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fa9e 	bl	8001786 <_ZN10memoryDataI8floatObjEC1ERm>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3328      	adds	r3, #40	; 0x28
 800124e:	463a      	mov	r2, r7
 8001250:	4611      	mov	r1, r2
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fa97 	bl	8001786 <_ZN10memoryDataI8floatObjEC1ERm>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3330      	adds	r3, #48	; 0x30
 800125c:	463a      	mov	r2, r7
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fa90 	bl	8001786 <_ZN10memoryDataI8floatObjEC1ERm>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3338      	adds	r3, #56	; 0x38
 800126a:	463a      	mov	r2, r7
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fa89 	bl	8001786 <_ZN10memoryDataI8floatObjEC1ERm>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3340      	adds	r3, #64	; 0x40
 8001278:	463a      	mov	r2, r7
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f000 fa82 	bl	8001786 <_ZN10memoryDataI8floatObjEC1ERm>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3348      	adds	r3, #72	; 0x48
 8001286:	463a      	mov	r2, r7
 8001288:	4611      	mov	r1, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fa7b 	bl	8001786 <_ZN10memoryDataI8floatObjEC1ERm>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3350      	adds	r3, #80	; 0x50
 8001294:	463a      	mov	r2, r7
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f000 fa74 	bl	8001786 <_ZN10memoryDataI8floatObjEC1ERm>
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	659a      	str	r2, [r3, #88]	; 0x58
	{

	}
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_ZN12IOManagement16writeMemoryBlockE16FlashMemoryBlock>:
};

class IOManagement
{
public:
	void writeMemoryBlock(FlashMemoryBlock memBlock)
 80012ae:	b084      	sub	sp, #16
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	f107 0014 	add.w	r0, r7, #20
 80012bc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	{
		//massEraseSector(memBlock.address);

		memBlock.firstBoot.updateToMemory();
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 fa73 	bl	80017b0 <_ZN10memoryDataI6intObjE14updateToMemoryEv>
		memBlock.flashReadWriteError.updateToMemory();
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	3308      	adds	r3, #8
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fa6d 	bl	80017b0 <_ZN10memoryDataI6intObjE14updateToMemoryEv>
		memBlock.PID_ROLL_P.updateToMemory();
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	3310      	adds	r3, #16
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fa76 	bl	80017ce <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_ROLL_I.updateToMemory();
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	3318      	adds	r3, #24
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fa70 	bl	80017ce <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_ROLL_D.updateToMemory();
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	3320      	adds	r3, #32
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 fa6a 	bl	80017ce <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_PITCH_P.updateToMemory();
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	3328      	adds	r3, #40	; 0x28
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fa64 	bl	80017ce <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_PITCH_I.updateToMemory();
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	3330      	adds	r3, #48	; 0x30
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fa5e 	bl	80017ce <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_PITCH_D.updateToMemory();
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	3338      	adds	r3, #56	; 0x38
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fa58 	bl	80017ce <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_YAW_P.updateToMemory();
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	3340      	adds	r3, #64	; 0x40
 8001324:	4618      	mov	r0, r3
 8001326:	f000 fa52 	bl	80017ce <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_YAW_I.updateToMemory();
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	3348      	adds	r3, #72	; 0x48
 8001330:	4618      	mov	r0, r3
 8001332:	f000 fa4c 	bl	80017ce <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_YAW_D.updateToMemory();
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	3350      	adds	r3, #80	; 0x50
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fa46 	bl	80017ce <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
	}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800134c:	b004      	add	sp, #16
 800134e:	4770      	bx	lr

08001350 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock>:
		to.PID_YAW_P.setValue(from.PID_YAW_P.getValue());
		to.PID_YAW_I.setValue(from.PID_YAW_I.getValue());
		to.PID_YAW_D.setValue(from.PID_YAW_D.getValue());
	}

	void resetMemoryBlock(FlashMemoryBlock& memBlock)
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
	{
		memBlock.firstBoot.setValue(1U);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	2101      	movs	r1, #1
 800135e:	4618      	mov	r0, r3
 8001360:	f000 fa50 	bl	8001804 <_ZN10memoryDataI6intObjE8setValueEi>
		memBlock.flashReadWriteError.setValue(0U);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	3308      	adds	r3, #8
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fa4a 	bl	8001804 <_ZN10memoryDataI6intObjE8setValueEi>
		memBlock.PID_ROLL_P.setValue(0U);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	3310      	adds	r3, #16
 8001374:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80013f8 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fa51 	bl	8001820 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_ROLL_I.setValue(0U);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	3318      	adds	r3, #24
 8001382:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80013f8 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fa4a 	bl	8001820 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_ROLL_D.setValue(0U);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	3320      	adds	r3, #32
 8001390:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80013f8 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 8001394:	4618      	mov	r0, r3
 8001396:	f000 fa43 	bl	8001820 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_PITCH_P.setValue(0U);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	3328      	adds	r3, #40	; 0x28
 800139e:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80013f8 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fa3c 	bl	8001820 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_PITCH_I.setValue(0U);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	3330      	adds	r3, #48	; 0x30
 80013ac:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80013f8 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fa35 	bl	8001820 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_PITCH_D.setValue(0U);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	3338      	adds	r3, #56	; 0x38
 80013ba:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80013f8 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fa2e 	bl	8001820 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_YAW_P.setValue(0U);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	3340      	adds	r3, #64	; 0x40
 80013c8:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80013f8 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fa27 	bl	8001820 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_YAW_I.setValue(0U);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	3348      	adds	r3, #72	; 0x48
 80013d6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80013f8 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fa20 	bl	8001820 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_YAW_D.setValue(0U);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	3350      	adds	r3, #80	; 0x50
 80013e4:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80013f8 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fa19 	bl	8001820 <_ZN10memoryDataI8floatObjE8setValueEf>
	}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	00000000 	.word	0x00000000

080013fc <_ZN12IOManagement17updateMemoryBlockER16FlashMemoryBlock>:

	void updateMemoryBlock(FlashMemoryBlock& memBlock)
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	{
		memBlock.firstBoot.updateFromMemory();
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f000 fa18 	bl	800183e <_ZN10memoryDataI6intObjE16updateFromMemoryEv>
		memBlock.flashReadWriteError.updateFromMemory();
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	3308      	adds	r3, #8
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fa13 	bl	800183e <_ZN10memoryDataI6intObjE16updateFromMemoryEv>
		memBlock.PID_ROLL_P.updateFromMemory();
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	3310      	adds	r3, #16
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fa1f 	bl	8001860 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_ROLL_I.updateFromMemory();
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	3318      	adds	r3, #24
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fa1a 	bl	8001860 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_ROLL_D.updateFromMemory();
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3320      	adds	r3, #32
 8001430:	4618      	mov	r0, r3
 8001432:	f000 fa15 	bl	8001860 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_PITCH_P.updateFromMemory();
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	3328      	adds	r3, #40	; 0x28
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fa10 	bl	8001860 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_PITCH_I.updateFromMemory();
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	3330      	adds	r3, #48	; 0x30
 8001444:	4618      	mov	r0, r3
 8001446:	f000 fa0b 	bl	8001860 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_PITCH_D.updateFromMemory();
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	3338      	adds	r3, #56	; 0x38
 800144e:	4618      	mov	r0, r3
 8001450:	f000 fa06 	bl	8001860 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_YAW_P.updateFromMemory();
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	3340      	adds	r3, #64	; 0x40
 8001458:	4618      	mov	r0, r3
 800145a:	f000 fa01 	bl	8001860 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_YAW_I.updateFromMemory();
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	3348      	adds	r3, #72	; 0x48
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f9fc 	bl	8001860 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_YAW_D.updateFromMemory();
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	3350      	adds	r3, #80	; 0x50
 800146c:	4618      	mov	r0, r3
 800146e:	f000 f9f7 	bl	8001860 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
	}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <_ZN16MemoryManagementC1Em>:
};

class MemoryManagement: public IOManagement
{
public:
	MemoryManagement(uint32_t mainMemoryAddress):
 800147a:	b590      	push	{r4, r7, lr}
 800147c:	b097      	sub	sp, #92	; 0x5c
 800147e:	af14      	add	r7, sp, #80	; 0x50
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
		mainMemoryBlock{mainMemoryAddress}
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6839      	ldr	r1, [r7, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff feb7 	bl	80011fc <_ZN16FlashMemoryBlockC1Em>
	{
		this->updateMemoryBlock(this->mainMemoryBlock);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4619      	mov	r1, r3
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffb2 	bl	80013fc <_ZN12IOManagement17updateMemoryBlockER16FlashMemoryBlock>

		if (this->mainMemoryBlock.firstBoot.getValue()!=1U)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f9a6 	bl	80017ec <_ZN10memoryDataI6intObjE8getValueEv>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	bf14      	ite	ne
 80014a6:	2301      	movne	r3, #1
 80014a8:	2300      	moveq	r3, #0
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d011      	beq.n	80014d4 <_ZN16MemoryManagementC1Em+0x5a>
		{
			resetMemoryBlock(this->mainMemoryBlock);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4619      	mov	r1, r3
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff4b 	bl	8001350 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock>
			writeMemoryBlock(this->mainMemoryBlock);
 80014ba:	687c      	ldr	r4, [r7, #4]
 80014bc:	4668      	mov	r0, sp
 80014be:	f104 030c 	add.w	r3, r4, #12
 80014c2:	2250      	movs	r2, #80	; 0x50
 80014c4:	4619      	mov	r1, r3
 80014c6:	f018 fdf5 	bl	801a0b4 <memcpy>
 80014ca:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff feed 	bl	80012ae <_ZN12IOManagement16writeMemoryBlockE16FlashMemoryBlock>
		}
	}
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd90      	pop	{r4, r7, pc}
	...

080014e0 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_>:
	TaskHandle_t _sensorsDataReadHandler = NULL;
	TaskHandle_t _dynamicsProcessHandler = NULL;
public:
	float zeroRef = 0.0F;

	FlightControllorImplementation (
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af04      	add	r7, sp, #16
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	603b      	str	r3, [r7, #0]
	  yaw_pid(icm.getEulerZref(),zeroRef,10,0,0),
	  xPosition_pid(pmw.getXpos(),remote_rx.target_roll,0.5F,0,100),
	  yPosition_pid(pmw.getYpos(),remote_rx.target_pitch,0.5F,0,100),
	  icm (hspi2,&buzz,roll_pid,pitch_pid,yaw_pid),
	  pmw (huart2, hdma_usart2_rx, 255U, icm, vl53,xPosition_pid,yPosition_pid),
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6a3a      	ldr	r2, [r7, #32]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001510:	615a      	str	r2, [r3, #20]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001516:	619a      	str	r2, [r3, #24]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800151c:	61da      	str	r2, [r3, #28]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001522:	621a      	str	r2, [r3, #32]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	332c      	adds	r3, #44	; 0x2c
 8001534:	497f      	ldr	r1, [pc, #508]	; (8001734 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x254>)
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff9f 	bl	800147a <_ZN16MemoryManagementC1Em>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3388      	adds	r3, #136	; 0x88
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fdb7 	bl	80010b4 <_ZN6BuzzerC1Ev>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	33a0      	adds	r3, #160	; 0xa0
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	4618      	mov	r0, r3
 800154e:	f006 fd79 	bl	8008044 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fc9c 	bl	8003e98 <_ZN6BMP390C1EP19__SPI_HandleTypeDef>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001566:	6839      	ldr	r1, [r7, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f004 fc1a 	bl	8005da2 <_ZN4HC05C1EP20__UART_HandleTypeDef>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3388      	adds	r3, #136	; 0x88
 8001578:	2201      	movs	r2, #1
 800157a:	9200      	str	r2, [sp, #0]
 800157c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800157e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001580:	f003 ff12 	bl	80053a8 <_ZN7FrSkyRXC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefP6Buzzerh>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f503 705e 	add.w	r0, r3, #888	; 0x378
 800158a:	23ff      	movs	r3, #255	; 0xff
 800158c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800158e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001590:	f006 ffa8 	bl	80084e4 <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f503 707a 	add.w	r0, r3, #1000	; 0x3e8
 800159a:	23ff      	movs	r3, #255	; 0xff
 800159c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800159e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015a0:	f007 fd9e 	bl	80090e0 <_ZN7VL53L0XC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f603 3008 	addw	r0, r3, #2824	; 0xb08
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f103 0288 	add.w	r2, r3, #136	; 0x88
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	f7ff fde5 	bl	8001184 <_ZN17BatteryManagementC1EP17ADC_HandleTypeDefP6Buzzert>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f503 6433 	add.w	r4, r3, #2864	; 0xb30
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 80015c6:	4618      	mov	r0, r3
 80015c8:	f006 fccc 	bl	8007f64 <_ZN9ICM42688P12getEulerYrefEv>
 80015cc:	4601      	mov	r1, r0
	  roll_pid(icm.getEulerYref(),zeroRef,6,0,5000),
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 80015d4:	ed9f 1a58 	vldr	s2, [pc, #352]	; 8001738 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x258>
 80015d8:	eddf 0a58 	vldr	s1, [pc, #352]	; 800173c <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 80015dc:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80015e0:	461a      	mov	r2, r3
 80015e2:	4620      	mov	r0, r4
 80015e4:	f7ff fd90 	bl	8001108 <_ZN11PID_ControlC1ERfS0_fff>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f603 345c 	addw	r4, r3, #2908	; 0xb5c
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 80015f4:	4618      	mov	r0, r3
 80015f6:	f006 fc99 	bl	8007f2c <_ZN9ICM42688P12getEulerXrefEv>
 80015fa:	4601      	mov	r1, r0
	  pitch_pid(icm.getEulerXref(),zeroRef,6,0,5000),
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 8001602:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8001738 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x258>
 8001606:	eddf 0a4d 	vldr	s1, [pc, #308]	; 800173c <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 800160a:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800160e:	461a      	mov	r2, r3
 8001610:	4620      	mov	r0, r4
 8001612:	f7ff fd79 	bl	8001108 <_ZN11PID_ControlC1ERfS0_fff>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f603 3488 	addw	r4, r3, #2952	; 0xb88
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 8001622:	4618      	mov	r0, r3
 8001624:	f006 fcaa 	bl	8007f7c <_ZN9ICM42688P12getEulerZrefEv>
 8001628:	4601      	mov	r1, r0
	  yaw_pid(icm.getEulerZref(),zeroRef,10,0,0),
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 8001630:	ed9f 1a42 	vldr	s2, [pc, #264]	; 800173c <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 8001634:	eddf 0a41 	vldr	s1, [pc, #260]	; 800173c <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 8001638:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800163c:	461a      	mov	r2, r3
 800163e:	4620      	mov	r0, r4
 8001640:	f7ff fd62 	bl	8001108 <_ZN11PID_ControlC1ERfS0_fff>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f603 34b4 	addw	r4, r3, #2996	; 0xbb4
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 8001650:	4618      	mov	r0, r3
 8001652:	f007 fb4d 	bl	8008cf0 <_ZN9PMW3901UY7getXposEv>
 8001656:	4601      	mov	r1, r0
	  xPosition_pid(pmw.getXpos(),remote_rx.target_roll,0.5F,0,100),
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f503 7357 	add.w	r3, r3, #860	; 0x35c
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 800165e:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8001740 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x260>
 8001662:	eddf 0a36 	vldr	s1, [pc, #216]	; 800173c <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 8001666:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800166a:	461a      	mov	r2, r3
 800166c:	4620      	mov	r0, r4
 800166e:	f7ff fd4b 	bl	8001108 <_ZN11PID_ControlC1ERfS0_fff>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f503 643e 	add.w	r4, r3, #3040	; 0xbe0
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 800167e:	4618      	mov	r0, r3
 8001680:	f007 fb42 	bl	8008d08 <_ZN9PMW3901UY7getYposEv>
 8001684:	4601      	mov	r1, r0
	  yPosition_pid(pmw.getYpos(),remote_rx.target_pitch,0.5F,0,100),
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f503 7358 	add.w	r3, r3, #864	; 0x360
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 800168c:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8001740 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x260>
 8001690:	eddf 0a2a 	vldr	s1, [pc, #168]	; 800173c <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 8001694:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001698:	461a      	mov	r2, r3
 800169a:	4620      	mov	r0, r4
 800169c:	f7ff fd34 	bl	8001108 <_ZN11PID_ControlC1ERfS0_fff>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f503 6041 	add.w	r0, r3, #3088	; 0xc10
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f103 0188 	add.w	r1, r3, #136	; 0x88
	  icm (hspi2,&buzz,roll_pid,pitch_pid,yaw_pid),
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f503 6433 	add.w	r4, r3, #2864	; 0xb30
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f603 335c 	addw	r3, r3, #2908	; 0xb5c
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	f602 3288 	addw	r2, r2, #2952	; 0xb88
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 80016be:	9201      	str	r2, [sp, #4]
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	4623      	mov	r3, r4
 80016c4:	460a      	mov	r2, r1
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	f005 fc74 	bl	8006fb4 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f603 5408 	addw	r4, r3, #3336	; 0xd08
	  pmw (huart2, hdma_usart2_rx, 255U, icm, vl53,xPosition_pid,yPosition_pid),
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 80016de:	68f9      	ldr	r1, [r7, #12]
 80016e0:	f601 31b4 	addw	r1, r1, #2996	; 0xbb4
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f500 603e 	add.w	r0, r0, #3040	; 0xbe0
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 80016ea:	9003      	str	r0, [sp, #12]
 80016ec:	9102      	str	r1, [sp, #8]
 80016ee:	9201      	str	r2, [sp, #4]
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	23ff      	movs	r3, #255	; 0xff
 80016f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016f6:	6a39      	ldr	r1, [r7, #32]
 80016f8:	4620      	mov	r0, r4
 80016fa:	f007 f825 	bl	8008748 <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688PR7VL53L0XR11PID_ControlS9_>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2201      	movs	r2, #1
 8001702:	f8c3 2db0 	str.w	r2, [r3, #3504]	; 0xdb0
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f8c3 2db4 	str.w	r2, [r3, #3508]	; 0xdb4
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	f8c3 2db8 	str.w	r2, [r3, #3512]	; 0xdb8
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	f8c3 2dbc 	str.w	r2, [r3, #3516]	; 0xdbc
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
	{

	}
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	bd90      	pop	{r4, r7, pc}
 8001734:	080e0000 	.word	0x080e0000
 8001738:	459c4000 	.word	0x459c4000
 800173c:	00000000 	.word	0x00000000
 8001740:	42c80000 	.word	0x42c80000

08001744 <_ZN30FlightControllorImplementation11getInstanceEv>:
		&hdma_usart3_rx,
		&hdma_uart4_rx,
		&hdma_usart6_rx);

FlightControllorImplementation *FlightControllorImplementation::getInstance()
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
	return globalflightController;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <_ZN30FlightControllorImplementation11getInstanceEv+0x14>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	200001b0 	.word	0x200001b0

0800175c <_ZN10memoryDataI6intObjEC1ERm>:
	memoryData(uint32_t& addr)
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
		this->address = addr;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	605a      	str	r2, [r3, #4]
		addr+=dataSize;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	1d1a      	adds	r2, r3, #4
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	601a      	str	r2, [r3, #0]
	}
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <_ZN10memoryDataI8floatObjEC1ERm>:
	memoryData(uint32_t& addr)
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
		this->address = addr;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	605a      	str	r2, [r3, #4]
		addr+=dataSize;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	1d1a      	adds	r2, r3, #4
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	601a      	str	r2, [r3, #0]
	}
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_ZN10memoryDataI6intObjE14updateToMemoryEv>:
	void updateToMemory()
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
		writeMemoryAddress<unionType>(this->address,this->data);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6819      	ldr	r1, [r3, #0]
 80017c0:	4610      	mov	r0, r2
 80017c2:	f000 f862 	bl	800188a <_Z18writeMemoryAddressI6intObjEmmT_>
	}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_ZN10memoryDataI8floatObjE14updateToMemoryEv>:
	void updateToMemory()
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
		writeMemoryAddress<unionType>(this->address,this->data);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6819      	ldr	r1, [r3, #0]
 80017de:	4610      	mov	r0, r2
 80017e0:	f000 f877 	bl	80018d2 <_Z18writeMemoryAddressI8floatObjEmmT_>
	}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_ZN10memoryDataI6intObjE8getValueEv>:
	Type getValue()
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
		return this->data.value;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
	}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <_ZN10memoryDataI6intObjE8setValueEi>:
	void setValue(Type value)
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
		this->data.value = value;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	601a      	str	r2, [r3, #0]
	}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_ZN10memoryDataI8floatObjE8setValueEf>:
	void setValue(Type value)
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	ed87 0a00 	vstr	s0, [r7]
		this->data.value = value;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	601a      	str	r2, [r3, #0]
	}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <_ZN10memoryDataI6intObjE16updateFromMemoryEv>:
	void updateFromMemory()
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
		this->data.bytes = readMemoryAddress<Type>(this->address);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f865 	bl	800191a <_Z17readMemoryAddressIiET_m>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	601a      	str	r2, [r3, #0]
	}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>:
	void updateFromMemory()
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
		this->data.bytes = readMemoryAddress<Type>(this->address);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4618      	mov	r0, r3
 800186e:	f000 f860 	bl	8001932 <_Z17readMemoryAddressIfET_m>
 8001872:	eef0 7a40 	vmov.f32	s15, s0
 8001876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800187a:	ee17 2a90 	vmov	r2, s15
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	601a      	str	r2, [r3, #0]
	}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <_Z18writeMemoryAddressI6intObjEmmT_>:
{
	return static_cast<Type>(*(__IO uint32_t *)addr);
}

template <typename Type>
inline uint32_t writeMemoryAddress(uint32_t address,Type memoryData)
 800188a:	b5b0      	push	{r4, r5, r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
{
	HAL_FLASH_Unlock();
 8001894:	f008 ffac 	bl	800a7f0 <HAL_FLASH_Unlock>

    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, memoryData.bytes) != HAL_OK)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	2200      	movs	r2, #0
 800189c:	461c      	mov	r4, r3
 800189e:	4615      	mov	r5, r2
 80018a0:	4622      	mov	r2, r4
 80018a2:	462b      	mov	r3, r5
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	2002      	movs	r0, #2
 80018a8:	f008 ff4e 	bl	800a748 <HAL_FLASH_Program>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	bf14      	ite	ne
 80018b2:	2301      	movne	r3, #1
 80018b4:	2300      	moveq	r3, #0
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <_Z18writeMemoryAddressI6intObjEmmT_+0x3a>
    {
    	return HAL_FLASH_GetError ();
 80018bc:	f008 ffca 	bl	800a854 <HAL_FLASH_GetError>
 80018c0:	4603      	mov	r3, r0
 80018c2:	e002      	b.n	80018ca <_Z18writeMemoryAddressI6intObjEmmT_+0x40>
    }

	HAL_FLASH_Lock();
 80018c4:	f008 ffb6 	bl	800a834 <HAL_FLASH_Lock>

	return 0;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bdb0      	pop	{r4, r5, r7, pc}

080018d2 <_Z18writeMemoryAddressI8floatObjEmmT_>:
inline uint32_t writeMemoryAddress(uint32_t address,Type memoryData)
 80018d2:	b5b0      	push	{r4, r5, r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 80018dc:	f008 ff88 	bl	800a7f0 <HAL_FLASH_Unlock>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, memoryData.bytes) != HAL_OK)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	2200      	movs	r2, #0
 80018e4:	461c      	mov	r4, r3
 80018e6:	4615      	mov	r5, r2
 80018e8:	4622      	mov	r2, r4
 80018ea:	462b      	mov	r3, r5
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	2002      	movs	r0, #2
 80018f0:	f008 ff2a 	bl	800a748 <HAL_FLASH_Program>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	bf14      	ite	ne
 80018fa:	2301      	movne	r3, #1
 80018fc:	2300      	moveq	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <_Z18writeMemoryAddressI8floatObjEmmT_+0x3a>
    	return HAL_FLASH_GetError ();
 8001904:	f008 ffa6 	bl	800a854 <HAL_FLASH_GetError>
 8001908:	4603      	mov	r3, r0
 800190a:	e002      	b.n	8001912 <_Z18writeMemoryAddressI8floatObjEmmT_+0x40>
	HAL_FLASH_Lock();
 800190c:	f008 ff92 	bl	800a834 <HAL_FLASH_Lock>
	return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bdb0      	pop	{r4, r5, r7, pc}

0800191a <_Z17readMemoryAddressIiET_m>:
inline Type readMemoryAddress(const uint32_t addr)
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
	return static_cast<Type>(*(__IO uint32_t *)addr);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_Z17readMemoryAddressIfET_m>:
inline Type readMemoryAddress(const uint32_t addr)
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
	return static_cast<Type>(*(__IO uint32_t *)addr);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	ee07 3a90 	vmov	s15, r3
 8001942:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8001946:	eeb0 0a67 	vmov.f32	s0, s15
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_Z41__static_initialization_and_destruction_0ii>:
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b08b      	sub	sp, #44	; 0x2c
 8001958:	af08      	add	r7, sp, #32
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d122      	bne.n	80019aa <_Z41__static_initialization_and_destruction_0ii+0x56>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800196a:	4293      	cmp	r3, r2
 800196c:	d11d      	bne.n	80019aa <_Z41__static_initialization_and_destruction_0ii+0x56>
		&hdma_usart6_rx);
 800196e:	f640 50c8 	movw	r0, #3528	; 0xdc8
 8001972:	f017 f95f 	bl	8018c34 <_Znwj>
 8001976:	4603      	mov	r3, r0
 8001978:	461c      	mov	r4, r3
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800197c:	9307      	str	r3, [sp, #28]
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001980:	9306      	str	r3, [sp, #24]
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001984:	9305      	str	r3, [sp, #20]
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001988:	9304      	str	r3, [sp, #16]
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800198c:	9303      	str	r3, [sp, #12]
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001990:	9302      	str	r3, [sp, #8]
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800199c:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800199e:	490f      	ldr	r1, [pc, #60]	; (80019dc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80019a0:	4620      	mov	r0, r4
 80019a2:	f7ff fd9d 	bl	80014e0 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_>
static FlightControllorImplementation *globalflightController = new FlightControllorImplementation(
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80019a8:	601c      	str	r4, [r3, #0]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd90      	pop	{r4, r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200009b4 	.word	0x200009b4
 80019b8:	20000834 	.word	0x20000834
 80019bc:	20000954 	.word	0x20000954
 80019c0:	200008f4 	.word	0x200008f4
 80019c4:	200007f0 	.word	0x200007f0
 80019c8:	200006e0 	.word	0x200006e0
 80019cc:	200007ac 	.word	0x200007ac
 80019d0:	20000768 	.word	0x20000768
 80019d4:	20000724 	.word	0x20000724
 80019d8:	20000538 	.word	0x20000538
 80019dc:	2000040c 	.word	0x2000040c
 80019e0:	200001b0 	.word	0x200001b0

080019e4 <_GLOBAL__sub_I__ZN30FlightControllorImplementation11getInstanceEv>:
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019ec:	2001      	movs	r0, #1
 80019ee:	f7ff ffb1 	bl	8001954 <_Z41__static_initialization_and_destruction_0ii>
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <vApplicationGetIdleTaskMemory+0x30>)
 8001a0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	200001b4 	.word	0x200001b4
 8001a24:	20000208 	.word	0x20000208

08001a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a44:	4013      	ands	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	60d3      	str	r3, [r2, #12]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <_ZN12CallsCounter25incrementInterruptCounterEv>:
};

class CallsCounter
{
public:
	void incrementInterruptCounter()
 8001a70:	b4b0      	push	{r4, r5, r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	{
		this->interruptCounter++;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7e:	1c54      	adds	r4, r2, #1
 8001a80:	f143 0500 	adc.w	r5, r3, #0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	e9c3 4500 	strd	r4, r5, [r3]
	}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bcb0      	pop	{r4, r5, r7}
 8001a92:	4770      	bx	lr

08001a94 <_ZN12CallsCounter20incrementTaskCounterEv>:

	void incrementTaskCounter()
 8001a94:	b4b0      	push	{r4, r5, r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	{
		this->taskCounter++;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001aa2:	1c54      	adds	r4, r2, #1
 8001aa4:	f143 0500 	adc.w	r5, r3, #0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	e9c3 4502 	strd	r4, r5, [r3, #8]
	}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bcb0      	pop	{r4, r5, r7}
 8001ab6:	4770      	bx	lr

08001ab8 <_ZN7Timeout23incrementTimeoutCounterEv>:
	void resetTimeoutCounter()
	{
		timeout_counter=0;
	}

	void incrementTimeoutCounter()
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	{
		timeout_counter++;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	785b      	ldrb	r3, [r3, #1]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	705a      	strb	r2, [r3, #1]

		if (timeout_counter>timeout_value)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	785a      	ldrb	r2, [r3, #1]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	789b      	ldrb	r3, [r3, #2]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d902      	bls.n	8001ade <_ZN7Timeout23incrementTimeoutCounterEv+0x26>
			status = Status::Timeout;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
	}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation>:
namespace drone
{
	namespace failsafe
	{
		inline void slowlyLanding(FlightControllorImplementation& flightControllerInstance)
		{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
			static float failSafeDownStartingThrottleValue = constFailSafeDownStartingThrottleValue;

			flightControllerInstance.getFrSkyRXinstance().getThrottle() = failSafeDownStartingThrottleValue;
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff fa66 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f004 f8c7 	bl	8005c90 <_ZN7FrSkyRX11getThrottleEv>
 8001b02:	4602      	mov	r2, r0
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x80>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6013      	str	r3, [r2, #0]
			flightControllerInstance.getFrSkyRXinstance().getTargetRoll() = 0.0F;
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fa5b 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f004 f8c8 	bl	8005ca8 <_ZN7FrSkyRX13getTargetRollEv>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
			flightControllerInstance.getFrSkyRXinstance().getTargetPitch() = 0.0F;
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff fa50 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f004 f8c9 	bl	8005cc0 <_ZN7FrSkyRX14getTargetPitchEv>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]

			failSafeDownStartingThrottleValue -= 0.1F;
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x80>)
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001b70 <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x84>
 8001b40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b44:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x80>)
 8001b46:	edc3 7a00 	vstr	s15, [r3]

			if (failSafeDownStartingThrottleValue <= 0.0F)
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x80>)
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b58:	d900      	bls.n	8001b5c <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x70>
			{
				flightControllerInstance.setCurrentFaultsStatus(FaultsStatus::CRITICAL);
			}
		}
 8001b5a:	e003      	b.n	8001b64 <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x78>
				flightControllerInstance.setCurrentFaultsStatus(FaultsStatus::CRITICAL);
 8001b5c:	2103      	movs	r1, #3
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fa99 	bl	8001096 <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>
		}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	3dcccccd 	.word	0x3dcccccd

08001b74 <_ZN5drone8failsafe12quickLandingER30FlightControllorImplementation>:

		inline void quickLanding(FlightControllorImplementation& flightControllerInstance)
		{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
			flightControllerInstance.getFrSkyRXinstance().getThrottle() = 0.0F;
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff fa22 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f004 f883 	bl	8005c90 <_ZN7FrSkyRX11getThrottleEv>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
			flightControllerInstance.getFrSkyRXinstance().getTargetRoll() = 0.0F;
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fa17 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f004 f884 	bl	8005ca8 <_ZN7FrSkyRX13getTargetRollEv>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
			flightControllerInstance.getFrSkyRXinstance().getTargetPitch() = 0.0F;
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff fa0c 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f004 f885 	bl	8005cc0 <_ZN7FrSkyRX14getTargetPitchEv>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
		}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <_Z19DynamicsProcessTaskPv>:
#include "failsafe_functions.hpp"

float testttt = 0;

void DynamicsProcessTask(void *pvParameters)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b090      	sub	sp, #64	; 0x40
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8001bd0:	f7ff fdb8 	bl	8001744 <_ZN30FlightControllorImplementation11getInstanceEv>
 8001bd4:	62f8      	str	r0, [r7, #44]	; 0x2c

	const TickType_t xFrequency = 1;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	62bb      	str	r3, [r7, #40]	; 0x28
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001bda:	f015 fa2f 	bl	801703c <xTaskGetTickCount>
 8001bde:	4603      	mov	r3, r0
 8001be0:	60bb      	str	r3, [r7, #8]

	for( ;; )
	{
		FaultsStatus currentFaultsStatus = flightControllerInstance->getCurrentFaultsStatus();
 8001be2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001be4:	f7ff fa4a 	bl	800107c <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>
 8001be8:	6278      	str	r0, [r7, #36]	; 0x24

		if (currentFaultsStatus != FaultsStatus::NOT_READY)
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	f000 815b 	beq.w	8001ea8 <_Z19DynamicsProcessTaskPv+0x2e0>
		{
			float rollPidOutput = flightControllerInstance->getRollPidInstance().getOut();
 8001bf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bf4:	f7ff f95a 	bl	8000eac <_ZN30FlightControllorImplementation18getRollPidInstanceEv>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f007 f8e8 	bl	8008dd0 <_ZN11PID_Control6getOutEv>
 8001c00:	ed87 0a08 	vstr	s0, [r7, #32]
			float pitchPidOutput = flightControllerInstance->getPitchPidInstance().getOut();
 8001c04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c06:	f7ff f95e 	bl	8000ec6 <_ZN30FlightControllorImplementation19getPitchPidInstanceEv>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f007 f8df 	bl	8008dd0 <_ZN11PID_Control6getOutEv>
 8001c12:	ed87 0a07 	vstr	s0, [r7, #28]
			float yawPidOutput = flightControllerInstance->getYawPidInstance().getOut();
 8001c16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c18:	f7ff f962 	bl	8000ee0 <_ZN30FlightControllorImplementation17getYawPidInstanceEv>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f007 f8d6 	bl	8008dd0 <_ZN11PID_Control6getOutEv>
 8001c24:	ed87 0a06 	vstr	s0, [r7, #24]
			float xPositionPidOutput = flightControllerInstance->getXPositionPidInstance().getOut();
 8001c28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c2a:	f7ff f966 	bl	8000efa <_ZN30FlightControllorImplementation23getXPositionPidInstanceEv>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f007 f8cd 	bl	8008dd0 <_ZN11PID_Control6getOutEv>
 8001c36:	ed87 0a05 	vstr	s0, [r7, #20]
			float yPositionPidOutput = flightControllerInstance->getYPositionPidInstance().getOut();
 8001c3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c3c:	f7ff f96a 	bl	8000f14 <_ZN30FlightControllorImplementation23getYPositionPidInstanceEv>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f007 f8c4 	bl	8008dd0 <_ZN11PID_Control6getOutEv>
 8001c48:	ed87 0a04 	vstr	s0, [r7, #16]
			float altitudeMpcOutput = flightControllerInstance->getVL53L0Xinstance().getMPCout();
 8001c4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c4e:	f7ff f9d4 	bl	8000ffa <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f007 fb57 	bl	8009308 <_ZN7VL53L0X9getMPCoutEv>
 8001c5a:	ed87 0a03 	vstr	s0, [r7, #12]

			testttt = yPositionPidOutput;
 8001c5e:	4a96      	ldr	r2, [pc, #600]	; (8001eb8 <_Z19DynamicsProcessTaskPv+0x2f0>)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	6013      	str	r3, [r2, #0]

			if (currentFaultsStatus == FaultsStatus::FAILURE)
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d102      	bne.n	8001c70 <_Z19DynamicsProcessTaskPv+0xa8>
			{
				drone::failsafe::slowlyLanding(*flightControllerInstance);
 8001c6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c6c:	f7ff ff3e 	bl	8001aec <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation>
			}

			if (currentFaultsStatus == FaultsStatus::CRITICAL)
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d102      	bne.n	8001c7c <_Z19DynamicsProcessTaskPv+0xb4>
			{
				drone::failsafe::quickLanding(*flightControllerInstance);
 8001c76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c78:	f7ff ff7c 	bl	8001b74 <_ZN5drone8failsafe12quickLandingER30FlightControllorImplementation>
			}

			float CCR1_value = 3000.0F + flightControllerInstance->getFrSkyRXinstance().throttle + altitudeMpcOutput + rollPidOutput + pitchPidOutput + yawPidOutput - xPositionPidOutput - yPositionPidOutput;
 8001c7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c7e:	f7ff f9a2 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001c82:	4603      	mov	r3, r0
 8001c84:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8001c88:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001ebc <_Z19DynamicsProcessTaskPv+0x2f4>
 8001c8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c90:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c98:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ca0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ca8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			float CCR2_value = 3000.0F + flightControllerInstance->getFrSkyRXinstance().throttle + altitudeMpcOutput + rollPidOutput - pitchPidOutput - yawPidOutput - xPositionPidOutput + yPositionPidOutput;
 8001cc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001cc6:	f7ff f97e 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8001cd0:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001ebc <_Z19DynamicsProcessTaskPv+0x2f4>
 8001cd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ce0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ce8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cf8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d00:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d08:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			float CCR3_value = 3000.0F + flightControllerInstance->getFrSkyRXinstance().throttle + altitudeMpcOutput - rollPidOutput + pitchPidOutput - yawPidOutput + xPositionPidOutput - yPositionPidOutput;
 8001d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d0e:	f7ff f95a 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001d12:	4603      	mov	r3, r0
 8001d14:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8001d18:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001ebc <_Z19DynamicsProcessTaskPv+0x2f4>
 8001d1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d20:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d28:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d30:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d38:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d40:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d48:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d50:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			float CCR4_value = 3000.0F + flightControllerInstance->getFrSkyRXinstance().throttle + altitudeMpcOutput - rollPidOutput - pitchPidOutput + yawPidOutput + xPositionPidOutput + yPositionPidOutput;
 8001d54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d56:	f7ff f936 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8001d60:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001ebc <_Z19DynamicsProcessTaskPv+0x2f4>
 8001d64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d68:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d70:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d78:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d80:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d88:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d90:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d98:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

			if (currentFaultsStatus == FaultsStatus::OKAY)
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d157      	bne.n	8001e52 <_Z19DynamicsProcessTaskPv+0x28a>
			{
				if (CCR1_value<3300.0F)
 8001da2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001da6:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001ec0 <_Z19DynamicsProcessTaskPv+0x2f8>
 8001daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db2:	d501      	bpl.n	8001db8 <_Z19DynamicsProcessTaskPv+0x1f0>
					CCR1_value = 3300.0F;
 8001db4:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <_Z19DynamicsProcessTaskPv+0x2fc>)
 8001db6:	63fb      	str	r3, [r7, #60]	; 0x3c
				if (CCR1_value>6000.0F)
 8001db8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001dbc:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001ec8 <_Z19DynamicsProcessTaskPv+0x300>
 8001dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc8:	dd01      	ble.n	8001dce <_Z19DynamicsProcessTaskPv+0x206>
					CCR1_value = 6000.0F;
 8001dca:	4b40      	ldr	r3, [pc, #256]	; (8001ecc <_Z19DynamicsProcessTaskPv+0x304>)
 8001dcc:	63fb      	str	r3, [r7, #60]	; 0x3c

				if (CCR2_value<3300.0F)
 8001dce:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001dd2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001ec0 <_Z19DynamicsProcessTaskPv+0x2f8>
 8001dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dde:	d501      	bpl.n	8001de4 <_Z19DynamicsProcessTaskPv+0x21c>
					CCR2_value = 3300.0F;
 8001de0:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <_Z19DynamicsProcessTaskPv+0x2fc>)
 8001de2:	63bb      	str	r3, [r7, #56]	; 0x38
				if (CCR2_value>6000.0F)
 8001de4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001de8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001ec8 <_Z19DynamicsProcessTaskPv+0x300>
 8001dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df4:	dd01      	ble.n	8001dfa <_Z19DynamicsProcessTaskPv+0x232>
					CCR2_value = 6000.0F;
 8001df6:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <_Z19DynamicsProcessTaskPv+0x304>)
 8001df8:	63bb      	str	r3, [r7, #56]	; 0x38

				if (CCR3_value<3300.0F)
 8001dfa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001dfe:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001ec0 <_Z19DynamicsProcessTaskPv+0x2f8>
 8001e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0a:	d501      	bpl.n	8001e10 <_Z19DynamicsProcessTaskPv+0x248>
					CCR3_value = 3300.0F;
 8001e0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <_Z19DynamicsProcessTaskPv+0x2fc>)
 8001e0e:	637b      	str	r3, [r7, #52]	; 0x34
				if (CCR3_value>6000.0F)
 8001e10:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e14:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001ec8 <_Z19DynamicsProcessTaskPv+0x300>
 8001e18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e20:	dd01      	ble.n	8001e26 <_Z19DynamicsProcessTaskPv+0x25e>
					CCR3_value = 6000.0F;
 8001e22:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <_Z19DynamicsProcessTaskPv+0x304>)
 8001e24:	637b      	str	r3, [r7, #52]	; 0x34

				if (CCR4_value<3300.0F)
 8001e26:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e2a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001ec0 <_Z19DynamicsProcessTaskPv+0x2f8>
 8001e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e36:	d501      	bpl.n	8001e3c <_Z19DynamicsProcessTaskPv+0x274>
					CCR4_value = 3300.0F;
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <_Z19DynamicsProcessTaskPv+0x2fc>)
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
				if (CCR4_value>6000.0F)
 8001e3c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e40:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001ec8 <_Z19DynamicsProcessTaskPv+0x300>
 8001e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4c:	dd01      	ble.n	8001e52 <_Z19DynamicsProcessTaskPv+0x28a>
					CCR4_value = 6000.0F;
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <_Z19DynamicsProcessTaskPv+0x304>)
 8001e50:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if (currentFaultsStatus == FaultsStatus::CRITICAL)
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d107      	bne.n	8001e68 <_Z19DynamicsProcessTaskPv+0x2a0>
			{
				CCR1_value = 3000.0F;
 8001e58:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <_Z19DynamicsProcessTaskPv+0x308>)
 8001e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
				CCR2_value = 3000.0F;
 8001e5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <_Z19DynamicsProcessTaskPv+0x308>)
 8001e5e:	63bb      	str	r3, [r7, #56]	; 0x38
				CCR3_value = 3000.0F;
 8001e60:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <_Z19DynamicsProcessTaskPv+0x308>)
 8001e62:	637b      	str	r3, [r7, #52]	; 0x34
				CCR4_value = 3000.0F;
 8001e64:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <_Z19DynamicsProcessTaskPv+0x308>)
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
			}

			TIM3 -> CCR1 = static_cast<uint32_t>(CCR1_value);
 8001e68:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <_Z19DynamicsProcessTaskPv+0x30c>)
 8001e6a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e72:	ee17 2a90 	vmov	r2, s15
 8001e76:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3 -> CCR2 = static_cast<uint32_t>(CCR2_value);
 8001e78:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <_Z19DynamicsProcessTaskPv+0x30c>)
 8001e7a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e82:	ee17 2a90 	vmov	r2, s15
 8001e86:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3 -> CCR3 = static_cast<uint32_t>(CCR3_value);
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <_Z19DynamicsProcessTaskPv+0x30c>)
 8001e8a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e92:	ee17 2a90 	vmov	r2, s15
 8001e96:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3 -> CCR4 = static_cast<uint32_t>(CCR4_value);
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <_Z19DynamicsProcessTaskPv+0x30c>)
 8001e9a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ea2:	ee17 2a90 	vmov	r2, s15
 8001ea6:	641a      	str	r2, [r3, #64]	; 0x40
		}

		vTaskDelayUntil( &xLastWakeTime, xFrequency);
 8001ea8:	f107 0308 	add.w	r3, r7, #8
 8001eac:	2101      	movs	r1, #1
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f014 ff3c 	bl	8016d2c <vTaskDelayUntil>
	}
 8001eb4:	e695      	b.n	8001be2 <_Z19DynamicsProcessTaskPv+0x1a>
 8001eb6:	bf00      	nop
 8001eb8:	20000408 	.word	0x20000408
 8001ebc:	453b8000 	.word	0x453b8000
 8001ec0:	454e4000 	.word	0x454e4000
 8001ec4:	454e4000 	.word	0x454e4000
 8001ec8:	45bb8000 	.word	0x45bb8000
 8001ecc:	45bb8000 	.word	0x45bb8000
 8001ed0:	453b8000 	.word	0x453b8000
 8001ed4:	40000400 	.word	0x40000400

08001ed8 <_Z22isFailureFaultDetectedR30FlightControllorImplementation>:
#define SRC_IMPLEMENTATION_TASKS_FAULTSCHECKTASK_HPP_

#include "FlightControllerImplementation.hpp"

bool isFailureFaultDetected(FlightControllorImplementation& flightControllerInstance)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	const bool isRxDisconnected = flightControllerInstance.getFrSkyRXinstance().getCurrentState()==FrSkyRXState::TIMEOUT;
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff f870 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 fc65 	bl	80057b8 <_ZNK7FrSkyRX15getCurrentStateEv>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	bf0c      	ite	eq
 8001ef4:	2301      	moveq	r3, #1
 8001ef6:	2300      	movne	r3, #0
 8001ef8:	73fb      	strb	r3, [r7, #15]
	if (isRxDisconnected)
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <_Z22isFailureFaultDetectedR30FlightControllorImplementation+0x2c>
		return true;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <_Z22isFailureFaultDetectedR30FlightControllorImplementation+0x2e>

	return false;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <_Z23isCriticalFaultDetectedR30FlightControllorImplementation>:

bool isCriticalFaultDetected(FlightControllorImplementation& flightControllerInstance)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]

	const bool isCrashDetected = flightControllerInstance.getICM42688Pinstance().isCriticalStateDetected();
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff f82e 	bl	8000f78 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f005 fe78 	bl	8007c14 <_ZN9ICM42688P23isCriticalStateDetectedEv>
 8001f24:	4603      	mov	r3, r0
 8001f26:	73fb      	strb	r3, [r7, #15]
	if (isCrashDetected)
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <_Z23isCriticalFaultDetectedR30FlightControllorImplementation+0x24>
		return true;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <_Z23isCriticalFaultDetectedR30FlightControllorImplementation+0x26>

	return false;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_Z15FaultsCheckTaskPv>:

void FaultsCheckTask(void *pvParameters)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8001f44:	f7ff fbfe 	bl	8001744 <_ZN30FlightControllorImplementation11getInstanceEv>
 8001f48:	6178      	str	r0, [r7, #20]

	const TickType_t xFrequency = 1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	613b      	str	r3, [r7, #16]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001f4e:	f015 f875 	bl	801703c <xTaskGetTickCount>
 8001f52:	4603      	mov	r3, r0
 8001f54:	60bb      	str	r3, [r7, #8]

	for( ;; )
	{
		FaultsStatus currentFaultsStatus = flightControllerInstance->getCurrentFaultsStatus();
 8001f56:	6978      	ldr	r0, [r7, #20]
 8001f58:	f7ff f890 	bl	800107c <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>
 8001f5c:	60f8      	str	r0, [r7, #12]

		flightControllerInstance->getPMW3901UYinstance().incrementTimeoutCounter();
 8001f5e:	6978      	ldr	r0, [r7, #20]
 8001f60:	f7ff f824 	bl	8000fac <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 8001f64:	4603      	mov	r3, r0
 8001f66:	3336      	adds	r3, #54	; 0x36
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fda5 	bl	8001ab8 <_ZN7Timeout23incrementTimeoutCounterEv>
		flightControllerInstance->getFrSkyRXinstance().incrementTimeoutCounter();
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	f7ff f829 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001f74:	4603      	mov	r3, r0
 8001f76:	3336      	adds	r3, #54	; 0x36
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fd9d 	bl	8001ab8 <_ZN7Timeout23incrementTimeoutCounterEv>
		flightControllerInstance->getMB1043instance().incrementTimeoutCounter();
 8001f7e:	6978      	ldr	r0, [r7, #20]
 8001f80:	f7ff f82e 	bl	8000fe0 <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 8001f84:	4603      	mov	r3, r0
 8001f86:	3336      	adds	r3, #54	; 0x36
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fd95 	bl	8001ab8 <_ZN7Timeout23incrementTimeoutCounterEv>

		flightControllerInstance->getBuzzerinstance().run();
 8001f8e:	6978      	ldr	r0, [r7, #20]
 8001f90:	f7fe ffd9 	bl	8000f46 <_ZN30FlightControllorImplementation17getBuzzerinstanceEv>
 8001f94:	4603      	mov	r3, r0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 f957 	bl	800524a <_ZN6Buzzer3runEv>
		flightControllerInstance->getBatteryManagementinstance().run();
 8001f9c:	6978      	ldr	r0, [r7, #20]
 8001f9e:	f7ff f839 	bl	8001014 <_ZN30FlightControllorImplementation28getBatteryManagementinstanceEv>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f002 ffef 	bl	8004f88 <_ZN17BatteryManagement3runEv>

		if (isCriticalFaultDetected(*flightControllerInstance) || currentFaultsStatus==FaultsStatus::CRITICAL)
 8001faa:	6978      	ldr	r0, [r7, #20]
 8001fac:	f7ff ffaf 	bl	8001f0e <_Z23isCriticalFaultDetectedR30FlightControllorImplementation>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d102      	bne.n	8001fbc <_Z15FaultsCheckTaskPv+0x80>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d101      	bne.n	8001fc0 <_Z15FaultsCheckTaskPv+0x84>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <_Z15FaultsCheckTaskPv+0x86>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <_Z15FaultsCheckTaskPv+0x94>
		{
			flightControllerInstance->setCurrentFaultsStatus(FaultsStatus::CRITICAL);
 8001fc6:	2103      	movs	r1, #3
 8001fc8:	6978      	ldr	r0, [r7, #20]
 8001fca:	f7ff f864 	bl	8001096 <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>
 8001fce:	e025      	b.n	800201c <_Z15FaultsCheckTaskPv+0xe0>
		}
		else if (isFailureFaultDetected(*flightControllerInstance) || currentFaultsStatus==FaultsStatus::FAILURE)
 8001fd0:	6978      	ldr	r0, [r7, #20]
 8001fd2:	f7ff ff81 	bl	8001ed8 <_Z22isFailureFaultDetectedR30FlightControllorImplementation>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d102      	bne.n	8001fe2 <_Z15FaultsCheckTaskPv+0xa6>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d101      	bne.n	8001fe6 <_Z15FaultsCheckTaskPv+0xaa>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <_Z15FaultsCheckTaskPv+0xac>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d004      	beq.n	8001ff6 <_Z15FaultsCheckTaskPv+0xba>
		{
			flightControllerInstance->setCurrentFaultsStatus(FaultsStatus::CRITICAL);
 8001fec:	2103      	movs	r1, #3
 8001fee:	6978      	ldr	r0, [r7, #20]
 8001ff0:	f7ff f851 	bl	8001096 <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>
 8001ff4:	e012      	b.n	800201c <_Z15FaultsCheckTaskPv+0xe0>
		}
		else if (flightControllerInstance->getFrSkyRXinstance().getCurrentState() == FrSkyRXState::READY)
 8001ff6:	6978      	ldr	r0, [r7, #20]
 8001ff8:	f7fe ffe5 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 fbda 	bl	80057b8 <_ZNK7FrSkyRX15getCurrentStateEv>
 8002004:	4603      	mov	r3, r0
 8002006:	2b03      	cmp	r3, #3
 8002008:	bf0c      	ite	eq
 800200a:	2301      	moveq	r3, #1
 800200c:	2300      	movne	r3, #0
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <_Z15FaultsCheckTaskPv+0xe0>
		{
			flightControllerInstance->setCurrentFaultsStatus(FaultsStatus::OKAY);
 8002014:	2100      	movs	r1, #0
 8002016:	6978      	ldr	r0, [r7, #20]
 8002018:	f7ff f83d 	bl	8001096 <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>
		}

		vTaskDelayUntil( &xLastWakeTime, xFrequency);
 800201c:	f107 0308 	add.w	r3, r7, #8
 8002020:	2101      	movs	r1, #1
 8002022:	4618      	mov	r0, r3
 8002024:	f014 fe82 	bl	8016d2c <vTaskDelayUntil>
	}
 8002028:	e795      	b.n	8001f56 <_Z15FaultsCheckTaskPv+0x1a>
	...

0800202c <_Z19sensorsDataReadTaskPv>:
extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart4;
extern UART_HandleTypeDef huart6;

void sensorsDataReadTask(void *pvParameters)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af02      	add	r7, sp, #8
 8002032:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8002034:	f7ff fb86 	bl	8001744 <_ZN30FlightControllorImplementation11getInstanceEv>
 8002038:	6178      	str	r0, [r7, #20]

	HAL_TIM_Base_Start_IT(&htim4);
 800203a:	48a7      	ldr	r0, [pc, #668]	; (80022d8 <_Z19sensorsDataReadTaskPv+0x2ac>)
 800203c:	f00c fe1a 	bl	800ec74 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2105      	movs	r1, #5
 8002044:	2008      	movs	r0, #8
 8002046:	f007 ff53 	bl	8009ef0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800204a:	2008      	movs	r0, #8
 800204c:	f007 ff6c 	bl	8009f28 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002050:	2200      	movs	r2, #0
 8002052:	2105      	movs	r1, #5
 8002054:	200a      	movs	r0, #10
 8002056:	f007 ff4b 	bl	8009ef0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800205a:	200a      	movs	r0, #10
 800205c:	f007 ff64 	bl	8009f28 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2105      	movs	r1, #5
 8002064:	2017      	movs	r0, #23
 8002066:	f007 ff43 	bl	8009ef0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800206a:	2017      	movs	r0, #23
 800206c:	f007 ff5c 	bl	8009f28 <HAL_NVIC_EnableIRQ>
	NVIC_SetPriorityGrouping(0);
 8002070:	2000      	movs	r0, #0
 8002072:	f7ff fcd9 	bl	8001a28 <__NVIC_SetPriorityGrouping>

	bool startup;
	if(!flightControllerInstance->getLIS3MDLTRinstance().defaultInit())
 8002076:	6978      	ldr	r0, [r7, #20]
 8002078:	f7fe ff59 	bl	8000f2e <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 800207c:	4603      	mov	r3, r0
 800207e:	4618      	mov	r0, r3
 8002080:	f006 f96c 	bl	800835c <_ZN9LIS3MDLTR11defaultInitEv>
 8002084:	4603      	mov	r3, r0
 8002086:	f083 0301 	eor.w	r3, r3, #1
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <_Z19sensorsDataReadTaskPv+0x68>
	  startup = false;
 8002090:	2300      	movs	r3, #0
 8002092:	74fb      	strb	r3, [r7, #19]
	flightControllerInstance->getLIS3MDLTRinstance().update();
 8002094:	6978      	ldr	r0, [r7, #20]
 8002096:	f7fe ff4a 	bl	8000f2e <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 800209a:	4603      	mov	r3, r0
 800209c:	4618      	mov	r0, r3
 800209e:	f006 f827 	bl	80080f0 <_ZN9LIS3MDLTR6updateEv>

	if (!flightControllerInstance->getICM42688Pinstance().defaultInit())
 80020a2:	6978      	ldr	r0, [r7, #20]
 80020a4:	f7fe ff68 	bl	8000f78 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f005 f87a 	bl	80071a4 <_ZN9ICM42688P11defaultInitEv>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f083 0301 	eor.w	r3, r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <_Z19sensorsDataReadTaskPv+0x94>
	  startup = false;
 80020bc:	2300      	movs	r3, #0
 80020be:	74fb      	strb	r3, [r7, #19]
	flightControllerInstance->getICM42688Pinstance().update();
 80020c0:	6978      	ldr	r0, [r7, #20]
 80020c2:	f7fe ff59 	bl	8000f78 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f005 fb8f 	bl	80077ec <_ZN9ICM42688P6updateEv>

	if (!flightControllerInstance->getBMP390instance().defaultInit())
 80020ce:	6978      	ldr	r0, [r7, #20]
 80020d0:	f7fe ff45 	bl	8000f5e <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 80020d4:	4603      	mov	r3, r0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f001 ff34 	bl	8003f44 <_ZN6BMP39011defaultInitEv>
 80020dc:	4603      	mov	r3, r0
 80020de:	f083 0301 	eor.w	r3, r3, #1
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <_Z19sensorsDataReadTaskPv+0xc0>
	  startup = false;
 80020e8:	2300      	movs	r3, #0
 80020ea:	74fb      	strb	r3, [r7, #19]
	flightControllerInstance->getBMP390instance().update();
 80020ec:	6978      	ldr	r0, [r7, #20]
 80020ee:	f7fe ff36 	bl	8000f5e <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f001 ffe0 	bl	80040ba <_ZN6BMP3906updateEv>

	flightControllerInstance->getFrSkyRXinstance().begin();
 80020fa:	6978      	ldr	r0, [r7, #20]
 80020fc:	f7fe ff63 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8002100:	4603      	mov	r3, r0
 8002102:	4618      	mov	r0, r3
 8002104:	f003 f9d2 	bl	80054ac <_ZN7FrSkyRX5beginEv>
	flightControllerInstance->getMB1043instance().begin();
 8002108:	6978      	ldr	r0, [r7, #20]
 800210a:	f7fe ff69 	bl	8000fe0 <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 800210e:	4603      	mov	r3, r0
 8002110:	4618      	mov	r0, r3
 8002112:	f006 fa2d 	bl	8008570 <_ZN6MB10435beginEv>
	flightControllerInstance->getPMW3901UYinstance().begin();
 8002116:	6978      	ldr	r0, [r7, #20]
 8002118:	f7fe ff48 	bl	8000fac <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 800211c:	4603      	mov	r3, r0
 800211e:	4618      	mov	r0, r3
 8002120:	f006 fb96 	bl	8008850 <_ZN9PMW3901UY5beginEv>
	flightControllerInstance->getVL53L0Xinstance().begin();
 8002124:	6978      	ldr	r0, [r7, #20]
 8002126:	f7fe ff68 	bl	8000ffa <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 800212a:	4603      	mov	r3, r0
 800212c:	4618      	mov	r0, r3
 800212e:	f007 f827 	bl	8009180 <_ZN7VL53L0X5beginEv>

	uint32_t currentSensor = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
	xTaskCreate(DynamicsProcessTask,"DynamicsProcessTask",2048,NULL,tskIDLE_PRIORITY+2, flightControllerInstance->getDynamicsProcessHandlerPtr());
 8002136:	6978      	ldr	r0, [r7, #20]
 8002138:	f7fe ff93 	bl	8001062 <_ZN30FlightControllorImplementation28getDynamicsProcessHandlerPtrEv>
 800213c:	4603      	mov	r3, r0
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	2302      	movs	r3, #2
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2300      	movs	r3, #0
 8002146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800214a:	4964      	ldr	r1, [pc, #400]	; (80022dc <_Z19sensorsDataReadTaskPv+0x2b0>)
 800214c:	4864      	ldr	r0, [pc, #400]	; (80022e0 <_Z19sensorsDataReadTaskPv+0x2b4>)
 800214e:	f014 fcb7 	bl	8016ac0 <xTaskCreate>
	xTaskCreate(FaultsCheckTask,"FaultsCheckTask",1024,NULL,tskIDLE_PRIORITY+2, flightControllerInstance->getFaultsCheckHandlerPtr());
 8002152:	6978      	ldr	r0, [r7, #20]
 8002154:	f7fe ff6b 	bl	800102e <_ZN30FlightControllorImplementation24getFaultsCheckHandlerPtrEv>
 8002158:	4603      	mov	r3, r0
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	2302      	movs	r3, #2
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2300      	movs	r3, #0
 8002162:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002166:	495f      	ldr	r1, [pc, #380]	; (80022e4 <_Z19sensorsDataReadTaskPv+0x2b8>)
 8002168:	485f      	ldr	r0, [pc, #380]	; (80022e8 <_Z19sensorsDataReadTaskPv+0x2bc>)
 800216a:	f014 fca9 	bl	8016ac0 <xTaskCreate>

	while (1)
	{
		if (xTaskNotifyWait(0x00, 0xFFFFFFFFUL, &currentSensor, portMAX_DELAY) == pdTRUE)
 800216e:	f107 0208 	add.w	r2, r7, #8
 8002172:	f04f 33ff 	mov.w	r3, #4294967295
 8002176:	f04f 31ff 	mov.w	r1, #4294967295
 800217a:	2000      	movs	r0, #0
 800217c:	f015 f958 	bl	8017430 <xTaskNotifyWait>
 8002180:	4603      	mov	r3, r0
 8002182:	2b01      	cmp	r3, #1
 8002184:	bf0c      	ite	eq
 8002186:	2301      	moveq	r3, #1
 8002188:	2300      	movne	r3, #0
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0ee      	beq.n	800216e <_Z19sensorsDataReadTaskPv+0x142>
		{
			if (currentSensor & EnumSensorsInterrupt::ICM42688P_t)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00e      	beq.n	80021b8 <_Z19sensorsDataReadTaskPv+0x18c>
			{
				flightControllerInstance->getICM42688Pinstance().update();
 800219a:	6978      	ldr	r0, [r7, #20]
 800219c:	f7fe feec 	bl	8000f78 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f005 fb22 	bl	80077ec <_ZN9ICM42688P6updateEv>
				flightControllerInstance->getICM42688Pinstance().incrementTaskCounter();
 80021a8:	6978      	ldr	r0, [r7, #20]
 80021aa:	f7fe fee5 	bl	8000f78 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80021ae:	4603      	mov	r3, r0
 80021b0:	3340      	adds	r3, #64	; 0x40
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fc6e 	bl	8001a94 <_ZN12CallsCounter20incrementTaskCounterEv>
				if (testt==duplicates)
					duplicatesCounter++;
				duplicates = testt;*/
			}

			if (currentSensor & EnumSensorsInterrupt::BMP390_t)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00e      	beq.n	80021e0 <_Z19sensorsDataReadTaskPv+0x1b4>
			{
				flightControllerInstance->getBMP390instance().update();
 80021c2:	6978      	ldr	r0, [r7, #20]
 80021c4:	f7fe fecb 	bl	8000f5e <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f001 ff75 	bl	80040ba <_ZN6BMP3906updateEv>
				flightControllerInstance->getBMP390instance().incrementTaskCounter();
 80021d0:	6978      	ldr	r0, [r7, #20]
 80021d2:	f7fe fec4 	bl	8000f5e <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 80021d6:	4603      	mov	r3, r0
 80021d8:	3340      	adds	r3, #64	; 0x40
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fc5a 	bl	8001a94 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			if (currentSensor & EnumSensorsInterrupt::LIS3MDLTR_t)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00e      	beq.n	8002208 <_Z19sensorsDataReadTaskPv+0x1dc>
			{
				flightControllerInstance->getLIS3MDLTRinstance().update();
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f7fe fe9f 	bl	8000f2e <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f005 ff7c 	bl	80080f0 <_ZN9LIS3MDLTR6updateEv>
				flightControllerInstance->getLIS3MDLTRinstance().incrementTaskCounter();
 80021f8:	6978      	ldr	r0, [r7, #20]
 80021fa:	f7fe fe98 	bl	8000f2e <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 80021fe:	4603      	mov	r3, r0
 8002200:	3340      	adds	r3, #64	; 0x40
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fc46 	bl	8001a94 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			if (currentSensor & EnumSensorsInterrupt::PMW_t)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d011      	beq.n	8002236 <_Z19sensorsDataReadTaskPv+0x20a>
			{
				__HAL_UART_FLUSH_DRREGISTER(&huart2);
 8002212:	4b36      	ldr	r3, [pc, #216]	; (80022ec <_Z19sensorsDataReadTaskPv+0x2c0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
				flightControllerInstance->getPMW3901UYinstance().update();
 8002218:	6978      	ldr	r0, [r7, #20]
 800221a:	f7fe fec7 	bl	8000fac <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 800221e:	4603      	mov	r3, r0
 8002220:	4618      	mov	r0, r3
 8002222:	f006 fb25 	bl	8008870 <_ZN9PMW3901UY6updateEv>
				flightControllerInstance->getPMW3901UYinstance().incrementTaskCounter();
 8002226:	6978      	ldr	r0, [r7, #20]
 8002228:	f7fe fec0 	bl	8000fac <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 800222c:	4603      	mov	r3, r0
 800222e:	3340      	adds	r3, #64	; 0x40
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fc2f 	bl	8001a94 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			if (currentSensor & EnumSensorsInterrupt::REMOTERX_t)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01b      	beq.n	8002278 <_Z19sensorsDataReadTaskPv+0x24c>
			{
				FaultsStatus faultStatus = flightControllerInstance->getCurrentFaultsStatus();
 8002240:	6978      	ldr	r0, [r7, #20]
 8002242:	f7fe ff1b 	bl	800107c <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>
 8002246:	60f8      	str	r0, [r7, #12]

				if (faultStatus != FaultsStatus::FAILURE && faultStatus != FaultsStatus::CRITICAL)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d014      	beq.n	8002278 <_Z19sensorsDataReadTaskPv+0x24c>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2b03      	cmp	r3, #3
 8002252:	d011      	beq.n	8002278 <_Z19sensorsDataReadTaskPv+0x24c>
				{
					__HAL_UART_FLUSH_DRREGISTER(&huart3);
 8002254:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <_Z19sensorsDataReadTaskPv+0x2c4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
					flightControllerInstance->getFrSkyRXinstance().update();
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f7fe feb3 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8002260:	4603      	mov	r3, r0
 8002262:	4618      	mov	r0, r3
 8002264:	f003 f932 	bl	80054cc <_ZN7FrSkyRX6updateEv>
					flightControllerInstance->getFrSkyRXinstance().incrementTaskCounter();
 8002268:	6978      	ldr	r0, [r7, #20]
 800226a:	f7fe feac 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 800226e:	4603      	mov	r3, r0
 8002270:	3340      	adds	r3, #64	; 0x40
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fc0e 	bl	8001a94 <_ZN12CallsCounter20incrementTaskCounterEv>
				}
			}

			if (currentSensor & EnumSensorsInterrupt::SONAR_t)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f003 0320 	and.w	r3, r3, #32
 800227e:	2b00      	cmp	r3, #0
 8002280:	d011      	beq.n	80022a6 <_Z19sensorsDataReadTaskPv+0x27a>
			{
			   __HAL_UART_FLUSH_DRREGISTER(&huart4);
 8002282:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <_Z19sensorsDataReadTaskPv+0x2c8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
			   flightControllerInstance->getMB1043instance().update();
 8002288:	6978      	ldr	r0, [r7, #20]
 800228a:	f7fe fea9 	bl	8000fe0 <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 800228e:	4603      	mov	r3, r0
 8002290:	4618      	mov	r0, r3
 8002292:	f006 f97d 	bl	8008590 <_ZN6MB10436updateEv>
			   flightControllerInstance->getMB1043instance().incrementTaskCounter();
 8002296:	6978      	ldr	r0, [r7, #20]
 8002298:	f7fe fea2 	bl	8000fe0 <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 800229c:	4603      	mov	r3, r0
 800229e:	3340      	adds	r3, #64	; 0x40
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fbf7 	bl	8001a94 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			if (currentSensor & EnumSensorsInterrupt::VL53L0X_t)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f43f af5e 	beq.w	800216e <_Z19sensorsDataReadTaskPv+0x142>
			{
			   __HAL_UART_FLUSH_DRREGISTER(&huart6);
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <_Z19sensorsDataReadTaskPv+0x2cc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
			   flightControllerInstance->getVL53L0Xinstance().update();
 80022b8:	6978      	ldr	r0, [r7, #20]
 80022ba:	f7fe fe9e 	bl	8000ffa <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 80022be:	4603      	mov	r3, r0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f006 ff6f 	bl	80091a4 <_ZN7VL53L0X6updateEv>
			   flightControllerInstance->getVL53L0Xinstance().incrementTaskCounter();
 80022c6:	6978      	ldr	r0, [r7, #20]
 80022c8:	f7fe fe97 	bl	8000ffa <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 80022cc:	4603      	mov	r3, r0
 80022ce:	3340      	adds	r3, #64	; 0x40
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fbdf 	bl	8001a94 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			//taskCounter++;
		}
	}
 80022d6:	e74a      	b.n	800216e <_Z19sensorsDataReadTaskPv+0x142>
 80022d8:	20000698 	.word	0x20000698
 80022dc:	0801a4e8 	.word	0x0801a4e8
 80022e0:	08001bc9 	.word	0x08001bc9
 80022e4:	0801a4fc 	.word	0x0801a4fc
 80022e8:	08001f3d 	.word	0x08001f3d
 80022ec:	20000768 	.word	0x20000768
 80022f0:	200007ac 	.word	0x200007ac
 80022f4:	200006e0 	.word	0x200006e0
 80022f8:	200007f0 	.word	0x200007f0

080022fc <HAL_UART_TxCpltCallback>:

#include "stm32f4xx_hal.h"
#include "FlightControllerImplementation.hpp"

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8002304:	f7ff fa1e 	bl	8001744 <_ZN30FlightControllorImplementation11getInstanceEv>
 8002308:	60f8      	str	r0, [r7, #12]
    if (huart->Instance == USART1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a07      	ldr	r2, [pc, #28]	; (800232c <HAL_UART_TxCpltCallback+0x30>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d106      	bne.n	8002322 <HAL_UART_TxCpltCallback+0x26>
    {
    	flightControllerInstance->getHC05instance().printfSensorsValues();
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f7fe fe3c 	bl	8000f92 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 800231a:	4603      	mov	r3, r0
 800231c:	4618      	mov	r0, r3
 800231e:	f003 fd91 	bl	8005e44 <_ZN4HC0519printfSensorsValuesEv>
    }
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40011000 	.word	0x40011000

08002330 <HAL_TIM_PeriodElapsedCallback>:

int timCounter2 = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a04      	ldr	r2, [pc, #16]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d101      	bne.n	8002346 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002342:	f007 f8c7 	bl	80094d4 <HAL_IncTick>

  if (htim->Instance == TIM4)
  {
	  //timCounter2++;
  }
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40010000 	.word	0x40010000

08002354 <HAL_GPIO_EXTI_Callback>:

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af02      	add	r7, sp, #8
 800235a:	4603      	mov	r3, r0
 800235c:	80fb      	strh	r3, [r7, #6]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8002362:	f7ff f9ef 	bl	8001744 <_ZN30FlightControllorImplementation11getInstanceEv>
 8002366:	6178      	str	r0, [r7, #20]
	TaskHandle_t* sensorsDataReadHandler = flightControllerInstance->getSensorsDataReadHandlerPtr();
 8002368:	6978      	ldr	r0, [r7, #20]
 800236a:	f7fe fe6d 	bl	8001048 <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>
 800236e:	6138      	str	r0, [r7, #16]

	switch (GPIO_Pin)
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002376:	d024      	beq.n	80023c2 <HAL_GPIO_EXTI_Callback+0x6e>
 8002378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800237c:	dc60      	bgt.n	8002440 <HAL_GPIO_EXTI_Callback+0xec>
 800237e:	2b04      	cmp	r3, #4
 8002380:	d040      	beq.n	8002404 <HAL_GPIO_EXTI_Callback+0xb0>
 8002382:	2b10      	cmp	r3, #16
 8002384:	d15c      	bne.n	8002440 <HAL_GPIO_EXTI_Callback+0xec>
	{
	case (GPIO_PIN_4):
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::ICM42688P_t, eSetBits, &pxHigherPriorityTaskWoken);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	f107 030c 	add.w	r3, r7, #12
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	2300      	movs	r3, #0
 8002392:	2201      	movs	r2, #1
 8002394:	2101      	movs	r1, #1
 8002396:	f015 f8a5 	bl	80174e4 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d007      	beq.n	80023b0 <HAL_GPIO_EXTI_Callback+0x5c>
 80023a0:	4b29      	ldr	r3, [pc, #164]	; (8002448 <HAL_GPIO_EXTI_Callback+0xf4>)
 80023a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getICM42688Pinstance().incrementInterruptCounter();
 80023b0:	6978      	ldr	r0, [r7, #20]
 80023b2:	f7fe fde1 	bl	8000f78 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80023b6:	4603      	mov	r3, r0
 80023b8:	3340      	adds	r3, #64	; 0x40
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fb58 	bl	8001a70 <_ZN12CallsCounter25incrementInterruptCounterEv>
		break;
 80023c0:	e03e      	b.n	8002440 <HAL_GPIO_EXTI_Callback+0xec>

	case (GPIO_PIN_8):
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::BMP390_t, eSetBits, &pxHigherPriorityTaskWoken);
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	2300      	movs	r3, #0
 80023ce:	2201      	movs	r2, #1
 80023d0:	2102      	movs	r1, #2
 80023d2:	f015 f887 	bl	80174e4 <xTaskGenericNotifyFromISR>
		if (pxHigherPriorityTaskWoken)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <HAL_GPIO_EXTI_Callback+0x9e>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <HAL_GPIO_EXTI_Callback+0x9e>
 80023e2:	4b19      	ldr	r3, [pc, #100]	; (8002448 <HAL_GPIO_EXTI_Callback+0xf4>)
 80023e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	f3bf 8f4f 	dsb	sy
 80023ee:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getBMP390instance().incrementInterruptCounter();
 80023f2:	6978      	ldr	r0, [r7, #20]
 80023f4:	f7fe fdb3 	bl	8000f5e <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 80023f8:	4603      	mov	r3, r0
 80023fa:	3340      	adds	r3, #64	; 0x40
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fb37 	bl	8001a70 <_ZN12CallsCounter25incrementInterruptCounterEv>
		break;
 8002402:	e01d      	b.n	8002440 <HAL_GPIO_EXTI_Callback+0xec>

	case (GPIO_PIN_2):
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::LIS3MDLTR_t, eSetBits, &pxHigherPriorityTaskWoken);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	f107 030c 	add.w	r3, r7, #12
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	2300      	movs	r3, #0
 8002410:	2201      	movs	r2, #1
 8002412:	2104      	movs	r1, #4
 8002414:	f015 f866 	bl	80174e4 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d007      	beq.n	800242e <HAL_GPIO_EXTI_Callback+0xda>
 800241e:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	f3bf 8f4f 	dsb	sy
 800242a:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getLIS3MDLTRinstance().incrementInterruptCounter();
 800242e:	6978      	ldr	r0, [r7, #20]
 8002430:	f7fe fd7d 	bl	8000f2e <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 8002434:	4603      	mov	r3, r0
 8002436:	3340      	adds	r3, #64	; 0x40
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fb19 	bl	8001a70 <_ZN12CallsCounter25incrementInterruptCounterEv>
		break;
 800243e:	bf00      	nop
	}
}
 8002440:	bf00      	nop
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	e000ed04 	.word	0xe000ed04

0800244c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af02      	add	r7, sp, #8
 8002452:	6078      	str	r0, [r7, #4]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8002458:	f7ff f974 	bl	8001744 <_ZN30FlightControllorImplementation11getInstanceEv>
 800245c:	6178      	str	r0, [r7, #20]
	TaskHandle_t* sensorsDataReadHandler = flightControllerInstance->getSensorsDataReadHandlerPtr();
 800245e:	6978      	ldr	r0, [r7, #20]
 8002460:	f7fe fdf2 	bl	8001048 <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>
 8002464:	6138      	str	r0, [r7, #16]

	if (huart->Instance == USART2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a46      	ldr	r2, [pc, #280]	; (8002584 <HAL_UART_RxCpltCallback+0x138>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d11d      	bne.n	80024ac <HAL_UART_RxCpltCallback+0x60>
	{
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::PMW_t, eSetBits, &pxHigherPriorityTaskWoken);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	f107 030c 	add.w	r3, r7, #12
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	2300      	movs	r3, #0
 800247c:	2201      	movs	r2, #1
 800247e:	2108      	movs	r1, #8
 8002480:	f015 f830 	bl	80174e4 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d007      	beq.n	800249a <HAL_UART_RxCpltCallback+0x4e>
 800248a:	4b3f      	ldr	r3, [pc, #252]	; (8002588 <HAL_UART_RxCpltCallback+0x13c>)
 800248c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	f3bf 8f4f 	dsb	sy
 8002496:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getPMW3901UYinstance().incrementInterruptCounter();
 800249a:	6978      	ldr	r0, [r7, #20]
 800249c:	f7fe fd86 	bl	8000fac <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 80024a0:	4603      	mov	r3, r0
 80024a2:	3340      	adds	r3, #64	; 0x40
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fae3 	bl	8001a70 <_ZN12CallsCounter25incrementInterruptCounterEv>
	{
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::VL53L0X_t, eSetBits, &pxHigherPriorityTaskWoken);
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
		flightControllerInstance->getVL53L0Xinstance().incrementInterruptCounter();
	}
}
 80024aa:	e067      	b.n	800257c <HAL_UART_RxCpltCallback+0x130>
	} else if (huart->Instance == USART3)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a36      	ldr	r2, [pc, #216]	; (800258c <HAL_UART_RxCpltCallback+0x140>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d11d      	bne.n	80024f2 <HAL_UART_RxCpltCallback+0xa6>
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::REMOTERX_t, eSetBits, &pxHigherPriorityTaskWoken);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	f107 030c 	add.w	r3, r7, #12
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2300      	movs	r3, #0
 80024c2:	2201      	movs	r2, #1
 80024c4:	2110      	movs	r1, #16
 80024c6:	f015 f80d 	bl	80174e4 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d007      	beq.n	80024e0 <HAL_UART_RxCpltCallback+0x94>
 80024d0:	4b2d      	ldr	r3, [pc, #180]	; (8002588 <HAL_UART_RxCpltCallback+0x13c>)
 80024d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	f3bf 8f4f 	dsb	sy
 80024dc:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getFrSkyRXinstance().incrementInterruptCounter();
 80024e0:	6978      	ldr	r0, [r7, #20]
 80024e2:	f7fe fd70 	bl	8000fc6 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 80024e6:	4603      	mov	r3, r0
 80024e8:	3340      	adds	r3, #64	; 0x40
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fac0 	bl	8001a70 <_ZN12CallsCounter25incrementInterruptCounterEv>
}
 80024f0:	e044      	b.n	800257c <HAL_UART_RxCpltCallback+0x130>
	} else if (huart->Instance == UART4)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a26      	ldr	r2, [pc, #152]	; (8002590 <HAL_UART_RxCpltCallback+0x144>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d11d      	bne.n	8002538 <HAL_UART_RxCpltCallback+0xec>
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::SONAR_t, eSetBits, &pxHigherPriorityTaskWoken);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	f107 030c 	add.w	r3, r7, #12
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	2300      	movs	r3, #0
 8002508:	2201      	movs	r2, #1
 800250a:	2120      	movs	r1, #32
 800250c:	f014 ffea 	bl	80174e4 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <HAL_UART_RxCpltCallback+0xda>
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <HAL_UART_RxCpltCallback+0x13c>)
 8002518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	f3bf 8f4f 	dsb	sy
 8002522:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getMB1043instance().incrementInterruptCounter();
 8002526:	6978      	ldr	r0, [r7, #20]
 8002528:	f7fe fd5a 	bl	8000fe0 <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 800252c:	4603      	mov	r3, r0
 800252e:	3340      	adds	r3, #64	; 0x40
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fa9d 	bl	8001a70 <_ZN12CallsCounter25incrementInterruptCounterEv>
}
 8002536:	e021      	b.n	800257c <HAL_UART_RxCpltCallback+0x130>
	}else if (huart->Instance == USART6)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a15      	ldr	r2, [pc, #84]	; (8002594 <HAL_UART_RxCpltCallback+0x148>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d11c      	bne.n	800257c <HAL_UART_RxCpltCallback+0x130>
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::VL53L0X_t, eSetBits, &pxHigherPriorityTaskWoken);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	f107 030c 	add.w	r3, r7, #12
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2300      	movs	r3, #0
 800254e:	2201      	movs	r2, #1
 8002550:	2140      	movs	r1, #64	; 0x40
 8002552:	f014 ffc7 	bl	80174e4 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_UART_RxCpltCallback+0x120>
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_UART_RxCpltCallback+0x13c>)
 800255e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getVL53L0Xinstance().incrementInterruptCounter();
 800256c:	6978      	ldr	r0, [r7, #20]
 800256e:	f7fe fd44 	bl	8000ffa <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 8002572:	4603      	mov	r3, r0
 8002574:	3340      	adds	r3, #64	; 0x40
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fa7a 	bl	8001a70 <_ZN12CallsCounter25incrementInterruptCounterEv>
}
 800257c:	bf00      	nop
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40004400 	.word	0x40004400
 8002588:	e000ed04 	.word	0xe000ed04
 800258c:	40004800 	.word	0x40004800
 8002590:	40004c00 	.word	0x40004c00
 8002594:	40011400 	.word	0x40011400

08002598 <main>:
static void MX_TIM4_Init(void);
static void MX_TIM3_Init();
static void MX_SDIO_SD_Init(void);

int main(void)
{
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b085      	sub	sp, #20
 800259c:	af02      	add	r7, sp, #8
  HAL_Init();//1.19 17 0.38 37 88.20
 800259e:	f006 ff77 	bl	8009490 <HAL_Init>
  SystemClock_Config();
 80025a2:	f000 f893 	bl	80026cc <_Z18SystemClock_Configv>

  MX_GPIO_Init();
 80025a6:	f000 fc43 	bl	8002e30 <_ZL12MX_GPIO_Initv>
  MX_USB_DEVICE_Init();
 80025aa:	f015 fd17 	bl	8017fdc <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 80025ae:	f000 fbd9 	bl	8002d64 <_ZL11MX_DMA_Initv>
  MX_SPI2_Init();
 80025b2:	f000 f995 	bl	80028e0 <_ZL12MX_SPI2_Initv>
  MX_USART1_UART_Init();
 80025b6:	f000 fb19 	bl	8002bec <_ZL19MX_USART1_UART_Initv>
  MX_SDIO_SD_Init();
 80025ba:	f000 f957 	bl	800286c <_ZL15MX_SDIO_SD_Initv>
  MX_USART3_UART_Init();
 80025be:	f000 fb71 	bl	8002ca4 <_ZL19MX_USART3_UART_Initv>
  MX_ADC1_Init();
 80025c2:	f000 f8f7 	bl	80027b4 <_ZL12MX_ADC1_Initv>
  MX_UART4_Init();
 80025c6:	f000 fae3 	bl	8002b90 <_ZL13MX_UART4_Initv>
  MX_USART2_UART_Init();
 80025ca:	f000 fb3d 	bl	8002c48 <_ZL19MX_USART2_UART_Initv>
  MX_USART6_UART_Init();
 80025ce:	f000 fb9b 	bl	8002d08 <_ZL19MX_USART6_UART_Initv>
  MX_TIM4_Init();
 80025d2:	f000 fa81 	bl	8002ad8 <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 80025d6:	f000 f9bf 	bl	8002958 <_ZL12MX_TIM3_Initv>

  FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 80025da:	f7ff f8b3 	bl	8001744 <_ZN30FlightControllorImplementation11getInstanceEv>
 80025de:	6078      	str	r0, [r7, #4]

  flightControllerInstance->getHC05instance().addSensor(&flightControllerInstance->getPMW3901UYinstance());
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7fe fcd6 	bl	8000f92 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 80025e6:	4604      	mov	r4, r0
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7fe fcdf 	bl	8000fac <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 80025ee:	4603      	mov	r3, r0
 80025f0:	4619      	mov	r1, r3
 80025f2:	4620      	mov	r0, r4
 80025f4:	f003 fc15 	bl	8005e22 <_ZN4HC059addSensorEP15PrintableSensor>
  flightControllerInstance->getHC05instance().addSensor(&flightControllerInstance->getVL53L0Xinstance());
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7fe fcca 	bl	8000f92 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 80025fe:	4604      	mov	r4, r0
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7fe fcfa 	bl	8000ffa <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 8002606:	4603      	mov	r3, r0
 8002608:	4619      	mov	r1, r3
 800260a:	4620      	mov	r0, r4
 800260c:	f003 fc09 	bl	8005e22 <_ZN4HC059addSensorEP15PrintableSensor>
  flightControllerInstance->getHC05instance().addSensor(&flightControllerInstance->getICM42688Pinstance());
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7fe fcbe 	bl	8000f92 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 8002616:	4604      	mov	r4, r0
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7fe fcad 	bl	8000f78 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <main+0x90>
 8002624:	3304      	adds	r3, #4
 8002626:	e000      	b.n	800262a <main+0x92>
 8002628:	2300      	movs	r3, #0
 800262a:	4619      	mov	r1, r3
 800262c:	4620      	mov	r0, r4
 800262e:	f003 fbf8 	bl	8005e22 <_ZN4HC059addSensorEP15PrintableSensor>

  flightControllerInstance->getHC05instance().addSensorParameter(HC05::SENSOR_DATA_PARAMETER::PMW_POS_Y);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fe fcad 	bl	8000f92 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 8002638:	4603      	mov	r3, r0
 800263a:	2116      	movs	r1, #22
 800263c:	4618      	mov	r0, r3
 800263e:	f003 fc4b 	bl	8005ed8 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>
  flightControllerInstance->getHC05instance().addSensorParameter(HC05::SENSOR_DATA_PARAMETER::PMW_POS_X);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe fca5 	bl	8000f92 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 8002648:	4603      	mov	r3, r0
 800264a:	2115      	movs	r1, #21
 800264c:	4618      	mov	r0, r3
 800264e:	f003 fc43 	bl	8005ed8 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>
  flightControllerInstance->getHC05instance().printfSensorsValues();
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe fc9d 	bl	8000f92 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 8002658:	4603      	mov	r3, r0
 800265a:	4618      	mov	r0, r3
 800265c:	f003 fbf2 	bl	8005e44 <_ZN4HC0519printfSensorsValuesEv>

  TIM3 -> CCR1 = 0;
 8002660:	4b16      	ldr	r3, [pc, #88]	; (80026bc <main+0x124>)
 8002662:	2200      	movs	r2, #0
 8002664:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3 -> CCR2 = 0;
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <main+0x124>)
 8002668:	2200      	movs	r2, #0
 800266a:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3 -> CCR3 = 0;
 800266c:	4b13      	ldr	r3, [pc, #76]	; (80026bc <main+0x124>)
 800266e:	2200      	movs	r2, #0
 8002670:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3 -> CCR4 = 0;
 8002672:	4b12      	ldr	r3, [pc, #72]	; (80026bc <main+0x124>)
 8002674:	2200      	movs	r2, #0
 8002676:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8002678:	2100      	movs	r1, #0
 800267a:	4811      	ldr	r0, [pc, #68]	; (80026c0 <main+0x128>)
 800267c:	f00c fbc4 	bl	800ee08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8002680:	2104      	movs	r1, #4
 8002682:	480f      	ldr	r0, [pc, #60]	; (80026c0 <main+0x128>)
 8002684:	f00c fbc0 	bl	800ee08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8002688:	2108      	movs	r1, #8
 800268a:	480d      	ldr	r0, [pc, #52]	; (80026c0 <main+0x128>)
 800268c:	f00c fbbc 	bl	800ee08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8002690:	210c      	movs	r1, #12
 8002692:	480b      	ldr	r0, [pc, #44]	; (80026c0 <main+0x128>)
 8002694:	f00c fbb8 	bl	800ee08 <HAL_TIM_PWM_Start>

  xTaskCreate(sensorsDataReadTask,"SensorsDataReadTask",1024,NULL,tskIDLE_PRIORITY+3, flightControllerInstance->getSensorsDataReadHandlerPtr());
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7fe fcd5 	bl	8001048 <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>
 800269e:	4603      	mov	r3, r0
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	2303      	movs	r3, #3
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2300      	movs	r3, #0
 80026a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ac:	4905      	ldr	r1, [pc, #20]	; (80026c4 <main+0x12c>)
 80026ae:	4806      	ldr	r0, [pc, #24]	; (80026c8 <main+0x130>)
 80026b0:	f014 fa06 	bl	8016ac0 <xTaskCreate>
  vTaskStartScheduler();
 80026b4:	f014 fbb8 	bl	8016e28 <vTaskStartScheduler>

  while (1)
 80026b8:	e7fe      	b.n	80026b8 <main+0x120>
 80026ba:	bf00      	nop
 80026bc:	40000400 	.word	0x40000400
 80026c0:	20000650 	.word	0x20000650
 80026c4:	0801a50c 	.word	0x0801a50c
 80026c8:	0800202d 	.word	0x0800202d

080026cc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b094      	sub	sp, #80	; 0x50
 80026d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026d2:	f107 0320 	add.w	r3, r7, #32
 80026d6:	2230      	movs	r2, #48	; 0x30
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f017 fd12 	bl	801a104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026e0:	f107 030c 	add.w	r3, r7, #12
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f0:	2300      	movs	r3, #0
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <_Z18SystemClock_Configv+0xe0>)
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	4a2c      	ldr	r2, [pc, #176]	; (80027ac <_Z18SystemClock_Configv+0xe0>)
 80026fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002700:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <_Z18SystemClock_Configv+0xe0>)
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800270c:	2300      	movs	r3, #0
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <_Z18SystemClock_Configv+0xe4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a26      	ldr	r2, [pc, #152]	; (80027b0 <_Z18SystemClock_Configv+0xe4>)
 8002716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <_Z18SystemClock_Configv+0xe4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002728:	2301      	movs	r3, #1
 800272a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800272c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002732:	2302      	movs	r3, #2
 8002734:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002736:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800273a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800273c:	2308      	movs	r3, #8
 800273e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002740:	2390      	movs	r3, #144	; 0x90
 8002742:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002744:	2302      	movs	r3, #2
 8002746:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002748:	2306      	movs	r3, #6
 800274a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800274c:	f107 0320 	add.w	r3, r7, #32
 8002750:	4618      	mov	r0, r3
 8002752:	f009 fe33 	bl	800c3bc <HAL_RCC_OscConfig>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf14      	ite	ne
 800275c:	2301      	movne	r3, #1
 800275e:	2300      	moveq	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8002766:	f000 fc23 	bl	8002fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800276a:	230f      	movs	r3, #15
 800276c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800276e:	2302      	movs	r3, #2
 8002770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002776:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800277a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800277c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002780:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002782:	f107 030c 	add.w	r3, r7, #12
 8002786:	2104      	movs	r1, #4
 8002788:	4618      	mov	r0, r3
 800278a:	f00a f88f 	bl	800c8ac <HAL_RCC_ClockConfig>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	bf14      	ite	ne
 8002794:	2301      	movne	r3, #1
 8002796:	2300      	moveq	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800279e:	f000 fc07 	bl	8002fb0 <Error_Handler>
  }
}
 80027a2:	bf00      	nop
 80027a4:	3750      	adds	r7, #80	; 0x50
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40007000 	.word	0x40007000

080027b4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027ba:	463b      	mov	r3, r7
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80027c6:	4b26      	ldr	r3, [pc, #152]	; (8002860 <_ZL12MX_ADC1_Initv+0xac>)
 80027c8:	4a26      	ldr	r2, [pc, #152]	; (8002864 <_ZL12MX_ADC1_Initv+0xb0>)
 80027ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80027cc:	4b24      	ldr	r3, [pc, #144]	; (8002860 <_ZL12MX_ADC1_Initv+0xac>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027d2:	4b23      	ldr	r3, [pc, #140]	; (8002860 <_ZL12MX_ADC1_Initv+0xac>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80027d8:	4b21      	ldr	r3, [pc, #132]	; (8002860 <_ZL12MX_ADC1_Initv+0xac>)
 80027da:	2200      	movs	r2, #0
 80027dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80027de:	4b20      	ldr	r3, [pc, #128]	; (8002860 <_ZL12MX_ADC1_Initv+0xac>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027e4:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <_ZL12MX_ADC1_Initv+0xac>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027ec:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <_ZL12MX_ADC1_Initv+0xac>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027f2:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <_ZL12MX_ADC1_Initv+0xac>)
 80027f4:	4a1c      	ldr	r2, [pc, #112]	; (8002868 <_ZL12MX_ADC1_Initv+0xb4>)
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027f8:	4b19      	ldr	r3, [pc, #100]	; (8002860 <_ZL12MX_ADC1_Initv+0xac>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80027fe:	4b18      	ldr	r3, [pc, #96]	; (8002860 <_ZL12MX_ADC1_Initv+0xac>)
 8002800:	2201      	movs	r2, #1
 8002802:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002804:	4b16      	ldr	r3, [pc, #88]	; (8002860 <_ZL12MX_ADC1_Initv+0xac>)
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800280c:	4b14      	ldr	r3, [pc, #80]	; (8002860 <_ZL12MX_ADC1_Initv+0xac>)
 800280e:	2201      	movs	r2, #1
 8002810:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002812:	4813      	ldr	r0, [pc, #76]	; (8002860 <_ZL12MX_ADC1_Initv+0xac>)
 8002814:	f006 fea2 	bl	800955c <HAL_ADC_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	bf14      	ite	ne
 800281e:	2301      	movne	r3, #1
 8002820:	2300      	moveq	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8002828:	f000 fbc2 	bl	8002fb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800282c:	230a      	movs	r3, #10
 800282e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002830:	2301      	movs	r3, #1
 8002832:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002834:	2300      	movs	r3, #0
 8002836:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002838:	463b      	mov	r3, r7
 800283a:	4619      	mov	r1, r3
 800283c:	4808      	ldr	r0, [pc, #32]	; (8002860 <_ZL12MX_ADC1_Initv+0xac>)
 800283e:	f006 ffff 	bl	8009840 <HAL_ADC_ConfigChannel>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	bf14      	ite	ne
 8002848:	2301      	movne	r3, #1
 800284a:	2300      	moveq	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8002852:	f000 fbad 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002856:	bf00      	nop
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	2000040c 	.word	0x2000040c
 8002864:	40012000 	.word	0x40012000
 8002868:	0f000001 	.word	0x0f000001

0800286c <_ZL15MX_SDIO_SD_Initv>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002870:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002872:	4a1a      	ldr	r2, [pc, #104]	; (80028dc <_ZL15MX_SDIO_SD_Initv+0x70>)
 8002874:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002876:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002878:	2200      	movs	r2, #0
 800287a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800287c:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002882:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002884:	2200      	movs	r2, #0
 8002886:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002888:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002890:	2200      	movs	r2, #0
 8002892:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8002894:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002896:	2208      	movs	r2, #8
 8002898:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800289a:	480f      	ldr	r0, [pc, #60]	; (80028d8 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 800289c:	f00a fa56 	bl	800cd4c <HAL_SD_Init>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	bf14      	ite	ne
 80028a6:	2301      	movne	r3, #1
 80028a8:	2300      	moveq	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <_ZL15MX_SDIO_SD_Initv+0x48>
  {
    Error_Handler();
 80028b0:	f000 fb7e 	bl	8002fb0 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80028b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028b8:	4807      	ldr	r0, [pc, #28]	; (80028d8 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 80028ba:	f00b f82b 	bl	800d914 <HAL_SD_ConfigWideBusOperation>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf14      	ite	ne
 80028c4:	2301      	movne	r3, #1
 80028c6:	2300      	moveq	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <_ZL15MX_SDIO_SD_Initv+0x66>
  {
    Error_Handler();
 80028ce:	f000 fb6f 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	200004b4 	.word	0x200004b4
 80028dc:	40012c00 	.word	0x40012c00

080028e0 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80028e4:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <_ZL12MX_SPI2_Initv+0x70>)
 80028e6:	4a1b      	ldr	r2, [pc, #108]	; (8002954 <_ZL12MX_SPI2_Initv+0x74>)
 80028e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028ea:	4b19      	ldr	r3, [pc, #100]	; (8002950 <_ZL12MX_SPI2_Initv+0x70>)
 80028ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028f2:	4b17      	ldr	r3, [pc, #92]	; (8002950 <_ZL12MX_SPI2_Initv+0x70>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028f8:	4b15      	ldr	r3, [pc, #84]	; (8002950 <_ZL12MX_SPI2_Initv+0x70>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028fe:	4b14      	ldr	r3, [pc, #80]	; (8002950 <_ZL12MX_SPI2_Initv+0x70>)
 8002900:	2200      	movs	r2, #0
 8002902:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002904:	4b12      	ldr	r3, [pc, #72]	; (8002950 <_ZL12MX_SPI2_Initv+0x70>)
 8002906:	2200      	movs	r2, #0
 8002908:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800290a:	4b11      	ldr	r3, [pc, #68]	; (8002950 <_ZL12MX_SPI2_Initv+0x70>)
 800290c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002910:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002912:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <_ZL12MX_SPI2_Initv+0x70>)
 8002914:	2200      	movs	r2, #0
 8002916:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002918:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <_ZL12MX_SPI2_Initv+0x70>)
 800291a:	2200      	movs	r2, #0
 800291c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800291e:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <_ZL12MX_SPI2_Initv+0x70>)
 8002920:	2200      	movs	r2, #0
 8002922:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002924:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <_ZL12MX_SPI2_Initv+0x70>)
 8002926:	2200      	movs	r2, #0
 8002928:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <_ZL12MX_SPI2_Initv+0x70>)
 800292c:	220a      	movs	r2, #10
 800292e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002930:	4807      	ldr	r0, [pc, #28]	; (8002950 <_ZL12MX_SPI2_Initv+0x70>)
 8002932:	f00b fb96 	bl	800e062 <HAL_SPI_Init>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf14      	ite	ne
 800293c:	2301      	movne	r3, #1
 800293e:	2300      	moveq	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8002946:	f000 fb33 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000538 	.word	0x20000538
 8002954:	40003800 	.word	0x40003800

08002958 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08e      	sub	sp, #56	; 0x38
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800295e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	609a      	str	r2, [r3, #8]
 800296a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800296c:	f107 0320 	add.w	r3, r7, #32
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002976:	1d3b      	adds	r3, r7, #4
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	611a      	str	r2, [r3, #16]
 8002984:	615a      	str	r2, [r3, #20]
 8002986:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002988:	4b51      	ldr	r3, [pc, #324]	; (8002ad0 <_ZL12MX_TIM3_Initv+0x178>)
 800298a:	4a52      	ldr	r2, [pc, #328]	; (8002ad4 <_ZL12MX_TIM3_Initv+0x17c>)
 800298c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3-1;
 800298e:	4b50      	ldr	r3, [pc, #320]	; (8002ad0 <_ZL12MX_TIM3_Initv+0x178>)
 8002990:	2202      	movs	r2, #2
 8002992:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002994:	4b4e      	ldr	r3, [pc, #312]	; (8002ad0 <_ZL12MX_TIM3_Initv+0x178>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6000-1;
 800299a:	4b4d      	ldr	r3, [pc, #308]	; (8002ad0 <_ZL12MX_TIM3_Initv+0x178>)
 800299c:	f241 726f 	movw	r2, #5999	; 0x176f
 80029a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a2:	4b4b      	ldr	r3, [pc, #300]	; (8002ad0 <_ZL12MX_TIM3_Initv+0x178>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a8:	4b49      	ldr	r3, [pc, #292]	; (8002ad0 <_ZL12MX_TIM3_Initv+0x178>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029ae:	4848      	ldr	r0, [pc, #288]	; (8002ad0 <_ZL12MX_TIM3_Initv+0x178>)
 80029b0:	f00c f910 	bl	800ebd4 <HAL_TIM_Base_Init>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	bf14      	ite	ne
 80029ba:	2301      	movne	r3, #1
 80029bc:	2300      	moveq	r3, #0
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 80029c4:	f000 faf4 	bl	8002fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029d2:	4619      	mov	r1, r3
 80029d4:	483e      	ldr	r0, [pc, #248]	; (8002ad0 <_ZL12MX_TIM3_Initv+0x178>)
 80029d6:	f00c fca9 	bl	800f32c <HAL_TIM_ConfigClockSource>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf14      	ite	ne
 80029e0:	2301      	movne	r3, #1
 80029e2:	2300      	moveq	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 80029ea:	f000 fae1 	bl	8002fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029ee:	4838      	ldr	r0, [pc, #224]	; (8002ad0 <_ZL12MX_TIM3_Initv+0x178>)
 80029f0:	f00c f9b0 	bl	800ed54 <HAL_TIM_PWM_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	bf14      	ite	ne
 80029fa:	2301      	movne	r3, #1
 80029fc:	2300      	moveq	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8002a04:	f000 fad4 	bl	8002fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a10:	f107 0320 	add.w	r3, r7, #32
 8002a14:	4619      	mov	r1, r3
 8002a16:	482e      	ldr	r0, [pc, #184]	; (8002ad0 <_ZL12MX_TIM3_Initv+0x178>)
 8002a18:	f00d f888 	bl	800fb2c <HAL_TIMEx_MasterConfigSynchronization>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	bf14      	ite	ne
 8002a22:	2301      	movne	r3, #1
 8002a24:	2300      	moveq	r3, #0
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8002a2c:	f000 fac0 	bl	8002fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a30:	2360      	movs	r3, #96	; 0x60
 8002a32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a40:	1d3b      	adds	r3, r7, #4
 8002a42:	2200      	movs	r2, #0
 8002a44:	4619      	mov	r1, r3
 8002a46:	4822      	ldr	r0, [pc, #136]	; (8002ad0 <_ZL12MX_TIM3_Initv+0x178>)
 8002a48:	f00c fbae 	bl	800f1a8 <HAL_TIM_PWM_ConfigChannel>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	bf14      	ite	ne
 8002a52:	2301      	movne	r3, #1
 8002a54:	2300      	moveq	r3, #0
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8002a5c:	f000 faa8 	bl	8002fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	2204      	movs	r2, #4
 8002a64:	4619      	mov	r1, r3
 8002a66:	481a      	ldr	r0, [pc, #104]	; (8002ad0 <_ZL12MX_TIM3_Initv+0x178>)
 8002a68:	f00c fb9e 	bl	800f1a8 <HAL_TIM_PWM_ConfigChannel>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	bf14      	ite	ne
 8002a72:	2301      	movne	r3, #1
 8002a74:	2300      	moveq	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 8002a7c:	f000 fa98 	bl	8002fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a80:	1d3b      	adds	r3, r7, #4
 8002a82:	2208      	movs	r2, #8
 8002a84:	4619      	mov	r1, r3
 8002a86:	4812      	ldr	r0, [pc, #72]	; (8002ad0 <_ZL12MX_TIM3_Initv+0x178>)
 8002a88:	f00c fb8e 	bl	800f1a8 <HAL_TIM_PWM_ConfigChannel>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bf14      	ite	ne
 8002a92:	2301      	movne	r3, #1
 8002a94:	2300      	moveq	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <_ZL12MX_TIM3_Initv+0x148>
  {
    Error_Handler();
 8002a9c:	f000 fa88 	bl	8002fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	480a      	ldr	r0, [pc, #40]	; (8002ad0 <_ZL12MX_TIM3_Initv+0x178>)
 8002aa8:	f00c fb7e 	bl	800f1a8 <HAL_TIM_PWM_ConfigChannel>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <_ZL12MX_TIM3_Initv+0x168>
  {
    Error_Handler();
 8002abc:	f000 fa78 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ac0:	4803      	ldr	r0, [pc, #12]	; (8002ad0 <_ZL12MX_TIM3_Initv+0x178>)
 8002ac2:	f000 fc6f 	bl	80033a4 <HAL_TIM_MspPostInit>

}
 8002ac6:	bf00      	nop
 8002ac8:	3738      	adds	r7, #56	; 0x38
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000650 	.word	0x20000650
 8002ad4:	40000400 	.word	0x40000400

08002ad8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ade:	f107 0308 	add.w	r3, r7, #8
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aec:	463b      	mov	r3, r7
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002af4:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <_ZL12MX_TIM4_Initv+0xb0>)
 8002af6:	4a25      	ldr	r2, [pc, #148]	; (8002b8c <_ZL12MX_TIM4_Initv+0xb4>)
 8002af8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 144-1;
 8002afa:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <_ZL12MX_TIM4_Initv+0xb0>)
 8002afc:	228f      	movs	r2, #143	; 0x8f
 8002afe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b00:	4b21      	ldr	r3, [pc, #132]	; (8002b88 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b08:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002b0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b0e:	4b1e      	ldr	r3, [pc, #120]	; (8002b88 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b14:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b1a:	481b      	ldr	r0, [pc, #108]	; (8002b88 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b1c:	f00c f85a 	bl	800ebd4 <HAL_TIM_Base_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	bf14      	ite	ne
 8002b26:	2301      	movne	r3, #1
 8002b28:	2300      	moveq	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8002b30:	f000 fa3e 	bl	8002fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b3a:	f107 0308 	add.w	r3, r7, #8
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4811      	ldr	r0, [pc, #68]	; (8002b88 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b42:	f00c fbf3 	bl	800f32c <HAL_TIM_ConfigClockSource>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf14      	ite	ne
 8002b4c:	2301      	movne	r3, #1
 8002b4e:	2300      	moveq	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8002b56:	f000 fa2b 	bl	8002fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b62:	463b      	mov	r3, r7
 8002b64:	4619      	mov	r1, r3
 8002b66:	4808      	ldr	r0, [pc, #32]	; (8002b88 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b68:	f00c ffe0 	bl	800fb2c <HAL_TIMEx_MasterConfigSynchronization>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	bf14      	ite	ne
 8002b72:	2301      	movne	r3, #1
 8002b74:	2300      	moveq	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8002b7c:	f000 fa18 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b80:	bf00      	nop
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000698 	.word	0x20000698
 8002b8c:	40000800 	.word	0x40000800

08002b90 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002b94:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <_ZL13MX_UART4_Initv+0x54>)
 8002b96:	4a14      	ldr	r2, [pc, #80]	; (8002be8 <_ZL13MX_UART4_Initv+0x58>)
 8002b98:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <_ZL13MX_UART4_Initv+0x54>)
 8002b9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ba0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <_ZL13MX_UART4_Initv+0x54>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <_ZL13MX_UART4_Initv+0x54>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <_ZL13MX_UART4_Initv+0x54>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <_ZL13MX_UART4_Initv+0x54>)
 8002bb6:	220c      	movs	r2, #12
 8002bb8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <_ZL13MX_UART4_Initv+0x54>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bc0:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <_ZL13MX_UART4_Initv+0x54>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002bc6:	4807      	ldr	r0, [pc, #28]	; (8002be4 <_ZL13MX_UART4_Initv+0x54>)
 8002bc8:	f00d f840 	bl	800fc4c <HAL_UART_Init>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	bf14      	ite	ne
 8002bd2:	2301      	movne	r3, #1
 8002bd4:	2300      	moveq	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 8002bdc:	f000 f9e8 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	200006e0 	.word	0x200006e0
 8002be8:	40004c00 	.word	0x40004c00

08002bec <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bf0:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002bf2:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002bf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002bf6:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002bf8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002bfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c04:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c12:	220c      	movs	r2, #12
 8002c14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c16:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c1c:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c22:	4807      	ldr	r0, [pc, #28]	; (8002c40 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c24:	f00d f812 	bl	800fc4c <HAL_UART_Init>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bf14      	ite	ne
 8002c2e:	2301      	movne	r3, #1
 8002c30:	2300      	moveq	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002c38:	f000 f9ba 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20000724 	.word	0x20000724
 8002c44:	40011000 	.word	0x40011000

08002c48 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c4c:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c4e:	4a14      	ldr	r2, [pc, #80]	; (8002ca0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002c50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c54:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002c58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c5a:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c60:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c66:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c6e:	220c      	movs	r2, #12
 8002c70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c78:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c7e:	4807      	ldr	r0, [pc, #28]	; (8002c9c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c80:	f00c ffe4 	bl	800fc4c <HAL_UART_Init>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	bf14      	ite	ne
 8002c8a:	2301      	movne	r3, #1
 8002c8c:	2300      	moveq	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002c94:	f000 f98c 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000768 	.word	0x20000768
 8002ca0:	40004400 	.word	0x40004400

08002ca4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ca8:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <_ZL19MX_USART3_UART_Initv+0x58>)
 8002caa:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <_ZL19MX_USART3_UART_Initv+0x5c>)
 8002cac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8002cae:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cb0:	4a14      	ldr	r2, [pc, #80]	; (8002d04 <_ZL19MX_USART3_UART_Initv+0x60>)
 8002cb2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_2;
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cc8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002cca:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <_ZL19MX_USART3_UART_Initv+0x58>)
 8002ccc:	220c      	movs	r2, #12
 8002cce:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cdc:	4807      	ldr	r0, [pc, #28]	; (8002cfc <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cde:	f00c ffb5 	bl	800fc4c <HAL_UART_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bf14      	ite	ne
 8002ce8:	2301      	movne	r3, #1
 8002cea:	2300      	moveq	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <_ZL19MX_USART3_UART_Initv+0x52>
  {
    Error_Handler();
 8002cf2:	f000 f95d 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200007ac 	.word	0x200007ac
 8002d00:	40004800 	.word	0x40004800
 8002d04:	000186a0 	.word	0x000186a0

08002d08 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002d0c:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d0e:	4a14      	ldr	r2, [pc, #80]	; (8002d60 <_ZL19MX_USART6_UART_Initv+0x58>)
 8002d10:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002d12:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d18:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d1a:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002d20:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d2e:	220c      	movs	r2, #12
 8002d30:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d38:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002d3e:	4807      	ldr	r0, [pc, #28]	; (8002d5c <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d40:	f00c ff84 	bl	800fc4c <HAL_UART_Init>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	bf14      	ite	ne
 8002d4a:	2301      	movne	r3, #1
 8002d4c:	2300      	moveq	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8002d54:	f000 f92c 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	200007f0 	.word	0x200007f0
 8002d60:	40011400 	.word	0x40011400

08002d64 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	607b      	str	r3, [r7, #4]
 8002d6e:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <_ZL11MX_DMA_Initv+0xc8>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	4a2e      	ldr	r2, [pc, #184]	; (8002e2c <_ZL11MX_DMA_Initv+0xc8>)
 8002d74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7a:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <_ZL11MX_DMA_Initv+0xc8>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d82:	607b      	str	r3, [r7, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <_ZL11MX_DMA_Initv+0xc8>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	4a27      	ldr	r2, [pc, #156]	; (8002e2c <_ZL11MX_DMA_Initv+0xc8>)
 8002d90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d94:	6313      	str	r3, [r2, #48]	; 0x30
 8002d96:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <_ZL11MX_DMA_Initv+0xc8>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002da2:	2200      	movs	r2, #0
 8002da4:	2105      	movs	r1, #5
 8002da6:	200c      	movs	r0, #12
 8002da8:	f007 f8a2 	bl	8009ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002dac:	200c      	movs	r0, #12
 8002dae:	f007 f8bb 	bl	8009f28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002db2:	2200      	movs	r2, #0
 8002db4:	2105      	movs	r1, #5
 8002db6:	200d      	movs	r0, #13
 8002db8:	f007 f89a 	bl	8009ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002dbc:	200d      	movs	r0, #13
 8002dbe:	f007 f8b3 	bl	8009f28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2105      	movs	r1, #5
 8002dc6:	200e      	movs	r0, #14
 8002dc8:	f007 f892 	bl	8009ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002dcc:	200e      	movs	r0, #14
 8002dce:	f007 f8ab 	bl	8009f28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2105      	movs	r1, #5
 8002dd6:	200f      	movs	r0, #15
 8002dd8:	f007 f88a 	bl	8009ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002ddc:	200f      	movs	r0, #15
 8002dde:	f007 f8a3 	bl	8009f28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002de2:	2200      	movs	r2, #0
 8002de4:	2105      	movs	r1, #5
 8002de6:	2010      	movs	r0, #16
 8002de8:	f007 f882 	bl	8009ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002dec:	2010      	movs	r0, #16
 8002dee:	f007 f89b 	bl	8009f28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2105      	movs	r1, #5
 8002df6:	2038      	movs	r0, #56	; 0x38
 8002df8:	f007 f87a 	bl	8009ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002dfc:	2038      	movs	r0, #56	; 0x38
 8002dfe:	f007 f893 	bl	8009f28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2105      	movs	r1, #5
 8002e06:	2039      	movs	r0, #57	; 0x39
 8002e08:	f007 f872 	bl	8009ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002e0c:	2039      	movs	r0, #57	; 0x39
 8002e0e:	f007 f88b 	bl	8009f28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002e12:	2200      	movs	r2, #0
 8002e14:	2105      	movs	r1, #5
 8002e16:	2046      	movs	r0, #70	; 0x46
 8002e18:	f007 f86a 	bl	8009ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002e1c:	2046      	movs	r0, #70	; 0x46
 8002e1e:	f007 f883 	bl	8009f28 <HAL_NVIC_EnableIRQ>

}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800

08002e30 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e36:	f107 0314 	add.w	r3, r7, #20
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	60da      	str	r2, [r3, #12]
 8002e44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	4b55      	ldr	r3, [pc, #340]	; (8002fa0 <_ZL12MX_GPIO_Initv+0x170>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	4a54      	ldr	r2, [pc, #336]	; (8002fa0 <_ZL12MX_GPIO_Initv+0x170>)
 8002e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e54:	6313      	str	r3, [r2, #48]	; 0x30
 8002e56:	4b52      	ldr	r3, [pc, #328]	; (8002fa0 <_ZL12MX_GPIO_Initv+0x170>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	4b4e      	ldr	r3, [pc, #312]	; (8002fa0 <_ZL12MX_GPIO_Initv+0x170>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a4d      	ldr	r2, [pc, #308]	; (8002fa0 <_ZL12MX_GPIO_Initv+0x170>)
 8002e6c:	f043 0304 	orr.w	r3, r3, #4
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b4b      	ldr	r3, [pc, #300]	; (8002fa0 <_ZL12MX_GPIO_Initv+0x170>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	4b47      	ldr	r3, [pc, #284]	; (8002fa0 <_ZL12MX_GPIO_Initv+0x170>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a46      	ldr	r2, [pc, #280]	; (8002fa0 <_ZL12MX_GPIO_Initv+0x170>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b44      	ldr	r3, [pc, #272]	; (8002fa0 <_ZL12MX_GPIO_Initv+0x170>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	607b      	str	r3, [r7, #4]
 8002e9e:	4b40      	ldr	r3, [pc, #256]	; (8002fa0 <_ZL12MX_GPIO_Initv+0x170>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a3f      	ldr	r2, [pc, #252]	; (8002fa0 <_ZL12MX_GPIO_Initv+0x170>)
 8002ea4:	f043 0302 	orr.w	r3, r3, #2
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b3d      	ldr	r3, [pc, #244]	; (8002fa0 <_ZL12MX_GPIO_Initv+0x170>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <_ZL12MX_GPIO_Initv+0x170>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	4a38      	ldr	r2, [pc, #224]	; (8002fa0 <_ZL12MX_GPIO_Initv+0x170>)
 8002ec0:	f043 0308 	orr.w	r3, r3, #8
 8002ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec6:	4b36      	ldr	r3, [pc, #216]	; (8002fa0 <_ZL12MX_GPIO_Initv+0x170>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2130      	movs	r1, #48	; 0x30
 8002ed6:	4833      	ldr	r0, [pc, #204]	; (8002fa4 <_ZL12MX_GPIO_Initv+0x174>)
 8002ed8:	f007 ff94 	bl	800ae04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8002edc:	2200      	movs	r2, #0
 8002ede:	2120      	movs	r1, #32
 8002ee0:	4831      	ldr	r0, [pc, #196]	; (8002fa8 <_ZL12MX_GPIO_Initv+0x178>)
 8002ee2:	f007 ff8f 	bl	800ae04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002eec:	482f      	ldr	r0, [pc, #188]	; (8002fac <_ZL12MX_GPIO_Initv+0x17c>)
 8002eee:	f007 ff89 	bl	800ae04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002ef2:	2330      	movs	r3, #48	; 0x30
 8002ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efe:	2300      	movs	r3, #0
 8002f00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f02:	f107 0314 	add.w	r3, r7, #20
 8002f06:	4619      	mov	r1, r3
 8002f08:	4826      	ldr	r0, [pc, #152]	; (8002fa4 <_ZL12MX_GPIO_Initv+0x174>)
 8002f0a:	f007 fddf 	bl	800aacc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f0e:	2310      	movs	r3, #16
 8002f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f12:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f1c:	f107 0314 	add.w	r3, r7, #20
 8002f20:	4619      	mov	r1, r3
 8002f22:	4821      	ldr	r0, [pc, #132]	; (8002fa8 <_ZL12MX_GPIO_Initv+0x178>)
 8002f24:	f007 fdd2 	bl	800aacc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f28:	2320      	movs	r3, #32
 8002f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f34:	2300      	movs	r3, #0
 8002f36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f38:	f107 0314 	add.w	r3, r7, #20
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	481a      	ldr	r0, [pc, #104]	; (8002fa8 <_ZL12MX_GPIO_Initv+0x178>)
 8002f40:	f007 fdc4 	bl	800aacc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f44:	2304      	movs	r3, #4
 8002f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f52:	f107 0314 	add.w	r3, r7, #20
 8002f56:	4619      	mov	r1, r3
 8002f58:	4814      	ldr	r0, [pc, #80]	; (8002fac <_ZL12MX_GPIO_Initv+0x17c>)
 8002f5a:	f007 fdb7 	bl	800aacc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f64:	2301      	movs	r3, #1
 8002f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	4619      	mov	r1, r3
 8002f76:	480d      	ldr	r0, [pc, #52]	; (8002fac <_ZL12MX_GPIO_Initv+0x17c>)
 8002f78:	f007 fda8 	bl	800aacc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f8c:	f107 0314 	add.w	r3, r7, #20
 8002f90:	4619      	mov	r1, r3
 8002f92:	4804      	ldr	r0, [pc, #16]	; (8002fa4 <_ZL12MX_GPIO_Initv+0x174>)
 8002f94:	f007 fd9a 	bl	800aacc <HAL_GPIO_Init>
}
 8002f98:	bf00      	nop
 8002f9a:	3728      	adds	r7, #40	; 0x28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40020000 	.word	0x40020000
 8002fa8:	40020800 	.word	0x40020800
 8002fac:	40020400 	.word	0x40020400

08002fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb4:	b672      	cpsid	i
}
 8002fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fb8:	e7fe      	b.n	8002fb8 <Error_Handler+0x8>
	...

08002fbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <HAL_MspInit+0x54>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	4a11      	ldr	r2, [pc, #68]	; (8003010 <HAL_MspInit+0x54>)
 8002fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd2:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <HAL_MspInit+0x54>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fda:	607b      	str	r3, [r7, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_MspInit+0x54>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	4a0a      	ldr	r2, [pc, #40]	; (8003010 <HAL_MspInit+0x54>)
 8002fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fec:	6413      	str	r3, [r2, #64]	; 0x40
 8002fee:	4b08      	ldr	r3, [pc, #32]	; (8003010 <HAL_MspInit+0x54>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	210f      	movs	r1, #15
 8002ffe:	f06f 0001 	mvn.w	r0, #1
 8003002:	f006 ff75 	bl	8009ef0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800

08003014 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	f107 0314 	add.w	r3, r7, #20
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a2e      	ldr	r2, [pc, #184]	; (80030ec <HAL_ADC_MspInit+0xd8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d156      	bne.n	80030e4 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <HAL_ADC_MspInit+0xdc>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	4a2c      	ldr	r2, [pc, #176]	; (80030f0 <HAL_ADC_MspInit+0xdc>)
 8003040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003044:	6453      	str	r3, [r2, #68]	; 0x44
 8003046:	4b2a      	ldr	r3, [pc, #168]	; (80030f0 <HAL_ADC_MspInit+0xdc>)
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	4b26      	ldr	r3, [pc, #152]	; (80030f0 <HAL_ADC_MspInit+0xdc>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	4a25      	ldr	r2, [pc, #148]	; (80030f0 <HAL_ADC_MspInit+0xdc>)
 800305c:	f043 0304 	orr.w	r3, r3, #4
 8003060:	6313      	str	r3, [r2, #48]	; 0x30
 8003062:	4b23      	ldr	r3, [pc, #140]	; (80030f0 <HAL_ADC_MspInit+0xdc>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800306e:	2301      	movs	r3, #1
 8003070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003072:	2303      	movs	r3, #3
 8003074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800307a:	f107 0314 	add.w	r3, r7, #20
 800307e:	4619      	mov	r1, r3
 8003080:	481c      	ldr	r0, [pc, #112]	; (80030f4 <HAL_ADC_MspInit+0xe0>)
 8003082:	f007 fd23 	bl	800aacc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003086:	4b1c      	ldr	r3, [pc, #112]	; (80030f8 <HAL_ADC_MspInit+0xe4>)
 8003088:	4a1c      	ldr	r2, [pc, #112]	; (80030fc <HAL_ADC_MspInit+0xe8>)
 800308a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800308c:	4b1a      	ldr	r3, [pc, #104]	; (80030f8 <HAL_ADC_MspInit+0xe4>)
 800308e:	2200      	movs	r2, #0
 8003090:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003092:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_ADC_MspInit+0xe4>)
 8003094:	2200      	movs	r2, #0
 8003096:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003098:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <HAL_ADC_MspInit+0xe4>)
 800309a:	2200      	movs	r2, #0
 800309c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800309e:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <HAL_ADC_MspInit+0xe4>)
 80030a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030a6:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <HAL_ADC_MspInit+0xe4>)
 80030a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030ae:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_ADC_MspInit+0xe4>)
 80030b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80030b6:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <HAL_ADC_MspInit+0xe4>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80030bc:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <HAL_ADC_MspInit+0xe4>)
 80030be:	2200      	movs	r2, #0
 80030c0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030c2:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <HAL_ADC_MspInit+0xe4>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030c8:	480b      	ldr	r0, [pc, #44]	; (80030f8 <HAL_ADC_MspInit+0xe4>)
 80030ca:	f006 ff3b 	bl	8009f44 <HAL_DMA_Init>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80030d4:	f7ff ff6c 	bl	8002fb0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a07      	ldr	r2, [pc, #28]	; (80030f8 <HAL_ADC_MspInit+0xe4>)
 80030dc:	639a      	str	r2, [r3, #56]	; 0x38
 80030de:	4a06      	ldr	r2, [pc, #24]	; (80030f8 <HAL_ADC_MspInit+0xe4>)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030e4:	bf00      	nop
 80030e6:	3728      	adds	r7, #40	; 0x28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40012000 	.word	0x40012000
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40020800 	.word	0x40020800
 80030f8:	20000454 	.word	0x20000454
 80030fc:	40026410 	.word	0x40026410

08003100 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	; 0x28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003108:	f107 0314 	add.w	r3, r7, #20
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a28      	ldr	r2, [pc, #160]	; (80031c0 <HAL_SD_MspInit+0xc0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d14a      	bne.n	80031b8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	4b27      	ldr	r3, [pc, #156]	; (80031c4 <HAL_SD_MspInit+0xc4>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	4a26      	ldr	r2, [pc, #152]	; (80031c4 <HAL_SD_MspInit+0xc4>)
 800312c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003130:	6453      	str	r3, [r2, #68]	; 0x44
 8003132:	4b24      	ldr	r3, [pc, #144]	; (80031c4 <HAL_SD_MspInit+0xc4>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	4b20      	ldr	r3, [pc, #128]	; (80031c4 <HAL_SD_MspInit+0xc4>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	4a1f      	ldr	r2, [pc, #124]	; (80031c4 <HAL_SD_MspInit+0xc4>)
 8003148:	f043 0304 	orr.w	r3, r3, #4
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <HAL_SD_MspInit+0xc4>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <HAL_SD_MspInit+0xc4>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	4a18      	ldr	r2, [pc, #96]	; (80031c4 <HAL_SD_MspInit+0xc4>)
 8003164:	f043 0308 	orr.w	r3, r3, #8
 8003168:	6313      	str	r3, [r2, #48]	; 0x30
 800316a:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <HAL_SD_MspInit+0xc4>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003176:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800317a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317c:	2302      	movs	r3, #2
 800317e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003184:	2303      	movs	r3, #3
 8003186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003188:	230c      	movs	r3, #12
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800318c:	f107 0314 	add.w	r3, r7, #20
 8003190:	4619      	mov	r1, r3
 8003192:	480d      	ldr	r0, [pc, #52]	; (80031c8 <HAL_SD_MspInit+0xc8>)
 8003194:	f007 fc9a 	bl	800aacc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003198:	2304      	movs	r3, #4
 800319a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319c:	2302      	movs	r3, #2
 800319e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a4:	2303      	movs	r3, #3
 80031a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80031a8:	230c      	movs	r3, #12
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	4619      	mov	r1, r3
 80031b2:	4806      	ldr	r0, [pc, #24]	; (80031cc <HAL_SD_MspInit+0xcc>)
 80031b4:	f007 fc8a 	bl	800aacc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80031b8:	bf00      	nop
 80031ba:	3728      	adds	r7, #40	; 0x28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40012c00 	.word	0x40012c00
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40020800 	.word	0x40020800
 80031cc:	40020c00 	.word	0x40020c00

080031d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	; 0x28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	f107 0314 	add.w	r3, r7, #20
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a47      	ldr	r2, [pc, #284]	; (800330c <HAL_SPI_MspInit+0x13c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	f040 8087 	bne.w	8003302 <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031f4:	2300      	movs	r3, #0
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	4b45      	ldr	r3, [pc, #276]	; (8003310 <HAL_SPI_MspInit+0x140>)
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	4a44      	ldr	r2, [pc, #272]	; (8003310 <HAL_SPI_MspInit+0x140>)
 80031fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003202:	6413      	str	r3, [r2, #64]	; 0x40
 8003204:	4b42      	ldr	r3, [pc, #264]	; (8003310 <HAL_SPI_MspInit+0x140>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	4b3e      	ldr	r3, [pc, #248]	; (8003310 <HAL_SPI_MspInit+0x140>)
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	4a3d      	ldr	r2, [pc, #244]	; (8003310 <HAL_SPI_MspInit+0x140>)
 800321a:	f043 0302 	orr.w	r3, r3, #2
 800321e:	6313      	str	r3, [r2, #48]	; 0x30
 8003220:	4b3b      	ldr	r3, [pc, #236]	; (8003310 <HAL_SPI_MspInit+0x140>)
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800322c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003232:	2302      	movs	r3, #2
 8003234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800323a:	2303      	movs	r3, #3
 800323c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800323e:	2305      	movs	r3, #5
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003242:	f107 0314 	add.w	r3, r7, #20
 8003246:	4619      	mov	r1, r3
 8003248:	4832      	ldr	r0, [pc, #200]	; (8003314 <HAL_SPI_MspInit+0x144>)
 800324a:	f007 fc3f 	bl	800aacc <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800324e:	4b32      	ldr	r3, [pc, #200]	; (8003318 <HAL_SPI_MspInit+0x148>)
 8003250:	4a32      	ldr	r2, [pc, #200]	; (800331c <HAL_SPI_MspInit+0x14c>)
 8003252:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003254:	4b30      	ldr	r3, [pc, #192]	; (8003318 <HAL_SPI_MspInit+0x148>)
 8003256:	2200      	movs	r2, #0
 8003258:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800325a:	4b2f      	ldr	r3, [pc, #188]	; (8003318 <HAL_SPI_MspInit+0x148>)
 800325c:	2200      	movs	r2, #0
 800325e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003260:	4b2d      	ldr	r3, [pc, #180]	; (8003318 <HAL_SPI_MspInit+0x148>)
 8003262:	2200      	movs	r2, #0
 8003264:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003266:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <HAL_SPI_MspInit+0x148>)
 8003268:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800326c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800326e:	4b2a      	ldr	r3, [pc, #168]	; (8003318 <HAL_SPI_MspInit+0x148>)
 8003270:	2200      	movs	r2, #0
 8003272:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003274:	4b28      	ldr	r3, [pc, #160]	; (8003318 <HAL_SPI_MspInit+0x148>)
 8003276:	2200      	movs	r2, #0
 8003278:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800327a:	4b27      	ldr	r3, [pc, #156]	; (8003318 <HAL_SPI_MspInit+0x148>)
 800327c:	2200      	movs	r2, #0
 800327e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003280:	4b25      	ldr	r3, [pc, #148]	; (8003318 <HAL_SPI_MspInit+0x148>)
 8003282:	2200      	movs	r2, #0
 8003284:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003286:	4b24      	ldr	r3, [pc, #144]	; (8003318 <HAL_SPI_MspInit+0x148>)
 8003288:	2200      	movs	r2, #0
 800328a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800328c:	4822      	ldr	r0, [pc, #136]	; (8003318 <HAL_SPI_MspInit+0x148>)
 800328e:	f006 fe59 	bl	8009f44 <HAL_DMA_Init>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8003298:	f7ff fe8a 	bl	8002fb0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a1e      	ldr	r2, [pc, #120]	; (8003318 <HAL_SPI_MspInit+0x148>)
 80032a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80032a2:	4a1d      	ldr	r2, [pc, #116]	; (8003318 <HAL_SPI_MspInit+0x148>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80032a8:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <HAL_SPI_MspInit+0x150>)
 80032aa:	4a1e      	ldr	r2, [pc, #120]	; (8003324 <HAL_SPI_MspInit+0x154>)
 80032ac:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80032ae:	4b1c      	ldr	r3, [pc, #112]	; (8003320 <HAL_SPI_MspInit+0x150>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032b4:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <HAL_SPI_MspInit+0x150>)
 80032b6:	2240      	movs	r2, #64	; 0x40
 80032b8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032ba:	4b19      	ldr	r3, [pc, #100]	; (8003320 <HAL_SPI_MspInit+0x150>)
 80032bc:	2200      	movs	r2, #0
 80032be:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032c0:	4b17      	ldr	r3, [pc, #92]	; (8003320 <HAL_SPI_MspInit+0x150>)
 80032c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032c6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032c8:	4b15      	ldr	r3, [pc, #84]	; (8003320 <HAL_SPI_MspInit+0x150>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032ce:	4b14      	ldr	r3, [pc, #80]	; (8003320 <HAL_SPI_MspInit+0x150>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80032d4:	4b12      	ldr	r3, [pc, #72]	; (8003320 <HAL_SPI_MspInit+0x150>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <HAL_SPI_MspInit+0x150>)
 80032dc:	2200      	movs	r2, #0
 80032de:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032e0:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <HAL_SPI_MspInit+0x150>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80032e6:	480e      	ldr	r0, [pc, #56]	; (8003320 <HAL_SPI_MspInit+0x150>)
 80032e8:	f006 fe2c 	bl	8009f44 <HAL_DMA_Init>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 80032f2:	f7ff fe5d 	bl	8002fb0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a09      	ldr	r2, [pc, #36]	; (8003320 <HAL_SPI_MspInit+0x150>)
 80032fa:	649a      	str	r2, [r3, #72]	; 0x48
 80032fc:	4a08      	ldr	r2, [pc, #32]	; (8003320 <HAL_SPI_MspInit+0x150>)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003302:	bf00      	nop
 8003304:	3728      	adds	r7, #40	; 0x28
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40003800 	.word	0x40003800
 8003310:	40023800 	.word	0x40023800
 8003314:	40020400 	.word	0x40020400
 8003318:	20000590 	.word	0x20000590
 800331c:	40026058 	.word	0x40026058
 8003320:	200005f0 	.word	0x200005f0
 8003324:	40026070 	.word	0x40026070

08003328 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a18      	ldr	r2, [pc, #96]	; (8003398 <HAL_TIM_Base_MspInit+0x70>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d10e      	bne.n	8003358 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	4b17      	ldr	r3, [pc, #92]	; (800339c <HAL_TIM_Base_MspInit+0x74>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	4a16      	ldr	r2, [pc, #88]	; (800339c <HAL_TIM_Base_MspInit+0x74>)
 8003344:	f043 0302 	orr.w	r3, r3, #2
 8003348:	6413      	str	r3, [r2, #64]	; 0x40
 800334a:	4b14      	ldr	r3, [pc, #80]	; (800339c <HAL_TIM_Base_MspInit+0x74>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003356:	e01a      	b.n	800338e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a10      	ldr	r2, [pc, #64]	; (80033a0 <HAL_TIM_Base_MspInit+0x78>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d115      	bne.n	800338e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	4b0d      	ldr	r3, [pc, #52]	; (800339c <HAL_TIM_Base_MspInit+0x74>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	4a0c      	ldr	r2, [pc, #48]	; (800339c <HAL_TIM_Base_MspInit+0x74>)
 800336c:	f043 0304 	orr.w	r3, r3, #4
 8003370:	6413      	str	r3, [r2, #64]	; 0x40
 8003372:	4b0a      	ldr	r3, [pc, #40]	; (800339c <HAL_TIM_Base_MspInit+0x74>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800337e:	2200      	movs	r2, #0
 8003380:	2105      	movs	r1, #5
 8003382:	201e      	movs	r0, #30
 8003384:	f006 fdb4 	bl	8009ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003388:	201e      	movs	r0, #30
 800338a:	f006 fdcd 	bl	8009f28 <HAL_NVIC_EnableIRQ>
}
 800338e:	bf00      	nop
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40000400 	.word	0x40000400
 800339c:	40023800 	.word	0x40023800
 80033a0:	40000800 	.word	0x40000800

080033a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	; 0x28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	f107 0314 	add.w	r3, r7, #20
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a21      	ldr	r2, [pc, #132]	; (8003448 <HAL_TIM_MspPostInit+0xa4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d13b      	bne.n	800343e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	4b20      	ldr	r3, [pc, #128]	; (800344c <HAL_TIM_MspPostInit+0xa8>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	4a1f      	ldr	r2, [pc, #124]	; (800344c <HAL_TIM_MspPostInit+0xa8>)
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	6313      	str	r3, [r2, #48]	; 0x30
 80033d6:	4b1d      	ldr	r3, [pc, #116]	; (800344c <HAL_TIM_MspPostInit+0xa8>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	4b19      	ldr	r3, [pc, #100]	; (800344c <HAL_TIM_MspPostInit+0xa8>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	4a18      	ldr	r2, [pc, #96]	; (800344c <HAL_TIM_MspPostInit+0xa8>)
 80033ec:	f043 0302 	orr.w	r3, r3, #2
 80033f0:	6313      	str	r3, [r2, #48]	; 0x30
 80033f2:	4b16      	ldr	r3, [pc, #88]	; (800344c <HAL_TIM_MspPostInit+0xa8>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033fe:	23c0      	movs	r3, #192	; 0xc0
 8003400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003402:	2302      	movs	r3, #2
 8003404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340a:	2300      	movs	r3, #0
 800340c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800340e:	2302      	movs	r3, #2
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003412:	f107 0314 	add.w	r3, r7, #20
 8003416:	4619      	mov	r1, r3
 8003418:	480d      	ldr	r0, [pc, #52]	; (8003450 <HAL_TIM_MspPostInit+0xac>)
 800341a:	f007 fb57 	bl	800aacc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800341e:	2303      	movs	r3, #3
 8003420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003422:	2302      	movs	r3, #2
 8003424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342a:	2300      	movs	r3, #0
 800342c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800342e:	2302      	movs	r3, #2
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003432:	f107 0314 	add.w	r3, r7, #20
 8003436:	4619      	mov	r1, r3
 8003438:	4806      	ldr	r0, [pc, #24]	; (8003454 <HAL_TIM_MspPostInit+0xb0>)
 800343a:	f007 fb47 	bl	800aacc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800343e:	bf00      	nop
 8003440:	3728      	adds	r7, #40	; 0x28
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40000400 	.word	0x40000400
 800344c:	40023800 	.word	0x40023800
 8003450:	40020000 	.word	0x40020000
 8003454:	40020400 	.word	0x40020400

08003458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b092      	sub	sp, #72	; 0x48
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003460:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a93      	ldr	r2, [pc, #588]	; (80036c4 <HAL_UART_MspInit+0x26c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d15a      	bne.n	8003530 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	633b      	str	r3, [r7, #48]	; 0x30
 800347e:	4b92      	ldr	r3, [pc, #584]	; (80036c8 <HAL_UART_MspInit+0x270>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	4a91      	ldr	r2, [pc, #580]	; (80036c8 <HAL_UART_MspInit+0x270>)
 8003484:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003488:	6413      	str	r3, [r2, #64]	; 0x40
 800348a:	4b8f      	ldr	r3, [pc, #572]	; (80036c8 <HAL_UART_MspInit+0x270>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003492:	633b      	str	r3, [r7, #48]	; 0x30
 8003494:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800349a:	4b8b      	ldr	r3, [pc, #556]	; (80036c8 <HAL_UART_MspInit+0x270>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	4a8a      	ldr	r2, [pc, #552]	; (80036c8 <HAL_UART_MspInit+0x270>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6313      	str	r3, [r2, #48]	; 0x30
 80034a6:	4b88      	ldr	r3, [pc, #544]	; (80036c8 <HAL_UART_MspInit+0x270>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80034b2:	2303      	movs	r3, #3
 80034b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b6:	2302      	movs	r3, #2
 80034b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034be:	2303      	movs	r3, #3
 80034c0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80034c2:	2308      	movs	r3, #8
 80034c4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034ca:	4619      	mov	r1, r3
 80034cc:	487f      	ldr	r0, [pc, #508]	; (80036cc <HAL_UART_MspInit+0x274>)
 80034ce:	f007 fafd 	bl	800aacc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80034d2:	4b7f      	ldr	r3, [pc, #508]	; (80036d0 <HAL_UART_MspInit+0x278>)
 80034d4:	4a7f      	ldr	r2, [pc, #508]	; (80036d4 <HAL_UART_MspInit+0x27c>)
 80034d6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80034d8:	4b7d      	ldr	r3, [pc, #500]	; (80036d0 <HAL_UART_MspInit+0x278>)
 80034da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034de:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034e0:	4b7b      	ldr	r3, [pc, #492]	; (80036d0 <HAL_UART_MspInit+0x278>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034e6:	4b7a      	ldr	r3, [pc, #488]	; (80036d0 <HAL_UART_MspInit+0x278>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034ec:	4b78      	ldr	r3, [pc, #480]	; (80036d0 <HAL_UART_MspInit+0x278>)
 80034ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034f2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034f4:	4b76      	ldr	r3, [pc, #472]	; (80036d0 <HAL_UART_MspInit+0x278>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034fa:	4b75      	ldr	r3, [pc, #468]	; (80036d0 <HAL_UART_MspInit+0x278>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003500:	4b73      	ldr	r3, [pc, #460]	; (80036d0 <HAL_UART_MspInit+0x278>)
 8003502:	2200      	movs	r2, #0
 8003504:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003506:	4b72      	ldr	r3, [pc, #456]	; (80036d0 <HAL_UART_MspInit+0x278>)
 8003508:	2200      	movs	r2, #0
 800350a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800350c:	4b70      	ldr	r3, [pc, #448]	; (80036d0 <HAL_UART_MspInit+0x278>)
 800350e:	2200      	movs	r2, #0
 8003510:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003512:	486f      	ldr	r0, [pc, #444]	; (80036d0 <HAL_UART_MspInit+0x278>)
 8003514:	f006 fd16 	bl	8009f44 <HAL_DMA_Init>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800351e:	f7ff fd47 	bl	8002fb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a6a      	ldr	r2, [pc, #424]	; (80036d0 <HAL_UART_MspInit+0x278>)
 8003526:	639a      	str	r2, [r3, #56]	; 0x38
 8003528:	4a69      	ldr	r2, [pc, #420]	; (80036d0 <HAL_UART_MspInit+0x278>)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800352e:	e19f      	b.n	8003870 <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a68      	ldr	r2, [pc, #416]	; (80036d8 <HAL_UART_MspInit+0x280>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d163      	bne.n	8003602 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART1_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	62bb      	str	r3, [r7, #40]	; 0x28
 800353e:	4b62      	ldr	r3, [pc, #392]	; (80036c8 <HAL_UART_MspInit+0x270>)
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	4a61      	ldr	r2, [pc, #388]	; (80036c8 <HAL_UART_MspInit+0x270>)
 8003544:	f043 0310 	orr.w	r3, r3, #16
 8003548:	6453      	str	r3, [r2, #68]	; 0x44
 800354a:	4b5f      	ldr	r3, [pc, #380]	; (80036c8 <HAL_UART_MspInit+0x270>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	62bb      	str	r3, [r7, #40]	; 0x28
 8003554:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
 800355a:	4b5b      	ldr	r3, [pc, #364]	; (80036c8 <HAL_UART_MspInit+0x270>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	4a5a      	ldr	r2, [pc, #360]	; (80036c8 <HAL_UART_MspInit+0x270>)
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	6313      	str	r3, [r2, #48]	; 0x30
 8003566:	4b58      	ldr	r3, [pc, #352]	; (80036c8 <HAL_UART_MspInit+0x270>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003572:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003576:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003578:	2302      	movs	r3, #2
 800357a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	2300      	movs	r3, #0
 800357e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003580:	2303      	movs	r3, #3
 8003582:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003584:	2307      	movs	r3, #7
 8003586:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003588:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800358c:	4619      	mov	r1, r3
 800358e:	484f      	ldr	r0, [pc, #316]	; (80036cc <HAL_UART_MspInit+0x274>)
 8003590:	f007 fa9c 	bl	800aacc <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003594:	4b51      	ldr	r3, [pc, #324]	; (80036dc <HAL_UART_MspInit+0x284>)
 8003596:	4a52      	ldr	r2, [pc, #328]	; (80036e0 <HAL_UART_MspInit+0x288>)
 8003598:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800359a:	4b50      	ldr	r3, [pc, #320]	; (80036dc <HAL_UART_MspInit+0x284>)
 800359c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035a2:	4b4e      	ldr	r3, [pc, #312]	; (80036dc <HAL_UART_MspInit+0x284>)
 80035a4:	2240      	movs	r2, #64	; 0x40
 80035a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035a8:	4b4c      	ldr	r3, [pc, #304]	; (80036dc <HAL_UART_MspInit+0x284>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035ae:	4b4b      	ldr	r3, [pc, #300]	; (80036dc <HAL_UART_MspInit+0x284>)
 80035b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035b6:	4b49      	ldr	r3, [pc, #292]	; (80036dc <HAL_UART_MspInit+0x284>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035bc:	4b47      	ldr	r3, [pc, #284]	; (80036dc <HAL_UART_MspInit+0x284>)
 80035be:	2200      	movs	r2, #0
 80035c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80035c2:	4b46      	ldr	r3, [pc, #280]	; (80036dc <HAL_UART_MspInit+0x284>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80035c8:	4b44      	ldr	r3, [pc, #272]	; (80036dc <HAL_UART_MspInit+0x284>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035ce:	4b43      	ldr	r3, [pc, #268]	; (80036dc <HAL_UART_MspInit+0x284>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80035d4:	4841      	ldr	r0, [pc, #260]	; (80036dc <HAL_UART_MspInit+0x284>)
 80035d6:	f006 fcb5 	bl	8009f44 <HAL_DMA_Init>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80035e0:	f7ff fce6 	bl	8002fb0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a3d      	ldr	r2, [pc, #244]	; (80036dc <HAL_UART_MspInit+0x284>)
 80035e8:	635a      	str	r2, [r3, #52]	; 0x34
 80035ea:	4a3c      	ldr	r2, [pc, #240]	; (80036dc <HAL_UART_MspInit+0x284>)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80035f0:	2200      	movs	r2, #0
 80035f2:	2105      	movs	r1, #5
 80035f4:	2025      	movs	r0, #37	; 0x25
 80035f6:	f006 fc7b 	bl	8009ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035fa:	2025      	movs	r0, #37	; 0x25
 80035fc:	f006 fc94 	bl	8009f28 <HAL_NVIC_EnableIRQ>
}
 8003600:	e136      	b.n	8003870 <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART2)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a37      	ldr	r2, [pc, #220]	; (80036e4 <HAL_UART_MspInit+0x28c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d171      	bne.n	80036f0 <HAL_UART_MspInit+0x298>
    __HAL_RCC_USART2_CLK_ENABLE();
 800360c:	2300      	movs	r3, #0
 800360e:	623b      	str	r3, [r7, #32]
 8003610:	4b2d      	ldr	r3, [pc, #180]	; (80036c8 <HAL_UART_MspInit+0x270>)
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	4a2c      	ldr	r2, [pc, #176]	; (80036c8 <HAL_UART_MspInit+0x270>)
 8003616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800361a:	6413      	str	r3, [r2, #64]	; 0x40
 800361c:	4b2a      	ldr	r3, [pc, #168]	; (80036c8 <HAL_UART_MspInit+0x270>)
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003624:	623b      	str	r3, [r7, #32]
 8003626:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003628:	2300      	movs	r3, #0
 800362a:	61fb      	str	r3, [r7, #28]
 800362c:	4b26      	ldr	r3, [pc, #152]	; (80036c8 <HAL_UART_MspInit+0x270>)
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	4a25      	ldr	r2, [pc, #148]	; (80036c8 <HAL_UART_MspInit+0x270>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6313      	str	r3, [r2, #48]	; 0x30
 8003638:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <HAL_UART_MspInit+0x270>)
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003644:	230c      	movs	r3, #12
 8003646:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003648:	2302      	movs	r3, #2
 800364a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	2300      	movs	r3, #0
 800364e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003650:	2303      	movs	r3, #3
 8003652:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003654:	2307      	movs	r3, #7
 8003656:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003658:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800365c:	4619      	mov	r1, r3
 800365e:	481b      	ldr	r0, [pc, #108]	; (80036cc <HAL_UART_MspInit+0x274>)
 8003660:	f007 fa34 	bl	800aacc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003664:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <HAL_UART_MspInit+0x290>)
 8003666:	4a21      	ldr	r2, [pc, #132]	; (80036ec <HAL_UART_MspInit+0x294>)
 8003668:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800366a:	4b1f      	ldr	r3, [pc, #124]	; (80036e8 <HAL_UART_MspInit+0x290>)
 800366c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003670:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003672:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <HAL_UART_MspInit+0x290>)
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003678:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <HAL_UART_MspInit+0x290>)
 800367a:	2200      	movs	r2, #0
 800367c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800367e:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <HAL_UART_MspInit+0x290>)
 8003680:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003684:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003686:	4b18      	ldr	r3, [pc, #96]	; (80036e8 <HAL_UART_MspInit+0x290>)
 8003688:	2200      	movs	r2, #0
 800368a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800368c:	4b16      	ldr	r3, [pc, #88]	; (80036e8 <HAL_UART_MspInit+0x290>)
 800368e:	2200      	movs	r2, #0
 8003690:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003692:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <HAL_UART_MspInit+0x290>)
 8003694:	2200      	movs	r2, #0
 8003696:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003698:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <HAL_UART_MspInit+0x290>)
 800369a:	2200      	movs	r2, #0
 800369c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800369e:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <HAL_UART_MspInit+0x290>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80036a4:	4810      	ldr	r0, [pc, #64]	; (80036e8 <HAL_UART_MspInit+0x290>)
 80036a6:	f006 fc4d 	bl	8009f44 <HAL_DMA_Init>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 80036b0:	f7ff fc7e 	bl	8002fb0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a0c      	ldr	r2, [pc, #48]	; (80036e8 <HAL_UART_MspInit+0x290>)
 80036b8:	639a      	str	r2, [r3, #56]	; 0x38
 80036ba:	4a0b      	ldr	r2, [pc, #44]	; (80036e8 <HAL_UART_MspInit+0x290>)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6393      	str	r3, [r2, #56]	; 0x38
}
 80036c0:	e0d6      	b.n	8003870 <HAL_UART_MspInit+0x418>
 80036c2:	bf00      	nop
 80036c4:	40004c00 	.word	0x40004c00
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40020000 	.word	0x40020000
 80036d0:	20000834 	.word	0x20000834
 80036d4:	40026040 	.word	0x40026040
 80036d8:	40011000 	.word	0x40011000
 80036dc:	20000894 	.word	0x20000894
 80036e0:	400264b8 	.word	0x400264b8
 80036e4:	40004400 	.word	0x40004400
 80036e8:	200008f4 	.word	0x200008f4
 80036ec:	40026088 	.word	0x40026088
  else if(huart->Instance==USART3)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a60      	ldr	r2, [pc, #384]	; (8003878 <HAL_UART_MspInit+0x420>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d15b      	bne.n	80037b2 <HAL_UART_MspInit+0x35a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80036fa:	2300      	movs	r3, #0
 80036fc:	61bb      	str	r3, [r7, #24]
 80036fe:	4b5f      	ldr	r3, [pc, #380]	; (800387c <HAL_UART_MspInit+0x424>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	4a5e      	ldr	r2, [pc, #376]	; (800387c <HAL_UART_MspInit+0x424>)
 8003704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003708:	6413      	str	r3, [r2, #64]	; 0x40
 800370a:	4b5c      	ldr	r3, [pc, #368]	; (800387c <HAL_UART_MspInit+0x424>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	4b58      	ldr	r3, [pc, #352]	; (800387c <HAL_UART_MspInit+0x424>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	4a57      	ldr	r2, [pc, #348]	; (800387c <HAL_UART_MspInit+0x424>)
 8003720:	f043 0302 	orr.w	r3, r3, #2
 8003724:	6313      	str	r3, [r2, #48]	; 0x30
 8003726:	4b55      	ldr	r3, [pc, #340]	; (800387c <HAL_UART_MspInit+0x424>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003732:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003736:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003738:	2302      	movs	r3, #2
 800373a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373c:	2300      	movs	r3, #0
 800373e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003740:	2303      	movs	r3, #3
 8003742:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003744:	2307      	movs	r3, #7
 8003746:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003748:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800374c:	4619      	mov	r1, r3
 800374e:	484c      	ldr	r0, [pc, #304]	; (8003880 <HAL_UART_MspInit+0x428>)
 8003750:	f007 f9bc 	bl	800aacc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003754:	4b4b      	ldr	r3, [pc, #300]	; (8003884 <HAL_UART_MspInit+0x42c>)
 8003756:	4a4c      	ldr	r2, [pc, #304]	; (8003888 <HAL_UART_MspInit+0x430>)
 8003758:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800375a:	4b4a      	ldr	r3, [pc, #296]	; (8003884 <HAL_UART_MspInit+0x42c>)
 800375c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003760:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003762:	4b48      	ldr	r3, [pc, #288]	; (8003884 <HAL_UART_MspInit+0x42c>)
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003768:	4b46      	ldr	r3, [pc, #280]	; (8003884 <HAL_UART_MspInit+0x42c>)
 800376a:	2200      	movs	r2, #0
 800376c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800376e:	4b45      	ldr	r3, [pc, #276]	; (8003884 <HAL_UART_MspInit+0x42c>)
 8003770:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003774:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003776:	4b43      	ldr	r3, [pc, #268]	; (8003884 <HAL_UART_MspInit+0x42c>)
 8003778:	2200      	movs	r2, #0
 800377a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800377c:	4b41      	ldr	r3, [pc, #260]	; (8003884 <HAL_UART_MspInit+0x42c>)
 800377e:	2200      	movs	r2, #0
 8003780:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003782:	4b40      	ldr	r3, [pc, #256]	; (8003884 <HAL_UART_MspInit+0x42c>)
 8003784:	2200      	movs	r2, #0
 8003786:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003788:	4b3e      	ldr	r3, [pc, #248]	; (8003884 <HAL_UART_MspInit+0x42c>)
 800378a:	2200      	movs	r2, #0
 800378c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800378e:	4b3d      	ldr	r3, [pc, #244]	; (8003884 <HAL_UART_MspInit+0x42c>)
 8003790:	2200      	movs	r2, #0
 8003792:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003794:	483b      	ldr	r0, [pc, #236]	; (8003884 <HAL_UART_MspInit+0x42c>)
 8003796:	f006 fbd5 	bl	8009f44 <HAL_DMA_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_UART_MspInit+0x34c>
      Error_Handler();
 80037a0:	f7ff fc06 	bl	8002fb0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a37      	ldr	r2, [pc, #220]	; (8003884 <HAL_UART_MspInit+0x42c>)
 80037a8:	639a      	str	r2, [r3, #56]	; 0x38
 80037aa:	4a36      	ldr	r2, [pc, #216]	; (8003884 <HAL_UART_MspInit+0x42c>)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6393      	str	r3, [r2, #56]	; 0x38
}
 80037b0:	e05e      	b.n	8003870 <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART6)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a35      	ldr	r2, [pc, #212]	; (800388c <HAL_UART_MspInit+0x434>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d159      	bne.n	8003870 <HAL_UART_MspInit+0x418>
    __HAL_RCC_USART6_CLK_ENABLE();
 80037bc:	2300      	movs	r3, #0
 80037be:	613b      	str	r3, [r7, #16]
 80037c0:	4b2e      	ldr	r3, [pc, #184]	; (800387c <HAL_UART_MspInit+0x424>)
 80037c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c4:	4a2d      	ldr	r2, [pc, #180]	; (800387c <HAL_UART_MspInit+0x424>)
 80037c6:	f043 0320 	orr.w	r3, r3, #32
 80037ca:	6453      	str	r3, [r2, #68]	; 0x44
 80037cc:	4b2b      	ldr	r3, [pc, #172]	; (800387c <HAL_UART_MspInit+0x424>)
 80037ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d0:	f003 0320 	and.w	r3, r3, #32
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	4b27      	ldr	r3, [pc, #156]	; (800387c <HAL_UART_MspInit+0x424>)
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	4a26      	ldr	r2, [pc, #152]	; (800387c <HAL_UART_MspInit+0x424>)
 80037e2:	f043 0304 	orr.w	r3, r3, #4
 80037e6:	6313      	str	r3, [r2, #48]	; 0x30
 80037e8:	4b24      	ldr	r3, [pc, #144]	; (800387c <HAL_UART_MspInit+0x424>)
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037f4:	23c0      	movs	r3, #192	; 0xc0
 80037f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f8:	2302      	movs	r3, #2
 80037fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003800:	2303      	movs	r3, #3
 8003802:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003804:	2308      	movs	r3, #8
 8003806:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003808:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800380c:	4619      	mov	r1, r3
 800380e:	4820      	ldr	r0, [pc, #128]	; (8003890 <HAL_UART_MspInit+0x438>)
 8003810:	f007 f95c 	bl	800aacc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003814:	4b1f      	ldr	r3, [pc, #124]	; (8003894 <HAL_UART_MspInit+0x43c>)
 8003816:	4a20      	ldr	r2, [pc, #128]	; (8003898 <HAL_UART_MspInit+0x440>)
 8003818:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800381a:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <HAL_UART_MspInit+0x43c>)
 800381c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003820:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003822:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <HAL_UART_MspInit+0x43c>)
 8003824:	2200      	movs	r2, #0
 8003826:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003828:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <HAL_UART_MspInit+0x43c>)
 800382a:	2200      	movs	r2, #0
 800382c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800382e:	4b19      	ldr	r3, [pc, #100]	; (8003894 <HAL_UART_MspInit+0x43c>)
 8003830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003834:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003836:	4b17      	ldr	r3, [pc, #92]	; (8003894 <HAL_UART_MspInit+0x43c>)
 8003838:	2200      	movs	r2, #0
 800383a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800383c:	4b15      	ldr	r3, [pc, #84]	; (8003894 <HAL_UART_MspInit+0x43c>)
 800383e:	2200      	movs	r2, #0
 8003840:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003842:	4b14      	ldr	r3, [pc, #80]	; (8003894 <HAL_UART_MspInit+0x43c>)
 8003844:	2200      	movs	r2, #0
 8003846:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003848:	4b12      	ldr	r3, [pc, #72]	; (8003894 <HAL_UART_MspInit+0x43c>)
 800384a:	2200      	movs	r2, #0
 800384c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800384e:	4b11      	ldr	r3, [pc, #68]	; (8003894 <HAL_UART_MspInit+0x43c>)
 8003850:	2200      	movs	r2, #0
 8003852:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003854:	480f      	ldr	r0, [pc, #60]	; (8003894 <HAL_UART_MspInit+0x43c>)
 8003856:	f006 fb75 	bl	8009f44 <HAL_DMA_Init>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_UART_MspInit+0x40c>
      Error_Handler();
 8003860:	f7ff fba6 	bl	8002fb0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a0b      	ldr	r2, [pc, #44]	; (8003894 <HAL_UART_MspInit+0x43c>)
 8003868:	639a      	str	r2, [r3, #56]	; 0x38
 800386a:	4a0a      	ldr	r2, [pc, #40]	; (8003894 <HAL_UART_MspInit+0x43c>)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003870:	bf00      	nop
 8003872:	3748      	adds	r7, #72	; 0x48
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40004800 	.word	0x40004800
 800387c:	40023800 	.word	0x40023800
 8003880:	40020400 	.word	0x40020400
 8003884:	20000954 	.word	0x20000954
 8003888:	40026028 	.word	0x40026028
 800388c:	40011400 	.word	0x40011400
 8003890:	40020800 	.word	0x40020800
 8003894:	200009b4 	.word	0x200009b4
 8003898:	40026428 	.word	0x40026428

0800389c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08c      	sub	sp, #48	; 0x30
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80038ac:	2300      	movs	r3, #0
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	4b2f      	ldr	r3, [pc, #188]	; (8003970 <HAL_InitTick+0xd4>)
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	4a2e      	ldr	r2, [pc, #184]	; (8003970 <HAL_InitTick+0xd4>)
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	6453      	str	r3, [r2, #68]	; 0x44
 80038bc:	4b2c      	ldr	r3, [pc, #176]	; (8003970 <HAL_InitTick+0xd4>)
 80038be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038c8:	f107 020c 	add.w	r2, r7, #12
 80038cc:	f107 0310 	add.w	r3, r7, #16
 80038d0:	4611      	mov	r1, r2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f009 fa08 	bl	800cce8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80038d8:	f009 f9f2 	bl	800ccc0 <HAL_RCC_GetPCLK2Freq>
 80038dc:	4603      	mov	r3, r0
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	4a23      	ldr	r2, [pc, #140]	; (8003974 <HAL_InitTick+0xd8>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	0c9b      	lsrs	r3, r3, #18
 80038ec:	3b01      	subs	r3, #1
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80038f0:	4b21      	ldr	r3, [pc, #132]	; (8003978 <HAL_InitTick+0xdc>)
 80038f2:	4a22      	ldr	r2, [pc, #136]	; (800397c <HAL_InitTick+0xe0>)
 80038f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80038f6:	4b20      	ldr	r3, [pc, #128]	; (8003978 <HAL_InitTick+0xdc>)
 80038f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038fc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80038fe:	4a1e      	ldr	r2, [pc, #120]	; (8003978 <HAL_InitTick+0xdc>)
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003904:	4b1c      	ldr	r3, [pc, #112]	; (8003978 <HAL_InitTick+0xdc>)
 8003906:	2200      	movs	r2, #0
 8003908:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800390a:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <HAL_InitTick+0xdc>)
 800390c:	2200      	movs	r2, #0
 800390e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003910:	4b19      	ldr	r3, [pc, #100]	; (8003978 <HAL_InitTick+0xdc>)
 8003912:	2200      	movs	r2, #0
 8003914:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003916:	4818      	ldr	r0, [pc, #96]	; (8003978 <HAL_InitTick+0xdc>)
 8003918:	f00b f95c 	bl	800ebd4 <HAL_TIM_Base_Init>
 800391c:	4603      	mov	r3, r0
 800391e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003922:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003926:	2b00      	cmp	r3, #0
 8003928:	d11b      	bne.n	8003962 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800392a:	4813      	ldr	r0, [pc, #76]	; (8003978 <HAL_InitTick+0xdc>)
 800392c:	f00b f9a2 	bl	800ec74 <HAL_TIM_Base_Start_IT>
 8003930:	4603      	mov	r3, r0
 8003932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800393a:	2b00      	cmp	r3, #0
 800393c:	d111      	bne.n	8003962 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800393e:	2019      	movs	r0, #25
 8003940:	f006 faf2 	bl	8009f28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b0f      	cmp	r3, #15
 8003948:	d808      	bhi.n	800395c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800394a:	2200      	movs	r2, #0
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	2019      	movs	r0, #25
 8003950:	f006 face 	bl	8009ef0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003954:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <HAL_InitTick+0xe4>)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e002      	b.n	8003962 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003962:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003966:	4618      	mov	r0, r3
 8003968:	3730      	adds	r7, #48	; 0x30
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800
 8003974:	431bde83 	.word	0x431bde83
 8003978:	20000a14 	.word	0x20000a14
 800397c:	40010000 	.word	0x40010000
 8003980:	20000008 	.word	0x20000008

08003984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003988:	e7fe      	b.n	8003988 <NMI_Handler+0x4>

0800398a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800398a:	b480      	push	{r7}
 800398c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800398e:	e7fe      	b.n	800398e <HardFault_Handler+0x4>

08003990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003994:	e7fe      	b.n	8003994 <MemManage_Handler+0x4>

08003996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003996:	b480      	push	{r7}
 8003998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800399a:	e7fe      	b.n	800399a <BusFault_Handler+0x4>

0800399c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039a0:	e7fe      	b.n	80039a0 <UsageFault_Handler+0x4>

080039a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039a2:	b480      	push	{r7}
 80039a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039a6:	bf00      	nop
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80039b4:	2004      	movs	r0, #4
 80039b6:	f007 fa3f 	bl	800ae38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}

080039be <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80039c2:	2010      	movs	r0, #16
 80039c4:	f007 fa38 	bl	800ae38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80039c8:	bf00      	nop
 80039ca:	bd80      	pop	{r7, pc}

080039cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80039d0:	4802      	ldr	r0, [pc, #8]	; (80039dc <DMA1_Stream1_IRQHandler+0x10>)
 80039d2:	f006 fc4f 	bl	800a274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000954 	.word	0x20000954

080039e0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80039e4:	4802      	ldr	r0, [pc, #8]	; (80039f0 <DMA1_Stream2_IRQHandler+0x10>)
 80039e6:	f006 fc45 	bl	800a274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000834 	.word	0x20000834

080039f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80039f8:	4802      	ldr	r0, [pc, #8]	; (8003a04 <DMA1_Stream3_IRQHandler+0x10>)
 80039fa:	f006 fc3b 	bl	800a274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000590 	.word	0x20000590

08003a08 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003a0c:	4802      	ldr	r0, [pc, #8]	; (8003a18 <DMA1_Stream4_IRQHandler+0x10>)
 8003a0e:	f006 fc31 	bl	800a274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	200005f0 	.word	0x200005f0

08003a1c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003a20:	4802      	ldr	r0, [pc, #8]	; (8003a2c <DMA1_Stream5_IRQHandler+0x10>)
 8003a22:	f006 fc27 	bl	800a274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	200008f4 	.word	0x200008f4

08003a30 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003a34:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003a38:	f007 f9fe 	bl	800ae38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003a3c:	bf00      	nop
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a44:	4802      	ldr	r0, [pc, #8]	; (8003a50 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003a46:	f00b faa7 	bl	800ef98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000a14 	.word	0x20000a14

08003a54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a58:	4802      	ldr	r0, [pc, #8]	; (8003a64 <TIM4_IRQHandler+0x10>)
 8003a5a:	f00b fa9d 	bl	800ef98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20000698 	.word	0x20000698

08003a68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a6c:	4802      	ldr	r0, [pc, #8]	; (8003a78 <USART1_IRQHandler+0x10>)
 8003a6e:	f00c f9e9 	bl	800fe44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000724 	.word	0x20000724

08003a7c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a80:	4802      	ldr	r0, [pc, #8]	; (8003a8c <DMA2_Stream0_IRQHandler+0x10>)
 8003a82:	f006 fbf7 	bl	800a274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000454 	.word	0x20000454

08003a90 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003a94:	4802      	ldr	r0, [pc, #8]	; (8003aa0 <DMA2_Stream1_IRQHandler+0x10>)
 8003a96:	f006 fbed 	bl	800a274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	200009b4 	.word	0x200009b4

08003aa4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003aa8:	4802      	ldr	r0, [pc, #8]	; (8003ab4 <OTG_FS_IRQHandler+0x10>)
 8003aaa:	f007 fb2d 	bl	800b108 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	2000d8b8 	.word	0x2000d8b8

08003ab8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003abc:	4802      	ldr	r0, [pc, #8]	; (8003ac8 <DMA2_Stream7_IRQHandler+0x10>)
 8003abe:	f006 fbd9 	bl	800a274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000894 	.word	0x20000894

08003acc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
	return 1;
 8003ad0:	2301      	movs	r3, #1
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <_kill>:

int _kill(int pid, int sig)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ae6:	f016 faab 	bl	801a040 <__errno>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2216      	movs	r2, #22
 8003aee:	601a      	str	r2, [r3, #0]
	return -1;
 8003af0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <_exit>:

void _exit (int status)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b04:	f04f 31ff 	mov.w	r1, #4294967295
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff ffe7 	bl	8003adc <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b0e:	e7fe      	b.n	8003b0e <_exit+0x12>

08003b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b18:	4a14      	ldr	r2, [pc, #80]	; (8003b6c <_sbrk+0x5c>)
 8003b1a:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <_sbrk+0x60>)
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b24:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <_sbrk+0x64>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d102      	bne.n	8003b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <_sbrk+0x64>)
 8003b2e:	4a12      	ldr	r2, [pc, #72]	; (8003b78 <_sbrk+0x68>)
 8003b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b32:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <_sbrk+0x64>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d207      	bcs.n	8003b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b40:	f016 fa7e 	bl	801a040 <__errno>
 8003b44:	4603      	mov	r3, r0
 8003b46:	220c      	movs	r2, #12
 8003b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4e:	e009      	b.n	8003b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b50:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <_sbrk+0x64>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b56:	4b07      	ldr	r3, [pc, #28]	; (8003b74 <_sbrk+0x64>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	4a05      	ldr	r2, [pc, #20]	; (8003b74 <_sbrk+0x64>)
 8003b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b62:	68fb      	ldr	r3, [r7, #12]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	20020000 	.word	0x20020000
 8003b70:	00000400 	.word	0x00000400
 8003b74:	20000a5c 	.word	0x20000a5c
 8003b78:	2000e050 	.word	0x2000e050

08003b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b80:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <SystemInit+0x20>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	4a05      	ldr	r2, [pc, #20]	; (8003b9c <SystemInit+0x20>)
 8003b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	e000ed00 	.word	0xe000ed00

08003ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ba4:	480d      	ldr	r0, [pc, #52]	; (8003bdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ba6:	490e      	ldr	r1, [pc, #56]	; (8003be0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ba8:	4a0e      	ldr	r2, [pc, #56]	; (8003be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bac:	e002      	b.n	8003bb4 <LoopCopyDataInit>

08003bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bb2:	3304      	adds	r3, #4

08003bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bb8:	d3f9      	bcc.n	8003bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bba:	4a0b      	ldr	r2, [pc, #44]	; (8003be8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003bbc:	4c0b      	ldr	r4, [pc, #44]	; (8003bec <LoopFillZerobss+0x26>)
  movs r3, #0
 8003bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bc0:	e001      	b.n	8003bc6 <LoopFillZerobss>

08003bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bc4:	3204      	adds	r2, #4

08003bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bc8:	d3fb      	bcc.n	8003bc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003bca:	f7ff ffd7 	bl	8003b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bce:	f016 fa3d 	bl	801a04c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bd2:	f7fe fce1 	bl	8002598 <main>
  bx  lr    
 8003bd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003bd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003be0:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8003be4:	0802e960 	.word	0x0802e960
  ldr r2, =_sbss
 8003be8:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8003bec:	2000e050 	.word	0x2000e050

08003bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bf0:	e7fe      	b.n	8003bf0 <ADC_IRQHandler>

08003bf2 <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 8003bf2:	b590      	push	{r4, r7, lr}
 8003bf4:	b087      	sub	sp, #28
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	0fdb      	lsrs	r3, r3, #31
 8003c00:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 8003c02:	7dfb      	ldrb	r3, [r7, #23]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <_ZNSt7__cxx119to_stringEi+0x1c>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	425b      	negs	r3, r3
 8003c0c:	e000      	b.n	8003c10 <_ZNSt7__cxx119to_stringEi+0x1e>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 8003c12:	210a      	movs	r1, #10
 8003c14:	6938      	ldr	r0, [r7, #16]
 8003c16:	f000 ff81 	bl	8004b1c <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 8003c1a:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 8003c1c:	7dfa      	ldrb	r2, [r7, #23]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	18d4      	adds	r4, r2, r3
 8003c22:	f107 0308 	add.w	r3, r7, #8
 8003c26:	4618      	mov	r0, r3
 8003c28:	f015 f818 	bl	8018c5c <_ZNSaIcEC1Ev>
 8003c2c:	f107 0308 	add.w	r3, r7, #8
 8003c30:	222d      	movs	r2, #45	; 0x2d
 8003c32:	4621      	mov	r1, r4
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f015 f90c 	bl	8018e52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 8003c3a:	f107 0308 	add.w	r3, r7, #8
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f015 f80d 	bl	8018c5e <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
 8003c46:	4619      	mov	r1, r3
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f015 f911 	bl	8018e70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	68f9      	ldr	r1, [r7, #12]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 ffa1 	bl	8004b9c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 8003c5a:	bf00      	nop
  }
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd90      	pop	{r4, r7, pc}

08003c64 <_ZN15PrintableSensor11toCharArrayEi>:
	char packet[50]={};

public:
	virtual const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList) = 0;

	const char* toCharArray(int value)
 8003c64:	b590      	push	{r4, r7, lr}
 8003c66:	b089      	sub	sp, #36	; 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
	{
		return std::to_string(value).c_str();
 8003c6e:	f107 0308 	add.w	r3, r7, #8
 8003c72:	6839      	ldr	r1, [r7, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff ffbc 	bl	8003bf2 <_ZNSt7__cxx119to_stringEi>
 8003c7a:	f107 0308 	add.w	r3, r7, #8
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f015 f8f9 	bl	8018e76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8003c84:	4604      	mov	r4, r0
 8003c86:	bf00      	nop
 8003c88:	f107 0308 	add.w	r3, r7, #8
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f015 f8e9 	bl	8018e64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c92:	4623      	mov	r3, r4
	}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3724      	adds	r7, #36	; 0x24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd90      	pop	{r4, r7, pc}

08003c9c <_ZN5drone5utils9functionsL11concatBytesEhh>:
	}*/

	namespace functions
	{
		static int16_t concatBytes(uint8_t msb, uint8_t lsb)
		{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	460a      	mov	r2, r1
 8003ca6:	71fb      	strb	r3, [r7, #7]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	71bb      	strb	r3, [r7, #6]
			return (((int16_t)msb << 8) | (int16_t)lsb);
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	021b      	lsls	r3, r3, #8
 8003cb0:	b21a      	sxth	r2, r3
 8003cb2:	79bb      	ldrb	r3, [r7, #6]
 8003cb4:	b21b      	sxth	r3, r3
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	b21b      	sxth	r3, r3
		}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <_ZN8SPI_ConnC1Ev>:
class SPI_Conn
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	4a04      	ldr	r2, [pc, #16]	; (8003ce4 <_ZN8SPI_ConnC1Ev+0x1c>)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	0801a860 	.word	0x0801a860

08003ce8 <_ZN15PrintableSensorC1Ev>:
class PrintableSensor
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	4a07      	ldr	r2, [pc, #28]	; (8003d10 <_ZN15PrintableSensorC1Ev+0x28>)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	2232      	movs	r2, #50	; 0x32
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f016 fa00 	bl	801a104 <memset>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	0801a854 	.word	0x0801a854

08003d14 <_ZN12CallsCounterC1Ev>:
	uint64_t getTaskCounterValue()
	{
		return this->interruptCounter;
	}
protected:
	CallsCounter() = default;
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	e9c1 2300 	strd	r2, r3, [r1]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <_ZN6BMP39010calib_coefC1Ev>:
#include "utils_functions.hpp"

class BMP390: SPI_Conn,public PrintableSensor, public CallsCounter
{
private:
	struct calib_coef
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	801a      	strh	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	805a      	strh	r2, [r3, #2]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	711a      	strb	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	80da      	strh	r2, [r3, #6]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	811a      	strh	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	729a      	strb	r2, [r3, #10]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	72da      	strb	r2, [r3, #11]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	819a      	strh	r2, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	81da      	strh	r2, [r3, #14]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	741a      	strb	r2, [r3, #16]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	745a      	strb	r2, [r3, #17]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	825a      	strh	r2, [r3, #18]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	751a      	strb	r2, [r3, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	755a      	strb	r2, [r3, #21]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4618      	mov	r0, r3
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <_ZN6BMP39020quantized_calib_dataC1Ev>:
		int16_t par_p9 {0};
		int8_t par_p10 {0};
		int8_t par_p11 {0};
	} calibCoef;

	struct quantized_calib_data
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	e9c1 2300 	strd	r2, r3, [r1]
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <_ZN6BMP390C1EP19__SPI_HandleTypeDef>:
 *      Author: Asus
 */

#include "BMP390.hpp"

BMP390::BMP390(SPI_HandleTypeDef *spi_port):
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
	,spiTxBuff {0U,0U}
	,spiRxBuff {0U,0U}
	,pressure {0.0}
	,temp {0.0}
	,raw_pressure {0U}
	,raw_temp {0U}
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff ff0f 	bl	8003cc8 <_ZN8SPI_ConnC1Ev>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3304      	adds	r3, #4
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7ff ff1a 	bl	8003ce8 <_ZN15PrintableSensorC1Ev>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3340      	adds	r3, #64	; 0x40
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff ff2b 	bl	8003d14 <_ZN12CallsCounterC1Ev>
 8003ebe:	4a1f      	ldr	r2, [pc, #124]	; (8003f3c <_ZN6BMP390C1EP19__SPI_HandleTypeDef+0xa4>)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	4a1e      	ldr	r2, [pc, #120]	; (8003f40 <_ZN6BMP390C1EP19__SPI_HandleTypeDef+0xa8>)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	605a      	str	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3350      	adds	r3, #80	; 0x50
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff ff39 	bl	8003d46 <_ZN6BMP39010calib_coefC1Ev>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3368      	adds	r3, #104	; 0x68
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff ff69 	bl	8003db0 <_ZN6BMP39020quantized_calib_dataC1Ev>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
{
}
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	0801a834 	.word	0x0801a834
 8003f40:	0801a848 	.word	0x0801a848

08003f44 <_ZN6BMP39011defaultInitEv>:

bool BMP390::defaultInit()
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	6078      	str	r0, [r7, #4]
	this->SPI_write(CMD,CMD_SOFTRESET);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	22b6      	movs	r2, #182	; 0xb6
 8003f54:	217e      	movs	r1, #126	; 0x7e
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	4798      	blx	r3
	HAL_Delay(20);
 8003f5a:	2014      	movs	r0, #20
 8003f5c:	f005 fada 	bl	8009514 <HAL_Delay>

	int debug = SPI_read(STATUS);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3304      	adds	r3, #4
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2103      	movs	r1, #3
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	4798      	blx	r3
 8003f6e:	4603      	mov	r3, r0
 8003f70:	60fb      	str	r3, [r7, #12]
	while ((debug= SPI_read(STATUS))==0)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3304      	adds	r3, #4
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2103      	movs	r1, #3
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	4798      	blx	r3
 8003f80:	4603      	mov	r3, r0
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bf0c      	ite	eq
 8003f8a:	2301      	moveq	r3, #1
 8003f8c:	2300      	movne	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <_ZN6BMP39011defaultInitEv+0x58>
		HAL_Delay(50);
 8003f94:	2032      	movs	r0, #50	; 0x32
 8003f96:	f005 fabd 	bl	8009514 <HAL_Delay>
	while ((debug= SPI_read(STATUS))==0)
 8003f9a:	e7ea      	b.n	8003f72 <_ZN6BMP39011defaultInitEv+0x2e>

	if (!this->initAndCheck(OSR,OSR_OSR_P_X16|OSR_OSR_T_X2,10))
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	230a      	movs	r3, #10
 8003fa2:	220c      	movs	r2, #12
 8003fa4:	211c      	movs	r1, #28
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f84d 	bl	8004046 <_ZN6BMP39012initAndCheckEhhhb>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f083 0301 	eor.w	r3, r3, #1
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <_ZN6BMP39011defaultInitEv+0x78>
		return false;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e040      	b.n	800403e <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(CONFIG,CONFIG_COEF_3,10))
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	230a      	movs	r3, #10
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	211f      	movs	r1, #31
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f83d 	bl	8004046 <_ZN6BMP39012initAndCheckEhhhb>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f083 0301 	eor.w	r3, r3, #1
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <_ZN6BMP39011defaultInitEv+0x98>
		return false;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e030      	b.n	800403e <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(ODR,ODR_ODR_25,10))
 8003fdc:	2300      	movs	r3, #0
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	230a      	movs	r3, #10
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	211d      	movs	r1, #29
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f82d 	bl	8004046 <_ZN6BMP39012initAndCheckEhhhb>
 8003fec:	4603      	mov	r3, r0
 8003fee:	f083 0301 	eor.w	r3, r3, #1
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <_ZN6BMP39011defaultInitEv+0xb8>
		return false;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	e020      	b.n	800403e <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(INT_CTRL,INT_CTRL_DRDY_EN|INT_CTRL_INT_LEVEL,10))
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	230a      	movs	r3, #10
 8004002:	2242      	movs	r2, #66	; 0x42
 8004004:	2119      	movs	r1, #25
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f81d 	bl	8004046 <_ZN6BMP39012initAndCheckEhhhb>
 800400c:	4603      	mov	r3, r0
 800400e:	f083 0301 	eor.w	r3, r3, #1
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <_ZN6BMP39011defaultInitEv+0xd8>
		return false;
 8004018:	2300      	movs	r3, #0
 800401a:	e010      	b.n	800403e <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(PWR_CTRL,PWR_CTRL_PRESS_EN|PWR_CTRL_TEMP_EN|PWR_CTRL_MODE_NORMAL,10))
 800401c:	2300      	movs	r3, #0
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	230a      	movs	r3, #10
 8004022:	2233      	movs	r2, #51	; 0x33
 8004024:	211b      	movs	r1, #27
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f80d 	bl	8004046 <_ZN6BMP39012initAndCheckEhhhb>
 800402c:	4603      	mov	r3, r0
 800402e:	f083 0301 	eor.w	r3, r3, #1
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <_ZN6BMP39011defaultInitEv+0xf8>
		return false;
 8004038:	2300      	movs	r3, #0
 800403a:	e000      	b.n	800403e <_ZN6BMP39011defaultInitEv+0xfa>

	return true;
 800403c:	2301      	movs	r3, #1
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <_ZN6BMP39012initAndCheckEhhhb>:

bool BMP390::initAndCheck(uint8_t addr,uint8_t val,uint8_t numberOfTries,bool read_only)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	4608      	mov	r0, r1
 8004050:	4611      	mov	r1, r2
 8004052:	461a      	mov	r2, r3
 8004054:	4603      	mov	r3, r0
 8004056:	70fb      	strb	r3, [r7, #3]
 8004058:	460b      	mov	r3, r1
 800405a:	70bb      	strb	r3, [r7, #2]
 800405c:	4613      	mov	r3, r2
 800405e:	707b      	strb	r3, [r7, #1]
	for (int i=0;i<numberOfTries;i++)
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	787b      	ldrb	r3, [r7, #1]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	429a      	cmp	r2, r3
 800406a:	da21      	bge.n	80040b0 <_ZN6BMP39012initAndCheckEhhhb+0x6a>
	{
		if (read_only==false)
 800406c:	7e3b      	ldrb	r3, [r7, #24]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <_ZN6BMP39012initAndCheckEhhhb+0x3a>
			SPI_write(addr,val);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	78ba      	ldrb	r2, [r7, #2]
 800407a:	78f9      	ldrb	r1, [r7, #3]
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	4798      	blx	r3

		if (SPI_read(addr)==val)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3304      	adds	r3, #4
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	4611      	mov	r1, r2
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	4798      	blx	r3
 8004090:	4603      	mov	r3, r0
 8004092:	461a      	mov	r2, r3
 8004094:	78bb      	ldrb	r3, [r7, #2]
 8004096:	4293      	cmp	r3, r2
 8004098:	bf0c      	ite	eq
 800409a:	2301      	moveq	r3, #1
 800409c:	2300      	movne	r3, #0
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <_ZN6BMP39012initAndCheckEhhhb+0x62>
			return true;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e004      	b.n	80040b2 <_ZN6BMP39012initAndCheckEhhhb+0x6c>
	for (int i=0;i<numberOfTries;i++)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3301      	adds	r3, #1
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	e7d9      	b.n	8004064 <_ZN6BMP39012initAndCheckEhhhb+0x1e>
	}
	return false;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <_ZN6BMP3906updateEv>:

void BMP390::update()
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
	uint8_t DATA0=SPI_read(DATA_0);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3304      	adds	r3, #4
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2104      	movs	r1, #4
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	4798      	blx	r3
 80040d0:	4603      	mov	r3, r0
 80040d2:	73fb      	strb	r3, [r7, #15]
	uint8_t DATA1=SPI_read(DATA_1);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3304      	adds	r3, #4
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2105      	movs	r1, #5
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	4798      	blx	r3
 80040e2:	4603      	mov	r3, r0
 80040e4:	73bb      	strb	r3, [r7, #14]
	uint8_t DATA2=SPI_read(DATA_2);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3304      	adds	r3, #4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2106      	movs	r1, #6
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
 80040f4:	4603      	mov	r3, r0
 80040f6:	737b      	strb	r3, [r7, #13]

	uint8_t TEMP0=SPI_read(DATA_3);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3304      	adds	r3, #4
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2107      	movs	r1, #7
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	4798      	blx	r3
 8004106:	4603      	mov	r3, r0
 8004108:	733b      	strb	r3, [r7, #12]
	uint8_t TEMP1=SPI_read(DATA_4);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3304      	adds	r3, #4
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2108      	movs	r1, #8
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	4798      	blx	r3
 8004118:	4603      	mov	r3, r0
 800411a:	72fb      	strb	r3, [r7, #11]
	uint8_t TEMP2=SPI_read(DATA_5);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3304      	adds	r3, #4
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2109      	movs	r1, #9
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	4798      	blx	r3
 800412a:	4603      	mov	r3, r0
 800412c:	72bb      	strb	r3, [r7, #10]

	this->raw_pressure = ((uint32_t)DATA2<<16)|((uint16_t)DATA1<<8)|DATA0;
 800412e:	7b7b      	ldrb	r3, [r7, #13]
 8004130:	041b      	lsls	r3, r3, #16
 8004132:	7bba      	ldrb	r2, [r7, #14]
 8004134:	0212      	lsls	r2, r2, #8
 8004136:	431a      	orrs	r2, r3
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	this->raw_temp = ((uint32_t)TEMP2<<16)|((uint16_t)TEMP1<<8)|TEMP0;
 8004142:	7abb      	ldrb	r3, [r7, #10]
 8004144:	041b      	lsls	r3, r3, #16
 8004146:	7afa      	ldrb	r2, [r7, #11]
 8004148:	0212      	lsls	r2, r2, #8
 800414a:	431a      	orrs	r2, r3
 800414c:	7b3b      	ldrb	r3, [r7, #12]
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	this->read_calib_data();
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fa72 	bl	8004640 <_ZN6BMP39015read_calib_dataEv>
	this->compensate_data();
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f804 	bl	800416a <_ZN6BMP39015compensate_dataEv>
}
 8004162:	bf00      	nop
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <_ZN6BMP39015compensate_dataEv>:

void BMP390::compensate_data()
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b082      	sub	sp, #8
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
	this->read_calib_data();
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fa64 	bl	8004640 <_ZN6BMP39015read_calib_dataEv>
	this->compensate_temperature();
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f807 	bl	800418c <_ZN6BMP39022compensate_temperatureEv>
	this->compensate_pressure();
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f854 	bl	800422c <_ZN6BMP39019compensate_pressureEv>
}
 8004184:	bf00      	nop
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <_ZN6BMP39022compensate_temperatureEv>:

void BMP390::compensate_temperature()
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
    double partial_data1 = 0;
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double partial_data2 = 0;
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	e9c7 2302 	strd	r2, r3, [r7, #8]

    partial_data1 = static_cast<double>(this->raw_temp) - quantizedCalibCoef.par_t1;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fc f956 	bl	8000464 <__aeabi_ui2d>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80041be:	f7fc f813 	bl	80001e8 <__aeabi_dsub>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    partial_data2 = partial_data1 * quantizedCalibCoef.par_t2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80041d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80041d4:	f7fc f9c0 	bl	8000558 <__aeabi_dmul>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	e9c7 2302 	strd	r2, r3, [r7, #8]

    this->quantizedCalibCoef.t_lin = partial_data2 + (partial_data1 * partial_data1) * quantizedCalibCoef.par_t3;
 80041e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80041e8:	f7fc f9b6 	bl	8000558 <__aeabi_dmul>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4610      	mov	r0, r2
 80041f2:	4619      	mov	r1, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80041fa:	f7fc f9ad 	bl	8000558 <__aeabi_dmul>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4610      	mov	r0, r2
 8004204:	4619      	mov	r1, r3
 8004206:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800420a:	f7fb ffef 	bl	80001ec <__adddf3>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8

    this->temp = static_cast<double>(quantizedCalibCoef.t_lin);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
}
 8004224:	bf00      	nop
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <_ZN6BMP39019compensate_pressureEv>:

void BMP390::compensate_pressure()
{
 800422c:	b5b0      	push	{r4, r5, r7, lr}
 800422e:	b08e      	sub	sp, #56	; 0x38
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = this->quantizedCalibCoef.par_p6 * this->quantizedCalibCoef.t_lin;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8004240:	f7fc f98a 	bl	8000558 <__aeabi_dmul>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data2 = this->quantizedCalibCoef.par_p7 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 800425e:	f7fc f97b 	bl	8000558 <__aeabi_dmul>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4620      	mov	r0, r4
 8004268:	4629      	mov	r1, r5
 800426a:	f7fc f975 	bl	8000558 <__aeabi_dmul>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data3 = this->quantizedCalibCoef.par_p8 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8004288:	f7fc f966 	bl	8000558 <__aeabi_dmul>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4610      	mov	r0, r2
 8004292:	4619      	mov	r1, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 800429a:	f7fc f95d 	bl	8000558 <__aeabi_dmul>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4620      	mov	r0, r4
 80042a4:	4629      	mov	r1, r5
 80042a6:	f7fc f957 	bl	8000558 <__aeabi_dmul>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_out1 = this->quantizedCalibCoef.par_p5 + partial_data1 + partial_data2 + partial_data3;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 80042b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80042bc:	f7fb ff96 	bl	80001ec <__adddf3>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4610      	mov	r0, r2
 80042c6:	4619      	mov	r1, r3
 80042c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042cc:	f7fb ff8e 	bl	80001ec <__adddf3>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80042d8:	f7fb ff88 	bl	80001ec <__adddf3>
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    partial_data1 = this->quantizedCalibCoef.par_p2 * this->quantizedCalibCoef.t_lin;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80042f0:	f7fc f932 	bl	8000558 <__aeabi_dmul>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data2 = this->quantizedCalibCoef.par_p3 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 800430e:	f7fc f923 	bl	8000558 <__aeabi_dmul>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4620      	mov	r0, r4
 8004318:	4629      	mov	r1, r5
 800431a:	f7fc f91d 	bl	8000558 <__aeabi_dmul>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data3 = this->quantizedCalibCoef.par_p4 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8004338:	f7fc f90e 	bl	8000558 <__aeabi_dmul>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4610      	mov	r0, r2
 8004342:	4619      	mov	r1, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 800434a:	f7fc f905 	bl	8000558 <__aeabi_dmul>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4620      	mov	r0, r4
 8004354:	4629      	mov	r1, r5
 8004356:	f7fc f8ff 	bl	8000558 <__aeabi_dmul>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_out2 = static_cast<double>(this->raw_pressure) * (this->quantizedCalibCoef.par_p1 + partial_data1 + partial_data2 + partial_data3);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004368:	4618      	mov	r0, r3
 800436a:	f7fc f87b 	bl	8000464 <__aeabi_ui2d>
 800436e:	4604      	mov	r4, r0
 8004370:	460d      	mov	r5, r1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8004378:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800437c:	f7fb ff36 	bl	80001ec <__adddf3>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4610      	mov	r0, r2
 8004386:	4619      	mov	r1, r3
 8004388:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800438c:	f7fb ff2e 	bl	80001ec <__adddf3>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4610      	mov	r0, r2
 8004396:	4619      	mov	r1, r3
 8004398:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800439c:	f7fb ff26 	bl	80001ec <__adddf3>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4620      	mov	r0, r4
 80043a6:	4629      	mov	r1, r5
 80043a8:	f7fc f8d6 	bl	8000558 <__aeabi_dmul>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	e9c7 2304 	strd	r2, r3, [r7, #16]

    partial_data1 = static_cast<double>(this->raw_pressure) * static_cast<double>(this->raw_pressure);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fc f852 	bl	8000464 <__aeabi_ui2d>
 80043c0:	4604      	mov	r4, r0
 80043c2:	460d      	mov	r5, r1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fc f84a 	bl	8000464 <__aeabi_ui2d>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4620      	mov	r0, r4
 80043d6:	4629      	mov	r1, r5
 80043d8:	f7fc f8be 	bl	8000558 <__aeabi_dmul>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data2 = this->quantizedCalibCoef.par_p9 + this->quantizedCalibCoef.par_p10 * this->quantizedCalibCoef.t_lin;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80043f6:	f7fc f8af 	bl	8000558 <__aeabi_dmul>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4620      	mov	r0, r4
 8004400:	4629      	mov	r1, r5
 8004402:	f7fb fef3 	bl	80001ec <__adddf3>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data3 = partial_data1 * partial_data2;
 800440e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004412:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004416:	f7fc f89f 	bl	8000558 <__aeabi_dmul>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data4 = partial_data3 + (static_cast<double>(this->raw_pressure) * static_cast<double>(this->raw_pressure) * static_cast<double>(this->raw_pressure)) * this->quantizedCalibCoef.par_p11;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004428:	4618      	mov	r0, r3
 800442a:	f7fc f81b 	bl	8000464 <__aeabi_ui2d>
 800442e:	4604      	mov	r4, r0
 8004430:	460d      	mov	r5, r1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004438:	4618      	mov	r0, r3
 800443a:	f7fc f813 	bl	8000464 <__aeabi_ui2d>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4620      	mov	r0, r4
 8004444:	4629      	mov	r1, r5
 8004446:	f7fc f887 	bl	8000558 <__aeabi_dmul>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4614      	mov	r4, r2
 8004450:	461d      	mov	r5, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004458:	4618      	mov	r0, r3
 800445a:	f7fc f803 	bl	8000464 <__aeabi_ui2d>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	4620      	mov	r0, r4
 8004464:	4629      	mov	r1, r5
 8004466:	f7fc f877 	bl	8000558 <__aeabi_dmul>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4610      	mov	r0, r2
 8004470:	4619      	mov	r1, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8004478:	f7fc f86e 	bl	8000558 <__aeabi_dmul>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004484:	f7fb feb2 	bl	80001ec <__adddf3>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	e9c7 2302 	strd	r2, r3, [r7, #8]

    this->pressure = (partial_out1 + partial_out2 + partial_data4) / 100.0f;
 8004490:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004494:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004498:	f7fb fea8 	bl	80001ec <__adddf3>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044a8:	f7fb fea0 	bl	80001ec <__adddf3>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4610      	mov	r0, r2
 80044b2:	4619      	mov	r1, r3
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <_ZN6BMP39019compensate_pressureEv+0x2a4>)
 80044ba:	f7fc f977 	bl	80007ac <__aeabi_ddiv>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
}
 80044c8:	bf00      	nop
 80044ca:	3738      	adds	r7, #56	; 0x38
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bdb0      	pop	{r4, r5, r7, pc}
 80044d0:	40590000 	.word	0x40590000

080044d4 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* BMP390::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 80044d4:	b5b0      	push	{r4, r5, r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3308      	adds	r3, #8
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::BMP_RAW_PRESS)!=senorsList.end())
 80044e6:	230f      	movs	r3, #15
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	f107 0310 	add.w	r3, r7, #16
 80044ee:	4619      	mov	r1, r3
 80044f0:	6838      	ldr	r0, [r7, #0]
 80044f2:	f000 fba9 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80044f6:	4603      	mov	r3, r0
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	6838      	ldr	r0, [r7, #0]
 80044fc:	f000 fbbd 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8004500:	4603      	mov	r3, r0
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	f107 0214 	add.w	r2, r7, #20
 8004508:	f107 030c 	add.w	r3, r7, #12
 800450c:	4611      	mov	r1, r2
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fbc0 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d022      	beq.n	8004560 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x8c>
	{
		strcat(packet,toCharArray(pressure));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f103 0408 	add.w	r4, r3, #8
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	1d1d      	adds	r5, r3, #4
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800452a:	4610      	mov	r0, r2
 800452c:	4619      	mov	r1, r3
 800452e:	f7fc fac3 	bl	8000ab8 <__aeabi_d2iz>
 8004532:	4603      	mov	r3, r0
 8004534:	4619      	mov	r1, r3
 8004536:	4628      	mov	r0, r5
 8004538:	f7ff fb94 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 800453c:	4603      	mov	r3, r0
 800453e:	4619      	mov	r1, r3
 8004540:	4620      	mov	r0, r4
 8004542:	f015 ff1b 	bl	801a37c <strcat>
		strcat(packet,",");
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f103 0408 	add.w	r4, r3, #8
 800454c:	4620      	mov	r0, r4
 800454e:	f7fb fe3f 	bl	80001d0 <strlen>
 8004552:	4603      	mov	r3, r0
 8004554:	4423      	add	r3, r4
 8004556:	4905      	ldr	r1, [pc, #20]	; (800456c <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x98>)
 8004558:	461a      	mov	r2, r3
 800455a:	460b      	mov	r3, r1
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3308      	adds	r3, #8
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bdb0      	pop	{r4, r5, r7, pc}
 800456c:	0801a520 	.word	0x0801a520

08004570 <_ZThn4_N6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	bool defaultInit();
	void update();
	int32_t getPressure();
	int32_t getTemp();
	uint8_t getChipID();
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 8004570:	f1a0 0004 	sub.w	r0, r0, #4
 8004574:	f7ff bfae 	b.w	80044d4 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>

08004578 <_ZN6BMP3909SPI_writeEhh>:
{
	return this->SPI_read(CHIP_ID);
}

void BMP390::SPI_write(uint8_t reg,uint8_t data)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	70fb      	strb	r3, [r7, #3]
 8004584:	4613      	mov	r3, r2
 8004586:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(BMP_CS_PORT,BMP_CS_PIN,GPIO_PIN_RESET);
 8004588:	2200      	movs	r2, #0
 800458a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800458e:	480f      	ldr	r0, [pc, #60]	; (80045cc <_ZN6BMP3909SPI_writeEhh+0x54>)
 8004590:	f006 fc38 	bl	800ae04 <HAL_GPIO_WritePin>
	this->spiTxBuff[0] = reg;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	this->spiTxBuff[1] = data;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	78ba      	ldrb	r2, [r7, #2]
 80045a0:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	33e4      	adds	r3, #228	; 0xe4
 80045ae:	2202      	movs	r2, #2
 80045b0:	4619      	mov	r1, r3
 80045b2:	f009 fddf 	bl	800e174 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(BMP_CS_PORT,BMP_CS_PIN,GPIO_PIN_SET);
 80045b6:	2201      	movs	r2, #1
 80045b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045bc:	4803      	ldr	r0, [pc, #12]	; (80045cc <_ZN6BMP3909SPI_writeEhh+0x54>)
 80045be:	f006 fc21 	bl	800ae04 <HAL_GPIO_WritePin>
}
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40020400 	.word	0x40020400

080045d0 <_ZN6BMP3908SPI_readEh>:

uint8_t BMP390::SPI_read(uint8_t reg)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BMP_CS_PORT, BMP_CS_PIN, GPIO_PIN_RESET);
 80045dc:	2200      	movs	r2, #0
 80045de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045e2:	4816      	ldr	r0, [pc, #88]	; (800463c <_ZN6BMP3908SPI_readEh+0x6c>)
 80045e4:	f006 fc0e 	bl	800ae04 <HAL_GPIO_WritePin>
	this->spiTxBuff[0]=reg|0x80;
 80045e8:	78fb      	ldrb	r3, [r7, #3]
 80045ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	this->spiTxBuff[1]=0x00;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff, 2);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	33e4      	adds	r3, #228	; 0xe4
 8004608:	2202      	movs	r2, #2
 800460a:	4619      	mov	r1, r3
 800460c:	f009 fdb2 	bl	800e174 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(spi_port, (uint8_t*)spiRxBuff, 1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	33e6      	adds	r3, #230	; 0xe6
 800461a:	2201      	movs	r2, #1
 800461c:	4619      	mov	r1, r3
 800461e:	f009 fe5f 	bl	800e2e0 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(BMP_CS_PORT, BMP_CS_PIN, GPIO_PIN_SET);
 8004622:	2201      	movs	r2, #1
 8004624:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004628:	4804      	ldr	r0, [pc, #16]	; (800463c <_ZN6BMP3908SPI_readEh+0x6c>)
 800462a:	f006 fbeb 	bl	800ae04 <HAL_GPIO_WritePin>

	return this->spiRxBuff[0];
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
}
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40020400 	.word	0x40020400

08004640 <_ZN6BMP39015read_calib_dataEv>:

void BMP390::read_calib_data()
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08a      	sub	sp, #40	; 0x28
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	double temp_var = 0;
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uint8_t NVM_PAR_T1_1_value = this->SPI_read(NVM_PAR_T1_1);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3304      	adds	r3, #4
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2131      	movs	r1, #49	; 0x31
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	4798      	blx	r3
 8004662:	4603      	mov	r3, r0
 8004664:	77fb      	strb	r3, [r7, #31]
	uint8_t NVM_PAR_T1_2_value = this->SPI_read(NVM_PAR_T1_2);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3304      	adds	r3, #4
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2132      	movs	r1, #50	; 0x32
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	4798      	blx	r3
 8004674:	4603      	mov	r3, r0
 8004676:	77bb      	strb	r3, [r7, #30]
	uint8_t NVM_PAR_T2_1_value = this->SPI_read(NVM_PAR_T2_1);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3304      	adds	r3, #4
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2133      	movs	r1, #51	; 0x33
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	4798      	blx	r3
 8004686:	4603      	mov	r3, r0
 8004688:	777b      	strb	r3, [r7, #29]
	uint8_t NVM_PAR_T2_2_value = this->SPI_read(NVM_PAR_T2_2);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3304      	adds	r3, #4
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2134      	movs	r1, #52	; 0x34
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	4798      	blx	r3
 8004698:	4603      	mov	r3, r0
 800469a:	773b      	strb	r3, [r7, #28]
	uint8_t NVM_PAR_T3_value = this->SPI_read(NVM_PAR_T3);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3304      	adds	r3, #4
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2135      	movs	r1, #53	; 0x35
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	4798      	blx	r3
 80046aa:	4603      	mov	r3, r0
 80046ac:	76fb      	strb	r3, [r7, #27]
	uint8_t NVM_PAR_P1_1_value = this->SPI_read(NVM_PAR_P1_1);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3304      	adds	r3, #4
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2136      	movs	r1, #54	; 0x36
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	4798      	blx	r3
 80046bc:	4603      	mov	r3, r0
 80046be:	76bb      	strb	r3, [r7, #26]
	uint8_t NVM_PAR_P1_2_value = this->SPI_read(NVM_PAR_P1_2);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3304      	adds	r3, #4
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2137      	movs	r1, #55	; 0x37
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	4798      	blx	r3
 80046ce:	4603      	mov	r3, r0
 80046d0:	767b      	strb	r3, [r7, #25]
	uint8_t NVM_PAR_P2_1_value = this->SPI_read(NVM_PAR_P2_1);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3304      	adds	r3, #4
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2138      	movs	r1, #56	; 0x38
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	4798      	blx	r3
 80046e0:	4603      	mov	r3, r0
 80046e2:	763b      	strb	r3, [r7, #24]
	uint8_t NVM_PAR_P2_2_value = this->SPI_read(NVM_PAR_P2_2);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3304      	adds	r3, #4
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2139      	movs	r1, #57	; 0x39
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	4798      	blx	r3
 80046f2:	4603      	mov	r3, r0
 80046f4:	75fb      	strb	r3, [r7, #23]
	uint8_t NVM_PAR_P3_value = this->SPI_read(NVM_PAR_P3);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3304      	adds	r3, #4
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	213a      	movs	r1, #58	; 0x3a
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	4798      	blx	r3
 8004704:	4603      	mov	r3, r0
 8004706:	75bb      	strb	r3, [r7, #22]
	uint8_t NVM_PAR_P4_value = this->SPI_read(NVM_PAR_P4);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3304      	adds	r3, #4
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	213b      	movs	r1, #59	; 0x3b
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	4798      	blx	r3
 8004716:	4603      	mov	r3, r0
 8004718:	757b      	strb	r3, [r7, #21]
	uint8_t NVM_PAR_P5_1_value = this->SPI_read(NVM_PAR_P5_1);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3304      	adds	r3, #4
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	213c      	movs	r1, #60	; 0x3c
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	4798      	blx	r3
 8004728:	4603      	mov	r3, r0
 800472a:	753b      	strb	r3, [r7, #20]
	uint8_t NVM_PAR_P5_2_value = this->SPI_read(NVM_PAR_P5_2);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3304      	adds	r3, #4
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	213d      	movs	r1, #61	; 0x3d
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	4798      	blx	r3
 800473a:	4603      	mov	r3, r0
 800473c:	74fb      	strb	r3, [r7, #19]
	uint8_t NVM_PAR_P6_1_value = this->SPI_read(NVM_PAR_P6_1);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3304      	adds	r3, #4
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	213e      	movs	r1, #62	; 0x3e
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	4798      	blx	r3
 800474c:	4603      	mov	r3, r0
 800474e:	74bb      	strb	r3, [r7, #18]
	uint8_t NVM_PAR_P6_2_value = this->SPI_read(NVM_PAR_P6_2);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3304      	adds	r3, #4
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	213f      	movs	r1, #63	; 0x3f
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	4798      	blx	r3
 800475e:	4603      	mov	r3, r0
 8004760:	747b      	strb	r3, [r7, #17]
	uint8_t NVM_PAR_P7_value = this->SPI_read(NVM_PAR_P7);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3304      	adds	r3, #4
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2140      	movs	r1, #64	; 0x40
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	4798      	blx	r3
 8004770:	4603      	mov	r3, r0
 8004772:	743b      	strb	r3, [r7, #16]
	uint8_t NVM_PAR_P8_value = this->SPI_read(NVM_PAR_P8);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3304      	adds	r3, #4
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2141      	movs	r1, #65	; 0x41
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	4798      	blx	r3
 8004782:	4603      	mov	r3, r0
 8004784:	73fb      	strb	r3, [r7, #15]
	uint8_t NVM_PAR_P9_1_value = this->SPI_read(NVM_PAR_P9_1);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3304      	adds	r3, #4
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2142      	movs	r1, #66	; 0x42
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	4798      	blx	r3
 8004794:	4603      	mov	r3, r0
 8004796:	73bb      	strb	r3, [r7, #14]
	uint8_t NVM_PAR_P9_2_value = this->SPI_read(NVM_PAR_P9_2);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3304      	adds	r3, #4
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2143      	movs	r1, #67	; 0x43
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	4798      	blx	r3
 80047a6:	4603      	mov	r3, r0
 80047a8:	737b      	strb	r3, [r7, #13]
	uint8_t NVM_PAR_P10_value = this->SPI_read(NVM_PAR_P10);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3304      	adds	r3, #4
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2144      	movs	r1, #68	; 0x44
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	4798      	blx	r3
 80047b8:	4603      	mov	r3, r0
 80047ba:	733b      	strb	r3, [r7, #12]
	uint8_t NVM_PAR_P11_value = this->SPI_read(NVM_PAR_P11);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3304      	adds	r3, #4
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2145      	movs	r1, #69	; 0x45
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	4798      	blx	r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	72fb      	strb	r3, [r7, #11]

    this->calibCoef.par_t1 = drone::utils::functions::concatBytes(NVM_PAR_T1_2_value, NVM_PAR_T1_1_value);
 80047ce:	7ffa      	ldrb	r2, [r7, #31]
 80047d0:	7fbb      	ldrb	r3, [r7, #30]
 80047d2:	4611      	mov	r1, r2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fa61 	bl	8003c9c <_ZN5drone5utils9functionsL11concatBytesEhh>
 80047da:	4603      	mov	r3, r0
 80047dc:	b29a      	uxth	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    this->calibCoef.par_t2 = drone::utils::functions::concatBytes(NVM_PAR_T2_2_value, NVM_PAR_T2_1_value);
 80047e4:	7f7a      	ldrb	r2, [r7, #29]
 80047e6:	7f3b      	ldrb	r3, [r7, #28]
 80047e8:	4611      	mov	r1, r2
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff fa56 	bl	8003c9c <_ZN5drone5utils9functionsL11concatBytesEhh>
 80047f0:	4603      	mov	r3, r0
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    this->calibCoef.par_t3 = static_cast<int8_t>(NVM_PAR_T3_value);
 80047fa:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    this->calibCoef.par_p1 = drone::utils::functions::concatBytes(NVM_PAR_P1_2_value, NVM_PAR_P1_1_value);
 8004804:	7eba      	ldrb	r2, [r7, #26]
 8004806:	7e7b      	ldrb	r3, [r7, #25]
 8004808:	4611      	mov	r1, r2
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff fa46 	bl	8003c9c <_ZN5drone5utils9functionsL11concatBytesEhh>
 8004810:	4603      	mov	r3, r0
 8004812:	461a      	mov	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    this->calibCoef.par_p2 = drone::utils::functions::concatBytes(NVM_PAR_P2_2_value, NVM_PAR_P2_1_value);
 800481a:	7e3a      	ldrb	r2, [r7, #24]
 800481c:	7dfb      	ldrb	r3, [r7, #23]
 800481e:	4611      	mov	r1, r2
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff fa3b 	bl	8003c9c <_ZN5drone5utils9functionsL11concatBytesEhh>
 8004826:	4603      	mov	r3, r0
 8004828:	461a      	mov	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    this->calibCoef.par_p3 = static_cast<int8_t>(NVM_PAR_P3_value);
 8004830:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    this->calibCoef.par_p4 = static_cast<int8_t>(NVM_PAR_P4_value);
 800483a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    this->calibCoef.par_p5 = drone::utils::functions::concatBytes(NVM_PAR_P5_2_value, NVM_PAR_P5_1_value);
 8004844:	7d3a      	ldrb	r2, [r7, #20]
 8004846:	7cfb      	ldrb	r3, [r7, #19]
 8004848:	4611      	mov	r1, r2
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff fa26 	bl	8003c9c <_ZN5drone5utils9functionsL11concatBytesEhh>
 8004850:	4603      	mov	r3, r0
 8004852:	b29a      	uxth	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    this->calibCoef.par_p6 = drone::utils::functions::concatBytes(NVM_PAR_P6_2_value, NVM_PAR_P6_1_value);
 800485a:	7cba      	ldrb	r2, [r7, #18]
 800485c:	7c7b      	ldrb	r3, [r7, #17]
 800485e:	4611      	mov	r1, r2
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff fa1b 	bl	8003c9c <_ZN5drone5utils9functionsL11concatBytesEhh>
 8004866:	4603      	mov	r3, r0
 8004868:	b29a      	uxth	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    this->calibCoef.par_p7 = static_cast<int8_t>(NVM_PAR_P7_value);
 8004870:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    this->calibCoef.par_p8 = static_cast<int8_t>(NVM_PAR_P8_value);
 800487a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    this->calibCoef.par_p9 = drone::utils::functions::concatBytes(NVM_PAR_P9_2_value, NVM_PAR_P9_1_value);
 8004884:	7bba      	ldrb	r2, [r7, #14]
 8004886:	7b7b      	ldrb	r3, [r7, #13]
 8004888:	4611      	mov	r1, r2
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff fa06 	bl	8003c9c <_ZN5drone5utils9functionsL11concatBytesEhh>
 8004890:	4603      	mov	r3, r0
 8004892:	461a      	mov	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    this->calibCoef.par_p10 = static_cast<int8_t>(NVM_PAR_P10_value);
 800489a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    this->calibCoef.par_p11 = static_cast<int8_t>(NVM_PAR_P11_value);
 80048a4:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

    temp_var = 0.00390625f;
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	4b90      	ldr	r3, [pc, #576]	; (8004af4 <_ZN6BMP39015read_calib_dataEv+0x4b4>)
 80048b4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_t1 = static_cast<double>(this->calibCoef.par_t1) / temp_var;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fb fdd0 	bl	8000464 <__aeabi_ui2d>
 80048c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048c8:	f7fb ff70 	bl	80007ac <__aeabi_ddiv>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
    temp_var = 1073741824.0f;
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	4b87      	ldr	r3, [pc, #540]	; (8004af8 <_ZN6BMP39015read_calib_dataEv+0x4b8>)
 80048dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_t2 = static_cast<double>(this->calibCoef.par_t2) / temp_var;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fb fdbc 	bl	8000464 <__aeabi_ui2d>
 80048ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048f0:	f7fb ff5c 	bl	80007ac <__aeabi_ddiv>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
    temp_var = 281474976710656.0f;
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	4b7e      	ldr	r3, [pc, #504]	; (8004afc <_ZN6BMP39015read_calib_dataEv+0x4bc>)
 8004904:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_t3 = static_cast<double>(this->calibCoef.par_t3) / temp_var;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 800490e:	4618      	mov	r0, r3
 8004910:	f7fb fdb8 	bl	8000484 <__aeabi_i2d>
 8004914:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004918:	f7fb ff48 	bl	80007ac <__aeabi_ddiv>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
    temp_var = 1048576.0f;
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	4b75      	ldr	r3, [pc, #468]	; (8004b00 <_ZN6BMP39015read_calib_dataEv+0x4c0>)
 800492c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p1 = static_cast<double>(this->calibCoef.par_p1 - 16384) / temp_var;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8004936:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800493a:	4618      	mov	r0, r3
 800493c:	f7fb fda2 	bl	8000484 <__aeabi_i2d>
 8004940:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004944:	f7fb ff32 	bl	80007ac <__aeabi_ddiv>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    temp_var = 536870912.0f;
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	4b6b      	ldr	r3, [pc, #428]	; (8004b04 <_ZN6BMP39015read_calib_dataEv+0x4c4>)
 8004958:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p2 = static_cast<double>(this->calibCoef.par_p2 - 16384) / temp_var;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8004962:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8004966:	4618      	mov	r0, r3
 8004968:	f7fb fd8c 	bl	8000484 <__aeabi_i2d>
 800496c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004970:	f7fb ff1c 	bl	80007ac <__aeabi_ddiv>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    temp_var = 4294967296.0f;
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	4b61      	ldr	r3, [pc, #388]	; (8004b08 <_ZN6BMP39015read_calib_dataEv+0x4c8>)
 8004984:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p3 = static_cast<double>(this->calibCoef.par_p3) / temp_var;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f993 305a 	ldrsb.w	r3, [r3, #90]	; 0x5a
 800498e:	4618      	mov	r0, r3
 8004990:	f7fb fd78 	bl	8000484 <__aeabi_i2d>
 8004994:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004998:	f7fb ff08 	bl	80007ac <__aeabi_ddiv>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    temp_var = 137438953472.0f;
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	4b58      	ldr	r3, [pc, #352]	; (8004b0c <_ZN6BMP39015read_calib_dataEv+0x4cc>)
 80049ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p4 = static_cast<double>(this->calibCoef.par_p4) / temp_var;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f993 305b 	ldrsb.w	r3, [r3, #91]	; 0x5b
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fb fd64 	bl	8000484 <__aeabi_i2d>
 80049bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049c0:	f7fb fef4 	bl	80007ac <__aeabi_ddiv>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

    temp_var = 0.125f;
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80049d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p5 = static_cast<double>(this->calibCoef.par_p5) / temp_var;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7fb fd3f 	bl	8000464 <__aeabi_ui2d>
 80049e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049ea:	f7fb fedf 	bl	80007ac <__aeabi_ddiv>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    temp_var = 64.0f;
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	4b44      	ldr	r3, [pc, #272]	; (8004b10 <_ZN6BMP39015read_calib_dataEv+0x4d0>)
 80049fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p6 = static_cast<double>(this->calibCoef.par_p6) / temp_var;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fb fd2b 	bl	8000464 <__aeabi_ui2d>
 8004a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a12:	f7fb fecb 	bl	80007ac <__aeabi_ddiv>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    temp_var = 256.0f;
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	4b3b      	ldr	r3, [pc, #236]	; (8004b14 <_ZN6BMP39015read_calib_dataEv+0x4d4>)
 8004a26:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p7 = static_cast<double>(this->calibCoef.par_p7) / temp_var;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f993 3060 	ldrsb.w	r3, [r3, #96]	; 0x60
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fb fd27 	bl	8000484 <__aeabi_i2d>
 8004a36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a3a:	f7fb feb7 	bl	80007ac <__aeabi_ddiv>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    temp_var = 32768.0f;
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	4b32      	ldr	r3, [pc, #200]	; (8004b18 <_ZN6BMP39015read_calib_dataEv+0x4d8>)
 8004a4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p8 = static_cast<double>(this->calibCoef.par_p8) / temp_var;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f993 3061 	ldrsb.w	r3, [r3, #97]	; 0x61
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7fb fd13 	bl	8000484 <__aeabi_i2d>
 8004a5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a62:	f7fb fea3 	bl	80007ac <__aeabi_ddiv>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
    temp_var = 281474976710656.0f;
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	4b21      	ldr	r3, [pc, #132]	; (8004afc <_ZN6BMP39015read_calib_dataEv+0x4bc>)
 8004a76:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p9 = static_cast<double>(this->calibCoef.par_p9) / temp_var;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fb fcff 	bl	8000484 <__aeabi_i2d>
 8004a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a8a:	f7fb fe8f 	bl	80007ac <__aeabi_ddiv>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
    temp_var = 281474976710656.0f;
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	4b17      	ldr	r3, [pc, #92]	; (8004afc <_ZN6BMP39015read_calib_dataEv+0x4bc>)
 8004a9e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p10 = static_cast<double>(this->calibCoef.par_p10) / temp_var;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f993 3064 	ldrsb.w	r3, [r3, #100]	; 0x64
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fb fceb 	bl	8000484 <__aeabi_i2d>
 8004aae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ab2:	f7fb fe7b 	bl	80007ac <__aeabi_ddiv>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    temp_var = 36893488147419103232.0f;
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 8004ac8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p11 = static_cast<double>(this->calibCoef.par_p11) / temp_var;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fb fcd6 	bl	8000484 <__aeabi_i2d>
 8004ad8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004adc:	f7fb fe66 	bl	80007ac <__aeabi_ddiv>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
}
 8004aea:	bf00      	nop
 8004aec:	3728      	adds	r7, #40	; 0x28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	3f700000 	.word	0x3f700000
 8004af8:	41d00000 	.word	0x41d00000
 8004afc:	42f00000 	.word	0x42f00000
 8004b00:	41300000 	.word	0x41300000
 8004b04:	41c00000 	.word	0x41c00000
 8004b08:	41f00000 	.word	0x41f00000
 8004b0c:	42400000 	.word	0x42400000
 8004b10:	40500000 	.word	0x40500000
 8004b14:	40700000 	.word	0x40700000
 8004b18:	40e00000 	.word	0x40e00000

08004b1c <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 8004b26:	2301      	movs	r3, #1
 8004b28:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	fb03 f303 	mul.w	r3, r3, r3
 8004b30:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	fb02 f303 	mul.w	r3, r2, r3
 8004b3a:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	fb02 f303 	mul.w	r3, r2, r3
 8004b44:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d201      	bcs.n	8004b52 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	e01d      	b.n	8004b8e <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d202      	bcs.n	8004b60 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	e016      	b.n	8004b8e <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d202      	bcs.n	8004b6e <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	3302      	adds	r3, #2
 8004b6c:	e00f      	b.n	8004b8e <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d202      	bcs.n	8004b7c <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	3303      	adds	r3, #3
 8004b7a:	e008      	b.n	8004b8e <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b84:	607b      	str	r3, [r7, #4]
	  __n += 4;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8004b8c:	e7db      	b.n	8004b46 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8004b8e:	4618      	mov	r0, r3
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
	...

08004b9c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8004b9c:	b480      	push	{r7}
 8004b9e:	b089      	sub	sp, #36	; 0x24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b63      	cmp	r3, #99	; 0x63
 8004bb2:	d925      	bls.n	8004c00 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x64>
	{
	  auto const __num = (__val % 100) * 2;
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	4b22      	ldr	r3, [pc, #136]	; (8004c40 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8004bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bbc:	095b      	lsrs	r3, r3, #5
 8004bbe:	2164      	movs	r1, #100	; 0x64
 8004bc0:	fb01 f303 	mul.w	r3, r1, r3
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	61bb      	str	r3, [r7, #24]
	  __val /= 100;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a1c      	ldr	r2, [pc, #112]	; (8004c40 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	68f9      	ldr	r1, [r7, #12]
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	440b      	add	r3, r1
 8004be0:	4918      	ldr	r1, [pc, #96]	; (8004c44 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8004be2:	5c8a      	ldrb	r2, [r1, r2]
 8004be4:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4413      	add	r3, r2
 8004bee:	4915      	ldr	r1, [pc, #84]	; (8004c44 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	440a      	add	r2, r1
 8004bf4:	7812      	ldrb	r2, [r2, #0]
 8004bf6:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	3b02      	subs	r3, #2
 8004bfc:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8004bfe:	e7d6      	b.n	8004bae <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x12>
	}
      if (__val >= 10)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b09      	cmp	r3, #9
 8004c04:	d910      	bls.n	8004c28 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	617b      	str	r3, [r7, #20]
	  __first[1] = __digits[__num + 1];
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	3301      	adds	r3, #1
 8004c14:	490b      	ldr	r1, [pc, #44]	; (8004c44 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8004c16:	5c8a      	ldrb	r2, [r1, r2]
 8004c18:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 8004c1a:	4a0a      	ldr	r2, [pc, #40]	; (8004c44 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	4413      	add	r3, r2
 8004c20:	781a      	ldrb	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 8004c26:	e005      	b.n	8004c34 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	3330      	adds	r3, #48	; 0x30
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	701a      	strb	r2, [r3, #0]
    }
 8004c34:	bf00      	nop
 8004c36:	3724      	adds	r7, #36	; 0x24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	51eb851f 	.word	0x51eb851f
 8004c44:	0801a760 	.word	0x0801a760

08004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>:
       *  the key matches.  If successful the function returns an iterator
       *  pointing to the sought after element.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */
      iterator
      find(const key_type& __x)
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6839      	ldr	r1, [r7, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 f830 	bl	8004cbc <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	f107 020c 	add.w	r2, r7, #12
 8004c64:	f107 0308 	add.w	r3, r7, #8
 8004c68:	4611      	mov	r1, r2
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 f862 	bl	8004d34 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b082      	sub	sp, #8
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 f865 	bl	8004d54 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      { return __x._M_node == __y._M_node; }

#if ! __cpp_lib_three_way_comparison
      friend bool
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	bf14      	ite	ne
 8004caa:	2301      	movne	r3, #1
 8004cac:	2300      	moveq	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004cbc:	b590      	push	{r4, r7, lr}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f855 	bl	8004d76 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>
 8004ccc:	4604      	mov	r4, r0
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f85d 	bl	8004d8e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	4621      	mov	r1, r4
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f863 	bl	8004da6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f88f 	bl	8004e08 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 8004cea:	4603      	mov	r3, r0
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	f107 020c 	add.w	r2, r7, #12
 8004cf2:	f107 0308 	add.w	r3, r7, #8
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 f896 	bl	8004e2a <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8004cfe:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10d      	bne.n	8004d20 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 8004d04:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8004d06:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 f8a2 	bl	8004e52 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	461a      	mov	r2, r3
 8004d12:	6839      	ldr	r1, [r7, #0]
 8004d14:	4620      	mov	r0, r4
 8004d16:	f000 f8a8 	bl	8004e6a <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d004      	beq.n	8004d2a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f871 	bl	8004e08 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 8004d26:	4603      	mov	r3, r0
 8004d28:	e000      	b.n	8004d2c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x70>
 8004d2a:	68bb      	ldr	r3, [r7, #8]
    }
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd90      	pop	{r4, r7, pc}

08004d34 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	1d1a      	adds	r2, r3, #4
 8004d60:	f107 030c 	add.w	r3, r7, #12
 8004d64:	4611      	mov	r1, r2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 f894 	bl	8004e94 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPKSt18_Rb_tree_node_base>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	4618      	mov	r0, r3
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004da6:	b590      	push	{r4, r7, lr}
 8004da8:	b087      	sub	sp, #28
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	607a      	str	r2, [r7, #4]
 8004db2:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d01b      	beq.n	8004df2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8004dba:	68fc      	ldr	r4, [r7, #12]
 8004dbc:	68b8      	ldr	r0, [r7, #8]
 8004dbe:	f000 f878 	bl	8004eb2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4620      	mov	r0, r4
 8004dca:	f000 f84e 	bl	8004e6a <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	f083 0301 	eor.w	r3, r3, #1
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d006      	beq.n	8004de8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	607b      	str	r3, [r7, #4]
 8004dde:	68b8      	ldr	r0, [r7, #8]
 8004de0:	f000 f87a 	bl	8004ed8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004de4:	60b8      	str	r0, [r7, #8]
 8004de6:	e7e5      	b.n	8004db4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0xe>
	  __x = _S_right(__x);
 8004de8:	68b8      	ldr	r0, [r7, #8]
 8004dea:	f000 f881 	bl	8004ef0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004dee:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8004df0:	e7e0      	b.n	8004db4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0xe>
      return iterator(__y);
 8004df2:	f107 0314 	add.w	r3, r7, #20
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 f885 	bl	8004f08 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8004dfe:	697b      	ldr	r3, [r7, #20]
    }
 8004e00:	4618      	mov	r0, r3
 8004e02:	371c      	adds	r7, #28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd90      	pop	{r4, r7, pc}

08004e08 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	1d1a      	adds	r2, r3, #4
 8004e14:	f107 030c 	add.w	r3, r7, #12
 8004e18:	4611      	mov	r1, r2
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 f874 	bl	8004f08 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	bf0c      	ite	eq
 8004e40:	2301      	moveq	r3, #1
 8004e42:	2300      	movne	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f829 	bl	8004eb2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 8004e60:	4603      	mov	r3, r0
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8004e6a:	b480      	push	{r7}
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	bfb4      	ite	lt
 8004e82:	2301      	movlt	r3, #1
 8004e84:	2300      	movge	r3, #0
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>:
      _S_key(_Const_Link_type __x)
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f833 	bl	8004f26 <_ZNKSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	f107 030c 	add.w	r3, r7, #12
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 f83a 	bl	8004f42 <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 8004ece:	4603      	mov	r3, r0
      }
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	4618      	mov	r0, r3
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <_ZNKSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>:
      _M_valptr() const
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b082      	sub	sp, #8
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3310      	adds	r3, #16
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 f811 	bl	8004f5a <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>:
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	6039      	str	r1, [r7, #0]
      { return __x; }
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>:
      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f805 	bl	8004f72 <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>:
      _M_addr() const noexcept
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <_ZN17BatteryManagement3runEv>:
//#include "../BatteryManagement_lib/BaterryManagement.hpp"

#include "BatteryManagement.hpp"

void BatteryManagement::run()
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
	tick_counter++;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	619a      	str	r2, [r3, #24]
	toPercentage();
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f82c 	bl	8004ff8 <_ZN17BatteryManagement12toPercentageEv>

	if (tick_counter>=frequency_tick)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	8a92      	ldrh	r2, [r2, #20]
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d31e      	bcc.n	8004fea <_ZN17BatteryManagement3runEv+0x62>
	{
		HAL_ADC_Start_DMA(adc_port, &batteryVal,1);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68d8      	ldr	r0, [r3, #12]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	331c      	adds	r3, #28
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	f004 fb14 	bl	80095e4 <HAL_ADC_Start_DMA>

		if (batteryVal<=BATERRY_MIN_3V2 && batteryVal > BATTERY_CONNECTED_THRESHOLD)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	8852      	ldrh	r2, [r2, #2]
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d80d      	bhi.n	8004fe4 <_ZN17BatteryManagement3runEv+0x5c>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	8892      	ldrh	r2, [r2, #4]
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d907      	bls.n	8004fe4 <_ZN17BatteryManagement3runEv+0x5c>
		{
			buzz->beep(2000U,200U,1U);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6918      	ldr	r0, [r3, #16]
 8004fd8:	2301      	movs	r3, #1
 8004fda:	22c8      	movs	r2, #200	; 0xc8
 8004fdc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004fe0:	f000 f8f5 	bl	80051ce <_ZN6Buzzer4beepEiii>
		}

		tick_counter = 0;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	619a      	str	r2, [r3, #24]
	}
}
 8004fea:	bf00      	nop
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	0000      	movs	r0, r0
 8004ff4:	0000      	movs	r0, r0
	...

08004ff8 <_ZN17BatteryManagement12toPercentageEv>:

void BatteryManagement::toPercentage()
{
 8004ff8:	b5b0      	push	{r4, r5, r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
	if(batteryVal>BATERRY_MAX_4V2)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	8812      	ldrh	r2, [r2, #0]
 8005008:	4293      	cmp	r3, r2
 800500a:	d906      	bls.n	800501a <_ZN17BatteryManagement12toPercentageEv+0x22>
	{
		batteryPercentage = 100;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a50      	ldr	r2, [pc, #320]	; (8005150 <_ZN17BatteryManagement12toPercentageEv+0x158>)
 8005010:	621a      	str	r2, [r3, #32]
		batteryVoltage = 4.2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a4f      	ldr	r2, [pc, #316]	; (8005154 <_ZN17BatteryManagement12toPercentageEv+0x15c>)
 8005016:	625a      	str	r2, [r3, #36]	; 0x24
	else
	{
		batteryVoltage = 3.2+(450.0-(BATERRY_MAX_4V2-batteryVal))/(BATERRY_MAX_4V2-BATERRY_MIN_3V2);
		batteryPercentage = 123.0 - 123.0/pow((1.0 + pow(batteryVoltage/3.7,80)),0.165);
	}
}
 8005018:	e081      	b.n	800511e <_ZN17BatteryManagement12toPercentageEv+0x126>
	else if(batteryVal<BATERRY_MIN_3V2)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	8852      	ldrh	r2, [r2, #2]
 8005022:	4293      	cmp	r3, r2
 8005024:	d207      	bcs.n	8005036 <_ZN17BatteryManagement12toPercentageEv+0x3e>
		batteryPercentage = 0;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	621a      	str	r2, [r3, #32]
		batteryVoltage = 3.2;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a49      	ldr	r2, [pc, #292]	; (8005158 <_ZN17BatteryManagement12toPercentageEv+0x160>)
 8005032:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005034:	e073      	b.n	800511e <_ZN17BatteryManagement12toPercentageEv+0x126>
		batteryVoltage = 3.2+(450.0-(BATERRY_MAX_4V2-batteryVal))/(BATERRY_MAX_4V2-BATERRY_MIN_3V2);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	4618      	mov	r0, r3
 8005044:	f7fb fa0e 	bl	8000464 <__aeabi_ui2d>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	a136      	add	r1, pc, #216	; (adr r1, 8005128 <_ZN17BatteryManagement12toPercentageEv+0x130>)
 800504e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005052:	f7fb f8c9 	bl	80001e8 <__aeabi_dsub>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4614      	mov	r4, r2
 800505c:	461d      	mov	r5, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	885b      	ldrh	r3, [r3, #2]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	4618      	mov	r0, r3
 800506c:	f7fb fa0a 	bl	8000484 <__aeabi_i2d>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4620      	mov	r0, r4
 8005076:	4629      	mov	r1, r5
 8005078:	f7fb fb98 	bl	80007ac <__aeabi_ddiv>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4610      	mov	r0, r2
 8005082:	4619      	mov	r1, r3
 8005084:	a32a      	add	r3, pc, #168	; (adr r3, 8005130 <_ZN17BatteryManagement12toPercentageEv+0x138>)
 8005086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508a:	f7fb f8af 	bl	80001ec <__adddf3>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4610      	mov	r0, r2
 8005094:	4619      	mov	r1, r3
 8005096:	f7fb fd37 	bl	8000b08 <__aeabi_d2f>
 800509a:	4602      	mov	r2, r0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	625a      	str	r2, [r3, #36]	; 0x24
		batteryPercentage = 123.0 - 123.0/pow((1.0 + pow(batteryVoltage/3.7,80)),0.165);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fb f9ff 	bl	80004a8 <__aeabi_f2d>
 80050aa:	a323      	add	r3, pc, #140	; (adr r3, 8005138 <_ZN17BatteryManagement12toPercentageEv+0x140>)
 80050ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b0:	f7fb fb7c 	bl	80007ac <__aeabi_ddiv>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	ec43 2b17 	vmov	d7, r2, r3
 80050bc:	2050      	movs	r0, #80	; 0x50
 80050be:	eeb0 0a47 	vmov.f32	s0, s14
 80050c2:	eef0 0a67 	vmov.f32	s1, s15
 80050c6:	f000 f866 	bl	8005196 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80050ca:	ec51 0b10 	vmov	r0, r1, d0
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	4b22      	ldr	r3, [pc, #136]	; (800515c <_ZN17BatteryManagement12toPercentageEv+0x164>)
 80050d4:	f7fb f88a 	bl	80001ec <__adddf3>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	ec43 2b17 	vmov	d7, r2, r3
 80050e0:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8005140 <_ZN17BatteryManagement12toPercentageEv+0x148>
 80050e4:	eeb0 0a47 	vmov.f32	s0, s14
 80050e8:	eef0 0a67 	vmov.f32	s1, s15
 80050ec:	f013 fee2 	bl	8018eb4 <pow>
 80050f0:	ec53 2b10 	vmov	r2, r3, d0
 80050f4:	a114      	add	r1, pc, #80	; (adr r1, 8005148 <_ZN17BatteryManagement12toPercentageEv+0x150>)
 80050f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050fa:	f7fb fb57 	bl	80007ac <__aeabi_ddiv>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	a111      	add	r1, pc, #68	; (adr r1, 8005148 <_ZN17BatteryManagement12toPercentageEv+0x150>)
 8005104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005108:	f7fb f86e 	bl	80001e8 <__aeabi_dsub>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4610      	mov	r0, r2
 8005112:	4619      	mov	r1, r3
 8005114:	f7fb fcf8 	bl	8000b08 <__aeabi_d2f>
 8005118:	4602      	mov	r2, r0
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	621a      	str	r2, [r3, #32]
}
 800511e:	bf00      	nop
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bdb0      	pop	{r4, r5, r7, pc}
 8005126:	bf00      	nop
 8005128:	00000000 	.word	0x00000000
 800512c:	407c2000 	.word	0x407c2000
 8005130:	9999999a 	.word	0x9999999a
 8005134:	40099999 	.word	0x40099999
 8005138:	9999999a 	.word	0x9999999a
 800513c:	400d9999 	.word	0x400d9999
 8005140:	51eb851f 	.word	0x51eb851f
 8005144:	3fc51eb8 	.word	0x3fc51eb8
 8005148:	00000000 	.word	0x00000000
 800514c:	405ec000 	.word	0x405ec000
 8005150:	42c80000 	.word	0x42c80000
 8005154:	40866666 	.word	0x40866666
 8005158:	404ccccd 	.word	0x404ccccd
 800515c:	3ff00000 	.word	0x3ff00000

08005160 <_ZN17BatteryManagement8msToTickEt>:
{
	return batteryPercentage;
}

uint16_t BatteryManagement::msToTick(uint16_t ms)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	807b      	strh	r3, [r7, #2]
	return ms/TIM_FREQ;
 800516c:	887b      	ldrh	r3, [r7, #2]
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	ed93 7a02 	vldr	s14, [r3, #8]
 800517c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005184:	ee17 3a90 	vmov	r3, s15
 8005188:	b29b      	uxth	r3, r3
}
 800518a:	4618      	mov	r0, r3
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	ed87 0b02 	vstr	d0, [r7, #8]
 80051a0:	6078      	str	r0, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7fb f96e 	bl	8000484 <__aeabi_i2d>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	ec43 2b11 	vmov	d1, r2, r3
 80051b0:	ed97 0b02 	vldr	d0, [r7, #8]
 80051b4:	f013 fe7e 	bl	8018eb4 <pow>
 80051b8:	eeb0 7a40 	vmov.f32	s14, s0
 80051bc:	eef0 7a60 	vmov.f32	s15, s1
    }
 80051c0:	eeb0 0a47 	vmov.f32	s0, s14
 80051c4:	eef0 0a67 	vmov.f32	s1, s15
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <_ZN6Buzzer4beepEiii>:
 */

#include "Buzzer.hpp"

bool Buzzer::beep(int duration_ms,int freq_ms,int repetition_count)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b084      	sub	sp, #16
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	607a      	str	r2, [r7, #4]
 80051da:	603b      	str	r3, [r7, #0]
	if (!this->busy)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	7d9b      	ldrb	r3, [r3, #22]
 80051e0:	f083 0301 	eor.w	r3, r3, #1
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d029      	beq.n	800523e <_ZN6Buzzer4beepEiii+0x70>
	{
		this->busy = true;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	759a      	strb	r2, [r3, #22]

		this->counterEnd = this->msToTick(duration_ms);
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	4619      	mov	r1, r3
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f877 	bl	80052ea <_ZN6Buzzer8msToTickEt>
 80051fc:	4603      	mov	r3, r0
 80051fe:	461a      	mov	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	825a      	strh	r2, [r3, #18]
		this->freqTick = this->msToTick(freq_ms);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	b29b      	uxth	r3, r3
 8005208:	4619      	mov	r1, r3
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 f86d 	bl	80052ea <_ZN6Buzzer8msToTickEt>
 8005210:	4603      	mov	r3, r0
 8005212:	461a      	mov	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	819a      	strh	r2, [r3, #12]
		this->repetitions = this->freqTick * repetition_count * 2U - 1U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	899a      	ldrh	r2, [r3, #12]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	b29b      	uxth	r3, r3
 8005220:	fb12 f303 	smulbb	r3, r2, r3
 8005224:	b29b      	uxth	r3, r3
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	829a      	strh	r2, [r3, #20]

		Buzz_on();
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 f874 	bl	8005320 <_ZN6Buzzer7Buzz_onEv>

		return busy;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	7d9b      	ldrb	r3, [r3, #22]
 800523c:	e001      	b.n	8005242 <_ZN6Buzzer4beepEiii+0x74>
	}

	return busy;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	7d9b      	ldrb	r3, [r3, #22]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <_ZN6Buzzer3runEv>:

void Buzzer::run()
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b082      	sub	sp, #8
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
	if (this->busy)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	7d9b      	ldrb	r3, [r3, #22]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d032      	beq.n	80052c0 <_ZN6Buzzer3runEv+0x76>
	{
		this->counterStart++;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	8a1b      	ldrh	r3, [r3, #16]
 800525e:	3301      	adds	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	821a      	strh	r2, [r3, #16]

		if ((this->repetitions > 0U) && (this->freqTick!=0U))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	8a9b      	ldrh	r3, [r3, #20]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d01c      	beq.n	80052a8 <_ZN6Buzzer3runEv+0x5e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	899b      	ldrh	r3, [r3, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d018      	beq.n	80052a8 <_ZN6Buzzer3runEv+0x5e>
		{
			if (!((this->counterStart/this->freqTick) % 2U))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	8a1a      	ldrh	r2, [r3, #16]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	899b      	ldrh	r3, [r3, #12]
 800527e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005282:	b29b      	uxth	r3, r3
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d103      	bne.n	8005294 <_ZN6Buzzer3runEv+0x4a>
			{
				this->Buzz_on();
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f847 	bl	8005320 <_ZN6Buzzer7Buzz_onEv>
 8005292:	e002      	b.n	800529a <_ZN6Buzzer3runEv+0x50>
			}
			else
			{
				this->Buzz_off();
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f853 	bl	8005340 <_ZN6Buzzer8Buzz_offEv>
			}
			this->repetitions--;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	8a9b      	ldrh	r3, [r3, #20]
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	829a      	strh	r2, [r3, #20]
 80052a6:	e002      	b.n	80052ae <_ZN6Buzzer3runEv+0x64>
		} else
		{
			this->Buzz_off();
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f849 	bl	8005340 <_ZN6Buzzer8Buzz_offEv>
		}

		if (this->counterStart >= this->counterEnd)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	8a1a      	ldrh	r2, [r3, #16]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	8a5b      	ldrh	r3, [r3, #18]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d302      	bcc.n	80052c0 <_ZN6Buzzer3runEv+0x76>
		{
			this->stop();
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f804 	bl	80052c8 <_ZN6Buzzer4stopEv>
		}
	}
}
 80052c0:	bf00      	nop
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <_ZN6Buzzer4stopEv>:

void Buzzer::stop()
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
	this->busy = false;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	759a      	strb	r2, [r3, #22]
	this->counterStart = 0U;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	821a      	strh	r2, [r3, #16]
	this->Buzz_off();
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f82f 	bl	8005340 <_ZN6Buzzer8Buzz_offEv>
}
 80052e2:	bf00      	nop
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <_ZN6Buzzer8msToTickEt>:
{
	return busy;
}

uint16_t Buzzer::msToTick(uint16_t ms)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	460b      	mov	r3, r1
 80052f4:	807b      	strh	r3, [r7, #2]
	return ms/TIM_FREQ;
 80052f6:	887b      	ldrh	r3, [r7, #2]
 80052f8:	ee07 3a90 	vmov	s15, r3
 80052fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	ed93 7a02 	vldr	s14, [r3, #8]
 8005306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800530a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800530e:	ee17 3a90 	vmov	r3, s15
 8005312:	b29b      	uxth	r3, r3
}
 8005314:	4618      	mov	r0, r3
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <_ZN6Buzzer7Buzz_onEv>:

void Buzzer::Buzz_on()
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
//#if DISABLE_ALL_BEEPS == 5
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8005328:	2201      	movs	r2, #1
 800532a:	2110      	movs	r1, #16
 800532c:	4803      	ldr	r0, [pc, #12]	; (800533c <_ZN6Buzzer7Buzz_onEv+0x1c>)
 800532e:	f005 fd69 	bl	800ae04 <HAL_GPIO_WritePin>
//#endif
}
 8005332:	bf00      	nop
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40020000 	.word	0x40020000

08005340 <_ZN6Buzzer8Buzz_offEv>:

void Buzzer::Buzz_off()
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8005348:	2200      	movs	r2, #0
 800534a:	2110      	movs	r1, #16
 800534c:	4803      	ldr	r0, [pc, #12]	; (800535c <_ZN6Buzzer8Buzz_offEv+0x1c>)
 800534e:	f005 fd59 	bl	800ae04 <HAL_GPIO_WritePin>
}
 8005352:	bf00      	nop
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40020000 	.word	0x40020000

08005360 <_ZN7Timeout15setTimeoutValueEh>:
	uint8_t* getTimeoutCounter()
	{
		return &timeout_counter;
	}

	void setTimeoutValue(uint8_t value)
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	70fb      	strb	r3, [r7, #3]
	{
		timeout_value = value;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	78fa      	ldrb	r2, [r7, #3]
 8005370:	709a      	strb	r2, [r3, #2]
	}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <_ZN7TimeoutC1Ev>:
class Timeout
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	705a      	strb	r2, [r3, #1]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	709a      	strb	r2, [r3, #2]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4618      	mov	r0, r3
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <_ZN7FrSkyRXC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefP6Buzzerh>:
 *      Author: DragosDarie
 */

#include "FrSkyRX.hpp"

FrSkyRX::FrSkyRX(
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
	,raw_pitch {0U}
	,raw_yaw {0U}
	,lb {0U}
	,lu {0U}
	,rb {0U}
	,ru {0U}
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	3336      	adds	r3, #54	; 0x36
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7ff ffdf 	bl	800537e <_ZN7TimeoutC1Ev>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	3340      	adds	r3, #64	; 0x40
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fe fca5 	bl	8003d14 <_ZN12CallsCounterC1Ev>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fe fc8b 	bl	8003ce8 <_ZN15PrintableSensorC1Ev>
 80053d2:	4a35      	ldr	r2, [pc, #212]	; (80054a8 <_ZN7FrSkyRXC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefP6Buzzerh+0x100>)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	220f      	movs	r2, #15
 80053dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	655a      	str	r2, [r3, #84]	; 0x54
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	659a      	str	r2, [r3, #88]	; 0x58
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	3360      	adds	r3, #96	; 0x60
 80053fe:	2232      	movs	r2, #50	; 0x32
 8005400:	2100      	movs	r1, #0
 8005402:	4618      	mov	r0, r3
 8005404:	f014 fe7e 	bl	801a104 <memset>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3394      	adds	r3, #148	; 0x94
 8005414:	2220      	movs	r2, #32
 8005416:	2100      	movs	r1, #0
 8005418:	4618      	mov	r0, r3
 800541a:	f014 fe73 	bl	801a104 <memset>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f04f 0200 	mov.w	r2, #0
 800543e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f04f 0200 	mov.w	r2, #0
 8005452:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
{
	setTimeoutValue(timeout);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3336      	adds	r3, #54	; 0x36
 8005492:	7e3a      	ldrb	r2, [r7, #24]
 8005494:	4611      	mov	r1, r2
 8005496:	4618      	mov	r0, r3
 8005498:	f7ff ff62 	bl	8005360 <_ZN7Timeout15setTimeoutValueEh>
}
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	0801a870 	.word	0x0801a870

080054ac <_ZN7FrSkyRX5beginEv>:

void FrSkyRX::begin()
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3360      	adds	r3, #96	; 0x60
 80054bc:	2219      	movs	r2, #25
 80054be:	4619      	mov	r1, r3
 80054c0:	f00a fc90 	bl	800fde4 <HAL_UART_Receive_DMA>
}
 80054c4:	bf00      	nop
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <_ZN7FrSkyRX6updateEv>:

void FrSkyRX::update()
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->rx_buff[0] == this->BEGIN_BIT) && (this->rx_buff[24]==this->END_BIT);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d109      	bne.n	80054f8 <_ZN7FrSkyRX6updateEv+0x2c>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d101      	bne.n	80054f8 <_ZN7FrSkyRX6updateEv+0x2c>
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <_ZN7FrSkyRX6updateEv+0x2e>
 80054f8:	2300      	movs	r3, #0
 80054fa:	73bb      	strb	r3, [r7, #14]

	if(isPacketOk)
 80054fc:	7bbb      	ldrb	r3, [r7, #14]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01a      	beq.n	8005538 <_ZN7FrSkyRX6updateEv+0x6c>
	{
		this->updateValues();
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f965 	bl	80057d2 <_ZN7FrSkyRX12updateValuesEv>
		this->processStateMachine();
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f867 	bl	80055dc <_ZN7FrSkyRX19processStateMachineEv>

		if (this->isDisconnected() || this->rb == 0U)
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fb32 	bl	8005b78 <_ZNK7FrSkyRX14isDisconnectedEv>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d104      	bne.n	8005524 <_ZN7FrSkyRX6updateEv+0x58>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <_ZN7FrSkyRX6updateEv+0x5c>
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <_ZN7FrSkyRX6updateEv+0x5e>
 8005528:	2300      	movs	r3, #0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d038      	beq.n	80055a0 <_ZN7FrSkyRX6updateEv+0xd4>
			this->currentState = FrSkyRXState::TIMEOUT;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2204      	movs	r2, #4
 8005532:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 8005536:	e033      	b.n	80055a0 <_ZN7FrSkyRX6updateEv+0xd4>
	}
	else if (this->wrongDataReceived==false)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800553e:	2b00      	cmp	r3, #0
 8005540:	d12e      	bne.n	80055a0 <_ZN7FrSkyRX6updateEv+0xd4>
	{
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 8005542:	2300      	movs	r3, #0
 8005544:	73fb      	strb	r3, [r7, #15]
 8005546:	7bfb      	ldrb	r3, [r7, #15]
 8005548:	2b17      	cmp	r3, #23
 800554a:	d829      	bhi.n	80055a0 <_ZN7FrSkyRX6updateEv+0xd4>
		{
			if ((this->rx_buff[iter]==this->END_BIT) && (this->rx_buff[iter+1U]==this->BEGIN_BIT))
 800554c:	7bfb      	ldrb	r3, [r7, #15]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	4413      	add	r3, r2
 8005552:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800555c:	429a      	cmp	r2, r3
 800555e:	d11b      	bne.n	8005598 <_ZN7FrSkyRX6updateEv+0xcc>
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	3301      	adds	r3, #1
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	4413      	add	r3, r2
 8005568:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005572:	429a      	cmp	r2, r3
 8005574:	d110      	bne.n	8005598 <_ZN7FrSkyRX6updateEv+0xcc>
			{
				HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length+iter+1);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	b29b      	uxth	r3, r3
 8005584:	331a      	adds	r3, #26
 8005586:	b29b      	uxth	r3, r3
 8005588:	461a      	mov	r2, r3
 800558a:	f00a fc2b 	bl	800fde4 <HAL_UART_Receive_DMA>
				this->wrongDataReceived = true;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
				return;
 8005596:	e01e      	b.n	80055d6 <_ZN7FrSkyRX6updateEv+0x10a>
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	3301      	adds	r3, #1
 800559c:	73fb      	strb	r3, [r7, #15]
 800559e:	e7d2      	b.n	8005546 <_ZN7FrSkyRX6updateEv+0x7a>
			}
		}
	}

	if (this->wrongDataReceived == true)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d103      	bne.n	80055b2 <_ZN7FrSkyRX6updateEv+0xe6>
		this->wrongDataReceived = false;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3360      	adds	r3, #96	; 0x60
 80055ba:	2219      	movs	r2, #25
 80055bc:	4619      	mov	r1, r3
 80055be:	f00a fc11 	bl	800fde4 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->uart_port_dma, DMA_IT_HT);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0208 	bic.w	r2, r2, #8
 80055d4:	601a      	str	r2, [r3, #0]
}
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <_ZN7FrSkyRX19processStateMachineEv>:

void FrSkyRX::processStateMachine()
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
	switch (this->currentState)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	f200 80d7 	bhi.w	800579e <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
 80055f0:	a201      	add	r2, pc, #4	; (adr r2, 80055f8 <_ZN7FrSkyRX19processStateMachineEv+0x1c>)
 80055f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f6:	bf00      	nop
 80055f8:	0800560d 	.word	0x0800560d
 80055fc:	0800566b 	.word	0x0800566b
 8005600:	080056a1 	.word	0x080056a1
 8005604:	080056e3 	.word	0x080056e3
 8005608:	08005791 	.word	0x08005791
	{
	case FrSkyRXState::NOT_CONNECTED:
		if ((this->lu == 0U) && (this->throttle < 300U) && (this->rb == 1U))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 8005612:	2b00      	cmp	r3, #0
 8005614:	d120      	bne.n	8005658 <_ZN7FrSkyRX19processStateMachineEv+0x7c>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800561c:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80057a8 <_ZN7FrSkyRX19processStateMachineEv+0x1cc>
 8005620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005628:	d516      	bpl.n	8005658 <_ZN7FrSkyRX19processStateMachineEv+0x7c>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8005630:	2b01      	cmp	r3, #1
 8005632:	d111      	bne.n	8005658 <_ZN7FrSkyRX19processStateMachineEv+0x7c>
		{
			this->currentState = FrSkyRXState::CONNECTED;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			buzz->stop();
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff fe41 	bl	80052c8 <_ZN6Buzzer4stopEv>
			buzz->beep(600U,100U,3U);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800564a:	2303      	movs	r3, #3
 800564c:	2264      	movs	r2, #100	; 0x64
 800564e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005652:	f7ff fdbc 	bl	80051ce <_ZN6Buzzer4beepEiii>
		}
		else
		{
			buzz->beep(3000U,100U,2U);
		}
		break;
 8005656:	e0a2      	b.n	800579e <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
			buzz->beep(3000U,100U,2U);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800565c:	2302      	movs	r3, #2
 800565e:	2264      	movs	r2, #100	; 0x64
 8005660:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8005664:	f7ff fdb3 	bl	80051ce <_ZN6Buzzer4beepEiii>
		break;
 8005668:	e099      	b.n	800579e <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
	case FrSkyRXState::CONNECTED:
		if (this->lu == 1U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 8005670:	2b01      	cmp	r3, #1
 8005672:	f040 808f 	bne.w	8005794 <_ZN7FrSkyRX19processStateMachineEv+0x1b8>
		{
			TIM3 -> CCR1 = 3000;
 8005676:	4b4d      	ldr	r3, [pc, #308]	; (80057ac <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 8005678:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800567c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3 -> CCR2 = 3000;
 800567e:	4b4b      	ldr	r3, [pc, #300]	; (80057ac <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 8005680:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005684:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3 -> CCR3 = 3000;
 8005686:	4b49      	ldr	r3, [pc, #292]	; (80057ac <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 8005688:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800568c:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3 -> CCR4 = 3000;
 800568e:	4b47      	ldr	r3, [pc, #284]	; (80057ac <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 8005690:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005694:	641a      	str	r2, [r3, #64]	; 0x40
			this->currentState = FrSkyRXState::ARMED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2202      	movs	r2, #2
 800569a:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
		}
		break;
 800569e:	e079      	b.n	8005794 <_ZN7FrSkyRX19processStateMachineEv+0x1b8>
	case FrSkyRXState::ARMED:
		if (this->lu == 2U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d176      	bne.n	8005798 <_ZN7FrSkyRX19processStateMachineEv+0x1bc>
		{
			TIM3 -> CCR1 = 3300;
 80056aa:	4b40      	ldr	r3, [pc, #256]	; (80057ac <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 80056ac:	f640 42e4 	movw	r2, #3300	; 0xce4
 80056b0:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3 -> CCR2 = 3300;
 80056b2:	4b3e      	ldr	r3, [pc, #248]	; (80057ac <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 80056b4:	f640 42e4 	movw	r2, #3300	; 0xce4
 80056b8:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3 -> CCR3 = 3300;
 80056ba:	4b3c      	ldr	r3, [pc, #240]	; (80057ac <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 80056bc:	f640 42e4 	movw	r2, #3300	; 0xce4
 80056c0:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3 -> CCR4 = 3300;
 80056c2:	4b3a      	ldr	r3, [pc, #232]	; (80057ac <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 80056c4:	f640 42e4 	movw	r2, #3300	; 0xce4
 80056c8:	641a      	str	r2, [r3, #64]	; 0x40
			buzz->beep(200U,100U,1U);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80056ce:	2301      	movs	r3, #1
 80056d0:	2264      	movs	r2, #100	; 0x64
 80056d2:	21c8      	movs	r1, #200	; 0xc8
 80056d4:	f7ff fd7b 	bl	80051ce <_ZN6Buzzer4beepEiii>
			this->currentState = FrSkyRXState::READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2203      	movs	r2, #3
 80056dc:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
		}
		break;
 80056e0:	e05a      	b.n	8005798 <_ZN7FrSkyRX19processStateMachineEv+0x1bc>
	case FrSkyRXState::READY:
		if (raw_roll > 1150 || raw_roll < 800 || raw_pitch > 1150 || raw_pitch < 800)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80056e8:	f240 427e 	movw	r2, #1150	; 0x47e
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d812      	bhi.n	8005716 <_ZN7FrSkyRX19processStateMachineEv+0x13a>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80056f6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80056fa:	d30c      	bcc.n	8005716 <_ZN7FrSkyRX19processStateMachineEv+0x13a>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 8005702:	f240 427e 	movw	r2, #1150	; 0x47e
 8005706:	4293      	cmp	r3, r2
 8005708:	d805      	bhi.n	8005716 <_ZN7FrSkyRX19processStateMachineEv+0x13a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 8005710:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005714:	d242      	bcs.n	800579c <_ZN7FrSkyRX19processStateMachineEv+0x1c0>
		{
			target_roll += -static_cast<float>(mid_position - raw_roll) * roll_scaleFactor;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8005722:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800572e:	eef1 7a67 	vneg.f32	s15, s15
 8005732:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80057b0 <_ZN7FrSkyRX19processStateMachineEv+0x1d4>
 8005736:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800573a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
			target_pitch += static_cast<float>(mid_position - raw_pitch) * pitch_scaleFactor;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 8005750:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 8005754:	ee07 3a90 	vmov	s15, r3
 8005758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800575c:	eddf 6a14 	vldr	s13, [pc, #80]	; 80057b0 <_ZN7FrSkyRX19processStateMachineEv+0x1d4>
 8005760:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
			target_yaw = static_cast<float>(mid_position - raw_yaw) * yaw_scaleFactor;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8005774:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 8005778:	ee07 3a90 	vmov	s15, r3
 800577c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005780:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80057b4 <_ZN7FrSkyRX19processStateMachineEv+0x1d8>
 8005784:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

			//target_roll = ((target_roll > 2.0F) || (target_roll < -2.0F)) ? target_roll : 0.0F;
			//target_pitch = ((target_pitch > 2.0F) || (target_pitch < -2.0F)) ? target_pitch : 0.0F;
		}
		break;
 800578e:	e005      	b.n	800579c <_ZN7FrSkyRX19processStateMachineEv+0x1c0>
	case FrSkyRXState::TIMEOUT:

		break;
 8005790:	bf00      	nop
 8005792:	e004      	b.n	800579e <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
		break;
 8005794:	bf00      	nop
 8005796:	e002      	b.n	800579e <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
		break;
 8005798:	bf00      	nop
 800579a:	e000      	b.n	800579e <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
		break;
 800579c:	bf00      	nop
	}
}
 800579e:	bf00      	nop
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	43960000 	.word	0x43960000
 80057ac:	40000400 	.word	0x40000400
 80057b0:	3851b717 	.word	0x3851b717
 80057b4:	3a83126f 	.word	0x3a83126f

080057b8 <_ZNK7FrSkyRX15getCurrentStateEv>:

FrSkyRXState FrSkyRX::getCurrentState() const
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
	return this->currentState;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <_ZN7FrSkyRX12updateValuesEv>:

void FrSkyRX::updateValues()
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
	this->channels[0]  = static_cast<int16_t>(rx_buff[1] | (rx_buff[2] << 8 & 0x07FF));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80057e0:	b21a      	sxth	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80057e8:	021b      	lsls	r3, r3, #8
 80057ea:	b21b      	sxth	r3, r3
 80057ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057f0:	b21b      	sxth	r3, r3
 80057f2:	4313      	orrs	r3, r2
 80057f4:	b21b      	sxth	r3, r3
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	this->channels[1]  = static_cast<int16_t>(rx_buff[2] >> 3 | (rx_buff[3] << 5 & 0x07FF));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005804:	08db      	lsrs	r3, r3, #3
 8005806:	b2db      	uxtb	r3, r3
 8005808:	b21a      	sxth	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8005810:	015b      	lsls	r3, r3, #5
 8005812:	b21b      	sxth	r3, r3
 8005814:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005818:	b21b      	sxth	r3, r3
 800581a:	4313      	orrs	r3, r2
 800581c:	b21b      	sxth	r3, r3
 800581e:	b29a      	uxth	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	this->channels[2]  = static_cast<int16_t>(rx_buff[3] >> 6 | (rx_buff[4] << 2 | (rx_buff[5] << 10 & 0x07FF)));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800582c:	099b      	lsrs	r3, r3, #6
 800582e:	b2db      	uxtb	r3, r3
 8005830:	b21a      	sxth	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	b219      	sxth	r1, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8005842:	029b      	lsls	r3, r3, #10
 8005844:	b21b      	sxth	r3, r3
 8005846:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800584a:	b21b      	sxth	r3, r3
 800584c:	430b      	orrs	r3, r1
 800584e:	b21b      	sxth	r3, r3
 8005850:	4313      	orrs	r3, r2
 8005852:	b21b      	sxth	r3, r3
 8005854:	b29a      	uxth	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	this->channels[3]  = static_cast<int16_t>(rx_buff[5] >> 1 | (rx_buff[6] << 7 & 0x07FF));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8005862:	085b      	lsrs	r3, r3, #1
 8005864:	b2db      	uxtb	r3, r3
 8005866:	b21a      	sxth	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800586e:	01db      	lsls	r3, r3, #7
 8005870:	b21b      	sxth	r3, r3
 8005872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005876:	b21b      	sxth	r3, r3
 8005878:	4313      	orrs	r3, r2
 800587a:	b21b      	sxth	r3, r3
 800587c:	b29a      	uxth	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	this->channels[4]  = static_cast<int16_t>(rx_buff[6] >> 4 | (rx_buff[7] << 4 & 0x07FF));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800588a:	091b      	lsrs	r3, r3, #4
 800588c:	b2db      	uxtb	r3, r3
 800588e:	b21a      	sxth	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	b21b      	sxth	r3, r3
 800589a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800589e:	b21b      	sxth	r3, r3
 80058a0:	4313      	orrs	r3, r2
 80058a2:	b21b      	sxth	r3, r3
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	this->channels[5]  = static_cast<int16_t>(rx_buff[7] >> 7 | (rx_buff[8] << 1 | (rx_buff[9] << 9 & 0x07FF)));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80058b2:	09db      	lsrs	r3, r3, #7
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	b21a      	sxth	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	b219      	sxth	r1, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80058c8:	025b      	lsls	r3, r3, #9
 80058ca:	b21b      	sxth	r3, r3
 80058cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058d0:	b21b      	sxth	r3, r3
 80058d2:	430b      	orrs	r3, r1
 80058d4:	b21b      	sxth	r3, r3
 80058d6:	4313      	orrs	r3, r2
 80058d8:	b21b      	sxth	r3, r3
 80058da:	b29a      	uxth	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
	this->channels[6]  = static_cast<int16_t>(rx_buff[9] >> 2 | (rx_buff[10] << 6 & 0x07FF));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80058e8:	089b      	lsrs	r3, r3, #2
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	b21a      	sxth	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80058f4:	019b      	lsls	r3, r3, #6
 80058f6:	b21b      	sxth	r3, r3
 80058f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058fc:	b21b      	sxth	r3, r3
 80058fe:	4313      	orrs	r3, r2
 8005900:	b21b      	sxth	r3, r3
 8005902:	b29a      	uxth	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	this->channels[7]  = static_cast<int16_t>(rx_buff[10] >> 5 | (rx_buff[11] << 3 & 0x07FF));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8005910:	095b      	lsrs	r3, r3, #5
 8005912:	b2db      	uxtb	r3, r3
 8005914:	b21a      	sxth	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	b21b      	sxth	r3, r3
 8005920:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005924:	b21b      	sxth	r3, r3
 8005926:	4313      	orrs	r3, r2
 8005928:	b21b      	sxth	r3, r3
 800592a:	b29a      	uxth	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2

	this->channels[8]  = static_cast<int16_t>(rx_buff[12] | (rx_buff[13] << 8 & 0x07FF));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8005938:	b21a      	sxth	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8005940:	021b      	lsls	r3, r3, #8
 8005942:	b21b      	sxth	r3, r3
 8005944:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005948:	b21b      	sxth	r3, r3
 800594a:	4313      	orrs	r3, r2
 800594c:	b21b      	sxth	r3, r3
 800594e:	b29a      	uxth	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	this->channels[9]  = static_cast<int16_t>(rx_buff[13] >> 3 | (rx_buff[14] << 5 & 0x07FF));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800595c:	08db      	lsrs	r3, r3, #3
 800595e:	b2db      	uxtb	r3, r3
 8005960:	b21a      	sxth	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8005968:	015b      	lsls	r3, r3, #5
 800596a:	b21b      	sxth	r3, r3
 800596c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005970:	b21b      	sxth	r3, r3
 8005972:	4313      	orrs	r3, r2
 8005974:	b21b      	sxth	r3, r3
 8005976:	b29a      	uxth	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	this->channels[10] = static_cast<int16_t>(rx_buff[14] >> 6 | (rx_buff[15] << 2 | (rx_buff[16] << 10 & 0x07FF)));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8005984:	099b      	lsrs	r3, r3, #6
 8005986:	b2db      	uxtb	r3, r3
 8005988:	b21a      	sxth	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	b219      	sxth	r1, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800599a:	029b      	lsls	r3, r3, #10
 800599c:	b21b      	sxth	r3, r3
 800599e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059a2:	b21b      	sxth	r3, r3
 80059a4:	430b      	orrs	r3, r1
 80059a6:	b21b      	sxth	r3, r3
 80059a8:	4313      	orrs	r3, r2
 80059aa:	b21b      	sxth	r3, r3
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	this->channels[11] = static_cast<int16_t>(rx_buff[16] >> 1 | (rx_buff[17] << 7 & 0x07FF));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80059ba:	085b      	lsrs	r3, r3, #1
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	b21a      	sxth	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80059c6:	01db      	lsls	r3, r3, #7
 80059c8:	b21b      	sxth	r3, r3
 80059ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059ce:	b21b      	sxth	r3, r3
 80059d0:	4313      	orrs	r3, r2
 80059d2:	b21b      	sxth	r3, r3
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
	this->channels[12] = static_cast<int16_t>(rx_buff[17] >> 4 | (rx_buff[18] << 4 & 0x07FF));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80059e2:	091b      	lsrs	r3, r3, #4
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	b21a      	sxth	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	b21b      	sxth	r3, r3
 80059f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059f6:	b21b      	sxth	r3, r3
 80059f8:	4313      	orrs	r3, r2
 80059fa:	b21b      	sxth	r3, r3
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	this->channels[13] = static_cast<int16_t>(rx_buff[18] >> 7 | (rx_buff[19] << 1 | (rx_buff[20] << 9 & 0x07FF)));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8005a0a:	09db      	lsrs	r3, r3, #7
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	b21a      	sxth	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	b219      	sxth	r1, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a20:	025b      	lsls	r3, r3, #9
 8005a22:	b21b      	sxth	r3, r3
 8005a24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a28:	b21b      	sxth	r3, r3
 8005a2a:	430b      	orrs	r3, r1
 8005a2c:	b21b      	sxth	r3, r3
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	b21b      	sxth	r3, r3
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	this->channels[14] = static_cast<int16_t>(rx_buff[20] >> 2 | (rx_buff[21] << 6 & 0x07FF));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a40:	089b      	lsrs	r3, r3, #2
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	b21a      	sxth	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8005a4c:	019b      	lsls	r3, r3, #6
 8005a4e:	b21b      	sxth	r3, r3
 8005a50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a54:	b21b      	sxth	r3, r3
 8005a56:	4313      	orrs	r3, r2
 8005a58:	b21b      	sxth	r3, r3
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	this->channels[15] = static_cast<int16_t>(rx_buff[21] >> 5 | (rx_buff[22] << 3 & 0x07FF));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8005a68:	095b      	lsrs	r3, r3, #5
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	b21a      	sxth	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	b21b      	sxth	r3, r3
 8005a78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a7c:	b21b      	sxth	r3, r3
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	b21b      	sxth	r3, r3
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	this->throttle = static_cast<float>(channels[2]);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8005a90:	ee07 3a90 	vmov	s15, r3
 8005a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
	this->raw_roll = this->channels[0];
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	this->raw_pitch = this->channels[1];
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	this->raw_yaw = this->channels[3];
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc

	if (this->channels[4]<1000)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8005ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005acc:	d204      	bcs.n	8005ad8 <_ZN7FrSkyRX12updateValuesEv+0x306>
		this->lb=0;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
 8005ad6:	e003      	b.n	8005ae0 <_ZN7FrSkyRX12updateValuesEv+0x30e>
	else
		this->lb=1;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce

	if (this->channels[7]<1000)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8005ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005aea:	d204      	bcs.n	8005af6 <_ZN7FrSkyRX12updateValuesEv+0x324>
		this->rb=0;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8005af4:	e003      	b.n	8005afe <_ZN7FrSkyRX12updateValuesEv+0x32c>
	else
		this->rb=1;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0

	if (this->channels[5]<500)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8005b04:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005b08:	d204      	bcs.n	8005b14 <_ZN7FrSkyRX12updateValuesEv+0x342>
		this->lu = 0;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
 8005b12:	e00f      	b.n	8005b34 <_ZN7FrSkyRX12updateValuesEv+0x362>
	else if(this->channels[5]<1500)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8005b1a:	f240 52db 	movw	r2, #1499	; 0x5db
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d804      	bhi.n	8005b2c <_ZN7FrSkyRX12updateValuesEv+0x35a>
		this->lu = 1;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
 8005b2a:	e003      	b.n	8005b34 <_ZN7FrSkyRX12updateValuesEv+0x362>
	else
		this->lu = 2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf

	if (this->channels[6]<500)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8005b3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005b3e:	d204      	bcs.n	8005b4a <_ZN7FrSkyRX12updateValuesEv+0x378>
		this->ru = 0;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	else if(this->channels[6]<1500)
		this->ru = 1;
	else
		this->ru = 2;
}
 8005b48:	e00f      	b.n	8005b6a <_ZN7FrSkyRX12updateValuesEv+0x398>
	else if(this->channels[6]<1500)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8005b50:	f240 52db 	movw	r2, #1499	; 0x5db
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d804      	bhi.n	8005b62 <_ZN7FrSkyRX12updateValuesEv+0x390>
		this->ru = 1;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
}
 8005b60:	e003      	b.n	8005b6a <_ZN7FrSkyRX12updateValuesEv+0x398>
		this->ru = 2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2202      	movs	r2, #2
 8005b66:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
	...

08005b78 <_ZNK7FrSkyRX14isDisconnectedEv>:

bool FrSkyRX::isDisconnected() const
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
	const bool failsafe =
			(this->rb == 0) &&
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
			(this->ru == 0) &&
			(this->lb == 0) &&
			(this->lu == 0) &&
			(this->throttle > 1800) &&
			(this->raw_roll > 1800) &&
			(this->raw_pitch > 1800) &&
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d12c      	bne.n	8005be4 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->ru == 0) &&
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
			(this->rb == 0) &&
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d127      	bne.n	8005be4 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->lb == 0) &&
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
			(this->ru == 0) &&
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d122      	bne.n	8005be4 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->lu == 0) &&
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
			(this->lb == 0) &&
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d11d      	bne.n	8005be4 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->throttle > 1800) &&
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
			(this->lu == 0) &&
 8005bae:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005bf8 <_ZNK7FrSkyRX14isDisconnectedEv+0x80>
 8005bb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bba:	dd13      	ble.n	8005be4 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->raw_roll > 1800) &&
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
			(this->throttle > 1800) &&
 8005bc2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8005bc6:	d90d      	bls.n	8005be4 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->raw_pitch > 1800) &&
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
			(this->raw_roll > 1800) &&
 8005bce:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8005bd2:	d907      	bls.n	8005be4 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->raw_yaw > 1800);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
			(this->raw_pitch > 1800) &&
 8005bda:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8005bde:	d901      	bls.n	8005be4 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
 8005be0:	2301      	movs	r3, #1
 8005be2:	e000      	b.n	8005be6 <_ZNK7FrSkyRX14isDisconnectedEv+0x6e>
 8005be4:	2300      	movs	r3, #0
	const bool failsafe =
 8005be6:	73fb      	strb	r3, [r7, #15]

	return failsafe;
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	44e10000 	.word	0x44e10000

08005bfc <_ZN7FrSkyRX19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* FrSkyRX::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8005bfc:	b590      	push	{r4, r7, lr}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::FRSKY_THROTTLE)!=senorsList.end())
 8005c0e:	231a      	movs	r3, #26
 8005c10:	613b      	str	r3, [r7, #16]
 8005c12:	f107 0310 	add.w	r3, r7, #16
 8005c16:	4619      	mov	r1, r3
 8005c18:	6838      	ldr	r0, [r7, #0]
 8005c1a:	f7ff f815 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	6838      	ldr	r0, [r7, #0]
 8005c24:	f7ff f829 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	f107 0214 	add.w	r2, r7, #20
 8005c30:	f107 030c 	add.w	r3, r7, #12
 8005c34:	4611      	mov	r1, r2
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff f82c 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d01d      	beq.n	8005c7e <_ZN7FrSkyRX19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x82>
	{
		strcat(packet,toCharArray(this->throttle));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	1d1c      	adds	r4, r3, #4
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8005c4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c52:	ee17 1a90 	vmov	r1, s15
 8005c56:	4610      	mov	r0, r2
 8005c58:	f7fe f804 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4620      	mov	r0, r4
 8005c62:	f014 fb8b 	bl	801a37c <strcat>
		strcat(packet,",");
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	1d1c      	adds	r4, r3, #4
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f7fa fab0 	bl	80001d0 <strlen>
 8005c70:	4603      	mov	r3, r0
 8005c72:	4423      	add	r3, r4
 8005c74:	4905      	ldr	r1, [pc, #20]	; (8005c8c <_ZN7FrSkyRX19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x90>)
 8005c76:	461a      	mov	r2, r3
 8005c78:	460b      	mov	r3, r1
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	3304      	adds	r3, #4
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	371c      	adds	r7, #28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd90      	pop	{r4, r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	0801a524 	.word	0x0801a524

08005c90 <_ZN7FrSkyRX11getThrottleEv>:

float& FrSkyRX::getThrottle()
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
	return this->throttle;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	33b8      	adds	r3, #184	; 0xb8
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <_ZN7FrSkyRX13getTargetRollEv>:

float& FrSkyRX::getTargetRoll()
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
	return this->target_roll;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	33bc      	adds	r3, #188	; 0xbc
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <_ZN7FrSkyRX14getTargetPitchEv>:

float& FrSkyRX::getTargetPitch()
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
	return this->target_pitch;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	33c0      	adds	r3, #192	; 0xc0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <_ZNSt15_Rb_tree_headerC1Ev>:
    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
      _M_header._M_color = _S_red;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f805 	bl	8005d0e <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4618      	mov	r0, r3
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <_ZNSt15_Rb_tree_header8_M_resetEv>:
    _M_reset()
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
      _M_header._M_parent = 0;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	611a      	str	r2, [r3, #16]
    }
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b082      	sub	sp, #8
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 f8d9 	bl	8005efc <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE12_Vector_implC1Ev>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff ffeb 	bl	8005d3a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EEC1Ev>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4618      	mov	r0, r3
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EEC1Ev>:
      _Rb_tree() = default;
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b082      	sub	sp, #8
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 f8cf 	bl	8005f1c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EEC1Ev>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4618      	mov	r0, r3
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EEC1Ev>:
      set() = default;
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7ff ffeb 	bl	8005d6e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EEC1Ev>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <_ZN4HC05C1EP20__UART_HandleTypeDef>:
 *      Author: DragosDarie
 */

#include "HC05.hpp"

HC05::HC05(UART_HandleTypeDef *uart_port):
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b082      	sub	sp, #8
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	6039      	str	r1, [r7, #0]
	uart_port {uart_port}
	,senorsList {}
	,USART1_TxBuffer {}
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3304      	adds	r3, #4
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff ffcc 	bl	8005d54 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEC1Ev>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	3310      	adds	r3, #16
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	605a      	str	r2, [r3, #4]
 8005dc6:	609a      	str	r2, [r3, #8]
 8005dc8:	60da      	str	r2, [r3, #12]
 8005dca:	611a      	str	r2, [r3, #16]
 8005dcc:	615a      	str	r2, [r3, #20]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	3310      	adds	r3, #16
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7ff ffd8 	bl	8005d88 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EEC1Ev>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	3328      	adds	r3, #40	; 0x28
 8005ddc:	2264      	movs	r2, #100	; 0x64
 8005dde:	2100      	movs	r1, #0
 8005de0:	4618      	mov	r0, r3
 8005de2:	f014 f98f 	bl	801a104 <memset>
{
}
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <_ZN4HC054sendEv>:

void HC05::send()
{
 8005df0:	b5b0      	push	{r4, r5, r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(uart_port, (uint8_t*)USART1_TxBuffer, strlen(USART1_TxBuffer));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681c      	ldr	r4, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3328      	adds	r3, #40	; 0x28
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fa f9e2 	bl	80001d0 <strlen>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	4629      	mov	r1, r5
 8005e14:	4620      	mov	r0, r4
 8005e16:	f009 ff67 	bl	800fce8 <HAL_UART_Transmit_DMA>
}
 8005e1a:	bf00      	nop
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bdb0      	pop	{r4, r5, r7, pc}

08005e22 <_ZN4HC059addSensorEP15PrintableSensor>:
{
	HAL_UART_Transmit_DMA(uart_port, (uint8_t*)data, len);
}

void HC05::addSensor(PrintableSensor* sen)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b082      	sub	sp, #8
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]
	senList.push_back(sen);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	463a      	mov	r2, r7
 8005e32:	4611      	mov	r1, r2
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 f886 	bl	8005f46 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_>
}
 8005e3a:	bf00      	nop
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
	...

08005e44 <_ZN4HC0519printfSensorsValuesEv>:

void HC05::printfSensorsValues()
{
 8005e44:	b590      	push	{r4, r7, lr}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
	strcpy(USART1_TxBuffer,"");
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3328      	adds	r3, #40	; 0x28
 8005e50:	2200      	movs	r2, #0
 8005e52:	701a      	strb	r2, [r3, #0]

	for (int i=0;i<(int)senList.size();i++)
 8005e54:	2300      	movs	r3, #0
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 f897 	bl	8005f90 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 8005e62:	4603      	mov	r3, r0
 8005e64:	461a      	mov	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	bfb4      	ite	lt
 8005e6c:	2301      	movlt	r3, #1
 8005e6e:	2300      	movge	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d01a      	beq.n	8005eac <_ZN4HC0519printfSensorsValuesEv+0x68>
	{
		strcat(USART1_TxBuffer,senList[i]->getSensorValues_str(senorsList));
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3304      	adds	r3, #4
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	4611      	mov	r1, r2
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 f893 	bl	8005fb0 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEixEj>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	6812      	ldr	r2, [r2, #0]
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	3110      	adds	r1, #16
 8005e96:	4618      	mov	r0, r3
 8005e98:	4790      	blx	r2
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f014 fa6c 	bl	801a37c <strcat>
	for (int i=0;i<(int)senList.size();i++)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	e7d5      	b.n	8005e58 <_ZN4HC0519printfSensorsValuesEv+0x14>
	}

	strcat(USART1_TxBuffer,"\n\r");
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f7fa f98c 	bl	80001d0 <strlen>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	4423      	add	r3, r4
 8005ebc:	4a05      	ldr	r2, [pc, #20]	; (8005ed4 <_ZN4HC0519printfSensorsValuesEv+0x90>)
 8005ebe:	8811      	ldrh	r1, [r2, #0]
 8005ec0:	7892      	ldrb	r2, [r2, #2]
 8005ec2:	8019      	strh	r1, [r3, #0]
 8005ec4:	709a      	strb	r2, [r3, #2]

	send();
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff ff92 	bl	8005df0 <_ZN4HC054sendEv>
}
 8005ecc:	bf00      	nop
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd90      	pop	{r4, r7, pc}
 8005ed4:	0801a528 	.word	0x0801a528

08005ed8 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>:

void HC05::addSensorParameter(HC05::SENSOR_DATA_PARAMETER sen)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
 	this->senorsList.insert(sen);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f103 0110 	add.w	r1, r3, #16
 8005ee8:	f107 0308 	add.w	r3, r7, #8
 8005eec:	463a      	mov	r2, r7
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 f86e 	bl	8005fd0 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE6insertERKS1_>
}
 8005ef4:	bf00      	nop
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f87d 	bl	8006004 <_ZNSaIP15PrintableSensorEC1Ev>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 f885 	bl	800601c <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4618      	mov	r0, r3
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f8b9 	bl	800609c <_ZNSaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 f8c1 	bl	80060b4 <_ZNSt20_Rb_tree_key_compareISt4lessIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	3304      	adds	r3, #4
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff feda 	bl	8005cf0 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b082      	sub	sp, #8
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d00c      	beq.n	8005f76 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	4619      	mov	r1, r3
 8005f66:	f000 f8b0 	bl	80060ca <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	1d1a      	adds	r2, r3, #4
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8005f74:	e008      	b.n	8005f88 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f8ba 	bl	80060f0 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE3endEv>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	4619      	mov	r1, r3
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f8dc 	bl	8006140 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8005f88:	bf00      	nop
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	109b      	asrs	r3, r3, #2
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
      }
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE6insertERKS1_>:
      insert(const value_type& __x)
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
	  _M_t._M_insert_unique(__x);
 8005fdc:	68b9      	ldr	r1, [r7, #8]
 8005fde:	f107 0310 	add.w	r3, r7, #16
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 f967 	bl	80062b8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_>
	return std::pair<iterator, bool>(__p.first, __p.second);
 8005fea:	f107 0310 	add.w	r3, r7, #16
 8005fee:	1d1a      	adds	r2, r3, #4
 8005ff0:	f107 0310 	add.w	r3, r7, #16
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 f9ad 	bl	8006356 <_ZNSt4pairISt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IRSt17_Rb_tree_iteratorIS2_ERbLb1EEEOT_OT0_>
      }
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <_ZNSaIP15PrintableSensorEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f9bd 	bl	800638c <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorEC1Ev>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4618      	mov	r0, r3
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	605a      	str	r2, [r3, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	609a      	str	r2, [r3, #8]
	{ }
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4618      	mov	r0, r3
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
	if (__p)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d005      	beq.n	8006062 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	4618      	mov	r0, r3
 800605e:	f000 f9a0 	bl	80063a2 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE10deallocateERS2_PS1_j>
      }
 8006062:	bf00      	nop
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4618      	mov	r0, r3
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <_ZSt8_DestroyIPP15PrintableSensorS1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800608c:	68b9      	ldr	r1, [r7, #8]
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f996 	bl	80063c0 <_ZSt8_DestroyIPP15PrintableSensorEvT_S3_>
    }
 8006094:	bf00      	nop
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <_ZNSaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f998 	bl	80063da <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4618      	mov	r0, r3
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <_ZNSt20_Rb_tree_key_compareISt4lessIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
      _Rb_tree_key_compare()
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
      { }
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4618      	mov	r0, r3
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b084      	sub	sp, #16
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f98a 	bl	80063f0 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 80060dc:	4603      	mov	r3, r0
 80060de:	461a      	mov	r2, r3
 80060e0:	68b9      	ldr	r1, [r7, #8]
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 f98f 	bl	8006406 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 80060e8:	bf00      	nop
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	1d1a      	adds	r2, r3, #4
 80060fc:	f107 030c 	add.w	r3, r7, #12
 8006100:	4611      	mov	r1, r2
 8006102:	4618      	mov	r0, r3
 8006104:	f000 f995 	bl	8006432 <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8006118:	4618      	mov	r0, r3
 800611a:	f000 f805 	bl	8006128 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800611e:	4603      	mov	r3, r0
      }
 8006120:	4618      	mov	r0, r3
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8006130:	2301      	movs	r3, #1
      }
 8006132:	4618      	mov	r0, r3
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
	...

08006140 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8006140:	b5b0      	push	{r4, r5, r7, lr}
 8006142:	b08c      	sub	sp, #48	; 0x30
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800614c:	4a59      	ldr	r2, [pc, #356]	; (80062b4 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 800614e:	2101      	movs	r1, #1
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 f97e 	bl	8006452 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc>
 8006156:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 f9bb 	bl	80064e0 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE5beginEv>
 800616a:	4603      	mov	r3, r0
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	f107 0214 	add.w	r2, r7, #20
 8006172:	f107 0308 	add.w	r3, r7, #8
 8006176:	4611      	mov	r1, r2
 8006178:	4618      	mov	r0, r3
 800617a:	f000 f9c1 	bl	8006500 <_ZN9__gnu_cxxmiIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800617e:	4603      	mov	r3, r0
 8006180:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006186:	4618      	mov	r0, r3
 8006188:	f000 f9cf 	bl	800652a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj>
 800618c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8006192:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	18d5      	adds	r5, r2, r3
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f927 	bl	80063f0 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 80061a2:	4603      	mov	r3, r0
 80061a4:	461a      	mov	r2, r3
 80061a6:	4629      	mov	r1, r5
 80061a8:	4620      	mov	r0, r4
 80061aa:	f7ff ff8e 	bl	80060ca <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80061ae:	2300      	movs	r3, #0
 80061b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80061b2:	f7ff ffae 	bl	8006112 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d027      	beq.n	800620c <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80061bc:	f107 0308 	add.w	r3, r7, #8
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 f9da 	bl	800657a <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80061c6:	4603      	mov	r3, r0
 80061c8:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7ff ff4c 	bl	800606a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80061d2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	4621      	mov	r1, r4
 80061d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061da:	f000 f9ba 	bl	8006552 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80061de:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80061e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e2:	3304      	adds	r3, #4
 80061e4:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80061e6:	f107 0308 	add.w	r3, r7, #8
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 f9c5 	bl	800657a <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80061f0:	4603      	mov	r3, r0
 80061f2:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7ff ff37 	bl	800606a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80061fc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80061fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006200:	6a39      	ldr	r1, [r7, #32]
 8006202:	4620      	mov	r0, r4
 8006204:	f000 f9a5 	bl	8006552 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8006208:	62f8      	str	r0, [r7, #44]	; 0x2c
 800620a:	e026      	b.n	800625a <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 800620c:	f107 0308 	add.w	r3, r7, #8
 8006210:	4618      	mov	r0, r3
 8006212:	f000 f9b2 	bl	800657a <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8006216:	4603      	mov	r3, r0
 8006218:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4618      	mov	r0, r3
 800621e:	f7ff ff24 	bl	800606a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8006222:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	4621      	mov	r1, r4
 8006228:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800622a:	f000 f9b1 	bl	8006590 <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 800622e:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8006230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006232:	3304      	adds	r3, #4
 8006234:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8006236:	f107 0308 	add.w	r3, r7, #8
 800623a:	4618      	mov	r0, r3
 800623c:	f000 f99d 	bl	800657a <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8006240:	4603      	mov	r3, r0
 8006242:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4618      	mov	r0, r3
 8006248:	f7ff ff0f 	bl	800606a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 800624c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800624e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006250:	6a39      	ldr	r1, [r7, #32]
 8006252:	4620      	mov	r0, r4
 8006254:	f000 f99c 	bl	8006590 <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8006258:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800625a:	f7ff ff5a 	bl	8006112 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>
 800625e:	4603      	mov	r3, r0
 8006260:	f083 0301 	eor.w	r3, r3, #1
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d009      	beq.n	800627e <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4618      	mov	r0, r3
 800626e:	f7ff fefc 	bl	800606a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8006272:	4603      	mov	r3, r0
 8006274:	461a      	mov	r2, r3
 8006276:	6a39      	ldr	r1, [r7, #32]
 8006278:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800627a:	f7ff ff01 	bl	8006080 <_ZSt8_DestroyIPP15PrintableSensorS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800627e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800628a:	461a      	mov	r2, r3
 800628c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800628e:	f7ff fed9 	bl	8006044 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800629c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	441a      	add	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	609a      	str	r2, [r3, #8]
    }
 80062aa:	bf00      	nop
 80062ac:	3730      	adds	r7, #48	; 0x30
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bdb0      	pop	{r4, r5, r7, pc}
 80062b2:	bf00      	nop
 80062b4:	0801a52c 	.word	0x0801a52c

080062b8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80062b8:	b5b0      	push	{r4, r5, r7, lr}
 80062ba:	b08e      	sub	sp, #56	; 0x38
 80062bc:	af02      	add	r7, sp, #8
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
 80062c4:	f107 031c 	add.w	r3, r7, #28
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fe fe39 	bl	8004f42 <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 80062d0:	4602      	mov	r2, r0
 80062d2:	f107 0314 	add.w	r3, r7, #20
 80062d6:	68b9      	ldr	r1, [r7, #8]
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 f972 	bl	80065c2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_>
      if (__res.second)
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d022      	beq.n	800632a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_+0x72>
	  _Alloc_node __an(*this);
 80062e4:	f107 0310 	add.w	r3, r7, #16
 80062e8:	68b9      	ldr	r1, [r7, #8]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 f9ee 	bl	80066cc <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeC1ERS7_>
	  return _Res(_M_insert_(__res.first, __res.second,
 80062f0:	697c      	ldr	r4, [r7, #20]
 80062f2:	69bd      	ldr	r5, [r7, #24]
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f9f8 	bl	80066ea <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 80062fa:	4602      	mov	r2, r0
 80062fc:	f107 0310 	add.w	r3, r7, #16
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	4613      	mov	r3, r2
 8006304:	462a      	mov	r2, r5
 8006306:	4621      	mov	r1, r4
 8006308:	68b8      	ldr	r0, [r7, #8]
 800630a:	f000 f9f9 	bl	8006700 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_>
 800630e:	4603      	mov	r3, r0
 8006310:	623b      	str	r3, [r7, #32]
		      true);
 8006312:	2301      	movs	r3, #1
 8006314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006318:	f107 0227 	add.w	r2, r7, #39	; 0x27
 800631c:	f107 0320 	add.w	r3, r7, #32
 8006320:	4619      	mov	r1, r3
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 fa35 	bl	8006792 <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>
    }
 8006328:	e011      	b.n	800634e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_+0x96>
      return _Res(iterator(__res.first), false);
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006330:	4611      	mov	r1, r2
 8006332:	4618      	mov	r0, r3
 8006334:	f7fe fde8 	bl	8004f08 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8006338:	2300      	movs	r3, #0
 800633a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800633e:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8006342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006346:	4619      	mov	r1, r3
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 fa22 	bl	8006792 <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>
    }
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	3730      	adds	r7, #48	; 0x30
 8006352:	46bd      	mov	sp, r7
 8006354:	bdb0      	pop	{r4, r5, r7, pc}

08006356 <_ZNSt4pairISt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IRSt17_Rb_tree_iteratorIS2_ERbLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8006356:	b590      	push	{r4, r7, lr}
 8006358:	b085      	sub	sp, #20
 800635a:	af00      	add	r7, sp, #0
 800635c:	60f8      	str	r0, [r7, #12]
 800635e:	60b9      	str	r1, [r7, #8]
 8006360:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8006362:	68fc      	ldr	r4, [r7, #12]
 8006364:	68b8      	ldr	r0, [r7, #8]
 8006366:	f000 fa2d 	bl	80067c4 <_ZSt7forwardIRSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS5_E4typeE>
 800636a:	4603      	mov	r3, r0
 800636c:	4619      	mov	r1, r3
 800636e:	4620      	mov	r0, r4
 8006370:	f7fe fce0 	bl	8004d34 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fa30 	bl	80067da <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 800637a:	4603      	mov	r3, r0
 800637c:	781a      	ldrb	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	711a      	strb	r2, [r3, #4]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	bd90      	pop	{r4, r7, pc}

0800638c <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b084      	sub	sp, #16
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	60f8      	str	r0, [r7, #12]
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	68b9      	ldr	r1, [r7, #8]
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 fa1c 	bl	80067f0 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE10deallocateEPS2_j>
 80063b8:	bf00      	nop
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <_ZSt8_DestroyIPP15PrintableSensorEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fa1f 	bl	8006810 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP15PrintableSensorEEvT_S5_>
    }
 80063d2:	bf00      	nop
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4618      	mov	r0, r3
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8006406:	b590      	push	{r4, r7, lr}
 8006408:	b085      	sub	sp, #20
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff ffec 	bl	80063f0 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 8006418:	4603      	mov	r3, r0
 800641a:	681c      	ldr	r4, [r3, #0]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	4619      	mov	r1, r3
 8006420:	2004      	movs	r0, #4
 8006422:	f7ff fc59 	bl	8005cd8 <_ZnwjPv>
 8006426:	4603      	mov	r3, r0
 8006428:	601c      	str	r4, [r3, #0]
 800642a:	bf00      	nop
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	bd90      	pop	{r4, r7, pc}

08006432 <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8006452:	b590      	push	{r4, r7, lr}
 8006454:	b087      	sub	sp, #28
 8006456:	af00      	add	r7, sp, #0
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 f9e1 	bl	8006826 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 8006464:	4604      	mov	r4, r0
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f7ff fd92 	bl	8005f90 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 800646c:	4603      	mov	r3, r0
 800646e:	1ae2      	subs	r2, r4, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	429a      	cmp	r2, r3
 8006474:	bf34      	ite	cc
 8006476:	2301      	movcc	r3, #1
 8006478:	2300      	movcs	r3, #0
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f012 fc8e 	bl	8018da2 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f7ff fd82 	bl	8005f90 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 800648c:	4604      	mov	r4, r0
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f7ff fd7e 	bl	8005f90 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 8006494:	4603      	mov	r3, r0
 8006496:	613b      	str	r3, [r7, #16]
 8006498:	f107 0208 	add.w	r2, r7, #8
 800649c:	f107 0310 	add.w	r3, r7, #16
 80064a0:	4611      	mov	r1, r2
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 f9d0 	bl	8006848 <_ZSt3maxIjERKT_S2_S2_>
 80064a8:	4603      	mov	r3, r0
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4423      	add	r3, r4
 80064ae:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f7ff fd6d 	bl	8005f90 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 80064b6:	4602      	mov	r2, r0
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d306      	bcc.n	80064cc <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 f9b1 	bl	8006826 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 80064c4:	4602      	mov	r2, r0
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d904      	bls.n	80064d6 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x84>
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f9aa 	bl	8006826 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 80064d2:	4603      	mov	r3, r0
 80064d4:	e000      	b.n	80064d8 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x86>
 80064d6:	697b      	ldr	r3, [r7, #20]
      }
 80064d8:	4618      	mov	r0, r3
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd90      	pop	{r4, r7, pc}

080064e0 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	f107 030c 	add.w	r3, r7, #12
 80064ee:	4611      	mov	r1, r2
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff ff9e 	bl	8006432 <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <_ZN9__gnu_cxxmiIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006500:	b590      	push	{r4, r7, lr}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f835 	bl	800657a <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8006510:	4603      	mov	r3, r0
 8006512:	681c      	ldr	r4, [r3, #0]
 8006514:	6838      	ldr	r0, [r7, #0]
 8006516:	f000 f830 	bl	800657a <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 800651a:	4603      	mov	r3, r0
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	1ae3      	subs	r3, r4, r3
 8006520:	109b      	asrs	r3, r3, #2
 8006522:	4618      	mov	r0, r3
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	bd90      	pop	{r4, r7, pc}

0800652a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800652a:	b580      	push	{r7, lr}
 800652c:	b082      	sub	sp, #8
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d006      	beq.n	8006548 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj+0x1e>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6839      	ldr	r1, [r7, #0]
 800653e:	4618      	mov	r0, r3
 8006540:	f000 f996 	bl	8006870 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8allocateERS2_j>
 8006544:	4603      	mov	r3, r0
 8006546:	e000      	b.n	800654a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj+0x20>
 8006548:	2300      	movs	r3, #0
      }
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8006552:	b590      	push	{r4, r7, lr}
 8006554:	b087      	sub	sp, #28
 8006556:	af02      	add	r7, sp, #8
 8006558:	60f8      	str	r0, [r7, #12]
 800655a:	60b9      	str	r1, [r7, #8]
 800655c:	607a      	str	r2, [r7, #4]
 800655e:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8006560:	f88d 4000 	strb.w	r4, [sp]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	68b9      	ldr	r1, [r7, #8]
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 f98f 	bl	800688e <_ZNSt6vectorIP15PrintableSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8006570:	4603      	mov	r3, r0
      }
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	bd90      	pop	{r4, r7, pc}

0800657a <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8006590:	b590      	push	{r4, r7, lr}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 f987 	bl	80068b2 <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>
 80065a4:	4604      	mov	r4, r0
 80065a6:	68b8      	ldr	r0, [r7, #8]
 80065a8:	f000 f983 	bl	80068b2 <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>
 80065ac:	4601      	mov	r1, r0
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	4620      	mov	r0, r4
 80065b4:	f000 f98c 	bl	80068d0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP15PrintableSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80065b8:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd90      	pop	{r4, r7, pc}

080065c2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80065c2:	b590      	push	{r4, r7, lr}
 80065c4:	b08b      	sub	sp, #44	; 0x2c
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	60f8      	str	r0, [r7, #12]
 80065ca:	60b9      	str	r1, [r7, #8]
 80065cc:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80065ce:	68b8      	ldr	r0, [r7, #8]
 80065d0:	f7fe fbd1 	bl	8004d76 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>
 80065d4:	4603      	mov	r3, r0
 80065d6:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80065d8:	68b8      	ldr	r0, [r7, #8]
 80065da:	f7fe fbd8 	bl	8004d8e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 80065de:	4603      	mov	r3, r0
 80065e0:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d020      	beq.n	8006630 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x6e>
	  __y = __x;
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80065f2:	68bc      	ldr	r4, [r7, #8]
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fe fc5b 	bl	8004eb2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 80065fc:	4603      	mov	r3, r0
 80065fe:	461a      	mov	r2, r3
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	4620      	mov	r0, r4
 8006604:	f7fe fc31 	bl	8004e6a <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8006608:	4603      	mov	r3, r0
 800660a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800660e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006612:	2b00      	cmp	r3, #0
 8006614:	d005      	beq.n	8006622 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x60>
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	4618      	mov	r0, r3
 800661a:	f7fe fc5d 	bl	8004ed8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>
 800661e:	4603      	mov	r3, r0
 8006620:	e004      	b.n	800662c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x6a>
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	4618      	mov	r0, r3
 8006626:	f7fe fc63 	bl	8004ef0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>
 800662a:	4603      	mov	r3, r0
 800662c:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800662e:	e7db      	b.n	80065e8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x26>
      iterator __j = iterator(__y);
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	f107 0310 	add.w	r3, r7, #16
 8006636:	4611      	mov	r1, r2
 8006638:	4618      	mov	r0, r3
 800663a:	f7fe fc65 	bl	8004f08 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800663e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006642:	2b00      	cmp	r3, #0
 8006644:	d01d      	beq.n	8006682 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xc0>
	  if (__j == begin())
 8006646:	68b8      	ldr	r0, [r7, #8]
 8006648:	f000 f953 	bl	80068f2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE5beginEv>
 800664c:	4603      	mov	r3, r0
 800664e:	61fb      	str	r3, [r7, #28]
 8006650:	f107 021c 	add.w	r2, r7, #28
 8006654:	f107 0310 	add.w	r3, r7, #16
 8006658:	4611      	mov	r1, r2
 800665a:	4618      	mov	r0, r3
 800665c:	f7fe fbe5 	bl	8004e2a <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d008      	beq.n	8006678 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xb6>
	    return _Res(__x, __y);
 8006666:	f107 0214 	add.w	r2, r7, #20
 800666a:	f107 0318 	add.w	r3, r7, #24
 800666e:	4619      	mov	r1, r3
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f94f 	bl	8006914 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>
 8006676:	e025      	b.n	80066c4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x102>
	    --__j;
 8006678:	f107 0310 	add.w	r3, r7, #16
 800667c:	4618      	mov	r0, r3
 800667e:	f000 f962 	bl	8006946 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8006682:	68bc      	ldr	r4, [r7, #8]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	4618      	mov	r0, r3
 8006688:	f7fe fbe3 	bl	8004e52 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800668c:	4603      	mov	r3, r0
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	4619      	mov	r1, r3
 8006692:	4620      	mov	r0, r4
 8006694:	f7fe fbe9 	bl	8004e6a <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d008      	beq.n	80066b0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xee>
	return _Res(__x, __y);
 800669e:	f107 0214 	add.w	r2, r7, #20
 80066a2:	f107 0318 	add.w	r3, r7, #24
 80066a6:	4619      	mov	r1, r3
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 f933 	bl	8006914 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>
 80066ae:	e009      	b.n	80066c4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x102>
      return _Res(__j._M_node, 0);
 80066b0:	2300      	movs	r3, #0
 80066b2:	623b      	str	r3, [r7, #32]
 80066b4:	f107 0220 	add.w	r2, r7, #32
 80066b8:	f107 0310 	add.w	r3, r7, #16
 80066bc:	4619      	mov	r1, r3
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 f952 	bl	8006968 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	372c      	adds	r7, #44	; 0x2c
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd90      	pop	{r4, r7, pc}

080066cc <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeC1ERS7_>:
	_Alloc_node(_Rb_tree& __t)
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4618      	mov	r0, r3
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006700:	b5b0      	push	{r4, r5, r7, lr}
 8006702:	b088      	sub	sp, #32
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
 800670c:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d11a      	bne.n	800674a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f7fe fb3a 	bl	8004d8e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 800671a:	4602      	mov	r2, r0
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4293      	cmp	r3, r2
 8006720:	d013      	beq.n	800674a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8006722:	68fc      	ldr	r4, [r7, #12]
 8006724:	f107 0310 	add.w	r3, r7, #16
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	4618      	mov	r0, r3
 800672c:	f7fe fc09 	bl	8004f42 <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 8006730:	4605      	mov	r5, r0
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7fe fb8d 	bl	8004e52 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006738:	4603      	mov	r3, r0
 800673a:	461a      	mov	r2, r3
 800673c:	4629      	mov	r1, r5
 800673e:	4620      	mov	r0, r4
 8006740:	f7fe fb93 	bl	8004e6a <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4e>
 800674a:	2301      	movs	r3, #1
 800674c:	e000      	b.n	8006750 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x50>
 800674e:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8006750:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8006752:	6838      	ldr	r0, [r7, #0]
 8006754:	f7ff ffc9 	bl	80066ea <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8006758:	4603      	mov	r3, r0
 800675a:	4619      	mov	r1, r3
 800675c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800675e:	f000 f919 	bl	8006994 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeclIRKS1_EEPSt13_Rb_tree_nodeIS1_EOT_>
 8006762:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8006768:	7ff8      	ldrb	r0, [r7, #31]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	69b9      	ldr	r1, [r7, #24]
 800676e:	f012 faba 	bl	8018ce6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800677c:	f107 0314 	add.w	r3, r7, #20
 8006780:	69b9      	ldr	r1, [r7, #24]
 8006782:	4618      	mov	r0, r3
 8006784:	f7fe fbc0 	bl	8004f08 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8006788:	697b      	ldr	r3, [r7, #20]
      }
 800678a:	4618      	mov	r0, r3
 800678c:	3720      	adds	r7, #32
 800678e:	46bd      	mov	sp, r7
 8006790:	bdb0      	pop	{r4, r5, r7, pc}

08006792 <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8006792:	b580      	push	{r7, lr}
 8006794:	b084      	sub	sp, #16
 8006796:	af00      	add	r7, sp, #0
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	60b9      	str	r1, [r7, #8]
 800679c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800679e:	68b8      	ldr	r0, [r7, #8]
 80067a0:	f000 f90c 	bl	80069bc <_ZSt7forwardISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS4_E4typeE>
 80067a4:	4602      	mov	r2, r0
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6812      	ldr	r2, [r2, #0]
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f910 	bl	80069d2 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80067b2:	4603      	mov	r3, r0
 80067b4:	781a      	ldrb	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	711a      	strb	r2, [r3, #4]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <_ZSt7forwardIRSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4618      	mov	r0, r3
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80067da:	b480      	push	{r7}
 80067dc:	b083      	sub	sp, #12
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4618      	mov	r0, r3
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4619      	mov	r1, r3
 8006802:	68b8      	ldr	r0, [r7, #8]
 8006804:	f012 fa14 	bl	8018c30 <_ZdlPvj>
      }
 8006808:	bf00      	nop
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP15PrintableSensorEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4618      	mov	r0, r3
 8006832:	f000 f90c 	bl	8006a4e <_ZNKSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8006836:	4603      	mov	r3, r0
 8006838:	4618      	mov	r0, r3
 800683a:	f000 f8ee 	bl	8006a1a <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_max_sizeERKS2_>
 800683e:	4603      	mov	r3, r0
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d201      	bcs.n	8006862 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	e000      	b.n	8006864 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8006862:	687b      	ldr	r3, [r7, #4]
    }
 8006864:	4618      	mov	r0, r3
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800687a:	2200      	movs	r2, #0
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f8f0 	bl	8006a64 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv>
 8006884:	4603      	mov	r3, r0
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <_ZNSt6vectorIP15PrintableSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800688e:	b580      	push	{r7, lr}
 8006890:	b084      	sub	sp, #16
 8006892:	af00      	add	r7, sp, #0
 8006894:	60f8      	str	r0, [r7, #12]
 8006896:	60b9      	str	r1, [r7, #8]
 8006898:	607a      	str	r2, [r7, #4]
 800689a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	68b9      	ldr	r1, [r7, #8]
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f000 f8fc 	bl	8006aa0 <_ZSt12__relocate_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 80068a8:	4603      	mov	r3, r0
      }
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80068ba:	f107 030c 	add.w	r3, r7, #12
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 f90a 	bl	8006ada <_ZNSt13move_iteratorIPP15PrintableSensorEC1ES2_>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP15PrintableSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	68b9      	ldr	r1, [r7, #8]
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 f90b 	bl	8006afe <_ZSt18uninitialized_copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>
 80068e8:	4603      	mov	r3, r0
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68da      	ldr	r2, [r3, #12]
 80068fe:	f107 030c 	add.w	r3, r7, #12
 8006902:	4611      	mov	r1, r2
 8006904:	4618      	mov	r0, r3
 8006906:	f7fe faff 	bl	8004f08 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8006920:	68b8      	ldr	r0, [r7, #8]
 8006922:	f000 f8fe 	bl	8006b22 <_ZSt7forwardIRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006926:	4603      	mov	r3, r0
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f902 	bl	8006b38 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8006934:	4603      	mov	r3, r0
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	605a      	str	r2, [r3, #4]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8006946:	b580      	push	{r7, lr}
 8006948:	b082      	sub	sp, #8
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4618      	mov	r0, r3
 8006954:	f012 f9c5 	bl	8018ce2 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8006958:	4602      	mov	r2, r0
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	601a      	str	r2, [r3, #0]
	return *this;
 800695e:	687b      	ldr	r3, [r7, #4]
      }
 8006960:	4618      	mov	r0, r3
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8006974:	68b8      	ldr	r0, [r7, #8]
 8006976:	f000 f8df 	bl	8006b38 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800697a:	4603      	mov	r3, r0
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	605a      	str	r2, [r3, #4]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeclIRKS1_EEPSt13_Rb_tree_nodeIS1_EOT_>:
	  operator()(_Arg&& __arg) const
 8006994:	b590      	push	{r4, r7, lr}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681c      	ldr	r4, [r3, #0]
 80069a2:	6838      	ldr	r0, [r7, #0]
 80069a4:	f7ff fea1 	bl	80066ea <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 80069a8:	4603      	mov	r3, r0
 80069aa:	4619      	mov	r1, r3
 80069ac:	4620      	mov	r0, r4
 80069ae:	f000 f8ce 	bl	8006b4e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_create_nodeIJRKS1_EEEPSt13_Rb_tree_nodeIS1_EDpOT_>
 80069b2:	4603      	mov	r3, r0
 80069b4:	4618      	mov	r0, r3
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd90      	pop	{r4, r7, pc}

080069bc <_ZSt7forwardISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4618      	mov	r0, r3
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4618      	mov	r0, r3
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4618      	mov	r0, r3
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <_ZNSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>:
      _M_valptr()
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b082      	sub	sp, #8
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	3310      	adds	r3, #16
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 f8b6 	bl	8006b7c <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>
 8006a10:	4603      	mov	r3, r0
 8006a12:	4618      	mov	r0, r3
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8006a22:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006a26:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f8b3 	bl	8006b94 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8max_sizeERKS2_>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006a32:	f107 0208 	add.w	r2, r7, #8
 8006a36:	f107 030c 	add.w	r3, r7, #12
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 f8b5 	bl	8006bac <_ZSt3minIjERKT_S2_S2_>
 8006a42:	4603      	mov	r3, r0
 8006a44:	681b      	ldr	r3, [r3, #0]
      }
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <_ZNKSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006a4e:	b480      	push	{r7}
 8006a50:	b083      	sub	sp, #12
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 f8af 	bl	8006bd4 <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>
 8006a76:	4602      	mov	r2, r0
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	bf8c      	ite	hi
 8006a7e:	2301      	movhi	r3, #1
 8006a80:	2300      	movls	r3, #0
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006a88:	f012 f988 	bl	8018d9c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4618      	mov	r0, r3
 8006a92:	f012 f8cf 	bl	8018c34 <_Znwj>
 8006a96:	4603      	mov	r3, r0
      }
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <_ZSt12__relocate_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8006aa0:	b5b0      	push	{r4, r5, r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 f89c 	bl	8006bec <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	68b8      	ldr	r0, [r7, #8]
 8006ab8:	f000 f898 	bl	8006bec <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006abc:	4605      	mov	r5, r0
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f894 	bl	8006bec <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	4629      	mov	r1, r5
 8006aca:	4620      	mov	r0, r4
 8006acc:	f000 f899 	bl	8006c02 <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8006ad0:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bdb0      	pop	{r4, r5, r7, pc}

08006ada <_ZNSt13move_iteratorIPP15PrintableSensorEC1ES2_>:
      move_iterator(iterator_type __i)
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8006ae4:	463b      	mov	r3, r7
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 f8a9 	bl	8006c3e <_ZSt4moveIRPP15PrintableSensorEONSt16remove_referenceIT_E4typeEOS5_>
 8006aec:	4603      	mov	r3, r0
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <_ZSt18uninitialized_copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b086      	sub	sp, #24
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 f89e 	bl	8006c54 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP15PrintableSensorES5_EET0_T_S8_S7_>
 8006b18:	4603      	mov	r3, r0
    }
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <_ZSt7forwardIRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4618      	mov	r0, r3
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_create_nodeIJRKS1_EEEPSt13_Rb_tree_nodeIS1_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f88b 	bl	8006c74 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_get_nodeEv>
 8006b5e:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8006b60:	6838      	ldr	r0, [r7, #0]
 8006b62:	f7ff fdc2 	bl	80066ea <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8006b66:	4603      	mov	r3, r0
 8006b68:	461a      	mov	r2, r3
 8006b6a:	68f9      	ldr	r1, [r7, #12]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f892 	bl	8006c96 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE17_M_construct_nodeIJRKS1_EEEvPSt13_Rb_tree_nodeIS1_EDpOT_>
	  return __tmp;
 8006b72:	68fb      	ldr	r3, [r7, #12]
	}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>:
      _M_ptr() noexcept
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f8a6 	bl	8006cd6 <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f8a5 	bl	8006cec <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE8max_sizeEv>
 8006ba2:	4603      	mov	r3, r0
      }
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d201      	bcs.n	8006bc6 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	e000      	b.n	8006bc8 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8006bc6:	687b      	ldr	r3, [r7, #4]
    }
 8006bc8:	4618      	mov	r0, r3
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006bdc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8006be0:	4618      	mov	r0, r3
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b086      	sub	sp, #24
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	607a      	str	r2, [r7, #4]
 8006c0e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	109b      	asrs	r3, r3, #2
 8006c18:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	dd06      	ble.n	8006c2e <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	461a      	mov	r2, r3
 8006c26:	68f9      	ldr	r1, [r7, #12]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f013 fa51 	bl	801a0d0 <memmove>
      return __result + __count;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	4413      	add	r3, r2
    }
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <_ZSt4moveIRPP15PrintableSensorEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP15PrintableSensorES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	68b9      	ldr	r1, [r7, #8]
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 f84d 	bl	8006d04 <_ZSt4copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_get_nodeEv>:
      _M_get_node()
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f7ff feb3 	bl	80069e8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2101      	movs	r1, #1
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 f854 	bl	8006d34 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE8allocateERS4_j>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE17_M_construct_nodeIJRKS1_EEEvPSt13_Rb_tree_nodeIS1_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8006c96:	b5b0      	push	{r4, r5, r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	2014      	movs	r0, #20
 8006ca8:	f7ff f816 	bl	8005cd8 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f7ff fe9b 	bl	80069e8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	68b8      	ldr	r0, [r7, #8]
 8006cb6:	f7ff fea2 	bl	80069fe <_ZNSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>
 8006cba:	4605      	mov	r5, r0
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7ff fd14 	bl	80066ea <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	4629      	mov	r1, r5
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f000 f842 	bl	8006d52 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>
	}
 8006cce:	bf00      	nop
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bdb0      	pop	{r4, r5, r7, pc}

08006cd6 <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>:
      _M_addr() noexcept
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7ff ff6d 	bl	8006bd4 <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <_ZSt4copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8006d04:	b590      	push	{r4, r7, lr}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f000 f831 	bl	8006d78 <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006d16:	4604      	mov	r4, r0
 8006d18:	68b8      	ldr	r0, [r7, #8]
 8006d1a:	f000 f82d 	bl	8006d78 <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	4619      	mov	r1, r3
 8006d24:	4620      	mov	r0, r4
 8006d26:	f000 f838 	bl	8006d9a <_ZSt13__copy_move_aILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 8006d2a:	4603      	mov	r3, r0
    }
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd90      	pop	{r4, r7, pc}

08006d34 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006d3e:	2200      	movs	r2, #0
 8006d40:	6839      	ldr	r1, [r7, #0]
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f84c 	bl	8006de0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7ff fcc3 	bl	80066ea <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8006d64:	4603      	mov	r3, r0
 8006d66:	461a      	mov	r2, r3
 8006d68:	68b9      	ldr	r1, [r7, #8]
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 f859 	bl	8006e22 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
	}
 8006d70:	bf00      	nop
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8006d80:	1d3b      	adds	r3, r7, #4
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 f863 	bl	8006e4e <_ZNKSt13move_iteratorIPP15PrintableSensorE4baseEv>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 f86b 	bl	8006e66 <_ZSt12__miter_baseIPP15PrintableSensorET_S3_>
 8006d90:	4603      	mov	r3, r0
 8006d92:	4618      	mov	r0, r3
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <_ZSt13__copy_move_aILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006d9a:	b5b0      	push	{r4, r5, r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	60f8      	str	r0, [r7, #12]
 8006da2:	60b9      	str	r1, [r7, #8]
 8006da4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f7ff ff20 	bl	8006bec <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006dac:	4604      	mov	r4, r0
 8006dae:	68b8      	ldr	r0, [r7, #8]
 8006db0:	f7ff ff1c 	bl	8006bec <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006db4:	4605      	mov	r5, r0
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff ff17 	bl	8006bec <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f000 f859 	bl	8006e7c <_ZSt14__copy_move_a1ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	1d3b      	adds	r3, r7, #4
 8006dce:	4611      	mov	r1, r2
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 f863 	bl	8006e9c <_ZSt12__niter_wrapIPP15PrintableSensorET_RKS3_S3_>
 8006dd6:	4603      	mov	r3, r0
    }
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bdb0      	pop	{r4, r5, r7, pc}

08006de0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 f861 	bl	8006eb4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv>
 8006df2:	4602      	mov	r2, r0
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	4293      	cmp	r3, r2
 8006df8:	bf8c      	ite	hi
 8006dfa:	2301      	movhi	r3, #1
 8006dfc:	2300      	movls	r3, #0
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006e04:	f011 ffca 	bl	8018d9c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4618      	mov	r0, r3
 8006e14:	f011 ff0e 	bl	8018c34 <_Znwj>
 8006e18:	4603      	mov	r3, r0
      }
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8006e22:	b590      	push	{r4, r7, lr}
 8006e24:	b085      	sub	sp, #20
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7ff fc5b 	bl	80066ea <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8006e34:	4603      	mov	r3, r0
 8006e36:	681c      	ldr	r4, [r3, #0]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	2004      	movs	r0, #4
 8006e3e:	f7fe ff4b 	bl	8005cd8 <_ZnwjPv>
 8006e42:	4603      	mov	r3, r0
 8006e44:	601c      	str	r4, [r3, #0]
 8006e46:	bf00      	nop
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd90      	pop	{r4, r7, pc}

08006e4e <_ZNKSt13move_iteratorIPP15PrintableSensorE4baseEv>:
      base() const
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <_ZSt12__miter_baseIPP15PrintableSensorET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8006e66:	b480      	push	{r7}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4618      	mov	r0, r3
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <_ZSt14__copy_move_a1ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	68b9      	ldr	r1, [r7, #8]
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f000 f81f 	bl	8006ed0 <_ZSt14__copy_move_a2ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 8006e92:	4603      	mov	r3, r0
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <_ZSt12__niter_wrapIPP15PrintableSensorET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006ebc:	4b03      	ldr	r3, [pc, #12]	; (8006ecc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv+0x18>)
      }
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	06666666 	.word	0x06666666

08006ed0 <_ZSt14__copy_move_a2ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	68b9      	ldr	r1, [r7, #8]
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f000 f805 	bl	8006ef0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_>
 8006ee6:	4603      	mov	r3, r0
    }
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	109b      	asrs	r3, r3, #2
 8006f04:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d006      	beq.n	8006f1a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	461a      	mov	r2, r3
 8006f12:	68f9      	ldr	r1, [r7, #12]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f013 f8db 	bl	801a0d0 <memmove>
	  return __result + _Num;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	4413      	add	r3, r2
	}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	ed87 0a01 	vstr	s0, [r7, #4]
 8006f34:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f38:	eef0 7ae7 	vabs.f32	s15, s15
 8006f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	ed87 0a01 	vstr	s0, [r7, #4]
 8006f54:	edc7 0a00 	vstr	s1, [r7]
 8006f58:	edd7 0a00 	vldr	s1, [r7]
 8006f5c:	ed97 0a01 	vldr	s0, [r7, #4]
 8006f60:	f012 f818 	bl	8018f94 <atan2f>
 8006f64:	eef0 7a40 	vmov.f32	s15, s0
 8006f68:	eeb0 0a67 	vmov.f32	s0, s15
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8006f72:	b480      	push	{r7}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	ed87 0a01 	vstr	s0, [r7, #4]
 8006f7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f80:	eef0 7ae7 	vabs.f32	s15, s15
 8006f84:	eeb0 0a67 	vmov.f32	s0, s15
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b082      	sub	sp, #8
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	ed87 0a01 	vstr	s0, [r7, #4]
 8006f9c:	ed97 0a01 	vldr	s0, [r7, #4]
 8006fa0:	f011 fffa 	bl	8018f98 <sqrtf>
 8006fa4:	eef0 7a40 	vmov.f32	s15, s0
 8006fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
	...

08006fb4 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_>:
 */

#include "ICM42688P.hpp"
#include "Constants.hpp"

ICM42688P::ICM42688P(
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
	,prev_raw_az {0.0F}
	,max_ax_dt {0.0F}
	,max_ay_dt {0.0F}
	,max_az_dt {0.0F}
	,crashState {false}
	,criticalState {false}
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fc fe7f 	bl	8003cc8 <_ZN8SPI_ConnC1Ev>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3304      	adds	r3, #4
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fc fe8a 	bl	8003ce8 <_ZN15PrintableSensorC1Ev>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3340      	adds	r3, #64	; 0x40
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7fc fe9b 	bl	8003d14 <_ZN12CallsCounterC1Ev>
 8006fde:	4a66      	ldr	r2, [pc, #408]	; (8007178 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1c4>)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	4a65      	ldr	r2, [pc, #404]	; (800717c <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1c8>)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	605a      	str	r2, [r3, #4]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	4a64      	ldr	r2, [pc, #400]	; (8007180 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1cc>)
 8006fee:	651a      	str	r2, [r3, #80]	; 0x50
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4a64      	ldr	r2, [pc, #400]	; (8007184 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1d0>)
 8006ff4:	655a      	str	r2, [r3, #84]	; 0x54
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4a63      	ldr	r2, [pc, #396]	; (8007188 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1d4>)
 8006ffa:	659a      	str	r2, [r3, #88]	; 0x58
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	65da      	str	r2, [r3, #92]	; 0x5c
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	661a      	str	r2, [r3, #96]	; 0x60
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	665a      	str	r2, [r3, #100]	; 0x64
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	669a      	str	r2, [r3, #104]	; 0x68
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	69fa      	ldr	r2, [r7, #28]
 8007018:	66da      	str	r2, [r3, #108]	; 0x6c
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f04f 0200 	mov.w	r2, #0
 8007040:	675a      	str	r2, [r3, #116]	; 0x74
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f04f 0200 	mov.w	r2, #0
 8007048:	679a      	str	r2, [r3, #120]	; 0x78
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	67da      	str	r2, [r3, #124]	; 0x7c
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f04f 0200 	mov.w	r2, #0
 8007062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f04f 0200 	mov.w	r2, #0
 800706c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f04f 0200 	mov.w	r2, #0
 8007076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f04f 0200 	mov.w	r2, #0
 8007080:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f04f 0200 	mov.w	r2, #0
 800708a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f04f 0200 	mov.w	r2, #0
 8007094:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f04f 0200 	mov.w	r2, #0
 800709e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f04f 0200 	mov.w	r2, #0
 80070a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f04f 0200 	mov.w	r2, #0
 80070b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f04f 0200 	mov.w	r2, #0
 80070bc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f04f 0200 	mov.w	r2, #0
 80070c6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f04f 0200 	mov.w	r2, #0
 80070d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4a2d      	ldr	r2, [pc, #180]	; (800718c <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1d8>)
 80070d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4a2c      	ldr	r2, [pc, #176]	; (8007190 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1dc>)
 80070e0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	4a2b      	ldr	r2, [pc, #172]	; (8007194 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1e0>)
 80070e8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4a2a      	ldr	r2, [pc, #168]	; (8007198 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1e4>)
 80070f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4a29      	ldr	r2, [pc, #164]	; (800719c <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1e8>)
 80070f8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4a28      	ldr	r2, [pc, #160]	; (80071a0 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1ec>)
 8007100:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800710a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007114:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800711e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f04f 0200 	mov.w	r2, #0
 8007128:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f04f 0200 	mov.w	r2, #0
 8007132:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f04f 0200 	mov.w	r2, #0
 800713c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f04f 0200 	mov.w	r2, #0
 8007146:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f04f 0200 	mov.w	r2, #0
 8007150:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f04f 0200 	mov.w	r2, #0
 800715a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
{
}
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	0801a87c 	.word	0x0801a87c
 800717c:	0801a890 	.word	0x0801a890
 8007180:	42652ee1 	.word	0x42652ee1
 8007184:	4183126f 	.word	0x4183126f
 8007188:	3a83126f 	.word	0x3a83126f
 800718c:	c1400000 	.word	0xc1400000
 8007190:	c1500000 	.word	0xc1500000
 8007194:	40e00000 	.word	0x40e00000
 8007198:	45057000 	.word	0x45057000
 800719c:	c3d48000 	.word	0xc3d48000
 80071a0:	44a0a000 	.word	0x44a0a000

080071a4 <_ZN9ICM42688P11defaultInitEv>:

bool ICM42688P::defaultInit()
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	6078      	str	r0, [r7, #4]
	if (!initAndCheck(INTF_CONFIG1,0x00,10))
 80071ac:	2300      	movs	r3, #0
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	230a      	movs	r3, #10
 80071b2:	2200      	movs	r2, #0
 80071b4:	214d      	movs	r1, #77	; 0x4d
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f8af 	bl	800731a <_ZN9ICM42688P12initAndCheckEhhhb>
 80071bc:	4603      	mov	r3, r0
 80071be:	f083 0301 	eor.w	r3, r3, #1
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <_ZN9ICM42688P11defaultInitEv+0x28>
		return false;
 80071c8:	2300      	movs	r3, #0
 80071ca:	e0a2      	b.n	8007312 <_ZN9ICM42688P11defaultInitEv+0x16e>

	SPI_write(DEVICE_CONFIG,DEVICE_CONFIG_SOFT_RESET_CONFIG);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2201      	movs	r2, #1
 80071d4:	2111      	movs	r1, #17
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	4798      	blx	r3
	HAL_Delay(20);
 80071da:	2014      	movs	r0, #20
 80071dc:	f002 f99a 	bl	8009514 <HAL_Delay>

	if (!initAndCheck(INTF_CONFIG1,0x00,10))
 80071e0:	2300      	movs	r3, #0
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	230a      	movs	r3, #10
 80071e6:	2200      	movs	r2, #0
 80071e8:	214d      	movs	r1, #77	; 0x4d
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f895 	bl	800731a <_ZN9ICM42688P12initAndCheckEhhhb>
 80071f0:	4603      	mov	r3, r0
 80071f2:	f083 0301 	eor.w	r3, r3, #1
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <_ZN9ICM42688P11defaultInitEv+0x5c>
		return false;
 80071fc:	2300      	movs	r3, #0
 80071fe:	e088      	b.n	8007312 <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(INT_CONFIG0,INT_CONFIG0_UI_DRDY_INT_CLEAR_ONSENSORREGREAD,10))
 8007200:	2300      	movs	r3, #0
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	230a      	movs	r3, #10
 8007206:	2220      	movs	r2, #32
 8007208:	2163      	movs	r1, #99	; 0x63
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f885 	bl	800731a <_ZN9ICM42688P12initAndCheckEhhhb>
 8007210:	4603      	mov	r3, r0
 8007212:	f083 0301 	eor.w	r3, r3, #1
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <_ZN9ICM42688P11defaultInitEv+0x7c>
		return false;
 800721c:	2300      	movs	r3, #0
 800721e:	e078      	b.n	8007312 <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(INT_CONFIG,INT_CONFIG_INT1_POLARITY_ACTIVE_HIGH|INT_CONFIG_INT1_DRIVE_CIRCUIT_PUSH_PULL,10))
 8007220:	2300      	movs	r3, #0
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	230a      	movs	r3, #10
 8007226:	2203      	movs	r2, #3
 8007228:	2114      	movs	r1, #20
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f875 	bl	800731a <_ZN9ICM42688P12initAndCheckEhhhb>
 8007230:	4603      	mov	r3, r0
 8007232:	f083 0301 	eor.w	r3, r3, #1
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <_ZN9ICM42688P11defaultInitEv+0x9c>
		return false;
 800723c:	2300      	movs	r3, #0
 800723e:	e068      	b.n	8007312 <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(INT_SOURCE0,INT_SOURCE0_UI_DRDY_INT1_EN,10))
 8007240:	2300      	movs	r3, #0
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	230a      	movs	r3, #10
 8007246:	2208      	movs	r2, #8
 8007248:	2165      	movs	r1, #101	; 0x65
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f865 	bl	800731a <_ZN9ICM42688P12initAndCheckEhhhb>
 8007250:	4603      	mov	r3, r0
 8007252:	f083 0301 	eor.w	r3, r3, #1
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <_ZN9ICM42688P11defaultInitEv+0xbc>
		return false;
 800725c:	2300      	movs	r3, #0
 800725e:	e058      	b.n	8007312 <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(GYRO_CONFIG_STATIC2,0b11,10))
 8007260:	2300      	movs	r3, #0
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	230a      	movs	r3, #10
 8007266:	2203      	movs	r2, #3
 8007268:	210b      	movs	r1, #11
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f855 	bl	800731a <_ZN9ICM42688P12initAndCheckEhhhb>
 8007270:	4603      	mov	r3, r0
 8007272:	f083 0301 	eor.w	r3, r3, #1
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <_ZN9ICM42688P11defaultInitEv+0xdc>
		return false;
 800727c:	2300      	movs	r3, #0
 800727e:	e048      	b.n	8007312 <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(GYRO_CONFIG0,GYRO_CONFIG0_GYRO_ODR_1KHZ|GYRO_CONFIG0_GYRO_FS_SEL_2000DPS,10))
 8007280:	2300      	movs	r3, #0
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	230a      	movs	r3, #10
 8007286:	2206      	movs	r2, #6
 8007288:	214f      	movs	r1, #79	; 0x4f
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f845 	bl	800731a <_ZN9ICM42688P12initAndCheckEhhhb>
 8007290:	4603      	mov	r3, r0
 8007292:	f083 0301 	eor.w	r3, r3, #1
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <_ZN9ICM42688P11defaultInitEv+0xfc>
		return false;
 800729c:	2300      	movs	r3, #0
 800729e:	e038      	b.n	8007312 <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(ACCEL_CONFIG0,ACCEL_CONFIG0_ACCEL_ODR_1KHZ|ACCEL_CONFIG0_ACCEL_FS_SEL_4G,10))
 80072a0:	2300      	movs	r3, #0
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	230a      	movs	r3, #10
 80072a6:	2246      	movs	r2, #70	; 0x46
 80072a8:	2150      	movs	r1, #80	; 0x50
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f835 	bl	800731a <_ZN9ICM42688P12initAndCheckEhhhb>
 80072b0:	4603      	mov	r3, r0
 80072b2:	f083 0301 	eor.w	r3, r3, #1
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <_ZN9ICM42688P11defaultInitEv+0x11c>
		return false;
 80072bc:	2300      	movs	r3, #0
 80072be:	e028      	b.n	8007312 <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(PWR_MGMT0,0x0F,10))
 80072c0:	2300      	movs	r3, #0
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	230a      	movs	r3, #10
 80072c6:	220f      	movs	r2, #15
 80072c8:	214e      	movs	r1, #78	; 0x4e
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f825 	bl	800731a <_ZN9ICM42688P12initAndCheckEhhhb>
 80072d0:	4603      	mov	r3, r0
 80072d2:	f083 0301 	eor.w	r3, r3, #1
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <_ZN9ICM42688P11defaultInitEv+0x13c>
		return false;
 80072dc:	2300      	movs	r3, #0
 80072de:	e018      	b.n	8007312 <_ZN9ICM42688P11defaultInitEv+0x16e>

	HAL_Delay(50);
 80072e0:	2032      	movs	r0, #50	; 0x32
 80072e2:	f002 f917 	bl	8009514 <HAL_Delay>

	this->update();
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fa80 	bl	80077ec <_ZN9ICM42688P6updateEv>
	this->euler_x = this->ay;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	this->euler_y = this->ax;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	this->euler_z = this->az;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	return true;
 8007310:	2301      	movs	r3, #1
}
 8007312:	4618      	mov	r0, r3
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <_ZN9ICM42688P12initAndCheckEhhhb>:

bool ICM42688P::initAndCheck(uint8_t addr,uint8_t val,uint8_t numberOfTries,bool read_only)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	4608      	mov	r0, r1
 8007324:	4611      	mov	r1, r2
 8007326:	461a      	mov	r2, r3
 8007328:	4603      	mov	r3, r0
 800732a:	70fb      	strb	r3, [r7, #3]
 800732c:	460b      	mov	r3, r1
 800732e:	70bb      	strb	r3, [r7, #2]
 8007330:	4613      	mov	r3, r2
 8007332:	707b      	strb	r3, [r7, #1]
	for (int i=0;i<numberOfTries;i++)
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]
 8007338:	787b      	ldrb	r3, [r7, #1]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	429a      	cmp	r2, r3
 800733e:	da21      	bge.n	8007384 <_ZN9ICM42688P12initAndCheckEhhhb+0x6a>
	{
		if (read_only==false)
 8007340:	7e3b      	ldrb	r3, [r7, #24]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d106      	bne.n	8007354 <_ZN9ICM42688P12initAndCheckEhhhb+0x3a>
			SPI_write(addr,val);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	78ba      	ldrb	r2, [r7, #2]
 800734e:	78f9      	ldrb	r1, [r7, #3]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	4798      	blx	r3
		if (SPI_read(addr)==val)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3304      	adds	r3, #4
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	78fa      	ldrb	r2, [r7, #3]
 800735e:	4611      	mov	r1, r2
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	4798      	blx	r3
 8007364:	4603      	mov	r3, r0
 8007366:	461a      	mov	r2, r3
 8007368:	78bb      	ldrb	r3, [r7, #2]
 800736a:	4293      	cmp	r3, r2
 800736c:	bf0c      	ite	eq
 800736e:	2301      	moveq	r3, #1
 8007370:	2300      	movne	r3, #0
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <_ZN9ICM42688P12initAndCheckEhhhb+0x62>
			return true;
 8007378:	2301      	movs	r3, #1
 800737a:	e004      	b.n	8007386 <_ZN9ICM42688P12initAndCheckEhhhb+0x6c>
	for (int i=0;i<numberOfTries;i++)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	3301      	adds	r3, #1
 8007380:	60fb      	str	r3, [r7, #12]
 8007382:	e7d9      	b.n	8007338 <_ZN9ICM42688P12initAndCheckEhhhb+0x1e>
	}
	return false;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
	...

08007390 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* ICM42688P::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8007390:	b590      	push	{r4, r7, lr}
 8007392:	b09f      	sub	sp, #124	; 0x7c
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	3308      	adds	r3, #8
 800739e:	2200      	movs	r2, #0
 80073a0:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GX)!=senorsList.end())
 80073a2:	2300      	movs	r3, #0
 80073a4:	613b      	str	r3, [r7, #16]
 80073a6:	f107 0310 	add.w	r3, r7, #16
 80073aa:	4619      	mov	r1, r3
 80073ac:	6838      	ldr	r0, [r7, #0]
 80073ae:	f7fd fc4b 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80073b2:	4603      	mov	r3, r0
 80073b4:	60fb      	str	r3, [r7, #12]
 80073b6:	6838      	ldr	r0, [r7, #0]
 80073b8:	f7fd fc5f 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80073bc:	4603      	mov	r3, r0
 80073be:	617b      	str	r3, [r7, #20]
 80073c0:	f107 0214 	add.w	r2, r7, #20
 80073c4:	f107 030c 	add.w	r3, r7, #12
 80073c8:	4611      	mov	r1, r2
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fd fc62 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d020      	beq.n	8007418 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x88>
	{
		strcat(packet,toCharArray(euler_x));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f103 0408 	add.w	r4, r3, #8
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	1d1a      	adds	r2, r3, #4
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 80073e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073ea:	ee17 1a90 	vmov	r1, s15
 80073ee:	4610      	mov	r0, r2
 80073f0:	f7fc fc38 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 80073f4:	4603      	mov	r3, r0
 80073f6:	4619      	mov	r1, r3
 80073f8:	4620      	mov	r0, r4
 80073fa:	f012 ffbf 	bl	801a37c <strcat>
		strcat(packet,",");
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f103 0408 	add.w	r4, r3, #8
 8007404:	4620      	mov	r0, r4
 8007406:	f7f8 fee3 	bl	80001d0 <strlen>
 800740a:	4603      	mov	r3, r0
 800740c:	4423      	add	r3, r4
 800740e:	49d2      	ldr	r1, [pc, #840]	; (8007758 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 8007410:	461a      	mov	r2, r3
 8007412:	460b      	mov	r3, r1
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GY)!=senorsList.end())
 8007418:	2301      	movs	r3, #1
 800741a:	61fb      	str	r3, [r7, #28]
 800741c:	f107 031c 	add.w	r3, r7, #28
 8007420:	4619      	mov	r1, r3
 8007422:	6838      	ldr	r0, [r7, #0]
 8007424:	f7fd fc10 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8007428:	4603      	mov	r3, r0
 800742a:	61bb      	str	r3, [r7, #24]
 800742c:	6838      	ldr	r0, [r7, #0]
 800742e:	f7fd fc24 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8007432:	4603      	mov	r3, r0
 8007434:	623b      	str	r3, [r7, #32]
 8007436:	f107 0220 	add.w	r2, r7, #32
 800743a:	f107 0318 	add.w	r3, r7, #24
 800743e:	4611      	mov	r1, r2
 8007440:	4618      	mov	r0, r3
 8007442:	f7fd fc27 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d020      	beq.n	800748e <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0xfe>
	{
		strcat(packet,toCharArray(euler_y));
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f103 0408 	add.w	r4, r3, #8
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	1d1a      	adds	r2, r3, #4
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800745c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007460:	ee17 1a90 	vmov	r1, s15
 8007464:	4610      	mov	r0, r2
 8007466:	f7fc fbfd 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 800746a:	4603      	mov	r3, r0
 800746c:	4619      	mov	r1, r3
 800746e:	4620      	mov	r0, r4
 8007470:	f012 ff84 	bl	801a37c <strcat>
		strcat(packet,",");
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f103 0408 	add.w	r4, r3, #8
 800747a:	4620      	mov	r0, r4
 800747c:	f7f8 fea8 	bl	80001d0 <strlen>
 8007480:	4603      	mov	r3, r0
 8007482:	4423      	add	r3, r4
 8007484:	49b4      	ldr	r1, [pc, #720]	; (8007758 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 8007486:	461a      	mov	r2, r3
 8007488:	460b      	mov	r3, r1
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GZ)!=senorsList.end())
 800748e:	2302      	movs	r3, #2
 8007490:	62bb      	str	r3, [r7, #40]	; 0x28
 8007492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007496:	4619      	mov	r1, r3
 8007498:	6838      	ldr	r0, [r7, #0]
 800749a:	f7fd fbd5 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 800749e:	4603      	mov	r3, r0
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
 80074a2:	6838      	ldr	r0, [r7, #0]
 80074a4:	f7fd fbe9 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80074a8:	4603      	mov	r3, r0
 80074aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074ac:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80074b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074b4:	4611      	mov	r1, r2
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fd fbec 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d020      	beq.n	8007504 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x174>
	{
		strcat(packet,toCharArray(euler_z));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f103 0408 	add.w	r4, r3, #8
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	1d1a      	adds	r2, r3, #4
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 80074d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074d6:	ee17 1a90 	vmov	r1, s15
 80074da:	4610      	mov	r0, r2
 80074dc:	f7fc fbc2 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 80074e0:	4603      	mov	r3, r0
 80074e2:	4619      	mov	r1, r3
 80074e4:	4620      	mov	r0, r4
 80074e6:	f012 ff49 	bl	801a37c <strcat>
		strcat(packet,",");
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f103 0408 	add.w	r4, r3, #8
 80074f0:	4620      	mov	r0, r4
 80074f2:	f7f8 fe6d 	bl	80001d0 <strlen>
 80074f6:	4603      	mov	r3, r0
 80074f8:	4423      	add	r3, r4
 80074fa:	4997      	ldr	r1, [pc, #604]	; (8007758 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 80074fc:	461a      	mov	r2, r3
 80074fe:	460b      	mov	r3, r1
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AX)!=senorsList.end())
 8007504:	2306      	movs	r3, #6
 8007506:	637b      	str	r3, [r7, #52]	; 0x34
 8007508:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800750c:	4619      	mov	r1, r3
 800750e:	6838      	ldr	r0, [r7, #0]
 8007510:	f7fd fb9a 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8007514:	4603      	mov	r3, r0
 8007516:	633b      	str	r3, [r7, #48]	; 0x30
 8007518:	6838      	ldr	r0, [r7, #0]
 800751a:	f7fd fbae 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 800751e:	4603      	mov	r3, r0
 8007520:	63bb      	str	r3, [r7, #56]	; 0x38
 8007522:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007526:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800752a:	4611      	mov	r1, r2
 800752c:	4618      	mov	r0, r3
 800752e:	f7fd fbb1 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d022      	beq.n	800757e <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1ee>
	{
		strcat(packet,toCharArray(-ax));
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f103 0408 	add.w	r4, r3, #8
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	1d1a      	adds	r2, r3, #4
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8007548:	eef1 7a67 	vneg.f32	s15, s15
 800754c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007550:	ee17 1a90 	vmov	r1, s15
 8007554:	4610      	mov	r0, r2
 8007556:	f7fc fb85 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 800755a:	4603      	mov	r3, r0
 800755c:	4619      	mov	r1, r3
 800755e:	4620      	mov	r0, r4
 8007560:	f012 ff0c 	bl	801a37c <strcat>
		strcat(packet,",");
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f103 0408 	add.w	r4, r3, #8
 800756a:	4620      	mov	r0, r4
 800756c:	f7f8 fe30 	bl	80001d0 <strlen>
 8007570:	4603      	mov	r3, r0
 8007572:	4423      	add	r3, r4
 8007574:	4978      	ldr	r1, [pc, #480]	; (8007758 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 8007576:	461a      	mov	r2, r3
 8007578:	460b      	mov	r3, r1
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AY)!=senorsList.end())
 800757e:	2307      	movs	r3, #7
 8007580:	643b      	str	r3, [r7, #64]	; 0x40
 8007582:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007586:	4619      	mov	r1, r3
 8007588:	6838      	ldr	r0, [r7, #0]
 800758a:	f7fd fb5d 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 800758e:	4603      	mov	r3, r0
 8007590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007592:	6838      	ldr	r0, [r7, #0]
 8007594:	f7fd fb71 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8007598:	4603      	mov	r3, r0
 800759a:	647b      	str	r3, [r7, #68]	; 0x44
 800759c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80075a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075a4:	4611      	mov	r1, r2
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fd fb74 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d020      	beq.n	80075f4 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x264>
	{
		strcat(packet,toCharArray(ay));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f103 0408 	add.w	r4, r3, #8
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	1d1a      	adds	r2, r3, #4
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80075c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075c6:	ee17 1a90 	vmov	r1, s15
 80075ca:	4610      	mov	r0, r2
 80075cc:	f7fc fb4a 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 80075d0:	4603      	mov	r3, r0
 80075d2:	4619      	mov	r1, r3
 80075d4:	4620      	mov	r0, r4
 80075d6:	f012 fed1 	bl	801a37c <strcat>
		strcat(packet,",");
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f103 0408 	add.w	r4, r3, #8
 80075e0:	4620      	mov	r0, r4
 80075e2:	f7f8 fdf5 	bl	80001d0 <strlen>
 80075e6:	4603      	mov	r3, r0
 80075e8:	4423      	add	r3, r4
 80075ea:	495b      	ldr	r1, [pc, #364]	; (8007758 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 80075ec:	461a      	mov	r2, r3
 80075ee:	460b      	mov	r3, r1
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AZ)!=senorsList.end())
 80075f4:	2308      	movs	r3, #8
 80075f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80075fc:	4619      	mov	r1, r3
 80075fe:	6838      	ldr	r0, [r7, #0]
 8007600:	f7fd fb22 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8007604:	4603      	mov	r3, r0
 8007606:	64bb      	str	r3, [r7, #72]	; 0x48
 8007608:	6838      	ldr	r0, [r7, #0]
 800760a:	f7fd fb36 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 800760e:	4603      	mov	r3, r0
 8007610:	653b      	str	r3, [r7, #80]	; 0x50
 8007612:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007616:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800761a:	4611      	mov	r1, r2
 800761c:	4618      	mov	r0, r3
 800761e:	f7fd fb39 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d020      	beq.n	800766a <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2da>
	{
		strcat(packet,toCharArray(az));
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f103 0408 	add.w	r4, r3, #8
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	1d1a      	adds	r2, r3, #4
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8007638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800763c:	ee17 1a90 	vmov	r1, s15
 8007640:	4610      	mov	r0, r2
 8007642:	f7fc fb0f 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 8007646:	4603      	mov	r3, r0
 8007648:	4619      	mov	r1, r3
 800764a:	4620      	mov	r0, r4
 800764c:	f012 fe96 	bl	801a37c <strcat>
		strcat(packet,",");
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f103 0408 	add.w	r4, r3, #8
 8007656:	4620      	mov	r0, r4
 8007658:	f7f8 fdba 	bl	80001d0 <strlen>
 800765c:	4603      	mov	r3, r0
 800765e:	4423      	add	r3, r4
 8007660:	493d      	ldr	r1, [pc, #244]	; (8007758 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 8007662:	461a      	mov	r2, r3
 8007664:	460b      	mov	r3, r1
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_AX)!=senorsList.end())
 800766a:	2309      	movs	r3, #9
 800766c:	65bb      	str	r3, [r7, #88]	; 0x58
 800766e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007672:	4619      	mov	r1, r3
 8007674:	6838      	ldr	r0, [r7, #0]
 8007676:	f7fd fae7 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 800767a:	4603      	mov	r3, r0
 800767c:	657b      	str	r3, [r7, #84]	; 0x54
 800767e:	6838      	ldr	r0, [r7, #0]
 8007680:	f7fd fafb 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8007684:	4603      	mov	r3, r0
 8007686:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007688:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800768c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007690:	4611      	mov	r1, r2
 8007692:	4618      	mov	r0, r3
 8007694:	f7fd fafe 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d020      	beq.n	80076e0 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x350>
	{
		strcat(packet,toCharArray(max_ax_dt));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f103 0408 	add.w	r4, r3, #8
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	1d1a      	adds	r2, r3, #4
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 80076ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076b2:	ee17 1a90 	vmov	r1, s15
 80076b6:	4610      	mov	r0, r2
 80076b8:	f7fc fad4 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 80076bc:	4603      	mov	r3, r0
 80076be:	4619      	mov	r1, r3
 80076c0:	4620      	mov	r0, r4
 80076c2:	f012 fe5b 	bl	801a37c <strcat>
		strcat(packet,",");
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f103 0408 	add.w	r4, r3, #8
 80076cc:	4620      	mov	r0, r4
 80076ce:	f7f8 fd7f 	bl	80001d0 <strlen>
 80076d2:	4603      	mov	r3, r0
 80076d4:	4423      	add	r3, r4
 80076d6:	4920      	ldr	r1, [pc, #128]	; (8007758 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 80076d8:	461a      	mov	r2, r3
 80076da:	460b      	mov	r3, r1
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_AY)!=senorsList.end())
 80076e0:	230a      	movs	r3, #10
 80076e2:	667b      	str	r3, [r7, #100]	; 0x64
 80076e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80076e8:	4619      	mov	r1, r3
 80076ea:	6838      	ldr	r0, [r7, #0]
 80076ec:	f7fd faac 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80076f0:	4603      	mov	r3, r0
 80076f2:	663b      	str	r3, [r7, #96]	; 0x60
 80076f4:	6838      	ldr	r0, [r7, #0]
 80076f6:	f7fd fac0 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80076fa:	4603      	mov	r3, r0
 80076fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80076fe:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007702:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007706:	4611      	mov	r1, r2
 8007708:	4618      	mov	r0, r3
 800770a:	f7fd fac3 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d023      	beq.n	800775c <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3cc>
	{
		strcat(packet,toCharArray(max_ay_dt));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f103 0408 	add.w	r4, r3, #8
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	1d1a      	adds	r2, r3, #4
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8007724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007728:	ee17 1a90 	vmov	r1, s15
 800772c:	4610      	mov	r0, r2
 800772e:	f7fc fa99 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 8007732:	4603      	mov	r3, r0
 8007734:	4619      	mov	r1, r3
 8007736:	4620      	mov	r0, r4
 8007738:	f012 fe20 	bl	801a37c <strcat>
		strcat(packet,",");
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f103 0408 	add.w	r4, r3, #8
 8007742:	4620      	mov	r0, r4
 8007744:	f7f8 fd44 	bl	80001d0 <strlen>
 8007748:	4603      	mov	r3, r0
 800774a:	4423      	add	r3, r4
 800774c:	4902      	ldr	r1, [pc, #8]	; (8007758 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 800774e:	461a      	mov	r2, r3
 8007750:	460b      	mov	r3, r1
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	8013      	strh	r3, [r2, #0]
 8007756:	e001      	b.n	800775c <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3cc>
 8007758:	0801a548 	.word	0x0801a548
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_AZ)!=senorsList.end())
 800775c:	230b      	movs	r3, #11
 800775e:	673b      	str	r3, [r7, #112]	; 0x70
 8007760:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007764:	4619      	mov	r1, r3
 8007766:	6838      	ldr	r0, [r7, #0]
 8007768:	f7fd fa6e 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 800776c:	4603      	mov	r3, r0
 800776e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007770:	6838      	ldr	r0, [r7, #0]
 8007772:	f7fd fa82 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8007776:	4603      	mov	r3, r0
 8007778:	677b      	str	r3, [r7, #116]	; 0x74
 800777a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800777e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007782:	4611      	mov	r1, r2
 8007784:	4618      	mov	r0, r3
 8007786:	f7fd fa85 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d020      	beq.n	80077d2 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x442>
	{
		strcat(packet,toCharArray(max_az_dt));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f103 0408 	add.w	r4, r3, #8
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	1d1a      	adds	r2, r3, #4
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 80077a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077a4:	ee17 1a90 	vmov	r1, s15
 80077a8:	4610      	mov	r0, r2
 80077aa:	f7fc fa5b 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 80077ae:	4603      	mov	r3, r0
 80077b0:	4619      	mov	r1, r3
 80077b2:	4620      	mov	r0, r4
 80077b4:	f012 fde2 	bl	801a37c <strcat>
		strcat(packet,",");
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f103 0408 	add.w	r4, r3, #8
 80077be:	4620      	mov	r0, r4
 80077c0:	f7f8 fd06 	bl	80001d0 <strlen>
 80077c4:	4603      	mov	r3, r0
 80077c6:	4423      	add	r3, r4
 80077c8:	4905      	ldr	r1, [pc, #20]	; (80077e0 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x450>)
 80077ca:	461a      	mov	r2, r3
 80077cc:	460b      	mov	r3, r1
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	3308      	adds	r3, #8
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	377c      	adds	r7, #124	; 0x7c
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd90      	pop	{r4, r7, pc}
 80077de:	bf00      	nop
 80077e0:	0801a548 	.word	0x0801a548

080077e4 <_ZThn4_N9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	void checkCriticalState();
	void checkCrashState();
public:

	void SPI_write(uint8_t reg,uint8_t data);
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 80077e4:	f1a0 0004 	sub.w	r0, r0, #4
 80077e8:	f7ff bdd2 	b.w	8007390 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>

080077ec <_ZN9ICM42688P6updateEv>:

void ICM42688P::update()
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
	uint8_t axL = SPI_read(ACCEL_DATA_X0);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3304      	adds	r3, #4
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2120      	movs	r1, #32
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	4798      	blx	r3
 8007802:	4603      	mov	r3, r0
 8007804:	75fb      	strb	r3, [r7, #23]
	uint8_t axH = SPI_read(ACCEL_DATA_X1);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3304      	adds	r3, #4
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	211f      	movs	r1, #31
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	4798      	blx	r3
 8007814:	4603      	mov	r3, r0
 8007816:	75bb      	strb	r3, [r7, #22]
	uint8_t ayL = SPI_read(ACCEL_DATA_Y0);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3304      	adds	r3, #4
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2122      	movs	r1, #34	; 0x22
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	4798      	blx	r3
 8007826:	4603      	mov	r3, r0
 8007828:	757b      	strb	r3, [r7, #21]
	uint8_t ayH = SPI_read(ACCEL_DATA_Y1);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3304      	adds	r3, #4
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2121      	movs	r1, #33	; 0x21
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	4798      	blx	r3
 8007838:	4603      	mov	r3, r0
 800783a:	753b      	strb	r3, [r7, #20]
	uint8_t azL = SPI_read(ACCEL_DATA_Z0);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3304      	adds	r3, #4
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2124      	movs	r1, #36	; 0x24
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	4798      	blx	r3
 800784a:	4603      	mov	r3, r0
 800784c:	74fb      	strb	r3, [r7, #19]
	uint8_t azH = SPI_read(ACCEL_DATA_Z1);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3304      	adds	r3, #4
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2123      	movs	r1, #35	; 0x23
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	4798      	blx	r3
 800785c:	4603      	mov	r3, r0
 800785e:	74bb      	strb	r3, [r7, #18]

	uint8_t gxL = SPI_read(GYRO_DATA_X0);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3304      	adds	r3, #4
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2126      	movs	r1, #38	; 0x26
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	4798      	blx	r3
 800786e:	4603      	mov	r3, r0
 8007870:	747b      	strb	r3, [r7, #17]
	uint8_t gxH = SPI_read(GYRO_DATA_X1);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3304      	adds	r3, #4
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2125      	movs	r1, #37	; 0x25
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	4798      	blx	r3
 8007880:	4603      	mov	r3, r0
 8007882:	743b      	strb	r3, [r7, #16]
	uint8_t gyL = SPI_read(GYRO_DATA_Y0);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3304      	adds	r3, #4
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2128      	movs	r1, #40	; 0x28
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	4798      	blx	r3
 8007892:	4603      	mov	r3, r0
 8007894:	73fb      	strb	r3, [r7, #15]
	uint8_t gyH = SPI_read(GYRO_DATA_Y1);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3304      	adds	r3, #4
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2127      	movs	r1, #39	; 0x27
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	4798      	blx	r3
 80078a4:	4603      	mov	r3, r0
 80078a6:	73bb      	strb	r3, [r7, #14]
	uint8_t gzL = SPI_read(GYRO_DATA_Z0);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3304      	adds	r3, #4
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	212a      	movs	r1, #42	; 0x2a
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	4798      	blx	r3
 80078b6:	4603      	mov	r3, r0
 80078b8:	737b      	strb	r3, [r7, #13]
	uint8_t gzH = SPI_read(GYRO_DATA_Z1);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3304      	adds	r3, #4
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2129      	movs	r1, #41	; 0x29
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	4798      	blx	r3
 80078c8:	4603      	mov	r3, r0
 80078ca:	733b      	strb	r3, [r7, #12]

	uint8_t tempL = SPI_read(TEMP_DATA0);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3304      	adds	r3, #4
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	211e      	movs	r1, #30
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	4798      	blx	r3
 80078da:	4603      	mov	r3, r0
 80078dc:	72fb      	strb	r3, [r7, #11]
	uint8_t tempH = SPI_read(TEMP_DATA1);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	3304      	adds	r3, #4
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	211d      	movs	r1, #29
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	4798      	blx	r3
 80078ec:	4603      	mov	r3, r0
 80078ee:	72bb      	strb	r3, [r7, #10]

	this->raw_ax = (static_cast<float>(((int16_t)(((int16_t)axH<<8) | axL))) - this->axOffset);// * this->axScale;
 80078f0:	7dbb      	ldrb	r3, [r7, #22]
 80078f2:	021b      	lsls	r3, r3, #8
 80078f4:	b21a      	sxth	r2, r3
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
 80078f8:	b21b      	sxth	r3, r3
 80078fa:	4313      	orrs	r3, r2
 80078fc:	b21b      	sxth	r3, r3
 80078fe:	ee07 3a90 	vmov	s15, r3
 8007902:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800790c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	this->raw_ay = (static_cast<float>(((int16_t)(((int16_t)ayH<<8) | ayL))) - this->ayOffset);// * this->ayScale;
 8007916:	7d3b      	ldrb	r3, [r7, #20]
 8007918:	021b      	lsls	r3, r3, #8
 800791a:	b21a      	sxth	r2, r3
 800791c:	7d7b      	ldrb	r3, [r7, #21]
 800791e:	b21b      	sxth	r3, r3
 8007920:	4313      	orrs	r3, r2
 8007922:	b21b      	sxth	r3, r3
 8007924:	ee07 3a90 	vmov	s15, r3
 8007928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8007932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	this->raw_az = (static_cast<float>(((int16_t)(((int16_t)azH<<8) | azL))) - this->azOffset);// * this->azScale;
 800793c:	7cbb      	ldrb	r3, [r7, #18]
 800793e:	021b      	lsls	r3, r3, #8
 8007940:	b21a      	sxth	r2, r3
 8007942:	7cfb      	ldrb	r3, [r7, #19]
 8007944:	b21b      	sxth	r3, r3
 8007946:	4313      	orrs	r3, r2
 8007948:	b21b      	sxth	r3, r3
 800794a:	ee07 3a90 	vmov	s15, r3
 800794e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8007958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->raw_gx = static_cast<float>((int16_t)(((int16_t)gxH<<8) | gxL)) - this->gxDrift;
 8007962:	7c3b      	ldrb	r3, [r7, #16]
 8007964:	021b      	lsls	r3, r3, #8
 8007966:	b21a      	sxth	r2, r3
 8007968:	7c7b      	ldrb	r3, [r7, #17]
 800796a:	b21b      	sxth	r3, r3
 800796c:	4313      	orrs	r3, r2
 800796e:	b21b      	sxth	r3, r3
 8007970:	ee07 3a90 	vmov	s15, r3
 8007974:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800797e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	this->raw_gy = static_cast<float>((int16_t)(((int16_t)gyH<<8) | gyL)) - this->gyDrift;
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	021b      	lsls	r3, r3, #8
 800798c:	b21a      	sxth	r2, r3
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	b21b      	sxth	r3, r3
 8007992:	4313      	orrs	r3, r2
 8007994:	b21b      	sxth	r3, r3
 8007996:	ee07 3a90 	vmov	s15, r3
 800799a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 80079a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	this->raw_gz = static_cast<float>((int16_t)(((int16_t)gzH<<8) | gzL)) - this->gzDrift;
 80079ae:	7b3b      	ldrb	r3, [r7, #12]
 80079b0:	021b      	lsls	r3, r3, #8
 80079b2:	b21a      	sxth	r2, r3
 80079b4:	7b7b      	ldrb	r3, [r7, #13]
 80079b6:	b21b      	sxth	r3, r3
 80079b8:	4313      	orrs	r3, r2
 80079ba:	b21b      	sxth	r3, r3
 80079bc:	ee07 3a90 	vmov	s15, r3
 80079c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80079ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	this->temp = static_cast<float>((int16_t)(((int16_t)tempH<<8) | tempL)) / 132.48F + 25.0F;
 80079d4:	7abb      	ldrb	r3, [r7, #10]
 80079d6:	021b      	lsls	r3, r3, #8
 80079d8:	b21a      	sxth	r2, r3
 80079da:	7afb      	ldrb	r3, [r7, #11]
 80079dc:	b21b      	sxth	r3, r3
 80079de:	4313      	orrs	r3, r2
 80079e0:	b21b      	sxth	r3, r3
 80079e2:	ee07 3a90 	vmov	s15, r3
 80079e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80079ea:	eddf 6a13 	vldr	s13, [pc, #76]	; 8007a38 <_ZN9ICM42688P6updateEv+0x24c>
 80079ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80079f2:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80079f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

	this->toEuler();
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f915 	bl	8007c30 <_ZN9ICM42688P7toEulerEv>

	this->checkCrashState();
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f84a 	bl	8007aa0 <_ZN9ICM42688P15checkCrashStateEv>
	this->checkCriticalState();
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f815 	bl	8007a3c <_ZN9ICM42688P18checkCriticalStateEv>

	this->_rollPID.update();
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a16:	4618      	mov	r0, r3
 8007a18:	f001 f982 	bl	8008d20 <_ZN11PID_Control6updateEv>
	this->_pitchPID.update();
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a20:	4618      	mov	r0, r3
 8007a22:	f001 f97d 	bl	8008d20 <_ZN11PID_Control6updateEv>
	this->_yawPID.update();
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f001 f978 	bl	8008d20 <_ZN11PID_Control6updateEv>
}
 8007a30:	bf00      	nop
 8007a32:	3718      	adds	r7, #24
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	43047ae1 	.word	0x43047ae1

08007a3c <_ZN9ICM42688P18checkCriticalStateEv>:

void ICM42688P::checkCriticalState()
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
	if (abs(this->euler_x) >=criticalStateAngleThreshold || abs(this->euler_y) >=criticalStateAngleThreshold)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8007a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8007a4e:	f7ff fa6c 	bl	8006f2a <_ZSt3absf>
 8007a52:	eef0 7a40 	vmov.f32	s15, s0
 8007a56:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a62:	da0f      	bge.n	8007a84 <_ZN9ICM42688P18checkCriticalStateEv+0x48>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8007a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8007a6e:	f7ff fa5c 	bl	8006f2a <_ZSt3absf>
 8007a72:	eef0 7a40 	vmov.f32	s15, s0
 8007a76:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007a7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a82:	db01      	blt.n	8007a88 <_ZN9ICM42688P18checkCriticalStateEv+0x4c>
 8007a84:	2301      	movs	r3, #1
 8007a86:	e000      	b.n	8007a8a <_ZN9ICM42688P18checkCriticalStateEv+0x4e>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <_ZN9ICM42688P18checkCriticalStateEv+0x5a>
	{
		this->criticalState = true;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
	}
}
 8007a96:	bf00      	nop
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <_ZN9ICM42688P15checkCrashStateEv>:

void ICM42688P::checkCrashState()
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
	if (this->prev_raw_ax == 0.0F)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8007aae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab6:	d105      	bne.n	8007ac4 <_ZN9ICM42688P15checkCrashStateEv+0x24>
		this->prev_raw_ax = this->raw_ax;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	if (this->prev_raw_ay == 0.0F)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8007aca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad2:	d105      	bne.n	8007ae0 <_ZN9ICM42688P15checkCrashStateEv+0x40>
		this->prev_raw_ay = this->raw_ay;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	if (this->prev_raw_az == 0.0F)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8007ae6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aee:	d105      	bne.n	8007afc <_ZN9ICM42688P15checkCrashStateEv+0x5c>
		this->prev_raw_az = this->raw_az;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	float ax_dt = fabs(this->raw_ax-this->prev_raw_ax);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8007b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8007b10:	f7ff fa2f 	bl	8006f72 <_ZSt4fabsf>
 8007b14:	ed87 0a05 	vstr	s0, [r7, #20]
	float ay_dt = fabs(this->raw_ay-this->prev_raw_ay);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8007b24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b28:	eeb0 0a67 	vmov.f32	s0, s15
 8007b2c:	f7ff fa21 	bl	8006f72 <_ZSt4fabsf>
 8007b30:	ed87 0a04 	vstr	s0, [r7, #16]
	float az_dt = fabs(this->raw_az-this->prev_raw_az);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8007b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b44:	eeb0 0a67 	vmov.f32	s0, s15
 8007b48:	f7ff fa13 	bl	8006f72 <_ZSt4fabsf>
 8007b4c:	ed87 0a03 	vstr	s0, [r7, #12]

	if (ax_dt > constCrashAccDtThreshold ||
 8007b50:	edd7 7a05 	vldr	s15, [r7, #20]
 8007b54:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8007c10 <_ZN9ICM42688P15checkCrashStateEv+0x170>
 8007b58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b60:	dc11      	bgt.n	8007b86 <_ZN9ICM42688P15checkCrashStateEv+0xe6>
 8007b62:	edd7 7a04 	vldr	s15, [r7, #16]
 8007b66:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8007c10 <_ZN9ICM42688P15checkCrashStateEv+0x170>
 8007b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b72:	dc08      	bgt.n	8007b86 <_ZN9ICM42688P15checkCrashStateEv+0xe6>
			ay_dt > constCrashAccDtThreshold ||
 8007b74:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b78:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8007c10 <_ZN9ICM42688P15checkCrashStateEv+0x170>
 8007b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b84:	dd03      	ble.n	8007b8e <_ZN9ICM42688P15checkCrashStateEv+0xee>
			az_dt > constCrashAccDtThreshold)
	{
		this->crashState = true;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	}

	if (ax_dt > max_ax_dt)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8007b94:	ed97 7a05 	vldr	s14, [r7, #20]
 8007b98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba0:	dd03      	ble.n	8007baa <_ZN9ICM42688P15checkCrashStateEv+0x10a>
		max_ax_dt = ax_dt;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	if (ay_dt > max_ay_dt)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8007bb0:	ed97 7a04 	vldr	s14, [r7, #16]
 8007bb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bbc:	dd03      	ble.n	8007bc6 <_ZN9ICM42688P15checkCrashStateEv+0x126>
		max_ay_dt = ay_dt;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	if (az_dt > max_az_dt)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8007bcc:	ed97 7a03 	vldr	s14, [r7, #12]
 8007bd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd8:	dd03      	ble.n	8007be2 <_ZN9ICM42688P15checkCrashStateEv+0x142>
		max_az_dt = az_dt;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	this->prev_raw_ax=this->raw_ax;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	this->prev_raw_ay=this->raw_ay;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	this->prev_raw_az=this->raw_az;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
}
 8007c06:	bf00      	nop
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	471c4000 	.word	0x471c4000

08007c14 <_ZN9ICM42688P23isCriticalStateDetectedEv>:

bool ICM42688P::isCriticalStateDetected()
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
	return this->criticalState;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
	...

08007c30 <_ZN9ICM42688P7toEulerEv>:
	return this->crashState;
}


void ICM42688P::toEuler()
{
 8007c30:	b5b0      	push	{r4, r5, r7, lr}
 8007c32:	ed2d 8b02 	vpush	{d8}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
	this->gx = this->gx + this->raw_gx*(DT/GYRO_FULLSCALE);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	edd3 5a16 	vldr	s11, [r3, #88]	; 0x58
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8007c54:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007c58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	this->gy = this->gy + this->raw_gy*(DT/GYRO_FULLSCALE);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	edd3 5a16 	vldr	s11, [r3, #88]	; 0x58
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8007c7e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007c82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	this->gz = this->gz + this->raw_gz*(DT/GYRO_FULLSCALE);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	edd3 5a16 	vldr	s11, [r3, #88]	; 0x58
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8007ca8:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007cac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

	this->euler_x = this->euler_x + this->raw_gx*(DT/GYRO_FULLSCALE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	edd3 5a16 	vldr	s11, [r3, #88]	; 0x58
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8007cd2:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007cd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->euler_y = this->euler_y + this->raw_gy*(DT/GYRO_FULLSCALE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	edd3 5a16 	vldr	s11, [r3, #88]	; 0x58
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8007cfc:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007d00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->euler_z = this->euler_z + this->raw_gz*(DT/GYRO_FULLSCALE);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	edd3 5a16 	vldr	s11, [r3, #88]	; 0x58
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8007d26:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007d2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0

	this->ax = atan2(this->raw_ax,sqrt(this->raw_ay*this->raw_ay + this->raw_az*this->raw_az))*RADIANS_TO_DEGREES;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	ed93 8a26 	vldr	s16, [r3, #152]	; 0x98
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8007d4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8007d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d62:	eeb0 0a67 	vmov.f32	s0, s15
 8007d66:	f7ff f914 	bl	8006f92 <_ZSt4sqrtf>
 8007d6a:	eef0 7a40 	vmov.f32	s15, s0
 8007d6e:	eef0 0a67 	vmov.f32	s1, s15
 8007d72:	eeb0 0a48 	vmov.f32	s0, s16
 8007d76:	f7ff f8e8 	bl	8006f4a <_ZSt5atan2ff>
 8007d7a:	eeb0 7a40 	vmov.f32	s14, s0
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	this->ay = atan2(this->raw_ay,sqrt(this->raw_ax*this->raw_ax + this->raw_az*this->raw_az))*RADIANS_TO_DEGREES;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	ed93 8a27 	vldr	s16, [r3, #156]	; 0x9c
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8007da0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8007db0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007db8:	eeb0 0a67 	vmov.f32	s0, s15
 8007dbc:	f7ff f8e9 	bl	8006f92 <_ZSt4sqrtf>
 8007dc0:	eef0 7a40 	vmov.f32	s15, s0
 8007dc4:	eef0 0a67 	vmov.f32	s1, s15
 8007dc8:	eeb0 0a48 	vmov.f32	s0, s16
 8007dcc:	f7ff f8bd 	bl	8006f4a <_ZSt5atan2ff>
 8007dd0:	eeb0 7a40 	vmov.f32	s14, s0
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	this->az = atan2(this->raw_az,sqrt(this->raw_ax*this->raw_ax + this->raw_ay*this->raw_ay))*RADIANS_TO_DEGREES -90.0F;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	ed93 8a28 	vldr	s16, [r3, #160]	; 0xa0
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8007df6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8007e06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e0e:	eeb0 0a67 	vmov.f32	s0, s15
 8007e12:	f7ff f8be 	bl	8006f92 <_ZSt4sqrtf>
 8007e16:	eef0 7a40 	vmov.f32	s15, s0
 8007e1a:	eef0 0a67 	vmov.f32	s1, s15
 8007e1e:	eeb0 0a48 	vmov.f32	s0, s16
 8007e22:	f7ff f892 	bl	8006f4a <_ZSt5atan2ff>
 8007e26:	eeb0 7a40 	vmov.f32	s14, s0
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e34:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007f08 <_ZN9ICM42688P7toEulerEv+0x2d8>
 8007e38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

	this->euler_x = this->euler_x*0.9999+this->ay*0.0001;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7f8 fb2d 	bl	80004a8 <__aeabi_f2d>
 8007e4e:	a32a      	add	r3, pc, #168	; (adr r3, 8007ef8 <_ZN9ICM42688P7toEulerEv+0x2c8>)
 8007e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e54:	f7f8 fb80 	bl	8000558 <__aeabi_dmul>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4614      	mov	r4, r2
 8007e5e:	461d      	mov	r5, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7f8 fb1e 	bl	80004a8 <__aeabi_f2d>
 8007e6c:	a324      	add	r3, pc, #144	; (adr r3, 8007f00 <_ZN9ICM42688P7toEulerEv+0x2d0>)
 8007e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e72:	f7f8 fb71 	bl	8000558 <__aeabi_dmul>
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	f7f8 f9b5 	bl	80001ec <__adddf3>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	4610      	mov	r0, r2
 8007e88:	4619      	mov	r1, r3
 8007e8a:	f7f8 fe3d 	bl	8000b08 <__aeabi_d2f>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	this->euler_y = this->euler_y*0.9999-this->ax*0.0001;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7f8 fb03 	bl	80004a8 <__aeabi_f2d>
 8007ea2:	a315      	add	r3, pc, #84	; (adr r3, 8007ef8 <_ZN9ICM42688P7toEulerEv+0x2c8>)
 8007ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea8:	f7f8 fb56 	bl	8000558 <__aeabi_dmul>
 8007eac:	4602      	mov	r2, r0
 8007eae:	460b      	mov	r3, r1
 8007eb0:	4614      	mov	r4, r2
 8007eb2:	461d      	mov	r5, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7f8 faf4 	bl	80004a8 <__aeabi_f2d>
 8007ec0:	a30f      	add	r3, pc, #60	; (adr r3, 8007f00 <_ZN9ICM42688P7toEulerEv+0x2d0>)
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	f7f8 fb47 	bl	8000558 <__aeabi_dmul>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	460b      	mov	r3, r1
 8007ece:	4620      	mov	r0, r4
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	f7f8 f989 	bl	80001e8 <__aeabi_dsub>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	4610      	mov	r0, r2
 8007edc:	4619      	mov	r1, r3
 8007ede:	f7f8 fe13 	bl	8000b08 <__aeabi_d2f>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 8007eea:	bf00      	nop
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	ecbd 8b02 	vpop	{d8}
 8007ef4:	bdb0      	pop	{r4, r5, r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	48e8a71e 	.word	0x48e8a71e
 8007efc:	3fefff2e 	.word	0x3fefff2e
 8007f00:	eb1c432d 	.word	0xeb1c432d
 8007f04:	3f1a36e2 	.word	0x3f1a36e2
 8007f08:	42b40000 	.word	0x42b40000

08007f0c <_ZN9ICM42688P9getEulerXEv>:
	this->computeAccOffset(count);
	this->buzz->beep(200U,100U,1U);
}

float ICM42688P::getEulerX()
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
	return this->euler_x;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f1a:	ee07 3a90 	vmov	s15, r3
}
 8007f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <_ZN9ICM42688P12getEulerXrefEv>:

float& ICM42688P::getEulerXref()
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
	return this->euler_x;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	33a8      	adds	r3, #168	; 0xa8
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <_ZN9ICM42688P9getEulerYEv>:

float ICM42688P::getEulerY()
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
	return this->euler_y;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f52:	ee07 3a90 	vmov	s15, r3
}
 8007f56:	eeb0 0a67 	vmov.f32	s0, s15
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <_ZN9ICM42688P12getEulerYrefEv>:

float& ICM42688P::getEulerYref()
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
	return this->euler_y;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	33ac      	adds	r3, #172	; 0xac
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <_ZN9ICM42688P12getEulerZrefEv>:
{
	return this->euler_z;
}

float& ICM42688P::getEulerZref()
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
	return this->euler_z;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	33b0      	adds	r3, #176	; 0xb0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <_ZN9ICM42688P9SPI_writeEhh>:
{
	return this->SPI_read(INT_STATUS);
}

void ICM42688P::SPI_write(uint8_t reg,uint8_t data)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	70fb      	strb	r3, [r7, #3]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(ICM_CS_PORT,ICM_CS_PIN,GPIO_PIN_RESET);
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	2120      	movs	r1, #32
 8007fa8:	480d      	ldr	r0, [pc, #52]	; (8007fe0 <_ZN9ICM42688P9SPI_writeEhh+0x4c>)
 8007faa:	f002 ff2b 	bl	800ae04 <HAL_GPIO_WritePin>
	this->spiTxBuff[0] = reg;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	78fa      	ldrb	r2, [r7, #3]
 8007fb2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	this->spiTxBuff[1] = data;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	78ba      	ldrb	r2, [r7, #2]
 8007fba:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	3370      	adds	r3, #112	; 0x70
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	4619      	mov	r1, r3
 8007fca:	f006 f8d3 	bl	800e174 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(ICM_CS_PORT,ICM_CS_PIN,GPIO_PIN_SET);
 8007fce:	2201      	movs	r2, #1
 8007fd0:	2120      	movs	r1, #32
 8007fd2:	4803      	ldr	r0, [pc, #12]	; (8007fe0 <_ZN9ICM42688P9SPI_writeEhh+0x4c>)
 8007fd4:	f002 ff16 	bl	800ae04 <HAL_GPIO_WritePin>
}
 8007fd8:	bf00      	nop
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	40020800 	.word	0x40020800

08007fe4 <_ZN9ICM42688P8SPI_readEh>:

uint8_t ICM42688P::SPI_read(uint8_t reg)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	460b      	mov	r3, r1
 8007fee:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(ICM_CS_PORT, ICM_CS_PIN, GPIO_PIN_RESET);
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	2120      	movs	r1, #32
 8007ff4:	4812      	ldr	r0, [pc, #72]	; (8008040 <_ZN9ICM42688P8SPI_readEh+0x5c>)
 8007ff6:	f002 ff05 	bl	800ae04 <HAL_GPIO_WritePin>
	this->spiTxBuff[0]=reg|0x80;
 8007ffa:	78fb      	ldrb	r3, [r7, #3]
 8007ffc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008000:	b2da      	uxtb	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

	HAL_SPI_Transmit_DMA(this->spi_port, (uint8_t*)spiTxBuff, 1);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3370      	adds	r3, #112	; 0x70
 8008010:	2201      	movs	r2, #1
 8008012:	4619      	mov	r1, r3
 8008014:	f006 f8ae 	bl	800e174 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(this->spi_port, (uint8_t*)spiRxBuff, 1);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	3372      	adds	r3, #114	; 0x72
 8008020:	2201      	movs	r2, #1
 8008022:	4619      	mov	r1, r3
 8008024:	f006 f95c 	bl	800e2e0 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(ICM_CS_PORT, ICM_CS_PIN, GPIO_PIN_SET);
 8008028:	2201      	movs	r2, #1
 800802a:	2120      	movs	r1, #32
 800802c:	4804      	ldr	r0, [pc, #16]	; (8008040 <_ZN9ICM42688P8SPI_readEh+0x5c>)
 800802e:	f002 fee9 	bl	800ae04 <HAL_GPIO_WritePin>

	return this->spiRxBuff[0];
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
}
 8008038:	4618      	mov	r0, r3
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	40020800 	.word	0x40020800

08008044 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef>:
 *      Author: Asus
 */

#include "LIS3MDLTR.hpp"

LIS3MDLTR::LIS3MDLTR(SPI_HandleTypeDef *spi_port):
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
	,z_mag {0}
	,z_angle {0}
	,x_raw {0}
	,y_raw {0}
	,z_raw {0}
	,TEMP_val {0}
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4618      	mov	r0, r3
 8008052:	f7fb fe39 	bl	8003cc8 <_ZN8SPI_ConnC1Ev>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	3304      	adds	r3, #4
 800805a:	4618      	mov	r0, r3
 800805c:	f7fb fe44 	bl	8003ce8 <_ZN15PrintableSensorC1Ev>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3340      	adds	r3, #64	; 0x40
 8008064:	4618      	mov	r0, r3
 8008066:	f7fb fe55 	bl	8003d14 <_ZN12CallsCounterC1Ev>
 800806a:	4a1f      	ldr	r2, [pc, #124]	; (80080e8 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef+0xa4>)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	4a1e      	ldr	r2, [pc, #120]	; (80080ec <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef+0xa8>)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	605a      	str	r2, [r3, #4]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	651a      	str	r2, [r3, #80]	; 0x50
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f04f 0200 	mov.w	r2, #0
 80080a2:	659a      	str	r2, [r3, #88]	; 0x58
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f04f 0200 	mov.w	r2, #0
 80080aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f04f 0200 	mov.w	r2, #0
 80080b2:	661a      	str	r2, [r3, #96]	; 0x60
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f04f 0200 	mov.w	r2, #0
 80080ba:	665a      	str	r2, [r3, #100]	; 0x64
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
{
}
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	0801a89c 	.word	0x0801a89c
 80080ec:	0801a8b0 	.word	0x0801a8b0

080080f0 <_ZN9LIS3MDLTR6updateEv>:
{
	return SPI_read(LIS_WHO_AM_I);
}

void LIS3MDLTR::update()
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
	uint8_t x_high=SPI_read(OUT_X_H);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3304      	adds	r3, #4
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2129      	movs	r1, #41	; 0x29
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	4798      	blx	r3
 8008106:	4603      	mov	r3, r0
 8008108:	73fb      	strb	r3, [r7, #15]
	uint8_t x_low=SPI_read(OUT_X_L);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3304      	adds	r3, #4
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2128      	movs	r1, #40	; 0x28
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	4798      	blx	r3
 8008118:	4603      	mov	r3, r0
 800811a:	73bb      	strb	r3, [r7, #14]
	uint8_t y_high=SPI_read(OUT_Y_H);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3304      	adds	r3, #4
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	212b      	movs	r1, #43	; 0x2b
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	4798      	blx	r3
 800812a:	4603      	mov	r3, r0
 800812c:	737b      	strb	r3, [r7, #13]
	uint8_t y_low=SPI_read(OUT_Y_L);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3304      	adds	r3, #4
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	212a      	movs	r1, #42	; 0x2a
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	4798      	blx	r3
 800813c:	4603      	mov	r3, r0
 800813e:	733b      	strb	r3, [r7, #12]
	uint8_t z_high=SPI_read(OUT_Z_H);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3304      	adds	r3, #4
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	212d      	movs	r1, #45	; 0x2d
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	4798      	blx	r3
 800814e:	4603      	mov	r3, r0
 8008150:	72fb      	strb	r3, [r7, #11]
	uint8_t z_low=SPI_read(OUT_Z_L);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3304      	adds	r3, #4
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	212c      	movs	r1, #44	; 0x2c
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	4798      	blx	r3
 8008160:	4603      	mov	r3, r0
 8008162:	72bb      	strb	r3, [r7, #10]
	uint8_t temp_high=SPI_read(TEMP_OUT_H);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3304      	adds	r3, #4
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	212f      	movs	r1, #47	; 0x2f
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	4798      	blx	r3
 8008172:	4603      	mov	r3, r0
 8008174:	727b      	strb	r3, [r7, #9]
	uint8_t temp_low=SPI_read(TEMP_OUT_L);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3304      	adds	r3, #4
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	212e      	movs	r1, #46	; 0x2e
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	4798      	blx	r3
 8008184:	4603      	mov	r3, r0
 8008186:	723b      	strb	r3, [r7, #8]

	x_raw = ((int16_t)x_high)<<8 | x_low;
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	021b      	lsls	r3, r3, #8
 800818c:	b21a      	sxth	r2, r3
 800818e:	7bbb      	ldrb	r3, [r7, #14]
 8008190:	b21b      	sxth	r3, r3
 8008192:	4313      	orrs	r3, r2
 8008194:	b21a      	sxth	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	y_raw = ((int16_t)y_high)<<8 | y_low;
 800819c:	7b7b      	ldrb	r3, [r7, #13]
 800819e:	021b      	lsls	r3, r3, #8
 80081a0:	b21a      	sxth	r2, r3
 80081a2:	7b3b      	ldrb	r3, [r7, #12]
 80081a4:	b21b      	sxth	r3, r3
 80081a6:	4313      	orrs	r3, r2
 80081a8:	b21a      	sxth	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	z_raw = ((int16_t)z_high)<<8 | z_low;
 80081b0:	7afb      	ldrb	r3, [r7, #11]
 80081b2:	021b      	lsls	r3, r3, #8
 80081b4:	b21a      	sxth	r2, r3
 80081b6:	7abb      	ldrb	r3, [r7, #10]
 80081b8:	b21b      	sxth	r3, r3
 80081ba:	4313      	orrs	r3, r2
 80081bc:	b21a      	sxth	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	TEMP_val = ((int16_t)temp_high)<<8 | temp_low;
 80081c4:	7a7b      	ldrb	r3, [r7, #9]
 80081c6:	021b      	lsls	r3, r3, #8
 80081c8:	b21a      	sxth	r2, r3
 80081ca:	7a3b      	ldrb	r3, [r7, #8]
 80081cc:	b21b      	sxth	r3, r3
 80081ce:	4313      	orrs	r3, r2
 80081d0:	b21a      	sxth	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
 80081d8:	bf00      	nop
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* LIS3MDLTR::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 80081e0:	b590      	push	{r4, r7, lr}
 80081e2:	b08d      	sub	sp, #52	; 0x34
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3308      	adds	r3, #8
 80081ee:	2200      	movs	r2, #0
 80081f0:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_X)!=senorsList.end())
 80081f2:	2310      	movs	r3, #16
 80081f4:	613b      	str	r3, [r7, #16]
 80081f6:	f107 0310 	add.w	r3, r7, #16
 80081fa:	4619      	mov	r1, r3
 80081fc:	6838      	ldr	r0, [r7, #0]
 80081fe:	f7fc fd23 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008202:	4603      	mov	r3, r0
 8008204:	60fb      	str	r3, [r7, #12]
 8008206:	6838      	ldr	r0, [r7, #0]
 8008208:	f7fc fd37 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 800820c:	4603      	mov	r3, r0
 800820e:	617b      	str	r3, [r7, #20]
 8008210:	f107 0214 	add.w	r2, r7, #20
 8008214:	f107 030c 	add.w	r3, r7, #12
 8008218:	4611      	mov	r1, r2
 800821a:	4618      	mov	r0, r3
 800821c:	f7fc fd3a 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d01d      	beq.n	8008262 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x82>
	{
		strcat(packet,toCharArray(x_raw));
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f103 0408 	add.w	r4, r3, #8
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	1d1a      	adds	r2, r3, #4
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8008236:	4619      	mov	r1, r3
 8008238:	4610      	mov	r0, r2
 800823a:	f7fb fd13 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 800823e:	4603      	mov	r3, r0
 8008240:	4619      	mov	r1, r3
 8008242:	4620      	mov	r0, r4
 8008244:	f012 f89a 	bl	801a37c <strcat>
		strcat(packet,",");
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f103 0408 	add.w	r4, r3, #8
 800824e:	4620      	mov	r0, r4
 8008250:	f7f7 ffbe 	bl	80001d0 <strlen>
 8008254:	4603      	mov	r3, r0
 8008256:	4423      	add	r3, r4
 8008258:	493d      	ldr	r1, [pc, #244]	; (8008350 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 800825a:	461a      	mov	r2, r3
 800825c:	460b      	mov	r3, r1
 800825e:	881b      	ldrh	r3, [r3, #0]
 8008260:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_Y)!=senorsList.end())
 8008262:	2311      	movs	r3, #17
 8008264:	61fb      	str	r3, [r7, #28]
 8008266:	f107 031c 	add.w	r3, r7, #28
 800826a:	4619      	mov	r1, r3
 800826c:	6838      	ldr	r0, [r7, #0]
 800826e:	f7fc fceb 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008272:	4603      	mov	r3, r0
 8008274:	61bb      	str	r3, [r7, #24]
 8008276:	6838      	ldr	r0, [r7, #0]
 8008278:	f7fc fcff 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 800827c:	4603      	mov	r3, r0
 800827e:	623b      	str	r3, [r7, #32]
 8008280:	f107 0220 	add.w	r2, r7, #32
 8008284:	f107 0318 	add.w	r3, r7, #24
 8008288:	4611      	mov	r1, r2
 800828a:	4618      	mov	r0, r3
 800828c:	f7fc fd02 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d01d      	beq.n	80082d2 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0xf2>
	{
		strcat(packet,toCharArray(y_raw));
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f103 0408 	add.w	r4, r3, #8
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	1d1a      	adds	r2, r3, #4
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 80082a6:	4619      	mov	r1, r3
 80082a8:	4610      	mov	r0, r2
 80082aa:	f7fb fcdb 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 80082ae:	4603      	mov	r3, r0
 80082b0:	4619      	mov	r1, r3
 80082b2:	4620      	mov	r0, r4
 80082b4:	f012 f862 	bl	801a37c <strcat>
		strcat(packet,",");
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f103 0408 	add.w	r4, r3, #8
 80082be:	4620      	mov	r0, r4
 80082c0:	f7f7 ff86 	bl	80001d0 <strlen>
 80082c4:	4603      	mov	r3, r0
 80082c6:	4423      	add	r3, r4
 80082c8:	4921      	ldr	r1, [pc, #132]	; (8008350 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 80082ca:	461a      	mov	r2, r3
 80082cc:	460b      	mov	r3, r1
 80082ce:	881b      	ldrh	r3, [r3, #0]
 80082d0:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_Z)!=senorsList.end())
 80082d2:	2312      	movs	r3, #18
 80082d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80082d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082da:	4619      	mov	r1, r3
 80082dc:	6838      	ldr	r0, [r7, #0]
 80082de:	f7fc fcb3 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80082e2:	4603      	mov	r3, r0
 80082e4:	627b      	str	r3, [r7, #36]	; 0x24
 80082e6:	6838      	ldr	r0, [r7, #0]
 80082e8:	f7fc fcc7 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80082ec:	4603      	mov	r3, r0
 80082ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082f0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80082f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082f8:	4611      	mov	r1, r2
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7fc fcca 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d01d      	beq.n	8008342 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x162>
	{
		strcat(packet,toCharArray(z_raw));
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f103 0408 	add.w	r4, r3, #8
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	1d1a      	adds	r2, r3, #4
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8008316:	4619      	mov	r1, r3
 8008318:	4610      	mov	r0, r2
 800831a:	f7fb fca3 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 800831e:	4603      	mov	r3, r0
 8008320:	4619      	mov	r1, r3
 8008322:	4620      	mov	r0, r4
 8008324:	f012 f82a 	bl	801a37c <strcat>
		strcat(packet,",");
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f103 0408 	add.w	r4, r3, #8
 800832e:	4620      	mov	r0, r4
 8008330:	f7f7 ff4e 	bl	80001d0 <strlen>
 8008334:	4603      	mov	r3, r0
 8008336:	4423      	add	r3, r4
 8008338:	4905      	ldr	r1, [pc, #20]	; (8008350 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 800833a:	461a      	mov	r2, r3
 800833c:	460b      	mov	r3, r1
 800833e:	881b      	ldrh	r3, [r3, #0]
 8008340:	8013      	strh	r3, [r2, #0]
	}


	return packet;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	3308      	adds	r3, #8
}
 8008346:	4618      	mov	r0, r3
 8008348:	3734      	adds	r7, #52	; 0x34
 800834a:	46bd      	mov	sp, r7
 800834c:	bd90      	pop	{r4, r7, pc}
 800834e:	bf00      	nop
 8008350:	0801a54c 	.word	0x0801a54c

08008354 <_ZThn4_N9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	void update();
	int16_t getX();
	int16_t getY();
	int16_t getZ();
	int16_t getTEMP();
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 8008354:	f1a0 0004 	sub.w	r0, r0, #4
 8008358:	f7ff bf42 	b.w	80081e0 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>

0800835c <_ZN9LIS3MDLTR11defaultInitEv>:

bool LIS3MDLTR::defaultInit()
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
	  this->SPI_write(CTRL_REG1,0b11111100);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	22fc      	movs	r2, #252	; 0xfc
 800836c:	2120      	movs	r1, #32
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	4798      	blx	r3
	  uint8_t ctrl1 = this->SPI_read(CTRL_REG1);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3304      	adds	r3, #4
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2120      	movs	r1, #32
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	4798      	blx	r3
 8008380:	4603      	mov	r3, r0
 8008382:	73fb      	strb	r3, [r7, #15]

	  SPI_write(CTRL_REG2,0b01100000);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2260      	movs	r2, #96	; 0x60
 800838c:	2121      	movs	r1, #33	; 0x21
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	4798      	blx	r3
	  uint8_t ctrl2 = SPI_read(CTRL_REG2);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	3304      	adds	r3, #4
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2121      	movs	r1, #33	; 0x21
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	4798      	blx	r3
 80083a0:	4603      	mov	r3, r0
 80083a2:	73bb      	strb	r3, [r7, #14]

	  SPI_write(CTRL_REG3,0b00000000);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2200      	movs	r2, #0
 80083ac:	2122      	movs	r1, #34	; 0x22
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	4798      	blx	r3
	  uint8_t ctrl3 = SPI_read(CTRL_REG3);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3304      	adds	r3, #4
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2122      	movs	r1, #34	; 0x22
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	4798      	blx	r3
 80083c0:	4603      	mov	r3, r0
 80083c2:	737b      	strb	r3, [r7, #13]

	  SPI_write(CTRL_REG4,0b00001100);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	220c      	movs	r2, #12
 80083cc:	2123      	movs	r1, #35	; 0x23
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	4798      	blx	r3
	  uint8_t ctrl4 = SPI_read(CTRL_REG4);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	3304      	adds	r3, #4
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2123      	movs	r1, #35	; 0x23
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	4798      	blx	r3
 80083e0:	4603      	mov	r3, r0
 80083e2:	733b      	strb	r3, [r7, #12]

	  SPI_write(CTRL_REG5,0b00000000);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2200      	movs	r2, #0
 80083ec:	2124      	movs	r1, #36	; 0x24
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	4798      	blx	r3
	  uint8_t ctrl5 = SPI_read(CTRL_REG5);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3304      	adds	r3, #4
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2124      	movs	r1, #36	; 0x24
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	4798      	blx	r3
 8008400:	4603      	mov	r3, r0
 8008402:	72fb      	strb	r3, [r7, #11]
		return false;

	if (!initAndCheck(CTRL_REG5,0b00000000,10))
		return false;*/

	return true;
 8008404:	2301      	movs	r3, #1
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
	...

08008410 <_ZN9LIS3MDLTR9SPI_writeEhh>:
	}
	return false;
}

void LIS3MDLTR::SPI_write(uint8_t reg,uint8_t data)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	460b      	mov	r3, r1
 800841a:	70fb      	strb	r3, [r7, #3]
 800841c:	4613      	mov	r3, r2
 800841e:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(LIS_CS_PORT,LIS_CS_PIN,GPIO_PIN_RESET);
 8008420:	2200      	movs	r2, #0
 8008422:	2120      	movs	r1, #32
 8008424:	480f      	ldr	r0, [pc, #60]	; (8008464 <_ZN9LIS3MDLTR9SPI_writeEhh+0x54>)
 8008426:	f002 fced 	bl	800ae04 <HAL_GPIO_WritePin>
	spiTxBuff[0] = reg & 0x7f;
 800842a:	78fb      	ldrb	r3, [r7, #3]
 800842c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008430:	b2da      	uxtb	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	spiTxBuff[1] = data;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	78ba      	ldrb	r2, [r7, #2]
 800843c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	3354      	adds	r3, #84	; 0x54
 8008448:	2202      	movs	r2, #2
 800844a:	4619      	mov	r1, r3
 800844c:	f005 fe92 	bl	800e174 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(LIS_CS_PORT,LIS_CS_PIN,GPIO_PIN_SET);
 8008450:	2201      	movs	r2, #1
 8008452:	2120      	movs	r1, #32
 8008454:	4803      	ldr	r0, [pc, #12]	; (8008464 <_ZN9LIS3MDLTR9SPI_writeEhh+0x54>)
 8008456:	f002 fcd5 	bl	800ae04 <HAL_GPIO_WritePin>
}
 800845a:	bf00      	nop
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	40020000 	.word	0x40020000

08008468 <_ZN9LIS3MDLTR8SPI_readEh>:

uint8_t LIS3MDLTR::SPI_read(uint8_t reg)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	460b      	mov	r3, r1
 8008472:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(LIS_CS_PORT, LIS_CS_PIN, GPIO_PIN_RESET);
 8008474:	2200      	movs	r2, #0
 8008476:	2120      	movs	r1, #32
 8008478:	4812      	ldr	r0, [pc, #72]	; (80084c4 <_ZN9LIS3MDLTR8SPI_readEh+0x5c>)
 800847a:	f002 fcc3 	bl	800ae04 <HAL_GPIO_WritePin>
	spiTxBuff[0]=(reg & 0x3f)|0x80|0x40;
 800847e:	78fb      	ldrb	r3, [r7, #3]
 8008480:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8008484:	b2da      	uxtb	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff, 1);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	3354      	adds	r3, #84	; 0x54
 8008494:	2201      	movs	r2, #1
 8008496:	4619      	mov	r1, r3
 8008498:	f005 fe6c 	bl	800e174 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(spi_port, (uint8_t*)spiRxBuff, 1);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	3356      	adds	r3, #86	; 0x56
 80084a4:	2201      	movs	r2, #1
 80084a6:	4619      	mov	r1, r3
 80084a8:	f005 ff1a 	bl	800e2e0 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(LIS_CS_PORT, LIS_CS_PIN, GPIO_PIN_SET);
 80084ac:	2201      	movs	r2, #1
 80084ae:	2120      	movs	r1, #32
 80084b0:	4804      	ldr	r0, [pc, #16]	; (80084c4 <_ZN9LIS3MDLTR8SPI_readEh+0x5c>)
 80084b2:	f002 fca7 	bl	800ae04 <HAL_GPIO_WritePin>

	return spiRxBuff[0];
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	40020000 	.word	0x40020000

080084c8 <_ZN7Timeout19resetTimeoutCounterEv>:
	void resetTimeoutCounter()
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
		timeout_counter=0;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	705a      	strb	r2, [r3, #1]
	}
 80084d6:	bf00      	nop
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
	...

080084e4 <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>:
 */

#include "MB1043.hpp"
#include <stdlib.h>

MB1043::MB1043(
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
 80084f0:	70fb      	strb	r3, [r7, #3]
	uart_port {uart_port}
	,uart_port_dma {uart_port_dma}
	,wrongDataReceived {false}
	,rx_buff {}
	,distance_str {}
	,distance {}
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	3336      	adds	r3, #54	; 0x36
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fc ff41 	bl	800537e <_ZN7TimeoutC1Ev>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fb fbf2 	bl	8003ce8 <_ZN15PrintableSensorC1Ev>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	3340      	adds	r3, #64	; 0x40
 8008508:	4618      	mov	r0, r3
 800850a:	f7fb fc03 	bl	8003d14 <_ZN12CallsCounterC1Ev>
 800850e:	4a17      	ldr	r2, [pc, #92]	; (800856c <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh+0x88>)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2252      	movs	r2, #82	; 0x52
 8008518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	220d      	movs	r2, #13
 8008520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	655a      	str	r2, [r3, #84]	; 0x54
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	659a      	str	r2, [r3, #88]	; 0x58
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	335d      	adds	r3, #93	; 0x5d
 800853c:	2200      	movs	r2, #0
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	605a      	str	r2, [r3, #4]
 8008542:	609a      	str	r2, [r3, #8]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	3369      	adds	r3, #105	; 0x69
 8008548:	2200      	movs	r2, #0
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
{
	setTimeoutValue(timeout);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	3336      	adds	r3, #54	; 0x36
 8008558:	78fa      	ldrb	r2, [r7, #3]
 800855a:	4611      	mov	r1, r2
 800855c:	4618      	mov	r0, r3
 800855e:	f7fc feff 	bl	8005360 <_ZN7Timeout15setTimeoutValueEh>
}
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	0801a8bc 	.word	0x0801a8bc

08008570 <_ZN6MB10435beginEv>:

void MB1043::begin()
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	335d      	adds	r3, #93	; 0x5d
 8008580:	2206      	movs	r2, #6
 8008582:	4619      	mov	r1, r3
 8008584:	f007 fc2e 	bl	800fde4 <HAL_UART_Receive_DMA>
}
 8008588:	bf00      	nop
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <_ZN6MB10436updateEv>:

void MB1043::update()
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->rx_buff[0] == this->BEGIN_BIT) && (this->rx_buff[5]==this->END_BIT);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d109      	bne.n	80085bc <_ZN6MB10436updateEv+0x2c>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d101      	bne.n	80085bc <_ZN6MB10436updateEv+0x2c>
 80085b8:	2301      	movs	r3, #1
 80085ba:	e000      	b.n	80085be <_ZN6MB10436updateEv+0x2e>
 80085bc:	2300      	movs	r3, #0
 80085be:	73bb      	strb	r3, [r7, #14]

	if (isPacketOk)
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d027      	beq.n	8008616 <_ZN6MB10436updateEv+0x86>
	{
		distance_str[0]=rx_buff[1];
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		distance_str[1]=rx_buff[2],
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 205f 	ldrb.w	r2, [r3, #95]	; 0x5f
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		distance_str[2]=rx_buff[3],
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
		distance_str[3]=rx_buff[4];
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

		distance = atoi(distance_str);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	3369      	adds	r3, #105	; 0x69
 80085fa:	4618      	mov	r0, r3
 80085fc:	f011 fd1c 	bl	801a038 <atoi>
 8008600:	4603      	mov	r3, r0
 8008602:	b29a      	uxth	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

		resetTimeoutCounter();
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	3336      	adds	r3, #54	; 0x36
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff ff5a 	bl	80084c8 <_ZN7Timeout19resetTimeoutCounterEv>
 8008614:	e033      	b.n	800867e <_ZN6MB10436updateEv+0xee>
	}
	else if (this->wrongDataReceived==false)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800861c:	2b00      	cmp	r3, #0
 800861e:	d12e      	bne.n	800867e <_ZN6MB10436updateEv+0xee>
	{
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 8008620:	2300      	movs	r3, #0
 8008622:	73fb      	strb	r3, [r7, #15]
 8008624:	7bfb      	ldrb	r3, [r7, #15]
 8008626:	2b04      	cmp	r3, #4
 8008628:	d829      	bhi.n	800867e <_ZN6MB10436updateEv+0xee>
		{
			if ((this->rx_buff[iter]==this->END_BIT) && (this->rx_buff[iter+1U]==this->BEGIN_BIT))
 800862a:	7bfb      	ldrb	r3, [r7, #15]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	4413      	add	r3, r2
 8008630:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800863a:	429a      	cmp	r2, r3
 800863c:	d11b      	bne.n	8008676 <_ZN6MB10436updateEv+0xe6>
 800863e:	7bfb      	ldrb	r3, [r7, #15]
 8008640:	3301      	adds	r3, #1
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	4413      	add	r3, r2
 8008646:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008650:	429a      	cmp	r2, r3
 8008652:	d110      	bne.n	8008676 <_ZN6MB10436updateEv+0xe6>
			{
				HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length+iter+1);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f103 015d 	add.w	r1, r3, #93	; 0x5d
 800865e:	7bfb      	ldrb	r3, [r7, #15]
 8008660:	b29b      	uxth	r3, r3
 8008662:	3307      	adds	r3, #7
 8008664:	b29b      	uxth	r3, r3
 8008666:	461a      	mov	r2, r3
 8008668:	f007 fbbc 	bl	800fde4 <HAL_UART_Receive_DMA>
				this->wrongDataReceived = true;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				return;
 8008674:	e01e      	b.n	80086b4 <_ZN6MB10436updateEv+0x124>
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 8008676:	7bfb      	ldrb	r3, [r7, #15]
 8008678:	3301      	adds	r3, #1
 800867a:	73fb      	strb	r3, [r7, #15]
 800867c:	e7d2      	b.n	8008624 <_ZN6MB10436updateEv+0x94>
			}
		}
	}

	if (this->wrongDataReceived == true)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008684:	2b01      	cmp	r3, #1
 8008686:	d103      	bne.n	8008690 <_ZN6MB10436updateEv+0x100>
		this->wrongDataReceived = false;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	335d      	adds	r3, #93	; 0x5d
 8008698:	2206      	movs	r2, #6
 800869a:	4619      	mov	r1, r3
 800869c:	f007 fba2 	bl	800fde4 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->uart_port_dma, DMA_IT_HT);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f022 0208 	bic.w	r2, r2, #8
 80086b2:	601a      	str	r2, [r3, #0]
}
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
	...

080086bc <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* MB1043::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 80086bc:	b590      	push	{r4, r7, lr}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	3304      	adds	r3, #4
 80086ca:	2200      	movs	r2, #0
 80086cc:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::SONAR_DISTANCE)!=senorsList.end())
 80086ce:	2313      	movs	r3, #19
 80086d0:	613b      	str	r3, [r7, #16]
 80086d2:	f107 0310 	add.w	r3, r7, #16
 80086d6:	4619      	mov	r1, r3
 80086d8:	6838      	ldr	r0, [r7, #0]
 80086da:	f7fc fab5 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80086de:	4603      	mov	r3, r0
 80086e0:	60fb      	str	r3, [r7, #12]
 80086e2:	6838      	ldr	r0, [r7, #0]
 80086e4:	f7fc fac9 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80086e8:	4603      	mov	r3, r0
 80086ea:	617b      	str	r3, [r7, #20]
 80086ec:	f107 0214 	add.w	r2, r7, #20
 80086f0:	f107 030c 	add.w	r3, r7, #12
 80086f4:	4611      	mov	r1, r2
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fc facc 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d01a      	beq.n	8008738 <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x7c>
	{
		strcat(packet,toCharArray(distance));
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	1d1c      	adds	r4, r3, #4
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800870e:	4619      	mov	r1, r3
 8008710:	4610      	mov	r0, r2
 8008712:	f7fb faa7 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 8008716:	4603      	mov	r3, r0
 8008718:	4619      	mov	r1, r3
 800871a:	4620      	mov	r0, r4
 800871c:	f011 fe2e 	bl	801a37c <strcat>
		strcat(packet,",");
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	1d1c      	adds	r4, r3, #4
 8008724:	4620      	mov	r0, r4
 8008726:	f7f7 fd53 	bl	80001d0 <strlen>
 800872a:	4603      	mov	r3, r0
 800872c:	4423      	add	r3, r4
 800872e:	4905      	ldr	r1, [pc, #20]	; (8008744 <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x88>)
 8008730:	461a      	mov	r2, r3
 8008732:	460b      	mov	r3, r1
 8008734:	881b      	ldrh	r3, [r3, #0]
 8008736:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	3304      	adds	r3, #4
}
 800873c:	4618      	mov	r0, r3
 800873e:	371c      	adds	r7, #28
 8008740:	46bd      	mov	sp, r7
 8008742:	bd90      	pop	{r4, r7, pc}
 8008744:	0801a550 	.word	0x0801a550

08008748 <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688PR7VL53L0XR11PID_ControlS9_>:
 *      Author: Asus
 */

#include "PMW3901UY.hpp"

PMW3901UY::PMW3901UY(
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
 8008754:	70fb      	strb	r3, [r7, #3]
	,x_cm_pos {0}
	,y_cm_pos {0}
	,target_x {0}
	,target_y {0}
	,lastAngleX {0}
	,lastAngleY {0}
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3336      	adds	r3, #54	; 0x36
 800875a:	4618      	mov	r0, r3
 800875c:	f7fc fe0f 	bl	800537e <_ZN7TimeoutC1Ev>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4618      	mov	r0, r3
 8008764:	f7fb fac0 	bl	8003ce8 <_ZN15PrintableSensorC1Ev>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	3340      	adds	r3, #64	; 0x40
 800876c:	4618      	mov	r0, r3
 800876e:	f7fb fad1 	bl	8003d14 <_ZN12CallsCounterC1Ev>
 8008772:	4a36      	ldr	r2, [pc, #216]	; (800884c <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688PR7VL53L0XR11PID_ControlS9_+0x104>)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	22fe      	movs	r2, #254	; 0xfe
 800877c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2204      	movs	r2, #4
 8008784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	22aa      	movs	r2, #170	; 0xaa
 800878c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	655a      	str	r2, [r3, #84]	; 0x54
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	659a      	str	r2, [r3, #88]	; 0x58
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	69ba      	ldr	r2, [r7, #24]
 80087a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	69fa      	ldr	r2, [r7, #28]
 80087a6:	661a      	str	r2, [r3, #96]	; 0x60
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6a3a      	ldr	r2, [r7, #32]
 80087ac:	665a      	str	r2, [r3, #100]	; 0x64
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b2:	669a      	str	r2, [r3, #104]	; 0x68
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	336c      	adds	r3, #108	; 0x6c
 80087b8:	2200      	movs	r2, #0
 80087ba:	601a      	str	r2, [r3, #0]
 80087bc:	605a      	str	r2, [r3, #4]
 80087be:	609a      	str	r2, [r3, #8]
 80087c0:	60da      	str	r2, [r3, #12]
 80087c2:	821a      	strh	r2, [r3, #16]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f04f 0200 	mov.w	r2, #0
 80087ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f04f 0200 	mov.w	r2, #0
 80087f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f04f 0200 	mov.w	r2, #0
 80087fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f04f 0200 	mov.w	r2, #0
 8008808:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f04f 0200 	mov.w	r2, #0
 8008812:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f04f 0200 	mov.w	r2, #0
 800881c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f04f 0200 	mov.w	r2, #0
 8008826:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f04f 0200 	mov.w	r2, #0
 8008830:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
{
	setTimeoutValue(timeout);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	3336      	adds	r3, #54	; 0x36
 8008838:	78fa      	ldrb	r2, [r7, #3]
 800883a:	4611      	mov	r1, r2
 800883c:	4618      	mov	r0, r3
 800883e:	f7fc fd8f 	bl	8005360 <_ZN7Timeout15setTimeoutValueEh>
}
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	0801a8c8 	.word	0x0801a8c8

08008850 <_ZN9PMW3901UY5beginEv>:

void PMW3901UY::begin()
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (uart_port, rx_buff, packet_length);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	336c      	adds	r3, #108	; 0x6c
 8008860:	2209      	movs	r2, #9
 8008862:	4619      	mov	r1, r3
 8008864:	f007 fabe 	bl	800fde4 <HAL_UART_Receive_DMA>
}
 8008868:	bf00      	nop
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <_ZN9PMW3901UY6updateEv>:

void PMW3901UY::update()
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->rx_buff[0]==this->BEGIN_BIT && this->rx_buff[1]==this->DATA_LEN_BIT && this->rx_buff[8]==this->END_BIT);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008884:	429a      	cmp	r2, r3
 8008886:	d111      	bne.n	80088ac <_ZN9PMW3901UY6updateEv+0x3c>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 206d 	ldrb.w	r2, [r3, #109]	; 0x6d
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008894:	429a      	cmp	r2, r3
 8008896:	d109      	bne.n	80088ac <_ZN9PMW3901UY6updateEv+0x3c>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d101      	bne.n	80088ac <_ZN9PMW3901UY6updateEv+0x3c>
 80088a8:	2301      	movs	r3, #1
 80088aa:	e000      	b.n	80088ae <_ZN9PMW3901UY6updateEv+0x3e>
 80088ac:	2300      	movs	r3, #0
 80088ae:	73bb      	strb	r3, [r7, #14]

	if(isPacketOk)
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d052      	beq.n	800895c <_ZN9PMW3901UY6updateEv+0xec>
	{
		this->flow_x = (int16_t)(this->rx_buff[3]<<8 | this->rx_buff[2]);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80088bc:	021b      	lsls	r3, r3, #8
 80088be:	b21a      	sxth	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80088c6:	b21b      	sxth	r3, r3
 80088c8:	4313      	orrs	r3, r2
 80088ca:	b21a      	sxth	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		this->flow_y = (int16_t)(this->rx_buff[5]<<8 | this->rx_buff[4]);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80088d8:	021b      	lsls	r3, r3, #8
 80088da:	b21a      	sxth	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80088e2:	b21b      	sxth	r3, r3
 80088e4:	4313      	orrs	r3, r2
 80088e6:	b21a      	sxth	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		this->quality = this->rx_buff[7];
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

		this->x_pos += this->flow_x;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8008906:	ee07 3a90 	vmov	s15, r3
 800890a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800890e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		this->y_pos += this->flow_y;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8008924:	ee07 3a90 	vmov	s15, r3
 8008928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800892c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		this->process();
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f862 	bl	8008a00 <_ZN9PMW3901UY7processEv>

		this->_pidX.update();
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008940:	4618      	mov	r0, r3
 8008942:	f000 f9ed 	bl	8008d20 <_ZN11PID_Control6updateEv>
		this->_pidY.update();
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800894a:	4618      	mov	r0, r3
 800894c:	f000 f9e8 	bl	8008d20 <_ZN11PID_Control6updateEv>

		this->resetTimeoutCounter();
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3336      	adds	r3, #54	; 0x36
 8008954:	4618      	mov	r0, r3
 8008956:	f7ff fdb7 	bl	80084c8 <_ZN7Timeout19resetTimeoutCounterEv>
 800895a:	e033      	b.n	80089c4 <_ZN9PMW3901UY6updateEv+0x154>
	}
	else if (this->wrongDataReceived==false)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8008962:	2b00      	cmp	r3, #0
 8008964:	d12e      	bne.n	80089c4 <_ZN9PMW3901UY6updateEv+0x154>
	{
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 8008966:	2300      	movs	r3, #0
 8008968:	73fb      	strb	r3, [r7, #15]
 800896a:	7bfb      	ldrb	r3, [r7, #15]
 800896c:	2b07      	cmp	r3, #7
 800896e:	d829      	bhi.n	80089c4 <_ZN9PMW3901UY6updateEv+0x154>
		{
			if ((this->rx_buff[iter]==this->END_BIT) && (this->rx_buff[iter+1U]==this->BEGIN_BIT))
 8008970:	7bfb      	ldrb	r3, [r7, #15]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	4413      	add	r3, r2
 8008976:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008980:	429a      	cmp	r2, r3
 8008982:	d11b      	bne.n	80089bc <_ZN9PMW3901UY6updateEv+0x14c>
 8008984:	7bfb      	ldrb	r3, [r7, #15]
 8008986:	3301      	adds	r3, #1
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	4413      	add	r3, r2
 800898c:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008996:	429a      	cmp	r2, r3
 8008998:	d110      	bne.n	80089bc <_ZN9PMW3901UY6updateEv+0x14c>
			{
				HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length+iter+1);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	330a      	adds	r3, #10
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	461a      	mov	r2, r3
 80089ae:	f007 fa19 	bl	800fde4 <HAL_UART_Receive_DMA>
				this->wrongDataReceived = true;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
				return;
 80089ba:	e01e      	b.n	80089fa <_ZN9PMW3901UY6updateEv+0x18a>
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	3301      	adds	r3, #1
 80089c0:	73fb      	strb	r3, [r7, #15]
 80089c2:	e7d2      	b.n	800896a <_ZN9PMW3901UY6updateEv+0xfa>
			}
		}
	}

	if (this->wrongDataReceived == true)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d103      	bne.n	80089d6 <_ZN9PMW3901UY6updateEv+0x166>
		this->wrongDataReceived = false;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	336c      	adds	r3, #108	; 0x6c
 80089de:	2209      	movs	r2, #9
 80089e0:	4619      	mov	r1, r3
 80089e2:	f007 f9ff 	bl	800fde4 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->uart_port_dma, DMA_IT_HT);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f022 0208 	bic.w	r2, r2, #8
 80089f8:	601a      	str	r2, [r3, #0]
}
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <_ZN9PMW3901UY7processEv>:

void PMW3901UY::process()
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
	float cpi = (this->_vl53.getAltitudeM() / 11.914F) * 2.54F;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f000 fc61 	bl	80092d4 <_ZN7VL53L0X12getAltitudeMEv>
 8008a12:	eeb0 7a40 	vmov.f32	s14, s0
 8008a16:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008aa8 <_ZN9PMW3901UY7processEv+0xa8>
 8008a1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008a1e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8008aac <_ZN9PMW3901UY7processEv+0xac>
 8008a22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a26:	edc7 7a03 	vstr	s15, [r7, #12]
	this->x_cm_pos = this->x_cm_pos + static_cast<float>(this->flow_x)*cpi;// - this->lastAngleY * cpi * 10.0F;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8008a36:	ee07 3a90 	vmov	s15, r3
 8008a3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008a3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8008a42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	this->y_cm_pos = this->y_cm_pos + static_cast<float>(this->flow_y)*cpi;// - this->lastAngleX * cpi * 10.0F;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8008a5c:	ee07 3a90 	vmov	s15, r3
 8008a60:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008a64:	edd7 7a03 	vldr	s15, [r7, #12]
 8008a68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

	lastAngleX = this->_icm.getEulerX();
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7ff fa46 	bl	8007f0c <_ZN9ICM42688P9getEulerXEv>
 8008a80:	eef0 7a40 	vmov.f32	s15, s0
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	lastAngleY = this->_icm.getEulerY();
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7ff fa58 	bl	8007f44 <_ZN9ICM42688P9getEulerYEv>
 8008a94:	eef0 7a40 	vmov.f32	s15, s0
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
}
 8008a9e:	bf00      	nop
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	413e9fbe 	.word	0x413e9fbe
 8008aac:	40228f5c 	.word	0x40228f5c

08008ab0 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* PMW3901UY::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8008ab0:	b590      	push	{r4, r7, lr}
 8008ab2:	b093      	sub	sp, #76	; 0x4c
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	3304      	adds	r3, #4
 8008abe:	2200      	movs	r2, #0
 8008ac0:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_POS_X)!=senorsList.end())
 8008ac2:	2315      	movs	r3, #21
 8008ac4:	613b      	str	r3, [r7, #16]
 8008ac6:	f107 0310 	add.w	r3, r7, #16
 8008aca:	4619      	mov	r1, r3
 8008acc:	6838      	ldr	r0, [r7, #0]
 8008ace:	f7fc f8bb 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	60fb      	str	r3, [r7, #12]
 8008ad6:	6838      	ldr	r0, [r7, #0]
 8008ad8:	f7fc f8cf 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008adc:	4603      	mov	r3, r0
 8008ade:	617b      	str	r3, [r7, #20]
 8008ae0:	f107 0214 	add.w	r2, r7, #20
 8008ae4:	f107 030c 	add.w	r3, r7, #12
 8008ae8:	4611      	mov	r1, r2
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fc f8d2 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d01d      	beq.n	8008b32 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x82>
	{
		strcat(packet,toCharArray(x_cm_pos));
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	1d1c      	adds	r4, r3, #4
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8008b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b06:	ee17 1a90 	vmov	r1, s15
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	f7fb f8aa 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 8008b10:	4603      	mov	r3, r0
 8008b12:	4619      	mov	r1, r3
 8008b14:	4620      	mov	r0, r4
 8008b16:	f011 fc31 	bl	801a37c <strcat>
		strcat(packet,",");
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	1d1c      	adds	r4, r3, #4
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f7f7 fb56 	bl	80001d0 <strlen>
 8008b24:	4603      	mov	r3, r0
 8008b26:	4423      	add	r3, r4
 8008b28:	4970      	ldr	r1, [pc, #448]	; (8008cec <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x23c>)
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	881b      	ldrh	r3, [r3, #0]
 8008b30:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_POS_Y)!=senorsList.end())
 8008b32:	2316      	movs	r3, #22
 8008b34:	61fb      	str	r3, [r7, #28]
 8008b36:	f107 031c 	add.w	r3, r7, #28
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6838      	ldr	r0, [r7, #0]
 8008b3e:	f7fc f883 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008b42:	4603      	mov	r3, r0
 8008b44:	61bb      	str	r3, [r7, #24]
 8008b46:	6838      	ldr	r0, [r7, #0]
 8008b48:	f7fc f897 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	623b      	str	r3, [r7, #32]
 8008b50:	f107 0220 	add.w	r2, r7, #32
 8008b54:	f107 0318 	add.w	r3, r7, #24
 8008b58:	4611      	mov	r1, r2
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fc f89a 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d01d      	beq.n	8008ba2 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0xf2>
	{
		strcat(packet,toCharArray(y_cm_pos));
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	1d1c      	adds	r4, r3, #4
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8008b72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b76:	ee17 1a90 	vmov	r1, s15
 8008b7a:	4610      	mov	r0, r2
 8008b7c:	f7fb f872 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 8008b80:	4603      	mov	r3, r0
 8008b82:	4619      	mov	r1, r3
 8008b84:	4620      	mov	r0, r4
 8008b86:	f011 fbf9 	bl	801a37c <strcat>
		strcat(packet,",");
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	1d1c      	adds	r4, r3, #4
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f7f7 fb1e 	bl	80001d0 <strlen>
 8008b94:	4603      	mov	r3, r0
 8008b96:	4423      	add	r3, r4
 8008b98:	4954      	ldr	r1, [pc, #336]	; (8008cec <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x23c>)
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_FLOW_X)!=senorsList.end())
 8008ba2:	2317      	movs	r3, #23
 8008ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008baa:	4619      	mov	r1, r3
 8008bac:	6838      	ldr	r0, [r7, #0]
 8008bae:	f7fc f84b 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8008bb6:	6838      	ldr	r0, [r7, #0]
 8008bb8:	f7fc f85f 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bc0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bc8:	4611      	mov	r1, r2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fc f862 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d01a      	beq.n	8008c0c <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x15c>
	{
		strcat(packet,toCharArray(flow_x));
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	1d1c      	adds	r4, r3, #4
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8008be2:	4619      	mov	r1, r3
 8008be4:	4610      	mov	r0, r2
 8008be6:	f7fb f83d 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 8008bea:	4603      	mov	r3, r0
 8008bec:	4619      	mov	r1, r3
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f011 fbc4 	bl	801a37c <strcat>
		strcat(packet,",");
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	1d1c      	adds	r4, r3, #4
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f7f7 fae9 	bl	80001d0 <strlen>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	4423      	add	r3, r4
 8008c02:	493a      	ldr	r1, [pc, #232]	; (8008cec <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x23c>)
 8008c04:	461a      	mov	r2, r3
 8008c06:	460b      	mov	r3, r1
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_FLOW_Y)!=senorsList.end())
 8008c0c:	2318      	movs	r3, #24
 8008c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008c14:	4619      	mov	r1, r3
 8008c16:	6838      	ldr	r0, [r7, #0]
 8008c18:	f7fc f816 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	633b      	str	r3, [r7, #48]	; 0x30
 8008c20:	6838      	ldr	r0, [r7, #0]
 8008c22:	f7fc f82a 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008c26:	4603      	mov	r3, r0
 8008c28:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c2a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008c2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c32:	4611      	mov	r1, r2
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fc f82d 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d01a      	beq.n	8008c76 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1c6>
	{
		strcat(packet,toCharArray(flow_y));
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	1d1c      	adds	r4, r3, #4
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	4610      	mov	r0, r2
 8008c50:	f7fb f808 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 8008c54:	4603      	mov	r3, r0
 8008c56:	4619      	mov	r1, r3
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f011 fb8f 	bl	801a37c <strcat>
		strcat(packet,",");
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	1d1c      	adds	r4, r3, #4
 8008c62:	4620      	mov	r0, r4
 8008c64:	f7f7 fab4 	bl	80001d0 <strlen>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	4423      	add	r3, r4
 8008c6c:	491f      	ldr	r1, [pc, #124]	; (8008cec <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x23c>)
 8008c6e:	461a      	mov	r2, r3
 8008c70:	460b      	mov	r3, r1
 8008c72:	881b      	ldrh	r3, [r3, #0]
 8008c74:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_QUALITY)!=senorsList.end())
 8008c76:	2319      	movs	r3, #25
 8008c78:	643b      	str	r3, [r7, #64]	; 0x40
 8008c7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6838      	ldr	r0, [r7, #0]
 8008c82:	f7fb ffe1 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008c86:	4603      	mov	r3, r0
 8008c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c8a:	6838      	ldr	r0, [r7, #0]
 8008c8c:	f7fb fff5 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008c90:	4603      	mov	r3, r0
 8008c92:	647b      	str	r3, [r7, #68]	; 0x44
 8008c94:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008c98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fb fff8 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d01a      	beq.n	8008ce0 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x230>
	{
		strcat(packet,toCharArray(quality));
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	1d1c      	adds	r4, r3, #4
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	4610      	mov	r0, r2
 8008cba:	f7fa ffd3 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f011 fb5a 	bl	801a37c <strcat>
		strcat(packet,",");
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	1d1c      	adds	r4, r3, #4
 8008ccc:	4620      	mov	r0, r4
 8008cce:	f7f7 fa7f 	bl	80001d0 <strlen>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	4423      	add	r3, r4
 8008cd6:	4905      	ldr	r1, [pc, #20]	; (8008cec <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x23c>)
 8008cd8:	461a      	mov	r2, r3
 8008cda:	460b      	mov	r3, r1
 8008cdc:	881b      	ldrh	r3, [r3, #0]
 8008cde:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	3304      	adds	r3, #4
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	374c      	adds	r7, #76	; 0x4c
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd90      	pop	{r4, r7, pc}
 8008cec:	0801a554 	.word	0x0801a554

08008cf0 <_ZN9PMW3901UY7getXposEv>:
{
	return quality;
}

float& PMW3901UY::getXpos()
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
	return x_cm_pos;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	3390      	adds	r3, #144	; 0x90
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <_ZN9PMW3901UY7getYposEv>:

float& PMW3901UY::getYpos()
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
	return y_cm_pos;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3394      	adds	r3, #148	; 0x94
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <_ZN11PID_Control6updateEv>:
 */

#include "PID_Control.hpp"

void PID_Control::update()
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
	this->error = this->reference - this->signal;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	ed93 7a00 	vldr	s14, [r3]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	edd3 7a00 	vldr	s15, [r3]
 8008d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	edc3 7a05 	vstr	s15, [r3, #20]

	this->pid_p = this->error;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	695a      	ldr	r2, [r3, #20]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	61da      	str	r2, [r3, #28]
	this->pid_i = this->pid_i + this->error;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	ed93 7a08 	vldr	s14, [r3, #32]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	edd3 7a05 	vldr	s15, [r3, #20]
 8008d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	edc3 7a08 	vstr	s15, [r3, #32]
	this->pid_d = -(this->signal-this->last_signal);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	ed93 7a00 	vldr	s14, [r3]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	edd3 7a06 	vldr	s15, [r3, #24]
 8008d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d72:	eef1 7a67 	vneg.f32	s15, s15
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	this->last_signal = this->signal;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	619a      	str	r2, [r3, #24]

	this->pid =  this->Kp * this->pid_p + this->Ki * this->pid_i + this->Kd * this->pid_d;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	ed93 7a02 	vldr	s14, [r3, #8]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	edd3 7a07 	vldr	s15, [r3, #28]
 8008d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	edd3 6a03 	vldr	s13, [r3, #12]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	edd3 7a08 	vldr	s15, [r3, #32]
 8008da2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008da6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	edd3 6a04 	vldr	s13, [r3, #16]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008db6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <_ZN11PID_Control6getOutEv>:

float PID_Control::getOut()
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
	return this->pid;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ddc:	ee07 3a90 	vmov	s15, r3
}
 8008de0:	eeb0 0a67 	vmov.f32	s0, s15
 8008de4:	370c      	adds	r7, #12
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <_ZSt17__size_to_integeri>:
      std::__fill_a(__first, __last, __value);
    }

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
 8008dee:	b480      	push	{r7}
 8008df0:	b083      	sub	sp, #12
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <_ZN14MPC_ControllerC1Ev>:
};

class MPC_Controller
{
public:
	MPC_Controller()
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
	{
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f04f 0200 	mov.w	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f04f 0200 	mov.w	r2, #0
 8008e1a:	605a      	str	r2, [r3, #4]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f04f 0200 	mov.w	r2, #0
 8008e22:	609a      	str	r2, [r3, #8]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f04f 0200 	mov.w	r2, #0
 8008e2a:	60da      	str	r2, [r3, #12]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f04f 0200 	mov.w	r2, #0
 8008e32:	611a      	str	r2, [r3, #16]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f04f 0200 	mov.w	r2, #0
 8008e3a:	615a      	str	r2, [r3, #20]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f04f 0200 	mov.w	r2, #0
 8008e42:	619a      	str	r2, [r3, #24]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008e4a:	61da      	str	r2, [r3, #28]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a31      	ldr	r2, [pc, #196]	; (8008f14 <_ZN14MPC_ControllerC1Ev+0x110>)
 8008e50:	621a      	str	r2, [r3, #32]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a30      	ldr	r2, [pc, #192]	; (8008f18 <_ZN14MPC_ControllerC1Ev+0x114>)
 8008e56:	3354      	adds	r3, #84	; 0x54
 8008e58:	4611      	mov	r1, r2
 8008e5a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f011 f928 	bl	801a0b4 <memcpy>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008e6a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008e6e:	2100      	movs	r1, #0
 8008e70:	4618      	mov	r0, r3
 8008e72:	f011 f947 	bl	801a104 <memset>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8008e7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008e80:	2100      	movs	r1, #0
 8008e82:	4618      	mov	r0, r3
 8008e84:	f011 f93e 	bl	801a104 <memset>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8008e8e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008e92:	2100      	movs	r1, #0
 8008e94:	4618      	mov	r0, r3
 8008e96:	f011 f935 	bl	801a104 <memset>
		arm_mat_init_f32(&ft, 1, 100, (float32_t *)ft_data);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008ea6:	2264      	movs	r2, #100	; 0x64
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	f00f febd 	bl	8018c28 <arm_mat_init_f32>
		arm_mat_init_f32(&ft_t, 100, 1, (float32_t *)ft_t_data);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8008eba:	2201      	movs	r2, #1
 8008ebc:	2164      	movs	r1, #100	; 0x64
 8008ebe:	f00f feb3 	bl	8018c28 <arm_mat_init_f32>
		arm_mat_init_f32(&du, 100, 1, (float32_t *)du_data);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8008ece:	2201      	movs	r2, #1
 8008ed0:	2164      	movs	r1, #100	; 0x64
 8008ed2:	f00f fea9 	bl	8018c28 <arm_mat_init_f32>

		arm_mat_init_f32(&Fdbt, 104, 100, (float32_t *)Fdbt_data);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008edc:	4b0f      	ldr	r3, [pc, #60]	; (8008f1c <_ZN14MPC_ControllerC1Ev+0x118>)
 8008ede:	2264      	movs	r2, #100	; 0x64
 8008ee0:	2168      	movs	r1, #104	; 0x68
 8008ee2:	f00f fea1 	bl	8018c28 <arm_mat_init_f32>
		arm_mat_init_f32(&HdbInv, 100, 100, (float32_t *)HdbInv_data);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8008eec:	4b0c      	ldr	r3, [pc, #48]	; (8008f20 <_ZN14MPC_ControllerC1Ev+0x11c>)
 8008eee:	2264      	movs	r2, #100	; 0x64
 8008ef0:	2164      	movs	r1, #100	; 0x64
 8008ef2:	f00f fe99 	bl	8018c28 <arm_mat_init_f32>
		arm_mat_init_f32(&xr, 1, 104, (float32_t *)xr_data);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	3354      	adds	r3, #84	; 0x54
 8008f00:	2268      	movs	r2, #104	; 0x68
 8008f02:	2101      	movs	r1, #1
 8008f04:	f00f fe90 	bl	8018c28 <arm_mat_init_f32>
	}
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	3dcccccd 	.word	0x3dcccccd
 8008f18:	0801a558 	.word	0x0801a558
 8008f1c:	0801a8cc 	.word	0x0801a8cc
 8008f20:	08024b4c 	.word	0x08024b4c
 8008f24:	00000000 	.word	0x00000000

08008f28 <_ZN14MPC_Controller7predictEff>:

	float32_t predict(float32_t x1,float32_t ref)
 8008f28:	b5b0      	push	{r4, r5, r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	ed87 0a02 	vstr	s0, [r7, #8]
 8008f34:	edc7 0a01 	vstr	s1, [r7, #4]
	{
		arm_status status1 = arm_mat_mult_f32(&xr, &Fdbt, &ft);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	333c      	adds	r3, #60	; 0x3c
 8008f48:	461a      	mov	r2, r3
 8008f4a:	f00f fdc9 	bl	8018ae0 <arm_mat_mult_f32>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	75fb      	strb	r3, [r7, #23]
		arm_status status2 = arm_mat_trans_f32(&ft, &ft_t);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	3344      	adds	r3, #68	; 0x44
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	4610      	mov	r0, r2
 8008f60:	f00f fd4c 	bl	80189fc <arm_mat_trans_f32>
 8008f64:	4603      	mov	r3, r0
 8008f66:	75bb      	strb	r3, [r7, #22]
		arm_status status3 = arm_mat_mult_f32(&HdbInv, &ft_t, &du);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	334c      	adds	r3, #76	; 0x4c
 8008f78:	461a      	mov	r2, r3
 8008f7a:	f00f fdb1 	bl	8018ae0 <arm_mat_mult_f32>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	757b      	strb	r3, [r7, #21]

		this->du0 = *(du.pData+0);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	601a      	str	r2, [r3, #0]
		this->x_aug = this->x_aug + this->du0;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	edd3 7a00 	vldr	s15, [r3]
 8008f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	edc3 7a01 	vstr	s15, [r3, #4]

		if (x1<0.05)
 8008fa2:	68b8      	ldr	r0, [r7, #8]
 8008fa4:	f7f7 fa80 	bl	80004a8 <__aeabi_f2d>
 8008fa8:	a347      	add	r3, pc, #284	; (adr r3, 80090c8 <_ZN14MPC_Controller7predictEff+0x1a0>)
 8008faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fae:	f7f7 fd45 	bl	8000a3c <__aeabi_dcmplt>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d013      	beq.n	8008fe0 <_ZN14MPC_Controller7predictEff+0xb8>
		{
			err = err + (ref-x1)*Ki;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	ed93 7a04 	vldr	s14, [r3, #16]
 8008fbe:	edd7 6a01 	vldr	s13, [r7, #4]
 8008fc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8008fc6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	edd3 7a07 	vldr	s15, [r3, #28]
 8008fd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	edc3 7a04 	vstr	s15, [r3, #16]
 8008fde:	e012      	b.n	8009006 <_ZN14MPC_Controller7predictEff+0xde>
		} else
		{
			err = err + (ref-x1)*Ki_s;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	ed93 7a04 	vldr	s14, [r3, #16]
 8008fe6:	edd7 6a01 	vldr	s13, [r7, #4]
 8008fea:	edd7 7a02 	vldr	s15, [r7, #8]
 8008fee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	edd3 7a08 	vldr	s15, [r3, #32]
 8008ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	edc3 7a04 	vstr	s15, [r3, #16]
		}

		this->x3 = this->x_aug*0.8 - prev_x3*0.666666666666667;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	4618      	mov	r0, r3
 800900c:	f7f7 fa4c 	bl	80004a8 <__aeabi_f2d>
 8009010:	a32f      	add	r3, pc, #188	; (adr r3, 80090d0 <_ZN14MPC_Controller7predictEff+0x1a8>)
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	f7f7 fa9f 	bl	8000558 <__aeabi_dmul>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	4614      	mov	r4, r2
 8009020:	461d      	mov	r5, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	4618      	mov	r0, r3
 8009028:	f7f7 fa3e 	bl	80004a8 <__aeabi_f2d>
 800902c:	a32a      	add	r3, pc, #168	; (adr r3, 80090d8 <_ZN14MPC_Controller7predictEff+0x1b0>)
 800902e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009032:	f7f7 fa91 	bl	8000558 <__aeabi_dmul>
 8009036:	4602      	mov	r2, r0
 8009038:	460b      	mov	r3, r1
 800903a:	4620      	mov	r0, r4
 800903c:	4629      	mov	r1, r5
 800903e:	f7f7 f8d3 	bl	80001e8 <__aeabi_dsub>
 8009042:	4602      	mov	r2, r0
 8009044:	460b      	mov	r3, r1
 8009046:	4610      	mov	r0, r2
 8009048:	4619      	mov	r1, r3
 800904a:	f7f7 fd5d 	bl	8000b08 <__aeabi_d2f>
 800904e:	4602      	mov	r2, r0
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	609a      	str	r2, [r3, #8]
		this->x1_dt = x1 - this->prev_x1;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	edd3 7a05 	vldr	s15, [r3, #20]
 800905a:	ed97 7a02 	vldr	s14, [r7, #8]
 800905e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	edc3 7a06 	vstr	s15, [r3, #24]

		std::fill_n(xr_data, 104, err);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	3310      	adds	r3, #16
 8009072:	461a      	mov	r2, r3
 8009074:	2168      	movs	r1, #104	; 0x68
 8009076:	f000 f99f 	bl	80093b8 <_ZSt6fill_nIPfifET_S1_T0_RKT1_>

		xr_data[0] = x1;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	655a      	str	r2, [r3, #84]	; 0x54
		xr_data[1] = x1_dt * 5.0F;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	edd3 7a06 	vldr	s15, [r3, #24]
 8009086:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800908a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		xr_data[2] = x3;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	689a      	ldr	r2, [r3, #8]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	65da      	str	r2, [r3, #92]	; 0x5c
		xr_data[3] = x_aug;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	661a      	str	r2, [r3, #96]	; 0x60

		this->prev_x1 = x1;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	615a      	str	r2, [r3, #20]
		this->prev_x3 = this->x3;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	689a      	ldr	r2, [r3, #8]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	60da      	str	r2, [r3, #12]

		return x_aug;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	ee07 3a90 	vmov	s15, r3
	}
 80090ba:	eeb0 0a67 	vmov.f32	s0, s15
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bdb0      	pop	{r4, r5, r7, pc}
 80090c4:	f3af 8000 	nop.w
 80090c8:	9999999a 	.word	0x9999999a
 80090cc:	3fa99999 	.word	0x3fa99999
 80090d0:	9999999a 	.word	0x9999999a
 80090d4:	3fe99999 	.word	0x3fe99999
 80090d8:	55555558 	.word	0x55555558
 80090dc:	3fe55555 	.word	0x3fe55555

080090e0 <_ZN7VL53L0XC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>:
 *      Author: Dragos
 */

#include "VL53L0X.hpp"

VL53L0X::VL53L0X(
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
 80090ec:	70fb      	strb	r3, [r7, #3]
	,uart_port_dma {uart_port_dma}
	,mpc {}
	,mpc_out {0}
	,rx_buff {}
	,wrongDataReceived {false}
	,distance {0}
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3336      	adds	r3, #54	; 0x36
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fc f943 	bl	800537e <_ZN7TimeoutC1Ev>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7fa fdf4 	bl	8003ce8 <_ZN15PrintableSensorC1Ev>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	3340      	adds	r3, #64	; 0x40
 8009104:	4618      	mov	r0, r3
 8009106:	f7fa fe05 	bl	8003d14 <_ZN12CallsCounterC1Ev>
 800910a:	4a1c      	ldr	r2, [pc, #112]	; (800917c <_ZN7VL53L0XC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh+0x9c>)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	601a      	str	r2, [r3, #0]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	225a      	movs	r2, #90	; 0x5a
 8009114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	225a      	movs	r2, #90	; 0x5a
 800911c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	655a      	str	r2, [r3, #84]	; 0x54
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	659a      	str	r2, [r3, #88]	; 0x58
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	335c      	adds	r3, #92	; 0x5c
 8009130:	4618      	mov	r0, r3
 8009132:	f7ff fe67 	bl	8008e04 <_ZN14MPC_ControllerC1Ev>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 800913c:	f04f 0200 	mov.w	r2, #0
 8009140:	601a      	str	r2, [r3, #0]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8009148:	2200      	movs	r2, #0
 800914a:	601a      	str	r2, [r3, #0]
 800914c:	605a      	str	r2, [r3, #4]
 800914e:	609a      	str	r2, [r3, #8]
 8009150:	60da      	str	r2, [r3, #12]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
{
	setTimeoutValue(timeout);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3336      	adds	r3, #54	; 0x36
 8009166:	78fa      	ldrb	r2, [r7, #3]
 8009168:	4611      	mov	r1, r2
 800916a:	4618      	mov	r0, r3
 800916c:	f7fc f8f8 	bl	8005360 <_ZN7Timeout15setTimeoutValueEh>
}
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	0802e794 	.word	0x0802e794

08009180 <_ZN7VL53L0X5beginEv>:

void VL53L0X::begin()
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (uart_port, rx_buff, packet_length);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8009192:	2208      	movs	r2, #8
 8009194:	4619      	mov	r1, r3
 8009196:	f006 fe25 	bl	800fde4 <HAL_UART_Receive_DMA>
}
 800919a:	bf00      	nop
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
	...

080091a4 <_ZN7VL53L0X6updateEv>:

void VL53L0X::update()
{
 80091a4:	b590      	push	{r4, r7, lr}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->rx_buff[0]==this->FIRST_BIT && this->rx_buff[1]==this->SECOND_BIT);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f893 2704 	ldrb.w	r2, [r3, #1796]	; 0x704
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d109      	bne.n	80091d0 <_ZN7VL53L0X6updateEv+0x2c>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f893 2705 	ldrb.w	r2, [r3, #1797]	; 0x705
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d101      	bne.n	80091d0 <_ZN7VL53L0X6updateEv+0x2c>
 80091cc:	2301      	movs	r3, #1
 80091ce:	e000      	b.n	80091d2 <_ZN7VL53L0X6updateEv+0x2e>
 80091d0:	2300      	movs	r3, #0
 80091d2:	73bb      	strb	r3, [r7, #14]

	if(isPacketOk)
 80091d4:	7bbb      	ldrb	r3, [r7, #14]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d027      	beq.n	800922a <_ZN7VL53L0X6updateEv+0x86>
	{
	    this->distance = rx_buff[4] << 8 | rx_buff[5];
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 3708 	ldrb.w	r3, [r3, #1800]	; 0x708
 80091e0:	021b      	lsls	r3, r3, #8
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	f892 2709 	ldrb.w	r2, [r2, #1801]	; 0x709
 80091e8:	4313      	orrs	r3, r2
 80091ea:	461a      	mov	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
		this->resetTimeoutCounter();
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	3336      	adds	r3, #54	; 0x36
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7ff f966 	bl	80084c8 <_ZN7Timeout19resetTimeoutCounterEv>

		this->mpc_out = this->mpc.predict(this->getAltitudeM(),0.15F);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f866 	bl	80092d4 <_ZN7VL53L0X12getAltitudeMEv>
 8009208:	eef0 7a40 	vmov.f32	s15, s0
 800920c:	eddf 0a30 	vldr	s1, [pc, #192]	; 80092d0 <_ZN7VL53L0X6updateEv+0x12c>
 8009210:	eeb0 0a67 	vmov.f32	s0, s15
 8009214:	4620      	mov	r0, r4
 8009216:	f7ff fe87 	bl	8008f28 <_ZN14MPC_Controller7predictEff>
 800921a:	eef0 7a40 	vmov.f32	s15, s0
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8009224:	edc3 7a00 	vstr	s15, [r3]
 8009228:	e033      	b.n	8009292 <_ZN7VL53L0X6updateEv+0xee>
	}
	else if (this->wrongDataReceived==false)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 3714 	ldrb.w	r3, [r3, #1812]	; 0x714
 8009230:	2b00      	cmp	r3, #0
 8009232:	d12e      	bne.n	8009292 <_ZN7VL53L0X6updateEv+0xee>
	{
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 8009234:	2300      	movs	r3, #0
 8009236:	73fb      	strb	r3, [r7, #15]
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	2b06      	cmp	r3, #6
 800923c:	d829      	bhi.n	8009292 <_ZN7VL53L0X6updateEv+0xee>
		{
			if ((this->rx_buff[iter]==this->FIRST_BIT) && (this->rx_buff[iter+1U]==this->SECOND_BIT))
 800923e:	7bfb      	ldrb	r3, [r7, #15]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	4413      	add	r3, r2
 8009244:	f893 2704 	ldrb.w	r2, [r3, #1796]	; 0x704
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800924e:	429a      	cmp	r2, r3
 8009250:	d11b      	bne.n	800928a <_ZN7VL53L0X6updateEv+0xe6>
 8009252:	7bfb      	ldrb	r3, [r7, #15]
 8009254:	3301      	adds	r3, #1
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	4413      	add	r3, r2
 800925a:	f893 2704 	ldrb.w	r2, [r3, #1796]	; 0x704
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009264:	429a      	cmp	r2, r3
 8009266:	d110      	bne.n	800928a <_ZN7VL53L0X6updateEv+0xe6>
			{
				HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length+iter);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f203 7104 	addw	r1, r3, #1796	; 0x704
 8009272:	7bfb      	ldrb	r3, [r7, #15]
 8009274:	b29b      	uxth	r3, r3
 8009276:	3308      	adds	r3, #8
 8009278:	b29b      	uxth	r3, r3
 800927a:	461a      	mov	r2, r3
 800927c:	f006 fdb2 	bl	800fde4 <HAL_UART_Receive_DMA>
				this->wrongDataReceived = true;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
				return;
 8009288:	e01f      	b.n	80092ca <_ZN7VL53L0X6updateEv+0x126>
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	3301      	adds	r3, #1
 800928e:	73fb      	strb	r3, [r7, #15]
 8009290:	e7d2      	b.n	8009238 <_ZN7VL53L0X6updateEv+0x94>
			}
		}
	}

	if (this->wrongDataReceived == true)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 3714 	ldrb.w	r3, [r3, #1812]	; 0x714
 8009298:	2b01      	cmp	r3, #1
 800929a:	d103      	bne.n	80092a4 <_ZN7VL53L0X6updateEv+0x100>
		this->wrongDataReceived = false;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714

	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f203 7304 	addw	r3, r3, #1796	; 0x704
 80092ae:	2208      	movs	r2, #8
 80092b0:	4619      	mov	r1, r3
 80092b2:	f006 fd97 	bl	800fde4 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->uart_port_dma, DMA_IT_HT);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f022 0208 	bic.w	r2, r2, #8
 80092c8:	601a      	str	r2, [r3, #0]
}
 80092ca:	3714      	adds	r7, #20
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd90      	pop	{r4, r7, pc}
 80092d0:	3e19999a 	.word	0x3e19999a

080092d4 <_ZN7VL53L0X12getAltitudeMEv>:

float VL53L0X::getAltitudeM(void)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
	return static_cast<float>(this->distance)/1000.0F;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 3718 	ldr.w	r3, [r3, #1816]	; 0x718
 80092e2:	ee07 3a90 	vmov	s15, r3
 80092e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ea:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8009304 <_ZN7VL53L0X12getAltitudeMEv+0x30>
 80092ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80092f2:	eef0 7a66 	vmov.f32	s15, s13
}
 80092f6:	eeb0 0a67 	vmov.f32	s0, s15
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr
 8009304:	447a0000 	.word	0x447a0000

08009308 <_ZN7VL53L0X9getMPCoutEv>:

float VL53L0X::getMPCout(void)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
	return this->mpc_out;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	ee07 3a90 	vmov	s15, r3
}
 800931c:	eeb0 0a67 	vmov.f32	s0, s15
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
	...

0800932c <_ZN7VL53L0X19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
{
	return this->distance;
}

const char* VL53L0X::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 800932c:	b590      	push	{r4, r7, lr}
 800932e:	b087      	sub	sp, #28
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	3304      	adds	r3, #4
 800933a:	2200      	movs	r2, #0
 800933c:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::VL53_DISTANCE)!=senorsList.end())
 800933e:	2314      	movs	r3, #20
 8009340:	613b      	str	r3, [r7, #16]
 8009342:	f107 0310 	add.w	r3, r7, #16
 8009346:	4619      	mov	r1, r3
 8009348:	6838      	ldr	r0, [r7, #0]
 800934a:	f7fb fc7d 	bl	8004c48 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 800934e:	4603      	mov	r3, r0
 8009350:	60fb      	str	r3, [r7, #12]
 8009352:	6838      	ldr	r0, [r7, #0]
 8009354:	f7fb fc91 	bl	8004c7a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8009358:	4603      	mov	r3, r0
 800935a:	617b      	str	r3, [r7, #20]
 800935c:	f107 0214 	add.w	r2, r7, #20
 8009360:	f107 030c 	add.w	r3, r7, #12
 8009364:	4611      	mov	r1, r2
 8009366:	4618      	mov	r0, r3
 8009368:	f7fb fc94 	bl	8004c94 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d01a      	beq.n	80093a8 <_ZN7VL53L0X19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x7c>
	{
		strcat(packet,toCharArray(distance));
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	1d1c      	adds	r4, r3, #4
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 3718 	ldr.w	r3, [r3, #1816]	; 0x718
 800937e:	4619      	mov	r1, r3
 8009380:	4610      	mov	r0, r2
 8009382:	f7fa fc6f 	bl	8003c64 <_ZN15PrintableSensor11toCharArrayEi>
 8009386:	4603      	mov	r3, r0
 8009388:	4619      	mov	r1, r3
 800938a:	4620      	mov	r0, r4
 800938c:	f010 fff6 	bl	801a37c <strcat>
		strcat(packet,",");
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	1d1c      	adds	r4, r3, #4
 8009394:	4620      	mov	r0, r4
 8009396:	f7f6 ff1b 	bl	80001d0 <strlen>
 800939a:	4603      	mov	r3, r0
 800939c:	4423      	add	r3, r4
 800939e:	4905      	ldr	r1, [pc, #20]	; (80093b4 <_ZN7VL53L0X19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x88>)
 80093a0:	461a      	mov	r2, r3
 80093a2:	460b      	mov	r3, r1
 80093a4:	881b      	ldrh	r3, [r3, #0]
 80093a6:	8013      	strh	r3, [r2, #0]
	}
	return packet;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	3304      	adds	r3, #4
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	371c      	adds	r7, #28
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd90      	pop	{r4, r7, pc}
 80093b4:	0801a6f8 	.word	0x0801a6f8

080093b8 <_ZSt6fill_nIPfifET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 80093b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80093c4:	68fc      	ldr	r4, [r7, #12]
 80093c6:	68b8      	ldr	r0, [r7, #8]
 80093c8:	f7ff fd11 	bl	8008dee <_ZSt17__size_to_integeri>
 80093cc:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 80093ce:	f107 030c 	add.w	r3, r7, #12
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 f80b 	bl	80093ee <_ZSt19__iterator_categoryIPfENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80093d8:	4633      	mov	r3, r6
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	4629      	mov	r1, r5
 80093de:	4620      	mov	r0, r4
 80093e0:	f000 f810 	bl	8009404 <_ZSt10__fill_n_aIPfifET_S1_T0_RKT1_St26random_access_iterator_tag>
 80093e4:	4603      	mov	r3, r0
    }
 80093e6:	4618      	mov	r0, r3
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080093ee <_ZSt19__iterator_categoryIPfENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80093ee:	b480      	push	{r7}
 80093f0:	b083      	sub	sp, #12
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80093f6:	bf00      	nop
 80093f8:	4618      	mov	r0, r3
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <_ZSt10__fill_n_aIPfifET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
 8009410:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	2b00      	cmp	r3, #0
 8009416:	dc01      	bgt.n	800941c <_ZSt10__fill_n_aIPfifET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	e00c      	b.n	8009436 <_ZSt10__fill_n_aIPfifET_S1_T0_RKT1_St26random_access_iterator_tag+0x32>
      std::__fill_a(__first, __first + __n, __value);
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	4413      	add	r3, r2
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	4619      	mov	r1, r3
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f000 f808 	bl	800943e <_ZSt8__fill_aIPffEvT_S1_RKT0_>
      return __first + __n;
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	4413      	add	r3, r2
    }
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <_ZSt8__fill_aIPffEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 800943e:	b580      	push	{r7, lr}
 8009440:	b084      	sub	sp, #16
 8009442:	af00      	add	r7, sp, #0
 8009444:	60f8      	str	r0, [r7, #12]
 8009446:	60b9      	str	r1, [r7, #8]
 8009448:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	68b9      	ldr	r1, [r7, #8]
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 f804 	bl	800945c <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 8009454:	bf00      	nop
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 800945c:	b480      	push	{r7}
 800945e:	b087      	sub	sp, #28
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	429a      	cmp	r2, r3
 8009474:	d006      	beq.n	8009484 <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x28>
	*__first = __tmp;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	697a      	ldr	r2, [r7, #20]
 800947a:	601a      	str	r2, [r3, #0]
      for (; __first != __last; ++__first)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	3304      	adds	r3, #4
 8009480:	60fb      	str	r3, [r7, #12]
 8009482:	e7f4      	b.n	800946e <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x12>
    }
 8009484:	bf00      	nop
 8009486:	371c      	adds	r7, #28
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009494:	4b0e      	ldr	r3, [pc, #56]	; (80094d0 <HAL_Init+0x40>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a0d      	ldr	r2, [pc, #52]	; (80094d0 <HAL_Init+0x40>)
 800949a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800949e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80094a0:	4b0b      	ldr	r3, [pc, #44]	; (80094d0 <HAL_Init+0x40>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a0a      	ldr	r2, [pc, #40]	; (80094d0 <HAL_Init+0x40>)
 80094a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80094aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80094ac:	4b08      	ldr	r3, [pc, #32]	; (80094d0 <HAL_Init+0x40>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a07      	ldr	r2, [pc, #28]	; (80094d0 <HAL_Init+0x40>)
 80094b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80094b8:	2003      	movs	r0, #3
 80094ba:	f000 fd0e 	bl	8009eda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80094be:	200f      	movs	r0, #15
 80094c0:	f7fa f9ec 	bl	800389c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80094c4:	f7f9 fd7a 	bl	8002fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	40023c00 	.word	0x40023c00

080094d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80094d4:	b480      	push	{r7}
 80094d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80094d8:	4b06      	ldr	r3, [pc, #24]	; (80094f4 <HAL_IncTick+0x20>)
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	461a      	mov	r2, r3
 80094de:	4b06      	ldr	r3, [pc, #24]	; (80094f8 <HAL_IncTick+0x24>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4413      	add	r3, r2
 80094e4:	4a04      	ldr	r2, [pc, #16]	; (80094f8 <HAL_IncTick+0x24>)
 80094e6:	6013      	str	r3, [r2, #0]
}
 80094e8:	bf00      	nop
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	2000000c 	.word	0x2000000c
 80094f8:	20000a60 	.word	0x20000a60

080094fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80094fc:	b480      	push	{r7}
 80094fe:	af00      	add	r7, sp, #0
  return uwTick;
 8009500:	4b03      	ldr	r3, [pc, #12]	; (8009510 <HAL_GetTick+0x14>)
 8009502:	681b      	ldr	r3, [r3, #0]
}
 8009504:	4618      	mov	r0, r3
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	20000a60 	.word	0x20000a60

08009514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800951c:	f7ff ffee 	bl	80094fc <HAL_GetTick>
 8009520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800952c:	d005      	beq.n	800953a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800952e:	4b0a      	ldr	r3, [pc, #40]	; (8009558 <HAL_Delay+0x44>)
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	461a      	mov	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	4413      	add	r3, r2
 8009538:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800953a:	bf00      	nop
 800953c:	f7ff ffde 	bl	80094fc <HAL_GetTick>
 8009540:	4602      	mov	r2, r0
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	429a      	cmp	r2, r3
 800954a:	d8f7      	bhi.n	800953c <HAL_Delay+0x28>
  {
  }
}
 800954c:	bf00      	nop
 800954e:	bf00      	nop
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	2000000c 	.word	0x2000000c

0800955c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d101      	bne.n	8009572 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e033      	b.n	80095da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009576:	2b00      	cmp	r3, #0
 8009578:	d109      	bne.n	800958e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f7f9 fd4a 	bl	8003014 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009592:	f003 0310 	and.w	r3, r3, #16
 8009596:	2b00      	cmp	r3, #0
 8009598:	d118      	bne.n	80095cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80095a2:	f023 0302 	bic.w	r3, r3, #2
 80095a6:	f043 0202 	orr.w	r2, r3, #2
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fa68 	bl	8009a84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095be:	f023 0303 	bic.w	r3, r3, #3
 80095c2:	f043 0201 	orr.w	r2, r3, #1
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	641a      	str	r2, [r3, #64]	; 0x40
 80095ca:	e001      	b.n	80095d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
	...

080095e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b086      	sub	sp, #24
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80095f0:	2300      	movs	r3, #0
 80095f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d101      	bne.n	8009602 <HAL_ADC_Start_DMA+0x1e>
 80095fe:	2302      	movs	r3, #2
 8009600:	e0e9      	b.n	80097d6 <HAL_ADC_Start_DMA+0x1f2>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f003 0301 	and.w	r3, r3, #1
 8009614:	2b01      	cmp	r3, #1
 8009616:	d018      	beq.n	800964a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689a      	ldr	r2, [r3, #8]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f042 0201 	orr.w	r2, r2, #1
 8009626:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009628:	4b6d      	ldr	r3, [pc, #436]	; (80097e0 <HAL_ADC_Start_DMA+0x1fc>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a6d      	ldr	r2, [pc, #436]	; (80097e4 <HAL_ADC_Start_DMA+0x200>)
 800962e:	fba2 2303 	umull	r2, r3, r2, r3
 8009632:	0c9a      	lsrs	r2, r3, #18
 8009634:	4613      	mov	r3, r2
 8009636:	005b      	lsls	r3, r3, #1
 8009638:	4413      	add	r3, r2
 800963a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800963c:	e002      	b.n	8009644 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	3b01      	subs	r3, #1
 8009642:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1f9      	bne.n	800963e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009658:	d107      	bne.n	800966a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	689a      	ldr	r2, [r3, #8]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009668:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	2b01      	cmp	r3, #1
 8009676:	f040 80a1 	bne.w	80097bc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009682:	f023 0301 	bic.w	r3, r3, #1
 8009686:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009698:	2b00      	cmp	r3, #0
 800969a:	d007      	beq.n	80096ac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80096a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80096b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096b8:	d106      	bne.n	80096c8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096be:	f023 0206 	bic.w	r2, r3, #6
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	645a      	str	r2, [r3, #68]	; 0x44
 80096c6:	e002      	b.n	80096ce <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2200      	movs	r2, #0
 80096cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80096d6:	4b44      	ldr	r3, [pc, #272]	; (80097e8 <HAL_ADC_Start_DMA+0x204>)
 80096d8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096de:	4a43      	ldr	r2, [pc, #268]	; (80097ec <HAL_ADC_Start_DMA+0x208>)
 80096e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e6:	4a42      	ldr	r2, [pc, #264]	; (80097f0 <HAL_ADC_Start_DMA+0x20c>)
 80096e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ee:	4a41      	ldr	r2, [pc, #260]	; (80097f4 <HAL_ADC_Start_DMA+0x210>)
 80096f0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80096fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	685a      	ldr	r2, [r3, #4]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800970a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	689a      	ldr	r2, [r3, #8]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800971a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	334c      	adds	r3, #76	; 0x4c
 8009726:	4619      	mov	r1, r3
 8009728:	68ba      	ldr	r2, [r7, #8]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f000 fcb8 	bl	800a0a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	f003 031f 	and.w	r3, r3, #31
 8009738:	2b00      	cmp	r3, #0
 800973a:	d12a      	bne.n	8009792 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a2d      	ldr	r2, [pc, #180]	; (80097f8 <HAL_ADC_Start_DMA+0x214>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d015      	beq.n	8009772 <HAL_ADC_Start_DMA+0x18e>
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a2c      	ldr	r2, [pc, #176]	; (80097fc <HAL_ADC_Start_DMA+0x218>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d105      	bne.n	800975c <HAL_ADC_Start_DMA+0x178>
 8009750:	4b25      	ldr	r3, [pc, #148]	; (80097e8 <HAL_ADC_Start_DMA+0x204>)
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	f003 031f 	and.w	r3, r3, #31
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00a      	beq.n	8009772 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a27      	ldr	r2, [pc, #156]	; (8009800 <HAL_ADC_Start_DMA+0x21c>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d136      	bne.n	80097d4 <HAL_ADC_Start_DMA+0x1f0>
 8009766:	4b20      	ldr	r3, [pc, #128]	; (80097e8 <HAL_ADC_Start_DMA+0x204>)
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	f003 0310 	and.w	r3, r3, #16
 800976e:	2b00      	cmp	r3, #0
 8009770:	d130      	bne.n	80097d4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d129      	bne.n	80097d4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	689a      	ldr	r2, [r3, #8]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800978e:	609a      	str	r2, [r3, #8]
 8009790:	e020      	b.n	80097d4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a18      	ldr	r2, [pc, #96]	; (80097f8 <HAL_ADC_Start_DMA+0x214>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d11b      	bne.n	80097d4 <HAL_ADC_Start_DMA+0x1f0>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d114      	bne.n	80097d4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	689a      	ldr	r2, [r3, #8]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80097b8:	609a      	str	r2, [r3, #8]
 80097ba:	e00b      	b.n	80097d4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c0:	f043 0210 	orr.w	r2, r3, #16
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097cc:	f043 0201 	orr.w	r2, r3, #1
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20000004 	.word	0x20000004
 80097e4:	431bde83 	.word	0x431bde83
 80097e8:	40012300 	.word	0x40012300
 80097ec:	08009c7d 	.word	0x08009c7d
 80097f0:	08009d37 	.word	0x08009d37
 80097f4:	08009d53 	.word	0x08009d53
 80097f8:	40012000 	.word	0x40012000
 80097fc:	40012100 	.word	0x40012100
 8009800:	40012200 	.word	0x40012200

08009804 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800984a:	2300      	movs	r3, #0
 800984c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009854:	2b01      	cmp	r3, #1
 8009856:	d101      	bne.n	800985c <HAL_ADC_ConfigChannel+0x1c>
 8009858:	2302      	movs	r3, #2
 800985a:	e105      	b.n	8009a68 <HAL_ADC_ConfigChannel+0x228>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b09      	cmp	r3, #9
 800986a:	d925      	bls.n	80098b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68d9      	ldr	r1, [r3, #12]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	b29b      	uxth	r3, r3
 8009878:	461a      	mov	r2, r3
 800987a:	4613      	mov	r3, r2
 800987c:	005b      	lsls	r3, r3, #1
 800987e:	4413      	add	r3, r2
 8009880:	3b1e      	subs	r3, #30
 8009882:	2207      	movs	r2, #7
 8009884:	fa02 f303 	lsl.w	r3, r2, r3
 8009888:	43da      	mvns	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	400a      	ands	r2, r1
 8009890:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68d9      	ldr	r1, [r3, #12]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	689a      	ldr	r2, [r3, #8]
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	4618      	mov	r0, r3
 80098a4:	4603      	mov	r3, r0
 80098a6:	005b      	lsls	r3, r3, #1
 80098a8:	4403      	add	r3, r0
 80098aa:	3b1e      	subs	r3, #30
 80098ac:	409a      	lsls	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	430a      	orrs	r2, r1
 80098b4:	60da      	str	r2, [r3, #12]
 80098b6:	e022      	b.n	80098fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	6919      	ldr	r1, [r3, #16]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	461a      	mov	r2, r3
 80098c6:	4613      	mov	r3, r2
 80098c8:	005b      	lsls	r3, r3, #1
 80098ca:	4413      	add	r3, r2
 80098cc:	2207      	movs	r2, #7
 80098ce:	fa02 f303 	lsl.w	r3, r2, r3
 80098d2:	43da      	mvns	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	400a      	ands	r2, r1
 80098da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6919      	ldr	r1, [r3, #16]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	689a      	ldr	r2, [r3, #8]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	4618      	mov	r0, r3
 80098ee:	4603      	mov	r3, r0
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	4403      	add	r3, r0
 80098f4:	409a      	lsls	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	430a      	orrs	r2, r1
 80098fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	2b06      	cmp	r3, #6
 8009904:	d824      	bhi.n	8009950 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	4613      	mov	r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	3b05      	subs	r3, #5
 8009918:	221f      	movs	r2, #31
 800991a:	fa02 f303 	lsl.w	r3, r2, r3
 800991e:	43da      	mvns	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	400a      	ands	r2, r1
 8009926:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	b29b      	uxth	r3, r3
 8009934:	4618      	mov	r0, r3
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	685a      	ldr	r2, [r3, #4]
 800993a:	4613      	mov	r3, r2
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	4413      	add	r3, r2
 8009940:	3b05      	subs	r3, #5
 8009942:	fa00 f203 	lsl.w	r2, r0, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	430a      	orrs	r2, r1
 800994c:	635a      	str	r2, [r3, #52]	; 0x34
 800994e:	e04c      	b.n	80099ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	2b0c      	cmp	r3, #12
 8009956:	d824      	bhi.n	80099a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	685a      	ldr	r2, [r3, #4]
 8009962:	4613      	mov	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4413      	add	r3, r2
 8009968:	3b23      	subs	r3, #35	; 0x23
 800996a:	221f      	movs	r2, #31
 800996c:	fa02 f303 	lsl.w	r3, r2, r3
 8009970:	43da      	mvns	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	400a      	ands	r2, r1
 8009978:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	b29b      	uxth	r3, r3
 8009986:	4618      	mov	r0, r3
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	685a      	ldr	r2, [r3, #4]
 800998c:	4613      	mov	r3, r2
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	4413      	add	r3, r2
 8009992:	3b23      	subs	r3, #35	; 0x23
 8009994:	fa00 f203 	lsl.w	r2, r0, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	430a      	orrs	r2, r1
 800999e:	631a      	str	r2, [r3, #48]	; 0x30
 80099a0:	e023      	b.n	80099ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	4613      	mov	r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4413      	add	r3, r2
 80099b2:	3b41      	subs	r3, #65	; 0x41
 80099b4:	221f      	movs	r2, #31
 80099b6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ba:	43da      	mvns	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	400a      	ands	r2, r1
 80099c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	4618      	mov	r0, r3
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	685a      	ldr	r2, [r3, #4]
 80099d6:	4613      	mov	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4413      	add	r3, r2
 80099dc:	3b41      	subs	r3, #65	; 0x41
 80099de:	fa00 f203 	lsl.w	r2, r0, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	430a      	orrs	r2, r1
 80099e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80099ea:	4b22      	ldr	r3, [pc, #136]	; (8009a74 <HAL_ADC_ConfigChannel+0x234>)
 80099ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a21      	ldr	r2, [pc, #132]	; (8009a78 <HAL_ADC_ConfigChannel+0x238>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d109      	bne.n	8009a0c <HAL_ADC_ConfigChannel+0x1cc>
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b12      	cmp	r3, #18
 80099fe:	d105      	bne.n	8009a0c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a19      	ldr	r2, [pc, #100]	; (8009a78 <HAL_ADC_ConfigChannel+0x238>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d123      	bne.n	8009a5e <HAL_ADC_ConfigChannel+0x21e>
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b10      	cmp	r3, #16
 8009a1c:	d003      	beq.n	8009a26 <HAL_ADC_ConfigChannel+0x1e6>
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b11      	cmp	r3, #17
 8009a24:	d11b      	bne.n	8009a5e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b10      	cmp	r3, #16
 8009a38:	d111      	bne.n	8009a5e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009a3a:	4b10      	ldr	r3, [pc, #64]	; (8009a7c <HAL_ADC_ConfigChannel+0x23c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a10      	ldr	r2, [pc, #64]	; (8009a80 <HAL_ADC_ConfigChannel+0x240>)
 8009a40:	fba2 2303 	umull	r2, r3, r2, r3
 8009a44:	0c9a      	lsrs	r2, r3, #18
 8009a46:	4613      	mov	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4413      	add	r3, r2
 8009a4c:	005b      	lsls	r3, r3, #1
 8009a4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009a50:	e002      	b.n	8009a58 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	3b01      	subs	r3, #1
 8009a56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1f9      	bne.n	8009a52 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr
 8009a74:	40012300 	.word	0x40012300
 8009a78:	40012000 	.word	0x40012000
 8009a7c:	20000004 	.word	0x20000004
 8009a80:	431bde83 	.word	0x431bde83

08009a84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009a8c:	4b79      	ldr	r3, [pc, #484]	; (8009c74 <ADC_Init+0x1f0>)
 8009a8e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	685a      	ldr	r2, [r3, #4]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	431a      	orrs	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ab8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	6859      	ldr	r1, [r3, #4]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	021a      	lsls	r2, r3, #8
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	430a      	orrs	r2, r1
 8009acc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	685a      	ldr	r2, [r3, #4]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009adc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	6859      	ldr	r1, [r3, #4]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	689a      	ldr	r2, [r3, #8]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	430a      	orrs	r2, r1
 8009aee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	689a      	ldr	r2, [r3, #8]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009afe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	6899      	ldr	r1, [r3, #8]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	68da      	ldr	r2, [r3, #12]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	430a      	orrs	r2, r1
 8009b10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b16:	4a58      	ldr	r2, [pc, #352]	; (8009c78 <ADC_Init+0x1f4>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d022      	beq.n	8009b62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	689a      	ldr	r2, [r3, #8]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009b2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6899      	ldr	r1, [r3, #8]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	430a      	orrs	r2, r1
 8009b3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	689a      	ldr	r2, [r3, #8]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009b4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	6899      	ldr	r1, [r3, #8]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	430a      	orrs	r2, r1
 8009b5e:	609a      	str	r2, [r3, #8]
 8009b60:	e00f      	b.n	8009b82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	689a      	ldr	r2, [r3, #8]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009b70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	689a      	ldr	r2, [r3, #8]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009b80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	689a      	ldr	r2, [r3, #8]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f022 0202 	bic.w	r2, r2, #2
 8009b90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	6899      	ldr	r1, [r3, #8]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	7e1b      	ldrb	r3, [r3, #24]
 8009b9c:	005a      	lsls	r2, r3, #1
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d01b      	beq.n	8009be8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bbe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	685a      	ldr	r2, [r3, #4]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009bce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	6859      	ldr	r1, [r3, #4]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	035a      	lsls	r2, r3, #13
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	430a      	orrs	r2, r1
 8009be4:	605a      	str	r2, [r3, #4]
 8009be6:	e007      	b.n	8009bf8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	685a      	ldr	r2, [r3, #4]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bf6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009c06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	69db      	ldr	r3, [r3, #28]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	051a      	lsls	r2, r3, #20
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	430a      	orrs	r2, r1
 8009c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	689a      	ldr	r2, [r3, #8]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009c2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	6899      	ldr	r1, [r3, #8]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c3a:	025a      	lsls	r2, r3, #9
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	430a      	orrs	r2, r1
 8009c42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	689a      	ldr	r2, [r3, #8]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	6899      	ldr	r1, [r3, #8]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	695b      	ldr	r3, [r3, #20]
 8009c5e:	029a      	lsls	r2, r3, #10
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	430a      	orrs	r2, r1
 8009c66:	609a      	str	r2, [r3, #8]
}
 8009c68:	bf00      	nop
 8009c6a:	3714      	adds	r7, #20
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr
 8009c74:	40012300 	.word	0x40012300
 8009c78:	0f000001 	.word	0x0f000001

08009c7c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c88:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d13c      	bne.n	8009d10 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d12b      	bne.n	8009d08 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d127      	bne.n	8009d08 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cbe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d006      	beq.n	8009cd4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d119      	bne.n	8009d08 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	685a      	ldr	r2, [r3, #4]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f022 0220 	bic.w	r2, r2, #32
 8009ce2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d105      	bne.n	8009d08 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d00:	f043 0201 	orr.w	r2, r3, #1
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f7ff fd7b 	bl	8009804 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009d0e:	e00e      	b.n	8009d2e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d14:	f003 0310 	and.w	r3, r3, #16
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d003      	beq.n	8009d24 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f7ff fd85 	bl	800982c <HAL_ADC_ErrorCallback>
}
 8009d22:	e004      	b.n	8009d2e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	4798      	blx	r3
}
 8009d2e:	bf00      	nop
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b084      	sub	sp, #16
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d42:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f7ff fd67 	bl	8009818 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009d4a:	bf00      	nop
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b084      	sub	sp, #16
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2240      	movs	r2, #64	; 0x40
 8009d64:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d6a:	f043 0204 	orr.w	r2, r3, #4
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f7ff fd5a 	bl	800982c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009d78:	bf00      	nop
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <__NVIC_SetPriorityGrouping>:
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f003 0307 	and.w	r3, r3, #7
 8009d8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009d90:	4b0c      	ldr	r3, [pc, #48]	; (8009dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009d9c:	4013      	ands	r3, r2
 8009d9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009db2:	4a04      	ldr	r2, [pc, #16]	; (8009dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	60d3      	str	r3, [r2, #12]
}
 8009db8:	bf00      	nop
 8009dba:	3714      	adds	r7, #20
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr
 8009dc4:	e000ed00 	.word	0xe000ed00

08009dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009dcc:	4b04      	ldr	r3, [pc, #16]	; (8009de0 <__NVIC_GetPriorityGrouping+0x18>)
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	0a1b      	lsrs	r3, r3, #8
 8009dd2:	f003 0307 	and.w	r3, r3, #7
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	e000ed00 	.word	0xe000ed00

08009de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	4603      	mov	r3, r0
 8009dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	db0b      	blt.n	8009e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009df6:	79fb      	ldrb	r3, [r7, #7]
 8009df8:	f003 021f 	and.w	r2, r3, #31
 8009dfc:	4907      	ldr	r1, [pc, #28]	; (8009e1c <__NVIC_EnableIRQ+0x38>)
 8009dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e02:	095b      	lsrs	r3, r3, #5
 8009e04:	2001      	movs	r0, #1
 8009e06:	fa00 f202 	lsl.w	r2, r0, r2
 8009e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009e0e:	bf00      	nop
 8009e10:	370c      	adds	r7, #12
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	e000e100 	.word	0xe000e100

08009e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	4603      	mov	r3, r0
 8009e28:	6039      	str	r1, [r7, #0]
 8009e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	db0a      	blt.n	8009e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	b2da      	uxtb	r2, r3
 8009e38:	490c      	ldr	r1, [pc, #48]	; (8009e6c <__NVIC_SetPriority+0x4c>)
 8009e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e3e:	0112      	lsls	r2, r2, #4
 8009e40:	b2d2      	uxtb	r2, r2
 8009e42:	440b      	add	r3, r1
 8009e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009e48:	e00a      	b.n	8009e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	b2da      	uxtb	r2, r3
 8009e4e:	4908      	ldr	r1, [pc, #32]	; (8009e70 <__NVIC_SetPriority+0x50>)
 8009e50:	79fb      	ldrb	r3, [r7, #7]
 8009e52:	f003 030f 	and.w	r3, r3, #15
 8009e56:	3b04      	subs	r3, #4
 8009e58:	0112      	lsls	r2, r2, #4
 8009e5a:	b2d2      	uxtb	r2, r2
 8009e5c:	440b      	add	r3, r1
 8009e5e:	761a      	strb	r2, [r3, #24]
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr
 8009e6c:	e000e100 	.word	0xe000e100
 8009e70:	e000ed00 	.word	0xe000ed00

08009e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b089      	sub	sp, #36	; 0x24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f003 0307 	and.w	r3, r3, #7
 8009e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	f1c3 0307 	rsb	r3, r3, #7
 8009e8e:	2b04      	cmp	r3, #4
 8009e90:	bf28      	it	cs
 8009e92:	2304      	movcs	r3, #4
 8009e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	3304      	adds	r3, #4
 8009e9a:	2b06      	cmp	r3, #6
 8009e9c:	d902      	bls.n	8009ea4 <NVIC_EncodePriority+0x30>
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	3b03      	subs	r3, #3
 8009ea2:	e000      	b.n	8009ea6 <NVIC_EncodePriority+0x32>
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb2:	43da      	mvns	r2, r3
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	401a      	ands	r2, r3
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ec6:	43d9      	mvns	r1, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ecc:	4313      	orrs	r3, r2
         );
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3724      	adds	r7, #36	; 0x24
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr

08009eda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b082      	sub	sp, #8
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7ff ff4c 	bl	8009d80 <__NVIC_SetPriorityGrouping>
}
 8009ee8:	bf00      	nop
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b086      	sub	sp, #24
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	607a      	str	r2, [r7, #4]
 8009efc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009efe:	2300      	movs	r3, #0
 8009f00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009f02:	f7ff ff61 	bl	8009dc8 <__NVIC_GetPriorityGrouping>
 8009f06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	68b9      	ldr	r1, [r7, #8]
 8009f0c:	6978      	ldr	r0, [r7, #20]
 8009f0e:	f7ff ffb1 	bl	8009e74 <NVIC_EncodePriority>
 8009f12:	4602      	mov	r2, r0
 8009f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f18:	4611      	mov	r1, r2
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7ff ff80 	bl	8009e20 <__NVIC_SetPriority>
}
 8009f20:	bf00      	nop
 8009f22:	3718      	adds	r7, #24
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	4603      	mov	r3, r0
 8009f30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7ff ff54 	bl	8009de4 <__NVIC_EnableIRQ>
}
 8009f3c:	bf00      	nop
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009f50:	f7ff fad4 	bl	80094fc <HAL_GetTick>
 8009f54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d101      	bne.n	8009f60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e099      	b.n	800a094 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2202      	movs	r2, #2
 8009f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f022 0201 	bic.w	r2, r2, #1
 8009f7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009f80:	e00f      	b.n	8009fa2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009f82:	f7ff fabb 	bl	80094fc <HAL_GetTick>
 8009f86:	4602      	mov	r2, r0
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	2b05      	cmp	r3, #5
 8009f8e:	d908      	bls.n	8009fa2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2220      	movs	r2, #32
 8009f94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2203      	movs	r2, #3
 8009f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	e078      	b.n	800a094 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f003 0301 	and.w	r3, r3, #1
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1e8      	bne.n	8009f82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	4b38      	ldr	r3, [pc, #224]	; (800a09c <HAL_DMA_Init+0x158>)
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	685a      	ldr	r2, [r3, #4]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009fce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	699b      	ldr	r3, [r3, #24]
 8009fe0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009fe6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a1b      	ldr	r3, [r3, #32]
 8009fec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009fee:	697a      	ldr	r2, [r7, #20]
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff8:	2b04      	cmp	r3, #4
 8009ffa:	d107      	bne.n	800a00c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a004:	4313      	orrs	r3, r2
 800a006:	697a      	ldr	r2, [r7, #20]
 800a008:	4313      	orrs	r3, r2
 800a00a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	697a      	ldr	r2, [r7, #20]
 800a012:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	695b      	ldr	r3, [r3, #20]
 800a01a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	f023 0307 	bic.w	r3, r3, #7
 800a022:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a028:	697a      	ldr	r2, [r7, #20]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a032:	2b04      	cmp	r3, #4
 800a034:	d117      	bne.n	800a066 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a03a:	697a      	ldr	r2, [r7, #20]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00e      	beq.n	800a066 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 fb01 	bl	800a650 <DMA_CheckFifoParam>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d008      	beq.n	800a066 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2240      	movs	r2, #64	; 0x40
 800a058:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a062:	2301      	movs	r3, #1
 800a064:	e016      	b.n	800a094 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fab8 	bl	800a5e4 <DMA_CalcBaseAndBitshift>
 800a074:	4603      	mov	r3, r0
 800a076:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a07c:	223f      	movs	r2, #63	; 0x3f
 800a07e:	409a      	lsls	r2, r3
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3718      	adds	r7, #24
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	f010803f 	.word	0xf010803f

0800a0a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
 800a0ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d101      	bne.n	800a0c6 <HAL_DMA_Start_IT+0x26>
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	e040      	b.n	800a148 <HAL_DMA_Start_IT+0xa8>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d12f      	bne.n	800a13a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2202      	movs	r2, #2
 800a0de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	68b9      	ldr	r1, [r7, #8]
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 fa4a 	bl	800a588 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0f8:	223f      	movs	r2, #63	; 0x3f
 800a0fa:	409a      	lsls	r2, r3
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f042 0216 	orr.w	r2, r2, #22
 800a10e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a114:	2b00      	cmp	r3, #0
 800a116:	d007      	beq.n	800a128 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f042 0208 	orr.w	r2, r2, #8
 800a126:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f042 0201 	orr.w	r2, r2, #1
 800a136:	601a      	str	r2, [r3, #0]
 800a138:	e005      	b.n	800a146 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a142:	2302      	movs	r3, #2
 800a144:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a146:	7dfb      	ldrb	r3, [r7, #23]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3718      	adds	r7, #24
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a15c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a15e:	f7ff f9cd 	bl	80094fc <HAL_GetTick>
 800a162:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d008      	beq.n	800a182 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2280      	movs	r2, #128	; 0x80
 800a174:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e052      	b.n	800a228 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f022 0216 	bic.w	r2, r2, #22
 800a190:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	695a      	ldr	r2, [r3, #20]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d103      	bne.n	800a1b2 <HAL_DMA_Abort+0x62>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d007      	beq.n	800a1c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f022 0208 	bic.w	r2, r2, #8
 800a1c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f022 0201 	bic.w	r2, r2, #1
 800a1d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a1d2:	e013      	b.n	800a1fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a1d4:	f7ff f992 	bl	80094fc <HAL_GetTick>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	1ad3      	subs	r3, r2, r3
 800a1de:	2b05      	cmp	r3, #5
 800a1e0:	d90c      	bls.n	800a1fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2220      	movs	r2, #32
 800a1e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2203      	movs	r2, #3
 800a1ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	e015      	b.n	800a228 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 0301 	and.w	r3, r3, #1
 800a206:	2b00      	cmp	r3, #0
 800a208:	d1e4      	bne.n	800a1d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a20e:	223f      	movs	r2, #63	; 0x3f
 800a210:	409a      	lsls	r2, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	2b02      	cmp	r3, #2
 800a242:	d004      	beq.n	800a24e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2280      	movs	r2, #128	; 0x80
 800a248:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e00c      	b.n	800a268 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2205      	movs	r2, #5
 800a252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 0201 	bic.w	r2, r2, #1
 800a264:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b086      	sub	sp, #24
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a27c:	2300      	movs	r3, #0
 800a27e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a280:	4b8e      	ldr	r3, [pc, #568]	; (800a4bc <HAL_DMA_IRQHandler+0x248>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a8e      	ldr	r2, [pc, #568]	; (800a4c0 <HAL_DMA_IRQHandler+0x24c>)
 800a286:	fba2 2303 	umull	r2, r3, r2, r3
 800a28a:	0a9b      	lsrs	r3, r3, #10
 800a28c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a292:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a29e:	2208      	movs	r2, #8
 800a2a0:	409a      	lsls	r2, r3
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d01a      	beq.n	800a2e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 0304 	and.w	r3, r3, #4
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d013      	beq.n	800a2e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f022 0204 	bic.w	r2, r2, #4
 800a2c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2cc:	2208      	movs	r2, #8
 800a2ce:	409a      	lsls	r2, r3
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2d8:	f043 0201 	orr.w	r2, r3, #1
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	409a      	lsls	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d012      	beq.n	800a316 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	695b      	ldr	r3, [r3, #20]
 800a2f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00b      	beq.n	800a316 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a302:	2201      	movs	r2, #1
 800a304:	409a      	lsls	r2, r3
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a30e:	f043 0202 	orr.w	r2, r3, #2
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a31a:	2204      	movs	r2, #4
 800a31c:	409a      	lsls	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	4013      	ands	r3, r2
 800a322:	2b00      	cmp	r3, #0
 800a324:	d012      	beq.n	800a34c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 0302 	and.w	r3, r3, #2
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00b      	beq.n	800a34c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a338:	2204      	movs	r2, #4
 800a33a:	409a      	lsls	r2, r3
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a344:	f043 0204 	orr.w	r2, r3, #4
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a350:	2210      	movs	r2, #16
 800a352:	409a      	lsls	r2, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	4013      	ands	r3, r2
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d043      	beq.n	800a3e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 0308 	and.w	r3, r3, #8
 800a366:	2b00      	cmp	r3, #0
 800a368:	d03c      	beq.n	800a3e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a36e:	2210      	movs	r2, #16
 800a370:	409a      	lsls	r2, r3
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a380:	2b00      	cmp	r3, #0
 800a382:	d018      	beq.n	800a3b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d108      	bne.n	800a3a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a396:	2b00      	cmp	r3, #0
 800a398:	d024      	beq.n	800a3e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	4798      	blx	r3
 800a3a2:	e01f      	b.n	800a3e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d01b      	beq.n	800a3e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	4798      	blx	r3
 800a3b4:	e016      	b.n	800a3e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d107      	bne.n	800a3d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f022 0208 	bic.w	r2, r2, #8
 800a3d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d003      	beq.n	800a3e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3e8:	2220      	movs	r2, #32
 800a3ea:	409a      	lsls	r2, r3
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	4013      	ands	r3, r2
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f000 808f 	beq.w	800a514 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 0310 	and.w	r3, r3, #16
 800a400:	2b00      	cmp	r3, #0
 800a402:	f000 8087 	beq.w	800a514 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a40a:	2220      	movs	r2, #32
 800a40c:	409a      	lsls	r2, r3
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	2b05      	cmp	r3, #5
 800a41c:	d136      	bne.n	800a48c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f022 0216 	bic.w	r2, r2, #22
 800a42c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	695a      	ldr	r2, [r3, #20]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a43c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a442:	2b00      	cmp	r3, #0
 800a444:	d103      	bne.n	800a44e <HAL_DMA_IRQHandler+0x1da>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d007      	beq.n	800a45e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f022 0208 	bic.w	r2, r2, #8
 800a45c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a462:	223f      	movs	r2, #63	; 0x3f
 800a464:	409a      	lsls	r2, r3
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2201      	movs	r2, #1
 800a46e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d07e      	beq.n	800a580 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	4798      	blx	r3
        }
        return;
 800a48a:	e079      	b.n	800a580 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a496:	2b00      	cmp	r3, #0
 800a498:	d01d      	beq.n	800a4d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10d      	bne.n	800a4c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d031      	beq.n	800a514 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	4798      	blx	r3
 800a4b8:	e02c      	b.n	800a514 <HAL_DMA_IRQHandler+0x2a0>
 800a4ba:	bf00      	nop
 800a4bc:	20000004 	.word	0x20000004
 800a4c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d023      	beq.n	800a514 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	4798      	blx	r3
 800a4d4:	e01e      	b.n	800a514 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10f      	bne.n	800a504 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f022 0210 	bic.w	r2, r2, #16
 800a4f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d003      	beq.n	800a514 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d032      	beq.n	800a582 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a520:	f003 0301 	and.w	r3, r3, #1
 800a524:	2b00      	cmp	r3, #0
 800a526:	d022      	beq.n	800a56e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2205      	movs	r2, #5
 800a52c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f022 0201 	bic.w	r2, r2, #1
 800a53e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	3301      	adds	r3, #1
 800a544:	60bb      	str	r3, [r7, #8]
 800a546:	697a      	ldr	r2, [r7, #20]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d307      	bcc.n	800a55c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 0301 	and.w	r3, r3, #1
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1f2      	bne.n	800a540 <HAL_DMA_IRQHandler+0x2cc>
 800a55a:	e000      	b.n	800a55e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800a55c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a572:	2b00      	cmp	r3, #0
 800a574:	d005      	beq.n	800a582 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	4798      	blx	r3
 800a57e:	e000      	b.n	800a582 <HAL_DMA_IRQHandler+0x30e>
        return;
 800a580:	bf00      	nop
    }
  }
}
 800a582:	3718      	adds	r7, #24
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
 800a594:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a5a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	683a      	ldr	r2, [r7, #0]
 800a5ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	2b40      	cmp	r3, #64	; 0x40
 800a5b4:	d108      	bne.n	800a5c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a5c6:	e007      	b.n	800a5d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	60da      	str	r2, [r3, #12]
}
 800a5d8:	bf00      	nop
 800a5da:	3714      	adds	r7, #20
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	3b10      	subs	r3, #16
 800a5f4:	4a14      	ldr	r2, [pc, #80]	; (800a648 <DMA_CalcBaseAndBitshift+0x64>)
 800a5f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5fa:	091b      	lsrs	r3, r3, #4
 800a5fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a5fe:	4a13      	ldr	r2, [pc, #76]	; (800a64c <DMA_CalcBaseAndBitshift+0x68>)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	4413      	add	r3, r2
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	461a      	mov	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2b03      	cmp	r3, #3
 800a610:	d909      	bls.n	800a626 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a61a:	f023 0303 	bic.w	r3, r3, #3
 800a61e:	1d1a      	adds	r2, r3, #4
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	659a      	str	r2, [r3, #88]	; 0x58
 800a624:	e007      	b.n	800a636 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a62e:	f023 0303 	bic.w	r3, r3, #3
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3714      	adds	r7, #20
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	aaaaaaab 	.word	0xaaaaaaab
 800a64c:	0802e798 	.word	0x0802e798

0800a650 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a658:	2300      	movs	r3, #0
 800a65a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a660:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d11f      	bne.n	800a6aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	2b03      	cmp	r3, #3
 800a66e:	d856      	bhi.n	800a71e <DMA_CheckFifoParam+0xce>
 800a670:	a201      	add	r2, pc, #4	; (adr r2, 800a678 <DMA_CheckFifoParam+0x28>)
 800a672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a676:	bf00      	nop
 800a678:	0800a689 	.word	0x0800a689
 800a67c:	0800a69b 	.word	0x0800a69b
 800a680:	0800a689 	.word	0x0800a689
 800a684:	0800a71f 	.word	0x0800a71f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a690:	2b00      	cmp	r3, #0
 800a692:	d046      	beq.n	800a722 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a698:	e043      	b.n	800a722 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a69e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a6a2:	d140      	bne.n	800a726 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a6a8:	e03d      	b.n	800a726 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	699b      	ldr	r3, [r3, #24]
 800a6ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6b2:	d121      	bne.n	800a6f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	d837      	bhi.n	800a72a <DMA_CheckFifoParam+0xda>
 800a6ba:	a201      	add	r2, pc, #4	; (adr r2, 800a6c0 <DMA_CheckFifoParam+0x70>)
 800a6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c0:	0800a6d1 	.word	0x0800a6d1
 800a6c4:	0800a6d7 	.word	0x0800a6d7
 800a6c8:	0800a6d1 	.word	0x0800a6d1
 800a6cc:	0800a6e9 	.word	0x0800a6e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a6d4:	e030      	b.n	800a738 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d025      	beq.n	800a72e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a6e6:	e022      	b.n	800a72e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a6f0:	d11f      	bne.n	800a732 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a6f6:	e01c      	b.n	800a732 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	2b02      	cmp	r3, #2
 800a6fc:	d903      	bls.n	800a706 <DMA_CheckFifoParam+0xb6>
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	2b03      	cmp	r3, #3
 800a702:	d003      	beq.n	800a70c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a704:	e018      	b.n	800a738 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	73fb      	strb	r3, [r7, #15]
      break;
 800a70a:	e015      	b.n	800a738 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a714:	2b00      	cmp	r3, #0
 800a716:	d00e      	beq.n	800a736 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	73fb      	strb	r3, [r7, #15]
      break;
 800a71c:	e00b      	b.n	800a736 <DMA_CheckFifoParam+0xe6>
      break;
 800a71e:	bf00      	nop
 800a720:	e00a      	b.n	800a738 <DMA_CheckFifoParam+0xe8>
      break;
 800a722:	bf00      	nop
 800a724:	e008      	b.n	800a738 <DMA_CheckFifoParam+0xe8>
      break;
 800a726:	bf00      	nop
 800a728:	e006      	b.n	800a738 <DMA_CheckFifoParam+0xe8>
      break;
 800a72a:	bf00      	nop
 800a72c:	e004      	b.n	800a738 <DMA_CheckFifoParam+0xe8>
      break;
 800a72e:	bf00      	nop
 800a730:	e002      	b.n	800a738 <DMA_CheckFifoParam+0xe8>
      break;   
 800a732:	bf00      	nop
 800a734:	e000      	b.n	800a738 <DMA_CheckFifoParam+0xe8>
      break;
 800a736:	bf00      	nop
    }
  } 
  
  return status; 
 800a738:	7bfb      	ldrb	r3, [r7, #15]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3714      	adds	r7, #20
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop

0800a748 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a75a:	4b23      	ldr	r3, [pc, #140]	; (800a7e8 <HAL_FLASH_Program+0xa0>)
 800a75c:	7e1b      	ldrb	r3, [r3, #24]
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d101      	bne.n	800a766 <HAL_FLASH_Program+0x1e>
 800a762:	2302      	movs	r3, #2
 800a764:	e03b      	b.n	800a7de <HAL_FLASH_Program+0x96>
 800a766:	4b20      	ldr	r3, [pc, #128]	; (800a7e8 <HAL_FLASH_Program+0xa0>)
 800a768:	2201      	movs	r2, #1
 800a76a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a76c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a770:	f000 f87c 	bl	800a86c <FLASH_WaitForLastOperation>
 800a774:	4603      	mov	r3, r0
 800a776:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800a778:	7dfb      	ldrb	r3, [r7, #23]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d12b      	bne.n	800a7d6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d105      	bne.n	800a790 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800a784:	783b      	ldrb	r3, [r7, #0]
 800a786:	4619      	mov	r1, r3
 800a788:	68b8      	ldr	r0, [r7, #8]
 800a78a:	f000 f927 	bl	800a9dc <FLASH_Program_Byte>
 800a78e:	e016      	b.n	800a7be <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2b01      	cmp	r3, #1
 800a794:	d105      	bne.n	800a7a2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800a796:	883b      	ldrh	r3, [r7, #0]
 800a798:	4619      	mov	r1, r3
 800a79a:	68b8      	ldr	r0, [r7, #8]
 800a79c:	f000 f8fa 	bl	800a994 <FLASH_Program_HalfWord>
 800a7a0:	e00d      	b.n	800a7be <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d105      	bne.n	800a7b4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	68b8      	ldr	r0, [r7, #8]
 800a7ae:	f000 f8cf 	bl	800a950 <FLASH_Program_Word>
 800a7b2:	e004      	b.n	800a7be <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800a7b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7b8:	68b8      	ldr	r0, [r7, #8]
 800a7ba:	f000 f897 	bl	800a8ec <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a7be:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a7c2:	f000 f853 	bl	800a86c <FLASH_WaitForLastOperation>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800a7ca:	4b08      	ldr	r3, [pc, #32]	; (800a7ec <HAL_FLASH_Program+0xa4>)
 800a7cc:	691b      	ldr	r3, [r3, #16]
 800a7ce:	4a07      	ldr	r2, [pc, #28]	; (800a7ec <HAL_FLASH_Program+0xa4>)
 800a7d0:	f023 0301 	bic.w	r3, r3, #1
 800a7d4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a7d6:	4b04      	ldr	r3, [pc, #16]	; (800a7e8 <HAL_FLASH_Program+0xa0>)
 800a7d8:	2200      	movs	r2, #0
 800a7da:	761a      	strb	r2, [r3, #24]
  
  return status;
 800a7dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3718      	adds	r7, #24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	20000a64 	.word	0x20000a64
 800a7ec:	40023c00 	.word	0x40023c00

0800a7f0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a7fa:	4b0b      	ldr	r3, [pc, #44]	; (800a828 <HAL_FLASH_Unlock+0x38>)
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	da0b      	bge.n	800a81a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a802:	4b09      	ldr	r3, [pc, #36]	; (800a828 <HAL_FLASH_Unlock+0x38>)
 800a804:	4a09      	ldr	r2, [pc, #36]	; (800a82c <HAL_FLASH_Unlock+0x3c>)
 800a806:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a808:	4b07      	ldr	r3, [pc, #28]	; (800a828 <HAL_FLASH_Unlock+0x38>)
 800a80a:	4a09      	ldr	r2, [pc, #36]	; (800a830 <HAL_FLASH_Unlock+0x40>)
 800a80c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a80e:	4b06      	ldr	r3, [pc, #24]	; (800a828 <HAL_FLASH_Unlock+0x38>)
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	2b00      	cmp	r3, #0
 800a814:	da01      	bge.n	800a81a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800a81a:	79fb      	ldrb	r3, [r7, #7]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr
 800a828:	40023c00 	.word	0x40023c00
 800a82c:	45670123 	.word	0x45670123
 800a830:	cdef89ab 	.word	0xcdef89ab

0800a834 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a834:	b480      	push	{r7}
 800a836:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800a838:	4b05      	ldr	r3, [pc, #20]	; (800a850 <HAL_FLASH_Lock+0x1c>)
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	4a04      	ldr	r2, [pc, #16]	; (800a850 <HAL_FLASH_Lock+0x1c>)
 800a83e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a842:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr
 800a850:	40023c00 	.word	0x40023c00

0800a854 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800a854:	b480      	push	{r7}
 800a856:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800a858:	4b03      	ldr	r3, [pc, #12]	; (800a868 <HAL_FLASH_GetError+0x14>)
 800a85a:	69db      	ldr	r3, [r3, #28]
}  
 800a85c:	4618      	mov	r0, r3
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	20000a64 	.word	0x20000a64

0800a86c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a874:	2300      	movs	r3, #0
 800a876:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a878:	4b1a      	ldr	r3, [pc, #104]	; (800a8e4 <FLASH_WaitForLastOperation+0x78>)
 800a87a:	2200      	movs	r2, #0
 800a87c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800a87e:	f7fe fe3d 	bl	80094fc <HAL_GetTick>
 800a882:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a884:	e010      	b.n	800a8a8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a88c:	d00c      	beq.n	800a8a8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d007      	beq.n	800a8a4 <FLASH_WaitForLastOperation+0x38>
 800a894:	f7fe fe32 	bl	80094fc <HAL_GetTick>
 800a898:	4602      	mov	r2, r0
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	1ad3      	subs	r3, r2, r3
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d201      	bcs.n	800a8a8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e019      	b.n	800a8dc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a8a8:	4b0f      	ldr	r3, [pc, #60]	; (800a8e8 <FLASH_WaitForLastOperation+0x7c>)
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1e8      	bne.n	800a886 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a8b4:	4b0c      	ldr	r3, [pc, #48]	; (800a8e8 <FLASH_WaitForLastOperation+0x7c>)
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	f003 0301 	and.w	r3, r3, #1
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d002      	beq.n	800a8c6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a8c0:	4b09      	ldr	r3, [pc, #36]	; (800a8e8 <FLASH_WaitForLastOperation+0x7c>)
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a8c6:	4b08      	ldr	r3, [pc, #32]	; (800a8e8 <FLASH_WaitForLastOperation+0x7c>)
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d003      	beq.n	800a8da <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a8d2:	f000 f8a5 	bl	800aa20 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e000      	b.n	800a8dc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800a8da:	2300      	movs	r3, #0
  
}  
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	20000a64 	.word	0x20000a64
 800a8e8:	40023c00 	.word	0x40023c00

0800a8ec <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b085      	sub	sp, #20
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a8f8:	4b14      	ldr	r3, [pc, #80]	; (800a94c <FLASH_Program_DoubleWord+0x60>)
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	4a13      	ldr	r2, [pc, #76]	; (800a94c <FLASH_Program_DoubleWord+0x60>)
 800a8fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a902:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800a904:	4b11      	ldr	r3, [pc, #68]	; (800a94c <FLASH_Program_DoubleWord+0x60>)
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	4a10      	ldr	r2, [pc, #64]	; (800a94c <FLASH_Program_DoubleWord+0x60>)
 800a90a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a90e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a910:	4b0e      	ldr	r3, [pc, #56]	; (800a94c <FLASH_Program_DoubleWord+0x60>)
 800a912:	691b      	ldr	r3, [r3, #16]
 800a914:	4a0d      	ldr	r2, [pc, #52]	; (800a94c <FLASH_Program_DoubleWord+0x60>)
 800a916:	f043 0301 	orr.w	r3, r3, #1
 800a91a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	683a      	ldr	r2, [r7, #0]
 800a920:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800a922:	f3bf 8f6f 	isb	sy
}
 800a926:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800a928:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a92c:	f04f 0200 	mov.w	r2, #0
 800a930:	f04f 0300 	mov.w	r3, #0
 800a934:	000a      	movs	r2, r1
 800a936:	2300      	movs	r3, #0
 800a938:	68f9      	ldr	r1, [r7, #12]
 800a93a:	3104      	adds	r1, #4
 800a93c:	4613      	mov	r3, r2
 800a93e:	600b      	str	r3, [r1, #0]
}
 800a940:	bf00      	nop
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr
 800a94c:	40023c00 	.word	0x40023c00

0800a950 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a95a:	4b0d      	ldr	r3, [pc, #52]	; (800a990 <FLASH_Program_Word+0x40>)
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	4a0c      	ldr	r2, [pc, #48]	; (800a990 <FLASH_Program_Word+0x40>)
 800a960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a964:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800a966:	4b0a      	ldr	r3, [pc, #40]	; (800a990 <FLASH_Program_Word+0x40>)
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	4a09      	ldr	r2, [pc, #36]	; (800a990 <FLASH_Program_Word+0x40>)
 800a96c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a970:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a972:	4b07      	ldr	r3, [pc, #28]	; (800a990 <FLASH_Program_Word+0x40>)
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	4a06      	ldr	r2, [pc, #24]	; (800a990 <FLASH_Program_Word+0x40>)
 800a978:	f043 0301 	orr.w	r3, r3, #1
 800a97c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	683a      	ldr	r2, [r7, #0]
 800a982:	601a      	str	r2, [r3, #0]
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	40023c00 	.word	0x40023c00

0800a994 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	460b      	mov	r3, r1
 800a99e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a9a0:	4b0d      	ldr	r3, [pc, #52]	; (800a9d8 <FLASH_Program_HalfWord+0x44>)
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	4a0c      	ldr	r2, [pc, #48]	; (800a9d8 <FLASH_Program_HalfWord+0x44>)
 800a9a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800a9ac:	4b0a      	ldr	r3, [pc, #40]	; (800a9d8 <FLASH_Program_HalfWord+0x44>)
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	4a09      	ldr	r2, [pc, #36]	; (800a9d8 <FLASH_Program_HalfWord+0x44>)
 800a9b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a9b8:	4b07      	ldr	r3, [pc, #28]	; (800a9d8 <FLASH_Program_HalfWord+0x44>)
 800a9ba:	691b      	ldr	r3, [r3, #16]
 800a9bc:	4a06      	ldr	r2, [pc, #24]	; (800a9d8 <FLASH_Program_HalfWord+0x44>)
 800a9be:	f043 0301 	orr.w	r3, r3, #1
 800a9c2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	887a      	ldrh	r2, [r7, #2]
 800a9c8:	801a      	strh	r2, [r3, #0]
}
 800a9ca:	bf00      	nop
 800a9cc:	370c      	adds	r7, #12
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	40023c00 	.word	0x40023c00

0800a9dc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a9e8:	4b0c      	ldr	r3, [pc, #48]	; (800aa1c <FLASH_Program_Byte+0x40>)
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	4a0b      	ldr	r2, [pc, #44]	; (800aa1c <FLASH_Program_Byte+0x40>)
 800a9ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800a9f4:	4b09      	ldr	r3, [pc, #36]	; (800aa1c <FLASH_Program_Byte+0x40>)
 800a9f6:	4a09      	ldr	r2, [pc, #36]	; (800aa1c <FLASH_Program_Byte+0x40>)
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a9fc:	4b07      	ldr	r3, [pc, #28]	; (800aa1c <FLASH_Program_Byte+0x40>)
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	4a06      	ldr	r2, [pc, #24]	; (800aa1c <FLASH_Program_Byte+0x40>)
 800aa02:	f043 0301 	orr.w	r3, r3, #1
 800aa06:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	78fa      	ldrb	r2, [r7, #3]
 800aa0c:	701a      	strb	r2, [r3, #0]
}
 800aa0e:	bf00      	nop
 800aa10:	370c      	adds	r7, #12
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	40023c00 	.word	0x40023c00

0800aa20 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800aa20:	b480      	push	{r7}
 800aa22:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800aa24:	4b27      	ldr	r3, [pc, #156]	; (800aac4 <FLASH_SetErrorCode+0xa4>)
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	f003 0310 	and.w	r3, r3, #16
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d008      	beq.n	800aa42 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800aa30:	4b25      	ldr	r3, [pc, #148]	; (800aac8 <FLASH_SetErrorCode+0xa8>)
 800aa32:	69db      	ldr	r3, [r3, #28]
 800aa34:	f043 0310 	orr.w	r3, r3, #16
 800aa38:	4a23      	ldr	r2, [pc, #140]	; (800aac8 <FLASH_SetErrorCode+0xa8>)
 800aa3a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800aa3c:	4b21      	ldr	r3, [pc, #132]	; (800aac4 <FLASH_SetErrorCode+0xa4>)
 800aa3e:	2210      	movs	r2, #16
 800aa40:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800aa42:	4b20      	ldr	r3, [pc, #128]	; (800aac4 <FLASH_SetErrorCode+0xa4>)
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	f003 0320 	and.w	r3, r3, #32
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d008      	beq.n	800aa60 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800aa4e:	4b1e      	ldr	r3, [pc, #120]	; (800aac8 <FLASH_SetErrorCode+0xa8>)
 800aa50:	69db      	ldr	r3, [r3, #28]
 800aa52:	f043 0308 	orr.w	r3, r3, #8
 800aa56:	4a1c      	ldr	r2, [pc, #112]	; (800aac8 <FLASH_SetErrorCode+0xa8>)
 800aa58:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800aa5a:	4b1a      	ldr	r3, [pc, #104]	; (800aac4 <FLASH_SetErrorCode+0xa4>)
 800aa5c:	2220      	movs	r2, #32
 800aa5e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800aa60:	4b18      	ldr	r3, [pc, #96]	; (800aac4 <FLASH_SetErrorCode+0xa4>)
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d008      	beq.n	800aa7e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800aa6c:	4b16      	ldr	r3, [pc, #88]	; (800aac8 <FLASH_SetErrorCode+0xa8>)
 800aa6e:	69db      	ldr	r3, [r3, #28]
 800aa70:	f043 0304 	orr.w	r3, r3, #4
 800aa74:	4a14      	ldr	r2, [pc, #80]	; (800aac8 <FLASH_SetErrorCode+0xa8>)
 800aa76:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800aa78:	4b12      	ldr	r3, [pc, #72]	; (800aac4 <FLASH_SetErrorCode+0xa4>)
 800aa7a:	2240      	movs	r2, #64	; 0x40
 800aa7c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800aa7e:	4b11      	ldr	r3, [pc, #68]	; (800aac4 <FLASH_SetErrorCode+0xa4>)
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d008      	beq.n	800aa9c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800aa8a:	4b0f      	ldr	r3, [pc, #60]	; (800aac8 <FLASH_SetErrorCode+0xa8>)
 800aa8c:	69db      	ldr	r3, [r3, #28]
 800aa8e:	f043 0302 	orr.w	r3, r3, #2
 800aa92:	4a0d      	ldr	r2, [pc, #52]	; (800aac8 <FLASH_SetErrorCode+0xa8>)
 800aa94:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800aa96:	4b0b      	ldr	r3, [pc, #44]	; (800aac4 <FLASH_SetErrorCode+0xa4>)
 800aa98:	2280      	movs	r2, #128	; 0x80
 800aa9a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800aa9c:	4b09      	ldr	r3, [pc, #36]	; (800aac4 <FLASH_SetErrorCode+0xa4>)
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	f003 0302 	and.w	r3, r3, #2
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d008      	beq.n	800aaba <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800aaa8:	4b07      	ldr	r3, [pc, #28]	; (800aac8 <FLASH_SetErrorCode+0xa8>)
 800aaaa:	69db      	ldr	r3, [r3, #28]
 800aaac:	f043 0320 	orr.w	r3, r3, #32
 800aab0:	4a05      	ldr	r2, [pc, #20]	; (800aac8 <FLASH_SetErrorCode+0xa8>)
 800aab2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800aab4:	4b03      	ldr	r3, [pc, #12]	; (800aac4 <FLASH_SetErrorCode+0xa4>)
 800aab6:	2202      	movs	r2, #2
 800aab8:	60da      	str	r2, [r3, #12]
  }
}
 800aaba:	bf00      	nop
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	40023c00 	.word	0x40023c00
 800aac8:	20000a64 	.word	0x20000a64

0800aacc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aacc:	b480      	push	{r7}
 800aace:	b089      	sub	sp, #36	; 0x24
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800aad6:	2300      	movs	r3, #0
 800aad8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800aada:	2300      	movs	r3, #0
 800aadc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800aade:	2300      	movs	r3, #0
 800aae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aae2:	2300      	movs	r3, #0
 800aae4:	61fb      	str	r3, [r7, #28]
 800aae6:	e16b      	b.n	800adc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800aae8:	2201      	movs	r2, #1
 800aaea:	69fb      	ldr	r3, [r7, #28]
 800aaec:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	697a      	ldr	r2, [r7, #20]
 800aaf8:	4013      	ands	r3, r2
 800aafa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800aafc:	693a      	ldr	r2, [r7, #16]
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	f040 815a 	bne.w	800adba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	f003 0303 	and.w	r3, r3, #3
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d005      	beq.n	800ab1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	d130      	bne.n	800ab80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	005b      	lsls	r3, r3, #1
 800ab28:	2203      	movs	r2, #3
 800ab2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab2e:	43db      	mvns	r3, r3
 800ab30:	69ba      	ldr	r2, [r7, #24]
 800ab32:	4013      	ands	r3, r2
 800ab34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	68da      	ldr	r2, [r3, #12]
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	005b      	lsls	r3, r3, #1
 800ab3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab42:	69ba      	ldr	r2, [r7, #24]
 800ab44:	4313      	orrs	r3, r2
 800ab46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	69ba      	ldr	r2, [r7, #24]
 800ab4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ab54:	2201      	movs	r2, #1
 800ab56:	69fb      	ldr	r3, [r7, #28]
 800ab58:	fa02 f303 	lsl.w	r3, r2, r3
 800ab5c:	43db      	mvns	r3, r3
 800ab5e:	69ba      	ldr	r2, [r7, #24]
 800ab60:	4013      	ands	r3, r2
 800ab62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	091b      	lsrs	r3, r3, #4
 800ab6a:	f003 0201 	and.w	r2, r3, #1
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	fa02 f303 	lsl.w	r3, r2, r3
 800ab74:	69ba      	ldr	r2, [r7, #24]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	69ba      	ldr	r2, [r7, #24]
 800ab7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	f003 0303 	and.w	r3, r3, #3
 800ab88:	2b03      	cmp	r3, #3
 800ab8a:	d017      	beq.n	800abbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	005b      	lsls	r3, r3, #1
 800ab96:	2203      	movs	r2, #3
 800ab98:	fa02 f303 	lsl.w	r3, r2, r3
 800ab9c:	43db      	mvns	r3, r3
 800ab9e:	69ba      	ldr	r2, [r7, #24]
 800aba0:	4013      	ands	r3, r2
 800aba2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	689a      	ldr	r2, [r3, #8]
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	005b      	lsls	r3, r3, #1
 800abac:	fa02 f303 	lsl.w	r3, r2, r3
 800abb0:	69ba      	ldr	r2, [r7, #24]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	69ba      	ldr	r2, [r7, #24]
 800abba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	f003 0303 	and.w	r3, r3, #3
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d123      	bne.n	800ac10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	08da      	lsrs	r2, r3, #3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	3208      	adds	r2, #8
 800abd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	f003 0307 	and.w	r3, r3, #7
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	220f      	movs	r2, #15
 800abe0:	fa02 f303 	lsl.w	r3, r2, r3
 800abe4:	43db      	mvns	r3, r3
 800abe6:	69ba      	ldr	r2, [r7, #24]
 800abe8:	4013      	ands	r3, r2
 800abea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	691a      	ldr	r2, [r3, #16]
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	f003 0307 	and.w	r3, r3, #7
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	fa02 f303 	lsl.w	r3, r2, r3
 800abfc:	69ba      	ldr	r2, [r7, #24]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	08da      	lsrs	r2, r3, #3
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	3208      	adds	r2, #8
 800ac0a:	69b9      	ldr	r1, [r7, #24]
 800ac0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ac16:	69fb      	ldr	r3, [r7, #28]
 800ac18:	005b      	lsls	r3, r3, #1
 800ac1a:	2203      	movs	r2, #3
 800ac1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac20:	43db      	mvns	r3, r3
 800ac22:	69ba      	ldr	r2, [r7, #24]
 800ac24:	4013      	ands	r3, r2
 800ac26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	f003 0203 	and.w	r2, r3, #3
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	005b      	lsls	r3, r3, #1
 800ac34:	fa02 f303 	lsl.w	r3, r2, r3
 800ac38:	69ba      	ldr	r2, [r7, #24]
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	69ba      	ldr	r2, [r7, #24]
 800ac42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f000 80b4 	beq.w	800adba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac52:	2300      	movs	r3, #0
 800ac54:	60fb      	str	r3, [r7, #12]
 800ac56:	4b60      	ldr	r3, [pc, #384]	; (800add8 <HAL_GPIO_Init+0x30c>)
 800ac58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac5a:	4a5f      	ldr	r2, [pc, #380]	; (800add8 <HAL_GPIO_Init+0x30c>)
 800ac5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac60:	6453      	str	r3, [r2, #68]	; 0x44
 800ac62:	4b5d      	ldr	r3, [pc, #372]	; (800add8 <HAL_GPIO_Init+0x30c>)
 800ac64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac6a:	60fb      	str	r3, [r7, #12]
 800ac6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ac6e:	4a5b      	ldr	r2, [pc, #364]	; (800addc <HAL_GPIO_Init+0x310>)
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	089b      	lsrs	r3, r3, #2
 800ac74:	3302      	adds	r3, #2
 800ac76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	f003 0303 	and.w	r3, r3, #3
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	220f      	movs	r2, #15
 800ac86:	fa02 f303 	lsl.w	r3, r2, r3
 800ac8a:	43db      	mvns	r3, r3
 800ac8c:	69ba      	ldr	r2, [r7, #24]
 800ac8e:	4013      	ands	r3, r2
 800ac90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4a52      	ldr	r2, [pc, #328]	; (800ade0 <HAL_GPIO_Init+0x314>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d02b      	beq.n	800acf2 <HAL_GPIO_Init+0x226>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a51      	ldr	r2, [pc, #324]	; (800ade4 <HAL_GPIO_Init+0x318>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d025      	beq.n	800acee <HAL_GPIO_Init+0x222>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a50      	ldr	r2, [pc, #320]	; (800ade8 <HAL_GPIO_Init+0x31c>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d01f      	beq.n	800acea <HAL_GPIO_Init+0x21e>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a4f      	ldr	r2, [pc, #316]	; (800adec <HAL_GPIO_Init+0x320>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d019      	beq.n	800ace6 <HAL_GPIO_Init+0x21a>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a4e      	ldr	r2, [pc, #312]	; (800adf0 <HAL_GPIO_Init+0x324>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d013      	beq.n	800ace2 <HAL_GPIO_Init+0x216>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a4d      	ldr	r2, [pc, #308]	; (800adf4 <HAL_GPIO_Init+0x328>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d00d      	beq.n	800acde <HAL_GPIO_Init+0x212>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a4c      	ldr	r2, [pc, #304]	; (800adf8 <HAL_GPIO_Init+0x32c>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d007      	beq.n	800acda <HAL_GPIO_Init+0x20e>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a4b      	ldr	r2, [pc, #300]	; (800adfc <HAL_GPIO_Init+0x330>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d101      	bne.n	800acd6 <HAL_GPIO_Init+0x20a>
 800acd2:	2307      	movs	r3, #7
 800acd4:	e00e      	b.n	800acf4 <HAL_GPIO_Init+0x228>
 800acd6:	2308      	movs	r3, #8
 800acd8:	e00c      	b.n	800acf4 <HAL_GPIO_Init+0x228>
 800acda:	2306      	movs	r3, #6
 800acdc:	e00a      	b.n	800acf4 <HAL_GPIO_Init+0x228>
 800acde:	2305      	movs	r3, #5
 800ace0:	e008      	b.n	800acf4 <HAL_GPIO_Init+0x228>
 800ace2:	2304      	movs	r3, #4
 800ace4:	e006      	b.n	800acf4 <HAL_GPIO_Init+0x228>
 800ace6:	2303      	movs	r3, #3
 800ace8:	e004      	b.n	800acf4 <HAL_GPIO_Init+0x228>
 800acea:	2302      	movs	r3, #2
 800acec:	e002      	b.n	800acf4 <HAL_GPIO_Init+0x228>
 800acee:	2301      	movs	r3, #1
 800acf0:	e000      	b.n	800acf4 <HAL_GPIO_Init+0x228>
 800acf2:	2300      	movs	r3, #0
 800acf4:	69fa      	ldr	r2, [r7, #28]
 800acf6:	f002 0203 	and.w	r2, r2, #3
 800acfa:	0092      	lsls	r2, r2, #2
 800acfc:	4093      	lsls	r3, r2
 800acfe:	69ba      	ldr	r2, [r7, #24]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ad04:	4935      	ldr	r1, [pc, #212]	; (800addc <HAL_GPIO_Init+0x310>)
 800ad06:	69fb      	ldr	r3, [r7, #28]
 800ad08:	089b      	lsrs	r3, r3, #2
 800ad0a:	3302      	adds	r3, #2
 800ad0c:	69ba      	ldr	r2, [r7, #24]
 800ad0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ad12:	4b3b      	ldr	r3, [pc, #236]	; (800ae00 <HAL_GPIO_Init+0x334>)
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	43db      	mvns	r3, r3
 800ad1c:	69ba      	ldr	r2, [r7, #24]
 800ad1e:	4013      	ands	r3, r2
 800ad20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d003      	beq.n	800ad36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800ad2e:	69ba      	ldr	r2, [r7, #24]
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ad36:	4a32      	ldr	r2, [pc, #200]	; (800ae00 <HAL_GPIO_Init+0x334>)
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ad3c:	4b30      	ldr	r3, [pc, #192]	; (800ae00 <HAL_GPIO_Init+0x334>)
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	43db      	mvns	r3, r3
 800ad46:	69ba      	ldr	r2, [r7, #24]
 800ad48:	4013      	ands	r3, r2
 800ad4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d003      	beq.n	800ad60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800ad58:	69ba      	ldr	r2, [r7, #24]
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ad60:	4a27      	ldr	r2, [pc, #156]	; (800ae00 <HAL_GPIO_Init+0x334>)
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800ad66:	4b26      	ldr	r3, [pc, #152]	; (800ae00 <HAL_GPIO_Init+0x334>)
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	43db      	mvns	r3, r3
 800ad70:	69ba      	ldr	r2, [r7, #24]
 800ad72:	4013      	ands	r3, r2
 800ad74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d003      	beq.n	800ad8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800ad82:	69ba      	ldr	r2, [r7, #24]
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	4313      	orrs	r3, r2
 800ad88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ad8a:	4a1d      	ldr	r2, [pc, #116]	; (800ae00 <HAL_GPIO_Init+0x334>)
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ad90:	4b1b      	ldr	r3, [pc, #108]	; (800ae00 <HAL_GPIO_Init+0x334>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	43db      	mvns	r3, r3
 800ad9a:	69ba      	ldr	r2, [r7, #24]
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d003      	beq.n	800adb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800adac:	69ba      	ldr	r2, [r7, #24]
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800adb4:	4a12      	ldr	r2, [pc, #72]	; (800ae00 <HAL_GPIO_Init+0x334>)
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	3301      	adds	r3, #1
 800adbe:	61fb      	str	r3, [r7, #28]
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	2b0f      	cmp	r3, #15
 800adc4:	f67f ae90 	bls.w	800aae8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800adc8:	bf00      	nop
 800adca:	bf00      	nop
 800adcc:	3724      	adds	r7, #36	; 0x24
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	40023800 	.word	0x40023800
 800addc:	40013800 	.word	0x40013800
 800ade0:	40020000 	.word	0x40020000
 800ade4:	40020400 	.word	0x40020400
 800ade8:	40020800 	.word	0x40020800
 800adec:	40020c00 	.word	0x40020c00
 800adf0:	40021000 	.word	0x40021000
 800adf4:	40021400 	.word	0x40021400
 800adf8:	40021800 	.word	0x40021800
 800adfc:	40021c00 	.word	0x40021c00
 800ae00:	40013c00 	.word	0x40013c00

0800ae04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	807b      	strh	r3, [r7, #2]
 800ae10:	4613      	mov	r3, r2
 800ae12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ae14:	787b      	ldrb	r3, [r7, #1]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d003      	beq.n	800ae22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ae1a:	887a      	ldrh	r2, [r7, #2]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ae20:	e003      	b.n	800ae2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ae22:	887b      	ldrh	r3, [r7, #2]
 800ae24:	041a      	lsls	r2, r3, #16
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	619a      	str	r2, [r3, #24]
}
 800ae2a:	bf00      	nop
 800ae2c:	370c      	adds	r7, #12
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
	...

0800ae38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	4603      	mov	r3, r0
 800ae40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ae42:	4b08      	ldr	r3, [pc, #32]	; (800ae64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ae44:	695a      	ldr	r2, [r3, #20]
 800ae46:	88fb      	ldrh	r3, [r7, #6]
 800ae48:	4013      	ands	r3, r2
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d006      	beq.n	800ae5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ae4e:	4a05      	ldr	r2, [pc, #20]	; (800ae64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ae50:	88fb      	ldrh	r3, [r7, #6]
 800ae52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ae54:	88fb      	ldrh	r3, [r7, #6]
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7f7 fa7c 	bl	8002354 <HAL_GPIO_EXTI_Callback>
  }
}
 800ae5c:	bf00      	nop
 800ae5e:	3708      	adds	r7, #8
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	40013c00 	.word	0x40013c00

0800ae68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ae68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae6a:	b08f      	sub	sp, #60	; 0x3c
 800ae6c:	af0a      	add	r7, sp, #40	; 0x28
 800ae6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d101      	bne.n	800ae7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	e10f      	b.n	800b09a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800ae86:	b2db      	uxtb	r3, r3
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d106      	bne.n	800ae9a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f00d fa7d 	bl	8018394 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2203      	movs	r2, #3
 800ae9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d102      	bne.n	800aeb4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f006 ff2c 	bl	8011d16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	603b      	str	r3, [r7, #0]
 800aec4:	687e      	ldr	r6, [r7, #4]
 800aec6:	466d      	mov	r5, sp
 800aec8:	f106 0410 	add.w	r4, r6, #16
 800aecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aed4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aed8:	e885 0003 	stmia.w	r5, {r0, r1}
 800aedc:	1d33      	adds	r3, r6, #4
 800aede:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aee0:	6838      	ldr	r0, [r7, #0]
 800aee2:	f006 fe03 	bl	8011aec <USB_CoreInit>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d005      	beq.n	800aef8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2202      	movs	r2, #2
 800aef0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800aef4:	2301      	movs	r3, #1
 800aef6:	e0d0      	b.n	800b09a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2100      	movs	r1, #0
 800aefe:	4618      	mov	r0, r3
 800af00:	f006 ff1a 	bl	8011d38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800af04:	2300      	movs	r3, #0
 800af06:	73fb      	strb	r3, [r7, #15]
 800af08:	e04a      	b.n	800afa0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800af0a:	7bfa      	ldrb	r2, [r7, #15]
 800af0c:	6879      	ldr	r1, [r7, #4]
 800af0e:	4613      	mov	r3, r2
 800af10:	00db      	lsls	r3, r3, #3
 800af12:	4413      	add	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	440b      	add	r3, r1
 800af18:	333d      	adds	r3, #61	; 0x3d
 800af1a:	2201      	movs	r2, #1
 800af1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800af1e:	7bfa      	ldrb	r2, [r7, #15]
 800af20:	6879      	ldr	r1, [r7, #4]
 800af22:	4613      	mov	r3, r2
 800af24:	00db      	lsls	r3, r3, #3
 800af26:	4413      	add	r3, r2
 800af28:	009b      	lsls	r3, r3, #2
 800af2a:	440b      	add	r3, r1
 800af2c:	333c      	adds	r3, #60	; 0x3c
 800af2e:	7bfa      	ldrb	r2, [r7, #15]
 800af30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800af32:	7bfa      	ldrb	r2, [r7, #15]
 800af34:	7bfb      	ldrb	r3, [r7, #15]
 800af36:	b298      	uxth	r0, r3
 800af38:	6879      	ldr	r1, [r7, #4]
 800af3a:	4613      	mov	r3, r2
 800af3c:	00db      	lsls	r3, r3, #3
 800af3e:	4413      	add	r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	440b      	add	r3, r1
 800af44:	3344      	adds	r3, #68	; 0x44
 800af46:	4602      	mov	r2, r0
 800af48:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800af4a:	7bfa      	ldrb	r2, [r7, #15]
 800af4c:	6879      	ldr	r1, [r7, #4]
 800af4e:	4613      	mov	r3, r2
 800af50:	00db      	lsls	r3, r3, #3
 800af52:	4413      	add	r3, r2
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	440b      	add	r3, r1
 800af58:	3340      	adds	r3, #64	; 0x40
 800af5a:	2200      	movs	r2, #0
 800af5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800af5e:	7bfa      	ldrb	r2, [r7, #15]
 800af60:	6879      	ldr	r1, [r7, #4]
 800af62:	4613      	mov	r3, r2
 800af64:	00db      	lsls	r3, r3, #3
 800af66:	4413      	add	r3, r2
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	440b      	add	r3, r1
 800af6c:	3348      	adds	r3, #72	; 0x48
 800af6e:	2200      	movs	r2, #0
 800af70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800af72:	7bfa      	ldrb	r2, [r7, #15]
 800af74:	6879      	ldr	r1, [r7, #4]
 800af76:	4613      	mov	r3, r2
 800af78:	00db      	lsls	r3, r3, #3
 800af7a:	4413      	add	r3, r2
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	440b      	add	r3, r1
 800af80:	334c      	adds	r3, #76	; 0x4c
 800af82:	2200      	movs	r2, #0
 800af84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800af86:	7bfa      	ldrb	r2, [r7, #15]
 800af88:	6879      	ldr	r1, [r7, #4]
 800af8a:	4613      	mov	r3, r2
 800af8c:	00db      	lsls	r3, r3, #3
 800af8e:	4413      	add	r3, r2
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	440b      	add	r3, r1
 800af94:	3354      	adds	r3, #84	; 0x54
 800af96:	2200      	movs	r2, #0
 800af98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800af9a:	7bfb      	ldrb	r3, [r7, #15]
 800af9c:	3301      	adds	r3, #1
 800af9e:	73fb      	strb	r3, [r7, #15]
 800afa0:	7bfa      	ldrb	r2, [r7, #15]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d3af      	bcc.n	800af0a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800afaa:	2300      	movs	r3, #0
 800afac:	73fb      	strb	r3, [r7, #15]
 800afae:	e044      	b.n	800b03a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800afb0:	7bfa      	ldrb	r2, [r7, #15]
 800afb2:	6879      	ldr	r1, [r7, #4]
 800afb4:	4613      	mov	r3, r2
 800afb6:	00db      	lsls	r3, r3, #3
 800afb8:	4413      	add	r3, r2
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	440b      	add	r3, r1
 800afbe:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800afc2:	2200      	movs	r2, #0
 800afc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800afc6:	7bfa      	ldrb	r2, [r7, #15]
 800afc8:	6879      	ldr	r1, [r7, #4]
 800afca:	4613      	mov	r3, r2
 800afcc:	00db      	lsls	r3, r3, #3
 800afce:	4413      	add	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	440b      	add	r3, r1
 800afd4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800afd8:	7bfa      	ldrb	r2, [r7, #15]
 800afda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800afdc:	7bfa      	ldrb	r2, [r7, #15]
 800afde:	6879      	ldr	r1, [r7, #4]
 800afe0:	4613      	mov	r3, r2
 800afe2:	00db      	lsls	r3, r3, #3
 800afe4:	4413      	add	r3, r2
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	440b      	add	r3, r1
 800afea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800afee:	2200      	movs	r2, #0
 800aff0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800aff2:	7bfa      	ldrb	r2, [r7, #15]
 800aff4:	6879      	ldr	r1, [r7, #4]
 800aff6:	4613      	mov	r3, r2
 800aff8:	00db      	lsls	r3, r3, #3
 800affa:	4413      	add	r3, r2
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	440b      	add	r3, r1
 800b000:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b004:	2200      	movs	r2, #0
 800b006:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b008:	7bfa      	ldrb	r2, [r7, #15]
 800b00a:	6879      	ldr	r1, [r7, #4]
 800b00c:	4613      	mov	r3, r2
 800b00e:	00db      	lsls	r3, r3, #3
 800b010:	4413      	add	r3, r2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	440b      	add	r3, r1
 800b016:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b01a:	2200      	movs	r2, #0
 800b01c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b01e:	7bfa      	ldrb	r2, [r7, #15]
 800b020:	6879      	ldr	r1, [r7, #4]
 800b022:	4613      	mov	r3, r2
 800b024:	00db      	lsls	r3, r3, #3
 800b026:	4413      	add	r3, r2
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	440b      	add	r3, r1
 800b02c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800b030:	2200      	movs	r2, #0
 800b032:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b034:	7bfb      	ldrb	r3, [r7, #15]
 800b036:	3301      	adds	r3, #1
 800b038:	73fb      	strb	r3, [r7, #15]
 800b03a:	7bfa      	ldrb	r2, [r7, #15]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	429a      	cmp	r2, r3
 800b042:	d3b5      	bcc.n	800afb0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	603b      	str	r3, [r7, #0]
 800b04a:	687e      	ldr	r6, [r7, #4]
 800b04c:	466d      	mov	r5, sp
 800b04e:	f106 0410 	add.w	r4, r6, #16
 800b052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b05a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b05e:	e885 0003 	stmia.w	r5, {r0, r1}
 800b062:	1d33      	adds	r3, r6, #4
 800b064:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b066:	6838      	ldr	r0, [r7, #0]
 800b068:	f006 feb2 	bl	8011dd0 <USB_DevInit>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d005      	beq.n	800b07e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2202      	movs	r2, #2
 800b076:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	e00d      	b.n	800b09a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2201      	movs	r2, #1
 800b08a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4618      	mov	r0, r3
 800b094:	f008 f801 	bl	801309a <USB_DevDisconnect>

  return HAL_OK;
 800b098:	2300      	movs	r3, #0
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3714      	adds	r7, #20
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b0a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b084      	sub	sp, #16
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d101      	bne.n	800b0be <HAL_PCD_Start+0x1c>
 800b0ba:	2302      	movs	r3, #2
 800b0bc:	e020      	b.n	800b100 <HAL_PCD_Start+0x5e>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d109      	bne.n	800b0e2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d005      	beq.n	800b0e2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f006 fe04 	bl	8011cf4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f007 ffb1 	bl	8013058 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b108:	b590      	push	{r4, r7, lr}
 800b10a:	b08d      	sub	sp, #52	; 0x34
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b116:	6a3b      	ldr	r3, [r7, #32]
 800b118:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4618      	mov	r0, r3
 800b120:	f008 f86f 	bl	8013202 <USB_GetMode>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	f040 848a 	bne.w	800ba40 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4618      	mov	r0, r3
 800b132:	f007 ffd3 	bl	80130dc <USB_ReadInterrupts>
 800b136:	4603      	mov	r3, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f000 8480 	beq.w	800ba3e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	0a1b      	lsrs	r3, r3, #8
 800b148:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4618      	mov	r0, r3
 800b158:	f007 ffc0 	bl	80130dc <USB_ReadInterrupts>
 800b15c:	4603      	mov	r3, r0
 800b15e:	f003 0302 	and.w	r3, r3, #2
 800b162:	2b02      	cmp	r3, #2
 800b164:	d107      	bne.n	800b176 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	695a      	ldr	r2, [r3, #20]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f002 0202 	and.w	r2, r2, #2
 800b174:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4618      	mov	r0, r3
 800b17c:	f007 ffae 	bl	80130dc <USB_ReadInterrupts>
 800b180:	4603      	mov	r3, r0
 800b182:	f003 0310 	and.w	r3, r3, #16
 800b186:	2b10      	cmp	r3, #16
 800b188:	d161      	bne.n	800b24e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	699a      	ldr	r2, [r3, #24]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f022 0210 	bic.w	r2, r2, #16
 800b198:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b19a:	6a3b      	ldr	r3, [r7, #32]
 800b19c:	6a1b      	ldr	r3, [r3, #32]
 800b19e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	f003 020f 	and.w	r2, r3, #15
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	00db      	lsls	r3, r3, #3
 800b1aa:	4413      	add	r3, r2
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	0c5b      	lsrs	r3, r3, #17
 800b1be:	f003 030f 	and.w	r3, r3, #15
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d124      	bne.n	800b210 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b1c6:	69ba      	ldr	r2, [r7, #24]
 800b1c8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800b1cc:	4013      	ands	r3, r2
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d035      	beq.n	800b23e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b1d6:	69bb      	ldr	r3, [r7, #24]
 800b1d8:	091b      	lsrs	r3, r3, #4
 800b1da:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b1dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	6a38      	ldr	r0, [r7, #32]
 800b1e6:	f007 fde5 	bl	8012db4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	691a      	ldr	r2, [r3, #16]
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	091b      	lsrs	r3, r3, #4
 800b1f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b1f6:	441a      	add	r2, r3
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	6a1a      	ldr	r2, [r3, #32]
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	091b      	lsrs	r3, r3, #4
 800b204:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b208:	441a      	add	r2, r3
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	621a      	str	r2, [r3, #32]
 800b20e:	e016      	b.n	800b23e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	0c5b      	lsrs	r3, r3, #17
 800b214:	f003 030f 	and.w	r3, r3, #15
 800b218:	2b06      	cmp	r3, #6
 800b21a:	d110      	bne.n	800b23e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b222:	2208      	movs	r2, #8
 800b224:	4619      	mov	r1, r3
 800b226:	6a38      	ldr	r0, [r7, #32]
 800b228:	f007 fdc4 	bl	8012db4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	6a1a      	ldr	r2, [r3, #32]
 800b230:	69bb      	ldr	r3, [r7, #24]
 800b232:	091b      	lsrs	r3, r3, #4
 800b234:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b238:	441a      	add	r2, r3
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	699a      	ldr	r2, [r3, #24]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f042 0210 	orr.w	r2, r2, #16
 800b24c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4618      	mov	r0, r3
 800b254:	f007 ff42 	bl	80130dc <USB_ReadInterrupts>
 800b258:	4603      	mov	r3, r0
 800b25a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b25e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b262:	f040 80a7 	bne.w	800b3b4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b266:	2300      	movs	r3, #0
 800b268:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4618      	mov	r0, r3
 800b270:	f007 ff47 	bl	8013102 <USB_ReadDevAllOutEpInterrupt>
 800b274:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b276:	e099      	b.n	800b3ac <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27a:	f003 0301 	and.w	r3, r3, #1
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f000 808e 	beq.w	800b3a0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b28a:	b2d2      	uxtb	r2, r2
 800b28c:	4611      	mov	r1, r2
 800b28e:	4618      	mov	r0, r3
 800b290:	f007 ff6b 	bl	801316a <USB_ReadDevOutEPInterrupt>
 800b294:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	f003 0301 	and.w	r3, r3, #1
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d00c      	beq.n	800b2ba <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a2:	015a      	lsls	r2, r3, #5
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b2b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 feef 	bl	800c098 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	f003 0308 	and.w	r3, r3, #8
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00c      	beq.n	800b2de <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c6:	015a      	lsls	r2, r3, #5
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	2308      	movs	r3, #8
 800b2d4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b2d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 ffc5 	bl	800c268 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	f003 0310 	and.w	r3, r3, #16
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d008      	beq.n	800b2fa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ea:	015a      	lsls	r2, r3, #5
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	4413      	add	r3, r2
 800b2f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	2310      	movs	r3, #16
 800b2f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	f003 0302 	and.w	r3, r3, #2
 800b300:	2b00      	cmp	r3, #0
 800b302:	d030      	beq.n	800b366 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b304:	6a3b      	ldr	r3, [r7, #32]
 800b306:	695b      	ldr	r3, [r3, #20]
 800b308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b30c:	2b80      	cmp	r3, #128	; 0x80
 800b30e:	d109      	bne.n	800b324 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	69fa      	ldr	r2, [r7, #28]
 800b31a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b31e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b322:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b326:	4613      	mov	r3, r2
 800b328:	00db      	lsls	r3, r3, #3
 800b32a:	4413      	add	r3, r2
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	4413      	add	r3, r2
 800b336:	3304      	adds	r3, #4
 800b338:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	78db      	ldrb	r3, [r3, #3]
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d108      	bne.n	800b354 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	2200      	movs	r2, #0
 800b346:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	4619      	mov	r1, r3
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f00d f926 	bl	80185a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b356:	015a      	lsls	r2, r3, #5
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	4413      	add	r3, r2
 800b35c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b360:	461a      	mov	r2, r3
 800b362:	2302      	movs	r3, #2
 800b364:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	f003 0320 	and.w	r3, r3, #32
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d008      	beq.n	800b382 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b372:	015a      	lsls	r2, r3, #5
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	4413      	add	r3, r2
 800b378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b37c:	461a      	mov	r2, r3
 800b37e:	2320      	movs	r3, #32
 800b380:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d009      	beq.n	800b3a0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38e:	015a      	lsls	r2, r3, #5
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	4413      	add	r3, r2
 800b394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b398:	461a      	mov	r2, r3
 800b39a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b39e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a8:	085b      	lsrs	r3, r3, #1
 800b3aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	f47f af62 	bne.w	800b278 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f007 fe8f 	bl	80130dc <USB_ReadInterrupts>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b3c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b3c8:	f040 80db 	bne.w	800b582 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f007 feb0 	bl	8013136 <USB_ReadDevAllInEpInterrupt>
 800b3d6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b3dc:	e0cd      	b.n	800b57a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e0:	f003 0301 	and.w	r3, r3, #1
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	f000 80c2 	beq.w	800b56e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3f0:	b2d2      	uxtb	r2, r2
 800b3f2:	4611      	mov	r1, r2
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f007 fed6 	bl	80131a6 <USB_ReadDevInEPInterrupt>
 800b3fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	f003 0301 	and.w	r3, r3, #1
 800b402:	2b00      	cmp	r3, #0
 800b404:	d057      	beq.n	800b4b6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b408:	f003 030f 	and.w	r3, r3, #15
 800b40c:	2201      	movs	r2, #1
 800b40e:	fa02 f303 	lsl.w	r3, r2, r3
 800b412:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b41a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	43db      	mvns	r3, r3
 800b420:	69f9      	ldr	r1, [r7, #28]
 800b422:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b426:	4013      	ands	r3, r2
 800b428:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42c:	015a      	lsls	r2, r3, #5
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	4413      	add	r3, r2
 800b432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b436:	461a      	mov	r2, r3
 800b438:	2301      	movs	r3, #1
 800b43a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	2b01      	cmp	r3, #1
 800b442:	d132      	bne.n	800b4aa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b444:	6879      	ldr	r1, [r7, #4]
 800b446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b448:	4613      	mov	r3, r2
 800b44a:	00db      	lsls	r3, r3, #3
 800b44c:	4413      	add	r3, r2
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	440b      	add	r3, r1
 800b452:	334c      	adds	r3, #76	; 0x4c
 800b454:	6819      	ldr	r1, [r3, #0]
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b45a:	4613      	mov	r3, r2
 800b45c:	00db      	lsls	r3, r3, #3
 800b45e:	4413      	add	r3, r2
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	4403      	add	r3, r0
 800b464:	3348      	adds	r3, #72	; 0x48
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4419      	add	r1, r3
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b46e:	4613      	mov	r3, r2
 800b470:	00db      	lsls	r3, r3, #3
 800b472:	4413      	add	r3, r2
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	4403      	add	r3, r0
 800b478:	334c      	adds	r3, #76	; 0x4c
 800b47a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d113      	bne.n	800b4aa <HAL_PCD_IRQHandler+0x3a2>
 800b482:	6879      	ldr	r1, [r7, #4]
 800b484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b486:	4613      	mov	r3, r2
 800b488:	00db      	lsls	r3, r3, #3
 800b48a:	4413      	add	r3, r2
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	440b      	add	r3, r1
 800b490:	3354      	adds	r3, #84	; 0x54
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d108      	bne.n	800b4aa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6818      	ldr	r0, [r3, #0]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	2101      	movs	r1, #1
 800b4a6:	f007 fedd 	bl	8013264 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f00c fff0 	bl	8018496 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	f003 0308 	and.w	r3, r3, #8
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d008      	beq.n	800b4d2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c2:	015a      	lsls	r2, r3, #5
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	2308      	movs	r3, #8
 800b4d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	f003 0310 	and.w	r3, r3, #16
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d008      	beq.n	800b4ee <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4de:	015a      	lsls	r2, r3, #5
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	2310      	movs	r3, #16
 800b4ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d008      	beq.n	800b50a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fa:	015a      	lsls	r2, r3, #5
 800b4fc:	69fb      	ldr	r3, [r7, #28]
 800b4fe:	4413      	add	r3, r2
 800b500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b504:	461a      	mov	r2, r3
 800b506:	2340      	movs	r3, #64	; 0x40
 800b508:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	f003 0302 	and.w	r3, r3, #2
 800b510:	2b00      	cmp	r3, #0
 800b512:	d023      	beq.n	800b55c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b516:	6a38      	ldr	r0, [r7, #32]
 800b518:	f006 fdbe 	bl	8012098 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b51c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b51e:	4613      	mov	r3, r2
 800b520:	00db      	lsls	r3, r3, #3
 800b522:	4413      	add	r3, r2
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	3338      	adds	r3, #56	; 0x38
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	4413      	add	r3, r2
 800b52c:	3304      	adds	r3, #4
 800b52e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	78db      	ldrb	r3, [r3, #3]
 800b534:	2b01      	cmp	r3, #1
 800b536:	d108      	bne.n	800b54a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	2200      	movs	r2, #0
 800b53c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b540:	b2db      	uxtb	r3, r3
 800b542:	4619      	mov	r1, r3
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f00d f83d 	bl	80185c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54c:	015a      	lsls	r2, r3, #5
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	4413      	add	r3, r2
 800b552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b556:	461a      	mov	r2, r3
 800b558:	2302      	movs	r3, #2
 800b55a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b562:	2b00      	cmp	r3, #0
 800b564:	d003      	beq.n	800b56e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b566:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 fd08 	bl	800bf7e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b570:	3301      	adds	r3, #1
 800b572:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b576:	085b      	lsrs	r3, r3, #1
 800b578:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f47f af2e 	bne.w	800b3de <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4618      	mov	r0, r3
 800b588:	f007 fda8 	bl	80130dc <USB_ReadInterrupts>
 800b58c:	4603      	mov	r3, r0
 800b58e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b592:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b596:	d122      	bne.n	800b5de <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	69fa      	ldr	r2, [r7, #28]
 800b5a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5a6:	f023 0301 	bic.w	r3, r3, #1
 800b5aa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d108      	bne.n	800b5c8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b5be:	2100      	movs	r1, #0
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 feef 	bl	800c3a4 <HAL_PCDEx_LPM_Callback>
 800b5c6:	e002      	b.n	800b5ce <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f00c ffdb 	bl	8018584 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	695a      	ldr	r2, [r3, #20]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b5dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f007 fd7a 	bl	80130dc <USB_ReadInterrupts>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5f2:	d112      	bne.n	800b61a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	f003 0301 	and.w	r3, r3, #1
 800b600:	2b01      	cmp	r3, #1
 800b602:	d102      	bne.n	800b60a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f00c ff97 	bl	8018538 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	695a      	ldr	r2, [r3, #20]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b618:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4618      	mov	r0, r3
 800b620:	f007 fd5c 	bl	80130dc <USB_ReadInterrupts>
 800b624:	4603      	mov	r3, r0
 800b626:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b62a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b62e:	f040 80b7 	bne.w	800b7a0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	69fa      	ldr	r2, [r7, #28]
 800b63c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b640:	f023 0301 	bic.w	r3, r3, #1
 800b644:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2110      	movs	r1, #16
 800b64c:	4618      	mov	r0, r3
 800b64e:	f006 fd23 	bl	8012098 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b652:	2300      	movs	r3, #0
 800b654:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b656:	e046      	b.n	800b6e6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65a:	015a      	lsls	r2, r3, #5
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	4413      	add	r3, r2
 800b660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b664:	461a      	mov	r2, r3
 800b666:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b66a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66e:	015a      	lsls	r2, r3, #5
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	4413      	add	r3, r2
 800b674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b67c:	0151      	lsls	r1, r2, #5
 800b67e:	69fa      	ldr	r2, [r7, #28]
 800b680:	440a      	add	r2, r1
 800b682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b686:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b68a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68e:	015a      	lsls	r2, r3, #5
 800b690:	69fb      	ldr	r3, [r7, #28]
 800b692:	4413      	add	r3, r2
 800b694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b698:	461a      	mov	r2, r3
 800b69a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b69e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a2:	015a      	lsls	r2, r3, #5
 800b6a4:	69fb      	ldr	r3, [r7, #28]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6b0:	0151      	lsls	r1, r2, #5
 800b6b2:	69fa      	ldr	r2, [r7, #28]
 800b6b4:	440a      	add	r2, r1
 800b6b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b6be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c2:	015a      	lsls	r2, r3, #5
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	4413      	add	r3, r2
 800b6c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6d0:	0151      	lsls	r1, r2, #5
 800b6d2:	69fa      	ldr	r2, [r7, #28]
 800b6d4:	440a      	add	r2, r1
 800b6d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b6de:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d3b3      	bcc.n	800b658 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b6f0:	69fb      	ldr	r3, [r7, #28]
 800b6f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6f6:	69db      	ldr	r3, [r3, #28]
 800b6f8:	69fa      	ldr	r2, [r7, #28]
 800b6fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6fe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b702:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d016      	beq.n	800b73a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b716:	69fa      	ldr	r2, [r7, #28]
 800b718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b71c:	f043 030b 	orr.w	r3, r3, #11
 800b720:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b72a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b72c:	69fa      	ldr	r2, [r7, #28]
 800b72e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b732:	f043 030b 	orr.w	r3, r3, #11
 800b736:	6453      	str	r3, [r2, #68]	; 0x44
 800b738:	e015      	b.n	800b766 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b740:	695b      	ldr	r3, [r3, #20]
 800b742:	69fa      	ldr	r2, [r7, #28]
 800b744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b748:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b74c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b750:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	69fa      	ldr	r2, [r7, #28]
 800b75c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b760:	f043 030b 	orr.w	r3, r3, #11
 800b764:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	69fa      	ldr	r2, [r7, #28]
 800b770:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b774:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b778:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6818      	ldr	r0, [r3, #0]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	691b      	ldr	r3, [r3, #16]
 800b782:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b78a:	461a      	mov	r2, r3
 800b78c:	f007 fd6a 	bl	8013264 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	695a      	ldr	r2, [r3, #20]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b79e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f007 fc99 	bl	80130dc <USB_ReadInterrupts>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b7b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7b4:	d124      	bne.n	800b800 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f007 fd2f 	bl	801321e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f006 fce4 	bl	8012192 <USB_GetDevSpeed>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681c      	ldr	r4, [r3, #0]
 800b7d6:	f001 fa53 	bl	800cc80 <HAL_RCC_GetHCLKFreq>
 800b7da:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f006 f9e3 	bl	8011bb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f00c fe7b 	bl	80184e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	695a      	ldr	r2, [r3, #20]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b7fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4618      	mov	r0, r3
 800b806:	f007 fc69 	bl	80130dc <USB_ReadInterrupts>
 800b80a:	4603      	mov	r3, r0
 800b80c:	f003 0308 	and.w	r3, r3, #8
 800b810:	2b08      	cmp	r3, #8
 800b812:	d10a      	bne.n	800b82a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f00c fe58 	bl	80184ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	695a      	ldr	r2, [r3, #20]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f002 0208 	and.w	r2, r2, #8
 800b828:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4618      	mov	r0, r3
 800b830:	f007 fc54 	bl	80130dc <USB_ReadInterrupts>
 800b834:	4603      	mov	r3, r0
 800b836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b83a:	2b80      	cmp	r3, #128	; 0x80
 800b83c:	d122      	bne.n	800b884 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b83e:	6a3b      	ldr	r3, [r7, #32]
 800b840:	699b      	ldr	r3, [r3, #24]
 800b842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b846:	6a3b      	ldr	r3, [r7, #32]
 800b848:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b84a:	2301      	movs	r3, #1
 800b84c:	627b      	str	r3, [r7, #36]	; 0x24
 800b84e:	e014      	b.n	800b87a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b850:	6879      	ldr	r1, [r7, #4]
 800b852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b854:	4613      	mov	r3, r2
 800b856:	00db      	lsls	r3, r3, #3
 800b858:	4413      	add	r3, r2
 800b85a:	009b      	lsls	r3, r3, #2
 800b85c:	440b      	add	r3, r1
 800b85e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	2b01      	cmp	r3, #1
 800b866:	d105      	bne.n	800b874 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	4619      	mov	r1, r3
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 fb27 	bl	800bec2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b876:	3301      	adds	r3, #1
 800b878:	627b      	str	r3, [r7, #36]	; 0x24
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b880:	429a      	cmp	r2, r3
 800b882:	d3e5      	bcc.n	800b850 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4618      	mov	r0, r3
 800b88a:	f007 fc27 	bl	80130dc <USB_ReadInterrupts>
 800b88e:	4603      	mov	r3, r0
 800b890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b898:	d13b      	bne.n	800b912 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b89a:	2301      	movs	r3, #1
 800b89c:	627b      	str	r3, [r7, #36]	; 0x24
 800b89e:	e02b      	b.n	800b8f8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a2:	015a      	lsls	r2, r3, #5
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b8b0:	6879      	ldr	r1, [r7, #4]
 800b8b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	00db      	lsls	r3, r3, #3
 800b8b8:	4413      	add	r3, r2
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	440b      	add	r3, r1
 800b8be:	3340      	adds	r3, #64	; 0x40
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d115      	bne.n	800b8f2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800b8c6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	da12      	bge.n	800b8f2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800b8cc:	6879      	ldr	r1, [r7, #4]
 800b8ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	00db      	lsls	r3, r3, #3
 800b8d4:	4413      	add	r3, r2
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	440b      	add	r3, r1
 800b8da:	333f      	adds	r3, #63	; 0x3f
 800b8dc:	2201      	movs	r2, #1
 800b8de:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 fae8 	bl	800bec2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	627b      	str	r3, [r7, #36]	; 0x24
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d3ce      	bcc.n	800b8a0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	695a      	ldr	r2, [r3, #20]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b910:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4618      	mov	r0, r3
 800b918:	f007 fbe0 	bl	80130dc <USB_ReadInterrupts>
 800b91c:	4603      	mov	r3, r0
 800b91e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b922:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b926:	d155      	bne.n	800b9d4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b928:	2301      	movs	r3, #1
 800b92a:	627b      	str	r3, [r7, #36]	; 0x24
 800b92c:	e045      	b.n	800b9ba <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800b92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b930:	015a      	lsls	r2, r3, #5
 800b932:	69fb      	ldr	r3, [r7, #28]
 800b934:	4413      	add	r3, r2
 800b936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b93e:	6879      	ldr	r1, [r7, #4]
 800b940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b942:	4613      	mov	r3, r2
 800b944:	00db      	lsls	r3, r3, #3
 800b946:	4413      	add	r3, r2
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	440b      	add	r3, r1
 800b94c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d12e      	bne.n	800b9b4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b956:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b958:	2b00      	cmp	r3, #0
 800b95a:	da2b      	bge.n	800b9b4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800b968:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d121      	bne.n	800b9b4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800b970:	6879      	ldr	r1, [r7, #4]
 800b972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b974:	4613      	mov	r3, r2
 800b976:	00db      	lsls	r3, r3, #3
 800b978:	4413      	add	r3, r2
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	440b      	add	r3, r1
 800b97e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800b982:	2201      	movs	r2, #1
 800b984:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800b986:	6a3b      	ldr	r3, [r7, #32]
 800b988:	699b      	ldr	r3, [r3, #24]
 800b98a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b98e:	6a3b      	ldr	r3, [r7, #32]
 800b990:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800b992:	6a3b      	ldr	r3, [r7, #32]
 800b994:	695b      	ldr	r3, [r3, #20]
 800b996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10a      	bne.n	800b9b4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800b99e:	69fb      	ldr	r3, [r7, #28]
 800b9a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	69fa      	ldr	r2, [r7, #28]
 800b9a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b9b0:	6053      	str	r3, [r2, #4]
            break;
 800b9b2:	e007      	b.n	800b9c4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	627b      	str	r3, [r7, #36]	; 0x24
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d3b4      	bcc.n	800b92e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	695a      	ldr	r2, [r3, #20]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b9d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f007 fb7f 	bl	80130dc <USB_ReadInterrupts>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b9e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9e8:	d10a      	bne.n	800ba00 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f00c fdfc 	bl	80185e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	695a      	ldr	r2, [r3, #20]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b9fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4618      	mov	r0, r3
 800ba06:	f007 fb69 	bl	80130dc <USB_ReadInterrupts>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	f003 0304 	and.w	r3, r3, #4
 800ba10:	2b04      	cmp	r3, #4
 800ba12:	d115      	bne.n	800ba40 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	f003 0304 	and.w	r3, r3, #4
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d002      	beq.n	800ba2c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f00c fdec 	bl	8018604 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	6859      	ldr	r1, [r3, #4]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	69ba      	ldr	r2, [r7, #24]
 800ba38:	430a      	orrs	r2, r1
 800ba3a:	605a      	str	r2, [r3, #4]
 800ba3c:	e000      	b.n	800ba40 <HAL_PCD_IRQHandler+0x938>
      return;
 800ba3e:	bf00      	nop
    }
  }
}
 800ba40:	3734      	adds	r7, #52	; 0x34
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd90      	pop	{r4, r7, pc}

0800ba46 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b082      	sub	sp, #8
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
 800ba4e:	460b      	mov	r3, r1
 800ba50:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d101      	bne.n	800ba60 <HAL_PCD_SetAddress+0x1a>
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	e013      	b.n	800ba88 <HAL_PCD_SetAddress+0x42>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2201      	movs	r2, #1
 800ba64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	78fa      	ldrb	r2, [r7, #3]
 800ba6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	78fa      	ldrb	r2, [r7, #3]
 800ba76:	4611      	mov	r1, r2
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f007 fac7 	bl	801300c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2200      	movs	r2, #0
 800ba82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	4608      	mov	r0, r1
 800ba9a:	4611      	mov	r1, r2
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	4603      	mov	r3, r0
 800baa0:	70fb      	strb	r3, [r7, #3]
 800baa2:	460b      	mov	r3, r1
 800baa4:	803b      	strh	r3, [r7, #0]
 800baa6:	4613      	mov	r3, r2
 800baa8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800baaa:	2300      	movs	r3, #0
 800baac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800baae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	da0f      	bge.n	800bad6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bab6:	78fb      	ldrb	r3, [r7, #3]
 800bab8:	f003 020f 	and.w	r2, r3, #15
 800babc:	4613      	mov	r3, r2
 800babe:	00db      	lsls	r3, r3, #3
 800bac0:	4413      	add	r3, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	3338      	adds	r3, #56	; 0x38
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	4413      	add	r3, r2
 800baca:	3304      	adds	r3, #4
 800bacc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2201      	movs	r2, #1
 800bad2:	705a      	strb	r2, [r3, #1]
 800bad4:	e00f      	b.n	800baf6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bad6:	78fb      	ldrb	r3, [r7, #3]
 800bad8:	f003 020f 	and.w	r2, r3, #15
 800badc:	4613      	mov	r3, r2
 800bade:	00db      	lsls	r3, r3, #3
 800bae0:	4413      	add	r3, r2
 800bae2:	009b      	lsls	r3, r3, #2
 800bae4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	4413      	add	r3, r2
 800baec:	3304      	adds	r3, #4
 800baee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2200      	movs	r2, #0
 800baf4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800baf6:	78fb      	ldrb	r3, [r7, #3]
 800baf8:	f003 030f 	and.w	r3, r3, #15
 800bafc:	b2da      	uxtb	r2, r3
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800bb02:	883a      	ldrh	r2, [r7, #0]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	78ba      	ldrb	r2, [r7, #2]
 800bb0c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	785b      	ldrb	r3, [r3, #1]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d004      	beq.n	800bb20 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800bb20:	78bb      	ldrb	r3, [r7, #2]
 800bb22:	2b02      	cmp	r3, #2
 800bb24:	d102      	bne.n	800bb2c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d101      	bne.n	800bb3a <HAL_PCD_EP_Open+0xaa>
 800bb36:	2302      	movs	r3, #2
 800bb38:	e00e      	b.n	800bb58 <HAL_PCD_EP_Open+0xc8>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68f9      	ldr	r1, [r7, #12]
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f006 fb47 	bl	80121dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800bb56:	7afb      	ldrb	r3, [r7, #11]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b084      	sub	sp, #16
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	460b      	mov	r3, r1
 800bb6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bb6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	da0f      	bge.n	800bb94 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bb74:	78fb      	ldrb	r3, [r7, #3]
 800bb76:	f003 020f 	and.w	r2, r3, #15
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	00db      	lsls	r3, r3, #3
 800bb7e:	4413      	add	r3, r2
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	3338      	adds	r3, #56	; 0x38
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	4413      	add	r3, r2
 800bb88:	3304      	adds	r3, #4
 800bb8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	705a      	strb	r2, [r3, #1]
 800bb92:	e00f      	b.n	800bbb4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bb94:	78fb      	ldrb	r3, [r7, #3]
 800bb96:	f003 020f 	and.w	r2, r3, #15
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	00db      	lsls	r3, r3, #3
 800bb9e:	4413      	add	r3, r2
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	4413      	add	r3, r2
 800bbaa:	3304      	adds	r3, #4
 800bbac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800bbb4:	78fb      	ldrb	r3, [r7, #3]
 800bbb6:	f003 030f 	and.w	r3, r3, #15
 800bbba:	b2da      	uxtb	r2, r3
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d101      	bne.n	800bbce <HAL_PCD_EP_Close+0x6e>
 800bbca:	2302      	movs	r3, #2
 800bbcc:	e00e      	b.n	800bbec <HAL_PCD_EP_Close+0x8c>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	68f9      	ldr	r1, [r7, #12]
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f006 fb85 	bl	80122ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800bbea:	2300      	movs	r3, #0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b086      	sub	sp, #24
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	607a      	str	r2, [r7, #4]
 800bbfe:	603b      	str	r3, [r7, #0]
 800bc00:	460b      	mov	r3, r1
 800bc02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bc04:	7afb      	ldrb	r3, [r7, #11]
 800bc06:	f003 020f 	and.w	r2, r3, #15
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	00db      	lsls	r3, r3, #3
 800bc0e:	4413      	add	r3, r2
 800bc10:	009b      	lsls	r3, r3, #2
 800bc12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	4413      	add	r3, r2
 800bc1a:	3304      	adds	r3, #4
 800bc1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	2200      	movs	r2, #0
 800bc34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bc36:	7afb      	ldrb	r3, [r7, #11]
 800bc38:	f003 030f 	and.w	r3, r3, #15
 800bc3c:	b2da      	uxtb	r2, r3
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d102      	bne.n	800bc50 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bc50:	7afb      	ldrb	r3, [r7, #11]
 800bc52:	f003 030f 	and.w	r3, r3, #15
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d109      	bne.n	800bc6e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6818      	ldr	r0, [r3, #0]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	691b      	ldr	r3, [r3, #16]
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	461a      	mov	r2, r3
 800bc66:	6979      	ldr	r1, [r7, #20]
 800bc68:	f006 fe64 	bl	8012934 <USB_EP0StartXfer>
 800bc6c:	e008      	b.n	800bc80 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	6818      	ldr	r0, [r3, #0]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	691b      	ldr	r3, [r3, #16]
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	461a      	mov	r2, r3
 800bc7a:	6979      	ldr	r1, [r7, #20]
 800bc7c:	f006 fc12 	bl	80124a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800bc80:	2300      	movs	r3, #0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3718      	adds	r7, #24
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	b083      	sub	sp, #12
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
 800bc92:	460b      	mov	r3, r1
 800bc94:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800bc96:	78fb      	ldrb	r3, [r7, #3]
 800bc98:	f003 020f 	and.w	r2, r3, #15
 800bc9c:	6879      	ldr	r1, [r7, #4]
 800bc9e:	4613      	mov	r3, r2
 800bca0:	00db      	lsls	r3, r3, #3
 800bca2:	4413      	add	r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	440b      	add	r3, r1
 800bca8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800bcac:	681b      	ldr	r3, [r3, #0]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	370c      	adds	r7, #12
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b086      	sub	sp, #24
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	60f8      	str	r0, [r7, #12]
 800bcc2:	607a      	str	r2, [r7, #4]
 800bcc4:	603b      	str	r3, [r7, #0]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bcca:	7afb      	ldrb	r3, [r7, #11]
 800bccc:	f003 020f 	and.w	r2, r3, #15
 800bcd0:	4613      	mov	r3, r2
 800bcd2:	00db      	lsls	r3, r3, #3
 800bcd4:	4413      	add	r3, r2
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	3338      	adds	r3, #56	; 0x38
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	4413      	add	r3, r2
 800bcde:	3304      	adds	r3, #4
 800bce0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	683a      	ldr	r2, [r7, #0]
 800bcec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bcfa:	7afb      	ldrb	r3, [r7, #11]
 800bcfc:	f003 030f 	and.w	r3, r3, #15
 800bd00:	b2da      	uxtb	r2, r3
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	691b      	ldr	r3, [r3, #16]
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d102      	bne.n	800bd14 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bd14:	7afb      	ldrb	r3, [r7, #11]
 800bd16:	f003 030f 	and.w	r3, r3, #15
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d109      	bne.n	800bd32 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	6818      	ldr	r0, [r3, #0]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	461a      	mov	r2, r3
 800bd2a:	6979      	ldr	r1, [r7, #20]
 800bd2c:	f006 fe02 	bl	8012934 <USB_EP0StartXfer>
 800bd30:	e008      	b.n	800bd44 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	6818      	ldr	r0, [r3, #0]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	691b      	ldr	r3, [r3, #16]
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	6979      	ldr	r1, [r7, #20]
 800bd40:	f006 fbb0 	bl	80124a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3718      	adds	r7, #24
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}

0800bd4e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bd4e:	b580      	push	{r7, lr}
 800bd50:	b084      	sub	sp, #16
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
 800bd56:	460b      	mov	r3, r1
 800bd58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800bd5a:	78fb      	ldrb	r3, [r7, #3]
 800bd5c:	f003 020f 	and.w	r2, r3, #15
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d901      	bls.n	800bd6c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e050      	b.n	800be0e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bd6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	da0f      	bge.n	800bd94 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bd74:	78fb      	ldrb	r3, [r7, #3]
 800bd76:	f003 020f 	and.w	r2, r3, #15
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	00db      	lsls	r3, r3, #3
 800bd7e:	4413      	add	r3, r2
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	3338      	adds	r3, #56	; 0x38
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	4413      	add	r3, r2
 800bd88:	3304      	adds	r3, #4
 800bd8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	705a      	strb	r2, [r3, #1]
 800bd92:	e00d      	b.n	800bdb0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bd94:	78fa      	ldrb	r2, [r7, #3]
 800bd96:	4613      	mov	r3, r2
 800bd98:	00db      	lsls	r3, r3, #3
 800bd9a:	4413      	add	r3, r2
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	4413      	add	r3, r2
 800bda6:	3304      	adds	r3, #4
 800bda8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2200      	movs	r2, #0
 800bdae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bdb6:	78fb      	ldrb	r3, [r7, #3]
 800bdb8:	f003 030f 	and.w	r3, r3, #15
 800bdbc:	b2da      	uxtb	r2, r3
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d101      	bne.n	800bdd0 <HAL_PCD_EP_SetStall+0x82>
 800bdcc:	2302      	movs	r3, #2
 800bdce:	e01e      	b.n	800be0e <HAL_PCD_EP_SetStall+0xc0>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	68f9      	ldr	r1, [r7, #12]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f007 f840 	bl	8012e64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bde4:	78fb      	ldrb	r3, [r7, #3]
 800bde6:	f003 030f 	and.w	r3, r3, #15
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d10a      	bne.n	800be04 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6818      	ldr	r0, [r3, #0]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	691b      	ldr	r3, [r3, #16]
 800bdf6:	b2d9      	uxtb	r1, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bdfe:	461a      	mov	r2, r3
 800be00:	f007 fa30 	bl	8013264 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3710      	adds	r7, #16
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}

0800be16 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800be16:	b580      	push	{r7, lr}
 800be18:	b084      	sub	sp, #16
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
 800be1e:	460b      	mov	r3, r1
 800be20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800be22:	78fb      	ldrb	r3, [r7, #3]
 800be24:	f003 020f 	and.w	r2, r3, #15
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d901      	bls.n	800be34 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800be30:	2301      	movs	r3, #1
 800be32:	e042      	b.n	800beba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800be34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	da0f      	bge.n	800be5c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800be3c:	78fb      	ldrb	r3, [r7, #3]
 800be3e:	f003 020f 	and.w	r2, r3, #15
 800be42:	4613      	mov	r3, r2
 800be44:	00db      	lsls	r3, r3, #3
 800be46:	4413      	add	r3, r2
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	3338      	adds	r3, #56	; 0x38
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	4413      	add	r3, r2
 800be50:	3304      	adds	r3, #4
 800be52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2201      	movs	r2, #1
 800be58:	705a      	strb	r2, [r3, #1]
 800be5a:	e00f      	b.n	800be7c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800be5c:	78fb      	ldrb	r3, [r7, #3]
 800be5e:	f003 020f 	and.w	r2, r3, #15
 800be62:	4613      	mov	r3, r2
 800be64:	00db      	lsls	r3, r3, #3
 800be66:	4413      	add	r3, r2
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	4413      	add	r3, r2
 800be72:	3304      	adds	r3, #4
 800be74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2200      	movs	r2, #0
 800be7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2200      	movs	r2, #0
 800be80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800be82:	78fb      	ldrb	r3, [r7, #3]
 800be84:	f003 030f 	and.w	r3, r3, #15
 800be88:	b2da      	uxtb	r2, r3
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800be94:	2b01      	cmp	r3, #1
 800be96:	d101      	bne.n	800be9c <HAL_PCD_EP_ClrStall+0x86>
 800be98:	2302      	movs	r3, #2
 800be9a:	e00e      	b.n	800beba <HAL_PCD_EP_ClrStall+0xa4>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2201      	movs	r2, #1
 800bea0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	68f9      	ldr	r1, [r7, #12]
 800beaa:	4618      	mov	r0, r3
 800beac:	f007 f848 	bl	8012f40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800beb8:	2300      	movs	r3, #0
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}

0800bec2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b084      	sub	sp, #16
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
 800beca:	460b      	mov	r3, r1
 800becc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800bece:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	da0c      	bge.n	800bef0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bed6:	78fb      	ldrb	r3, [r7, #3]
 800bed8:	f003 020f 	and.w	r2, r3, #15
 800bedc:	4613      	mov	r3, r2
 800bede:	00db      	lsls	r3, r3, #3
 800bee0:	4413      	add	r3, r2
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	3338      	adds	r3, #56	; 0x38
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	4413      	add	r3, r2
 800beea:	3304      	adds	r3, #4
 800beec:	60fb      	str	r3, [r7, #12]
 800beee:	e00c      	b.n	800bf0a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bef0:	78fb      	ldrb	r3, [r7, #3]
 800bef2:	f003 020f 	and.w	r2, r3, #15
 800bef6:	4613      	mov	r3, r2
 800bef8:	00db      	lsls	r3, r3, #3
 800befa:	4413      	add	r3, r2
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	4413      	add	r3, r2
 800bf06:	3304      	adds	r3, #4
 800bf08:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	68f9      	ldr	r1, [r7, #12]
 800bf10:	4618      	mov	r0, r3
 800bf12:	f006 fe67 	bl	8012be4 <USB_EPStopXfer>
 800bf16:	4603      	mov	r3, r0
 800bf18:	72fb      	strb	r3, [r7, #11]

  return ret;
 800bf1a:	7afb      	ldrb	r3, [r7, #11]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3710      	adds	r7, #16
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d101      	bne.n	800bf3e <HAL_PCD_EP_Flush+0x1a>
 800bf3a:	2302      	movs	r3, #2
 800bf3c:	e01b      	b.n	800bf76 <HAL_PCD_EP_Flush+0x52>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2201      	movs	r2, #1
 800bf42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 800bf46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	da09      	bge.n	800bf62 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	78fb      	ldrb	r3, [r7, #3]
 800bf54:	f003 030f 	and.w	r3, r3, #15
 800bf58:	4619      	mov	r1, r3
 800bf5a:	4610      	mov	r0, r2
 800bf5c:	f006 f89c 	bl	8012098 <USB_FlushTxFifo>
 800bf60:	e004      	b.n	800bf6c <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4618      	mov	r0, r3
 800bf68:	f006 f8ca 	bl	8012100 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800bf74:	2300      	movs	r3, #0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3708      	adds	r7, #8
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}

0800bf7e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b08a      	sub	sp, #40	; 0x28
 800bf82:	af02      	add	r7, sp, #8
 800bf84:	6078      	str	r0, [r7, #4]
 800bf86:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800bf92:	683a      	ldr	r2, [r7, #0]
 800bf94:	4613      	mov	r3, r2
 800bf96:	00db      	lsls	r3, r3, #3
 800bf98:	4413      	add	r3, r2
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	3338      	adds	r3, #56	; 0x38
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	4413      	add	r3, r2
 800bfa2:	3304      	adds	r3, #4
 800bfa4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6a1a      	ldr	r2, [r3, #32]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	699b      	ldr	r3, [r3, #24]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d901      	bls.n	800bfb6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e06c      	b.n	800c090 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	699a      	ldr	r2, [r3, #24]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	6a1b      	ldr	r3, [r3, #32]
 800bfbe:	1ad3      	subs	r3, r2, r3
 800bfc0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	69fa      	ldr	r2, [r7, #28]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d902      	bls.n	800bfd2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	3303      	adds	r3, #3
 800bfd6:	089b      	lsrs	r3, r3, #2
 800bfd8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bfda:	e02b      	b.n	800c034 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	699a      	ldr	r2, [r3, #24]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	6a1b      	ldr	r3, [r3, #32]
 800bfe4:	1ad3      	subs	r3, r2, r3
 800bfe6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	69fa      	ldr	r2, [r7, #28]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d902      	bls.n	800bff8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	3303      	adds	r3, #3
 800bffc:	089b      	lsrs	r3, r3, #2
 800bffe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6919      	ldr	r1, [r3, #16]
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	b2da      	uxtb	r2, r3
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c010:	b2db      	uxtb	r3, r3
 800c012:	9300      	str	r3, [sp, #0]
 800c014:	4603      	mov	r3, r0
 800c016:	6978      	ldr	r0, [r7, #20]
 800c018:	f006 fe8e 	bl	8012d38 <USB_WritePacket>

    ep->xfer_buff  += len;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	691a      	ldr	r2, [r3, #16]
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	441a      	add	r2, r3
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6a1a      	ldr	r2, [r3, #32]
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	441a      	add	r2, r3
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	015a      	lsls	r2, r3, #5
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	4413      	add	r3, r2
 800c03c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c040:	699b      	ldr	r3, [r3, #24]
 800c042:	b29b      	uxth	r3, r3
 800c044:	69ba      	ldr	r2, [r7, #24]
 800c046:	429a      	cmp	r2, r3
 800c048:	d809      	bhi.n	800c05e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	6a1a      	ldr	r2, [r3, #32]
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c052:	429a      	cmp	r2, r3
 800c054:	d203      	bcs.n	800c05e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	699b      	ldr	r3, [r3, #24]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d1be      	bne.n	800bfdc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	699a      	ldr	r2, [r3, #24]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	6a1b      	ldr	r3, [r3, #32]
 800c066:	429a      	cmp	r2, r3
 800c068:	d811      	bhi.n	800c08e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	f003 030f 	and.w	r3, r3, #15
 800c070:	2201      	movs	r2, #1
 800c072:	fa02 f303 	lsl.w	r3, r2, r3
 800c076:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c07e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	43db      	mvns	r3, r3
 800c084:	6939      	ldr	r1, [r7, #16]
 800c086:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c08a:	4013      	ands	r3, r2
 800c08c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3720      	adds	r7, #32
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b088      	sub	sp, #32
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0a8:	69fb      	ldr	r3, [r7, #28]
 800c0aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	333c      	adds	r3, #60	; 0x3c
 800c0b0:	3304      	adds	r3, #4
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	015a      	lsls	r2, r3, #5
 800c0ba:	69bb      	ldr	r3, [r7, #24]
 800c0bc:	4413      	add	r3, r2
 800c0be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	691b      	ldr	r3, [r3, #16]
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d17b      	bne.n	800c1c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	f003 0308 	and.w	r3, r3, #8
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d015      	beq.n	800c104 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	4a61      	ldr	r2, [pc, #388]	; (800c260 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	f240 80b9 	bls.w	800c254 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	f000 80b3 	beq.w	800c254 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	015a      	lsls	r2, r3, #5
 800c0f2:	69bb      	ldr	r3, [r7, #24]
 800c0f4:	4413      	add	r3, r2
 800c0f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c100:	6093      	str	r3, [r2, #8]
 800c102:	e0a7      	b.n	800c254 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	f003 0320 	and.w	r3, r3, #32
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d009      	beq.n	800c122 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	015a      	lsls	r2, r3, #5
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	4413      	add	r3, r2
 800c116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c11a:	461a      	mov	r2, r3
 800c11c:	2320      	movs	r3, #32
 800c11e:	6093      	str	r3, [r2, #8]
 800c120:	e098      	b.n	800c254 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f040 8093 	bne.w	800c254 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	4a4b      	ldr	r2, [pc, #300]	; (800c260 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d90f      	bls.n	800c156 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d00a      	beq.n	800c156 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	015a      	lsls	r2, r3, #5
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	4413      	add	r3, r2
 800c148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c14c:	461a      	mov	r2, r3
 800c14e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c152:	6093      	str	r3, [r2, #8]
 800c154:	e07e      	b.n	800c254 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c156:	683a      	ldr	r2, [r7, #0]
 800c158:	4613      	mov	r3, r2
 800c15a:	00db      	lsls	r3, r3, #3
 800c15c:	4413      	add	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	4413      	add	r3, r2
 800c168:	3304      	adds	r3, #4
 800c16a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	69da      	ldr	r2, [r3, #28]
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	0159      	lsls	r1, r3, #5
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	440b      	add	r3, r1
 800c178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c17c:	691b      	ldr	r3, [r3, #16]
 800c17e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c182:	1ad2      	subs	r2, r2, r3
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d114      	bne.n	800c1b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	699b      	ldr	r3, [r3, #24]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d109      	bne.n	800c1aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6818      	ldr	r0, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	2101      	movs	r1, #1
 800c1a4:	f007 f85e 	bl	8013264 <USB_EP0_OutStart>
 800c1a8:	e006      	b.n	800c1b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	691a      	ldr	r2, [r3, #16]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	6a1b      	ldr	r3, [r3, #32]
 800c1b2:	441a      	add	r2, r3
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	4619      	mov	r1, r3
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f00c f94e 	bl	8018460 <HAL_PCD_DataOutStageCallback>
 800c1c4:	e046      	b.n	800c254 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	4a26      	ldr	r2, [pc, #152]	; (800c264 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d124      	bne.n	800c218 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d00a      	beq.n	800c1ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	015a      	lsls	r2, r3, #5
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	4413      	add	r3, r2
 800c1e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1ea:	6093      	str	r3, [r2, #8]
 800c1ec:	e032      	b.n	800c254 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	f003 0320 	and.w	r3, r3, #32
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d008      	beq.n	800c20a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	015a      	lsls	r2, r3, #5
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	4413      	add	r3, r2
 800c200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c204:	461a      	mov	r2, r3
 800c206:	2320      	movs	r3, #32
 800c208:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	4619      	mov	r1, r3
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f00c f925 	bl	8018460 <HAL_PCD_DataOutStageCallback>
 800c216:	e01d      	b.n	800c254 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d114      	bne.n	800c248 <PCD_EP_OutXfrComplete_int+0x1b0>
 800c21e:	6879      	ldr	r1, [r7, #4]
 800c220:	683a      	ldr	r2, [r7, #0]
 800c222:	4613      	mov	r3, r2
 800c224:	00db      	lsls	r3, r3, #3
 800c226:	4413      	add	r3, r2
 800c228:	009b      	lsls	r3, r3, #2
 800c22a:	440b      	add	r3, r1
 800c22c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d108      	bne.n	800c248 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6818      	ldr	r0, [r3, #0]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c240:	461a      	mov	r2, r3
 800c242:	2100      	movs	r1, #0
 800c244:	f007 f80e 	bl	8013264 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	4619      	mov	r1, r3
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f00c f906 	bl	8018460 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c254:	2300      	movs	r3, #0
}
 800c256:	4618      	mov	r0, r3
 800c258:	3720      	adds	r7, #32
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	4f54300a 	.word	0x4f54300a
 800c264:	4f54310a 	.word	0x4f54310a

0800c268 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b086      	sub	sp, #24
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	333c      	adds	r3, #60	; 0x3c
 800c280:	3304      	adds	r3, #4
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	015a      	lsls	r2, r3, #5
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	4413      	add	r3, r2
 800c28e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c292:	689b      	ldr	r3, [r3, #8]
 800c294:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	4a15      	ldr	r2, [pc, #84]	; (800c2f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d90e      	bls.n	800c2bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d009      	beq.n	800c2bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	015a      	lsls	r2, r3, #5
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f00c f8bd 	bl	801843c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	4a0a      	ldr	r2, [pc, #40]	; (800c2f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d90c      	bls.n	800c2e4 <PCD_EP_OutSetupPacket_int+0x7c>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	691b      	ldr	r3, [r3, #16]
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d108      	bne.n	800c2e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6818      	ldr	r0, [r3, #0]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c2dc:	461a      	mov	r2, r3
 800c2de:	2101      	movs	r1, #1
 800c2e0:	f006 ffc0 	bl	8013264 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c2e4:	2300      	movs	r3, #0
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3718      	adds	r7, #24
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	4f54300a 	.word	0x4f54300a

0800c2f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	70fb      	strb	r3, [r7, #3]
 800c300:	4613      	mov	r3, r2
 800c302:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c30a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c30c:	78fb      	ldrb	r3, [r7, #3]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d107      	bne.n	800c322 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c312:	883b      	ldrh	r3, [r7, #0]
 800c314:	0419      	lsls	r1, r3, #16
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	68ba      	ldr	r2, [r7, #8]
 800c31c:	430a      	orrs	r2, r1
 800c31e:	629a      	str	r2, [r3, #40]	; 0x28
 800c320:	e028      	b.n	800c374 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c328:	0c1b      	lsrs	r3, r3, #16
 800c32a:	68ba      	ldr	r2, [r7, #8]
 800c32c:	4413      	add	r3, r2
 800c32e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c330:	2300      	movs	r3, #0
 800c332:	73fb      	strb	r3, [r7, #15]
 800c334:	e00d      	b.n	800c352 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	7bfb      	ldrb	r3, [r7, #15]
 800c33c:	3340      	adds	r3, #64	; 0x40
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	4413      	add	r3, r2
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	0c1b      	lsrs	r3, r3, #16
 800c346:	68ba      	ldr	r2, [r7, #8]
 800c348:	4413      	add	r3, r2
 800c34a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c34c:	7bfb      	ldrb	r3, [r7, #15]
 800c34e:	3301      	adds	r3, #1
 800c350:	73fb      	strb	r3, [r7, #15]
 800c352:	7bfa      	ldrb	r2, [r7, #15]
 800c354:	78fb      	ldrb	r3, [r7, #3]
 800c356:	3b01      	subs	r3, #1
 800c358:	429a      	cmp	r2, r3
 800c35a:	d3ec      	bcc.n	800c336 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c35c:	883b      	ldrh	r3, [r7, #0]
 800c35e:	0418      	lsls	r0, r3, #16
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6819      	ldr	r1, [r3, #0]
 800c364:	78fb      	ldrb	r3, [r7, #3]
 800c366:	3b01      	subs	r3, #1
 800c368:	68ba      	ldr	r2, [r7, #8]
 800c36a:	4302      	orrs	r2, r0
 800c36c:	3340      	adds	r3, #64	; 0x40
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	440b      	add	r3, r1
 800c372:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c374:	2300      	movs	r3, #0
}
 800c376:	4618      	mov	r0, r3
 800c378:	3714      	adds	r7, #20
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr

0800c382 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c382:	b480      	push	{r7}
 800c384:	b083      	sub	sp, #12
 800c386:	af00      	add	r7, sp, #0
 800c388:	6078      	str	r0, [r7, #4]
 800c38a:	460b      	mov	r3, r1
 800c38c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	887a      	ldrh	r2, [r7, #2]
 800c394:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c396:	2300      	movs	r3, #0
}
 800c398:	4618      	mov	r0, r3
 800c39a:	370c      	adds	r7, #12
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c3b0:	bf00      	nop
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b086      	sub	sp, #24
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d101      	bne.n	800c3ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e267      	b.n	800c89e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f003 0301 	and.w	r3, r3, #1
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d075      	beq.n	800c4c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c3da:	4b88      	ldr	r3, [pc, #544]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	f003 030c 	and.w	r3, r3, #12
 800c3e2:	2b04      	cmp	r3, #4
 800c3e4:	d00c      	beq.n	800c400 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c3e6:	4b85      	ldr	r3, [pc, #532]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c3ee:	2b08      	cmp	r3, #8
 800c3f0:	d112      	bne.n	800c418 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c3f2:	4b82      	ldr	r3, [pc, #520]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3fe:	d10b      	bne.n	800c418 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c400:	4b7e      	ldr	r3, [pc, #504]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d05b      	beq.n	800c4c4 <HAL_RCC_OscConfig+0x108>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d157      	bne.n	800c4c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c414:	2301      	movs	r3, #1
 800c416:	e242      	b.n	800c89e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c420:	d106      	bne.n	800c430 <HAL_RCC_OscConfig+0x74>
 800c422:	4b76      	ldr	r3, [pc, #472]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a75      	ldr	r2, [pc, #468]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c42c:	6013      	str	r3, [r2, #0]
 800c42e:	e01d      	b.n	800c46c <HAL_RCC_OscConfig+0xb0>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c438:	d10c      	bne.n	800c454 <HAL_RCC_OscConfig+0x98>
 800c43a:	4b70      	ldr	r3, [pc, #448]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a6f      	ldr	r2, [pc, #444]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c444:	6013      	str	r3, [r2, #0]
 800c446:	4b6d      	ldr	r3, [pc, #436]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4a6c      	ldr	r2, [pc, #432]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c44c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c450:	6013      	str	r3, [r2, #0]
 800c452:	e00b      	b.n	800c46c <HAL_RCC_OscConfig+0xb0>
 800c454:	4b69      	ldr	r3, [pc, #420]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a68      	ldr	r2, [pc, #416]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c45a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c45e:	6013      	str	r3, [r2, #0]
 800c460:	4b66      	ldr	r3, [pc, #408]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a65      	ldr	r2, [pc, #404]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c46a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d013      	beq.n	800c49c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c474:	f7fd f842 	bl	80094fc <HAL_GetTick>
 800c478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c47a:	e008      	b.n	800c48e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c47c:	f7fd f83e 	bl	80094fc <HAL_GetTick>
 800c480:	4602      	mov	r2, r0
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	1ad3      	subs	r3, r2, r3
 800c486:	2b64      	cmp	r3, #100	; 0x64
 800c488:	d901      	bls.n	800c48e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c48a:	2303      	movs	r3, #3
 800c48c:	e207      	b.n	800c89e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c48e:	4b5b      	ldr	r3, [pc, #364]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c496:	2b00      	cmp	r3, #0
 800c498:	d0f0      	beq.n	800c47c <HAL_RCC_OscConfig+0xc0>
 800c49a:	e014      	b.n	800c4c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c49c:	f7fd f82e 	bl	80094fc <HAL_GetTick>
 800c4a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c4a2:	e008      	b.n	800c4b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c4a4:	f7fd f82a 	bl	80094fc <HAL_GetTick>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	2b64      	cmp	r3, #100	; 0x64
 800c4b0:	d901      	bls.n	800c4b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c4b2:	2303      	movs	r3, #3
 800c4b4:	e1f3      	b.n	800c89e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c4b6:	4b51      	ldr	r3, [pc, #324]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d1f0      	bne.n	800c4a4 <HAL_RCC_OscConfig+0xe8>
 800c4c2:	e000      	b.n	800c4c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c4c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f003 0302 	and.w	r3, r3, #2
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d063      	beq.n	800c59a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c4d2:	4b4a      	ldr	r3, [pc, #296]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	f003 030c 	and.w	r3, r3, #12
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d00b      	beq.n	800c4f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c4de:	4b47      	ldr	r3, [pc, #284]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c4e6:	2b08      	cmp	r3, #8
 800c4e8:	d11c      	bne.n	800c524 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c4ea:	4b44      	ldr	r3, [pc, #272]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d116      	bne.n	800c524 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c4f6:	4b41      	ldr	r3, [pc, #260]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f003 0302 	and.w	r3, r3, #2
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d005      	beq.n	800c50e <HAL_RCC_OscConfig+0x152>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	68db      	ldr	r3, [r3, #12]
 800c506:	2b01      	cmp	r3, #1
 800c508:	d001      	beq.n	800c50e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c50a:	2301      	movs	r3, #1
 800c50c:	e1c7      	b.n	800c89e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c50e:	4b3b      	ldr	r3, [pc, #236]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	691b      	ldr	r3, [r3, #16]
 800c51a:	00db      	lsls	r3, r3, #3
 800c51c:	4937      	ldr	r1, [pc, #220]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c51e:	4313      	orrs	r3, r2
 800c520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c522:	e03a      	b.n	800c59a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	68db      	ldr	r3, [r3, #12]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d020      	beq.n	800c56e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c52c:	4b34      	ldr	r3, [pc, #208]	; (800c600 <HAL_RCC_OscConfig+0x244>)
 800c52e:	2201      	movs	r2, #1
 800c530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c532:	f7fc ffe3 	bl	80094fc <HAL_GetTick>
 800c536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c538:	e008      	b.n	800c54c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c53a:	f7fc ffdf 	bl	80094fc <HAL_GetTick>
 800c53e:	4602      	mov	r2, r0
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	1ad3      	subs	r3, r2, r3
 800c544:	2b02      	cmp	r3, #2
 800c546:	d901      	bls.n	800c54c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c548:	2303      	movs	r3, #3
 800c54a:	e1a8      	b.n	800c89e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c54c:	4b2b      	ldr	r3, [pc, #172]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f003 0302 	and.w	r3, r3, #2
 800c554:	2b00      	cmp	r3, #0
 800c556:	d0f0      	beq.n	800c53a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c558:	4b28      	ldr	r3, [pc, #160]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	691b      	ldr	r3, [r3, #16]
 800c564:	00db      	lsls	r3, r3, #3
 800c566:	4925      	ldr	r1, [pc, #148]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c568:	4313      	orrs	r3, r2
 800c56a:	600b      	str	r3, [r1, #0]
 800c56c:	e015      	b.n	800c59a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c56e:	4b24      	ldr	r3, [pc, #144]	; (800c600 <HAL_RCC_OscConfig+0x244>)
 800c570:	2200      	movs	r2, #0
 800c572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c574:	f7fc ffc2 	bl	80094fc <HAL_GetTick>
 800c578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c57a:	e008      	b.n	800c58e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c57c:	f7fc ffbe 	bl	80094fc <HAL_GetTick>
 800c580:	4602      	mov	r2, r0
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	1ad3      	subs	r3, r2, r3
 800c586:	2b02      	cmp	r3, #2
 800c588:	d901      	bls.n	800c58e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c58a:	2303      	movs	r3, #3
 800c58c:	e187      	b.n	800c89e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c58e:	4b1b      	ldr	r3, [pc, #108]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f003 0302 	and.w	r3, r3, #2
 800c596:	2b00      	cmp	r3, #0
 800c598:	d1f0      	bne.n	800c57c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f003 0308 	and.w	r3, r3, #8
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d036      	beq.n	800c614 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	695b      	ldr	r3, [r3, #20]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d016      	beq.n	800c5dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c5ae:	4b15      	ldr	r3, [pc, #84]	; (800c604 <HAL_RCC_OscConfig+0x248>)
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5b4:	f7fc ffa2 	bl	80094fc <HAL_GetTick>
 800c5b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c5ba:	e008      	b.n	800c5ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c5bc:	f7fc ff9e 	bl	80094fc <HAL_GetTick>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	1ad3      	subs	r3, r2, r3
 800c5c6:	2b02      	cmp	r3, #2
 800c5c8:	d901      	bls.n	800c5ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c5ca:	2303      	movs	r3, #3
 800c5cc:	e167      	b.n	800c89e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c5ce:	4b0b      	ldr	r3, [pc, #44]	; (800c5fc <HAL_RCC_OscConfig+0x240>)
 800c5d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5d2:	f003 0302 	and.w	r3, r3, #2
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d0f0      	beq.n	800c5bc <HAL_RCC_OscConfig+0x200>
 800c5da:	e01b      	b.n	800c614 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c5dc:	4b09      	ldr	r3, [pc, #36]	; (800c604 <HAL_RCC_OscConfig+0x248>)
 800c5de:	2200      	movs	r2, #0
 800c5e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c5e2:	f7fc ff8b 	bl	80094fc <HAL_GetTick>
 800c5e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c5e8:	e00e      	b.n	800c608 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c5ea:	f7fc ff87 	bl	80094fc <HAL_GetTick>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	1ad3      	subs	r3, r2, r3
 800c5f4:	2b02      	cmp	r3, #2
 800c5f6:	d907      	bls.n	800c608 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	e150      	b.n	800c89e <HAL_RCC_OscConfig+0x4e2>
 800c5fc:	40023800 	.word	0x40023800
 800c600:	42470000 	.word	0x42470000
 800c604:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c608:	4b88      	ldr	r3, [pc, #544]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c60a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c60c:	f003 0302 	and.w	r3, r3, #2
 800c610:	2b00      	cmp	r3, #0
 800c612:	d1ea      	bne.n	800c5ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f003 0304 	and.w	r3, r3, #4
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	f000 8097 	beq.w	800c750 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c622:	2300      	movs	r3, #0
 800c624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c626:	4b81      	ldr	r3, [pc, #516]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c62a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10f      	bne.n	800c652 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c632:	2300      	movs	r3, #0
 800c634:	60bb      	str	r3, [r7, #8]
 800c636:	4b7d      	ldr	r3, [pc, #500]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c63a:	4a7c      	ldr	r2, [pc, #496]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c63c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c640:	6413      	str	r3, [r2, #64]	; 0x40
 800c642:	4b7a      	ldr	r3, [pc, #488]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c64a:	60bb      	str	r3, [r7, #8]
 800c64c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c64e:	2301      	movs	r3, #1
 800c650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c652:	4b77      	ldr	r3, [pc, #476]	; (800c830 <HAL_RCC_OscConfig+0x474>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d118      	bne.n	800c690 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c65e:	4b74      	ldr	r3, [pc, #464]	; (800c830 <HAL_RCC_OscConfig+0x474>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4a73      	ldr	r2, [pc, #460]	; (800c830 <HAL_RCC_OscConfig+0x474>)
 800c664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c66a:	f7fc ff47 	bl	80094fc <HAL_GetTick>
 800c66e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c670:	e008      	b.n	800c684 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c672:	f7fc ff43 	bl	80094fc <HAL_GetTick>
 800c676:	4602      	mov	r2, r0
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	1ad3      	subs	r3, r2, r3
 800c67c:	2b02      	cmp	r3, #2
 800c67e:	d901      	bls.n	800c684 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c680:	2303      	movs	r3, #3
 800c682:	e10c      	b.n	800c89e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c684:	4b6a      	ldr	r3, [pc, #424]	; (800c830 <HAL_RCC_OscConfig+0x474>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d0f0      	beq.n	800c672 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	2b01      	cmp	r3, #1
 800c696:	d106      	bne.n	800c6a6 <HAL_RCC_OscConfig+0x2ea>
 800c698:	4b64      	ldr	r3, [pc, #400]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c69a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c69c:	4a63      	ldr	r2, [pc, #396]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c69e:	f043 0301 	orr.w	r3, r3, #1
 800c6a2:	6713      	str	r3, [r2, #112]	; 0x70
 800c6a4:	e01c      	b.n	800c6e0 <HAL_RCC_OscConfig+0x324>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	2b05      	cmp	r3, #5
 800c6ac:	d10c      	bne.n	800c6c8 <HAL_RCC_OscConfig+0x30c>
 800c6ae:	4b5f      	ldr	r3, [pc, #380]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6b2:	4a5e      	ldr	r2, [pc, #376]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c6b4:	f043 0304 	orr.w	r3, r3, #4
 800c6b8:	6713      	str	r3, [r2, #112]	; 0x70
 800c6ba:	4b5c      	ldr	r3, [pc, #368]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c6bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6be:	4a5b      	ldr	r2, [pc, #364]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c6c0:	f043 0301 	orr.w	r3, r3, #1
 800c6c4:	6713      	str	r3, [r2, #112]	; 0x70
 800c6c6:	e00b      	b.n	800c6e0 <HAL_RCC_OscConfig+0x324>
 800c6c8:	4b58      	ldr	r3, [pc, #352]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c6ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6cc:	4a57      	ldr	r2, [pc, #348]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c6ce:	f023 0301 	bic.w	r3, r3, #1
 800c6d2:	6713      	str	r3, [r2, #112]	; 0x70
 800c6d4:	4b55      	ldr	r3, [pc, #340]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c6d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6d8:	4a54      	ldr	r2, [pc, #336]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c6da:	f023 0304 	bic.w	r3, r3, #4
 800c6de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	689b      	ldr	r3, [r3, #8]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d015      	beq.n	800c714 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6e8:	f7fc ff08 	bl	80094fc <HAL_GetTick>
 800c6ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c6ee:	e00a      	b.n	800c706 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c6f0:	f7fc ff04 	bl	80094fc <HAL_GetTick>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	1ad3      	subs	r3, r2, r3
 800c6fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d901      	bls.n	800c706 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c702:	2303      	movs	r3, #3
 800c704:	e0cb      	b.n	800c89e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c706:	4b49      	ldr	r3, [pc, #292]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c70a:	f003 0302 	and.w	r3, r3, #2
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d0ee      	beq.n	800c6f0 <HAL_RCC_OscConfig+0x334>
 800c712:	e014      	b.n	800c73e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c714:	f7fc fef2 	bl	80094fc <HAL_GetTick>
 800c718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c71a:	e00a      	b.n	800c732 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c71c:	f7fc feee 	bl	80094fc <HAL_GetTick>
 800c720:	4602      	mov	r2, r0
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	1ad3      	subs	r3, r2, r3
 800c726:	f241 3288 	movw	r2, #5000	; 0x1388
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d901      	bls.n	800c732 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c72e:	2303      	movs	r3, #3
 800c730:	e0b5      	b.n	800c89e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c732:	4b3e      	ldr	r3, [pc, #248]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c736:	f003 0302 	and.w	r3, r3, #2
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d1ee      	bne.n	800c71c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c73e:	7dfb      	ldrb	r3, [r7, #23]
 800c740:	2b01      	cmp	r3, #1
 800c742:	d105      	bne.n	800c750 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c744:	4b39      	ldr	r3, [pc, #228]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c748:	4a38      	ldr	r2, [pc, #224]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c74a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c74e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	699b      	ldr	r3, [r3, #24]
 800c754:	2b00      	cmp	r3, #0
 800c756:	f000 80a1 	beq.w	800c89c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c75a:	4b34      	ldr	r3, [pc, #208]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c75c:	689b      	ldr	r3, [r3, #8]
 800c75e:	f003 030c 	and.w	r3, r3, #12
 800c762:	2b08      	cmp	r3, #8
 800c764:	d05c      	beq.n	800c820 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	699b      	ldr	r3, [r3, #24]
 800c76a:	2b02      	cmp	r3, #2
 800c76c:	d141      	bne.n	800c7f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c76e:	4b31      	ldr	r3, [pc, #196]	; (800c834 <HAL_RCC_OscConfig+0x478>)
 800c770:	2200      	movs	r2, #0
 800c772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c774:	f7fc fec2 	bl	80094fc <HAL_GetTick>
 800c778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c77a:	e008      	b.n	800c78e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c77c:	f7fc febe 	bl	80094fc <HAL_GetTick>
 800c780:	4602      	mov	r2, r0
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	1ad3      	subs	r3, r2, r3
 800c786:	2b02      	cmp	r3, #2
 800c788:	d901      	bls.n	800c78e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c78a:	2303      	movs	r3, #3
 800c78c:	e087      	b.n	800c89e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c78e:	4b27      	ldr	r3, [pc, #156]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c796:	2b00      	cmp	r3, #0
 800c798:	d1f0      	bne.n	800c77c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	69da      	ldr	r2, [r3, #28]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6a1b      	ldr	r3, [r3, #32]
 800c7a2:	431a      	orrs	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a8:	019b      	lsls	r3, r3, #6
 800c7aa:	431a      	orrs	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7b0:	085b      	lsrs	r3, r3, #1
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	041b      	lsls	r3, r3, #16
 800c7b6:	431a      	orrs	r2, r3
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7bc:	061b      	lsls	r3, r3, #24
 800c7be:	491b      	ldr	r1, [pc, #108]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c7c4:	4b1b      	ldr	r3, [pc, #108]	; (800c834 <HAL_RCC_OscConfig+0x478>)
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c7ca:	f7fc fe97 	bl	80094fc <HAL_GetTick>
 800c7ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c7d0:	e008      	b.n	800c7e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c7d2:	f7fc fe93 	bl	80094fc <HAL_GetTick>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	1ad3      	subs	r3, r2, r3
 800c7dc:	2b02      	cmp	r3, #2
 800c7de:	d901      	bls.n	800c7e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c7e0:	2303      	movs	r3, #3
 800c7e2:	e05c      	b.n	800c89e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c7e4:	4b11      	ldr	r3, [pc, #68]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d0f0      	beq.n	800c7d2 <HAL_RCC_OscConfig+0x416>
 800c7f0:	e054      	b.n	800c89c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c7f2:	4b10      	ldr	r3, [pc, #64]	; (800c834 <HAL_RCC_OscConfig+0x478>)
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c7f8:	f7fc fe80 	bl	80094fc <HAL_GetTick>
 800c7fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c7fe:	e008      	b.n	800c812 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c800:	f7fc fe7c 	bl	80094fc <HAL_GetTick>
 800c804:	4602      	mov	r2, r0
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	1ad3      	subs	r3, r2, r3
 800c80a:	2b02      	cmp	r3, #2
 800c80c:	d901      	bls.n	800c812 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c80e:	2303      	movs	r3, #3
 800c810:	e045      	b.n	800c89e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c812:	4b06      	ldr	r3, [pc, #24]	; (800c82c <HAL_RCC_OscConfig+0x470>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d1f0      	bne.n	800c800 <HAL_RCC_OscConfig+0x444>
 800c81e:	e03d      	b.n	800c89c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	699b      	ldr	r3, [r3, #24]
 800c824:	2b01      	cmp	r3, #1
 800c826:	d107      	bne.n	800c838 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c828:	2301      	movs	r3, #1
 800c82a:	e038      	b.n	800c89e <HAL_RCC_OscConfig+0x4e2>
 800c82c:	40023800 	.word	0x40023800
 800c830:	40007000 	.word	0x40007000
 800c834:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c838:	4b1b      	ldr	r3, [pc, #108]	; (800c8a8 <HAL_RCC_OscConfig+0x4ec>)
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	699b      	ldr	r3, [r3, #24]
 800c842:	2b01      	cmp	r3, #1
 800c844:	d028      	beq.n	800c898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c850:	429a      	cmp	r2, r3
 800c852:	d121      	bne.n	800c898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c85e:	429a      	cmp	r2, r3
 800c860:	d11a      	bne.n	800c898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c862:	68fa      	ldr	r2, [r7, #12]
 800c864:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c868:	4013      	ands	r3, r2
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c86e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c870:	4293      	cmp	r3, r2
 800c872:	d111      	bne.n	800c898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c87e:	085b      	lsrs	r3, r3, #1
 800c880:	3b01      	subs	r3, #1
 800c882:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c884:	429a      	cmp	r2, r3
 800c886:	d107      	bne.n	800c898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c892:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c894:	429a      	cmp	r2, r3
 800c896:	d001      	beq.n	800c89c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800c898:	2301      	movs	r3, #1
 800c89a:	e000      	b.n	800c89e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c89c:	2300      	movs	r3, #0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3718      	adds	r7, #24
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	40023800 	.word	0x40023800

0800c8ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d101      	bne.n	800c8c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e0cc      	b.n	800ca5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c8c0:	4b68      	ldr	r3, [pc, #416]	; (800ca64 <HAL_RCC_ClockConfig+0x1b8>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f003 0307 	and.w	r3, r3, #7
 800c8c8:	683a      	ldr	r2, [r7, #0]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d90c      	bls.n	800c8e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8ce:	4b65      	ldr	r3, [pc, #404]	; (800ca64 <HAL_RCC_ClockConfig+0x1b8>)
 800c8d0:	683a      	ldr	r2, [r7, #0]
 800c8d2:	b2d2      	uxtb	r2, r2
 800c8d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c8d6:	4b63      	ldr	r3, [pc, #396]	; (800ca64 <HAL_RCC_ClockConfig+0x1b8>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f003 0307 	and.w	r3, r3, #7
 800c8de:	683a      	ldr	r2, [r7, #0]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d001      	beq.n	800c8e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	e0b8      	b.n	800ca5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f003 0302 	and.w	r3, r3, #2
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d020      	beq.n	800c936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f003 0304 	and.w	r3, r3, #4
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d005      	beq.n	800c90c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c900:	4b59      	ldr	r3, [pc, #356]	; (800ca68 <HAL_RCC_ClockConfig+0x1bc>)
 800c902:	689b      	ldr	r3, [r3, #8]
 800c904:	4a58      	ldr	r2, [pc, #352]	; (800ca68 <HAL_RCC_ClockConfig+0x1bc>)
 800c906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c90a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f003 0308 	and.w	r3, r3, #8
 800c914:	2b00      	cmp	r3, #0
 800c916:	d005      	beq.n	800c924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c918:	4b53      	ldr	r3, [pc, #332]	; (800ca68 <HAL_RCC_ClockConfig+0x1bc>)
 800c91a:	689b      	ldr	r3, [r3, #8]
 800c91c:	4a52      	ldr	r2, [pc, #328]	; (800ca68 <HAL_RCC_ClockConfig+0x1bc>)
 800c91e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c924:	4b50      	ldr	r3, [pc, #320]	; (800ca68 <HAL_RCC_ClockConfig+0x1bc>)
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	689b      	ldr	r3, [r3, #8]
 800c930:	494d      	ldr	r1, [pc, #308]	; (800ca68 <HAL_RCC_ClockConfig+0x1bc>)
 800c932:	4313      	orrs	r3, r2
 800c934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f003 0301 	and.w	r3, r3, #1
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d044      	beq.n	800c9cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	2b01      	cmp	r3, #1
 800c948:	d107      	bne.n	800c95a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c94a:	4b47      	ldr	r3, [pc, #284]	; (800ca68 <HAL_RCC_ClockConfig+0x1bc>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c952:	2b00      	cmp	r3, #0
 800c954:	d119      	bne.n	800c98a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c956:	2301      	movs	r3, #1
 800c958:	e07f      	b.n	800ca5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	2b02      	cmp	r3, #2
 800c960:	d003      	beq.n	800c96a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c966:	2b03      	cmp	r3, #3
 800c968:	d107      	bne.n	800c97a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c96a:	4b3f      	ldr	r3, [pc, #252]	; (800ca68 <HAL_RCC_ClockConfig+0x1bc>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c972:	2b00      	cmp	r3, #0
 800c974:	d109      	bne.n	800c98a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c976:	2301      	movs	r3, #1
 800c978:	e06f      	b.n	800ca5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c97a:	4b3b      	ldr	r3, [pc, #236]	; (800ca68 <HAL_RCC_ClockConfig+0x1bc>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f003 0302 	and.w	r3, r3, #2
 800c982:	2b00      	cmp	r3, #0
 800c984:	d101      	bne.n	800c98a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	e067      	b.n	800ca5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c98a:	4b37      	ldr	r3, [pc, #220]	; (800ca68 <HAL_RCC_ClockConfig+0x1bc>)
 800c98c:	689b      	ldr	r3, [r3, #8]
 800c98e:	f023 0203 	bic.w	r2, r3, #3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	4934      	ldr	r1, [pc, #208]	; (800ca68 <HAL_RCC_ClockConfig+0x1bc>)
 800c998:	4313      	orrs	r3, r2
 800c99a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c99c:	f7fc fdae 	bl	80094fc <HAL_GetTick>
 800c9a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c9a2:	e00a      	b.n	800c9ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c9a4:	f7fc fdaa 	bl	80094fc <HAL_GetTick>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	1ad3      	subs	r3, r2, r3
 800c9ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d901      	bls.n	800c9ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c9b6:	2303      	movs	r3, #3
 800c9b8:	e04f      	b.n	800ca5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c9ba:	4b2b      	ldr	r3, [pc, #172]	; (800ca68 <HAL_RCC_ClockConfig+0x1bc>)
 800c9bc:	689b      	ldr	r3, [r3, #8]
 800c9be:	f003 020c 	and.w	r2, r3, #12
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	009b      	lsls	r3, r3, #2
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d1eb      	bne.n	800c9a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c9cc:	4b25      	ldr	r3, [pc, #148]	; (800ca64 <HAL_RCC_ClockConfig+0x1b8>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f003 0307 	and.w	r3, r3, #7
 800c9d4:	683a      	ldr	r2, [r7, #0]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d20c      	bcs.n	800c9f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c9da:	4b22      	ldr	r3, [pc, #136]	; (800ca64 <HAL_RCC_ClockConfig+0x1b8>)
 800c9dc:	683a      	ldr	r2, [r7, #0]
 800c9de:	b2d2      	uxtb	r2, r2
 800c9e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c9e2:	4b20      	ldr	r3, [pc, #128]	; (800ca64 <HAL_RCC_ClockConfig+0x1b8>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f003 0307 	and.w	r3, r3, #7
 800c9ea:	683a      	ldr	r2, [r7, #0]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d001      	beq.n	800c9f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	e032      	b.n	800ca5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f003 0304 	and.w	r3, r3, #4
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d008      	beq.n	800ca12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ca00:	4b19      	ldr	r3, [pc, #100]	; (800ca68 <HAL_RCC_ClockConfig+0x1bc>)
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	4916      	ldr	r1, [pc, #88]	; (800ca68 <HAL_RCC_ClockConfig+0x1bc>)
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f003 0308 	and.w	r3, r3, #8
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d009      	beq.n	800ca32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ca1e:	4b12      	ldr	r3, [pc, #72]	; (800ca68 <HAL_RCC_ClockConfig+0x1bc>)
 800ca20:	689b      	ldr	r3, [r3, #8]
 800ca22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	691b      	ldr	r3, [r3, #16]
 800ca2a:	00db      	lsls	r3, r3, #3
 800ca2c:	490e      	ldr	r1, [pc, #56]	; (800ca68 <HAL_RCC_ClockConfig+0x1bc>)
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ca32:	f000 f821 	bl	800ca78 <HAL_RCC_GetSysClockFreq>
 800ca36:	4602      	mov	r2, r0
 800ca38:	4b0b      	ldr	r3, [pc, #44]	; (800ca68 <HAL_RCC_ClockConfig+0x1bc>)
 800ca3a:	689b      	ldr	r3, [r3, #8]
 800ca3c:	091b      	lsrs	r3, r3, #4
 800ca3e:	f003 030f 	and.w	r3, r3, #15
 800ca42:	490a      	ldr	r1, [pc, #40]	; (800ca6c <HAL_RCC_ClockConfig+0x1c0>)
 800ca44:	5ccb      	ldrb	r3, [r1, r3]
 800ca46:	fa22 f303 	lsr.w	r3, r2, r3
 800ca4a:	4a09      	ldr	r2, [pc, #36]	; (800ca70 <HAL_RCC_ClockConfig+0x1c4>)
 800ca4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ca4e:	4b09      	ldr	r3, [pc, #36]	; (800ca74 <HAL_RCC_ClockConfig+0x1c8>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7f6 ff22 	bl	800389c <HAL_InitTick>

  return HAL_OK;
 800ca58:	2300      	movs	r3, #0
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3710      	adds	r7, #16
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	40023c00 	.word	0x40023c00
 800ca68:	40023800 	.word	0x40023800
 800ca6c:	0801a748 	.word	0x0801a748
 800ca70:	20000004 	.word	0x20000004
 800ca74:	20000008 	.word	0x20000008

0800ca78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ca78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca7c:	b094      	sub	sp, #80	; 0x50
 800ca7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ca80:	2300      	movs	r3, #0
 800ca82:	647b      	str	r3, [r7, #68]	; 0x44
 800ca84:	2300      	movs	r3, #0
 800ca86:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca88:	2300      	movs	r3, #0
 800ca8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ca90:	4b79      	ldr	r3, [pc, #484]	; (800cc78 <HAL_RCC_GetSysClockFreq+0x200>)
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	f003 030c 	and.w	r3, r3, #12
 800ca98:	2b08      	cmp	r3, #8
 800ca9a:	d00d      	beq.n	800cab8 <HAL_RCC_GetSysClockFreq+0x40>
 800ca9c:	2b08      	cmp	r3, #8
 800ca9e:	f200 80e1 	bhi.w	800cc64 <HAL_RCC_GetSysClockFreq+0x1ec>
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d002      	beq.n	800caac <HAL_RCC_GetSysClockFreq+0x34>
 800caa6:	2b04      	cmp	r3, #4
 800caa8:	d003      	beq.n	800cab2 <HAL_RCC_GetSysClockFreq+0x3a>
 800caaa:	e0db      	b.n	800cc64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800caac:	4b73      	ldr	r3, [pc, #460]	; (800cc7c <HAL_RCC_GetSysClockFreq+0x204>)
 800caae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800cab0:	e0db      	b.n	800cc6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cab2:	4b72      	ldr	r3, [pc, #456]	; (800cc7c <HAL_RCC_GetSysClockFreq+0x204>)
 800cab4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cab6:	e0d8      	b.n	800cc6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cab8:	4b6f      	ldr	r3, [pc, #444]	; (800cc78 <HAL_RCC_GetSysClockFreq+0x200>)
 800caba:	685b      	ldr	r3, [r3, #4]
 800cabc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cac0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800cac2:	4b6d      	ldr	r3, [pc, #436]	; (800cc78 <HAL_RCC_GetSysClockFreq+0x200>)
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d063      	beq.n	800cb96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cace:	4b6a      	ldr	r3, [pc, #424]	; (800cc78 <HAL_RCC_GetSysClockFreq+0x200>)
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	099b      	lsrs	r3, r3, #6
 800cad4:	2200      	movs	r2, #0
 800cad6:	63bb      	str	r3, [r7, #56]	; 0x38
 800cad8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cadc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cae0:	633b      	str	r3, [r7, #48]	; 0x30
 800cae2:	2300      	movs	r3, #0
 800cae4:	637b      	str	r3, [r7, #52]	; 0x34
 800cae6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800caea:	4622      	mov	r2, r4
 800caec:	462b      	mov	r3, r5
 800caee:	f04f 0000 	mov.w	r0, #0
 800caf2:	f04f 0100 	mov.w	r1, #0
 800caf6:	0159      	lsls	r1, r3, #5
 800caf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cafc:	0150      	lsls	r0, r2, #5
 800cafe:	4602      	mov	r2, r0
 800cb00:	460b      	mov	r3, r1
 800cb02:	4621      	mov	r1, r4
 800cb04:	1a51      	subs	r1, r2, r1
 800cb06:	6139      	str	r1, [r7, #16]
 800cb08:	4629      	mov	r1, r5
 800cb0a:	eb63 0301 	sbc.w	r3, r3, r1
 800cb0e:	617b      	str	r3, [r7, #20]
 800cb10:	f04f 0200 	mov.w	r2, #0
 800cb14:	f04f 0300 	mov.w	r3, #0
 800cb18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cb1c:	4659      	mov	r1, fp
 800cb1e:	018b      	lsls	r3, r1, #6
 800cb20:	4651      	mov	r1, sl
 800cb22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800cb26:	4651      	mov	r1, sl
 800cb28:	018a      	lsls	r2, r1, #6
 800cb2a:	4651      	mov	r1, sl
 800cb2c:	ebb2 0801 	subs.w	r8, r2, r1
 800cb30:	4659      	mov	r1, fp
 800cb32:	eb63 0901 	sbc.w	r9, r3, r1
 800cb36:	f04f 0200 	mov.w	r2, #0
 800cb3a:	f04f 0300 	mov.w	r3, #0
 800cb3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cb42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cb46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cb4a:	4690      	mov	r8, r2
 800cb4c:	4699      	mov	r9, r3
 800cb4e:	4623      	mov	r3, r4
 800cb50:	eb18 0303 	adds.w	r3, r8, r3
 800cb54:	60bb      	str	r3, [r7, #8]
 800cb56:	462b      	mov	r3, r5
 800cb58:	eb49 0303 	adc.w	r3, r9, r3
 800cb5c:	60fb      	str	r3, [r7, #12]
 800cb5e:	f04f 0200 	mov.w	r2, #0
 800cb62:	f04f 0300 	mov.w	r3, #0
 800cb66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	028b      	lsls	r3, r1, #10
 800cb6e:	4621      	mov	r1, r4
 800cb70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cb74:	4621      	mov	r1, r4
 800cb76:	028a      	lsls	r2, r1, #10
 800cb78:	4610      	mov	r0, r2
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb7e:	2200      	movs	r2, #0
 800cb80:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb82:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cb88:	f7f4 f80e 	bl	8000ba8 <__aeabi_uldivmod>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	460b      	mov	r3, r1
 800cb90:	4613      	mov	r3, r2
 800cb92:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb94:	e058      	b.n	800cc48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cb96:	4b38      	ldr	r3, [pc, #224]	; (800cc78 <HAL_RCC_GetSysClockFreq+0x200>)
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	099b      	lsrs	r3, r3, #6
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	4618      	mov	r0, r3
 800cba0:	4611      	mov	r1, r2
 800cba2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800cba6:	623b      	str	r3, [r7, #32]
 800cba8:	2300      	movs	r3, #0
 800cbaa:	627b      	str	r3, [r7, #36]	; 0x24
 800cbac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800cbb0:	4642      	mov	r2, r8
 800cbb2:	464b      	mov	r3, r9
 800cbb4:	f04f 0000 	mov.w	r0, #0
 800cbb8:	f04f 0100 	mov.w	r1, #0
 800cbbc:	0159      	lsls	r1, r3, #5
 800cbbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cbc2:	0150      	lsls	r0, r2, #5
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	4641      	mov	r1, r8
 800cbca:	ebb2 0a01 	subs.w	sl, r2, r1
 800cbce:	4649      	mov	r1, r9
 800cbd0:	eb63 0b01 	sbc.w	fp, r3, r1
 800cbd4:	f04f 0200 	mov.w	r2, #0
 800cbd8:	f04f 0300 	mov.w	r3, #0
 800cbdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800cbe0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800cbe4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800cbe8:	ebb2 040a 	subs.w	r4, r2, sl
 800cbec:	eb63 050b 	sbc.w	r5, r3, fp
 800cbf0:	f04f 0200 	mov.w	r2, #0
 800cbf4:	f04f 0300 	mov.w	r3, #0
 800cbf8:	00eb      	lsls	r3, r5, #3
 800cbfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cbfe:	00e2      	lsls	r2, r4, #3
 800cc00:	4614      	mov	r4, r2
 800cc02:	461d      	mov	r5, r3
 800cc04:	4643      	mov	r3, r8
 800cc06:	18e3      	adds	r3, r4, r3
 800cc08:	603b      	str	r3, [r7, #0]
 800cc0a:	464b      	mov	r3, r9
 800cc0c:	eb45 0303 	adc.w	r3, r5, r3
 800cc10:	607b      	str	r3, [r7, #4]
 800cc12:	f04f 0200 	mov.w	r2, #0
 800cc16:	f04f 0300 	mov.w	r3, #0
 800cc1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800cc1e:	4629      	mov	r1, r5
 800cc20:	028b      	lsls	r3, r1, #10
 800cc22:	4621      	mov	r1, r4
 800cc24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cc28:	4621      	mov	r1, r4
 800cc2a:	028a      	lsls	r2, r1, #10
 800cc2c:	4610      	mov	r0, r2
 800cc2e:	4619      	mov	r1, r3
 800cc30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc32:	2200      	movs	r2, #0
 800cc34:	61bb      	str	r3, [r7, #24]
 800cc36:	61fa      	str	r2, [r7, #28]
 800cc38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cc3c:	f7f3 ffb4 	bl	8000ba8 <__aeabi_uldivmod>
 800cc40:	4602      	mov	r2, r0
 800cc42:	460b      	mov	r3, r1
 800cc44:	4613      	mov	r3, r2
 800cc46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800cc48:	4b0b      	ldr	r3, [pc, #44]	; (800cc78 <HAL_RCC_GetSysClockFreq+0x200>)
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	0c1b      	lsrs	r3, r3, #16
 800cc4e:	f003 0303 	and.w	r3, r3, #3
 800cc52:	3301      	adds	r3, #1
 800cc54:	005b      	lsls	r3, r3, #1
 800cc56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800cc58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cc62:	e002      	b.n	800cc6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cc64:	4b05      	ldr	r3, [pc, #20]	; (800cc7c <HAL_RCC_GetSysClockFreq+0x204>)
 800cc66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cc68:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cc6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3750      	adds	r7, #80	; 0x50
 800cc70:	46bd      	mov	sp, r7
 800cc72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc76:	bf00      	nop
 800cc78:	40023800 	.word	0x40023800
 800cc7c:	00f42400 	.word	0x00f42400

0800cc80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cc80:	b480      	push	{r7}
 800cc82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cc84:	4b03      	ldr	r3, [pc, #12]	; (800cc94 <HAL_RCC_GetHCLKFreq+0x14>)
 800cc86:	681b      	ldr	r3, [r3, #0]
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	20000004 	.word	0x20000004

0800cc98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800cc9c:	f7ff fff0 	bl	800cc80 <HAL_RCC_GetHCLKFreq>
 800cca0:	4602      	mov	r2, r0
 800cca2:	4b05      	ldr	r3, [pc, #20]	; (800ccb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	0a9b      	lsrs	r3, r3, #10
 800cca8:	f003 0307 	and.w	r3, r3, #7
 800ccac:	4903      	ldr	r1, [pc, #12]	; (800ccbc <HAL_RCC_GetPCLK1Freq+0x24>)
 800ccae:	5ccb      	ldrb	r3, [r1, r3]
 800ccb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	40023800 	.word	0x40023800
 800ccbc:	0801a758 	.word	0x0801a758

0800ccc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ccc4:	f7ff ffdc 	bl	800cc80 <HAL_RCC_GetHCLKFreq>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	4b05      	ldr	r3, [pc, #20]	; (800cce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	0b5b      	lsrs	r3, r3, #13
 800ccd0:	f003 0307 	and.w	r3, r3, #7
 800ccd4:	4903      	ldr	r1, [pc, #12]	; (800cce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ccd6:	5ccb      	ldrb	r3, [r1, r3]
 800ccd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	40023800 	.word	0x40023800
 800cce4:	0801a758 	.word	0x0801a758

0800cce8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	220f      	movs	r2, #15
 800ccf6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ccf8:	4b12      	ldr	r3, [pc, #72]	; (800cd44 <HAL_RCC_GetClockConfig+0x5c>)
 800ccfa:	689b      	ldr	r3, [r3, #8]
 800ccfc:	f003 0203 	and.w	r2, r3, #3
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cd04:	4b0f      	ldr	r3, [pc, #60]	; (800cd44 <HAL_RCC_GetClockConfig+0x5c>)
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cd10:	4b0c      	ldr	r3, [pc, #48]	; (800cd44 <HAL_RCC_GetClockConfig+0x5c>)
 800cd12:	689b      	ldr	r3, [r3, #8]
 800cd14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800cd1c:	4b09      	ldr	r3, [pc, #36]	; (800cd44 <HAL_RCC_GetClockConfig+0x5c>)
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	08db      	lsrs	r3, r3, #3
 800cd22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cd2a:	4b07      	ldr	r3, [pc, #28]	; (800cd48 <HAL_RCC_GetClockConfig+0x60>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f003 0207 	and.w	r2, r3, #7
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	601a      	str	r2, [r3, #0]
}
 800cd36:	bf00      	nop
 800cd38:	370c      	adds	r7, #12
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr
 800cd42:	bf00      	nop
 800cd44:	40023800 	.word	0x40023800
 800cd48:	40023c00 	.word	0x40023c00

0800cd4c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d101      	bne.n	800cd5e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	e022      	b.n	800cda4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d105      	bne.n	800cd76 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f7f6 f9c5 	bl	8003100 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2203      	movs	r2, #3
 800cd7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 f814 	bl	800cdac <HAL_SD_InitCard>
 800cd84:	4603      	mov	r3, r0
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d001      	beq.n	800cd8e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e00a      	b.n	800cda4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2200      	movs	r2, #0
 800cd92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2200      	movs	r2, #0
 800cd98:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cda2:	2300      	movs	r3, #0
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3708      	adds	r7, #8
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cdac:	b5b0      	push	{r4, r5, r7, lr}
 800cdae:	b08e      	sub	sp, #56	; 0x38
 800cdb0:	af04      	add	r7, sp, #16
 800cdb2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cdc8:	2376      	movs	r3, #118	; 0x76
 800cdca:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681d      	ldr	r5, [r3, #0]
 800cdd0:	466c      	mov	r4, sp
 800cdd2:	f107 0314 	add.w	r3, r7, #20
 800cdd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cdda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cdde:	f107 0308 	add.w	r3, r7, #8
 800cde2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cde4:	4628      	mov	r0, r5
 800cde6:	f004 f90d 	bl	8011004 <SDIO_Init>
 800cdea:	4603      	mov	r3, r0
 800cdec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800cdf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d001      	beq.n	800cdfc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	e04f      	b.n	800ce9c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cdfc:	4b29      	ldr	r3, [pc, #164]	; (800cea4 <HAL_SD_InitCard+0xf8>)
 800cdfe:	2200      	movs	r2, #0
 800ce00:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4618      	mov	r0, r3
 800ce08:	f004 f945 	bl	8011096 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800ce0c:	4b25      	ldr	r3, [pc, #148]	; (800cea4 <HAL_SD_InitCard+0xf8>)
 800ce0e:	2201      	movs	r2, #1
 800ce10:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800ce12:	2002      	movs	r0, #2
 800ce14:	f7fc fb7e 	bl	8009514 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 ff03 	bl	800dc24 <SD_PowerON>
 800ce1e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce20:	6a3b      	ldr	r3, [r7, #32]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d00b      	beq.n	800ce3e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce32:	6a3b      	ldr	r3, [r7, #32]
 800ce34:	431a      	orrs	r2, r3
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e02e      	b.n	800ce9c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 fe22 	bl	800da88 <SD_InitCard>
 800ce44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce46:	6a3b      	ldr	r3, [r7, #32]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d00b      	beq.n	800ce64 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce58:	6a3b      	ldr	r3, [r7, #32]
 800ce5a:	431a      	orrs	r2, r3
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ce60:	2301      	movs	r3, #1
 800ce62:	e01b      	b.n	800ce9c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f004 f9a4 	bl	80111ba <SDMMC_CmdBlockLength>
 800ce72:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce74:	6a3b      	ldr	r3, [r7, #32]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d00f      	beq.n	800ce9a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4a0a      	ldr	r2, [pc, #40]	; (800cea8 <HAL_SD_InitCard+0xfc>)
 800ce80:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce86:	6a3b      	ldr	r3, [r7, #32]
 800ce88:	431a      	orrs	r2, r3
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2201      	movs	r2, #1
 800ce92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ce96:	2301      	movs	r3, #1
 800ce98:	e000      	b.n	800ce9c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800ce9a:	2300      	movs	r3, #0
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3728      	adds	r7, #40	; 0x28
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bdb0      	pop	{r4, r5, r7, pc}
 800cea4:	422580a0 	.word	0x422580a0
 800cea8:	004005ff 	.word	0x004005ff

0800ceac <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b092      	sub	sp, #72	; 0x48
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	607a      	str	r2, [r7, #4]
 800ceb8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ceba:	f7fc fb1f 	bl	80094fc <HAL_GetTick>
 800cebe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d107      	bne.n	800cede <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ced2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ceda:	2301      	movs	r3, #1
 800cedc:	e1bd      	b.n	800d25a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cee4:	b2db      	uxtb	r3, r3
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	f040 81b0 	bne.w	800d24c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2200      	movs	r2, #0
 800cef0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	441a      	add	r2, r3
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d907      	bls.n	800cf10 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf04:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	e1a4      	b.n	800d25a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2203      	movs	r2, #3
 800cf14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	d002      	beq.n	800cf2e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800cf28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2a:	025b      	lsls	r3, r3, #9
 800cf2c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cf2e:	f04f 33ff 	mov.w	r3, #4294967295
 800cf32:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	025b      	lsls	r3, r3, #9
 800cf38:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cf3a:	2390      	movs	r3, #144	; 0x90
 800cf3c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cf3e:	2302      	movs	r3, #2
 800cf40:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cf42:	2300      	movs	r3, #0
 800cf44:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800cf46:	2301      	movs	r3, #1
 800cf48:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f107 0214 	add.w	r2, r7, #20
 800cf52:	4611      	mov	r1, r2
 800cf54:	4618      	mov	r0, r3
 800cf56:	f004 f904 	bl	8011162 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d90a      	bls.n	800cf76 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2202      	movs	r2, #2
 800cf64:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f004 f968 	bl	8011242 <SDMMC_CmdReadMultiBlock>
 800cf72:	6478      	str	r0, [r7, #68]	; 0x44
 800cf74:	e009      	b.n	800cf8a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf82:	4618      	mov	r0, r3
 800cf84:	f004 f93b 	bl	80111fe <SDMMC_CmdReadSingleBlock>
 800cf88:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d012      	beq.n	800cfb6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	4a7a      	ldr	r2, [pc, #488]	; (800d180 <HAL_SD_ReadBlocks+0x2d4>)
 800cf96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf9e:	431a      	orrs	r2, r3
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	e151      	b.n	800d25a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800cfba:	e061      	b.n	800d080 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d03c      	beq.n	800d044 <HAL_SD_ReadBlocks+0x198>
 800cfca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d039      	beq.n	800d044 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	643b      	str	r3, [r7, #64]	; 0x40
 800cfd4:	e033      	b.n	800d03e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f004 f83d 	bl	801105a <SDIO_ReadFIFO>
 800cfe0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800cfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe4:	b2da      	uxtb	r2, r3
 800cfe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cfea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfec:	3301      	adds	r3, #1
 800cfee:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cff2:	3b01      	subs	r3, #1
 800cff4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff8:	0a1b      	lsrs	r3, r3, #8
 800cffa:	b2da      	uxtb	r2, r3
 800cffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cffe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d002:	3301      	adds	r3, #1
 800d004:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d008:	3b01      	subs	r3, #1
 800d00a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d00e:	0c1b      	lsrs	r3, r3, #16
 800d010:	b2da      	uxtb	r2, r3
 800d012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d014:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d018:	3301      	adds	r3, #1
 800d01a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d01e:	3b01      	subs	r3, #1
 800d020:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d024:	0e1b      	lsrs	r3, r3, #24
 800d026:	b2da      	uxtb	r2, r3
 800d028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d02a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d02c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d02e:	3301      	adds	r3, #1
 800d030:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d034:	3b01      	subs	r3, #1
 800d036:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800d038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d03a:	3301      	adds	r3, #1
 800d03c:	643b      	str	r3, [r7, #64]	; 0x40
 800d03e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d040:	2b07      	cmp	r3, #7
 800d042:	d9c8      	bls.n	800cfd6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d044:	f7fc fa5a 	bl	80094fc <HAL_GetTick>
 800d048:	4602      	mov	r2, r0
 800d04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04c:	1ad3      	subs	r3, r2, r3
 800d04e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d050:	429a      	cmp	r2, r3
 800d052:	d902      	bls.n	800d05a <HAL_SD_ReadBlocks+0x1ae>
 800d054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d056:	2b00      	cmp	r3, #0
 800d058:	d112      	bne.n	800d080 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	4a48      	ldr	r2, [pc, #288]	; (800d180 <HAL_SD_ReadBlocks+0x2d4>)
 800d060:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d066:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2201      	movs	r2, #1
 800d072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2200      	movs	r2, #0
 800d07a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d07c:	2303      	movs	r3, #3
 800d07e:	e0ec      	b.n	800d25a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d086:	f240 332a 	movw	r3, #810	; 0x32a
 800d08a:	4013      	ands	r3, r2
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d095      	beq.n	800cfbc <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d022      	beq.n	800d0e4 <HAL_SD_ReadBlocks+0x238>
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d91f      	bls.n	800d0e4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0a8:	2b03      	cmp	r3, #3
 800d0aa:	d01b      	beq.n	800d0e4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f004 f92d 	bl	8011310 <SDMMC_CmdStopTransfer>
 800d0b6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d0b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d012      	beq.n	800d0e4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4a2f      	ldr	r2, [pc, #188]	; (800d180 <HAL_SD_ReadBlocks+0x2d4>)
 800d0c4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0cc:	431a      	orrs	r2, r3
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e0ba      	b.n	800d25a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0ea:	f003 0308 	and.w	r3, r3, #8
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d012      	beq.n	800d118 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	4a22      	ldr	r2, [pc, #136]	; (800d180 <HAL_SD_ReadBlocks+0x2d4>)
 800d0f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0fe:	f043 0208 	orr.w	r2, r3, #8
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2201      	movs	r2, #1
 800d10a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2200      	movs	r2, #0
 800d112:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d114:	2301      	movs	r3, #1
 800d116:	e0a0      	b.n	800d25a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d11e:	f003 0302 	and.w	r3, r3, #2
 800d122:	2b00      	cmp	r3, #0
 800d124:	d012      	beq.n	800d14c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4a15      	ldr	r2, [pc, #84]	; (800d180 <HAL_SD_ReadBlocks+0x2d4>)
 800d12c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d132:	f043 0202 	orr.w	r2, r3, #2
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2201      	movs	r2, #1
 800d13e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2200      	movs	r2, #0
 800d146:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d148:	2301      	movs	r3, #1
 800d14a:	e086      	b.n	800d25a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d152:	f003 0320 	and.w	r3, r3, #32
 800d156:	2b00      	cmp	r3, #0
 800d158:	d063      	beq.n	800d222 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	4a08      	ldr	r2, [pc, #32]	; (800d180 <HAL_SD_ReadBlocks+0x2d4>)
 800d160:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d166:	f043 0220 	orr.w	r2, r3, #32
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2201      	movs	r2, #1
 800d172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2200      	movs	r2, #0
 800d17a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d17c:	2301      	movs	r3, #1
 800d17e:	e06c      	b.n	800d25a <HAL_SD_ReadBlocks+0x3ae>
 800d180:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	4618      	mov	r0, r3
 800d18a:	f003 ff66 	bl	801105a <SDIO_ReadFIFO>
 800d18e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800d190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d192:	b2da      	uxtb	r2, r3
 800d194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d196:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d19a:	3301      	adds	r3, #1
 800d19c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d19e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1a0:	3b01      	subs	r3, #1
 800d1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a6:	0a1b      	lsrs	r3, r3, #8
 800d1a8:	b2da      	uxtb	r2, r3
 800d1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ac:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d1ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1b6:	3b01      	subs	r3, #1
 800d1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1bc:	0c1b      	lsrs	r3, r3, #16
 800d1be:	b2da      	uxtb	r2, r3
 800d1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d1ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1cc:	3b01      	subs	r3, #1
 800d1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d2:	0e1b      	lsrs	r3, r3, #24
 800d1d4:	b2da      	uxtb	r2, r3
 800d1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1d8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1dc:	3301      	adds	r3, #1
 800d1de:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d1e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1e2:	3b01      	subs	r3, #1
 800d1e4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d1e6:	f7fc f989 	bl	80094fc <HAL_GetTick>
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ee:	1ad3      	subs	r3, r2, r3
 800d1f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d902      	bls.n	800d1fc <HAL_SD_ReadBlocks+0x350>
 800d1f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d112      	bne.n	800d222 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a18      	ldr	r2, [pc, #96]	; (800d264 <HAL_SD_ReadBlocks+0x3b8>)
 800d202:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d208:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	2201      	movs	r2, #1
 800d214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2200      	movs	r2, #0
 800d21c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d21e:	2301      	movs	r3, #1
 800d220:	e01b      	b.n	800d25a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d002      	beq.n	800d236 <HAL_SD_ReadBlocks+0x38a>
 800d230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d232:	2b00      	cmp	r3, #0
 800d234:	d1a6      	bne.n	800d184 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f240 523a 	movw	r2, #1338	; 0x53a
 800d23e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2201      	movs	r2, #1
 800d244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d248:	2300      	movs	r3, #0
 800d24a:	e006      	b.n	800d25a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d250:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d258:	2301      	movs	r3, #1
  }
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3748      	adds	r7, #72	; 0x48
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	004005ff 	.word	0x004005ff

0800d268 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b092      	sub	sp, #72	; 0x48
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	60f8      	str	r0, [r7, #12]
 800d270:	60b9      	str	r1, [r7, #8]
 800d272:	607a      	str	r2, [r7, #4]
 800d274:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d276:	f7fc f941 	bl	80094fc <HAL_GetTick>
 800d27a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d107      	bne.n	800d29a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d28e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d296:	2301      	movs	r3, #1
 800d298:	e166      	b.n	800d568 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d2a0:	b2db      	uxtb	r3, r3
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	f040 8159 	bne.w	800d55a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d2ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	441a      	add	r2, r3
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d907      	bls.n	800d2cc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2c0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	e14d      	b.n	800d568 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2203      	movs	r2, #3
 800d2d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d002      	beq.n	800d2ea <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e6:	025b      	lsls	r3, r3, #9
 800d2e8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d2ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d2ee:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	025b      	lsls	r3, r3, #9
 800d2f4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d2f6:	2390      	movs	r3, #144	; 0x90
 800d2f8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d2fe:	2300      	movs	r3, #0
 800d300:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800d302:	2301      	movs	r3, #1
 800d304:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f107 0218 	add.w	r2, r7, #24
 800d30e:	4611      	mov	r1, r2
 800d310:	4618      	mov	r0, r3
 800d312:	f003 ff26 	bl	8011162 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d90a      	bls.n	800d332 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2220      	movs	r2, #32
 800d320:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d328:	4618      	mov	r0, r3
 800d32a:	f003 ffce 	bl	80112ca <SDMMC_CmdWriteMultiBlock>
 800d32e:	6478      	str	r0, [r7, #68]	; 0x44
 800d330:	e009      	b.n	800d346 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2210      	movs	r2, #16
 800d336:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d33e:	4618      	mov	r0, r3
 800d340:	f003 ffa1 	bl	8011286 <SDMMC_CmdWriteSingleBlock>
 800d344:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d012      	beq.n	800d372 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4a87      	ldr	r2, [pc, #540]	; (800d570 <HAL_SD_WriteBlocks+0x308>)
 800d352:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d35a:	431a      	orrs	r2, r3
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2201      	movs	r2, #1
 800d364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	2200      	movs	r2, #0
 800d36c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d36e:	2301      	movs	r3, #1
 800d370:	e0fa      	b.n	800d568 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800d376:	e065      	b.n	800d444 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d37e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d382:	2b00      	cmp	r3, #0
 800d384:	d040      	beq.n	800d408 <HAL_SD_WriteBlocks+0x1a0>
 800d386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d03d      	beq.n	800d408 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d38c:	2300      	movs	r3, #0
 800d38e:	643b      	str	r3, [r7, #64]	; 0x40
 800d390:	e037      	b.n	800d402 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800d392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d39a:	3301      	adds	r3, #1
 800d39c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3a0:	3b01      	subs	r3, #1
 800d3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	021a      	lsls	r2, r3, #8
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d3b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d3b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3b8:	3b01      	subs	r3, #1
 800d3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d3bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	041a      	lsls	r2, r3, #16
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d3c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3d0:	3b01      	subs	r3, #1
 800d3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	061a      	lsls	r2, r3, #24
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d3e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3e8:	3b01      	subs	r3, #1
 800d3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f107 0214 	add.w	r2, r7, #20
 800d3f4:	4611      	mov	r1, r2
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f003 fe3c 	bl	8011074 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d3fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3fe:	3301      	adds	r3, #1
 800d400:	643b      	str	r3, [r7, #64]	; 0x40
 800d402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d404:	2b07      	cmp	r3, #7
 800d406:	d9c4      	bls.n	800d392 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d408:	f7fc f878 	bl	80094fc <HAL_GetTick>
 800d40c:	4602      	mov	r2, r0
 800d40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d410:	1ad3      	subs	r3, r2, r3
 800d412:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d414:	429a      	cmp	r2, r3
 800d416:	d902      	bls.n	800d41e <HAL_SD_WriteBlocks+0x1b6>
 800d418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d112      	bne.n	800d444 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	4a53      	ldr	r2, [pc, #332]	; (800d570 <HAL_SD_WriteBlocks+0x308>)
 800d424:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d42a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d42c:	431a      	orrs	r2, r3
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2201      	movs	r2, #1
 800d436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2200      	movs	r2, #0
 800d43e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d440:	2303      	movs	r3, #3
 800d442:	e091      	b.n	800d568 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d44a:	f240 331a 	movw	r3, #794	; 0x31a
 800d44e:	4013      	ands	r3, r2
 800d450:	2b00      	cmp	r3, #0
 800d452:	d091      	beq.n	800d378 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d45a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d022      	beq.n	800d4a8 <HAL_SD_WriteBlocks+0x240>
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	2b01      	cmp	r3, #1
 800d466:	d91f      	bls.n	800d4a8 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d46c:	2b03      	cmp	r3, #3
 800d46e:	d01b      	beq.n	800d4a8 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4618      	mov	r0, r3
 800d476:	f003 ff4b 	bl	8011310 <SDMMC_CmdStopTransfer>
 800d47a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d47c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d012      	beq.n	800d4a8 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a3a      	ldr	r2, [pc, #232]	; (800d570 <HAL_SD_WriteBlocks+0x308>)
 800d488:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d48e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d490:	431a      	orrs	r2, r3
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2201      	movs	r2, #1
 800d49a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	e05f      	b.n	800d568 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ae:	f003 0308 	and.w	r3, r3, #8
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d012      	beq.n	800d4dc <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	4a2d      	ldr	r2, [pc, #180]	; (800d570 <HAL_SD_WriteBlocks+0x308>)
 800d4bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c2:	f043 0208 	orr.w	r2, r3, #8
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	e045      	b.n	800d568 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4e2:	f003 0302 	and.w	r3, r3, #2
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d012      	beq.n	800d510 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	4a20      	ldr	r2, [pc, #128]	; (800d570 <HAL_SD_WriteBlocks+0x308>)
 800d4f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f6:	f043 0202 	orr.w	r2, r3, #2
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2201      	movs	r2, #1
 800d502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2200      	movs	r2, #0
 800d50a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d50c:	2301      	movs	r3, #1
 800d50e:	e02b      	b.n	800d568 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d516:	f003 0310 	and.w	r3, r3, #16
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d012      	beq.n	800d544 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	4a13      	ldr	r2, [pc, #76]	; (800d570 <HAL_SD_WriteBlocks+0x308>)
 800d524:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d52a:	f043 0210 	orr.w	r2, r3, #16
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	2201      	movs	r2, #1
 800d536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	2200      	movs	r2, #0
 800d53e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d540:	2301      	movs	r3, #1
 800d542:	e011      	b.n	800d568 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f240 523a 	movw	r2, #1338	; 0x53a
 800d54c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2201      	movs	r2, #1
 800d552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d556:	2300      	movs	r3, #0
 800d558:	e006      	b.n	800d568 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d55e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d566:	2301      	movs	r3, #1
  }
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3748      	adds	r7, #72	; 0x48
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	004005ff 	.word	0x004005ff

0800d574 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d574:	b480      	push	{r7}
 800d576:	b083      	sub	sp, #12
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d582:	0f9b      	lsrs	r3, r3, #30
 800d584:	b2da      	uxtb	r2, r3
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d58e:	0e9b      	lsrs	r3, r3, #26
 800d590:	b2db      	uxtb	r3, r3
 800d592:	f003 030f 	and.w	r3, r3, #15
 800d596:	b2da      	uxtb	r2, r3
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5a0:	0e1b      	lsrs	r3, r3, #24
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	f003 0303 	and.w	r3, r3, #3
 800d5a8:	b2da      	uxtb	r2, r3
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5b2:	0c1b      	lsrs	r3, r3, #16
 800d5b4:	b2da      	uxtb	r2, r3
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5be:	0a1b      	lsrs	r3, r3, #8
 800d5c0:	b2da      	uxtb	r2, r3
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5ca:	b2da      	uxtb	r2, r3
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5d4:	0d1b      	lsrs	r3, r3, #20
 800d5d6:	b29a      	uxth	r2, r3
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5e0:	0c1b      	lsrs	r3, r3, #16
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	f003 030f 	and.w	r3, r3, #15
 800d5e8:	b2da      	uxtb	r2, r3
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5f2:	0bdb      	lsrs	r3, r3, #15
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	f003 0301 	and.w	r3, r3, #1
 800d5fa:	b2da      	uxtb	r2, r3
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d604:	0b9b      	lsrs	r3, r3, #14
 800d606:	b2db      	uxtb	r3, r3
 800d608:	f003 0301 	and.w	r3, r3, #1
 800d60c:	b2da      	uxtb	r2, r3
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d616:	0b5b      	lsrs	r3, r3, #13
 800d618:	b2db      	uxtb	r3, r3
 800d61a:	f003 0301 	and.w	r3, r3, #1
 800d61e:	b2da      	uxtb	r2, r3
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d628:	0b1b      	lsrs	r3, r3, #12
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	f003 0301 	and.w	r3, r3, #1
 800d630:	b2da      	uxtb	r2, r3
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	2200      	movs	r2, #0
 800d63a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d640:	2b00      	cmp	r3, #0
 800d642:	d163      	bne.n	800d70c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d648:	009a      	lsls	r2, r3, #2
 800d64a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d64e:	4013      	ands	r3, r2
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d654:	0f92      	lsrs	r2, r2, #30
 800d656:	431a      	orrs	r2, r3
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d660:	0edb      	lsrs	r3, r3, #27
 800d662:	b2db      	uxtb	r3, r3
 800d664:	f003 0307 	and.w	r3, r3, #7
 800d668:	b2da      	uxtb	r2, r3
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d672:	0e1b      	lsrs	r3, r3, #24
 800d674:	b2db      	uxtb	r3, r3
 800d676:	f003 0307 	and.w	r3, r3, #7
 800d67a:	b2da      	uxtb	r2, r3
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d684:	0d5b      	lsrs	r3, r3, #21
 800d686:	b2db      	uxtb	r3, r3
 800d688:	f003 0307 	and.w	r3, r3, #7
 800d68c:	b2da      	uxtb	r2, r3
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d696:	0c9b      	lsrs	r3, r3, #18
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	f003 0307 	and.w	r3, r3, #7
 800d69e:	b2da      	uxtb	r2, r3
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6a8:	0bdb      	lsrs	r3, r3, #15
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	f003 0307 	and.w	r3, r3, #7
 800d6b0:	b2da      	uxtb	r2, r3
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	691b      	ldr	r3, [r3, #16]
 800d6ba:	1c5a      	adds	r2, r3, #1
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	7e1b      	ldrb	r3, [r3, #24]
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	f003 0307 	and.w	r3, r3, #7
 800d6ca:	3302      	adds	r3, #2
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d6d6:	fb03 f202 	mul.w	r2, r3, r2
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	7a1b      	ldrb	r3, [r3, #8]
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	f003 030f 	and.w	r3, r3, #15
 800d6e8:	2201      	movs	r2, #1
 800d6ea:	409a      	lsls	r2, r3
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d6f8:	0a52      	lsrs	r2, r2, #9
 800d6fa:	fb03 f202 	mul.w	r2, r3, r2
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d708:	661a      	str	r2, [r3, #96]	; 0x60
 800d70a:	e031      	b.n	800d770 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d710:	2b01      	cmp	r3, #1
 800d712:	d11d      	bne.n	800d750 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d718:	041b      	lsls	r3, r3, #16
 800d71a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d722:	0c1b      	lsrs	r3, r3, #16
 800d724:	431a      	orrs	r2, r3
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	691b      	ldr	r3, [r3, #16]
 800d72e:	3301      	adds	r3, #1
 800d730:	029a      	lsls	r2, r3, #10
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d744:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	661a      	str	r2, [r3, #96]	; 0x60
 800d74e:	e00f      	b.n	800d770 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	4a58      	ldr	r2, [pc, #352]	; (800d8b8 <HAL_SD_GetCardCSD+0x344>)
 800d756:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d75c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2201      	movs	r2, #1
 800d768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d76c:	2301      	movs	r3, #1
 800d76e:	e09d      	b.n	800d8ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d774:	0b9b      	lsrs	r3, r3, #14
 800d776:	b2db      	uxtb	r3, r3
 800d778:	f003 0301 	and.w	r3, r3, #1
 800d77c:	b2da      	uxtb	r2, r3
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d786:	09db      	lsrs	r3, r3, #7
 800d788:	b2db      	uxtb	r3, r3
 800d78a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d78e:	b2da      	uxtb	r2, r3
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d79e:	b2da      	uxtb	r2, r3
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7a8:	0fdb      	lsrs	r3, r3, #31
 800d7aa:	b2da      	uxtb	r2, r3
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7b4:	0f5b      	lsrs	r3, r3, #29
 800d7b6:	b2db      	uxtb	r3, r3
 800d7b8:	f003 0303 	and.w	r3, r3, #3
 800d7bc:	b2da      	uxtb	r2, r3
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7c6:	0e9b      	lsrs	r3, r3, #26
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	f003 0307 	and.w	r3, r3, #7
 800d7ce:	b2da      	uxtb	r2, r3
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7d8:	0d9b      	lsrs	r3, r3, #22
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	f003 030f 	and.w	r3, r3, #15
 800d7e0:	b2da      	uxtb	r2, r3
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7ea:	0d5b      	lsrs	r3, r3, #21
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	f003 0301 	and.w	r3, r3, #1
 800d7f2:	b2da      	uxtb	r2, r3
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d806:	0c1b      	lsrs	r3, r3, #16
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	f003 0301 	and.w	r3, r3, #1
 800d80e:	b2da      	uxtb	r2, r3
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d81a:	0bdb      	lsrs	r3, r3, #15
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	f003 0301 	and.w	r3, r3, #1
 800d822:	b2da      	uxtb	r2, r3
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d82e:	0b9b      	lsrs	r3, r3, #14
 800d830:	b2db      	uxtb	r3, r3
 800d832:	f003 0301 	and.w	r3, r3, #1
 800d836:	b2da      	uxtb	r2, r3
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d842:	0b5b      	lsrs	r3, r3, #13
 800d844:	b2db      	uxtb	r3, r3
 800d846:	f003 0301 	and.w	r3, r3, #1
 800d84a:	b2da      	uxtb	r2, r3
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d856:	0b1b      	lsrs	r3, r3, #12
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	f003 0301 	and.w	r3, r3, #1
 800d85e:	b2da      	uxtb	r2, r3
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d86a:	0a9b      	lsrs	r3, r3, #10
 800d86c:	b2db      	uxtb	r3, r3
 800d86e:	f003 0303 	and.w	r3, r3, #3
 800d872:	b2da      	uxtb	r2, r3
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d87e:	0a1b      	lsrs	r3, r3, #8
 800d880:	b2db      	uxtb	r3, r3
 800d882:	f003 0303 	and.w	r3, r3, #3
 800d886:	b2da      	uxtb	r2, r3
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d892:	085b      	lsrs	r3, r3, #1
 800d894:	b2db      	uxtb	r3, r3
 800d896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d89a:	b2da      	uxtb	r2, r3
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d8aa:	2300      	movs	r3, #0
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	370c      	adds	r7, #12
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr
 800d8b8:	004005ff 	.word	0x004005ff

0800d8bc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	370c      	adds	r7, #12
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr

0800d914 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d914:	b5b0      	push	{r4, r5, r7, lr}
 800d916:	b08e      	sub	sp, #56	; 0x38
 800d918:	af04      	add	r7, sp, #16
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d91e:	2300      	movs	r3, #0
 800d920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2203      	movs	r2, #3
 800d928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d930:	2b03      	cmp	r3, #3
 800d932:	d02e      	beq.n	800d992 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d93a:	d106      	bne.n	800d94a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d940:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	639a      	str	r2, [r3, #56]	; 0x38
 800d948:	e029      	b.n	800d99e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d950:	d10a      	bne.n	800d968 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 fa1c 	bl	800dd90 <SD_WideBus_Enable>
 800d958:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d95e:	6a3b      	ldr	r3, [r7, #32]
 800d960:	431a      	orrs	r2, r3
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	639a      	str	r2, [r3, #56]	; 0x38
 800d966:	e01a      	b.n	800d99e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d10a      	bne.n	800d984 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f000 fa59 	bl	800de26 <SD_WideBus_Disable>
 800d974:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d97a:	6a3b      	ldr	r3, [r7, #32]
 800d97c:	431a      	orrs	r2, r3
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	639a      	str	r2, [r3, #56]	; 0x38
 800d982:	e00c      	b.n	800d99e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d988:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	639a      	str	r2, [r3, #56]	; 0x38
 800d990:	e005      	b.n	800d99e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d996:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00b      	beq.n	800d9be <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	4a26      	ldr	r2, [pc, #152]	; (800da44 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d9ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d9bc:	e01f      	b.n	800d9fe <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	689b      	ldr	r3, [r3, #8]
 800d9c8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	695b      	ldr	r3, [r3, #20]
 800d9d8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	699b      	ldr	r3, [r3, #24]
 800d9de:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681d      	ldr	r5, [r3, #0]
 800d9e4:	466c      	mov	r4, sp
 800d9e6:	f107 0314 	add.w	r3, r7, #20
 800d9ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d9ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d9f2:	f107 0308 	add.w	r3, r7, #8
 800d9f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	f003 fb03 	bl	8011004 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f44f 7100 	mov.w	r1, #512	; 0x200
 800da06:	4618      	mov	r0, r3
 800da08:	f003 fbd7 	bl	80111ba <SDMMC_CmdBlockLength>
 800da0c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da0e:	6a3b      	ldr	r3, [r7, #32]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d00c      	beq.n	800da2e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a0a      	ldr	r2, [pc, #40]	; (800da44 <HAL_SD_ConfigWideBusOperation+0x130>)
 800da1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da20:	6a3b      	ldr	r3, [r7, #32]
 800da22:	431a      	orrs	r2, r3
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800da28:	2301      	movs	r3, #1
 800da2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2201      	movs	r2, #1
 800da32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800da36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3728      	adds	r7, #40	; 0x28
 800da3e:	46bd      	mov	sp, r7
 800da40:	bdb0      	pop	{r4, r5, r7, pc}
 800da42:	bf00      	nop
 800da44:	004005ff 	.word	0x004005ff

0800da48 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b086      	sub	sp, #24
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800da50:	2300      	movs	r3, #0
 800da52:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800da54:	f107 030c 	add.w	r3, r7, #12
 800da58:	4619      	mov	r1, r3
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 f970 	bl	800dd40 <SD_SendStatus>
 800da60:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d005      	beq.n	800da74 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	431a      	orrs	r2, r3
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	0a5b      	lsrs	r3, r3, #9
 800da78:	f003 030f 	and.w	r3, r3, #15
 800da7c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800da7e:	693b      	ldr	r3, [r7, #16]
}
 800da80:	4618      	mov	r0, r3
 800da82:	3718      	adds	r7, #24
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800da88:	b5b0      	push	{r4, r5, r7, lr}
 800da8a:	b094      	sub	sp, #80	; 0x50
 800da8c:	af04      	add	r7, sp, #16
 800da8e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800da90:	2301      	movs	r3, #1
 800da92:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4618      	mov	r0, r3
 800da9a:	f003 fb0a 	bl	80110b2 <SDIO_GetPowerState>
 800da9e:	4603      	mov	r3, r0
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d102      	bne.n	800daaa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800daa4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800daa8:	e0b8      	b.n	800dc1c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daae:	2b03      	cmp	r3, #3
 800dab0:	d02f      	beq.n	800db12 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4618      	mov	r0, r3
 800dab8:	f003 fd34 	bl	8011524 <SDMMC_CmdSendCID>
 800dabc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dabe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d001      	beq.n	800dac8 <SD_InitCard+0x40>
    {
      return errorstate;
 800dac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dac6:	e0a9      	b.n	800dc1c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	2100      	movs	r1, #0
 800dace:	4618      	mov	r0, r3
 800dad0:	f003 fb34 	bl	801113c <SDIO_GetResponse>
 800dad4:	4602      	mov	r2, r0
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	2104      	movs	r1, #4
 800dae0:	4618      	mov	r0, r3
 800dae2:	f003 fb2b 	bl	801113c <SDIO_GetResponse>
 800dae6:	4602      	mov	r2, r0
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2108      	movs	r1, #8
 800daf2:	4618      	mov	r0, r3
 800daf4:	f003 fb22 	bl	801113c <SDIO_GetResponse>
 800daf8:	4602      	mov	r2, r0
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	210c      	movs	r1, #12
 800db04:	4618      	mov	r0, r3
 800db06:	f003 fb19 	bl	801113c <SDIO_GetResponse>
 800db0a:	4602      	mov	r2, r0
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db16:	2b03      	cmp	r3, #3
 800db18:	d00d      	beq.n	800db36 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f107 020e 	add.w	r2, r7, #14
 800db22:	4611      	mov	r1, r2
 800db24:	4618      	mov	r0, r3
 800db26:	f003 fd3a 	bl	801159e <SDMMC_CmdSetRelAdd>
 800db2a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800db2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d001      	beq.n	800db36 <SD_InitCard+0xae>
    {
      return errorstate;
 800db32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db34:	e072      	b.n	800dc1c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db3a:	2b03      	cmp	r3, #3
 800db3c:	d036      	beq.n	800dbac <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800db3e:	89fb      	ldrh	r3, [r7, #14]
 800db40:	461a      	mov	r2, r3
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db4e:	041b      	lsls	r3, r3, #16
 800db50:	4619      	mov	r1, r3
 800db52:	4610      	mov	r0, r2
 800db54:	f003 fd04 	bl	8011560 <SDMMC_CmdSendCSD>
 800db58:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800db5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d001      	beq.n	800db64 <SD_InitCard+0xdc>
    {
      return errorstate;
 800db60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db62:	e05b      	b.n	800dc1c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2100      	movs	r1, #0
 800db6a:	4618      	mov	r0, r3
 800db6c:	f003 fae6 	bl	801113c <SDIO_GetResponse>
 800db70:	4602      	mov	r2, r0
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	2104      	movs	r1, #4
 800db7c:	4618      	mov	r0, r3
 800db7e:	f003 fadd 	bl	801113c <SDIO_GetResponse>
 800db82:	4602      	mov	r2, r0
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2108      	movs	r1, #8
 800db8e:	4618      	mov	r0, r3
 800db90:	f003 fad4 	bl	801113c <SDIO_GetResponse>
 800db94:	4602      	mov	r2, r0
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	210c      	movs	r1, #12
 800dba0:	4618      	mov	r0, r3
 800dba2:	f003 facb 	bl	801113c <SDIO_GetResponse>
 800dba6:	4602      	mov	r2, r0
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2104      	movs	r1, #4
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f003 fac2 	bl	801113c <SDIO_GetResponse>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	0d1a      	lsrs	r2, r3, #20
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800dbc0:	f107 0310 	add.w	r3, r7, #16
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f7ff fcd4 	bl	800d574 <HAL_SD_GetCardCSD>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d002      	beq.n	800dbd8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dbd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dbd6:	e021      	b.n	800dc1c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6819      	ldr	r1, [r3, #0]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbe0:	041b      	lsls	r3, r3, #16
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	461c      	mov	r4, r3
 800dbe6:	4615      	mov	r5, r2
 800dbe8:	4622      	mov	r2, r4
 800dbea:	462b      	mov	r3, r5
 800dbec:	4608      	mov	r0, r1
 800dbee:	f003 fbb1 	bl	8011354 <SDMMC_CmdSelDesel>
 800dbf2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d001      	beq.n	800dbfe <SD_InitCard+0x176>
  {
    return errorstate;
 800dbfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbfc:	e00e      	b.n	800dc1c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681d      	ldr	r5, [r3, #0]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	466c      	mov	r4, sp
 800dc06:	f103 0210 	add.w	r2, r3, #16
 800dc0a:	ca07      	ldmia	r2, {r0, r1, r2}
 800dc0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dc10:	3304      	adds	r3, #4
 800dc12:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dc14:	4628      	mov	r0, r5
 800dc16:	f003 f9f5 	bl	8011004 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800dc1a:	2300      	movs	r3, #0
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3740      	adds	r7, #64	; 0x40
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bdb0      	pop	{r4, r5, r7, pc}

0800dc24 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b086      	sub	sp, #24
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800dc30:	2300      	movs	r3, #0
 800dc32:	617b      	str	r3, [r7, #20]
 800dc34:	2300      	movs	r3, #0
 800dc36:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f003 fbac 	bl	801139a <SDMMC_CmdGoIdleState>
 800dc42:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d001      	beq.n	800dc4e <SD_PowerON+0x2a>
  {
    return errorstate;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	e072      	b.n	800dd34 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4618      	mov	r0, r3
 800dc54:	f003 fbbf 	bl	80113d6 <SDMMC_CmdOperCond>
 800dc58:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d00d      	beq.n	800dc7c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f003 fb95 	bl	801139a <SDMMC_CmdGoIdleState>
 800dc70:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d004      	beq.n	800dc82 <SD_PowerON+0x5e>
    {
      return errorstate;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	e05b      	b.n	800dd34 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2201      	movs	r2, #1
 800dc80:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc86:	2b01      	cmp	r3, #1
 800dc88:	d137      	bne.n	800dcfa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	2100      	movs	r1, #0
 800dc90:	4618      	mov	r0, r3
 800dc92:	f003 fbbf 	bl	8011414 <SDMMC_CmdAppCommand>
 800dc96:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d02d      	beq.n	800dcfa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dca2:	e047      	b.n	800dd34 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	2100      	movs	r1, #0
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f003 fbb2 	bl	8011414 <SDMMC_CmdAppCommand>
 800dcb0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d001      	beq.n	800dcbc <SD_PowerON+0x98>
    {
      return errorstate;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	e03b      	b.n	800dd34 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	491e      	ldr	r1, [pc, #120]	; (800dd3c <SD_PowerON+0x118>)
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f003 fbc8 	bl	8011458 <SDMMC_CmdAppOperCommand>
 800dcc8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d002      	beq.n	800dcd6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dcd4:	e02e      	b.n	800dd34 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2100      	movs	r1, #0
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f003 fa2d 	bl	801113c <SDIO_GetResponse>
 800dce2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	0fdb      	lsrs	r3, r3, #31
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	d101      	bne.n	800dcf0 <SD_PowerON+0xcc>
 800dcec:	2301      	movs	r3, #1
 800dcee:	e000      	b.n	800dcf2 <SD_PowerON+0xce>
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	613b      	str	r3, [r7, #16]

    count++;
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d802      	bhi.n	800dd0a <SD_PowerON+0xe6>
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d0cc      	beq.n	800dca4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d902      	bls.n	800dd1a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dd14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dd18:	e00c      	b.n	800dd34 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d003      	beq.n	800dd2c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2201      	movs	r2, #1
 800dd28:	645a      	str	r2, [r3, #68]	; 0x44
 800dd2a:	e002      	b.n	800dd32 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800dd32:	2300      	movs	r3, #0
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3718      	adds	r7, #24
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	c1100000 	.word	0xc1100000

0800dd40 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b084      	sub	sp, #16
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d102      	bne.n	800dd56 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dd50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dd54:	e018      	b.n	800dd88 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681a      	ldr	r2, [r3, #0]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd5e:	041b      	lsls	r3, r3, #16
 800dd60:	4619      	mov	r1, r3
 800dd62:	4610      	mov	r0, r2
 800dd64:	f003 fc3c 	bl	80115e0 <SDMMC_CmdSendStatus>
 800dd68:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d001      	beq.n	800dd74 <SD_SendStatus+0x34>
  {
    return errorstate;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	e009      	b.n	800dd88 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	2100      	movs	r1, #0
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f003 f9de 	bl	801113c <SDIO_GetResponse>
 800dd80:	4602      	mov	r2, r0
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dd86:	2300      	movs	r3, #0
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b086      	sub	sp, #24
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dd98:	2300      	movs	r3, #0
 800dd9a:	60fb      	str	r3, [r7, #12]
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	2100      	movs	r1, #0
 800dda6:	4618      	mov	r0, r3
 800dda8:	f003 f9c8 	bl	801113c <SDIO_GetResponse>
 800ddac:	4603      	mov	r3, r0
 800ddae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ddb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ddb6:	d102      	bne.n	800ddbe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ddb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ddbc:	e02f      	b.n	800de1e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ddbe:	f107 030c 	add.w	r3, r7, #12
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f000 f879 	bl	800debc <SD_FindSCR>
 800ddca:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d001      	beq.n	800ddd6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	e023      	b.n	800de1e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d01c      	beq.n	800de1a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681a      	ldr	r2, [r3, #0]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dde8:	041b      	lsls	r3, r3, #16
 800ddea:	4619      	mov	r1, r3
 800ddec:	4610      	mov	r0, r2
 800ddee:	f003 fb11 	bl	8011414 <SDMMC_CmdAppCommand>
 800ddf2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d001      	beq.n	800ddfe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	e00f      	b.n	800de1e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	2102      	movs	r1, #2
 800de04:	4618      	mov	r0, r3
 800de06:	f003 fb4a 	bl	801149e <SDMMC_CmdBusWidth>
 800de0a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d001      	beq.n	800de16 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	e003      	b.n	800de1e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800de16:	2300      	movs	r3, #0
 800de18:	e001      	b.n	800de1e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800de1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3718      	adds	r7, #24
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800de26:	b580      	push	{r7, lr}
 800de28:	b086      	sub	sp, #24
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800de2e:	2300      	movs	r3, #0
 800de30:	60fb      	str	r3, [r7, #12]
 800de32:	2300      	movs	r3, #0
 800de34:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	2100      	movs	r1, #0
 800de3c:	4618      	mov	r0, r3
 800de3e:	f003 f97d 	bl	801113c <SDIO_GetResponse>
 800de42:	4603      	mov	r3, r0
 800de44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de4c:	d102      	bne.n	800de54 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800de4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de52:	e02f      	b.n	800deb4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800de54:	f107 030c 	add.w	r3, r7, #12
 800de58:	4619      	mov	r1, r3
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f000 f82e 	bl	800debc <SD_FindSCR>
 800de60:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d001      	beq.n	800de6c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	e023      	b.n	800deb4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de72:	2b00      	cmp	r3, #0
 800de74:	d01c      	beq.n	800deb0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681a      	ldr	r2, [r3, #0]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de7e:	041b      	lsls	r3, r3, #16
 800de80:	4619      	mov	r1, r3
 800de82:	4610      	mov	r0, r2
 800de84:	f003 fac6 	bl	8011414 <SDMMC_CmdAppCommand>
 800de88:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d001      	beq.n	800de94 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	e00f      	b.n	800deb4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2100      	movs	r1, #0
 800de9a:	4618      	mov	r0, r3
 800de9c:	f003 faff 	bl	801149e <SDMMC_CmdBusWidth>
 800dea0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d001      	beq.n	800deac <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	e003      	b.n	800deb4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800deac:	2300      	movs	r3, #0
 800deae:	e001      	b.n	800deb4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800deb0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3718      	adds	r7, #24
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800debc:	b590      	push	{r4, r7, lr}
 800debe:	b08f      	sub	sp, #60	; 0x3c
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dec6:	f7fb fb19 	bl	80094fc <HAL_GetTick>
 800deca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800decc:	2300      	movs	r3, #0
 800dece:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800ded0:	2300      	movs	r3, #0
 800ded2:	60bb      	str	r3, [r7, #8]
 800ded4:	2300      	movs	r3, #0
 800ded6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2108      	movs	r1, #8
 800dee2:	4618      	mov	r0, r3
 800dee4:	f003 f969 	bl	80111ba <SDMMC_CmdBlockLength>
 800dee8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800deea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deec:	2b00      	cmp	r3, #0
 800deee:	d001      	beq.n	800def4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800def0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def2:	e0b2      	b.n	800e05a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800defc:	041b      	lsls	r3, r3, #16
 800defe:	4619      	mov	r1, r3
 800df00:	4610      	mov	r0, r2
 800df02:	f003 fa87 	bl	8011414 <SDMMC_CmdAppCommand>
 800df06:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800df08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d001      	beq.n	800df12 <SD_FindSCR+0x56>
  {
    return errorstate;
 800df0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df10:	e0a3      	b.n	800e05a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800df12:	f04f 33ff 	mov.w	r3, #4294967295
 800df16:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800df18:	2308      	movs	r3, #8
 800df1a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800df1c:	2330      	movs	r3, #48	; 0x30
 800df1e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800df20:	2302      	movs	r3, #2
 800df22:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800df24:	2300      	movs	r3, #0
 800df26:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800df28:	2301      	movs	r3, #1
 800df2a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f107 0210 	add.w	r2, r7, #16
 800df34:	4611      	mov	r1, r2
 800df36:	4618      	mov	r0, r3
 800df38:	f003 f913 	bl	8011162 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4618      	mov	r0, r3
 800df42:	f003 face 	bl	80114e2 <SDMMC_CmdSendSCR>
 800df46:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800df48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d02a      	beq.n	800dfa4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800df4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df50:	e083      	b.n	800e05a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d00f      	beq.n	800df80 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6819      	ldr	r1, [r3, #0]
 800df64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df66:	009b      	lsls	r3, r3, #2
 800df68:	f107 0208 	add.w	r2, r7, #8
 800df6c:	18d4      	adds	r4, r2, r3
 800df6e:	4608      	mov	r0, r1
 800df70:	f003 f873 	bl	801105a <SDIO_ReadFIFO>
 800df74:	4603      	mov	r3, r0
 800df76:	6023      	str	r3, [r4, #0]
      index++;
 800df78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df7a:	3301      	adds	r3, #1
 800df7c:	637b      	str	r3, [r7, #52]	; 0x34
 800df7e:	e006      	b.n	800df8e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d012      	beq.n	800dfb4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800df8e:	f7fb fab5 	bl	80094fc <HAL_GetTick>
 800df92:	4602      	mov	r2, r0
 800df94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df96:	1ad3      	subs	r3, r2, r3
 800df98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df9c:	d102      	bne.n	800dfa4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800df9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dfa2:	e05a      	b.n	800e05a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfaa:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d0cf      	beq.n	800df52 <SD_FindSCR+0x96>
 800dfb2:	e000      	b.n	800dfb6 <SD_FindSCR+0xfa>
      break;
 800dfb4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfbc:	f003 0308 	and.w	r3, r3, #8
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d005      	beq.n	800dfd0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	2208      	movs	r2, #8
 800dfca:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dfcc:	2308      	movs	r3, #8
 800dfce:	e044      	b.n	800e05a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfd6:	f003 0302 	and.w	r3, r3, #2
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d005      	beq.n	800dfea <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	2202      	movs	r2, #2
 800dfe4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dfe6:	2302      	movs	r3, #2
 800dfe8:	e037      	b.n	800e05a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dff0:	f003 0320 	and.w	r3, r3, #32
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d005      	beq.n	800e004 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2220      	movs	r2, #32
 800dffe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e000:	2320      	movs	r3, #32
 800e002:	e02a      	b.n	800e05a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f240 523a 	movw	r2, #1338	; 0x53a
 800e00c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	061a      	lsls	r2, r3, #24
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	021b      	lsls	r3, r3, #8
 800e016:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e01a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	0a1b      	lsrs	r3, r3, #8
 800e020:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e024:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	0e1b      	lsrs	r3, r3, #24
 800e02a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02e:	601a      	str	r2, [r3, #0]
    scr++;
 800e030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e032:	3304      	adds	r3, #4
 800e034:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	061a      	lsls	r2, r3, #24
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	021b      	lsls	r3, r3, #8
 800e03e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e042:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	0a1b      	lsrs	r3, r3, #8
 800e048:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e04c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	0e1b      	lsrs	r3, r3, #24
 800e052:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e056:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e058:	2300      	movs	r3, #0
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	373c      	adds	r7, #60	; 0x3c
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd90      	pop	{r4, r7, pc}

0800e062 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e062:	b580      	push	{r7, lr}
 800e064:	b082      	sub	sp, #8
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d101      	bne.n	800e074 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e070:	2301      	movs	r3, #1
 800e072:	e07b      	b.n	800e16c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d108      	bne.n	800e08e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	685b      	ldr	r3, [r3, #4]
 800e080:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e084:	d009      	beq.n	800e09a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2200      	movs	r2, #0
 800e08a:	61da      	str	r2, [r3, #28]
 800e08c:	e005      	b.n	800e09a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2200      	movs	r2, #0
 800e092:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2200      	movs	r2, #0
 800e098:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2200      	movs	r2, #0
 800e09e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e0a6:	b2db      	uxtb	r3, r3
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d106      	bne.n	800e0ba <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f7f5 f88b 	bl	80031d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2202      	movs	r2, #2
 800e0be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e0d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	689b      	ldr	r3, [r3, #8]
 800e0de:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e0e2:	431a      	orrs	r2, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	68db      	ldr	r3, [r3, #12]
 800e0e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e0ec:	431a      	orrs	r2, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	691b      	ldr	r3, [r3, #16]
 800e0f2:	f003 0302 	and.w	r3, r3, #2
 800e0f6:	431a      	orrs	r2, r3
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	695b      	ldr	r3, [r3, #20]
 800e0fc:	f003 0301 	and.w	r3, r3, #1
 800e100:	431a      	orrs	r2, r3
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	699b      	ldr	r3, [r3, #24]
 800e106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e10a:	431a      	orrs	r2, r3
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	69db      	ldr	r3, [r3, #28]
 800e110:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e114:	431a      	orrs	r2, r3
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6a1b      	ldr	r3, [r3, #32]
 800e11a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e11e:	ea42 0103 	orr.w	r1, r2, r3
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e126:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	430a      	orrs	r2, r1
 800e130:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	699b      	ldr	r3, [r3, #24]
 800e136:	0c1b      	lsrs	r3, r3, #16
 800e138:	f003 0104 	and.w	r1, r3, #4
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e140:	f003 0210 	and.w	r2, r3, #16
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	430a      	orrs	r2, r1
 800e14a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	69da      	ldr	r2, [r3, #28]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e15a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2200      	movs	r2, #0
 800e160:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2201      	movs	r2, #1
 800e166:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e16a:	2300      	movs	r3, #0
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3708      	adds	r7, #8
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}

0800e174 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b086      	sub	sp, #24
 800e178:	af00      	add	r7, sp, #0
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	60b9      	str	r1, [r7, #8]
 800e17e:	4613      	mov	r3, r2
 800e180:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e182:	2300      	movs	r3, #0
 800e184:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d101      	bne.n	800e194 <HAL_SPI_Transmit_DMA+0x20>
 800e190:	2302      	movs	r3, #2
 800e192:	e09b      	b.n	800e2cc <HAL_SPI_Transmit_DMA+0x158>
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2201      	movs	r2, #1
 800e198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d002      	beq.n	800e1ae <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800e1a8:	2302      	movs	r3, #2
 800e1aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e1ac:	e089      	b.n	800e2c2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d002      	beq.n	800e1ba <HAL_SPI_Transmit_DMA+0x46>
 800e1b4:	88fb      	ldrh	r3, [r7, #6]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d102      	bne.n	800e1c0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e1be:	e080      	b.n	800e2c2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2203      	movs	r2, #3
 800e1c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	68ba      	ldr	r2, [r7, #8]
 800e1d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	88fa      	ldrh	r2, [r7, #6]
 800e1d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	88fa      	ldrh	r2, [r7, #6]
 800e1de:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	689b      	ldr	r3, [r3, #8]
 800e202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e206:	d10f      	bne.n	800e228 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	681a      	ldr	r2, [r3, #0]
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e216:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e226:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e22c:	4a29      	ldr	r2, [pc, #164]	; (800e2d4 <HAL_SPI_Transmit_DMA+0x160>)
 800e22e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e234:	4a28      	ldr	r2, [pc, #160]	; (800e2d8 <HAL_SPI_Transmit_DMA+0x164>)
 800e236:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e23c:	4a27      	ldr	r2, [pc, #156]	; (800e2dc <HAL_SPI_Transmit_DMA+0x168>)
 800e23e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e244:	2200      	movs	r2, #0
 800e246:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e250:	4619      	mov	r1, r3
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	330c      	adds	r3, #12
 800e258:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e25e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e260:	f7fb ff1e 	bl	800a0a0 <HAL_DMA_Start_IT>
 800e264:	4603      	mov	r3, r0
 800e266:	2b00      	cmp	r3, #0
 800e268:	d00c      	beq.n	800e284 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e26e:	f043 0210 	orr.w	r2, r3, #16
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800e276:	2301      	movs	r3, #1
 800e278:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2201      	movs	r2, #1
 800e27e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800e282:	e01e      	b.n	800e2c2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e28e:	2b40      	cmp	r3, #64	; 0x40
 800e290:	d007      	beq.n	800e2a2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2a0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	685a      	ldr	r2, [r3, #4]
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f042 0220 	orr.w	r2, r2, #32
 800e2b0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	685a      	ldr	r2, [r3, #4]
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f042 0202 	orr.w	r2, r2, #2
 800e2c0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e2ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3718      	adds	r7, #24
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	0800e8e1 	.word	0x0800e8e1
 800e2d8:	0800e701 	.word	0x0800e701
 800e2dc:	0800e935 	.word	0x0800e935

0800e2e0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b086      	sub	sp, #24
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	4613      	mov	r3, r2
 800e2ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	689b      	ldr	r3, [r3, #8]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d110      	bne.n	800e31c <HAL_SPI_Receive_DMA+0x3c>
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e302:	d10b      	bne.n	800e31c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2204      	movs	r2, #4
 800e308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800e30c:	88fb      	ldrh	r3, [r7, #6]
 800e30e:	68ba      	ldr	r2, [r7, #8]
 800e310:	68b9      	ldr	r1, [r7, #8]
 800e312:	68f8      	ldr	r0, [r7, #12]
 800e314:	f000 f8ac 	bl	800e470 <HAL_SPI_TransmitReceive_DMA>
 800e318:	4603      	mov	r3, r0
 800e31a:	e09f      	b.n	800e45c <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e322:	2b01      	cmp	r3, #1
 800e324:	d101      	bne.n	800e32a <HAL_SPI_Receive_DMA+0x4a>
 800e326:	2302      	movs	r3, #2
 800e328:	e098      	b.n	800e45c <HAL_SPI_Receive_DMA+0x17c>
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2201      	movs	r2, #1
 800e32e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e338:	b2db      	uxtb	r3, r3
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d002      	beq.n	800e344 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800e33e:	2302      	movs	r3, #2
 800e340:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e342:	e086      	b.n	800e452 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d002      	beq.n	800e350 <HAL_SPI_Receive_DMA+0x70>
 800e34a:	88fb      	ldrh	r3, [r7, #6]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d102      	bne.n	800e356 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800e350:	2301      	movs	r3, #1
 800e352:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e354:	e07d      	b.n	800e452 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2204      	movs	r2, #4
 800e35a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2200      	movs	r2, #0
 800e362:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	68ba      	ldr	r2, [r7, #8]
 800e368:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	88fa      	ldrh	r2, [r7, #6]
 800e36e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	88fa      	ldrh	r2, [r7, #6]
 800e374:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2200      	movs	r2, #0
 800e37a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2200      	movs	r2, #0
 800e380:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2200      	movs	r2, #0
 800e386:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2200      	movs	r2, #0
 800e38c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	689b      	ldr	r3, [r3, #8]
 800e392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e396:	d10f      	bne.n	800e3b8 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	681a      	ldr	r2, [r3, #0]
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e3a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	681a      	ldr	r2, [r3, #0]
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e3b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3bc:	4a29      	ldr	r2, [pc, #164]	; (800e464 <HAL_SPI_Receive_DMA+0x184>)
 800e3be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3c4:	4a28      	ldr	r2, [pc, #160]	; (800e468 <HAL_SPI_Receive_DMA+0x188>)
 800e3c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3cc:	4a27      	ldr	r2, [pc, #156]	; (800e46c <HAL_SPI_Receive_DMA+0x18c>)
 800e3ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	330c      	adds	r3, #12
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3e8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3ee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e3f0:	f7fb fe56 	bl	800a0a0 <HAL_DMA_Start_IT>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d00c      	beq.n	800e414 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3fe:	f043 0210 	orr.w	r2, r3, #16
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800e406:	2301      	movs	r3, #1
 800e408:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2201      	movs	r2, #1
 800e40e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800e412:	e01e      	b.n	800e452 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e41e:	2b40      	cmp	r3, #64	; 0x40
 800e420:	d007      	beq.n	800e432 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e430:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	685a      	ldr	r2, [r3, #4]
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f042 0220 	orr.w	r2, r2, #32
 800e440:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	685a      	ldr	r2, [r3, #4]
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f042 0201 	orr.w	r2, r2, #1
 800e450:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2200      	movs	r2, #0
 800e456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e45a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3718      	adds	r7, #24
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}
 800e464:	0800e8fd 	.word	0x0800e8fd
 800e468:	0800e7a9 	.word	0x0800e7a9
 800e46c:	0800e935 	.word	0x0800e935

0800e470 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b086      	sub	sp, #24
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	60b9      	str	r1, [r7, #8]
 800e47a:	607a      	str	r2, [r7, #4]
 800e47c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e47e:	2300      	movs	r3, #0
 800e480:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e488:	2b01      	cmp	r3, #1
 800e48a:	d101      	bne.n	800e490 <HAL_SPI_TransmitReceive_DMA+0x20>
 800e48c:	2302      	movs	r3, #2
 800e48e:	e0e3      	b.n	800e658 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2201      	movs	r2, #1
 800e494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e49e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	685b      	ldr	r3, [r3, #4]
 800e4a4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800e4a6:	7dbb      	ldrb	r3, [r7, #22]
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d00d      	beq.n	800e4c8 <HAL_SPI_TransmitReceive_DMA+0x58>
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e4b2:	d106      	bne.n	800e4c2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	689b      	ldr	r3, [r3, #8]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d102      	bne.n	800e4c2 <HAL_SPI_TransmitReceive_DMA+0x52>
 800e4bc:	7dbb      	ldrb	r3, [r7, #22]
 800e4be:	2b04      	cmp	r3, #4
 800e4c0:	d002      	beq.n	800e4c8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800e4c2:	2302      	movs	r3, #2
 800e4c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e4c6:	e0c2      	b.n	800e64e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d005      	beq.n	800e4da <HAL_SPI_TransmitReceive_DMA+0x6a>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d002      	beq.n	800e4da <HAL_SPI_TransmitReceive_DMA+0x6a>
 800e4d4:	887b      	ldrh	r3, [r7, #2]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d102      	bne.n	800e4e0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800e4da:	2301      	movs	r3, #1
 800e4dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e4de:	e0b6      	b.n	800e64e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4e6:	b2db      	uxtb	r3, r3
 800e4e8:	2b04      	cmp	r3, #4
 800e4ea:	d003      	beq.n	800e4f4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	2205      	movs	r2, #5
 800e4f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	68ba      	ldr	r2, [r7, #8]
 800e4fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	887a      	ldrh	r2, [r7, #2]
 800e504:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	887a      	ldrh	r2, [r7, #2]
 800e50a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	887a      	ldrh	r2, [r7, #2]
 800e516:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	887a      	ldrh	r2, [r7, #2]
 800e51c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	2200      	movs	r2, #0
 800e522:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	2200      	movs	r2, #0
 800e528:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e530:	b2db      	uxtb	r3, r3
 800e532:	2b04      	cmp	r3, #4
 800e534:	d108      	bne.n	800e548 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e53a:	4a49      	ldr	r2, [pc, #292]	; (800e660 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800e53c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e542:	4a48      	ldr	r2, [pc, #288]	; (800e664 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800e544:	63da      	str	r2, [r3, #60]	; 0x3c
 800e546:	e007      	b.n	800e558 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e54c:	4a46      	ldr	r2, [pc, #280]	; (800e668 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800e54e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e554:	4a45      	ldr	r2, [pc, #276]	; (800e66c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800e556:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e55c:	4a44      	ldr	r2, [pc, #272]	; (800e670 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800e55e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e564:	2200      	movs	r2, #0
 800e566:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	330c      	adds	r3, #12
 800e572:	4619      	mov	r1, r3
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e578:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e57e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e580:	f7fb fd8e 	bl	800a0a0 <HAL_DMA_Start_IT>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d00c      	beq.n	800e5a4 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e58e:	f043 0210 	orr.w	r2, r3, #16
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800e596:	2301      	movs	r3, #1
 800e598:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2201      	movs	r2, #1
 800e59e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800e5a2:	e054      	b.n	800e64e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	685a      	ldr	r2, [r3, #4]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f042 0201 	orr.w	r2, r2, #1
 800e5b2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5dc:	4619      	mov	r1, r3
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	330c      	adds	r3, #12
 800e5e4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e5ec:	f7fb fd58 	bl	800a0a0 <HAL_DMA_Start_IT>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d00c      	beq.n	800e610 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5fa:	f043 0210 	orr.w	r2, r3, #16
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800e602:	2301      	movs	r3, #1
 800e604:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	2201      	movs	r2, #1
 800e60a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800e60e:	e01e      	b.n	800e64e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e61a:	2b40      	cmp	r3, #64	; 0x40
 800e61c:	d007      	beq.n	800e62e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	681a      	ldr	r2, [r3, #0]
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e62c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	685a      	ldr	r2, [r3, #4]
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f042 0220 	orr.w	r2, r2, #32
 800e63c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	685a      	ldr	r2, [r3, #4]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f042 0202 	orr.w	r2, r2, #2
 800e64c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2200      	movs	r2, #0
 800e652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e656:	7dfb      	ldrb	r3, [r7, #23]
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3718      	adds	r7, #24
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}
 800e660:	0800e8fd 	.word	0x0800e8fd
 800e664:	0800e7a9 	.word	0x0800e7a9
 800e668:	0800e919 	.word	0x0800e919
 800e66c:	0800e851 	.word	0x0800e851
 800e670:	0800e935 	.word	0x0800e935

0800e674 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e674:	b480      	push	{r7}
 800e676:	b083      	sub	sp, #12
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800e67c:	bf00      	nop
 800e67e:	370c      	adds	r7, #12
 800e680:	46bd      	mov	sp, r7
 800e682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e686:	4770      	bx	lr

0800e688 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e688:	b480      	push	{r7}
 800e68a:	b083      	sub	sp, #12
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800e690:	bf00      	nop
 800e692:	370c      	adds	r7, #12
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr

0800e69c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e69c:	b480      	push	{r7}
 800e69e:	b083      	sub	sp, #12
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e6a4:	bf00      	nop
 800e6a6:	370c      	adds	r7, #12
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr

0800e6b0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b083      	sub	sp, #12
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800e6b8:	bf00      	nop
 800e6ba:	370c      	adds	r7, #12
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr

0800e6c4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b083      	sub	sp, #12
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800e6cc:	bf00      	nop
 800e6ce:	370c      	adds	r7, #12
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d6:	4770      	bx	lr

0800e6d8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e6d8:	b480      	push	{r7}
 800e6da:	b083      	sub	sp, #12
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800e6e0:	bf00      	nop
 800e6e2:	370c      	adds	r7, #12
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr

0800e6ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b083      	sub	sp, #12
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e6f4:	bf00      	nop
 800e6f6:	370c      	adds	r7, #12
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr

0800e700 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b086      	sub	sp, #24
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e70c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e70e:	f7fa fef5 	bl	80094fc <HAL_GetTick>
 800e712:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e71e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e722:	d03b      	beq.n	800e79c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	685a      	ldr	r2, [r3, #4]
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	f022 0220 	bic.w	r2, r2, #32
 800e732:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	685a      	ldr	r2, [r3, #4]
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	f022 0202 	bic.w	r2, r2, #2
 800e742:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e744:	693a      	ldr	r2, [r7, #16]
 800e746:	2164      	movs	r1, #100	; 0x64
 800e748:	6978      	ldr	r0, [r7, #20]
 800e74a:	f000 fa01 	bl	800eb50 <SPI_EndRxTxTransaction>
 800e74e:	4603      	mov	r3, r0
 800e750:	2b00      	cmp	r3, #0
 800e752:	d005      	beq.n	800e760 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e758:	f043 0220 	orr.w	r2, r3, #32
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	689b      	ldr	r3, [r3, #8]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d10a      	bne.n	800e77e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e768:	2300      	movs	r3, #0
 800e76a:	60fb      	str	r3, [r7, #12]
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	60fb      	str	r3, [r7, #12]
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	689b      	ldr	r3, [r3, #8]
 800e77a:	60fb      	str	r3, [r7, #12]
 800e77c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	2200      	movs	r2, #0
 800e782:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	2201      	movs	r2, #1
 800e788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e790:	2b00      	cmp	r3, #0
 800e792:	d003      	beq.n	800e79c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e794:	6978      	ldr	r0, [r7, #20]
 800e796:	f7ff ffa9 	bl	800e6ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e79a:	e002      	b.n	800e7a2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800e79c:	6978      	ldr	r0, [r7, #20]
 800e79e:	f7ff ff69 	bl	800e674 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e7a2:	3718      	adds	r7, #24
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}

0800e7a8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b084      	sub	sp, #16
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e7b6:	f7fa fea1 	bl	80094fc <HAL_GetTick>
 800e7ba:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7ca:	d03b      	beq.n	800e844 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	685a      	ldr	r2, [r3, #4]
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f022 0220 	bic.w	r2, r2, #32
 800e7da:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	689b      	ldr	r3, [r3, #8]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d10d      	bne.n	800e800 <SPI_DMAReceiveCplt+0x58>
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	685b      	ldr	r3, [r3, #4]
 800e7e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e7ec:	d108      	bne.n	800e800 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	685a      	ldr	r2, [r3, #4]
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f022 0203 	bic.w	r2, r2, #3
 800e7fc:	605a      	str	r2, [r3, #4]
 800e7fe:	e007      	b.n	800e810 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	685a      	ldr	r2, [r3, #4]
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f022 0201 	bic.w	r2, r2, #1
 800e80e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e810:	68ba      	ldr	r2, [r7, #8]
 800e812:	2164      	movs	r1, #100	; 0x64
 800e814:	68f8      	ldr	r0, [r7, #12]
 800e816:	f000 f935 	bl	800ea84 <SPI_EndRxTransaction>
 800e81a:	4603      	mov	r3, r0
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d002      	beq.n	800e826 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	2220      	movs	r2, #32
 800e824:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	2200      	movs	r2, #0
 800e82a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2201      	movs	r2, #1
 800e830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d003      	beq.n	800e844 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e83c:	68f8      	ldr	r0, [r7, #12]
 800e83e:	f7ff ff55 	bl	800e6ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e842:	e002      	b.n	800e84a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800e844:	68f8      	ldr	r0, [r7, #12]
 800e846:	f7ff ff1f 	bl	800e688 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e84a:	3710      	adds	r7, #16
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b084      	sub	sp, #16
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e85c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e85e:	f7fa fe4d 	bl	80094fc <HAL_GetTick>
 800e862:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e86e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e872:	d02f      	beq.n	800e8d4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	685a      	ldr	r2, [r3, #4]
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f022 0220 	bic.w	r2, r2, #32
 800e882:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e884:	68ba      	ldr	r2, [r7, #8]
 800e886:	2164      	movs	r1, #100	; 0x64
 800e888:	68f8      	ldr	r0, [r7, #12]
 800e88a:	f000 f961 	bl	800eb50 <SPI_EndRxTxTransaction>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d005      	beq.n	800e8a0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e898:	f043 0220 	orr.w	r2, r3, #32
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	685a      	ldr	r2, [r3, #4]
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f022 0203 	bic.w	r2, r2, #3
 800e8ae:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2201      	movs	r2, #1
 800e8c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d003      	beq.n	800e8d4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e8cc:	68f8      	ldr	r0, [r7, #12]
 800e8ce:	f7ff ff0d 	bl	800e6ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e8d2:	e002      	b.n	800e8da <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800e8d4:	68f8      	ldr	r0, [r7, #12]
 800e8d6:	f7ff fee1 	bl	800e69c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e8da:	3710      	adds	r7, #16
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b084      	sub	sp, #16
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ec:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800e8ee:	68f8      	ldr	r0, [r7, #12]
 800e8f0:	f7ff fede 	bl	800e6b0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e8f4:	bf00      	nop
 800e8f6:	3710      	adds	r7, #16
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e908:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800e90a:	68f8      	ldr	r0, [r7, #12]
 800e90c:	f7ff feda 	bl	800e6c4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e910:	bf00      	nop
 800e912:	3710      	adds	r7, #16
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b084      	sub	sp, #16
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e924:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800e926:	68f8      	ldr	r0, [r7, #12]
 800e928:	f7ff fed6 	bl	800e6d8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e92c:	bf00      	nop
 800e92e:	3710      	adds	r7, #16
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b084      	sub	sp, #16
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e940:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	685a      	ldr	r2, [r3, #4]
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	f022 0203 	bic.w	r2, r2, #3
 800e950:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e956:	f043 0210 	orr.w	r2, r3, #16
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2201      	movs	r2, #1
 800e962:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e966:	68f8      	ldr	r0, [r7, #12]
 800e968:	f7ff fec0 	bl	800e6ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e96c:	bf00      	nop
 800e96e:	3710      	adds	r7, #16
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b088      	sub	sp, #32
 800e978:	af00      	add	r7, sp, #0
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	603b      	str	r3, [r7, #0]
 800e980:	4613      	mov	r3, r2
 800e982:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e984:	f7fa fdba 	bl	80094fc <HAL_GetTick>
 800e988:	4602      	mov	r2, r0
 800e98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98c:	1a9b      	subs	r3, r3, r2
 800e98e:	683a      	ldr	r2, [r7, #0]
 800e990:	4413      	add	r3, r2
 800e992:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e994:	f7fa fdb2 	bl	80094fc <HAL_GetTick>
 800e998:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e99a:	4b39      	ldr	r3, [pc, #228]	; (800ea80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	015b      	lsls	r3, r3, #5
 800e9a0:	0d1b      	lsrs	r3, r3, #20
 800e9a2:	69fa      	ldr	r2, [r7, #28]
 800e9a4:	fb02 f303 	mul.w	r3, r2, r3
 800e9a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e9aa:	e054      	b.n	800ea56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9b2:	d050      	beq.n	800ea56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e9b4:	f7fa fda2 	bl	80094fc <HAL_GetTick>
 800e9b8:	4602      	mov	r2, r0
 800e9ba:	69bb      	ldr	r3, [r7, #24]
 800e9bc:	1ad3      	subs	r3, r2, r3
 800e9be:	69fa      	ldr	r2, [r7, #28]
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d902      	bls.n	800e9ca <SPI_WaitFlagStateUntilTimeout+0x56>
 800e9c4:	69fb      	ldr	r3, [r7, #28]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d13d      	bne.n	800ea46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	685a      	ldr	r2, [r3, #4]
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e9d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e9e2:	d111      	bne.n	800ea08 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	689b      	ldr	r3, [r3, #8]
 800e9e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9ec:	d004      	beq.n	800e9f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	689b      	ldr	r3, [r3, #8]
 800e9f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9f6:	d107      	bne.n	800ea08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	681a      	ldr	r2, [r3, #0]
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea10:	d10f      	bne.n	800ea32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	681a      	ldr	r2, [r3, #0]
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ea20:	601a      	str	r2, [r3, #0]
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	681a      	ldr	r2, [r3, #0]
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ea30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2201      	movs	r2, #1
 800ea36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ea42:	2303      	movs	r3, #3
 800ea44:	e017      	b.n	800ea76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d101      	bne.n	800ea50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	3b01      	subs	r3, #1
 800ea54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	689a      	ldr	r2, [r3, #8]
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	4013      	ands	r3, r2
 800ea60:	68ba      	ldr	r2, [r7, #8]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	bf0c      	ite	eq
 800ea66:	2301      	moveq	r3, #1
 800ea68:	2300      	movne	r3, #0
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	461a      	mov	r2, r3
 800ea6e:	79fb      	ldrb	r3, [r7, #7]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d19b      	bne.n	800e9ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3720      	adds	r7, #32
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	20000004 	.word	0x20000004

0800ea84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b086      	sub	sp, #24
 800ea88:	af02      	add	r7, sp, #8
 800ea8a:	60f8      	str	r0, [r7, #12]
 800ea8c:	60b9      	str	r1, [r7, #8]
 800ea8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea98:	d111      	bne.n	800eabe <SPI_EndRxTransaction+0x3a>
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	689b      	ldr	r3, [r3, #8]
 800ea9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eaa2:	d004      	beq.n	800eaae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	689b      	ldr	r3, [r3, #8]
 800eaa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eaac:	d107      	bne.n	800eabe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eabc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eac6:	d12a      	bne.n	800eb1e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	689b      	ldr	r3, [r3, #8]
 800eacc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ead0:	d012      	beq.n	800eaf8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	9300      	str	r3, [sp, #0]
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	2200      	movs	r2, #0
 800eada:	2180      	movs	r1, #128	; 0x80
 800eadc:	68f8      	ldr	r0, [r7, #12]
 800eade:	f7ff ff49 	bl	800e974 <SPI_WaitFlagStateUntilTimeout>
 800eae2:	4603      	mov	r3, r0
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d02d      	beq.n	800eb44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaec:	f043 0220 	orr.w	r2, r3, #32
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800eaf4:	2303      	movs	r3, #3
 800eaf6:	e026      	b.n	800eb46 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	9300      	str	r3, [sp, #0]
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	2200      	movs	r2, #0
 800eb00:	2101      	movs	r1, #1
 800eb02:	68f8      	ldr	r0, [r7, #12]
 800eb04:	f7ff ff36 	bl	800e974 <SPI_WaitFlagStateUntilTimeout>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d01a      	beq.n	800eb44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb12:	f043 0220 	orr.w	r2, r3, #32
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800eb1a:	2303      	movs	r3, #3
 800eb1c:	e013      	b.n	800eb46 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	9300      	str	r3, [sp, #0]
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	2200      	movs	r2, #0
 800eb26:	2101      	movs	r1, #1
 800eb28:	68f8      	ldr	r0, [r7, #12]
 800eb2a:	f7ff ff23 	bl	800e974 <SPI_WaitFlagStateUntilTimeout>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d007      	beq.n	800eb44 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb38:	f043 0220 	orr.w	r2, r3, #32
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800eb40:	2303      	movs	r3, #3
 800eb42:	e000      	b.n	800eb46 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800eb44:	2300      	movs	r3, #0
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3710      	adds	r7, #16
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
	...

0800eb50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b088      	sub	sp, #32
 800eb54:	af02      	add	r7, sp, #8
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800eb5c:	4b1b      	ldr	r3, [pc, #108]	; (800ebcc <SPI_EndRxTxTransaction+0x7c>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	4a1b      	ldr	r2, [pc, #108]	; (800ebd0 <SPI_EndRxTxTransaction+0x80>)
 800eb62:	fba2 2303 	umull	r2, r3, r2, r3
 800eb66:	0d5b      	lsrs	r3, r3, #21
 800eb68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eb6c:	fb02 f303 	mul.w	r3, r2, r3
 800eb70:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	685b      	ldr	r3, [r3, #4]
 800eb76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb7a:	d112      	bne.n	800eba2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	9300      	str	r3, [sp, #0]
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	2200      	movs	r2, #0
 800eb84:	2180      	movs	r1, #128	; 0x80
 800eb86:	68f8      	ldr	r0, [r7, #12]
 800eb88:	f7ff fef4 	bl	800e974 <SPI_WaitFlagStateUntilTimeout>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d016      	beq.n	800ebc0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb96:	f043 0220 	orr.w	r2, r3, #32
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800eb9e:	2303      	movs	r3, #3
 800eba0:	e00f      	b.n	800ebc2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d00a      	beq.n	800ebbe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	3b01      	subs	r3, #1
 800ebac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	689b      	ldr	r3, [r3, #8]
 800ebb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebb8:	2b80      	cmp	r3, #128	; 0x80
 800ebba:	d0f2      	beq.n	800eba2 <SPI_EndRxTxTransaction+0x52>
 800ebbc:	e000      	b.n	800ebc0 <SPI_EndRxTxTransaction+0x70>
        break;
 800ebbe:	bf00      	nop
  }

  return HAL_OK;
 800ebc0:	2300      	movs	r3, #0
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3718      	adds	r7, #24
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}
 800ebca:	bf00      	nop
 800ebcc:	20000004 	.word	0x20000004
 800ebd0:	165e9f81 	.word	0x165e9f81

0800ebd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d101      	bne.n	800ebe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	e041      	b.n	800ec6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebec:	b2db      	uxtb	r3, r3
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d106      	bne.n	800ec00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f7f4 fb94 	bl	8003328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2202      	movs	r2, #2
 800ec04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	3304      	adds	r3, #4
 800ec10:	4619      	mov	r1, r3
 800ec12:	4610      	mov	r0, r2
 800ec14:	f000 fc7a 	bl	800f50c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2201      	movs	r2, #1
 800ec24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2201      	movs	r2, #1
 800ec34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2201      	movs	r2, #1
 800ec44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2201      	movs	r2, #1
 800ec4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2201      	movs	r2, #1
 800ec54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2201      	movs	r2, #1
 800ec64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec68:	2300      	movs	r3, #0
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3708      	adds	r7, #8
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
	...

0800ec74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b085      	sub	sp, #20
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec82:	b2db      	uxtb	r3, r3
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d001      	beq.n	800ec8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ec88:	2301      	movs	r3, #1
 800ec8a:	e04e      	b.n	800ed2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2202      	movs	r2, #2
 800ec90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	68da      	ldr	r2, [r3, #12]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	f042 0201 	orr.w	r2, r2, #1
 800eca2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4a23      	ldr	r2, [pc, #140]	; (800ed38 <HAL_TIM_Base_Start_IT+0xc4>)
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d022      	beq.n	800ecf4 <HAL_TIM_Base_Start_IT+0x80>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecb6:	d01d      	beq.n	800ecf4 <HAL_TIM_Base_Start_IT+0x80>
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4a1f      	ldr	r2, [pc, #124]	; (800ed3c <HAL_TIM_Base_Start_IT+0xc8>)
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	d018      	beq.n	800ecf4 <HAL_TIM_Base_Start_IT+0x80>
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	4a1e      	ldr	r2, [pc, #120]	; (800ed40 <HAL_TIM_Base_Start_IT+0xcc>)
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	d013      	beq.n	800ecf4 <HAL_TIM_Base_Start_IT+0x80>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	4a1c      	ldr	r2, [pc, #112]	; (800ed44 <HAL_TIM_Base_Start_IT+0xd0>)
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	d00e      	beq.n	800ecf4 <HAL_TIM_Base_Start_IT+0x80>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	4a1b      	ldr	r2, [pc, #108]	; (800ed48 <HAL_TIM_Base_Start_IT+0xd4>)
 800ecdc:	4293      	cmp	r3, r2
 800ecde:	d009      	beq.n	800ecf4 <HAL_TIM_Base_Start_IT+0x80>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	4a19      	ldr	r2, [pc, #100]	; (800ed4c <HAL_TIM_Base_Start_IT+0xd8>)
 800ece6:	4293      	cmp	r3, r2
 800ece8:	d004      	beq.n	800ecf4 <HAL_TIM_Base_Start_IT+0x80>
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	4a18      	ldr	r2, [pc, #96]	; (800ed50 <HAL_TIM_Base_Start_IT+0xdc>)
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	d111      	bne.n	800ed18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	689b      	ldr	r3, [r3, #8]
 800ecfa:	f003 0307 	and.w	r3, r3, #7
 800ecfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2b06      	cmp	r3, #6
 800ed04:	d010      	beq.n	800ed28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	f042 0201 	orr.w	r2, r2, #1
 800ed14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed16:	e007      	b.n	800ed28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	f042 0201 	orr.w	r2, r2, #1
 800ed26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ed28:	2300      	movs	r3, #0
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3714      	adds	r7, #20
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed34:	4770      	bx	lr
 800ed36:	bf00      	nop
 800ed38:	40010000 	.word	0x40010000
 800ed3c:	40000400 	.word	0x40000400
 800ed40:	40000800 	.word	0x40000800
 800ed44:	40000c00 	.word	0x40000c00
 800ed48:	40010400 	.word	0x40010400
 800ed4c:	40014000 	.word	0x40014000
 800ed50:	40001800 	.word	0x40001800

0800ed54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b082      	sub	sp, #8
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d101      	bne.n	800ed66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ed62:	2301      	movs	r3, #1
 800ed64:	e041      	b.n	800edea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed6c:	b2db      	uxtb	r3, r3
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d106      	bne.n	800ed80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2200      	movs	r2, #0
 800ed76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f000 f839 	bl	800edf2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2202      	movs	r2, #2
 800ed84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681a      	ldr	r2, [r3, #0]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	3304      	adds	r3, #4
 800ed90:	4619      	mov	r1, r3
 800ed92:	4610      	mov	r0, r2
 800ed94:	f000 fbba 	bl	800f50c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2201      	movs	r2, #1
 800eda4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2201      	movs	r2, #1
 800edac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2201      	movs	r2, #1
 800edb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2201      	movs	r2, #1
 800edbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2201      	movs	r2, #1
 800edc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2201      	movs	r2, #1
 800edcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2201      	movs	r2, #1
 800eddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2201      	movs	r2, #1
 800ede4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ede8:	2300      	movs	r3, #0
}
 800edea:	4618      	mov	r0, r3
 800edec:	3708      	adds	r7, #8
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}

0800edf2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800edf2:	b480      	push	{r7}
 800edf4:	b083      	sub	sp, #12
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800edfa:	bf00      	nop
 800edfc:	370c      	adds	r7, #12
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr
	...

0800ee08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b084      	sub	sp, #16
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d109      	bne.n	800ee2c <HAL_TIM_PWM_Start+0x24>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	bf14      	ite	ne
 800ee24:	2301      	movne	r3, #1
 800ee26:	2300      	moveq	r3, #0
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	e022      	b.n	800ee72 <HAL_TIM_PWM_Start+0x6a>
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	2b04      	cmp	r3, #4
 800ee30:	d109      	bne.n	800ee46 <HAL_TIM_PWM_Start+0x3e>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ee38:	b2db      	uxtb	r3, r3
 800ee3a:	2b01      	cmp	r3, #1
 800ee3c:	bf14      	ite	ne
 800ee3e:	2301      	movne	r3, #1
 800ee40:	2300      	moveq	r3, #0
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	e015      	b.n	800ee72 <HAL_TIM_PWM_Start+0x6a>
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	2b08      	cmp	r3, #8
 800ee4a:	d109      	bne.n	800ee60 <HAL_TIM_PWM_Start+0x58>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ee52:	b2db      	uxtb	r3, r3
 800ee54:	2b01      	cmp	r3, #1
 800ee56:	bf14      	ite	ne
 800ee58:	2301      	movne	r3, #1
 800ee5a:	2300      	moveq	r3, #0
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	e008      	b.n	800ee72 <HAL_TIM_PWM_Start+0x6a>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	bf14      	ite	ne
 800ee6c:	2301      	movne	r3, #1
 800ee6e:	2300      	moveq	r3, #0
 800ee70:	b2db      	uxtb	r3, r3
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d001      	beq.n	800ee7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ee76:	2301      	movs	r3, #1
 800ee78:	e07c      	b.n	800ef74 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d104      	bne.n	800ee8a <HAL_TIM_PWM_Start+0x82>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2202      	movs	r2, #2
 800ee84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ee88:	e013      	b.n	800eeb2 <HAL_TIM_PWM_Start+0xaa>
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	2b04      	cmp	r3, #4
 800ee8e:	d104      	bne.n	800ee9a <HAL_TIM_PWM_Start+0x92>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2202      	movs	r2, #2
 800ee94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ee98:	e00b      	b.n	800eeb2 <HAL_TIM_PWM_Start+0xaa>
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	2b08      	cmp	r3, #8
 800ee9e:	d104      	bne.n	800eeaa <HAL_TIM_PWM_Start+0xa2>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2202      	movs	r2, #2
 800eea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eea8:	e003      	b.n	800eeb2 <HAL_TIM_PWM_Start+0xaa>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2202      	movs	r2, #2
 800eeae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	6839      	ldr	r1, [r7, #0]
 800eeba:	4618      	mov	r0, r3
 800eebc:	f000 fe10 	bl	800fae0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	4a2d      	ldr	r2, [pc, #180]	; (800ef7c <HAL_TIM_PWM_Start+0x174>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d004      	beq.n	800eed4 <HAL_TIM_PWM_Start+0xcc>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4a2c      	ldr	r2, [pc, #176]	; (800ef80 <HAL_TIM_PWM_Start+0x178>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d101      	bne.n	800eed8 <HAL_TIM_PWM_Start+0xd0>
 800eed4:	2301      	movs	r3, #1
 800eed6:	e000      	b.n	800eeda <HAL_TIM_PWM_Start+0xd2>
 800eed8:	2300      	movs	r3, #0
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d007      	beq.n	800eeee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eeec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	4a22      	ldr	r2, [pc, #136]	; (800ef7c <HAL_TIM_PWM_Start+0x174>)
 800eef4:	4293      	cmp	r3, r2
 800eef6:	d022      	beq.n	800ef3e <HAL_TIM_PWM_Start+0x136>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef00:	d01d      	beq.n	800ef3e <HAL_TIM_PWM_Start+0x136>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	4a1f      	ldr	r2, [pc, #124]	; (800ef84 <HAL_TIM_PWM_Start+0x17c>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d018      	beq.n	800ef3e <HAL_TIM_PWM_Start+0x136>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	4a1d      	ldr	r2, [pc, #116]	; (800ef88 <HAL_TIM_PWM_Start+0x180>)
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d013      	beq.n	800ef3e <HAL_TIM_PWM_Start+0x136>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	4a1c      	ldr	r2, [pc, #112]	; (800ef8c <HAL_TIM_PWM_Start+0x184>)
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d00e      	beq.n	800ef3e <HAL_TIM_PWM_Start+0x136>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	4a16      	ldr	r2, [pc, #88]	; (800ef80 <HAL_TIM_PWM_Start+0x178>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d009      	beq.n	800ef3e <HAL_TIM_PWM_Start+0x136>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	4a18      	ldr	r2, [pc, #96]	; (800ef90 <HAL_TIM_PWM_Start+0x188>)
 800ef30:	4293      	cmp	r3, r2
 800ef32:	d004      	beq.n	800ef3e <HAL_TIM_PWM_Start+0x136>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	4a16      	ldr	r2, [pc, #88]	; (800ef94 <HAL_TIM_PWM_Start+0x18c>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d111      	bne.n	800ef62 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	689b      	ldr	r3, [r3, #8]
 800ef44:	f003 0307 	and.w	r3, r3, #7
 800ef48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	2b06      	cmp	r3, #6
 800ef4e:	d010      	beq.n	800ef72 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	681a      	ldr	r2, [r3, #0]
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	f042 0201 	orr.w	r2, r2, #1
 800ef5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef60:	e007      	b.n	800ef72 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	681a      	ldr	r2, [r3, #0]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	f042 0201 	orr.w	r2, r2, #1
 800ef70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ef72:	2300      	movs	r3, #0
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	3710      	adds	r7, #16
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}
 800ef7c:	40010000 	.word	0x40010000
 800ef80:	40010400 	.word	0x40010400
 800ef84:	40000400 	.word	0x40000400
 800ef88:	40000800 	.word	0x40000800
 800ef8c:	40000c00 	.word	0x40000c00
 800ef90:	40014000 	.word	0x40014000
 800ef94:	40001800 	.word	0x40001800

0800ef98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	691b      	ldr	r3, [r3, #16]
 800efa6:	f003 0302 	and.w	r3, r3, #2
 800efaa:	2b02      	cmp	r3, #2
 800efac:	d122      	bne.n	800eff4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	f003 0302 	and.w	r3, r3, #2
 800efb8:	2b02      	cmp	r3, #2
 800efba:	d11b      	bne.n	800eff4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f06f 0202 	mvn.w	r2, #2
 800efc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2201      	movs	r2, #1
 800efca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	699b      	ldr	r3, [r3, #24]
 800efd2:	f003 0303 	and.w	r3, r3, #3
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d003      	beq.n	800efe2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f000 fa77 	bl	800f4ce <HAL_TIM_IC_CaptureCallback>
 800efe0:	e005      	b.n	800efee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f000 fa69 	bl	800f4ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f000 fa7a 	bl	800f4e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2200      	movs	r2, #0
 800eff2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	691b      	ldr	r3, [r3, #16]
 800effa:	f003 0304 	and.w	r3, r3, #4
 800effe:	2b04      	cmp	r3, #4
 800f000:	d122      	bne.n	800f048 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	68db      	ldr	r3, [r3, #12]
 800f008:	f003 0304 	and.w	r3, r3, #4
 800f00c:	2b04      	cmp	r3, #4
 800f00e:	d11b      	bne.n	800f048 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f06f 0204 	mvn.w	r2, #4
 800f018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2202      	movs	r2, #2
 800f01e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	699b      	ldr	r3, [r3, #24]
 800f026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d003      	beq.n	800f036 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f000 fa4d 	bl	800f4ce <HAL_TIM_IC_CaptureCallback>
 800f034:	e005      	b.n	800f042 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f000 fa3f 	bl	800f4ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f000 fa50 	bl	800f4e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2200      	movs	r2, #0
 800f046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	691b      	ldr	r3, [r3, #16]
 800f04e:	f003 0308 	and.w	r3, r3, #8
 800f052:	2b08      	cmp	r3, #8
 800f054:	d122      	bne.n	800f09c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	68db      	ldr	r3, [r3, #12]
 800f05c:	f003 0308 	and.w	r3, r3, #8
 800f060:	2b08      	cmp	r3, #8
 800f062:	d11b      	bne.n	800f09c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	f06f 0208 	mvn.w	r2, #8
 800f06c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2204      	movs	r2, #4
 800f072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	69db      	ldr	r3, [r3, #28]
 800f07a:	f003 0303 	and.w	r3, r3, #3
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d003      	beq.n	800f08a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 fa23 	bl	800f4ce <HAL_TIM_IC_CaptureCallback>
 800f088:	e005      	b.n	800f096 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f000 fa15 	bl	800f4ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f000 fa26 	bl	800f4e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2200      	movs	r2, #0
 800f09a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	691b      	ldr	r3, [r3, #16]
 800f0a2:	f003 0310 	and.w	r3, r3, #16
 800f0a6:	2b10      	cmp	r3, #16
 800f0a8:	d122      	bne.n	800f0f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	68db      	ldr	r3, [r3, #12]
 800f0b0:	f003 0310 	and.w	r3, r3, #16
 800f0b4:	2b10      	cmp	r3, #16
 800f0b6:	d11b      	bne.n	800f0f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	f06f 0210 	mvn.w	r2, #16
 800f0c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2208      	movs	r2, #8
 800f0c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	69db      	ldr	r3, [r3, #28]
 800f0ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d003      	beq.n	800f0de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f000 f9f9 	bl	800f4ce <HAL_TIM_IC_CaptureCallback>
 800f0dc:	e005      	b.n	800f0ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f000 f9eb 	bl	800f4ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f000 f9fc 	bl	800f4e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	691b      	ldr	r3, [r3, #16]
 800f0f6:	f003 0301 	and.w	r3, r3, #1
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	d10e      	bne.n	800f11c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	68db      	ldr	r3, [r3, #12]
 800f104:	f003 0301 	and.w	r3, r3, #1
 800f108:	2b01      	cmp	r3, #1
 800f10a:	d107      	bne.n	800f11c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	f06f 0201 	mvn.w	r2, #1
 800f114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f7f3 f90a 	bl	8002330 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	691b      	ldr	r3, [r3, #16]
 800f122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f126:	2b80      	cmp	r3, #128	; 0x80
 800f128:	d10e      	bne.n	800f148 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	68db      	ldr	r3, [r3, #12]
 800f130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f134:	2b80      	cmp	r3, #128	; 0x80
 800f136:	d107      	bne.n	800f148 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f000 fd78 	bl	800fc38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	691b      	ldr	r3, [r3, #16]
 800f14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f152:	2b40      	cmp	r3, #64	; 0x40
 800f154:	d10e      	bne.n	800f174 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	68db      	ldr	r3, [r3, #12]
 800f15c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f160:	2b40      	cmp	r3, #64	; 0x40
 800f162:	d107      	bne.n	800f174 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f16c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f000 f9c1 	bl	800f4f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	691b      	ldr	r3, [r3, #16]
 800f17a:	f003 0320 	and.w	r3, r3, #32
 800f17e:	2b20      	cmp	r3, #32
 800f180:	d10e      	bne.n	800f1a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	68db      	ldr	r3, [r3, #12]
 800f188:	f003 0320 	and.w	r3, r3, #32
 800f18c:	2b20      	cmp	r3, #32
 800f18e:	d107      	bne.n	800f1a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	f06f 0220 	mvn.w	r2, #32
 800f198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f000 fd42 	bl	800fc24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f1a0:	bf00      	nop
 800f1a2:	3708      	adds	r7, #8
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b086      	sub	sp, #24
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	d101      	bne.n	800f1c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f1c2:	2302      	movs	r3, #2
 800f1c4:	e0ae      	b.n	800f324 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2201      	movs	r2, #1
 800f1ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2b0c      	cmp	r3, #12
 800f1d2:	f200 809f 	bhi.w	800f314 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800f1d6:	a201      	add	r2, pc, #4	; (adr r2, 800f1dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1dc:	0800f211 	.word	0x0800f211
 800f1e0:	0800f315 	.word	0x0800f315
 800f1e4:	0800f315 	.word	0x0800f315
 800f1e8:	0800f315 	.word	0x0800f315
 800f1ec:	0800f251 	.word	0x0800f251
 800f1f0:	0800f315 	.word	0x0800f315
 800f1f4:	0800f315 	.word	0x0800f315
 800f1f8:	0800f315 	.word	0x0800f315
 800f1fc:	0800f293 	.word	0x0800f293
 800f200:	0800f315 	.word	0x0800f315
 800f204:	0800f315 	.word	0x0800f315
 800f208:	0800f315 	.word	0x0800f315
 800f20c:	0800f2d3 	.word	0x0800f2d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	68b9      	ldr	r1, [r7, #8]
 800f216:	4618      	mov	r0, r3
 800f218:	f000 fa18 	bl	800f64c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	699a      	ldr	r2, [r3, #24]
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f042 0208 	orr.w	r2, r2, #8
 800f22a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	699a      	ldr	r2, [r3, #24]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f022 0204 	bic.w	r2, r2, #4
 800f23a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	6999      	ldr	r1, [r3, #24]
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	691a      	ldr	r2, [r3, #16]
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	430a      	orrs	r2, r1
 800f24c:	619a      	str	r2, [r3, #24]
      break;
 800f24e:	e064      	b.n	800f31a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	68b9      	ldr	r1, [r7, #8]
 800f256:	4618      	mov	r0, r3
 800f258:	f000 fa68 	bl	800f72c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	699a      	ldr	r2, [r3, #24]
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f26a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	699a      	ldr	r2, [r3, #24]
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f27a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	6999      	ldr	r1, [r3, #24]
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	691b      	ldr	r3, [r3, #16]
 800f286:	021a      	lsls	r2, r3, #8
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	430a      	orrs	r2, r1
 800f28e:	619a      	str	r2, [r3, #24]
      break;
 800f290:	e043      	b.n	800f31a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	68b9      	ldr	r1, [r7, #8]
 800f298:	4618      	mov	r0, r3
 800f29a:	f000 fabd 	bl	800f818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	69da      	ldr	r2, [r3, #28]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f042 0208 	orr.w	r2, r2, #8
 800f2ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	69da      	ldr	r2, [r3, #28]
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f022 0204 	bic.w	r2, r2, #4
 800f2bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	69d9      	ldr	r1, [r3, #28]
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	691a      	ldr	r2, [r3, #16]
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	430a      	orrs	r2, r1
 800f2ce:	61da      	str	r2, [r3, #28]
      break;
 800f2d0:	e023      	b.n	800f31a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	68b9      	ldr	r1, [r7, #8]
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f000 fb11 	bl	800f900 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	69da      	ldr	r2, [r3, #28]
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f2ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	69da      	ldr	r2, [r3, #28]
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f2fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	69d9      	ldr	r1, [r3, #28]
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	691b      	ldr	r3, [r3, #16]
 800f308:	021a      	lsls	r2, r3, #8
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	430a      	orrs	r2, r1
 800f310:	61da      	str	r2, [r3, #28]
      break;
 800f312:	e002      	b.n	800f31a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800f314:	2301      	movs	r3, #1
 800f316:	75fb      	strb	r3, [r7, #23]
      break;
 800f318:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2200      	movs	r2, #0
 800f31e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f322:	7dfb      	ldrb	r3, [r7, #23]
}
 800f324:	4618      	mov	r0, r3
 800f326:	3718      	adds	r7, #24
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f336:	2300      	movs	r3, #0
 800f338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f340:	2b01      	cmp	r3, #1
 800f342:	d101      	bne.n	800f348 <HAL_TIM_ConfigClockSource+0x1c>
 800f344:	2302      	movs	r3, #2
 800f346:	e0b4      	b.n	800f4b2 <HAL_TIM_ConfigClockSource+0x186>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2201      	movs	r2, #1
 800f34c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2202      	movs	r2, #2
 800f354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	689b      	ldr	r3, [r3, #8]
 800f35e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f36e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	68ba      	ldr	r2, [r7, #8]
 800f376:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f380:	d03e      	beq.n	800f400 <HAL_TIM_ConfigClockSource+0xd4>
 800f382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f386:	f200 8087 	bhi.w	800f498 <HAL_TIM_ConfigClockSource+0x16c>
 800f38a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f38e:	f000 8086 	beq.w	800f49e <HAL_TIM_ConfigClockSource+0x172>
 800f392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f396:	d87f      	bhi.n	800f498 <HAL_TIM_ConfigClockSource+0x16c>
 800f398:	2b70      	cmp	r3, #112	; 0x70
 800f39a:	d01a      	beq.n	800f3d2 <HAL_TIM_ConfigClockSource+0xa6>
 800f39c:	2b70      	cmp	r3, #112	; 0x70
 800f39e:	d87b      	bhi.n	800f498 <HAL_TIM_ConfigClockSource+0x16c>
 800f3a0:	2b60      	cmp	r3, #96	; 0x60
 800f3a2:	d050      	beq.n	800f446 <HAL_TIM_ConfigClockSource+0x11a>
 800f3a4:	2b60      	cmp	r3, #96	; 0x60
 800f3a6:	d877      	bhi.n	800f498 <HAL_TIM_ConfigClockSource+0x16c>
 800f3a8:	2b50      	cmp	r3, #80	; 0x50
 800f3aa:	d03c      	beq.n	800f426 <HAL_TIM_ConfigClockSource+0xfa>
 800f3ac:	2b50      	cmp	r3, #80	; 0x50
 800f3ae:	d873      	bhi.n	800f498 <HAL_TIM_ConfigClockSource+0x16c>
 800f3b0:	2b40      	cmp	r3, #64	; 0x40
 800f3b2:	d058      	beq.n	800f466 <HAL_TIM_ConfigClockSource+0x13a>
 800f3b4:	2b40      	cmp	r3, #64	; 0x40
 800f3b6:	d86f      	bhi.n	800f498 <HAL_TIM_ConfigClockSource+0x16c>
 800f3b8:	2b30      	cmp	r3, #48	; 0x30
 800f3ba:	d064      	beq.n	800f486 <HAL_TIM_ConfigClockSource+0x15a>
 800f3bc:	2b30      	cmp	r3, #48	; 0x30
 800f3be:	d86b      	bhi.n	800f498 <HAL_TIM_ConfigClockSource+0x16c>
 800f3c0:	2b20      	cmp	r3, #32
 800f3c2:	d060      	beq.n	800f486 <HAL_TIM_ConfigClockSource+0x15a>
 800f3c4:	2b20      	cmp	r3, #32
 800f3c6:	d867      	bhi.n	800f498 <HAL_TIM_ConfigClockSource+0x16c>
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d05c      	beq.n	800f486 <HAL_TIM_ConfigClockSource+0x15a>
 800f3cc:	2b10      	cmp	r3, #16
 800f3ce:	d05a      	beq.n	800f486 <HAL_TIM_ConfigClockSource+0x15a>
 800f3d0:	e062      	b.n	800f498 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6818      	ldr	r0, [r3, #0]
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	6899      	ldr	r1, [r3, #8]
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	685a      	ldr	r2, [r3, #4]
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	68db      	ldr	r3, [r3, #12]
 800f3e2:	f000 fb5d 	bl	800faa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	689b      	ldr	r3, [r3, #8]
 800f3ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f3f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	68ba      	ldr	r2, [r7, #8]
 800f3fc:	609a      	str	r2, [r3, #8]
      break;
 800f3fe:	e04f      	b.n	800f4a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6818      	ldr	r0, [r3, #0]
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	6899      	ldr	r1, [r3, #8]
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	685a      	ldr	r2, [r3, #4]
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	68db      	ldr	r3, [r3, #12]
 800f410:	f000 fb46 	bl	800faa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	689a      	ldr	r2, [r3, #8]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f422:	609a      	str	r2, [r3, #8]
      break;
 800f424:	e03c      	b.n	800f4a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6818      	ldr	r0, [r3, #0]
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	6859      	ldr	r1, [r3, #4]
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	68db      	ldr	r3, [r3, #12]
 800f432:	461a      	mov	r2, r3
 800f434:	f000 faba 	bl	800f9ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	2150      	movs	r1, #80	; 0x50
 800f43e:	4618      	mov	r0, r3
 800f440:	f000 fb13 	bl	800fa6a <TIM_ITRx_SetConfig>
      break;
 800f444:	e02c      	b.n	800f4a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6818      	ldr	r0, [r3, #0]
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	6859      	ldr	r1, [r3, #4]
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	68db      	ldr	r3, [r3, #12]
 800f452:	461a      	mov	r2, r3
 800f454:	f000 fad9 	bl	800fa0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	2160      	movs	r1, #96	; 0x60
 800f45e:	4618      	mov	r0, r3
 800f460:	f000 fb03 	bl	800fa6a <TIM_ITRx_SetConfig>
      break;
 800f464:	e01c      	b.n	800f4a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6818      	ldr	r0, [r3, #0]
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	6859      	ldr	r1, [r3, #4]
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	68db      	ldr	r3, [r3, #12]
 800f472:	461a      	mov	r2, r3
 800f474:	f000 fa9a 	bl	800f9ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	2140      	movs	r1, #64	; 0x40
 800f47e:	4618      	mov	r0, r3
 800f480:	f000 faf3 	bl	800fa6a <TIM_ITRx_SetConfig>
      break;
 800f484:	e00c      	b.n	800f4a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681a      	ldr	r2, [r3, #0]
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	4619      	mov	r1, r3
 800f490:	4610      	mov	r0, r2
 800f492:	f000 faea 	bl	800fa6a <TIM_ITRx_SetConfig>
      break;
 800f496:	e003      	b.n	800f4a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f498:	2301      	movs	r3, #1
 800f49a:	73fb      	strb	r3, [r7, #15]
      break;
 800f49c:	e000      	b.n	800f4a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f49e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2201      	movs	r2, #1
 800f4a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	3710      	adds	r7, #16
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}

0800f4ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f4ba:	b480      	push	{r7}
 800f4bc:	b083      	sub	sp, #12
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f4c2:	bf00      	nop
 800f4c4:	370c      	adds	r7, #12
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4cc:	4770      	bx	lr

0800f4ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f4ce:	b480      	push	{r7}
 800f4d0:	b083      	sub	sp, #12
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f4d6:	bf00      	nop
 800f4d8:	370c      	adds	r7, #12
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e0:	4770      	bx	lr

0800f4e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f4e2:	b480      	push	{r7}
 800f4e4:	b083      	sub	sp, #12
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f4ea:	bf00      	nop
 800f4ec:	370c      	adds	r7, #12
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f4:	4770      	bx	lr

0800f4f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f4f6:	b480      	push	{r7}
 800f4f8:	b083      	sub	sp, #12
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f4fe:	bf00      	nop
 800f500:	370c      	adds	r7, #12
 800f502:	46bd      	mov	sp, r7
 800f504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f508:	4770      	bx	lr
	...

0800f50c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f50c:	b480      	push	{r7}
 800f50e:	b085      	sub	sp, #20
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	4a40      	ldr	r2, [pc, #256]	; (800f620 <TIM_Base_SetConfig+0x114>)
 800f520:	4293      	cmp	r3, r2
 800f522:	d013      	beq.n	800f54c <TIM_Base_SetConfig+0x40>
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f52a:	d00f      	beq.n	800f54c <TIM_Base_SetConfig+0x40>
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	4a3d      	ldr	r2, [pc, #244]	; (800f624 <TIM_Base_SetConfig+0x118>)
 800f530:	4293      	cmp	r3, r2
 800f532:	d00b      	beq.n	800f54c <TIM_Base_SetConfig+0x40>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	4a3c      	ldr	r2, [pc, #240]	; (800f628 <TIM_Base_SetConfig+0x11c>)
 800f538:	4293      	cmp	r3, r2
 800f53a:	d007      	beq.n	800f54c <TIM_Base_SetConfig+0x40>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	4a3b      	ldr	r2, [pc, #236]	; (800f62c <TIM_Base_SetConfig+0x120>)
 800f540:	4293      	cmp	r3, r2
 800f542:	d003      	beq.n	800f54c <TIM_Base_SetConfig+0x40>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	4a3a      	ldr	r2, [pc, #232]	; (800f630 <TIM_Base_SetConfig+0x124>)
 800f548:	4293      	cmp	r3, r2
 800f54a:	d108      	bne.n	800f55e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	685b      	ldr	r3, [r3, #4]
 800f558:	68fa      	ldr	r2, [r7, #12]
 800f55a:	4313      	orrs	r3, r2
 800f55c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	4a2f      	ldr	r2, [pc, #188]	; (800f620 <TIM_Base_SetConfig+0x114>)
 800f562:	4293      	cmp	r3, r2
 800f564:	d02b      	beq.n	800f5be <TIM_Base_SetConfig+0xb2>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f56c:	d027      	beq.n	800f5be <TIM_Base_SetConfig+0xb2>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	4a2c      	ldr	r2, [pc, #176]	; (800f624 <TIM_Base_SetConfig+0x118>)
 800f572:	4293      	cmp	r3, r2
 800f574:	d023      	beq.n	800f5be <TIM_Base_SetConfig+0xb2>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	4a2b      	ldr	r2, [pc, #172]	; (800f628 <TIM_Base_SetConfig+0x11c>)
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d01f      	beq.n	800f5be <TIM_Base_SetConfig+0xb2>
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	4a2a      	ldr	r2, [pc, #168]	; (800f62c <TIM_Base_SetConfig+0x120>)
 800f582:	4293      	cmp	r3, r2
 800f584:	d01b      	beq.n	800f5be <TIM_Base_SetConfig+0xb2>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	4a29      	ldr	r2, [pc, #164]	; (800f630 <TIM_Base_SetConfig+0x124>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d017      	beq.n	800f5be <TIM_Base_SetConfig+0xb2>
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	4a28      	ldr	r2, [pc, #160]	; (800f634 <TIM_Base_SetConfig+0x128>)
 800f592:	4293      	cmp	r3, r2
 800f594:	d013      	beq.n	800f5be <TIM_Base_SetConfig+0xb2>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	4a27      	ldr	r2, [pc, #156]	; (800f638 <TIM_Base_SetConfig+0x12c>)
 800f59a:	4293      	cmp	r3, r2
 800f59c:	d00f      	beq.n	800f5be <TIM_Base_SetConfig+0xb2>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	4a26      	ldr	r2, [pc, #152]	; (800f63c <TIM_Base_SetConfig+0x130>)
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	d00b      	beq.n	800f5be <TIM_Base_SetConfig+0xb2>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	4a25      	ldr	r2, [pc, #148]	; (800f640 <TIM_Base_SetConfig+0x134>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d007      	beq.n	800f5be <TIM_Base_SetConfig+0xb2>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	4a24      	ldr	r2, [pc, #144]	; (800f644 <TIM_Base_SetConfig+0x138>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d003      	beq.n	800f5be <TIM_Base_SetConfig+0xb2>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	4a23      	ldr	r2, [pc, #140]	; (800f648 <TIM_Base_SetConfig+0x13c>)
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	d108      	bne.n	800f5d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f5c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	68db      	ldr	r3, [r3, #12]
 800f5ca:	68fa      	ldr	r2, [r7, #12]
 800f5cc:	4313      	orrs	r3, r2
 800f5ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	695b      	ldr	r3, [r3, #20]
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	68fa      	ldr	r2, [r7, #12]
 800f5e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	689a      	ldr	r2, [r3, #8]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	681a      	ldr	r2, [r3, #0]
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	4a0a      	ldr	r2, [pc, #40]	; (800f620 <TIM_Base_SetConfig+0x114>)
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	d003      	beq.n	800f604 <TIM_Base_SetConfig+0xf8>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	4a0c      	ldr	r2, [pc, #48]	; (800f630 <TIM_Base_SetConfig+0x124>)
 800f600:	4293      	cmp	r3, r2
 800f602:	d103      	bne.n	800f60c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	691a      	ldr	r2, [r3, #16]
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2201      	movs	r2, #1
 800f610:	615a      	str	r2, [r3, #20]
}
 800f612:	bf00      	nop
 800f614:	3714      	adds	r7, #20
 800f616:	46bd      	mov	sp, r7
 800f618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61c:	4770      	bx	lr
 800f61e:	bf00      	nop
 800f620:	40010000 	.word	0x40010000
 800f624:	40000400 	.word	0x40000400
 800f628:	40000800 	.word	0x40000800
 800f62c:	40000c00 	.word	0x40000c00
 800f630:	40010400 	.word	0x40010400
 800f634:	40014000 	.word	0x40014000
 800f638:	40014400 	.word	0x40014400
 800f63c:	40014800 	.word	0x40014800
 800f640:	40001800 	.word	0x40001800
 800f644:	40001c00 	.word	0x40001c00
 800f648:	40002000 	.word	0x40002000

0800f64c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f64c:	b480      	push	{r7}
 800f64e:	b087      	sub	sp, #28
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
 800f654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6a1b      	ldr	r3, [r3, #32]
 800f65a:	f023 0201 	bic.w	r2, r3, #1
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6a1b      	ldr	r3, [r3, #32]
 800f666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	699b      	ldr	r3, [r3, #24]
 800f672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f67a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	f023 0303 	bic.w	r3, r3, #3
 800f682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	68fa      	ldr	r2, [r7, #12]
 800f68a:	4313      	orrs	r3, r2
 800f68c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	f023 0302 	bic.w	r3, r3, #2
 800f694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	689b      	ldr	r3, [r3, #8]
 800f69a:	697a      	ldr	r2, [r7, #20]
 800f69c:	4313      	orrs	r3, r2
 800f69e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	4a20      	ldr	r2, [pc, #128]	; (800f724 <TIM_OC1_SetConfig+0xd8>)
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	d003      	beq.n	800f6b0 <TIM_OC1_SetConfig+0x64>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	4a1f      	ldr	r2, [pc, #124]	; (800f728 <TIM_OC1_SetConfig+0xdc>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d10c      	bne.n	800f6ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	f023 0308 	bic.w	r3, r3, #8
 800f6b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	68db      	ldr	r3, [r3, #12]
 800f6bc:	697a      	ldr	r2, [r7, #20]
 800f6be:	4313      	orrs	r3, r2
 800f6c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	f023 0304 	bic.w	r3, r3, #4
 800f6c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	4a15      	ldr	r2, [pc, #84]	; (800f724 <TIM_OC1_SetConfig+0xd8>)
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	d003      	beq.n	800f6da <TIM_OC1_SetConfig+0x8e>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	4a14      	ldr	r2, [pc, #80]	; (800f728 <TIM_OC1_SetConfig+0xdc>)
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	d111      	bne.n	800f6fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f6da:	693b      	ldr	r3, [r7, #16]
 800f6dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f6e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f6e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	695b      	ldr	r3, [r3, #20]
 800f6ee:	693a      	ldr	r2, [r7, #16]
 800f6f0:	4313      	orrs	r3, r2
 800f6f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	699b      	ldr	r3, [r3, #24]
 800f6f8:	693a      	ldr	r2, [r7, #16]
 800f6fa:	4313      	orrs	r3, r2
 800f6fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	693a      	ldr	r2, [r7, #16]
 800f702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	68fa      	ldr	r2, [r7, #12]
 800f708:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	685a      	ldr	r2, [r3, #4]
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	697a      	ldr	r2, [r7, #20]
 800f716:	621a      	str	r2, [r3, #32]
}
 800f718:	bf00      	nop
 800f71a:	371c      	adds	r7, #28
 800f71c:	46bd      	mov	sp, r7
 800f71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f722:	4770      	bx	lr
 800f724:	40010000 	.word	0x40010000
 800f728:	40010400 	.word	0x40010400

0800f72c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f72c:	b480      	push	{r7}
 800f72e:	b087      	sub	sp, #28
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
 800f734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	6a1b      	ldr	r3, [r3, #32]
 800f73a:	f023 0210 	bic.w	r2, r3, #16
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6a1b      	ldr	r3, [r3, #32]
 800f746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	685b      	ldr	r3, [r3, #4]
 800f74c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	699b      	ldr	r3, [r3, #24]
 800f752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f75a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	021b      	lsls	r3, r3, #8
 800f76a:	68fa      	ldr	r2, [r7, #12]
 800f76c:	4313      	orrs	r3, r2
 800f76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	f023 0320 	bic.w	r3, r3, #32
 800f776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	689b      	ldr	r3, [r3, #8]
 800f77c:	011b      	lsls	r3, r3, #4
 800f77e:	697a      	ldr	r2, [r7, #20]
 800f780:	4313      	orrs	r3, r2
 800f782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	4a22      	ldr	r2, [pc, #136]	; (800f810 <TIM_OC2_SetConfig+0xe4>)
 800f788:	4293      	cmp	r3, r2
 800f78a:	d003      	beq.n	800f794 <TIM_OC2_SetConfig+0x68>
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	4a21      	ldr	r2, [pc, #132]	; (800f814 <TIM_OC2_SetConfig+0xe8>)
 800f790:	4293      	cmp	r3, r2
 800f792:	d10d      	bne.n	800f7b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f79a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	68db      	ldr	r3, [r3, #12]
 800f7a0:	011b      	lsls	r3, r3, #4
 800f7a2:	697a      	ldr	r2, [r7, #20]
 800f7a4:	4313      	orrs	r3, r2
 800f7a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	4a17      	ldr	r2, [pc, #92]	; (800f810 <TIM_OC2_SetConfig+0xe4>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d003      	beq.n	800f7c0 <TIM_OC2_SetConfig+0x94>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	4a16      	ldr	r2, [pc, #88]	; (800f814 <TIM_OC2_SetConfig+0xe8>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d113      	bne.n	800f7e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f7c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f7ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	695b      	ldr	r3, [r3, #20]
 800f7d4:	009b      	lsls	r3, r3, #2
 800f7d6:	693a      	ldr	r2, [r7, #16]
 800f7d8:	4313      	orrs	r3, r2
 800f7da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	699b      	ldr	r3, [r3, #24]
 800f7e0:	009b      	lsls	r3, r3, #2
 800f7e2:	693a      	ldr	r2, [r7, #16]
 800f7e4:	4313      	orrs	r3, r2
 800f7e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	693a      	ldr	r2, [r7, #16]
 800f7ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	68fa      	ldr	r2, [r7, #12]
 800f7f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	685a      	ldr	r2, [r3, #4]
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	697a      	ldr	r2, [r7, #20]
 800f800:	621a      	str	r2, [r3, #32]
}
 800f802:	bf00      	nop
 800f804:	371c      	adds	r7, #28
 800f806:	46bd      	mov	sp, r7
 800f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80c:	4770      	bx	lr
 800f80e:	bf00      	nop
 800f810:	40010000 	.word	0x40010000
 800f814:	40010400 	.word	0x40010400

0800f818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f818:	b480      	push	{r7}
 800f81a:	b087      	sub	sp, #28
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6a1b      	ldr	r3, [r3, #32]
 800f826:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6a1b      	ldr	r3, [r3, #32]
 800f832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	685b      	ldr	r3, [r3, #4]
 800f838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	69db      	ldr	r3, [r3, #28]
 800f83e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f023 0303 	bic.w	r3, r3, #3
 800f84e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	68fa      	ldr	r2, [r7, #12]
 800f856:	4313      	orrs	r3, r2
 800f858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	689b      	ldr	r3, [r3, #8]
 800f866:	021b      	lsls	r3, r3, #8
 800f868:	697a      	ldr	r2, [r7, #20]
 800f86a:	4313      	orrs	r3, r2
 800f86c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	4a21      	ldr	r2, [pc, #132]	; (800f8f8 <TIM_OC3_SetConfig+0xe0>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d003      	beq.n	800f87e <TIM_OC3_SetConfig+0x66>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	4a20      	ldr	r2, [pc, #128]	; (800f8fc <TIM_OC3_SetConfig+0xe4>)
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d10d      	bne.n	800f89a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	68db      	ldr	r3, [r3, #12]
 800f88a:	021b      	lsls	r3, r3, #8
 800f88c:	697a      	ldr	r2, [r7, #20]
 800f88e:	4313      	orrs	r3, r2
 800f890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	4a16      	ldr	r2, [pc, #88]	; (800f8f8 <TIM_OC3_SetConfig+0xe0>)
 800f89e:	4293      	cmp	r3, r2
 800f8a0:	d003      	beq.n	800f8aa <TIM_OC3_SetConfig+0x92>
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	4a15      	ldr	r2, [pc, #84]	; (800f8fc <TIM_OC3_SetConfig+0xe4>)
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d113      	bne.n	800f8d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f8b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f8b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	695b      	ldr	r3, [r3, #20]
 800f8be:	011b      	lsls	r3, r3, #4
 800f8c0:	693a      	ldr	r2, [r7, #16]
 800f8c2:	4313      	orrs	r3, r2
 800f8c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	699b      	ldr	r3, [r3, #24]
 800f8ca:	011b      	lsls	r3, r3, #4
 800f8cc:	693a      	ldr	r2, [r7, #16]
 800f8ce:	4313      	orrs	r3, r2
 800f8d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	693a      	ldr	r2, [r7, #16]
 800f8d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	68fa      	ldr	r2, [r7, #12]
 800f8dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	685a      	ldr	r2, [r3, #4]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	697a      	ldr	r2, [r7, #20]
 800f8ea:	621a      	str	r2, [r3, #32]
}
 800f8ec:	bf00      	nop
 800f8ee:	371c      	adds	r7, #28
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr
 800f8f8:	40010000 	.word	0x40010000
 800f8fc:	40010400 	.word	0x40010400

0800f900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f900:	b480      	push	{r7}
 800f902:	b087      	sub	sp, #28
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6a1b      	ldr	r3, [r3, #32]
 800f90e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6a1b      	ldr	r3, [r3, #32]
 800f91a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	685b      	ldr	r3, [r3, #4]
 800f920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	69db      	ldr	r3, [r3, #28]
 800f926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f92e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	021b      	lsls	r3, r3, #8
 800f93e:	68fa      	ldr	r2, [r7, #12]
 800f940:	4313      	orrs	r3, r2
 800f942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f94a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	689b      	ldr	r3, [r3, #8]
 800f950:	031b      	lsls	r3, r3, #12
 800f952:	693a      	ldr	r2, [r7, #16]
 800f954:	4313      	orrs	r3, r2
 800f956:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	4a12      	ldr	r2, [pc, #72]	; (800f9a4 <TIM_OC4_SetConfig+0xa4>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d003      	beq.n	800f968 <TIM_OC4_SetConfig+0x68>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	4a11      	ldr	r2, [pc, #68]	; (800f9a8 <TIM_OC4_SetConfig+0xa8>)
 800f964:	4293      	cmp	r3, r2
 800f966:	d109      	bne.n	800f97c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f96e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	695b      	ldr	r3, [r3, #20]
 800f974:	019b      	lsls	r3, r3, #6
 800f976:	697a      	ldr	r2, [r7, #20]
 800f978:	4313      	orrs	r3, r2
 800f97a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	697a      	ldr	r2, [r7, #20]
 800f980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	68fa      	ldr	r2, [r7, #12]
 800f986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	685a      	ldr	r2, [r3, #4]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	693a      	ldr	r2, [r7, #16]
 800f994:	621a      	str	r2, [r3, #32]
}
 800f996:	bf00      	nop
 800f998:	371c      	adds	r7, #28
 800f99a:	46bd      	mov	sp, r7
 800f99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a0:	4770      	bx	lr
 800f9a2:	bf00      	nop
 800f9a4:	40010000 	.word	0x40010000
 800f9a8:	40010400 	.word	0x40010400

0800f9ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b087      	sub	sp, #28
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	60f8      	str	r0, [r7, #12]
 800f9b4:	60b9      	str	r1, [r7, #8]
 800f9b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	6a1b      	ldr	r3, [r3, #32]
 800f9bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	6a1b      	ldr	r3, [r3, #32]
 800f9c2:	f023 0201 	bic.w	r2, r3, #1
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	699b      	ldr	r3, [r3, #24]
 800f9ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f9d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	011b      	lsls	r3, r3, #4
 800f9dc:	693a      	ldr	r2, [r7, #16]
 800f9de:	4313      	orrs	r3, r2
 800f9e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	f023 030a 	bic.w	r3, r3, #10
 800f9e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f9ea:	697a      	ldr	r2, [r7, #20]
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	4313      	orrs	r3, r2
 800f9f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	693a      	ldr	r2, [r7, #16]
 800f9f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	697a      	ldr	r2, [r7, #20]
 800f9fc:	621a      	str	r2, [r3, #32]
}
 800f9fe:	bf00      	nop
 800fa00:	371c      	adds	r7, #28
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr

0800fa0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fa0a:	b480      	push	{r7}
 800fa0c:	b087      	sub	sp, #28
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	60f8      	str	r0, [r7, #12]
 800fa12:	60b9      	str	r1, [r7, #8]
 800fa14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	6a1b      	ldr	r3, [r3, #32]
 800fa1a:	f023 0210 	bic.w	r2, r3, #16
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	699b      	ldr	r3, [r3, #24]
 800fa26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	6a1b      	ldr	r3, [r3, #32]
 800fa2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fa34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	031b      	lsls	r3, r3, #12
 800fa3a:	697a      	ldr	r2, [r7, #20]
 800fa3c:	4313      	orrs	r3, r2
 800fa3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fa46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	011b      	lsls	r3, r3, #4
 800fa4c:	693a      	ldr	r2, [r7, #16]
 800fa4e:	4313      	orrs	r3, r2
 800fa50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	697a      	ldr	r2, [r7, #20]
 800fa56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	693a      	ldr	r2, [r7, #16]
 800fa5c:	621a      	str	r2, [r3, #32]
}
 800fa5e:	bf00      	nop
 800fa60:	371c      	adds	r7, #28
 800fa62:	46bd      	mov	sp, r7
 800fa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa68:	4770      	bx	lr

0800fa6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fa6a:	b480      	push	{r7}
 800fa6c:	b085      	sub	sp, #20
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	6078      	str	r0, [r7, #4]
 800fa72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	689b      	ldr	r3, [r3, #8]
 800fa78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fa82:	683a      	ldr	r2, [r7, #0]
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	4313      	orrs	r3, r2
 800fa88:	f043 0307 	orr.w	r3, r3, #7
 800fa8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	68fa      	ldr	r2, [r7, #12]
 800fa92:	609a      	str	r2, [r3, #8]
}
 800fa94:	bf00      	nop
 800fa96:	3714      	adds	r7, #20
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr

0800faa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b087      	sub	sp, #28
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	60f8      	str	r0, [r7, #12]
 800faa8:	60b9      	str	r1, [r7, #8]
 800faaa:	607a      	str	r2, [r7, #4]
 800faac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	689b      	ldr	r3, [r3, #8]
 800fab2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800faba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	021a      	lsls	r2, r3, #8
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	431a      	orrs	r2, r3
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	4313      	orrs	r3, r2
 800fac8:	697a      	ldr	r2, [r7, #20]
 800faca:	4313      	orrs	r3, r2
 800facc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	697a      	ldr	r2, [r7, #20]
 800fad2:	609a      	str	r2, [r3, #8]
}
 800fad4:	bf00      	nop
 800fad6:	371c      	adds	r7, #28
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr

0800fae0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fae0:	b480      	push	{r7}
 800fae2:	b087      	sub	sp, #28
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	60f8      	str	r0, [r7, #12]
 800fae8:	60b9      	str	r1, [r7, #8]
 800faea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	f003 031f 	and.w	r3, r3, #31
 800faf2:	2201      	movs	r2, #1
 800faf4:	fa02 f303 	lsl.w	r3, r2, r3
 800faf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	6a1a      	ldr	r2, [r3, #32]
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	43db      	mvns	r3, r3
 800fb02:	401a      	ands	r2, r3
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	6a1a      	ldr	r2, [r3, #32]
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	f003 031f 	and.w	r3, r3, #31
 800fb12:	6879      	ldr	r1, [r7, #4]
 800fb14:	fa01 f303 	lsl.w	r3, r1, r3
 800fb18:	431a      	orrs	r2, r3
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	621a      	str	r2, [r3, #32]
}
 800fb1e:	bf00      	nop
 800fb20:	371c      	adds	r7, #28
 800fb22:	46bd      	mov	sp, r7
 800fb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb28:	4770      	bx	lr
	...

0800fb2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b085      	sub	sp, #20
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb3c:	2b01      	cmp	r3, #1
 800fb3e:	d101      	bne.n	800fb44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fb40:	2302      	movs	r3, #2
 800fb42:	e05a      	b.n	800fbfa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2201      	movs	r2, #1
 800fb48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2202      	movs	r2, #2
 800fb50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	685b      	ldr	r3, [r3, #4]
 800fb5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	689b      	ldr	r3, [r3, #8]
 800fb62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	68fa      	ldr	r2, [r7, #12]
 800fb72:	4313      	orrs	r3, r2
 800fb74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	68fa      	ldr	r2, [r7, #12]
 800fb7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	4a21      	ldr	r2, [pc, #132]	; (800fc08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fb84:	4293      	cmp	r3, r2
 800fb86:	d022      	beq.n	800fbce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb90:	d01d      	beq.n	800fbce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	4a1d      	ldr	r2, [pc, #116]	; (800fc0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	d018      	beq.n	800fbce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	4a1b      	ldr	r2, [pc, #108]	; (800fc10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fba2:	4293      	cmp	r3, r2
 800fba4:	d013      	beq.n	800fbce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	4a1a      	ldr	r2, [pc, #104]	; (800fc14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d00e      	beq.n	800fbce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	4a18      	ldr	r2, [pc, #96]	; (800fc18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fbb6:	4293      	cmp	r3, r2
 800fbb8:	d009      	beq.n	800fbce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	4a17      	ldr	r2, [pc, #92]	; (800fc1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	d004      	beq.n	800fbce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	4a15      	ldr	r2, [pc, #84]	; (800fc20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	d10c      	bne.n	800fbe8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fbd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	685b      	ldr	r3, [r3, #4]
 800fbda:	68ba      	ldr	r2, [r7, #8]
 800fbdc:	4313      	orrs	r3, r2
 800fbde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	68ba      	ldr	r2, [r7, #8]
 800fbe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2201      	movs	r2, #1
 800fbec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fbf8:	2300      	movs	r3, #0
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3714      	adds	r7, #20
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc04:	4770      	bx	lr
 800fc06:	bf00      	nop
 800fc08:	40010000 	.word	0x40010000
 800fc0c:	40000400 	.word	0x40000400
 800fc10:	40000800 	.word	0x40000800
 800fc14:	40000c00 	.word	0x40000c00
 800fc18:	40010400 	.word	0x40010400
 800fc1c:	40014000 	.word	0x40014000
 800fc20:	40001800 	.word	0x40001800

0800fc24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fc2c:	bf00      	nop
 800fc2e:	370c      	adds	r7, #12
 800fc30:	46bd      	mov	sp, r7
 800fc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc36:	4770      	bx	lr

0800fc38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b083      	sub	sp, #12
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fc40:	bf00      	nop
 800fc42:	370c      	adds	r7, #12
 800fc44:	46bd      	mov	sp, r7
 800fc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4a:	4770      	bx	lr

0800fc4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b082      	sub	sp, #8
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d101      	bne.n	800fc5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	e03f      	b.n	800fcde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fc64:	b2db      	uxtb	r3, r3
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d106      	bne.n	800fc78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f7f3 fbf0 	bl	8003458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2224      	movs	r2, #36	; 0x24
 800fc7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	68da      	ldr	r2, [r3, #12]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fc8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f000 ff43 	bl	8010b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	691a      	ldr	r2, [r3, #16]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	695a      	ldr	r2, [r3, #20]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fcb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	68da      	ldr	r2, [r3, #12]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fcc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2220      	movs	r2, #32
 800fcd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2220      	movs	r2, #32
 800fcd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800fcdc:	2300      	movs	r3, #0
}
 800fcde:	4618      	mov	r0, r3
 800fce0:	3708      	adds	r7, #8
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}
	...

0800fce8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b08c      	sub	sp, #48	; 0x30
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	60f8      	str	r0, [r7, #12]
 800fcf0:	60b9      	str	r1, [r7, #8]
 800fcf2:	4613      	mov	r3, r2
 800fcf4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fcfc:	b2db      	uxtb	r3, r3
 800fcfe:	2b20      	cmp	r3, #32
 800fd00:	d165      	bne.n	800fdce <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d002      	beq.n	800fd0e <HAL_UART_Transmit_DMA+0x26>
 800fd08:	88fb      	ldrh	r3, [r7, #6]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d101      	bne.n	800fd12 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800fd0e:	2301      	movs	r3, #1
 800fd10:	e05e      	b.n	800fdd0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd18:	2b01      	cmp	r3, #1
 800fd1a:	d101      	bne.n	800fd20 <HAL_UART_Transmit_DMA+0x38>
 800fd1c:	2302      	movs	r3, #2
 800fd1e:	e057      	b.n	800fdd0 <HAL_UART_Transmit_DMA+0xe8>
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	2201      	movs	r2, #1
 800fd24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800fd28:	68ba      	ldr	r2, [r7, #8]
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	88fa      	ldrh	r2, [r7, #6]
 800fd32:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	88fa      	ldrh	r2, [r7, #6]
 800fd38:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	2221      	movs	r2, #33	; 0x21
 800fd44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd4c:	4a22      	ldr	r2, [pc, #136]	; (800fdd8 <HAL_UART_Transmit_DMA+0xf0>)
 800fd4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd54:	4a21      	ldr	r2, [pc, #132]	; (800fddc <HAL_UART_Transmit_DMA+0xf4>)
 800fd56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd5c:	4a20      	ldr	r2, [pc, #128]	; (800fde0 <HAL_UART_Transmit_DMA+0xf8>)
 800fd5e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd64:	2200      	movs	r2, #0
 800fd66:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800fd68:	f107 0308 	add.w	r3, r7, #8
 800fd6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800fd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd74:	6819      	ldr	r1, [r3, #0]
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	3304      	adds	r3, #4
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	88fb      	ldrh	r3, [r7, #6]
 800fd80:	f7fa f98e 	bl	800a0a0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fd8c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2200      	movs	r2, #0
 800fd92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	3314      	adds	r3, #20
 800fd9c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd9e:	69bb      	ldr	r3, [r7, #24]
 800fda0:	e853 3f00 	ldrex	r3, [r3]
 800fda4:	617b      	str	r3, [r7, #20]
   return(result);
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdac:	62bb      	str	r3, [r7, #40]	; 0x28
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	3314      	adds	r3, #20
 800fdb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fdb6:	627a      	str	r2, [r7, #36]	; 0x24
 800fdb8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdba:	6a39      	ldr	r1, [r7, #32]
 800fdbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdbe:	e841 2300 	strex	r3, r2, [r1]
 800fdc2:	61fb      	str	r3, [r7, #28]
   return(result);
 800fdc4:	69fb      	ldr	r3, [r7, #28]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d1e5      	bne.n	800fd96 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	e000      	b.n	800fdd0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800fdce:	2302      	movs	r3, #2
  }
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3730      	adds	r7, #48	; 0x30
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}
 800fdd8:	080103b5 	.word	0x080103b5
 800fddc:	0801044f 	.word	0x0801044f
 800fde0:	080105c7 	.word	0x080105c7

0800fde4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b084      	sub	sp, #16
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	60f8      	str	r0, [r7, #12]
 800fdec:	60b9      	str	r1, [r7, #8]
 800fdee:	4613      	mov	r3, r2
 800fdf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fdf8:	b2db      	uxtb	r3, r3
 800fdfa:	2b20      	cmp	r3, #32
 800fdfc:	d11d      	bne.n	800fe3a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d002      	beq.n	800fe0a <HAL_UART_Receive_DMA+0x26>
 800fe04:	88fb      	ldrh	r3, [r7, #6]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d101      	bne.n	800fe0e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	e016      	b.n	800fe3c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d101      	bne.n	800fe1c <HAL_UART_Receive_DMA+0x38>
 800fe18:	2302      	movs	r3, #2
 800fe1a:	e00f      	b.n	800fe3c <HAL_UART_Receive_DMA+0x58>
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	2201      	movs	r2, #1
 800fe20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	2200      	movs	r2, #0
 800fe28:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800fe2a:	88fb      	ldrh	r3, [r7, #6]
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	68b9      	ldr	r1, [r7, #8]
 800fe30:	68f8      	ldr	r0, [r7, #12]
 800fe32:	f000 fc13 	bl	801065c <UART_Start_Receive_DMA>
 800fe36:	4603      	mov	r3, r0
 800fe38:	e000      	b.n	800fe3c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800fe3a:	2302      	movs	r3, #2
  }
}
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	3710      	adds	r7, #16
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bd80      	pop	{r7, pc}

0800fe44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b0ba      	sub	sp, #232	; 0xe8
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	695b      	ldr	r3, [r3, #20]
 800fe66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800fe70:	2300      	movs	r3, #0
 800fe72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800fe76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe7a:	f003 030f 	and.w	r3, r3, #15
 800fe7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800fe82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d10f      	bne.n	800feaa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fe8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe8e:	f003 0320 	and.w	r3, r3, #32
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d009      	beq.n	800feaa <HAL_UART_IRQHandler+0x66>
 800fe96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe9a:	f003 0320 	and.w	r3, r3, #32
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d003      	beq.n	800feaa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f000 fd7f 	bl	80109a6 <UART_Receive_IT>
      return;
 800fea8:	e256      	b.n	8010358 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800feaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800feae:	2b00      	cmp	r3, #0
 800feb0:	f000 80de 	beq.w	8010070 <HAL_UART_IRQHandler+0x22c>
 800feb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800feb8:	f003 0301 	and.w	r3, r3, #1
 800febc:	2b00      	cmp	r3, #0
 800febe:	d106      	bne.n	800fece <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800fec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fec4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800fec8:	2b00      	cmp	r3, #0
 800feca:	f000 80d1 	beq.w	8010070 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800fece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fed2:	f003 0301 	and.w	r3, r3, #1
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d00b      	beq.n	800fef2 <HAL_UART_IRQHandler+0xae>
 800feda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d005      	beq.n	800fef2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800feea:	f043 0201 	orr.w	r2, r3, #1
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fef6:	f003 0304 	and.w	r3, r3, #4
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d00b      	beq.n	800ff16 <HAL_UART_IRQHandler+0xd2>
 800fefe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ff02:	f003 0301 	and.w	r3, r3, #1
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d005      	beq.n	800ff16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff0e:	f043 0202 	orr.w	r2, r3, #2
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ff16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff1a:	f003 0302 	and.w	r3, r3, #2
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d00b      	beq.n	800ff3a <HAL_UART_IRQHandler+0xf6>
 800ff22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ff26:	f003 0301 	and.w	r3, r3, #1
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d005      	beq.n	800ff3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff32:	f043 0204 	orr.w	r2, r3, #4
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ff3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff3e:	f003 0308 	and.w	r3, r3, #8
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d011      	beq.n	800ff6a <HAL_UART_IRQHandler+0x126>
 800ff46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff4a:	f003 0320 	and.w	r3, r3, #32
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d105      	bne.n	800ff5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ff52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ff56:	f003 0301 	and.w	r3, r3, #1
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d005      	beq.n	800ff6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff62:	f043 0208 	orr.w	r2, r3, #8
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	f000 81ed 	beq.w	801034e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ff74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff78:	f003 0320 	and.w	r3, r3, #32
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d008      	beq.n	800ff92 <HAL_UART_IRQHandler+0x14e>
 800ff80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff84:	f003 0320 	and.w	r3, r3, #32
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d002      	beq.n	800ff92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f000 fd0a 	bl	80109a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	695b      	ldr	r3, [r3, #20]
 800ff98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff9c:	2b40      	cmp	r3, #64	; 0x40
 800ff9e:	bf0c      	ite	eq
 800ffa0:	2301      	moveq	r3, #1
 800ffa2:	2300      	movne	r3, #0
 800ffa4:	b2db      	uxtb	r3, r3
 800ffa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffae:	f003 0308 	and.w	r3, r3, #8
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d103      	bne.n	800ffbe <HAL_UART_IRQHandler+0x17a>
 800ffb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d04f      	beq.n	801005e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f000 fc12 	bl	80107e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	695b      	ldr	r3, [r3, #20]
 800ffca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffce:	2b40      	cmp	r3, #64	; 0x40
 800ffd0:	d141      	bne.n	8010056 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	3314      	adds	r3, #20
 800ffd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ffe0:	e853 3f00 	ldrex	r3, [r3]
 800ffe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ffe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ffec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	3314      	adds	r3, #20
 800fffa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800fffe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010002:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010006:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801000a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801000e:	e841 2300 	strex	r3, r2, [r1]
 8010012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801001a:	2b00      	cmp	r3, #0
 801001c:	d1d9      	bne.n	800ffd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010022:	2b00      	cmp	r3, #0
 8010024:	d013      	beq.n	801004e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801002a:	4a7d      	ldr	r2, [pc, #500]	; (8010220 <HAL_UART_IRQHandler+0x3dc>)
 801002c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010032:	4618      	mov	r0, r3
 8010034:	f7fa f8fc 	bl	800a230 <HAL_DMA_Abort_IT>
 8010038:	4603      	mov	r3, r0
 801003a:	2b00      	cmp	r3, #0
 801003c:	d016      	beq.n	801006c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010048:	4610      	mov	r0, r2
 801004a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801004c:	e00e      	b.n	801006c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f000 f99a 	bl	8010388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010054:	e00a      	b.n	801006c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f000 f996 	bl	8010388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801005c:	e006      	b.n	801006c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f000 f992 	bl	8010388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2200      	movs	r2, #0
 8010068:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801006a:	e170      	b.n	801034e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801006c:	bf00      	nop
    return;
 801006e:	e16e      	b.n	801034e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010074:	2b01      	cmp	r3, #1
 8010076:	f040 814a 	bne.w	801030e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801007a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801007e:	f003 0310 	and.w	r3, r3, #16
 8010082:	2b00      	cmp	r3, #0
 8010084:	f000 8143 	beq.w	801030e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8010088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801008c:	f003 0310 	and.w	r3, r3, #16
 8010090:	2b00      	cmp	r3, #0
 8010092:	f000 813c 	beq.w	801030e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010096:	2300      	movs	r3, #0
 8010098:	60bb      	str	r3, [r7, #8]
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	60bb      	str	r3, [r7, #8]
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	685b      	ldr	r3, [r3, #4]
 80100a8:	60bb      	str	r3, [r7, #8]
 80100aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	695b      	ldr	r3, [r3, #20]
 80100b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100b6:	2b40      	cmp	r3, #64	; 0x40
 80100b8:	f040 80b4 	bne.w	8010224 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	685b      	ldr	r3, [r3, #4]
 80100c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80100c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	f000 8140 	beq.w	8010352 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80100d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80100da:	429a      	cmp	r2, r3
 80100dc:	f080 8139 	bcs.w	8010352 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80100e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100ec:	69db      	ldr	r3, [r3, #28]
 80100ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80100f2:	f000 8088 	beq.w	8010206 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	330c      	adds	r3, #12
 80100fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010100:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010104:	e853 3f00 	ldrex	r3, [r3]
 8010108:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801010c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010114:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	330c      	adds	r3, #12
 801011e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010122:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801012a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801012e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010132:	e841 2300 	strex	r3, r2, [r1]
 8010136:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801013a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801013e:	2b00      	cmp	r3, #0
 8010140:	d1d9      	bne.n	80100f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	3314      	adds	r3, #20
 8010148:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801014a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801014c:	e853 3f00 	ldrex	r3, [r3]
 8010150:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010152:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010154:	f023 0301 	bic.w	r3, r3, #1
 8010158:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	3314      	adds	r3, #20
 8010162:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010166:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801016a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801016c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801016e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010172:	e841 2300 	strex	r3, r2, [r1]
 8010176:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010178:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801017a:	2b00      	cmp	r3, #0
 801017c:	d1e1      	bne.n	8010142 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	3314      	adds	r3, #20
 8010184:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010188:	e853 3f00 	ldrex	r3, [r3]
 801018c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801018e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010194:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	3314      	adds	r3, #20
 801019e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80101a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80101a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80101a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80101aa:	e841 2300 	strex	r3, r2, [r1]
 80101ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80101b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d1e3      	bne.n	801017e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2220      	movs	r2, #32
 80101ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2200      	movs	r2, #0
 80101c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	330c      	adds	r3, #12
 80101ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101ce:	e853 3f00 	ldrex	r3, [r3]
 80101d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80101d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101d6:	f023 0310 	bic.w	r3, r3, #16
 80101da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	330c      	adds	r3, #12
 80101e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80101e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80101ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80101ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80101f0:	e841 2300 	strex	r3, r2, [r1]
 80101f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80101f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d1e3      	bne.n	80101c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010200:	4618      	mov	r0, r3
 8010202:	f7f9 ffa5 	bl	800a150 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801020e:	b29b      	uxth	r3, r3
 8010210:	1ad3      	subs	r3, r2, r3
 8010212:	b29b      	uxth	r3, r3
 8010214:	4619      	mov	r1, r3
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	f000 f8c0 	bl	801039c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801021c:	e099      	b.n	8010352 <HAL_UART_IRQHandler+0x50e>
 801021e:	bf00      	nop
 8010220:	080108af 	.word	0x080108af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801022c:	b29b      	uxth	r3, r3
 801022e:	1ad3      	subs	r3, r2, r3
 8010230:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010238:	b29b      	uxth	r3, r3
 801023a:	2b00      	cmp	r3, #0
 801023c:	f000 808b 	beq.w	8010356 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8010240:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010244:	2b00      	cmp	r3, #0
 8010246:	f000 8086 	beq.w	8010356 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	330c      	adds	r3, #12
 8010250:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010254:	e853 3f00 	ldrex	r3, [r3]
 8010258:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801025a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801025c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010260:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	330c      	adds	r3, #12
 801026a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801026e:	647a      	str	r2, [r7, #68]	; 0x44
 8010270:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010272:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010274:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010276:	e841 2300 	strex	r3, r2, [r1]
 801027a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801027c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801027e:	2b00      	cmp	r3, #0
 8010280:	d1e3      	bne.n	801024a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	3314      	adds	r3, #20
 8010288:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801028a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028c:	e853 3f00 	ldrex	r3, [r3]
 8010290:	623b      	str	r3, [r7, #32]
   return(result);
 8010292:	6a3b      	ldr	r3, [r7, #32]
 8010294:	f023 0301 	bic.w	r3, r3, #1
 8010298:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	3314      	adds	r3, #20
 80102a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80102a6:	633a      	str	r2, [r7, #48]	; 0x30
 80102a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80102ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102ae:	e841 2300 	strex	r3, r2, [r1]
 80102b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80102b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d1e3      	bne.n	8010282 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2220      	movs	r2, #32
 80102be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2200      	movs	r2, #0
 80102c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	330c      	adds	r3, #12
 80102ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	e853 3f00 	ldrex	r3, [r3]
 80102d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	f023 0310 	bic.w	r3, r3, #16
 80102de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	330c      	adds	r3, #12
 80102e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80102ec:	61fa      	str	r2, [r7, #28]
 80102ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102f0:	69b9      	ldr	r1, [r7, #24]
 80102f2:	69fa      	ldr	r2, [r7, #28]
 80102f4:	e841 2300 	strex	r3, r2, [r1]
 80102f8:	617b      	str	r3, [r7, #20]
   return(result);
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d1e3      	bne.n	80102c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010300:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010304:	4619      	mov	r1, r3
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f000 f848 	bl	801039c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801030c:	e023      	b.n	8010356 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801030e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010316:	2b00      	cmp	r3, #0
 8010318:	d009      	beq.n	801032e <HAL_UART_IRQHandler+0x4ea>
 801031a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801031e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010322:	2b00      	cmp	r3, #0
 8010324:	d003      	beq.n	801032e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	f000 fad5 	bl	80108d6 <UART_Transmit_IT>
    return;
 801032c:	e014      	b.n	8010358 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801032e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010336:	2b00      	cmp	r3, #0
 8010338:	d00e      	beq.n	8010358 <HAL_UART_IRQHandler+0x514>
 801033a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801033e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010342:	2b00      	cmp	r3, #0
 8010344:	d008      	beq.n	8010358 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f000 fb15 	bl	8010976 <UART_EndTransmit_IT>
    return;
 801034c:	e004      	b.n	8010358 <HAL_UART_IRQHandler+0x514>
    return;
 801034e:	bf00      	nop
 8010350:	e002      	b.n	8010358 <HAL_UART_IRQHandler+0x514>
      return;
 8010352:	bf00      	nop
 8010354:	e000      	b.n	8010358 <HAL_UART_IRQHandler+0x514>
      return;
 8010356:	bf00      	nop
  }
}
 8010358:	37e8      	adds	r7, #232	; 0xe8
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop

08010360 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010360:	b480      	push	{r7}
 8010362:	b083      	sub	sp, #12
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8010368:	bf00      	nop
 801036a:	370c      	adds	r7, #12
 801036c:	46bd      	mov	sp, r7
 801036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010372:	4770      	bx	lr

08010374 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010374:	b480      	push	{r7}
 8010376:	b083      	sub	sp, #12
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801037c:	bf00      	nop
 801037e:	370c      	adds	r7, #12
 8010380:	46bd      	mov	sp, r7
 8010382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010386:	4770      	bx	lr

08010388 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010388:	b480      	push	{r7}
 801038a:	b083      	sub	sp, #12
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010390:	bf00      	nop
 8010392:	370c      	adds	r7, #12
 8010394:	46bd      	mov	sp, r7
 8010396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039a:	4770      	bx	lr

0801039c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801039c:	b480      	push	{r7}
 801039e:	b083      	sub	sp, #12
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
 80103a4:	460b      	mov	r3, r1
 80103a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80103a8:	bf00      	nop
 80103aa:	370c      	adds	r7, #12
 80103ac:	46bd      	mov	sp, r7
 80103ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b2:	4770      	bx	lr

080103b4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b090      	sub	sp, #64	; 0x40
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d137      	bne.n	8010440 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80103d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103d2:	2200      	movs	r2, #0
 80103d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80103d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	3314      	adds	r3, #20
 80103dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e0:	e853 3f00 	ldrex	r3, [r3]
 80103e4:	623b      	str	r3, [r7, #32]
   return(result);
 80103e6:	6a3b      	ldr	r3, [r7, #32]
 80103e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80103ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	3314      	adds	r3, #20
 80103f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103f6:	633a      	str	r2, [r7, #48]	; 0x30
 80103f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80103fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103fe:	e841 2300 	strex	r3, r2, [r1]
 8010402:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010406:	2b00      	cmp	r3, #0
 8010408:	d1e5      	bne.n	80103d6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801040a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	330c      	adds	r3, #12
 8010410:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	e853 3f00 	ldrex	r3, [r3]
 8010418:	60fb      	str	r3, [r7, #12]
   return(result);
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010420:	637b      	str	r3, [r7, #52]	; 0x34
 8010422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	330c      	adds	r3, #12
 8010428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801042a:	61fa      	str	r2, [r7, #28]
 801042c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801042e:	69b9      	ldr	r1, [r7, #24]
 8010430:	69fa      	ldr	r2, [r7, #28]
 8010432:	e841 2300 	strex	r3, r2, [r1]
 8010436:	617b      	str	r3, [r7, #20]
   return(result);
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d1e5      	bne.n	801040a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801043e:	e002      	b.n	8010446 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8010440:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010442:	f7f1 ff5b 	bl	80022fc <HAL_UART_TxCpltCallback>
}
 8010446:	bf00      	nop
 8010448:	3740      	adds	r7, #64	; 0x40
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}

0801044e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801044e:	b580      	push	{r7, lr}
 8010450:	b084      	sub	sp, #16
 8010452:	af00      	add	r7, sp, #0
 8010454:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801045a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801045c:	68f8      	ldr	r0, [r7, #12]
 801045e:	f7ff ff7f 	bl	8010360 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010462:	bf00      	nop
 8010464:	3710      	adds	r7, #16
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}

0801046a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801046a:	b580      	push	{r7, lr}
 801046c:	b09c      	sub	sp, #112	; 0x70
 801046e:	af00      	add	r7, sp, #0
 8010470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010476:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010482:	2b00      	cmp	r3, #0
 8010484:	d172      	bne.n	801056c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8010486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010488:	2200      	movs	r2, #0
 801048a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801048c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	330c      	adds	r3, #12
 8010492:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010496:	e853 3f00 	ldrex	r3, [r3]
 801049a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801049c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801049e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80104a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80104a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	330c      	adds	r3, #12
 80104aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80104ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80104ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80104b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80104b4:	e841 2300 	strex	r3, r2, [r1]
 80104b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80104ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d1e5      	bne.n	801048c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	3314      	adds	r3, #20
 80104c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ca:	e853 3f00 	ldrex	r3, [r3]
 80104ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80104d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104d2:	f023 0301 	bic.w	r3, r3, #1
 80104d6:	667b      	str	r3, [r7, #100]	; 0x64
 80104d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	3314      	adds	r3, #20
 80104de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80104e0:	647a      	str	r2, [r7, #68]	; 0x44
 80104e2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80104e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80104e8:	e841 2300 	strex	r3, r2, [r1]
 80104ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80104ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d1e5      	bne.n	80104c0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80104f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	3314      	adds	r3, #20
 80104fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104fe:	e853 3f00 	ldrex	r3, [r3]
 8010502:	623b      	str	r3, [r7, #32]
   return(result);
 8010504:	6a3b      	ldr	r3, [r7, #32]
 8010506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801050a:	663b      	str	r3, [r7, #96]	; 0x60
 801050c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	3314      	adds	r3, #20
 8010512:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010514:	633a      	str	r2, [r7, #48]	; 0x30
 8010516:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010518:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801051a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801051c:	e841 2300 	strex	r3, r2, [r1]
 8010520:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010524:	2b00      	cmp	r3, #0
 8010526:	d1e5      	bne.n	80104f4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801052a:	2220      	movs	r2, #32
 801052c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010534:	2b01      	cmp	r3, #1
 8010536:	d119      	bne.n	801056c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	330c      	adds	r3, #12
 801053e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010540:	693b      	ldr	r3, [r7, #16]
 8010542:	e853 3f00 	ldrex	r3, [r3]
 8010546:	60fb      	str	r3, [r7, #12]
   return(result);
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	f023 0310 	bic.w	r3, r3, #16
 801054e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	330c      	adds	r3, #12
 8010556:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010558:	61fa      	str	r2, [r7, #28]
 801055a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801055c:	69b9      	ldr	r1, [r7, #24]
 801055e:	69fa      	ldr	r2, [r7, #28]
 8010560:	e841 2300 	strex	r3, r2, [r1]
 8010564:	617b      	str	r3, [r7, #20]
   return(result);
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d1e5      	bne.n	8010538 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801056c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801056e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010570:	2b01      	cmp	r3, #1
 8010572:	d106      	bne.n	8010582 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010576:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010578:	4619      	mov	r1, r3
 801057a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801057c:	f7ff ff0e 	bl	801039c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010580:	e002      	b.n	8010588 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8010582:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010584:	f7f1 ff62 	bl	800244c <HAL_UART_RxCpltCallback>
}
 8010588:	bf00      	nop
 801058a:	3770      	adds	r7, #112	; 0x70
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}

08010590 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b084      	sub	sp, #16
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801059c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105a2:	2b01      	cmp	r3, #1
 80105a4:	d108      	bne.n	80105b8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80105aa:	085b      	lsrs	r3, r3, #1
 80105ac:	b29b      	uxth	r3, r3
 80105ae:	4619      	mov	r1, r3
 80105b0:	68f8      	ldr	r0, [r7, #12]
 80105b2:	f7ff fef3 	bl	801039c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80105b6:	e002      	b.n	80105be <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80105b8:	68f8      	ldr	r0, [r7, #12]
 80105ba:	f7ff fedb 	bl	8010374 <HAL_UART_RxHalfCpltCallback>
}
 80105be:	bf00      	nop
 80105c0:	3710      	adds	r7, #16
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}

080105c6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80105c6:	b580      	push	{r7, lr}
 80105c8:	b084      	sub	sp, #16
 80105ca:	af00      	add	r7, sp, #0
 80105cc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80105ce:	2300      	movs	r3, #0
 80105d0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105d6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	695b      	ldr	r3, [r3, #20]
 80105de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80105e2:	2b80      	cmp	r3, #128	; 0x80
 80105e4:	bf0c      	ite	eq
 80105e6:	2301      	moveq	r3, #1
 80105e8:	2300      	movne	r3, #0
 80105ea:	b2db      	uxtb	r3, r3
 80105ec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80105f4:	b2db      	uxtb	r3, r3
 80105f6:	2b21      	cmp	r3, #33	; 0x21
 80105f8:	d108      	bne.n	801060c <UART_DMAError+0x46>
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d005      	beq.n	801060c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	2200      	movs	r2, #0
 8010604:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8010606:	68b8      	ldr	r0, [r7, #8]
 8010608:	f000 f8c6 	bl	8010798 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	695b      	ldr	r3, [r3, #20]
 8010612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010616:	2b40      	cmp	r3, #64	; 0x40
 8010618:	bf0c      	ite	eq
 801061a:	2301      	moveq	r3, #1
 801061c:	2300      	movne	r3, #0
 801061e:	b2db      	uxtb	r3, r3
 8010620:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010628:	b2db      	uxtb	r3, r3
 801062a:	2b22      	cmp	r3, #34	; 0x22
 801062c:	d108      	bne.n	8010640 <UART_DMAError+0x7a>
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d005      	beq.n	8010640 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	2200      	movs	r2, #0
 8010638:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801063a:	68b8      	ldr	r0, [r7, #8]
 801063c:	f000 f8d4 	bl	80107e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010644:	f043 0210 	orr.w	r2, r3, #16
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801064c:	68b8      	ldr	r0, [r7, #8]
 801064e:	f7ff fe9b 	bl	8010388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010652:	bf00      	nop
 8010654:	3710      	adds	r7, #16
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}
	...

0801065c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b098      	sub	sp, #96	; 0x60
 8010660:	af00      	add	r7, sp, #0
 8010662:	60f8      	str	r0, [r7, #12]
 8010664:	60b9      	str	r1, [r7, #8]
 8010666:	4613      	mov	r3, r2
 8010668:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801066a:	68ba      	ldr	r2, [r7, #8]
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	88fa      	ldrh	r2, [r7, #6]
 8010674:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	2200      	movs	r2, #0
 801067a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	2222      	movs	r2, #34	; 0x22
 8010680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010688:	4a40      	ldr	r2, [pc, #256]	; (801078c <UART_Start_Receive_DMA+0x130>)
 801068a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010690:	4a3f      	ldr	r2, [pc, #252]	; (8010790 <UART_Start_Receive_DMA+0x134>)
 8010692:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010698:	4a3e      	ldr	r2, [pc, #248]	; (8010794 <UART_Start_Receive_DMA+0x138>)
 801069a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106a0:	2200      	movs	r2, #0
 80106a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80106a4:	f107 0308 	add.w	r3, r7, #8
 80106a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	3304      	adds	r3, #4
 80106b4:	4619      	mov	r1, r3
 80106b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106b8:	681a      	ldr	r2, [r3, #0]
 80106ba:	88fb      	ldrh	r3, [r7, #6]
 80106bc:	f7f9 fcf0 	bl	800a0a0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80106c0:	2300      	movs	r3, #0
 80106c2:	613b      	str	r3, [r7, #16]
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	613b      	str	r3, [r7, #16]
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	685b      	ldr	r3, [r3, #4]
 80106d2:	613b      	str	r3, [r7, #16]
 80106d4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	2200      	movs	r2, #0
 80106da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	691b      	ldr	r3, [r3, #16]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d019      	beq.n	801071a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	330c      	adds	r3, #12
 80106ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106f0:	e853 3f00 	ldrex	r3, [r3]
 80106f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80106f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80106fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	330c      	adds	r3, #12
 8010704:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010706:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010708:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801070a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801070c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801070e:	e841 2300 	strex	r3, r2, [r1]
 8010712:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010716:	2b00      	cmp	r3, #0
 8010718:	d1e5      	bne.n	80106e6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	3314      	adds	r3, #20
 8010720:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010724:	e853 3f00 	ldrex	r3, [r3]
 8010728:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801072a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801072c:	f043 0301 	orr.w	r3, r3, #1
 8010730:	657b      	str	r3, [r7, #84]	; 0x54
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	3314      	adds	r3, #20
 8010738:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801073a:	63ba      	str	r2, [r7, #56]	; 0x38
 801073c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801073e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010742:	e841 2300 	strex	r3, r2, [r1]
 8010746:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801074a:	2b00      	cmp	r3, #0
 801074c:	d1e5      	bne.n	801071a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	3314      	adds	r3, #20
 8010754:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010756:	69bb      	ldr	r3, [r7, #24]
 8010758:	e853 3f00 	ldrex	r3, [r3]
 801075c:	617b      	str	r3, [r7, #20]
   return(result);
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010764:	653b      	str	r3, [r7, #80]	; 0x50
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	3314      	adds	r3, #20
 801076c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801076e:	627a      	str	r2, [r7, #36]	; 0x24
 8010770:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010772:	6a39      	ldr	r1, [r7, #32]
 8010774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010776:	e841 2300 	strex	r3, r2, [r1]
 801077a:	61fb      	str	r3, [r7, #28]
   return(result);
 801077c:	69fb      	ldr	r3, [r7, #28]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d1e5      	bne.n	801074e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8010782:	2300      	movs	r3, #0
}
 8010784:	4618      	mov	r0, r3
 8010786:	3760      	adds	r7, #96	; 0x60
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}
 801078c:	0801046b 	.word	0x0801046b
 8010790:	08010591 	.word	0x08010591
 8010794:	080105c7 	.word	0x080105c7

08010798 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010798:	b480      	push	{r7}
 801079a:	b089      	sub	sp, #36	; 0x24
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	330c      	adds	r3, #12
 80107a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	e853 3f00 	ldrex	r3, [r3]
 80107ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80107b6:	61fb      	str	r3, [r7, #28]
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	330c      	adds	r3, #12
 80107be:	69fa      	ldr	r2, [r7, #28]
 80107c0:	61ba      	str	r2, [r7, #24]
 80107c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107c4:	6979      	ldr	r1, [r7, #20]
 80107c6:	69ba      	ldr	r2, [r7, #24]
 80107c8:	e841 2300 	strex	r3, r2, [r1]
 80107cc:	613b      	str	r3, [r7, #16]
   return(result);
 80107ce:	693b      	ldr	r3, [r7, #16]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d1e5      	bne.n	80107a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2220      	movs	r2, #32
 80107d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80107dc:	bf00      	nop
 80107de:	3724      	adds	r7, #36	; 0x24
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr

080107e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b095      	sub	sp, #84	; 0x54
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	330c      	adds	r3, #12
 80107f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107fa:	e853 3f00 	ldrex	r3, [r3]
 80107fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010802:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	330c      	adds	r3, #12
 801080e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010810:	643a      	str	r2, [r7, #64]	; 0x40
 8010812:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010814:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010816:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010818:	e841 2300 	strex	r3, r2, [r1]
 801081c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801081e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010820:	2b00      	cmp	r3, #0
 8010822:	d1e5      	bne.n	80107f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	3314      	adds	r3, #20
 801082a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801082c:	6a3b      	ldr	r3, [r7, #32]
 801082e:	e853 3f00 	ldrex	r3, [r3]
 8010832:	61fb      	str	r3, [r7, #28]
   return(result);
 8010834:	69fb      	ldr	r3, [r7, #28]
 8010836:	f023 0301 	bic.w	r3, r3, #1
 801083a:	64bb      	str	r3, [r7, #72]	; 0x48
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	3314      	adds	r3, #20
 8010842:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010844:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010846:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801084a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801084c:	e841 2300 	strex	r3, r2, [r1]
 8010850:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010854:	2b00      	cmp	r3, #0
 8010856:	d1e5      	bne.n	8010824 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801085c:	2b01      	cmp	r3, #1
 801085e:	d119      	bne.n	8010894 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	330c      	adds	r3, #12
 8010866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	e853 3f00 	ldrex	r3, [r3]
 801086e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	f023 0310 	bic.w	r3, r3, #16
 8010876:	647b      	str	r3, [r7, #68]	; 0x44
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	330c      	adds	r3, #12
 801087e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010880:	61ba      	str	r2, [r7, #24]
 8010882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010884:	6979      	ldr	r1, [r7, #20]
 8010886:	69ba      	ldr	r2, [r7, #24]
 8010888:	e841 2300 	strex	r3, r2, [r1]
 801088c:	613b      	str	r3, [r7, #16]
   return(result);
 801088e:	693b      	ldr	r3, [r7, #16]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d1e5      	bne.n	8010860 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2220      	movs	r2, #32
 8010898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2200      	movs	r2, #0
 80108a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80108a2:	bf00      	nop
 80108a4:	3754      	adds	r7, #84	; 0x54
 80108a6:	46bd      	mov	sp, r7
 80108a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ac:	4770      	bx	lr

080108ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80108ae:	b580      	push	{r7, lr}
 80108b0:	b084      	sub	sp, #16
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	2200      	movs	r2, #0
 80108c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	2200      	movs	r2, #0
 80108c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80108c8:	68f8      	ldr	r0, [r7, #12]
 80108ca:	f7ff fd5d 	bl	8010388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80108ce:	bf00      	nop
 80108d0:	3710      	adds	r7, #16
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}

080108d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80108d6:	b480      	push	{r7}
 80108d8:	b085      	sub	sp, #20
 80108da:	af00      	add	r7, sp, #0
 80108dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80108e4:	b2db      	uxtb	r3, r3
 80108e6:	2b21      	cmp	r3, #33	; 0x21
 80108e8:	d13e      	bne.n	8010968 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	689b      	ldr	r3, [r3, #8]
 80108ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80108f2:	d114      	bne.n	801091e <UART_Transmit_IT+0x48>
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	691b      	ldr	r3, [r3, #16]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d110      	bne.n	801091e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6a1b      	ldr	r3, [r3, #32]
 8010900:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	881b      	ldrh	r3, [r3, #0]
 8010906:	461a      	mov	r2, r3
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010910:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	6a1b      	ldr	r3, [r3, #32]
 8010916:	1c9a      	adds	r2, r3, #2
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	621a      	str	r2, [r3, #32]
 801091c:	e008      	b.n	8010930 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6a1b      	ldr	r3, [r3, #32]
 8010922:	1c59      	adds	r1, r3, #1
 8010924:	687a      	ldr	r2, [r7, #4]
 8010926:	6211      	str	r1, [r2, #32]
 8010928:	781a      	ldrb	r2, [r3, #0]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010934:	b29b      	uxth	r3, r3
 8010936:	3b01      	subs	r3, #1
 8010938:	b29b      	uxth	r3, r3
 801093a:	687a      	ldr	r2, [r7, #4]
 801093c:	4619      	mov	r1, r3
 801093e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010940:	2b00      	cmp	r3, #0
 8010942:	d10f      	bne.n	8010964 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	68da      	ldr	r2, [r3, #12]
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010952:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	68da      	ldr	r2, [r3, #12]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010962:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010964:	2300      	movs	r3, #0
 8010966:	e000      	b.n	801096a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010968:	2302      	movs	r3, #2
  }
}
 801096a:	4618      	mov	r0, r3
 801096c:	3714      	adds	r7, #20
 801096e:	46bd      	mov	sp, r7
 8010970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010974:	4770      	bx	lr

08010976 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010976:	b580      	push	{r7, lr}
 8010978:	b082      	sub	sp, #8
 801097a:	af00      	add	r7, sp, #0
 801097c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	68da      	ldr	r2, [r3, #12]
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801098c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2220      	movs	r2, #32
 8010992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f7f1 fcb0 	bl	80022fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801099c:	2300      	movs	r3, #0
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3708      	adds	r7, #8
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}

080109a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80109a6:	b580      	push	{r7, lr}
 80109a8:	b08c      	sub	sp, #48	; 0x30
 80109aa:	af00      	add	r7, sp, #0
 80109ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80109b4:	b2db      	uxtb	r3, r3
 80109b6:	2b22      	cmp	r3, #34	; 0x22
 80109b8:	f040 80ab 	bne.w	8010b12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	689b      	ldr	r3, [r3, #8]
 80109c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80109c4:	d117      	bne.n	80109f6 <UART_Receive_IT+0x50>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	691b      	ldr	r3, [r3, #16]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d113      	bne.n	80109f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80109ce:	2300      	movs	r3, #0
 80109d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	685b      	ldr	r3, [r3, #4]
 80109de:	b29b      	uxth	r3, r3
 80109e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109e4:	b29a      	uxth	r2, r3
 80109e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109ee:	1c9a      	adds	r2, r3, #2
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	629a      	str	r2, [r3, #40]	; 0x28
 80109f4:	e026      	b.n	8010a44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80109fc:	2300      	movs	r3, #0
 80109fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	689b      	ldr	r3, [r3, #8]
 8010a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a08:	d007      	beq.n	8010a1a <UART_Receive_IT+0x74>
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	689b      	ldr	r3, [r3, #8]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d10a      	bne.n	8010a28 <UART_Receive_IT+0x82>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	691b      	ldr	r3, [r3, #16]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d106      	bne.n	8010a28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	685b      	ldr	r3, [r3, #4]
 8010a20:	b2da      	uxtb	r2, r3
 8010a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a24:	701a      	strb	r2, [r3, #0]
 8010a26:	e008      	b.n	8010a3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	685b      	ldr	r3, [r3, #4]
 8010a2e:	b2db      	uxtb	r3, r3
 8010a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a34:	b2da      	uxtb	r2, r3
 8010a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a3e:	1c5a      	adds	r2, r3, #1
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010a48:	b29b      	uxth	r3, r3
 8010a4a:	3b01      	subs	r3, #1
 8010a4c:	b29b      	uxth	r3, r3
 8010a4e:	687a      	ldr	r2, [r7, #4]
 8010a50:	4619      	mov	r1, r3
 8010a52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d15a      	bne.n	8010b0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	68da      	ldr	r2, [r3, #12]
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	f022 0220 	bic.w	r2, r2, #32
 8010a66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	68da      	ldr	r2, [r3, #12]
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010a76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	695a      	ldr	r2, [r3, #20]
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	f022 0201 	bic.w	r2, r2, #1
 8010a86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2220      	movs	r2, #32
 8010a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a94:	2b01      	cmp	r3, #1
 8010a96:	d135      	bne.n	8010b04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	330c      	adds	r3, #12
 8010aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aa6:	697b      	ldr	r3, [r7, #20]
 8010aa8:	e853 3f00 	ldrex	r3, [r3]
 8010aac:	613b      	str	r3, [r7, #16]
   return(result);
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	f023 0310 	bic.w	r3, r3, #16
 8010ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	330c      	adds	r3, #12
 8010abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010abe:	623a      	str	r2, [r7, #32]
 8010ac0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ac2:	69f9      	ldr	r1, [r7, #28]
 8010ac4:	6a3a      	ldr	r2, [r7, #32]
 8010ac6:	e841 2300 	strex	r3, r2, [r1]
 8010aca:	61bb      	str	r3, [r7, #24]
   return(result);
 8010acc:	69bb      	ldr	r3, [r7, #24]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d1e5      	bne.n	8010a9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	f003 0310 	and.w	r3, r3, #16
 8010adc:	2b10      	cmp	r3, #16
 8010ade:	d10a      	bne.n	8010af6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	60fb      	str	r3, [r7, #12]
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	60fb      	str	r3, [r7, #12]
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	60fb      	str	r3, [r7, #12]
 8010af4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010afa:	4619      	mov	r1, r3
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f7ff fc4d 	bl	801039c <HAL_UARTEx_RxEventCallback>
 8010b02:	e002      	b.n	8010b0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	f7f1 fca1 	bl	800244c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	e002      	b.n	8010b14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	e000      	b.n	8010b14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8010b12:	2302      	movs	r3, #2
  }
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	3730      	adds	r7, #48	; 0x30
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bd80      	pop	{r7, pc}

08010b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010b20:	b0c0      	sub	sp, #256	; 0x100
 8010b22:	af00      	add	r7, sp, #0
 8010b24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	691b      	ldr	r3, [r3, #16]
 8010b30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8010b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010b38:	68d9      	ldr	r1, [r3, #12]
 8010b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010b3e:	681a      	ldr	r2, [r3, #0]
 8010b40:	ea40 0301 	orr.w	r3, r0, r1
 8010b44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010b4a:	689a      	ldr	r2, [r3, #8]
 8010b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010b50:	691b      	ldr	r3, [r3, #16]
 8010b52:	431a      	orrs	r2, r3
 8010b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010b58:	695b      	ldr	r3, [r3, #20]
 8010b5a:	431a      	orrs	r2, r3
 8010b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010b60:	69db      	ldr	r3, [r3, #28]
 8010b62:	4313      	orrs	r3, r2
 8010b64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8010b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	68db      	ldr	r3, [r3, #12]
 8010b70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8010b74:	f021 010c 	bic.w	r1, r1, #12
 8010b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010b7c:	681a      	ldr	r2, [r3, #0]
 8010b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010b82:	430b      	orrs	r3, r1
 8010b84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	695b      	ldr	r3, [r3, #20]
 8010b8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8010b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010b96:	6999      	ldr	r1, [r3, #24]
 8010b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010b9c:	681a      	ldr	r2, [r3, #0]
 8010b9e:	ea40 0301 	orr.w	r3, r0, r1
 8010ba2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	4b8f      	ldr	r3, [pc, #572]	; (8010de8 <UART_SetConfig+0x2cc>)
 8010bac:	429a      	cmp	r2, r3
 8010bae:	d005      	beq.n	8010bbc <UART_SetConfig+0xa0>
 8010bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010bb4:	681a      	ldr	r2, [r3, #0]
 8010bb6:	4b8d      	ldr	r3, [pc, #564]	; (8010dec <UART_SetConfig+0x2d0>)
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	d104      	bne.n	8010bc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010bbc:	f7fc f880 	bl	800ccc0 <HAL_RCC_GetPCLK2Freq>
 8010bc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8010bc4:	e003      	b.n	8010bce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010bc6:	f7fc f867 	bl	800cc98 <HAL_RCC_GetPCLK1Freq>
 8010bca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010bd2:	69db      	ldr	r3, [r3, #28]
 8010bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010bd8:	f040 810c 	bne.w	8010df4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010be0:	2200      	movs	r2, #0
 8010be2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010be6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8010bea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8010bee:	4622      	mov	r2, r4
 8010bf0:	462b      	mov	r3, r5
 8010bf2:	1891      	adds	r1, r2, r2
 8010bf4:	65b9      	str	r1, [r7, #88]	; 0x58
 8010bf6:	415b      	adcs	r3, r3
 8010bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010bfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8010bfe:	4621      	mov	r1, r4
 8010c00:	eb12 0801 	adds.w	r8, r2, r1
 8010c04:	4629      	mov	r1, r5
 8010c06:	eb43 0901 	adc.w	r9, r3, r1
 8010c0a:	f04f 0200 	mov.w	r2, #0
 8010c0e:	f04f 0300 	mov.w	r3, #0
 8010c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010c1e:	4690      	mov	r8, r2
 8010c20:	4699      	mov	r9, r3
 8010c22:	4623      	mov	r3, r4
 8010c24:	eb18 0303 	adds.w	r3, r8, r3
 8010c28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010c2c:	462b      	mov	r3, r5
 8010c2e:	eb49 0303 	adc.w	r3, r9, r3
 8010c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010c3a:	685b      	ldr	r3, [r3, #4]
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010c42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8010c46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8010c4a:	460b      	mov	r3, r1
 8010c4c:	18db      	adds	r3, r3, r3
 8010c4e:	653b      	str	r3, [r7, #80]	; 0x50
 8010c50:	4613      	mov	r3, r2
 8010c52:	eb42 0303 	adc.w	r3, r2, r3
 8010c56:	657b      	str	r3, [r7, #84]	; 0x54
 8010c58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010c5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8010c60:	f7ef ffa2 	bl	8000ba8 <__aeabi_uldivmod>
 8010c64:	4602      	mov	r2, r0
 8010c66:	460b      	mov	r3, r1
 8010c68:	4b61      	ldr	r3, [pc, #388]	; (8010df0 <UART_SetConfig+0x2d4>)
 8010c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8010c6e:	095b      	lsrs	r3, r3, #5
 8010c70:	011c      	lsls	r4, r3, #4
 8010c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010c76:	2200      	movs	r2, #0
 8010c78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010c7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8010c80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8010c84:	4642      	mov	r2, r8
 8010c86:	464b      	mov	r3, r9
 8010c88:	1891      	adds	r1, r2, r2
 8010c8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8010c8c:	415b      	adcs	r3, r3
 8010c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010c90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8010c94:	4641      	mov	r1, r8
 8010c96:	eb12 0a01 	adds.w	sl, r2, r1
 8010c9a:	4649      	mov	r1, r9
 8010c9c:	eb43 0b01 	adc.w	fp, r3, r1
 8010ca0:	f04f 0200 	mov.w	r2, #0
 8010ca4:	f04f 0300 	mov.w	r3, #0
 8010ca8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010cac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010cb4:	4692      	mov	sl, r2
 8010cb6:	469b      	mov	fp, r3
 8010cb8:	4643      	mov	r3, r8
 8010cba:	eb1a 0303 	adds.w	r3, sl, r3
 8010cbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010cc2:	464b      	mov	r3, r9
 8010cc4:	eb4b 0303 	adc.w	r3, fp, r3
 8010cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010cd0:	685b      	ldr	r3, [r3, #4]
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010cd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8010cdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8010ce0:	460b      	mov	r3, r1
 8010ce2:	18db      	adds	r3, r3, r3
 8010ce4:	643b      	str	r3, [r7, #64]	; 0x40
 8010ce6:	4613      	mov	r3, r2
 8010ce8:	eb42 0303 	adc.w	r3, r2, r3
 8010cec:	647b      	str	r3, [r7, #68]	; 0x44
 8010cee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010cf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8010cf6:	f7ef ff57 	bl	8000ba8 <__aeabi_uldivmod>
 8010cfa:	4602      	mov	r2, r0
 8010cfc:	460b      	mov	r3, r1
 8010cfe:	4611      	mov	r1, r2
 8010d00:	4b3b      	ldr	r3, [pc, #236]	; (8010df0 <UART_SetConfig+0x2d4>)
 8010d02:	fba3 2301 	umull	r2, r3, r3, r1
 8010d06:	095b      	lsrs	r3, r3, #5
 8010d08:	2264      	movs	r2, #100	; 0x64
 8010d0a:	fb02 f303 	mul.w	r3, r2, r3
 8010d0e:	1acb      	subs	r3, r1, r3
 8010d10:	00db      	lsls	r3, r3, #3
 8010d12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8010d16:	4b36      	ldr	r3, [pc, #216]	; (8010df0 <UART_SetConfig+0x2d4>)
 8010d18:	fba3 2302 	umull	r2, r3, r3, r2
 8010d1c:	095b      	lsrs	r3, r3, #5
 8010d1e:	005b      	lsls	r3, r3, #1
 8010d20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010d24:	441c      	add	r4, r3
 8010d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010d30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010d34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8010d38:	4642      	mov	r2, r8
 8010d3a:	464b      	mov	r3, r9
 8010d3c:	1891      	adds	r1, r2, r2
 8010d3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8010d40:	415b      	adcs	r3, r3
 8010d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010d48:	4641      	mov	r1, r8
 8010d4a:	1851      	adds	r1, r2, r1
 8010d4c:	6339      	str	r1, [r7, #48]	; 0x30
 8010d4e:	4649      	mov	r1, r9
 8010d50:	414b      	adcs	r3, r1
 8010d52:	637b      	str	r3, [r7, #52]	; 0x34
 8010d54:	f04f 0200 	mov.w	r2, #0
 8010d58:	f04f 0300 	mov.w	r3, #0
 8010d5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8010d60:	4659      	mov	r1, fp
 8010d62:	00cb      	lsls	r3, r1, #3
 8010d64:	4651      	mov	r1, sl
 8010d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010d6a:	4651      	mov	r1, sl
 8010d6c:	00ca      	lsls	r2, r1, #3
 8010d6e:	4610      	mov	r0, r2
 8010d70:	4619      	mov	r1, r3
 8010d72:	4603      	mov	r3, r0
 8010d74:	4642      	mov	r2, r8
 8010d76:	189b      	adds	r3, r3, r2
 8010d78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010d7c:	464b      	mov	r3, r9
 8010d7e:	460a      	mov	r2, r1
 8010d80:	eb42 0303 	adc.w	r3, r2, r3
 8010d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	2200      	movs	r2, #0
 8010d90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010d94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8010d98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8010d9c:	460b      	mov	r3, r1
 8010d9e:	18db      	adds	r3, r3, r3
 8010da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8010da2:	4613      	mov	r3, r2
 8010da4:	eb42 0303 	adc.w	r3, r2, r3
 8010da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010daa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010dae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8010db2:	f7ef fef9 	bl	8000ba8 <__aeabi_uldivmod>
 8010db6:	4602      	mov	r2, r0
 8010db8:	460b      	mov	r3, r1
 8010dba:	4b0d      	ldr	r3, [pc, #52]	; (8010df0 <UART_SetConfig+0x2d4>)
 8010dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8010dc0:	095b      	lsrs	r3, r3, #5
 8010dc2:	2164      	movs	r1, #100	; 0x64
 8010dc4:	fb01 f303 	mul.w	r3, r1, r3
 8010dc8:	1ad3      	subs	r3, r2, r3
 8010dca:	00db      	lsls	r3, r3, #3
 8010dcc:	3332      	adds	r3, #50	; 0x32
 8010dce:	4a08      	ldr	r2, [pc, #32]	; (8010df0 <UART_SetConfig+0x2d4>)
 8010dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8010dd4:	095b      	lsrs	r3, r3, #5
 8010dd6:	f003 0207 	and.w	r2, r3, #7
 8010dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	4422      	add	r2, r4
 8010de2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010de4:	e105      	b.n	8010ff2 <UART_SetConfig+0x4d6>
 8010de6:	bf00      	nop
 8010de8:	40011000 	.word	0x40011000
 8010dec:	40011400 	.word	0x40011400
 8010df0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010df8:	2200      	movs	r2, #0
 8010dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010dfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010e02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8010e06:	4642      	mov	r2, r8
 8010e08:	464b      	mov	r3, r9
 8010e0a:	1891      	adds	r1, r2, r2
 8010e0c:	6239      	str	r1, [r7, #32]
 8010e0e:	415b      	adcs	r3, r3
 8010e10:	627b      	str	r3, [r7, #36]	; 0x24
 8010e12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010e16:	4641      	mov	r1, r8
 8010e18:	1854      	adds	r4, r2, r1
 8010e1a:	4649      	mov	r1, r9
 8010e1c:	eb43 0501 	adc.w	r5, r3, r1
 8010e20:	f04f 0200 	mov.w	r2, #0
 8010e24:	f04f 0300 	mov.w	r3, #0
 8010e28:	00eb      	lsls	r3, r5, #3
 8010e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010e2e:	00e2      	lsls	r2, r4, #3
 8010e30:	4614      	mov	r4, r2
 8010e32:	461d      	mov	r5, r3
 8010e34:	4643      	mov	r3, r8
 8010e36:	18e3      	adds	r3, r4, r3
 8010e38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010e3c:	464b      	mov	r3, r9
 8010e3e:	eb45 0303 	adc.w	r3, r5, r3
 8010e42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010e4a:	685b      	ldr	r3, [r3, #4]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010e52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010e56:	f04f 0200 	mov.w	r2, #0
 8010e5a:	f04f 0300 	mov.w	r3, #0
 8010e5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8010e62:	4629      	mov	r1, r5
 8010e64:	008b      	lsls	r3, r1, #2
 8010e66:	4621      	mov	r1, r4
 8010e68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010e6c:	4621      	mov	r1, r4
 8010e6e:	008a      	lsls	r2, r1, #2
 8010e70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8010e74:	f7ef fe98 	bl	8000ba8 <__aeabi_uldivmod>
 8010e78:	4602      	mov	r2, r0
 8010e7a:	460b      	mov	r3, r1
 8010e7c:	4b60      	ldr	r3, [pc, #384]	; (8011000 <UART_SetConfig+0x4e4>)
 8010e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8010e82:	095b      	lsrs	r3, r3, #5
 8010e84:	011c      	lsls	r4, r3, #4
 8010e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010e90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010e94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8010e98:	4642      	mov	r2, r8
 8010e9a:	464b      	mov	r3, r9
 8010e9c:	1891      	adds	r1, r2, r2
 8010e9e:	61b9      	str	r1, [r7, #24]
 8010ea0:	415b      	adcs	r3, r3
 8010ea2:	61fb      	str	r3, [r7, #28]
 8010ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010ea8:	4641      	mov	r1, r8
 8010eaa:	1851      	adds	r1, r2, r1
 8010eac:	6139      	str	r1, [r7, #16]
 8010eae:	4649      	mov	r1, r9
 8010eb0:	414b      	adcs	r3, r1
 8010eb2:	617b      	str	r3, [r7, #20]
 8010eb4:	f04f 0200 	mov.w	r2, #0
 8010eb8:	f04f 0300 	mov.w	r3, #0
 8010ebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010ec0:	4659      	mov	r1, fp
 8010ec2:	00cb      	lsls	r3, r1, #3
 8010ec4:	4651      	mov	r1, sl
 8010ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010eca:	4651      	mov	r1, sl
 8010ecc:	00ca      	lsls	r2, r1, #3
 8010ece:	4610      	mov	r0, r2
 8010ed0:	4619      	mov	r1, r3
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	4642      	mov	r2, r8
 8010ed6:	189b      	adds	r3, r3, r2
 8010ed8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010edc:	464b      	mov	r3, r9
 8010ede:	460a      	mov	r2, r1
 8010ee0:	eb42 0303 	adc.w	r3, r2, r3
 8010ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010eec:	685b      	ldr	r3, [r3, #4]
 8010eee:	2200      	movs	r2, #0
 8010ef0:	67bb      	str	r3, [r7, #120]	; 0x78
 8010ef2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010ef4:	f04f 0200 	mov.w	r2, #0
 8010ef8:	f04f 0300 	mov.w	r3, #0
 8010efc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8010f00:	4649      	mov	r1, r9
 8010f02:	008b      	lsls	r3, r1, #2
 8010f04:	4641      	mov	r1, r8
 8010f06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010f0a:	4641      	mov	r1, r8
 8010f0c:	008a      	lsls	r2, r1, #2
 8010f0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010f12:	f7ef fe49 	bl	8000ba8 <__aeabi_uldivmod>
 8010f16:	4602      	mov	r2, r0
 8010f18:	460b      	mov	r3, r1
 8010f1a:	4b39      	ldr	r3, [pc, #228]	; (8011000 <UART_SetConfig+0x4e4>)
 8010f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8010f20:	095b      	lsrs	r3, r3, #5
 8010f22:	2164      	movs	r1, #100	; 0x64
 8010f24:	fb01 f303 	mul.w	r3, r1, r3
 8010f28:	1ad3      	subs	r3, r2, r3
 8010f2a:	011b      	lsls	r3, r3, #4
 8010f2c:	3332      	adds	r3, #50	; 0x32
 8010f2e:	4a34      	ldr	r2, [pc, #208]	; (8011000 <UART_SetConfig+0x4e4>)
 8010f30:	fba2 2303 	umull	r2, r3, r2, r3
 8010f34:	095b      	lsrs	r3, r3, #5
 8010f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010f3a:	441c      	add	r4, r3
 8010f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010f40:	2200      	movs	r2, #0
 8010f42:	673b      	str	r3, [r7, #112]	; 0x70
 8010f44:	677a      	str	r2, [r7, #116]	; 0x74
 8010f46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8010f4a:	4642      	mov	r2, r8
 8010f4c:	464b      	mov	r3, r9
 8010f4e:	1891      	adds	r1, r2, r2
 8010f50:	60b9      	str	r1, [r7, #8]
 8010f52:	415b      	adcs	r3, r3
 8010f54:	60fb      	str	r3, [r7, #12]
 8010f56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010f5a:	4641      	mov	r1, r8
 8010f5c:	1851      	adds	r1, r2, r1
 8010f5e:	6039      	str	r1, [r7, #0]
 8010f60:	4649      	mov	r1, r9
 8010f62:	414b      	adcs	r3, r1
 8010f64:	607b      	str	r3, [r7, #4]
 8010f66:	f04f 0200 	mov.w	r2, #0
 8010f6a:	f04f 0300 	mov.w	r3, #0
 8010f6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010f72:	4659      	mov	r1, fp
 8010f74:	00cb      	lsls	r3, r1, #3
 8010f76:	4651      	mov	r1, sl
 8010f78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010f7c:	4651      	mov	r1, sl
 8010f7e:	00ca      	lsls	r2, r1, #3
 8010f80:	4610      	mov	r0, r2
 8010f82:	4619      	mov	r1, r3
 8010f84:	4603      	mov	r3, r0
 8010f86:	4642      	mov	r2, r8
 8010f88:	189b      	adds	r3, r3, r2
 8010f8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8010f8c:	464b      	mov	r3, r9
 8010f8e:	460a      	mov	r2, r1
 8010f90:	eb42 0303 	adc.w	r3, r2, r3
 8010f94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010f9a:	685b      	ldr	r3, [r3, #4]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	663b      	str	r3, [r7, #96]	; 0x60
 8010fa0:	667a      	str	r2, [r7, #100]	; 0x64
 8010fa2:	f04f 0200 	mov.w	r2, #0
 8010fa6:	f04f 0300 	mov.w	r3, #0
 8010faa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8010fae:	4649      	mov	r1, r9
 8010fb0:	008b      	lsls	r3, r1, #2
 8010fb2:	4641      	mov	r1, r8
 8010fb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010fb8:	4641      	mov	r1, r8
 8010fba:	008a      	lsls	r2, r1, #2
 8010fbc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010fc0:	f7ef fdf2 	bl	8000ba8 <__aeabi_uldivmod>
 8010fc4:	4602      	mov	r2, r0
 8010fc6:	460b      	mov	r3, r1
 8010fc8:	4b0d      	ldr	r3, [pc, #52]	; (8011000 <UART_SetConfig+0x4e4>)
 8010fca:	fba3 1302 	umull	r1, r3, r3, r2
 8010fce:	095b      	lsrs	r3, r3, #5
 8010fd0:	2164      	movs	r1, #100	; 0x64
 8010fd2:	fb01 f303 	mul.w	r3, r1, r3
 8010fd6:	1ad3      	subs	r3, r2, r3
 8010fd8:	011b      	lsls	r3, r3, #4
 8010fda:	3332      	adds	r3, #50	; 0x32
 8010fdc:	4a08      	ldr	r2, [pc, #32]	; (8011000 <UART_SetConfig+0x4e4>)
 8010fde:	fba2 2303 	umull	r2, r3, r2, r3
 8010fe2:	095b      	lsrs	r3, r3, #5
 8010fe4:	f003 020f 	and.w	r2, r3, #15
 8010fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	4422      	add	r2, r4
 8010ff0:	609a      	str	r2, [r3, #8]
}
 8010ff2:	bf00      	nop
 8010ff4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010ffe:	bf00      	nop
 8011000:	51eb851f 	.word	0x51eb851f

08011004 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8011004:	b084      	sub	sp, #16
 8011006:	b480      	push	{r7}
 8011008:	b085      	sub	sp, #20
 801100a:	af00      	add	r7, sp, #0
 801100c:	6078      	str	r0, [r7, #4]
 801100e:	f107 001c 	add.w	r0, r7, #28
 8011012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011016:	2300      	movs	r3, #0
 8011018:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801101a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 801101c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801101e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8011020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8011022:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8011024:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8011026:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8011028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 801102a:	431a      	orrs	r2, r3
             Init.ClockDiv
 801102c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 801102e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8011030:	68fa      	ldr	r2, [r7, #12]
 8011032:	4313      	orrs	r3, r2
 8011034:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	685b      	ldr	r3, [r3, #4]
 801103a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 801103e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011042:	68fa      	ldr	r2, [r7, #12]
 8011044:	431a      	orrs	r2, r3
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801104a:	2300      	movs	r3, #0
}
 801104c:	4618      	mov	r0, r3
 801104e:	3714      	adds	r7, #20
 8011050:	46bd      	mov	sp, r7
 8011052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011056:	b004      	add	sp, #16
 8011058:	4770      	bx	lr

0801105a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 801105a:	b480      	push	{r7}
 801105c:	b083      	sub	sp, #12
 801105e:	af00      	add	r7, sp, #0
 8011060:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011068:	4618      	mov	r0, r3
 801106a:	370c      	adds	r7, #12
 801106c:	46bd      	mov	sp, r7
 801106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011072:	4770      	bx	lr

08011074 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8011074:	b480      	push	{r7}
 8011076:	b083      	sub	sp, #12
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
 801107c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	681a      	ldr	r2, [r3, #0]
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011088:	2300      	movs	r3, #0
}
 801108a:	4618      	mov	r0, r3
 801108c:	370c      	adds	r7, #12
 801108e:	46bd      	mov	sp, r7
 8011090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011094:	4770      	bx	lr

08011096 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8011096:	b480      	push	{r7}
 8011098:	b083      	sub	sp, #12
 801109a:	af00      	add	r7, sp, #0
 801109c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	2203      	movs	r2, #3
 80110a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80110a4:	2300      	movs	r3, #0
}
 80110a6:	4618      	mov	r0, r3
 80110a8:	370c      	adds	r7, #12
 80110aa:	46bd      	mov	sp, r7
 80110ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b0:	4770      	bx	lr

080110b2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80110b2:	b480      	push	{r7}
 80110b4:	b083      	sub	sp, #12
 80110b6:	af00      	add	r7, sp, #0
 80110b8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	f003 0303 	and.w	r3, r3, #3
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	370c      	adds	r7, #12
 80110c6:	46bd      	mov	sp, r7
 80110c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110cc:	4770      	bx	lr

080110ce <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80110ce:	b480      	push	{r7}
 80110d0:	b085      	sub	sp, #20
 80110d2:	af00      	add	r7, sp, #0
 80110d4:	6078      	str	r0, [r7, #4]
 80110d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80110d8:	2300      	movs	r3, #0
 80110da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	681a      	ldr	r2, [r3, #0]
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80110ec:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80110f2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80110f8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80110fa:	68fa      	ldr	r2, [r7, #12]
 80110fc:	4313      	orrs	r3, r2
 80110fe:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	68db      	ldr	r3, [r3, #12]
 8011104:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011108:	f023 030f 	bic.w	r3, r3, #15
 801110c:	68fa      	ldr	r2, [r7, #12]
 801110e:	431a      	orrs	r2, r3
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8011114:	2300      	movs	r3, #0
}
 8011116:	4618      	mov	r0, r3
 8011118:	3714      	adds	r7, #20
 801111a:	46bd      	mov	sp, r7
 801111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011120:	4770      	bx	lr

08011122 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8011122:	b480      	push	{r7}
 8011124:	b083      	sub	sp, #12
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	691b      	ldr	r3, [r3, #16]
 801112e:	b2db      	uxtb	r3, r3
}
 8011130:	4618      	mov	r0, r3
 8011132:	370c      	adds	r7, #12
 8011134:	46bd      	mov	sp, r7
 8011136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113a:	4770      	bx	lr

0801113c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 801113c:	b480      	push	{r7}
 801113e:	b085      	sub	sp, #20
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	3314      	adds	r3, #20
 801114a:	461a      	mov	r2, r3
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	4413      	add	r3, r2
 8011150:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	681b      	ldr	r3, [r3, #0]
}  
 8011156:	4618      	mov	r0, r3
 8011158:	3714      	adds	r7, #20
 801115a:	46bd      	mov	sp, r7
 801115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011160:	4770      	bx	lr

08011162 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8011162:	b480      	push	{r7}
 8011164:	b085      	sub	sp, #20
 8011166:	af00      	add	r7, sp, #0
 8011168:	6078      	str	r0, [r7, #4]
 801116a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801116c:	2300      	movs	r3, #0
 801116e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	681a      	ldr	r2, [r3, #0]
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	685a      	ldr	r2, [r3, #4]
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011188:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801118e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8011194:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011196:	68fa      	ldr	r2, [r7, #12]
 8011198:	4313      	orrs	r3, r2
 801119a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111a0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	431a      	orrs	r2, r3
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80111ac:	2300      	movs	r3, #0

}
 80111ae:	4618      	mov	r0, r3
 80111b0:	3714      	adds	r7, #20
 80111b2:	46bd      	mov	sp, r7
 80111b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b8:	4770      	bx	lr

080111ba <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80111ba:	b580      	push	{r7, lr}
 80111bc:	b088      	sub	sp, #32
 80111be:	af00      	add	r7, sp, #0
 80111c0:	6078      	str	r0, [r7, #4]
 80111c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80111c8:	2310      	movs	r3, #16
 80111ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80111cc:	2340      	movs	r3, #64	; 0x40
 80111ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80111d0:	2300      	movs	r3, #0
 80111d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80111d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80111da:	f107 0308 	add.w	r3, r7, #8
 80111de:	4619      	mov	r1, r3
 80111e0:	6878      	ldr	r0, [r7, #4]
 80111e2:	f7ff ff74 	bl	80110ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80111e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80111ea:	2110      	movs	r1, #16
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f000 fa19 	bl	8011624 <SDMMC_GetCmdResp1>
 80111f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111f4:	69fb      	ldr	r3, [r7, #28]
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3720      	adds	r7, #32
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}

080111fe <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80111fe:	b580      	push	{r7, lr}
 8011200:	b088      	sub	sp, #32
 8011202:	af00      	add	r7, sp, #0
 8011204:	6078      	str	r0, [r7, #4]
 8011206:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801120c:	2311      	movs	r3, #17
 801120e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011210:	2340      	movs	r3, #64	; 0x40
 8011212:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011214:	2300      	movs	r3, #0
 8011216:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801121c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801121e:	f107 0308 	add.w	r3, r7, #8
 8011222:	4619      	mov	r1, r3
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	f7ff ff52 	bl	80110ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 801122a:	f241 3288 	movw	r2, #5000	; 0x1388
 801122e:	2111      	movs	r1, #17
 8011230:	6878      	ldr	r0, [r7, #4]
 8011232:	f000 f9f7 	bl	8011624 <SDMMC_GetCmdResp1>
 8011236:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011238:	69fb      	ldr	r3, [r7, #28]
}
 801123a:	4618      	mov	r0, r3
 801123c:	3720      	adds	r7, #32
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}

08011242 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8011242:	b580      	push	{r7, lr}
 8011244:	b088      	sub	sp, #32
 8011246:	af00      	add	r7, sp, #0
 8011248:	6078      	str	r0, [r7, #4]
 801124a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011250:	2312      	movs	r3, #18
 8011252:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011254:	2340      	movs	r3, #64	; 0x40
 8011256:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011258:	2300      	movs	r3, #0
 801125a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801125c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011260:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011262:	f107 0308 	add.w	r3, r7, #8
 8011266:	4619      	mov	r1, r3
 8011268:	6878      	ldr	r0, [r7, #4]
 801126a:	f7ff ff30 	bl	80110ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801126e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011272:	2112      	movs	r1, #18
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f000 f9d5 	bl	8011624 <SDMMC_GetCmdResp1>
 801127a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801127c:	69fb      	ldr	r3, [r7, #28]
}
 801127e:	4618      	mov	r0, r3
 8011280:	3720      	adds	r7, #32
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}

08011286 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8011286:	b580      	push	{r7, lr}
 8011288:	b088      	sub	sp, #32
 801128a:	af00      	add	r7, sp, #0
 801128c:	6078      	str	r0, [r7, #4]
 801128e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011294:	2318      	movs	r3, #24
 8011296:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011298:	2340      	movs	r3, #64	; 0x40
 801129a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801129c:	2300      	movs	r3, #0
 801129e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80112a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80112a6:	f107 0308 	add.w	r3, r7, #8
 80112aa:	4619      	mov	r1, r3
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f7ff ff0e 	bl	80110ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80112b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80112b6:	2118      	movs	r1, #24
 80112b8:	6878      	ldr	r0, [r7, #4]
 80112ba:	f000 f9b3 	bl	8011624 <SDMMC_GetCmdResp1>
 80112be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112c0:	69fb      	ldr	r3, [r7, #28]
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	3720      	adds	r7, #32
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}

080112ca <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80112ca:	b580      	push	{r7, lr}
 80112cc:	b088      	sub	sp, #32
 80112ce:	af00      	add	r7, sp, #0
 80112d0:	6078      	str	r0, [r7, #4]
 80112d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80112d4:	683b      	ldr	r3, [r7, #0]
 80112d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80112d8:	2319      	movs	r3, #25
 80112da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80112dc:	2340      	movs	r3, #64	; 0x40
 80112de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80112e0:	2300      	movs	r3, #0
 80112e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80112e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80112ea:	f107 0308 	add.w	r3, r7, #8
 80112ee:	4619      	mov	r1, r3
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f7ff feec 	bl	80110ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80112f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80112fa:	2119      	movs	r1, #25
 80112fc:	6878      	ldr	r0, [r7, #4]
 80112fe:	f000 f991 	bl	8011624 <SDMMC_GetCmdResp1>
 8011302:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011304:	69fb      	ldr	r3, [r7, #28]
}
 8011306:	4618      	mov	r0, r3
 8011308:	3720      	adds	r7, #32
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
	...

08011310 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b088      	sub	sp, #32
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011318:	2300      	movs	r3, #0
 801131a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801131c:	230c      	movs	r3, #12
 801131e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011320:	2340      	movs	r3, #64	; 0x40
 8011322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011324:	2300      	movs	r3, #0
 8011326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801132c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801132e:	f107 0308 	add.w	r3, r7, #8
 8011332:	4619      	mov	r1, r3
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	f7ff feca 	bl	80110ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 801133a:	4a05      	ldr	r2, [pc, #20]	; (8011350 <SDMMC_CmdStopTransfer+0x40>)
 801133c:	210c      	movs	r1, #12
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f000 f970 	bl	8011624 <SDMMC_GetCmdResp1>
 8011344:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011346:	69fb      	ldr	r3, [r7, #28]
}
 8011348:	4618      	mov	r0, r3
 801134a:	3720      	adds	r7, #32
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}
 8011350:	05f5e100 	.word	0x05f5e100

08011354 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b08a      	sub	sp, #40	; 0x28
 8011358:	af00      	add	r7, sp, #0
 801135a:	60f8      	str	r0, [r7, #12]
 801135c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011364:	2307      	movs	r3, #7
 8011366:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011368:	2340      	movs	r3, #64	; 0x40
 801136a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801136c:	2300      	movs	r3, #0
 801136e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011374:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011376:	f107 0310 	add.w	r3, r7, #16
 801137a:	4619      	mov	r1, r3
 801137c:	68f8      	ldr	r0, [r7, #12]
 801137e:	f7ff fea6 	bl	80110ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8011382:	f241 3288 	movw	r2, #5000	; 0x1388
 8011386:	2107      	movs	r1, #7
 8011388:	68f8      	ldr	r0, [r7, #12]
 801138a:	f000 f94b 	bl	8011624 <SDMMC_GetCmdResp1>
 801138e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8011390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011392:	4618      	mov	r0, r3
 8011394:	3728      	adds	r7, #40	; 0x28
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}

0801139a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801139a:	b580      	push	{r7, lr}
 801139c:	b088      	sub	sp, #32
 801139e:	af00      	add	r7, sp, #0
 80113a0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80113a2:	2300      	movs	r3, #0
 80113a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80113a6:	2300      	movs	r3, #0
 80113a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80113aa:	2300      	movs	r3, #0
 80113ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80113ae:	2300      	movs	r3, #0
 80113b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80113b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80113b8:	f107 0308 	add.w	r3, r7, #8
 80113bc:	4619      	mov	r1, r3
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f7ff fe85 	bl	80110ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f000 fb65 	bl	8011a94 <SDMMC_GetCmdError>
 80113ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113cc:	69fb      	ldr	r3, [r7, #28]
}
 80113ce:	4618      	mov	r0, r3
 80113d0:	3720      	adds	r7, #32
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bd80      	pop	{r7, pc}

080113d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80113d6:	b580      	push	{r7, lr}
 80113d8:	b088      	sub	sp, #32
 80113da:	af00      	add	r7, sp, #0
 80113dc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80113de:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80113e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80113e4:	2308      	movs	r3, #8
 80113e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80113e8:	2340      	movs	r3, #64	; 0x40
 80113ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80113ec:	2300      	movs	r3, #0
 80113ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80113f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80113f6:	f107 0308 	add.w	r3, r7, #8
 80113fa:	4619      	mov	r1, r3
 80113fc:	6878      	ldr	r0, [r7, #4]
 80113fe:	f7ff fe66 	bl	80110ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8011402:	6878      	ldr	r0, [r7, #4]
 8011404:	f000 faf8 	bl	80119f8 <SDMMC_GetCmdResp7>
 8011408:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801140a:	69fb      	ldr	r3, [r7, #28]
}
 801140c:	4618      	mov	r0, r3
 801140e:	3720      	adds	r7, #32
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}

08011414 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b088      	sub	sp, #32
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
 801141c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011422:	2337      	movs	r3, #55	; 0x37
 8011424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011426:	2340      	movs	r3, #64	; 0x40
 8011428:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801142a:	2300      	movs	r3, #0
 801142c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801142e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011432:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011434:	f107 0308 	add.w	r3, r7, #8
 8011438:	4619      	mov	r1, r3
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f7ff fe47 	bl	80110ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8011440:	f241 3288 	movw	r2, #5000	; 0x1388
 8011444:	2137      	movs	r1, #55	; 0x37
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f000 f8ec 	bl	8011624 <SDMMC_GetCmdResp1>
 801144c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801144e:	69fb      	ldr	r3, [r7, #28]
}
 8011450:	4618      	mov	r0, r3
 8011452:	3720      	adds	r7, #32
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}

08011458 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b088      	sub	sp, #32
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011468:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801146c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801146e:	2329      	movs	r3, #41	; 0x29
 8011470:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011472:	2340      	movs	r3, #64	; 0x40
 8011474:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011476:	2300      	movs	r3, #0
 8011478:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801147a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801147e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011480:	f107 0308 	add.w	r3, r7, #8
 8011484:	4619      	mov	r1, r3
 8011486:	6878      	ldr	r0, [r7, #4]
 8011488:	f7ff fe21 	bl	80110ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f000 f9ff 	bl	8011890 <SDMMC_GetCmdResp3>
 8011492:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011494:	69fb      	ldr	r3, [r7, #28]
}
 8011496:	4618      	mov	r0, r3
 8011498:	3720      	adds	r7, #32
 801149a:	46bd      	mov	sp, r7
 801149c:	bd80      	pop	{r7, pc}

0801149e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 801149e:	b580      	push	{r7, lr}
 80114a0:	b088      	sub	sp, #32
 80114a2:	af00      	add	r7, sp, #0
 80114a4:	6078      	str	r0, [r7, #4]
 80114a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80114ac:	2306      	movs	r3, #6
 80114ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80114b0:	2340      	movs	r3, #64	; 0x40
 80114b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80114b4:	2300      	movs	r3, #0
 80114b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80114b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80114be:	f107 0308 	add.w	r3, r7, #8
 80114c2:	4619      	mov	r1, r3
 80114c4:	6878      	ldr	r0, [r7, #4]
 80114c6:	f7ff fe02 	bl	80110ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80114ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80114ce:	2106      	movs	r1, #6
 80114d0:	6878      	ldr	r0, [r7, #4]
 80114d2:	f000 f8a7 	bl	8011624 <SDMMC_GetCmdResp1>
 80114d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114d8:	69fb      	ldr	r3, [r7, #28]
}
 80114da:	4618      	mov	r0, r3
 80114dc:	3720      	adds	r7, #32
 80114de:	46bd      	mov	sp, r7
 80114e0:	bd80      	pop	{r7, pc}

080114e2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80114e2:	b580      	push	{r7, lr}
 80114e4:	b088      	sub	sp, #32
 80114e6:	af00      	add	r7, sp, #0
 80114e8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80114ea:	2300      	movs	r3, #0
 80114ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80114ee:	2333      	movs	r3, #51	; 0x33
 80114f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80114f2:	2340      	movs	r3, #64	; 0x40
 80114f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80114f6:	2300      	movs	r3, #0
 80114f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80114fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011500:	f107 0308 	add.w	r3, r7, #8
 8011504:	4619      	mov	r1, r3
 8011506:	6878      	ldr	r0, [r7, #4]
 8011508:	f7ff fde1 	bl	80110ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 801150c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011510:	2133      	movs	r1, #51	; 0x33
 8011512:	6878      	ldr	r0, [r7, #4]
 8011514:	f000 f886 	bl	8011624 <SDMMC_GetCmdResp1>
 8011518:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801151a:	69fb      	ldr	r3, [r7, #28]
}
 801151c:	4618      	mov	r0, r3
 801151e:	3720      	adds	r7, #32
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}

08011524 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b088      	sub	sp, #32
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801152c:	2300      	movs	r3, #0
 801152e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011530:	2302      	movs	r3, #2
 8011532:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8011534:	23c0      	movs	r3, #192	; 0xc0
 8011536:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011538:	2300      	movs	r3, #0
 801153a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801153c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011540:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011542:	f107 0308 	add.w	r3, r7, #8
 8011546:	4619      	mov	r1, r3
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f7ff fdc0 	bl	80110ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801154e:	6878      	ldr	r0, [r7, #4]
 8011550:	f000 f956 	bl	8011800 <SDMMC_GetCmdResp2>
 8011554:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011556:	69fb      	ldr	r3, [r7, #28]
}
 8011558:	4618      	mov	r0, r3
 801155a:	3720      	adds	r7, #32
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}

08011560 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b088      	sub	sp, #32
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
 8011568:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801156e:	2309      	movs	r3, #9
 8011570:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8011572:	23c0      	movs	r3, #192	; 0xc0
 8011574:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011576:	2300      	movs	r3, #0
 8011578:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801157a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801157e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011580:	f107 0308 	add.w	r3, r7, #8
 8011584:	4619      	mov	r1, r3
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	f7ff fda1 	bl	80110ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801158c:	6878      	ldr	r0, [r7, #4]
 801158e:	f000 f937 	bl	8011800 <SDMMC_GetCmdResp2>
 8011592:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011594:	69fb      	ldr	r3, [r7, #28]
}
 8011596:	4618      	mov	r0, r3
 8011598:	3720      	adds	r7, #32
 801159a:	46bd      	mov	sp, r7
 801159c:	bd80      	pop	{r7, pc}

0801159e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 801159e:	b580      	push	{r7, lr}
 80115a0:	b088      	sub	sp, #32
 80115a2:	af00      	add	r7, sp, #0
 80115a4:	6078      	str	r0, [r7, #4]
 80115a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80115a8:	2300      	movs	r3, #0
 80115aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80115ac:	2303      	movs	r3, #3
 80115ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80115b0:	2340      	movs	r3, #64	; 0x40
 80115b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80115b4:	2300      	movs	r3, #0
 80115b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80115b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80115be:	f107 0308 	add.w	r3, r7, #8
 80115c2:	4619      	mov	r1, r3
 80115c4:	6878      	ldr	r0, [r7, #4]
 80115c6:	f7ff fd82 	bl	80110ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80115ca:	683a      	ldr	r2, [r7, #0]
 80115cc:	2103      	movs	r1, #3
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f000 f99c 	bl	801190c <SDMMC_GetCmdResp6>
 80115d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115d6:	69fb      	ldr	r3, [r7, #28]
}
 80115d8:	4618      	mov	r0, r3
 80115da:	3720      	adds	r7, #32
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd80      	pop	{r7, pc}

080115e0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b088      	sub	sp, #32
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
 80115e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80115ee:	230d      	movs	r3, #13
 80115f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80115f2:	2340      	movs	r3, #64	; 0x40
 80115f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80115f6:	2300      	movs	r3, #0
 80115f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80115fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011600:	f107 0308 	add.w	r3, r7, #8
 8011604:	4619      	mov	r1, r3
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	f7ff fd61 	bl	80110ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 801160c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011610:	210d      	movs	r1, #13
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f000 f806 	bl	8011624 <SDMMC_GetCmdResp1>
 8011618:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801161a:	69fb      	ldr	r3, [r7, #28]
}
 801161c:	4618      	mov	r0, r3
 801161e:	3720      	adds	r7, #32
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}

08011624 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b088      	sub	sp, #32
 8011628:	af00      	add	r7, sp, #0
 801162a:	60f8      	str	r0, [r7, #12]
 801162c:	460b      	mov	r3, r1
 801162e:	607a      	str	r2, [r7, #4]
 8011630:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011632:	4b70      	ldr	r3, [pc, #448]	; (80117f4 <SDMMC_GetCmdResp1+0x1d0>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	4a70      	ldr	r2, [pc, #448]	; (80117f8 <SDMMC_GetCmdResp1+0x1d4>)
 8011638:	fba2 2303 	umull	r2, r3, r2, r3
 801163c:	0a5a      	lsrs	r2, r3, #9
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	fb02 f303 	mul.w	r3, r2, r3
 8011644:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011646:	69fb      	ldr	r3, [r7, #28]
 8011648:	1e5a      	subs	r2, r3, #1
 801164a:	61fa      	str	r2, [r7, #28]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d102      	bne.n	8011656 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011650:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011654:	e0c9      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801165a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801165c:	69bb      	ldr	r3, [r7, #24]
 801165e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011662:	2b00      	cmp	r3, #0
 8011664:	d0ef      	beq.n	8011646 <SDMMC_GetCmdResp1+0x22>
 8011666:	69bb      	ldr	r3, [r7, #24]
 8011668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801166c:	2b00      	cmp	r3, #0
 801166e:	d1ea      	bne.n	8011646 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011674:	f003 0304 	and.w	r3, r3, #4
 8011678:	2b00      	cmp	r3, #0
 801167a:	d004      	beq.n	8011686 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	2204      	movs	r2, #4
 8011680:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011682:	2304      	movs	r3, #4
 8011684:	e0b1      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801168a:	f003 0301 	and.w	r3, r3, #1
 801168e:	2b00      	cmp	r3, #0
 8011690:	d004      	beq.n	801169c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	2201      	movs	r2, #1
 8011696:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011698:	2301      	movs	r3, #1
 801169a:	e0a6      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	22c5      	movs	r2, #197	; 0xc5
 80116a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80116a2:	68f8      	ldr	r0, [r7, #12]
 80116a4:	f7ff fd3d 	bl	8011122 <SDIO_GetCommandResponse>
 80116a8:	4603      	mov	r3, r0
 80116aa:	461a      	mov	r2, r3
 80116ac:	7afb      	ldrb	r3, [r7, #11]
 80116ae:	4293      	cmp	r3, r2
 80116b0:	d001      	beq.n	80116b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80116b2:	2301      	movs	r3, #1
 80116b4:	e099      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80116b6:	2100      	movs	r1, #0
 80116b8:	68f8      	ldr	r0, [r7, #12]
 80116ba:	f7ff fd3f 	bl	801113c <SDIO_GetResponse>
 80116be:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80116c0:	697a      	ldr	r2, [r7, #20]
 80116c2:	4b4e      	ldr	r3, [pc, #312]	; (80117fc <SDMMC_GetCmdResp1+0x1d8>)
 80116c4:	4013      	ands	r3, r2
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d101      	bne.n	80116ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80116ca:	2300      	movs	r3, #0
 80116cc:	e08d      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80116ce:	697b      	ldr	r3, [r7, #20]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	da02      	bge.n	80116da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80116d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80116d8:	e087      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80116da:	697b      	ldr	r3, [r7, #20]
 80116dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d001      	beq.n	80116e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80116e4:	2340      	movs	r3, #64	; 0x40
 80116e6:	e080      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d001      	beq.n	80116f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80116f2:	2380      	movs	r3, #128	; 0x80
 80116f4:	e079      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80116f6:	697b      	ldr	r3, [r7, #20]
 80116f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d002      	beq.n	8011706 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011704:	e071      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011706:	697b      	ldr	r3, [r7, #20]
 8011708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801170c:	2b00      	cmp	r3, #0
 801170e:	d002      	beq.n	8011716 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011714:	e069      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011716:	697b      	ldr	r3, [r7, #20]
 8011718:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801171c:	2b00      	cmp	r3, #0
 801171e:	d002      	beq.n	8011726 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011724:	e061      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801172c:	2b00      	cmp	r3, #0
 801172e:	d002      	beq.n	8011736 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011730:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011734:	e059      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011736:	697b      	ldr	r3, [r7, #20]
 8011738:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801173c:	2b00      	cmp	r3, #0
 801173e:	d002      	beq.n	8011746 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011744:	e051      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801174c:	2b00      	cmp	r3, #0
 801174e:	d002      	beq.n	8011756 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011754:	e049      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801175c:	2b00      	cmp	r3, #0
 801175e:	d002      	beq.n	8011766 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011760:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011764:	e041      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801176c:	2b00      	cmp	r3, #0
 801176e:	d002      	beq.n	8011776 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011770:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011774:	e039      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011776:	697b      	ldr	r3, [r7, #20]
 8011778:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801177c:	2b00      	cmp	r3, #0
 801177e:	d002      	beq.n	8011786 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011780:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011784:	e031      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011786:	697b      	ldr	r3, [r7, #20]
 8011788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801178c:	2b00      	cmp	r3, #0
 801178e:	d002      	beq.n	8011796 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011790:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011794:	e029      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801179c:	2b00      	cmp	r3, #0
 801179e:	d002      	beq.n	80117a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80117a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80117a4:	e021      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80117a6:	697b      	ldr	r3, [r7, #20]
 80117a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d002      	beq.n	80117b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80117b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80117b4:	e019      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80117b6:	697b      	ldr	r3, [r7, #20]
 80117b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d002      	beq.n	80117c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80117c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80117c4:	e011      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80117c6:	697b      	ldr	r3, [r7, #20]
 80117c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d002      	beq.n	80117d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80117d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80117d4:	e009      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80117d6:	697b      	ldr	r3, [r7, #20]
 80117d8:	f003 0308 	and.w	r3, r3, #8
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d002      	beq.n	80117e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80117e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80117e4:	e001      	b.n	80117ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80117e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3720      	adds	r7, #32
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}
 80117f2:	bf00      	nop
 80117f4:	20000004 	.word	0x20000004
 80117f8:	10624dd3 	.word	0x10624dd3
 80117fc:	fdffe008 	.word	0xfdffe008

08011800 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8011800:	b480      	push	{r7}
 8011802:	b085      	sub	sp, #20
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011808:	4b1f      	ldr	r3, [pc, #124]	; (8011888 <SDMMC_GetCmdResp2+0x88>)
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	4a1f      	ldr	r2, [pc, #124]	; (801188c <SDMMC_GetCmdResp2+0x8c>)
 801180e:	fba2 2303 	umull	r2, r3, r2, r3
 8011812:	0a5b      	lsrs	r3, r3, #9
 8011814:	f241 3288 	movw	r2, #5000	; 0x1388
 8011818:	fb02 f303 	mul.w	r3, r2, r3
 801181c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	1e5a      	subs	r2, r3, #1
 8011822:	60fa      	str	r2, [r7, #12]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d102      	bne.n	801182e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011828:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801182c:	e026      	b.n	801187c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011832:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011834:	68bb      	ldr	r3, [r7, #8]
 8011836:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801183a:	2b00      	cmp	r3, #0
 801183c:	d0ef      	beq.n	801181e <SDMMC_GetCmdResp2+0x1e>
 801183e:	68bb      	ldr	r3, [r7, #8]
 8011840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011844:	2b00      	cmp	r3, #0
 8011846:	d1ea      	bne.n	801181e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801184c:	f003 0304 	and.w	r3, r3, #4
 8011850:	2b00      	cmp	r3, #0
 8011852:	d004      	beq.n	801185e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2204      	movs	r2, #4
 8011858:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801185a:	2304      	movs	r3, #4
 801185c:	e00e      	b.n	801187c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011862:	f003 0301 	and.w	r3, r3, #1
 8011866:	2b00      	cmp	r3, #0
 8011868:	d004      	beq.n	8011874 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2201      	movs	r2, #1
 801186e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011870:	2301      	movs	r3, #1
 8011872:	e003      	b.n	801187c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	22c5      	movs	r2, #197	; 0xc5
 8011878:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801187a:	2300      	movs	r3, #0
}
 801187c:	4618      	mov	r0, r3
 801187e:	3714      	adds	r7, #20
 8011880:	46bd      	mov	sp, r7
 8011882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011886:	4770      	bx	lr
 8011888:	20000004 	.word	0x20000004
 801188c:	10624dd3 	.word	0x10624dd3

08011890 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8011890:	b480      	push	{r7}
 8011892:	b085      	sub	sp, #20
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011898:	4b1a      	ldr	r3, [pc, #104]	; (8011904 <SDMMC_GetCmdResp3+0x74>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	4a1a      	ldr	r2, [pc, #104]	; (8011908 <SDMMC_GetCmdResp3+0x78>)
 801189e:	fba2 2303 	umull	r2, r3, r2, r3
 80118a2:	0a5b      	lsrs	r3, r3, #9
 80118a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80118a8:	fb02 f303 	mul.w	r3, r2, r3
 80118ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	1e5a      	subs	r2, r3, #1
 80118b2:	60fa      	str	r2, [r7, #12]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d102      	bne.n	80118be <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80118b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80118bc:	e01b      	b.n	80118f6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80118c4:	68bb      	ldr	r3, [r7, #8]
 80118c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d0ef      	beq.n	80118ae <SDMMC_GetCmdResp3+0x1e>
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d1ea      	bne.n	80118ae <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118dc:	f003 0304 	and.w	r3, r3, #4
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d004      	beq.n	80118ee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2204      	movs	r2, #4
 80118e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80118ea:	2304      	movs	r3, #4
 80118ec:	e003      	b.n	80118f6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	22c5      	movs	r2, #197	; 0xc5
 80118f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80118f4:	2300      	movs	r3, #0
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	3714      	adds	r7, #20
 80118fa:	46bd      	mov	sp, r7
 80118fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011900:	4770      	bx	lr
 8011902:	bf00      	nop
 8011904:	20000004 	.word	0x20000004
 8011908:	10624dd3 	.word	0x10624dd3

0801190c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b088      	sub	sp, #32
 8011910:	af00      	add	r7, sp, #0
 8011912:	60f8      	str	r0, [r7, #12]
 8011914:	460b      	mov	r3, r1
 8011916:	607a      	str	r2, [r7, #4]
 8011918:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801191a:	4b35      	ldr	r3, [pc, #212]	; (80119f0 <SDMMC_GetCmdResp6+0xe4>)
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	4a35      	ldr	r2, [pc, #212]	; (80119f4 <SDMMC_GetCmdResp6+0xe8>)
 8011920:	fba2 2303 	umull	r2, r3, r2, r3
 8011924:	0a5b      	lsrs	r3, r3, #9
 8011926:	f241 3288 	movw	r2, #5000	; 0x1388
 801192a:	fb02 f303 	mul.w	r3, r2, r3
 801192e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011930:	69fb      	ldr	r3, [r7, #28]
 8011932:	1e5a      	subs	r2, r3, #1
 8011934:	61fa      	str	r2, [r7, #28]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d102      	bne.n	8011940 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801193a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801193e:	e052      	b.n	80119e6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011944:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011946:	69bb      	ldr	r3, [r7, #24]
 8011948:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801194c:	2b00      	cmp	r3, #0
 801194e:	d0ef      	beq.n	8011930 <SDMMC_GetCmdResp6+0x24>
 8011950:	69bb      	ldr	r3, [r7, #24]
 8011952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011956:	2b00      	cmp	r3, #0
 8011958:	d1ea      	bne.n	8011930 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801195e:	f003 0304 	and.w	r3, r3, #4
 8011962:	2b00      	cmp	r3, #0
 8011964:	d004      	beq.n	8011970 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	2204      	movs	r2, #4
 801196a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801196c:	2304      	movs	r3, #4
 801196e:	e03a      	b.n	80119e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011974:	f003 0301 	and.w	r3, r3, #1
 8011978:	2b00      	cmp	r3, #0
 801197a:	d004      	beq.n	8011986 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	2201      	movs	r2, #1
 8011980:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011982:	2301      	movs	r3, #1
 8011984:	e02f      	b.n	80119e6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8011986:	68f8      	ldr	r0, [r7, #12]
 8011988:	f7ff fbcb 	bl	8011122 <SDIO_GetCommandResponse>
 801198c:	4603      	mov	r3, r0
 801198e:	461a      	mov	r2, r3
 8011990:	7afb      	ldrb	r3, [r7, #11]
 8011992:	4293      	cmp	r3, r2
 8011994:	d001      	beq.n	801199a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011996:	2301      	movs	r3, #1
 8011998:	e025      	b.n	80119e6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	22c5      	movs	r2, #197	; 0xc5
 801199e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80119a0:	2100      	movs	r1, #0
 80119a2:	68f8      	ldr	r0, [r7, #12]
 80119a4:	f7ff fbca 	bl	801113c <SDIO_GetResponse>
 80119a8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d106      	bne.n	80119c2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80119b4:	697b      	ldr	r3, [r7, #20]
 80119b6:	0c1b      	lsrs	r3, r3, #16
 80119b8:	b29a      	uxth	r2, r3
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80119be:	2300      	movs	r3, #0
 80119c0:	e011      	b.n	80119e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80119c2:	697b      	ldr	r3, [r7, #20]
 80119c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d002      	beq.n	80119d2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80119cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80119d0:	e009      	b.n	80119e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d002      	beq.n	80119e2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80119dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80119e0:	e001      	b.n	80119e6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80119e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	3720      	adds	r7, #32
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}
 80119ee:	bf00      	nop
 80119f0:	20000004 	.word	0x20000004
 80119f4:	10624dd3 	.word	0x10624dd3

080119f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80119f8:	b480      	push	{r7}
 80119fa:	b085      	sub	sp, #20
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011a00:	4b22      	ldr	r3, [pc, #136]	; (8011a8c <SDMMC_GetCmdResp7+0x94>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	4a22      	ldr	r2, [pc, #136]	; (8011a90 <SDMMC_GetCmdResp7+0x98>)
 8011a06:	fba2 2303 	umull	r2, r3, r2, r3
 8011a0a:	0a5b      	lsrs	r3, r3, #9
 8011a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a10:	fb02 f303 	mul.w	r3, r2, r3
 8011a14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	1e5a      	subs	r2, r3, #1
 8011a1a:	60fa      	str	r2, [r7, #12]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d102      	bne.n	8011a26 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011a20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011a24:	e02c      	b.n	8011a80 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d0ef      	beq.n	8011a16 <SDMMC_GetCmdResp7+0x1e>
 8011a36:	68bb      	ldr	r3, [r7, #8]
 8011a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d1ea      	bne.n	8011a16 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a44:	f003 0304 	and.w	r3, r3, #4
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d004      	beq.n	8011a56 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2204      	movs	r2, #4
 8011a50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011a52:	2304      	movs	r3, #4
 8011a54:	e014      	b.n	8011a80 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a5a:	f003 0301 	and.w	r3, r3, #1
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d004      	beq.n	8011a6c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2201      	movs	r2, #1
 8011a66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011a68:	2301      	movs	r3, #1
 8011a6a:	e009      	b.n	8011a80 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d002      	beq.n	8011a7e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2240      	movs	r2, #64	; 0x40
 8011a7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011a7e:	2300      	movs	r3, #0
  
}
 8011a80:	4618      	mov	r0, r3
 8011a82:	3714      	adds	r7, #20
 8011a84:	46bd      	mov	sp, r7
 8011a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8a:	4770      	bx	lr
 8011a8c:	20000004 	.word	0x20000004
 8011a90:	10624dd3 	.word	0x10624dd3

08011a94 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8011a94:	b480      	push	{r7}
 8011a96:	b085      	sub	sp, #20
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011a9c:	4b11      	ldr	r3, [pc, #68]	; (8011ae4 <SDMMC_GetCmdError+0x50>)
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	4a11      	ldr	r2, [pc, #68]	; (8011ae8 <SDMMC_GetCmdError+0x54>)
 8011aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8011aa6:	0a5b      	lsrs	r3, r3, #9
 8011aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011aac:	fb02 f303 	mul.w	r3, r2, r3
 8011ab0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	1e5a      	subs	r2, r3, #1
 8011ab6:	60fa      	str	r2, [r7, #12]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d102      	bne.n	8011ac2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011abc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011ac0:	e009      	b.n	8011ad6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d0f1      	beq.n	8011ab2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	22c5      	movs	r2, #197	; 0xc5
 8011ad2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8011ad4:	2300      	movs	r3, #0
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	3714      	adds	r7, #20
 8011ada:	46bd      	mov	sp, r7
 8011adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae0:	4770      	bx	lr
 8011ae2:	bf00      	nop
 8011ae4:	20000004 	.word	0x20000004
 8011ae8:	10624dd3 	.word	0x10624dd3

08011aec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011aec:	b084      	sub	sp, #16
 8011aee:	b580      	push	{r7, lr}
 8011af0:	b084      	sub	sp, #16
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	6078      	str	r0, [r7, #4]
 8011af6:	f107 001c 	add.w	r0, r7, #28
 8011afa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b00:	2b01      	cmp	r3, #1
 8011b02:	d122      	bne.n	8011b4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	68db      	ldr	r3, [r3, #12]
 8011b14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8011b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011b1c:	687a      	ldr	r2, [r7, #4]
 8011b1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	68db      	ldr	r3, [r3, #12]
 8011b24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b2e:	2b01      	cmp	r3, #1
 8011b30:	d105      	bne.n	8011b3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	68db      	ldr	r3, [r3, #12]
 8011b36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011b3e:	6878      	ldr	r0, [r7, #4]
 8011b40:	f001 fbee 	bl	8013320 <USB_CoreReset>
 8011b44:	4603      	mov	r3, r0
 8011b46:	73fb      	strb	r3, [r7, #15]
 8011b48:	e01a      	b.n	8011b80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	68db      	ldr	r3, [r3, #12]
 8011b4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f001 fbe2 	bl	8013320 <USB_CoreReset>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d106      	bne.n	8011b74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	639a      	str	r2, [r3, #56]	; 0x38
 8011b72:	e005      	b.n	8011b80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b82:	2b01      	cmp	r3, #1
 8011b84:	d10b      	bne.n	8011b9e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	689b      	ldr	r3, [r3, #8]
 8011b8a:	f043 0206 	orr.w	r2, r3, #6
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	689b      	ldr	r3, [r3, #8]
 8011b96:	f043 0220 	orr.w	r2, r3, #32
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	3710      	adds	r7, #16
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011baa:	b004      	add	sp, #16
 8011bac:	4770      	bx	lr
	...

08011bb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011bb0:	b480      	push	{r7}
 8011bb2:	b087      	sub	sp, #28
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	60f8      	str	r0, [r7, #12]
 8011bb8:	60b9      	str	r1, [r7, #8]
 8011bba:	4613      	mov	r3, r2
 8011bbc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011bbe:	79fb      	ldrb	r3, [r7, #7]
 8011bc0:	2b02      	cmp	r3, #2
 8011bc2:	d165      	bne.n	8011c90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011bc4:	68bb      	ldr	r3, [r7, #8]
 8011bc6:	4a41      	ldr	r2, [pc, #260]	; (8011ccc <USB_SetTurnaroundTime+0x11c>)
 8011bc8:	4293      	cmp	r3, r2
 8011bca:	d906      	bls.n	8011bda <USB_SetTurnaroundTime+0x2a>
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	4a40      	ldr	r2, [pc, #256]	; (8011cd0 <USB_SetTurnaroundTime+0x120>)
 8011bd0:	4293      	cmp	r3, r2
 8011bd2:	d202      	bcs.n	8011bda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011bd4:	230f      	movs	r3, #15
 8011bd6:	617b      	str	r3, [r7, #20]
 8011bd8:	e062      	b.n	8011ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011bda:	68bb      	ldr	r3, [r7, #8]
 8011bdc:	4a3c      	ldr	r2, [pc, #240]	; (8011cd0 <USB_SetTurnaroundTime+0x120>)
 8011bde:	4293      	cmp	r3, r2
 8011be0:	d306      	bcc.n	8011bf0 <USB_SetTurnaroundTime+0x40>
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	4a3b      	ldr	r2, [pc, #236]	; (8011cd4 <USB_SetTurnaroundTime+0x124>)
 8011be6:	4293      	cmp	r3, r2
 8011be8:	d202      	bcs.n	8011bf0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011bea:	230e      	movs	r3, #14
 8011bec:	617b      	str	r3, [r7, #20]
 8011bee:	e057      	b.n	8011ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011bf0:	68bb      	ldr	r3, [r7, #8]
 8011bf2:	4a38      	ldr	r2, [pc, #224]	; (8011cd4 <USB_SetTurnaroundTime+0x124>)
 8011bf4:	4293      	cmp	r3, r2
 8011bf6:	d306      	bcc.n	8011c06 <USB_SetTurnaroundTime+0x56>
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	4a37      	ldr	r2, [pc, #220]	; (8011cd8 <USB_SetTurnaroundTime+0x128>)
 8011bfc:	4293      	cmp	r3, r2
 8011bfe:	d202      	bcs.n	8011c06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011c00:	230d      	movs	r3, #13
 8011c02:	617b      	str	r3, [r7, #20]
 8011c04:	e04c      	b.n	8011ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	4a33      	ldr	r2, [pc, #204]	; (8011cd8 <USB_SetTurnaroundTime+0x128>)
 8011c0a:	4293      	cmp	r3, r2
 8011c0c:	d306      	bcc.n	8011c1c <USB_SetTurnaroundTime+0x6c>
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	4a32      	ldr	r2, [pc, #200]	; (8011cdc <USB_SetTurnaroundTime+0x12c>)
 8011c12:	4293      	cmp	r3, r2
 8011c14:	d802      	bhi.n	8011c1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011c16:	230c      	movs	r3, #12
 8011c18:	617b      	str	r3, [r7, #20]
 8011c1a:	e041      	b.n	8011ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	4a2f      	ldr	r2, [pc, #188]	; (8011cdc <USB_SetTurnaroundTime+0x12c>)
 8011c20:	4293      	cmp	r3, r2
 8011c22:	d906      	bls.n	8011c32 <USB_SetTurnaroundTime+0x82>
 8011c24:	68bb      	ldr	r3, [r7, #8]
 8011c26:	4a2e      	ldr	r2, [pc, #184]	; (8011ce0 <USB_SetTurnaroundTime+0x130>)
 8011c28:	4293      	cmp	r3, r2
 8011c2a:	d802      	bhi.n	8011c32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011c2c:	230b      	movs	r3, #11
 8011c2e:	617b      	str	r3, [r7, #20]
 8011c30:	e036      	b.n	8011ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	4a2a      	ldr	r2, [pc, #168]	; (8011ce0 <USB_SetTurnaroundTime+0x130>)
 8011c36:	4293      	cmp	r3, r2
 8011c38:	d906      	bls.n	8011c48 <USB_SetTurnaroundTime+0x98>
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	4a29      	ldr	r2, [pc, #164]	; (8011ce4 <USB_SetTurnaroundTime+0x134>)
 8011c3e:	4293      	cmp	r3, r2
 8011c40:	d802      	bhi.n	8011c48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011c42:	230a      	movs	r3, #10
 8011c44:	617b      	str	r3, [r7, #20]
 8011c46:	e02b      	b.n	8011ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	4a26      	ldr	r2, [pc, #152]	; (8011ce4 <USB_SetTurnaroundTime+0x134>)
 8011c4c:	4293      	cmp	r3, r2
 8011c4e:	d906      	bls.n	8011c5e <USB_SetTurnaroundTime+0xae>
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	4a25      	ldr	r2, [pc, #148]	; (8011ce8 <USB_SetTurnaroundTime+0x138>)
 8011c54:	4293      	cmp	r3, r2
 8011c56:	d202      	bcs.n	8011c5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011c58:	2309      	movs	r3, #9
 8011c5a:	617b      	str	r3, [r7, #20]
 8011c5c:	e020      	b.n	8011ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	4a21      	ldr	r2, [pc, #132]	; (8011ce8 <USB_SetTurnaroundTime+0x138>)
 8011c62:	4293      	cmp	r3, r2
 8011c64:	d306      	bcc.n	8011c74 <USB_SetTurnaroundTime+0xc4>
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	4a20      	ldr	r2, [pc, #128]	; (8011cec <USB_SetTurnaroundTime+0x13c>)
 8011c6a:	4293      	cmp	r3, r2
 8011c6c:	d802      	bhi.n	8011c74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011c6e:	2308      	movs	r3, #8
 8011c70:	617b      	str	r3, [r7, #20]
 8011c72:	e015      	b.n	8011ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011c74:	68bb      	ldr	r3, [r7, #8]
 8011c76:	4a1d      	ldr	r2, [pc, #116]	; (8011cec <USB_SetTurnaroundTime+0x13c>)
 8011c78:	4293      	cmp	r3, r2
 8011c7a:	d906      	bls.n	8011c8a <USB_SetTurnaroundTime+0xda>
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	4a1c      	ldr	r2, [pc, #112]	; (8011cf0 <USB_SetTurnaroundTime+0x140>)
 8011c80:	4293      	cmp	r3, r2
 8011c82:	d202      	bcs.n	8011c8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011c84:	2307      	movs	r3, #7
 8011c86:	617b      	str	r3, [r7, #20]
 8011c88:	e00a      	b.n	8011ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011c8a:	2306      	movs	r3, #6
 8011c8c:	617b      	str	r3, [r7, #20]
 8011c8e:	e007      	b.n	8011ca0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011c90:	79fb      	ldrb	r3, [r7, #7]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d102      	bne.n	8011c9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011c96:	2309      	movs	r3, #9
 8011c98:	617b      	str	r3, [r7, #20]
 8011c9a:	e001      	b.n	8011ca0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011c9c:	2309      	movs	r3, #9
 8011c9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	68db      	ldr	r3, [r3, #12]
 8011ca4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	68da      	ldr	r2, [r3, #12]
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	029b      	lsls	r3, r3, #10
 8011cb4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011cb8:	431a      	orrs	r2, r3
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011cbe:	2300      	movs	r3, #0
}
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	371c      	adds	r7, #28
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cca:	4770      	bx	lr
 8011ccc:	00d8acbf 	.word	0x00d8acbf
 8011cd0:	00e4e1c0 	.word	0x00e4e1c0
 8011cd4:	00f42400 	.word	0x00f42400
 8011cd8:	01067380 	.word	0x01067380
 8011cdc:	011a499f 	.word	0x011a499f
 8011ce0:	01312cff 	.word	0x01312cff
 8011ce4:	014ca43f 	.word	0x014ca43f
 8011ce8:	016e3600 	.word	0x016e3600
 8011cec:	01a6ab1f 	.word	0x01a6ab1f
 8011cf0:	01e84800 	.word	0x01e84800

08011cf4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011cf4:	b480      	push	{r7}
 8011cf6:	b083      	sub	sp, #12
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	689b      	ldr	r3, [r3, #8]
 8011d00:	f043 0201 	orr.w	r2, r3, #1
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011d08:	2300      	movs	r3, #0
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	370c      	adds	r7, #12
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d14:	4770      	bx	lr

08011d16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011d16:	b480      	push	{r7}
 8011d18:	b083      	sub	sp, #12
 8011d1a:	af00      	add	r7, sp, #0
 8011d1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	689b      	ldr	r3, [r3, #8]
 8011d22:	f023 0201 	bic.w	r2, r3, #1
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011d2a:	2300      	movs	r3, #0
}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	370c      	adds	r7, #12
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr

08011d38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b084      	sub	sp, #16
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	460b      	mov	r3, r1
 8011d42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011d44:	2300      	movs	r3, #0
 8011d46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	68db      	ldr	r3, [r3, #12]
 8011d4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011d54:	78fb      	ldrb	r3, [r7, #3]
 8011d56:	2b01      	cmp	r3, #1
 8011d58:	d115      	bne.n	8011d86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	68db      	ldr	r3, [r3, #12]
 8011d5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011d66:	2001      	movs	r0, #1
 8011d68:	f7f7 fbd4 	bl	8009514 <HAL_Delay>
      ms++;
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	3301      	adds	r3, #1
 8011d70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8011d72:	6878      	ldr	r0, [r7, #4]
 8011d74:	f001 fa45 	bl	8013202 <USB_GetMode>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	2b01      	cmp	r3, #1
 8011d7c:	d01e      	beq.n	8011dbc <USB_SetCurrentMode+0x84>
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	2b31      	cmp	r3, #49	; 0x31
 8011d82:	d9f0      	bls.n	8011d66 <USB_SetCurrentMode+0x2e>
 8011d84:	e01a      	b.n	8011dbc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011d86:	78fb      	ldrb	r3, [r7, #3]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d115      	bne.n	8011db8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	68db      	ldr	r3, [r3, #12]
 8011d90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011d98:	2001      	movs	r0, #1
 8011d9a:	f7f7 fbbb 	bl	8009514 <HAL_Delay>
      ms++;
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	3301      	adds	r3, #1
 8011da2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8011da4:	6878      	ldr	r0, [r7, #4]
 8011da6:	f001 fa2c 	bl	8013202 <USB_GetMode>
 8011daa:	4603      	mov	r3, r0
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d005      	beq.n	8011dbc <USB_SetCurrentMode+0x84>
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	2b31      	cmp	r3, #49	; 0x31
 8011db4:	d9f0      	bls.n	8011d98 <USB_SetCurrentMode+0x60>
 8011db6:	e001      	b.n	8011dbc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011db8:	2301      	movs	r3, #1
 8011dba:	e005      	b.n	8011dc8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	2b32      	cmp	r3, #50	; 0x32
 8011dc0:	d101      	bne.n	8011dc6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011dc2:	2301      	movs	r3, #1
 8011dc4:	e000      	b.n	8011dc8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011dc6:	2300      	movs	r3, #0
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	3710      	adds	r7, #16
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}

08011dd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011dd0:	b084      	sub	sp, #16
 8011dd2:	b580      	push	{r7, lr}
 8011dd4:	b086      	sub	sp, #24
 8011dd6:	af00      	add	r7, sp, #0
 8011dd8:	6078      	str	r0, [r7, #4]
 8011dda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011dde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011de2:	2300      	movs	r3, #0
 8011de4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011dea:	2300      	movs	r3, #0
 8011dec:	613b      	str	r3, [r7, #16]
 8011dee:	e009      	b.n	8011e04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011df0:	687a      	ldr	r2, [r7, #4]
 8011df2:	693b      	ldr	r3, [r7, #16]
 8011df4:	3340      	adds	r3, #64	; 0x40
 8011df6:	009b      	lsls	r3, r3, #2
 8011df8:	4413      	add	r3, r2
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011dfe:	693b      	ldr	r3, [r7, #16]
 8011e00:	3301      	adds	r3, #1
 8011e02:	613b      	str	r3, [r7, #16]
 8011e04:	693b      	ldr	r3, [r7, #16]
 8011e06:	2b0e      	cmp	r3, #14
 8011e08:	d9f2      	bls.n	8011df0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d11c      	bne.n	8011e4a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e16:	685b      	ldr	r3, [r3, #4]
 8011e18:	68fa      	ldr	r2, [r7, #12]
 8011e1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011e1e:	f043 0302 	orr.w	r3, r3, #2
 8011e22:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e34:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e40:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	639a      	str	r2, [r3, #56]	; 0x38
 8011e48:	e00b      	b.n	8011e62 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e4e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011e68:	461a      	mov	r2, r3
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e74:	4619      	mov	r1, r3
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e7c:	461a      	mov	r2, r3
 8011e7e:	680b      	ldr	r3, [r1, #0]
 8011e80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e84:	2b01      	cmp	r3, #1
 8011e86:	d10c      	bne.n	8011ea2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d104      	bne.n	8011e98 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011e8e:	2100      	movs	r1, #0
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f000 f965 	bl	8012160 <USB_SetDevSpeed>
 8011e96:	e008      	b.n	8011eaa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011e98:	2101      	movs	r1, #1
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f000 f960 	bl	8012160 <USB_SetDevSpeed>
 8011ea0:	e003      	b.n	8011eaa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011ea2:	2103      	movs	r1, #3
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	f000 f95b 	bl	8012160 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011eaa:	2110      	movs	r1, #16
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	f000 f8f3 	bl	8012098 <USB_FlushTxFifo>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d001      	beq.n	8011ebc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8011eb8:	2301      	movs	r3, #1
 8011eba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	f000 f91f 	bl	8012100 <USB_FlushRxFifo>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d001      	beq.n	8011ecc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8011ec8:	2301      	movs	r3, #1
 8011eca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ed2:	461a      	mov	r2, r3
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ede:	461a      	mov	r2, r3
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011eea:	461a      	mov	r2, r3
 8011eec:	2300      	movs	r3, #0
 8011eee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	613b      	str	r3, [r7, #16]
 8011ef4:	e043      	b.n	8011f7e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	015a      	lsls	r2, r3, #5
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	4413      	add	r3, r2
 8011efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011f08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011f0c:	d118      	bne.n	8011f40 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d10a      	bne.n	8011f2a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011f14:	693b      	ldr	r3, [r7, #16]
 8011f16:	015a      	lsls	r2, r3, #5
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	4413      	add	r3, r2
 8011f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f20:	461a      	mov	r2, r3
 8011f22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011f26:	6013      	str	r3, [r2, #0]
 8011f28:	e013      	b.n	8011f52 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011f2a:	693b      	ldr	r3, [r7, #16]
 8011f2c:	015a      	lsls	r2, r3, #5
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	4413      	add	r3, r2
 8011f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f36:	461a      	mov	r2, r3
 8011f38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011f3c:	6013      	str	r3, [r2, #0]
 8011f3e:	e008      	b.n	8011f52 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	015a      	lsls	r2, r3, #5
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	4413      	add	r3, r2
 8011f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f4c:	461a      	mov	r2, r3
 8011f4e:	2300      	movs	r3, #0
 8011f50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011f52:	693b      	ldr	r3, [r7, #16]
 8011f54:	015a      	lsls	r2, r3, #5
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	4413      	add	r3, r2
 8011f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f5e:	461a      	mov	r2, r3
 8011f60:	2300      	movs	r3, #0
 8011f62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011f64:	693b      	ldr	r3, [r7, #16]
 8011f66:	015a      	lsls	r2, r3, #5
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	4413      	add	r3, r2
 8011f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f70:	461a      	mov	r2, r3
 8011f72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011f76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011f78:	693b      	ldr	r3, [r7, #16]
 8011f7a:	3301      	adds	r3, #1
 8011f7c:	613b      	str	r3, [r7, #16]
 8011f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f80:	693a      	ldr	r2, [r7, #16]
 8011f82:	429a      	cmp	r2, r3
 8011f84:	d3b7      	bcc.n	8011ef6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011f86:	2300      	movs	r3, #0
 8011f88:	613b      	str	r3, [r7, #16]
 8011f8a:	e043      	b.n	8012014 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011f8c:	693b      	ldr	r3, [r7, #16]
 8011f8e:	015a      	lsls	r2, r3, #5
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	4413      	add	r3, r2
 8011f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011fa2:	d118      	bne.n	8011fd6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d10a      	bne.n	8011fc0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011faa:	693b      	ldr	r3, [r7, #16]
 8011fac:	015a      	lsls	r2, r3, #5
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	4413      	add	r3, r2
 8011fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fb6:	461a      	mov	r2, r3
 8011fb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011fbc:	6013      	str	r3, [r2, #0]
 8011fbe:	e013      	b.n	8011fe8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011fc0:	693b      	ldr	r3, [r7, #16]
 8011fc2:	015a      	lsls	r2, r3, #5
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	4413      	add	r3, r2
 8011fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fcc:	461a      	mov	r2, r3
 8011fce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011fd2:	6013      	str	r3, [r2, #0]
 8011fd4:	e008      	b.n	8011fe8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011fd6:	693b      	ldr	r3, [r7, #16]
 8011fd8:	015a      	lsls	r2, r3, #5
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	4413      	add	r3, r2
 8011fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fe2:	461a      	mov	r2, r3
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	015a      	lsls	r2, r3, #5
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	4413      	add	r3, r2
 8011ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ff4:	461a      	mov	r2, r3
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011ffa:	693b      	ldr	r3, [r7, #16]
 8011ffc:	015a      	lsls	r2, r3, #5
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	4413      	add	r3, r2
 8012002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012006:	461a      	mov	r2, r3
 8012008:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801200c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801200e:	693b      	ldr	r3, [r7, #16]
 8012010:	3301      	adds	r3, #1
 8012012:	613b      	str	r3, [r7, #16]
 8012014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012016:	693a      	ldr	r2, [r7, #16]
 8012018:	429a      	cmp	r2, r3
 801201a:	d3b7      	bcc.n	8011f8c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012022:	691b      	ldr	r3, [r3, #16]
 8012024:	68fa      	ldr	r2, [r7, #12]
 8012026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801202a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801202e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	2200      	movs	r2, #0
 8012034:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801203c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801203e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012040:	2b00      	cmp	r3, #0
 8012042:	d105      	bne.n	8012050 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	699b      	ldr	r3, [r3, #24]
 8012048:	f043 0210 	orr.w	r2, r3, #16
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	699a      	ldr	r2, [r3, #24]
 8012054:	4b0f      	ldr	r3, [pc, #60]	; (8012094 <USB_DevInit+0x2c4>)
 8012056:	4313      	orrs	r3, r2
 8012058:	687a      	ldr	r2, [r7, #4]
 801205a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801205c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801205e:	2b00      	cmp	r3, #0
 8012060:	d005      	beq.n	801206e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	699b      	ldr	r3, [r3, #24]
 8012066:	f043 0208 	orr.w	r2, r3, #8
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801206e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012070:	2b01      	cmp	r3, #1
 8012072:	d107      	bne.n	8012084 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	699b      	ldr	r3, [r3, #24]
 8012078:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801207c:	f043 0304 	orr.w	r3, r3, #4
 8012080:	687a      	ldr	r2, [r7, #4]
 8012082:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012084:	7dfb      	ldrb	r3, [r7, #23]
}
 8012086:	4618      	mov	r0, r3
 8012088:	3718      	adds	r7, #24
 801208a:	46bd      	mov	sp, r7
 801208c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012090:	b004      	add	sp, #16
 8012092:	4770      	bx	lr
 8012094:	803c3800 	.word	0x803c3800

08012098 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012098:	b480      	push	{r7}
 801209a:	b085      	sub	sp, #20
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
 80120a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80120a2:	2300      	movs	r3, #0
 80120a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	3301      	adds	r3, #1
 80120aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	4a13      	ldr	r2, [pc, #76]	; (80120fc <USB_FlushTxFifo+0x64>)
 80120b0:	4293      	cmp	r3, r2
 80120b2:	d901      	bls.n	80120b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80120b4:	2303      	movs	r3, #3
 80120b6:	e01b      	b.n	80120f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	691b      	ldr	r3, [r3, #16]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	daf2      	bge.n	80120a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80120c0:	2300      	movs	r3, #0
 80120c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	019b      	lsls	r3, r3, #6
 80120c8:	f043 0220 	orr.w	r2, r3, #32
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	3301      	adds	r3, #1
 80120d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	4a08      	ldr	r2, [pc, #32]	; (80120fc <USB_FlushTxFifo+0x64>)
 80120da:	4293      	cmp	r3, r2
 80120dc:	d901      	bls.n	80120e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80120de:	2303      	movs	r3, #3
 80120e0:	e006      	b.n	80120f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	691b      	ldr	r3, [r3, #16]
 80120e6:	f003 0320 	and.w	r3, r3, #32
 80120ea:	2b20      	cmp	r3, #32
 80120ec:	d0f0      	beq.n	80120d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80120ee:	2300      	movs	r3, #0
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	3714      	adds	r7, #20
 80120f4:	46bd      	mov	sp, r7
 80120f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fa:	4770      	bx	lr
 80120fc:	00030d40 	.word	0x00030d40

08012100 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012100:	b480      	push	{r7}
 8012102:	b085      	sub	sp, #20
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012108:	2300      	movs	r3, #0
 801210a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	3301      	adds	r3, #1
 8012110:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	4a11      	ldr	r2, [pc, #68]	; (801215c <USB_FlushRxFifo+0x5c>)
 8012116:	4293      	cmp	r3, r2
 8012118:	d901      	bls.n	801211e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801211a:	2303      	movs	r3, #3
 801211c:	e018      	b.n	8012150 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	691b      	ldr	r3, [r3, #16]
 8012122:	2b00      	cmp	r3, #0
 8012124:	daf2      	bge.n	801210c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012126:	2300      	movs	r3, #0
 8012128:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	2210      	movs	r2, #16
 801212e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	3301      	adds	r3, #1
 8012134:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	4a08      	ldr	r2, [pc, #32]	; (801215c <USB_FlushRxFifo+0x5c>)
 801213a:	4293      	cmp	r3, r2
 801213c:	d901      	bls.n	8012142 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801213e:	2303      	movs	r3, #3
 8012140:	e006      	b.n	8012150 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	691b      	ldr	r3, [r3, #16]
 8012146:	f003 0310 	and.w	r3, r3, #16
 801214a:	2b10      	cmp	r3, #16
 801214c:	d0f0      	beq.n	8012130 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801214e:	2300      	movs	r3, #0
}
 8012150:	4618      	mov	r0, r3
 8012152:	3714      	adds	r7, #20
 8012154:	46bd      	mov	sp, r7
 8012156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215a:	4770      	bx	lr
 801215c:	00030d40 	.word	0x00030d40

08012160 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012160:	b480      	push	{r7}
 8012162:	b085      	sub	sp, #20
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	460b      	mov	r3, r1
 801216a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012176:	681a      	ldr	r2, [r3, #0]
 8012178:	78fb      	ldrb	r3, [r7, #3]
 801217a:	68f9      	ldr	r1, [r7, #12]
 801217c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012180:	4313      	orrs	r3, r2
 8012182:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012184:	2300      	movs	r3, #0
}
 8012186:	4618      	mov	r0, r3
 8012188:	3714      	adds	r7, #20
 801218a:	46bd      	mov	sp, r7
 801218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012190:	4770      	bx	lr

08012192 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012192:	b480      	push	{r7}
 8012194:	b087      	sub	sp, #28
 8012196:	af00      	add	r7, sp, #0
 8012198:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801219e:	693b      	ldr	r3, [r7, #16]
 80121a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121a4:	689b      	ldr	r3, [r3, #8]
 80121a6:	f003 0306 	and.w	r3, r3, #6
 80121aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d102      	bne.n	80121b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80121b2:	2300      	movs	r3, #0
 80121b4:	75fb      	strb	r3, [r7, #23]
 80121b6:	e00a      	b.n	80121ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	2b02      	cmp	r3, #2
 80121bc:	d002      	beq.n	80121c4 <USB_GetDevSpeed+0x32>
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	2b06      	cmp	r3, #6
 80121c2:	d102      	bne.n	80121ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80121c4:	2302      	movs	r3, #2
 80121c6:	75fb      	strb	r3, [r7, #23]
 80121c8:	e001      	b.n	80121ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80121ca:	230f      	movs	r3, #15
 80121cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80121ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80121d0:	4618      	mov	r0, r3
 80121d2:	371c      	adds	r7, #28
 80121d4:	46bd      	mov	sp, r7
 80121d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121da:	4770      	bx	lr

080121dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80121dc:	b480      	push	{r7}
 80121de:	b085      	sub	sp, #20
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
 80121e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	781b      	ldrb	r3, [r3, #0]
 80121ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	785b      	ldrb	r3, [r3, #1]
 80121f4:	2b01      	cmp	r3, #1
 80121f6:	d13a      	bne.n	801226e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121fe:	69da      	ldr	r2, [r3, #28]
 8012200:	683b      	ldr	r3, [r7, #0]
 8012202:	781b      	ldrb	r3, [r3, #0]
 8012204:	f003 030f 	and.w	r3, r3, #15
 8012208:	2101      	movs	r1, #1
 801220a:	fa01 f303 	lsl.w	r3, r1, r3
 801220e:	b29b      	uxth	r3, r3
 8012210:	68f9      	ldr	r1, [r7, #12]
 8012212:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012216:	4313      	orrs	r3, r2
 8012218:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801221a:	68bb      	ldr	r3, [r7, #8]
 801221c:	015a      	lsls	r2, r3, #5
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	4413      	add	r3, r2
 8012222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801222c:	2b00      	cmp	r3, #0
 801222e:	d155      	bne.n	80122dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	015a      	lsls	r2, r3, #5
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	4413      	add	r3, r2
 8012238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801223c:	681a      	ldr	r2, [r3, #0]
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	68db      	ldr	r3, [r3, #12]
 8012242:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	791b      	ldrb	r3, [r3, #4]
 801224a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801224c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	059b      	lsls	r3, r3, #22
 8012252:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012254:	4313      	orrs	r3, r2
 8012256:	68ba      	ldr	r2, [r7, #8]
 8012258:	0151      	lsls	r1, r2, #5
 801225a:	68fa      	ldr	r2, [r7, #12]
 801225c:	440a      	add	r2, r1
 801225e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801226a:	6013      	str	r3, [r2, #0]
 801226c:	e036      	b.n	80122dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012274:	69da      	ldr	r2, [r3, #28]
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	781b      	ldrb	r3, [r3, #0]
 801227a:	f003 030f 	and.w	r3, r3, #15
 801227e:	2101      	movs	r1, #1
 8012280:	fa01 f303 	lsl.w	r3, r1, r3
 8012284:	041b      	lsls	r3, r3, #16
 8012286:	68f9      	ldr	r1, [r7, #12]
 8012288:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801228c:	4313      	orrs	r3, r2
 801228e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012290:	68bb      	ldr	r3, [r7, #8]
 8012292:	015a      	lsls	r2, r3, #5
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	4413      	add	r3, r2
 8012298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d11a      	bne.n	80122dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	015a      	lsls	r2, r3, #5
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	4413      	add	r3, r2
 80122ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122b2:	681a      	ldr	r2, [r3, #0]
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	68db      	ldr	r3, [r3, #12]
 80122b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80122bc:	683b      	ldr	r3, [r7, #0]
 80122be:	791b      	ldrb	r3, [r3, #4]
 80122c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80122c2:	430b      	orrs	r3, r1
 80122c4:	4313      	orrs	r3, r2
 80122c6:	68ba      	ldr	r2, [r7, #8]
 80122c8:	0151      	lsls	r1, r2, #5
 80122ca:	68fa      	ldr	r2, [r7, #12]
 80122cc:	440a      	add	r2, r1
 80122ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80122d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80122d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80122da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80122dc:	2300      	movs	r3, #0
}
 80122de:	4618      	mov	r0, r3
 80122e0:	3714      	adds	r7, #20
 80122e2:	46bd      	mov	sp, r7
 80122e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e8:	4770      	bx	lr
	...

080122ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80122ec:	b480      	push	{r7}
 80122ee:	b085      	sub	sp, #20
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
 80122f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	781b      	ldrb	r3, [r3, #0]
 80122fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	785b      	ldrb	r3, [r3, #1]
 8012304:	2b01      	cmp	r3, #1
 8012306:	d161      	bne.n	80123cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012308:	68bb      	ldr	r3, [r7, #8]
 801230a:	015a      	lsls	r2, r3, #5
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	4413      	add	r3, r2
 8012310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801231a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801231e:	d11f      	bne.n	8012360 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012320:	68bb      	ldr	r3, [r7, #8]
 8012322:	015a      	lsls	r2, r3, #5
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	4413      	add	r3, r2
 8012328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	68ba      	ldr	r2, [r7, #8]
 8012330:	0151      	lsls	r1, r2, #5
 8012332:	68fa      	ldr	r2, [r7, #12]
 8012334:	440a      	add	r2, r1
 8012336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801233a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801233e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012340:	68bb      	ldr	r3, [r7, #8]
 8012342:	015a      	lsls	r2, r3, #5
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	4413      	add	r3, r2
 8012348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	68ba      	ldr	r2, [r7, #8]
 8012350:	0151      	lsls	r1, r2, #5
 8012352:	68fa      	ldr	r2, [r7, #12]
 8012354:	440a      	add	r2, r1
 8012356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801235a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801235e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012366:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	781b      	ldrb	r3, [r3, #0]
 801236c:	f003 030f 	and.w	r3, r3, #15
 8012370:	2101      	movs	r1, #1
 8012372:	fa01 f303 	lsl.w	r3, r1, r3
 8012376:	b29b      	uxth	r3, r3
 8012378:	43db      	mvns	r3, r3
 801237a:	68f9      	ldr	r1, [r7, #12]
 801237c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012380:	4013      	ands	r3, r2
 8012382:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801238a:	69da      	ldr	r2, [r3, #28]
 801238c:	683b      	ldr	r3, [r7, #0]
 801238e:	781b      	ldrb	r3, [r3, #0]
 8012390:	f003 030f 	and.w	r3, r3, #15
 8012394:	2101      	movs	r1, #1
 8012396:	fa01 f303 	lsl.w	r3, r1, r3
 801239a:	b29b      	uxth	r3, r3
 801239c:	43db      	mvns	r3, r3
 801239e:	68f9      	ldr	r1, [r7, #12]
 80123a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80123a4:	4013      	ands	r3, r2
 80123a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80123a8:	68bb      	ldr	r3, [r7, #8]
 80123aa:	015a      	lsls	r2, r3, #5
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	4413      	add	r3, r2
 80123b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123b4:	681a      	ldr	r2, [r3, #0]
 80123b6:	68bb      	ldr	r3, [r7, #8]
 80123b8:	0159      	lsls	r1, r3, #5
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	440b      	add	r3, r1
 80123be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123c2:	4619      	mov	r1, r3
 80123c4:	4b35      	ldr	r3, [pc, #212]	; (801249c <USB_DeactivateEndpoint+0x1b0>)
 80123c6:	4013      	ands	r3, r2
 80123c8:	600b      	str	r3, [r1, #0]
 80123ca:	e060      	b.n	801248e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	015a      	lsls	r2, r3, #5
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	4413      	add	r3, r2
 80123d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80123de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80123e2:	d11f      	bne.n	8012424 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	015a      	lsls	r2, r3, #5
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	4413      	add	r3, r2
 80123ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	68ba      	ldr	r2, [r7, #8]
 80123f4:	0151      	lsls	r1, r2, #5
 80123f6:	68fa      	ldr	r2, [r7, #12]
 80123f8:	440a      	add	r2, r1
 80123fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80123fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012402:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012404:	68bb      	ldr	r3, [r7, #8]
 8012406:	015a      	lsls	r2, r3, #5
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	4413      	add	r3, r2
 801240c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	68ba      	ldr	r2, [r7, #8]
 8012414:	0151      	lsls	r1, r2, #5
 8012416:	68fa      	ldr	r2, [r7, #12]
 8012418:	440a      	add	r2, r1
 801241a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801241e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012422:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801242a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801242c:	683b      	ldr	r3, [r7, #0]
 801242e:	781b      	ldrb	r3, [r3, #0]
 8012430:	f003 030f 	and.w	r3, r3, #15
 8012434:	2101      	movs	r1, #1
 8012436:	fa01 f303 	lsl.w	r3, r1, r3
 801243a:	041b      	lsls	r3, r3, #16
 801243c:	43db      	mvns	r3, r3
 801243e:	68f9      	ldr	r1, [r7, #12]
 8012440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012444:	4013      	ands	r3, r2
 8012446:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801244e:	69da      	ldr	r2, [r3, #28]
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	781b      	ldrb	r3, [r3, #0]
 8012454:	f003 030f 	and.w	r3, r3, #15
 8012458:	2101      	movs	r1, #1
 801245a:	fa01 f303 	lsl.w	r3, r1, r3
 801245e:	041b      	lsls	r3, r3, #16
 8012460:	43db      	mvns	r3, r3
 8012462:	68f9      	ldr	r1, [r7, #12]
 8012464:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012468:	4013      	ands	r3, r2
 801246a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801246c:	68bb      	ldr	r3, [r7, #8]
 801246e:	015a      	lsls	r2, r3, #5
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	4413      	add	r3, r2
 8012474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012478:	681a      	ldr	r2, [r3, #0]
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	0159      	lsls	r1, r3, #5
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	440b      	add	r3, r1
 8012482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012486:	4619      	mov	r1, r3
 8012488:	4b05      	ldr	r3, [pc, #20]	; (80124a0 <USB_DeactivateEndpoint+0x1b4>)
 801248a:	4013      	ands	r3, r2
 801248c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801248e:	2300      	movs	r3, #0
}
 8012490:	4618      	mov	r0, r3
 8012492:	3714      	adds	r7, #20
 8012494:	46bd      	mov	sp, r7
 8012496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249a:	4770      	bx	lr
 801249c:	ec337800 	.word	0xec337800
 80124a0:	eff37800 	.word	0xeff37800

080124a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b08a      	sub	sp, #40	; 0x28
 80124a8:	af02      	add	r7, sp, #8
 80124aa:	60f8      	str	r0, [r7, #12]
 80124ac:	60b9      	str	r1, [r7, #8]
 80124ae:	4613      	mov	r3, r2
 80124b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80124b6:	68bb      	ldr	r3, [r7, #8]
 80124b8:	781b      	ldrb	r3, [r3, #0]
 80124ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80124bc:	68bb      	ldr	r3, [r7, #8]
 80124be:	785b      	ldrb	r3, [r3, #1]
 80124c0:	2b01      	cmp	r3, #1
 80124c2:	f040 815c 	bne.w	801277e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80124c6:	68bb      	ldr	r3, [r7, #8]
 80124c8:	699b      	ldr	r3, [r3, #24]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d132      	bne.n	8012534 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80124ce:	69bb      	ldr	r3, [r7, #24]
 80124d0:	015a      	lsls	r2, r3, #5
 80124d2:	69fb      	ldr	r3, [r7, #28]
 80124d4:	4413      	add	r3, r2
 80124d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124da:	691b      	ldr	r3, [r3, #16]
 80124dc:	69ba      	ldr	r2, [r7, #24]
 80124de:	0151      	lsls	r1, r2, #5
 80124e0:	69fa      	ldr	r2, [r7, #28]
 80124e2:	440a      	add	r2, r1
 80124e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80124e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80124ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80124f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80124f2:	69bb      	ldr	r3, [r7, #24]
 80124f4:	015a      	lsls	r2, r3, #5
 80124f6:	69fb      	ldr	r3, [r7, #28]
 80124f8:	4413      	add	r3, r2
 80124fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124fe:	691b      	ldr	r3, [r3, #16]
 8012500:	69ba      	ldr	r2, [r7, #24]
 8012502:	0151      	lsls	r1, r2, #5
 8012504:	69fa      	ldr	r2, [r7, #28]
 8012506:	440a      	add	r2, r1
 8012508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801250c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012510:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012512:	69bb      	ldr	r3, [r7, #24]
 8012514:	015a      	lsls	r2, r3, #5
 8012516:	69fb      	ldr	r3, [r7, #28]
 8012518:	4413      	add	r3, r2
 801251a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801251e:	691b      	ldr	r3, [r3, #16]
 8012520:	69ba      	ldr	r2, [r7, #24]
 8012522:	0151      	lsls	r1, r2, #5
 8012524:	69fa      	ldr	r2, [r7, #28]
 8012526:	440a      	add	r2, r1
 8012528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801252c:	0cdb      	lsrs	r3, r3, #19
 801252e:	04db      	lsls	r3, r3, #19
 8012530:	6113      	str	r3, [r2, #16]
 8012532:	e074      	b.n	801261e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012534:	69bb      	ldr	r3, [r7, #24]
 8012536:	015a      	lsls	r2, r3, #5
 8012538:	69fb      	ldr	r3, [r7, #28]
 801253a:	4413      	add	r3, r2
 801253c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012540:	691b      	ldr	r3, [r3, #16]
 8012542:	69ba      	ldr	r2, [r7, #24]
 8012544:	0151      	lsls	r1, r2, #5
 8012546:	69fa      	ldr	r2, [r7, #28]
 8012548:	440a      	add	r2, r1
 801254a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801254e:	0cdb      	lsrs	r3, r3, #19
 8012550:	04db      	lsls	r3, r3, #19
 8012552:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012554:	69bb      	ldr	r3, [r7, #24]
 8012556:	015a      	lsls	r2, r3, #5
 8012558:	69fb      	ldr	r3, [r7, #28]
 801255a:	4413      	add	r3, r2
 801255c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012560:	691b      	ldr	r3, [r3, #16]
 8012562:	69ba      	ldr	r2, [r7, #24]
 8012564:	0151      	lsls	r1, r2, #5
 8012566:	69fa      	ldr	r2, [r7, #28]
 8012568:	440a      	add	r2, r1
 801256a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801256e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012572:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012576:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012578:	69bb      	ldr	r3, [r7, #24]
 801257a:	015a      	lsls	r2, r3, #5
 801257c:	69fb      	ldr	r3, [r7, #28]
 801257e:	4413      	add	r3, r2
 8012580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012584:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8012586:	68bb      	ldr	r3, [r7, #8]
 8012588:	6999      	ldr	r1, [r3, #24]
 801258a:	68bb      	ldr	r3, [r7, #8]
 801258c:	68db      	ldr	r3, [r3, #12]
 801258e:	440b      	add	r3, r1
 8012590:	1e59      	subs	r1, r3, #1
 8012592:	68bb      	ldr	r3, [r7, #8]
 8012594:	68db      	ldr	r3, [r3, #12]
 8012596:	fbb1 f3f3 	udiv	r3, r1, r3
 801259a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801259c:	4b9d      	ldr	r3, [pc, #628]	; (8012814 <USB_EPStartXfer+0x370>)
 801259e:	400b      	ands	r3, r1
 80125a0:	69b9      	ldr	r1, [r7, #24]
 80125a2:	0148      	lsls	r0, r1, #5
 80125a4:	69f9      	ldr	r1, [r7, #28]
 80125a6:	4401      	add	r1, r0
 80125a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80125ac:	4313      	orrs	r3, r2
 80125ae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80125b0:	69bb      	ldr	r3, [r7, #24]
 80125b2:	015a      	lsls	r2, r3, #5
 80125b4:	69fb      	ldr	r3, [r7, #28]
 80125b6:	4413      	add	r3, r2
 80125b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125bc:	691a      	ldr	r2, [r3, #16]
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	699b      	ldr	r3, [r3, #24]
 80125c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80125c6:	69b9      	ldr	r1, [r7, #24]
 80125c8:	0148      	lsls	r0, r1, #5
 80125ca:	69f9      	ldr	r1, [r7, #28]
 80125cc:	4401      	add	r1, r0
 80125ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80125d2:	4313      	orrs	r3, r2
 80125d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	791b      	ldrb	r3, [r3, #4]
 80125da:	2b01      	cmp	r3, #1
 80125dc:	d11f      	bne.n	801261e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80125de:	69bb      	ldr	r3, [r7, #24]
 80125e0:	015a      	lsls	r2, r3, #5
 80125e2:	69fb      	ldr	r3, [r7, #28]
 80125e4:	4413      	add	r3, r2
 80125e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125ea:	691b      	ldr	r3, [r3, #16]
 80125ec:	69ba      	ldr	r2, [r7, #24]
 80125ee:	0151      	lsls	r1, r2, #5
 80125f0:	69fa      	ldr	r2, [r7, #28]
 80125f2:	440a      	add	r2, r1
 80125f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80125f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80125fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80125fe:	69bb      	ldr	r3, [r7, #24]
 8012600:	015a      	lsls	r2, r3, #5
 8012602:	69fb      	ldr	r3, [r7, #28]
 8012604:	4413      	add	r3, r2
 8012606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801260a:	691b      	ldr	r3, [r3, #16]
 801260c:	69ba      	ldr	r2, [r7, #24]
 801260e:	0151      	lsls	r1, r2, #5
 8012610:	69fa      	ldr	r2, [r7, #28]
 8012612:	440a      	add	r2, r1
 8012614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012618:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801261c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801261e:	79fb      	ldrb	r3, [r7, #7]
 8012620:	2b01      	cmp	r3, #1
 8012622:	d14b      	bne.n	80126bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	695b      	ldr	r3, [r3, #20]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d009      	beq.n	8012640 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801262c:	69bb      	ldr	r3, [r7, #24]
 801262e:	015a      	lsls	r2, r3, #5
 8012630:	69fb      	ldr	r3, [r7, #28]
 8012632:	4413      	add	r3, r2
 8012634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012638:	461a      	mov	r2, r3
 801263a:	68bb      	ldr	r3, [r7, #8]
 801263c:	695b      	ldr	r3, [r3, #20]
 801263e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8012640:	68bb      	ldr	r3, [r7, #8]
 8012642:	791b      	ldrb	r3, [r3, #4]
 8012644:	2b01      	cmp	r3, #1
 8012646:	d128      	bne.n	801269a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012648:	69fb      	ldr	r3, [r7, #28]
 801264a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801264e:	689b      	ldr	r3, [r3, #8]
 8012650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012654:	2b00      	cmp	r3, #0
 8012656:	d110      	bne.n	801267a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012658:	69bb      	ldr	r3, [r7, #24]
 801265a:	015a      	lsls	r2, r3, #5
 801265c:	69fb      	ldr	r3, [r7, #28]
 801265e:	4413      	add	r3, r2
 8012660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	69ba      	ldr	r2, [r7, #24]
 8012668:	0151      	lsls	r1, r2, #5
 801266a:	69fa      	ldr	r2, [r7, #28]
 801266c:	440a      	add	r2, r1
 801266e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012672:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012676:	6013      	str	r3, [r2, #0]
 8012678:	e00f      	b.n	801269a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801267a:	69bb      	ldr	r3, [r7, #24]
 801267c:	015a      	lsls	r2, r3, #5
 801267e:	69fb      	ldr	r3, [r7, #28]
 8012680:	4413      	add	r3, r2
 8012682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	69ba      	ldr	r2, [r7, #24]
 801268a:	0151      	lsls	r1, r2, #5
 801268c:	69fa      	ldr	r2, [r7, #28]
 801268e:	440a      	add	r2, r1
 8012690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012698:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801269a:	69bb      	ldr	r3, [r7, #24]
 801269c:	015a      	lsls	r2, r3, #5
 801269e:	69fb      	ldr	r3, [r7, #28]
 80126a0:	4413      	add	r3, r2
 80126a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	69ba      	ldr	r2, [r7, #24]
 80126aa:	0151      	lsls	r1, r2, #5
 80126ac:	69fa      	ldr	r2, [r7, #28]
 80126ae:	440a      	add	r2, r1
 80126b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80126b8:	6013      	str	r3, [r2, #0]
 80126ba:	e133      	b.n	8012924 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80126bc:	69bb      	ldr	r3, [r7, #24]
 80126be:	015a      	lsls	r2, r3, #5
 80126c0:	69fb      	ldr	r3, [r7, #28]
 80126c2:	4413      	add	r3, r2
 80126c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	69ba      	ldr	r2, [r7, #24]
 80126cc:	0151      	lsls	r1, r2, #5
 80126ce:	69fa      	ldr	r2, [r7, #28]
 80126d0:	440a      	add	r2, r1
 80126d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80126da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80126dc:	68bb      	ldr	r3, [r7, #8]
 80126de:	791b      	ldrb	r3, [r3, #4]
 80126e0:	2b01      	cmp	r3, #1
 80126e2:	d015      	beq.n	8012710 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80126e4:	68bb      	ldr	r3, [r7, #8]
 80126e6:	699b      	ldr	r3, [r3, #24]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	f000 811b 	beq.w	8012924 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80126ee:	69fb      	ldr	r3, [r7, #28]
 80126f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80126f6:	68bb      	ldr	r3, [r7, #8]
 80126f8:	781b      	ldrb	r3, [r3, #0]
 80126fa:	f003 030f 	and.w	r3, r3, #15
 80126fe:	2101      	movs	r1, #1
 8012700:	fa01 f303 	lsl.w	r3, r1, r3
 8012704:	69f9      	ldr	r1, [r7, #28]
 8012706:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801270a:	4313      	orrs	r3, r2
 801270c:	634b      	str	r3, [r1, #52]	; 0x34
 801270e:	e109      	b.n	8012924 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012710:	69fb      	ldr	r3, [r7, #28]
 8012712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012716:	689b      	ldr	r3, [r3, #8]
 8012718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801271c:	2b00      	cmp	r3, #0
 801271e:	d110      	bne.n	8012742 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012720:	69bb      	ldr	r3, [r7, #24]
 8012722:	015a      	lsls	r2, r3, #5
 8012724:	69fb      	ldr	r3, [r7, #28]
 8012726:	4413      	add	r3, r2
 8012728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	69ba      	ldr	r2, [r7, #24]
 8012730:	0151      	lsls	r1, r2, #5
 8012732:	69fa      	ldr	r2, [r7, #28]
 8012734:	440a      	add	r2, r1
 8012736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801273a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801273e:	6013      	str	r3, [r2, #0]
 8012740:	e00f      	b.n	8012762 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012742:	69bb      	ldr	r3, [r7, #24]
 8012744:	015a      	lsls	r2, r3, #5
 8012746:	69fb      	ldr	r3, [r7, #28]
 8012748:	4413      	add	r3, r2
 801274a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	69ba      	ldr	r2, [r7, #24]
 8012752:	0151      	lsls	r1, r2, #5
 8012754:	69fa      	ldr	r2, [r7, #28]
 8012756:	440a      	add	r2, r1
 8012758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801275c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012760:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8012762:	68bb      	ldr	r3, [r7, #8]
 8012764:	6919      	ldr	r1, [r3, #16]
 8012766:	68bb      	ldr	r3, [r7, #8]
 8012768:	781a      	ldrb	r2, [r3, #0]
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	699b      	ldr	r3, [r3, #24]
 801276e:	b298      	uxth	r0, r3
 8012770:	79fb      	ldrb	r3, [r7, #7]
 8012772:	9300      	str	r3, [sp, #0]
 8012774:	4603      	mov	r3, r0
 8012776:	68f8      	ldr	r0, [r7, #12]
 8012778:	f000 fade 	bl	8012d38 <USB_WritePacket>
 801277c:	e0d2      	b.n	8012924 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801277e:	69bb      	ldr	r3, [r7, #24]
 8012780:	015a      	lsls	r2, r3, #5
 8012782:	69fb      	ldr	r3, [r7, #28]
 8012784:	4413      	add	r3, r2
 8012786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801278a:	691b      	ldr	r3, [r3, #16]
 801278c:	69ba      	ldr	r2, [r7, #24]
 801278e:	0151      	lsls	r1, r2, #5
 8012790:	69fa      	ldr	r2, [r7, #28]
 8012792:	440a      	add	r2, r1
 8012794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012798:	0cdb      	lsrs	r3, r3, #19
 801279a:	04db      	lsls	r3, r3, #19
 801279c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801279e:	69bb      	ldr	r3, [r7, #24]
 80127a0:	015a      	lsls	r2, r3, #5
 80127a2:	69fb      	ldr	r3, [r7, #28]
 80127a4:	4413      	add	r3, r2
 80127a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127aa:	691b      	ldr	r3, [r3, #16]
 80127ac:	69ba      	ldr	r2, [r7, #24]
 80127ae:	0151      	lsls	r1, r2, #5
 80127b0:	69fa      	ldr	r2, [r7, #28]
 80127b2:	440a      	add	r2, r1
 80127b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80127b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80127bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80127c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80127c2:	68bb      	ldr	r3, [r7, #8]
 80127c4:	699b      	ldr	r3, [r3, #24]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d126      	bne.n	8012818 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80127ca:	69bb      	ldr	r3, [r7, #24]
 80127cc:	015a      	lsls	r2, r3, #5
 80127ce:	69fb      	ldr	r3, [r7, #28]
 80127d0:	4413      	add	r3, r2
 80127d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127d6:	691a      	ldr	r2, [r3, #16]
 80127d8:	68bb      	ldr	r3, [r7, #8]
 80127da:	68db      	ldr	r3, [r3, #12]
 80127dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80127e0:	69b9      	ldr	r1, [r7, #24]
 80127e2:	0148      	lsls	r0, r1, #5
 80127e4:	69f9      	ldr	r1, [r7, #28]
 80127e6:	4401      	add	r1, r0
 80127e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80127ec:	4313      	orrs	r3, r2
 80127ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80127f0:	69bb      	ldr	r3, [r7, #24]
 80127f2:	015a      	lsls	r2, r3, #5
 80127f4:	69fb      	ldr	r3, [r7, #28]
 80127f6:	4413      	add	r3, r2
 80127f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127fc:	691b      	ldr	r3, [r3, #16]
 80127fe:	69ba      	ldr	r2, [r7, #24]
 8012800:	0151      	lsls	r1, r2, #5
 8012802:	69fa      	ldr	r2, [r7, #28]
 8012804:	440a      	add	r2, r1
 8012806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801280a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801280e:	6113      	str	r3, [r2, #16]
 8012810:	e03a      	b.n	8012888 <USB_EPStartXfer+0x3e4>
 8012812:	bf00      	nop
 8012814:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	699a      	ldr	r2, [r3, #24]
 801281c:	68bb      	ldr	r3, [r7, #8]
 801281e:	68db      	ldr	r3, [r3, #12]
 8012820:	4413      	add	r3, r2
 8012822:	1e5a      	subs	r2, r3, #1
 8012824:	68bb      	ldr	r3, [r7, #8]
 8012826:	68db      	ldr	r3, [r3, #12]
 8012828:	fbb2 f3f3 	udiv	r3, r2, r3
 801282c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 801282e:	68bb      	ldr	r3, [r7, #8]
 8012830:	68db      	ldr	r3, [r3, #12]
 8012832:	8afa      	ldrh	r2, [r7, #22]
 8012834:	fb03 f202 	mul.w	r2, r3, r2
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801283c:	69bb      	ldr	r3, [r7, #24]
 801283e:	015a      	lsls	r2, r3, #5
 8012840:	69fb      	ldr	r3, [r7, #28]
 8012842:	4413      	add	r3, r2
 8012844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012848:	691a      	ldr	r2, [r3, #16]
 801284a:	8afb      	ldrh	r3, [r7, #22]
 801284c:	04d9      	lsls	r1, r3, #19
 801284e:	4b38      	ldr	r3, [pc, #224]	; (8012930 <USB_EPStartXfer+0x48c>)
 8012850:	400b      	ands	r3, r1
 8012852:	69b9      	ldr	r1, [r7, #24]
 8012854:	0148      	lsls	r0, r1, #5
 8012856:	69f9      	ldr	r1, [r7, #28]
 8012858:	4401      	add	r1, r0
 801285a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801285e:	4313      	orrs	r3, r2
 8012860:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8012862:	69bb      	ldr	r3, [r7, #24]
 8012864:	015a      	lsls	r2, r3, #5
 8012866:	69fb      	ldr	r3, [r7, #28]
 8012868:	4413      	add	r3, r2
 801286a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801286e:	691a      	ldr	r2, [r3, #16]
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	69db      	ldr	r3, [r3, #28]
 8012874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012878:	69b9      	ldr	r1, [r7, #24]
 801287a:	0148      	lsls	r0, r1, #5
 801287c:	69f9      	ldr	r1, [r7, #28]
 801287e:	4401      	add	r1, r0
 8012880:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012884:	4313      	orrs	r3, r2
 8012886:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012888:	79fb      	ldrb	r3, [r7, #7]
 801288a:	2b01      	cmp	r3, #1
 801288c:	d10d      	bne.n	80128aa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801288e:	68bb      	ldr	r3, [r7, #8]
 8012890:	691b      	ldr	r3, [r3, #16]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d009      	beq.n	80128aa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012896:	68bb      	ldr	r3, [r7, #8]
 8012898:	6919      	ldr	r1, [r3, #16]
 801289a:	69bb      	ldr	r3, [r7, #24]
 801289c:	015a      	lsls	r2, r3, #5
 801289e:	69fb      	ldr	r3, [r7, #28]
 80128a0:	4413      	add	r3, r2
 80128a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128a6:	460a      	mov	r2, r1
 80128a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80128aa:	68bb      	ldr	r3, [r7, #8]
 80128ac:	791b      	ldrb	r3, [r3, #4]
 80128ae:	2b01      	cmp	r3, #1
 80128b0:	d128      	bne.n	8012904 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80128b2:	69fb      	ldr	r3, [r7, #28]
 80128b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128b8:	689b      	ldr	r3, [r3, #8]
 80128ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d110      	bne.n	80128e4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80128c2:	69bb      	ldr	r3, [r7, #24]
 80128c4:	015a      	lsls	r2, r3, #5
 80128c6:	69fb      	ldr	r3, [r7, #28]
 80128c8:	4413      	add	r3, r2
 80128ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	69ba      	ldr	r2, [r7, #24]
 80128d2:	0151      	lsls	r1, r2, #5
 80128d4:	69fa      	ldr	r2, [r7, #28]
 80128d6:	440a      	add	r2, r1
 80128d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80128dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80128e0:	6013      	str	r3, [r2, #0]
 80128e2:	e00f      	b.n	8012904 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80128e4:	69bb      	ldr	r3, [r7, #24]
 80128e6:	015a      	lsls	r2, r3, #5
 80128e8:	69fb      	ldr	r3, [r7, #28]
 80128ea:	4413      	add	r3, r2
 80128ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	69ba      	ldr	r2, [r7, #24]
 80128f4:	0151      	lsls	r1, r2, #5
 80128f6:	69fa      	ldr	r2, [r7, #28]
 80128f8:	440a      	add	r2, r1
 80128fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80128fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012902:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012904:	69bb      	ldr	r3, [r7, #24]
 8012906:	015a      	lsls	r2, r3, #5
 8012908:	69fb      	ldr	r3, [r7, #28]
 801290a:	4413      	add	r3, r2
 801290c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	69ba      	ldr	r2, [r7, #24]
 8012914:	0151      	lsls	r1, r2, #5
 8012916:	69fa      	ldr	r2, [r7, #28]
 8012918:	440a      	add	r2, r1
 801291a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801291e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012922:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012924:	2300      	movs	r3, #0
}
 8012926:	4618      	mov	r0, r3
 8012928:	3720      	adds	r7, #32
 801292a:	46bd      	mov	sp, r7
 801292c:	bd80      	pop	{r7, pc}
 801292e:	bf00      	nop
 8012930:	1ff80000 	.word	0x1ff80000

08012934 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012934:	b480      	push	{r7}
 8012936:	b087      	sub	sp, #28
 8012938:	af00      	add	r7, sp, #0
 801293a:	60f8      	str	r0, [r7, #12]
 801293c:	60b9      	str	r1, [r7, #8]
 801293e:	4613      	mov	r3, r2
 8012940:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8012946:	68bb      	ldr	r3, [r7, #8]
 8012948:	781b      	ldrb	r3, [r3, #0]
 801294a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	785b      	ldrb	r3, [r3, #1]
 8012950:	2b01      	cmp	r3, #1
 8012952:	f040 80ce 	bne.w	8012af2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	699b      	ldr	r3, [r3, #24]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d132      	bne.n	80129c4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801295e:	693b      	ldr	r3, [r7, #16]
 8012960:	015a      	lsls	r2, r3, #5
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	4413      	add	r3, r2
 8012966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801296a:	691b      	ldr	r3, [r3, #16]
 801296c:	693a      	ldr	r2, [r7, #16]
 801296e:	0151      	lsls	r1, r2, #5
 8012970:	697a      	ldr	r2, [r7, #20]
 8012972:	440a      	add	r2, r1
 8012974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012978:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801297c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012980:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012982:	693b      	ldr	r3, [r7, #16]
 8012984:	015a      	lsls	r2, r3, #5
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	4413      	add	r3, r2
 801298a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801298e:	691b      	ldr	r3, [r3, #16]
 8012990:	693a      	ldr	r2, [r7, #16]
 8012992:	0151      	lsls	r1, r2, #5
 8012994:	697a      	ldr	r2, [r7, #20]
 8012996:	440a      	add	r2, r1
 8012998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801299c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80129a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80129a2:	693b      	ldr	r3, [r7, #16]
 80129a4:	015a      	lsls	r2, r3, #5
 80129a6:	697b      	ldr	r3, [r7, #20]
 80129a8:	4413      	add	r3, r2
 80129aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129ae:	691b      	ldr	r3, [r3, #16]
 80129b0:	693a      	ldr	r2, [r7, #16]
 80129b2:	0151      	lsls	r1, r2, #5
 80129b4:	697a      	ldr	r2, [r7, #20]
 80129b6:	440a      	add	r2, r1
 80129b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129bc:	0cdb      	lsrs	r3, r3, #19
 80129be:	04db      	lsls	r3, r3, #19
 80129c0:	6113      	str	r3, [r2, #16]
 80129c2:	e04e      	b.n	8012a62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80129c4:	693b      	ldr	r3, [r7, #16]
 80129c6:	015a      	lsls	r2, r3, #5
 80129c8:	697b      	ldr	r3, [r7, #20]
 80129ca:	4413      	add	r3, r2
 80129cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129d0:	691b      	ldr	r3, [r3, #16]
 80129d2:	693a      	ldr	r2, [r7, #16]
 80129d4:	0151      	lsls	r1, r2, #5
 80129d6:	697a      	ldr	r2, [r7, #20]
 80129d8:	440a      	add	r2, r1
 80129da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129de:	0cdb      	lsrs	r3, r3, #19
 80129e0:	04db      	lsls	r3, r3, #19
 80129e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80129e4:	693b      	ldr	r3, [r7, #16]
 80129e6:	015a      	lsls	r2, r3, #5
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	4413      	add	r3, r2
 80129ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129f0:	691b      	ldr	r3, [r3, #16]
 80129f2:	693a      	ldr	r2, [r7, #16]
 80129f4:	0151      	lsls	r1, r2, #5
 80129f6:	697a      	ldr	r2, [r7, #20]
 80129f8:	440a      	add	r2, r1
 80129fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012a02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012a06:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8012a08:	68bb      	ldr	r3, [r7, #8]
 8012a0a:	699a      	ldr	r2, [r3, #24]
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	68db      	ldr	r3, [r3, #12]
 8012a10:	429a      	cmp	r2, r3
 8012a12:	d903      	bls.n	8012a1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	68da      	ldr	r2, [r3, #12]
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012a1c:	693b      	ldr	r3, [r7, #16]
 8012a1e:	015a      	lsls	r2, r3, #5
 8012a20:	697b      	ldr	r3, [r7, #20]
 8012a22:	4413      	add	r3, r2
 8012a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a28:	691b      	ldr	r3, [r3, #16]
 8012a2a:	693a      	ldr	r2, [r7, #16]
 8012a2c:	0151      	lsls	r1, r2, #5
 8012a2e:	697a      	ldr	r2, [r7, #20]
 8012a30:	440a      	add	r2, r1
 8012a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012a3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012a3c:	693b      	ldr	r3, [r7, #16]
 8012a3e:	015a      	lsls	r2, r3, #5
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	4413      	add	r3, r2
 8012a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a48:	691a      	ldr	r2, [r3, #16]
 8012a4a:	68bb      	ldr	r3, [r7, #8]
 8012a4c:	699b      	ldr	r3, [r3, #24]
 8012a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012a52:	6939      	ldr	r1, [r7, #16]
 8012a54:	0148      	lsls	r0, r1, #5
 8012a56:	6979      	ldr	r1, [r7, #20]
 8012a58:	4401      	add	r1, r0
 8012a5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012a5e:	4313      	orrs	r3, r2
 8012a60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012a62:	79fb      	ldrb	r3, [r7, #7]
 8012a64:	2b01      	cmp	r3, #1
 8012a66:	d11e      	bne.n	8012aa6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	695b      	ldr	r3, [r3, #20]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d009      	beq.n	8012a84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012a70:	693b      	ldr	r3, [r7, #16]
 8012a72:	015a      	lsls	r2, r3, #5
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	4413      	add	r3, r2
 8012a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a7c:	461a      	mov	r2, r3
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	695b      	ldr	r3, [r3, #20]
 8012a82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012a84:	693b      	ldr	r3, [r7, #16]
 8012a86:	015a      	lsls	r2, r3, #5
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	4413      	add	r3, r2
 8012a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	693a      	ldr	r2, [r7, #16]
 8012a94:	0151      	lsls	r1, r2, #5
 8012a96:	697a      	ldr	r2, [r7, #20]
 8012a98:	440a      	add	r2, r1
 8012a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012aa2:	6013      	str	r3, [r2, #0]
 8012aa4:	e097      	b.n	8012bd6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012aa6:	693b      	ldr	r3, [r7, #16]
 8012aa8:	015a      	lsls	r2, r3, #5
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	4413      	add	r3, r2
 8012aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	693a      	ldr	r2, [r7, #16]
 8012ab6:	0151      	lsls	r1, r2, #5
 8012ab8:	697a      	ldr	r2, [r7, #20]
 8012aba:	440a      	add	r2, r1
 8012abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ac0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012ac4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	699b      	ldr	r3, [r3, #24]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	f000 8083 	beq.w	8012bd6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012ad0:	697b      	ldr	r3, [r7, #20]
 8012ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	781b      	ldrb	r3, [r3, #0]
 8012adc:	f003 030f 	and.w	r3, r3, #15
 8012ae0:	2101      	movs	r1, #1
 8012ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8012ae6:	6979      	ldr	r1, [r7, #20]
 8012ae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012aec:	4313      	orrs	r3, r2
 8012aee:	634b      	str	r3, [r1, #52]	; 0x34
 8012af0:	e071      	b.n	8012bd6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012af2:	693b      	ldr	r3, [r7, #16]
 8012af4:	015a      	lsls	r2, r3, #5
 8012af6:	697b      	ldr	r3, [r7, #20]
 8012af8:	4413      	add	r3, r2
 8012afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012afe:	691b      	ldr	r3, [r3, #16]
 8012b00:	693a      	ldr	r2, [r7, #16]
 8012b02:	0151      	lsls	r1, r2, #5
 8012b04:	697a      	ldr	r2, [r7, #20]
 8012b06:	440a      	add	r2, r1
 8012b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b0c:	0cdb      	lsrs	r3, r3, #19
 8012b0e:	04db      	lsls	r3, r3, #19
 8012b10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	015a      	lsls	r2, r3, #5
 8012b16:	697b      	ldr	r3, [r7, #20]
 8012b18:	4413      	add	r3, r2
 8012b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b1e:	691b      	ldr	r3, [r3, #16]
 8012b20:	693a      	ldr	r2, [r7, #16]
 8012b22:	0151      	lsls	r1, r2, #5
 8012b24:	697a      	ldr	r2, [r7, #20]
 8012b26:	440a      	add	r2, r1
 8012b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012b30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012b34:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8012b36:	68bb      	ldr	r3, [r7, #8]
 8012b38:	699b      	ldr	r3, [r3, #24]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d003      	beq.n	8012b46 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8012b3e:	68bb      	ldr	r3, [r7, #8]
 8012b40:	68da      	ldr	r2, [r3, #12]
 8012b42:	68bb      	ldr	r3, [r7, #8]
 8012b44:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	68da      	ldr	r2, [r3, #12]
 8012b4a:	68bb      	ldr	r3, [r7, #8]
 8012b4c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012b4e:	693b      	ldr	r3, [r7, #16]
 8012b50:	015a      	lsls	r2, r3, #5
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	4413      	add	r3, r2
 8012b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b5a:	691b      	ldr	r3, [r3, #16]
 8012b5c:	693a      	ldr	r2, [r7, #16]
 8012b5e:	0151      	lsls	r1, r2, #5
 8012b60:	697a      	ldr	r2, [r7, #20]
 8012b62:	440a      	add	r2, r1
 8012b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012b6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8012b6e:	693b      	ldr	r3, [r7, #16]
 8012b70:	015a      	lsls	r2, r3, #5
 8012b72:	697b      	ldr	r3, [r7, #20]
 8012b74:	4413      	add	r3, r2
 8012b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b7a:	691a      	ldr	r2, [r3, #16]
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	69db      	ldr	r3, [r3, #28]
 8012b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012b84:	6939      	ldr	r1, [r7, #16]
 8012b86:	0148      	lsls	r0, r1, #5
 8012b88:	6979      	ldr	r1, [r7, #20]
 8012b8a:	4401      	add	r1, r0
 8012b8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012b90:	4313      	orrs	r3, r2
 8012b92:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8012b94:	79fb      	ldrb	r3, [r7, #7]
 8012b96:	2b01      	cmp	r3, #1
 8012b98:	d10d      	bne.n	8012bb6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012b9a:	68bb      	ldr	r3, [r7, #8]
 8012b9c:	691b      	ldr	r3, [r3, #16]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d009      	beq.n	8012bb6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012ba2:	68bb      	ldr	r3, [r7, #8]
 8012ba4:	6919      	ldr	r1, [r3, #16]
 8012ba6:	693b      	ldr	r3, [r7, #16]
 8012ba8:	015a      	lsls	r2, r3, #5
 8012baa:	697b      	ldr	r3, [r7, #20]
 8012bac:	4413      	add	r3, r2
 8012bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bb2:	460a      	mov	r2, r1
 8012bb4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012bb6:	693b      	ldr	r3, [r7, #16]
 8012bb8:	015a      	lsls	r2, r3, #5
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	4413      	add	r3, r2
 8012bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	693a      	ldr	r2, [r7, #16]
 8012bc6:	0151      	lsls	r1, r2, #5
 8012bc8:	697a      	ldr	r2, [r7, #20]
 8012bca:	440a      	add	r2, r1
 8012bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012bd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012bd4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012bd6:	2300      	movs	r3, #0
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	371c      	adds	r7, #28
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be2:	4770      	bx	lr

08012be4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012be4:	b480      	push	{r7}
 8012be6:	b087      	sub	sp, #28
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
 8012bec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012bee:	2300      	movs	r3, #0
 8012bf0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	785b      	ldrb	r3, [r3, #1]
 8012bfe:	2b01      	cmp	r3, #1
 8012c00:	d14a      	bne.n	8012c98 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	781b      	ldrb	r3, [r3, #0]
 8012c06:	015a      	lsls	r2, r3, #5
 8012c08:	693b      	ldr	r3, [r7, #16]
 8012c0a:	4413      	add	r3, r2
 8012c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012c16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012c1a:	f040 8086 	bne.w	8012d2a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8012c1e:	683b      	ldr	r3, [r7, #0]
 8012c20:	781b      	ldrb	r3, [r3, #0]
 8012c22:	015a      	lsls	r2, r3, #5
 8012c24:	693b      	ldr	r3, [r7, #16]
 8012c26:	4413      	add	r3, r2
 8012c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	683a      	ldr	r2, [r7, #0]
 8012c30:	7812      	ldrb	r2, [r2, #0]
 8012c32:	0151      	lsls	r1, r2, #5
 8012c34:	693a      	ldr	r2, [r7, #16]
 8012c36:	440a      	add	r2, r1
 8012c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012c40:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8012c42:	683b      	ldr	r3, [r7, #0]
 8012c44:	781b      	ldrb	r3, [r3, #0]
 8012c46:	015a      	lsls	r2, r3, #5
 8012c48:	693b      	ldr	r3, [r7, #16]
 8012c4a:	4413      	add	r3, r2
 8012c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	683a      	ldr	r2, [r7, #0]
 8012c54:	7812      	ldrb	r2, [r2, #0]
 8012c56:	0151      	lsls	r1, r2, #5
 8012c58:	693a      	ldr	r2, [r7, #16]
 8012c5a:	440a      	add	r2, r1
 8012c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012c64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	3301      	adds	r3, #1
 8012c6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8012c72:	4293      	cmp	r3, r2
 8012c74:	d902      	bls.n	8012c7c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8012c76:	2301      	movs	r3, #1
 8012c78:	75fb      	strb	r3, [r7, #23]
          break;
 8012c7a:	e056      	b.n	8012d2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8012c7c:	683b      	ldr	r3, [r7, #0]
 8012c7e:	781b      	ldrb	r3, [r3, #0]
 8012c80:	015a      	lsls	r2, r3, #5
 8012c82:	693b      	ldr	r3, [r7, #16]
 8012c84:	4413      	add	r3, r2
 8012c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012c90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012c94:	d0e7      	beq.n	8012c66 <USB_EPStopXfer+0x82>
 8012c96:	e048      	b.n	8012d2a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	781b      	ldrb	r3, [r3, #0]
 8012c9c:	015a      	lsls	r2, r3, #5
 8012c9e:	693b      	ldr	r3, [r7, #16]
 8012ca0:	4413      	add	r3, r2
 8012ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012cac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012cb0:	d13b      	bne.n	8012d2a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8012cb2:	683b      	ldr	r3, [r7, #0]
 8012cb4:	781b      	ldrb	r3, [r3, #0]
 8012cb6:	015a      	lsls	r2, r3, #5
 8012cb8:	693b      	ldr	r3, [r7, #16]
 8012cba:	4413      	add	r3, r2
 8012cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	683a      	ldr	r2, [r7, #0]
 8012cc4:	7812      	ldrb	r2, [r2, #0]
 8012cc6:	0151      	lsls	r1, r2, #5
 8012cc8:	693a      	ldr	r2, [r7, #16]
 8012cca:	440a      	add	r2, r1
 8012ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012cd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012cd4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8012cd6:	683b      	ldr	r3, [r7, #0]
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	015a      	lsls	r2, r3, #5
 8012cdc:	693b      	ldr	r3, [r7, #16]
 8012cde:	4413      	add	r3, r2
 8012ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	683a      	ldr	r2, [r7, #0]
 8012ce8:	7812      	ldrb	r2, [r2, #0]
 8012cea:	0151      	lsls	r1, r2, #5
 8012cec:	693a      	ldr	r2, [r7, #16]
 8012cee:	440a      	add	r2, r1
 8012cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012cf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012cf8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	3301      	adds	r3, #1
 8012cfe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	f242 7210 	movw	r2, #10000	; 0x2710
 8012d06:	4293      	cmp	r3, r2
 8012d08:	d902      	bls.n	8012d10 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	75fb      	strb	r3, [r7, #23]
          break;
 8012d0e:	e00c      	b.n	8012d2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8012d10:	683b      	ldr	r3, [r7, #0]
 8012d12:	781b      	ldrb	r3, [r3, #0]
 8012d14:	015a      	lsls	r2, r3, #5
 8012d16:	693b      	ldr	r3, [r7, #16]
 8012d18:	4413      	add	r3, r2
 8012d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012d24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012d28:	d0e7      	beq.n	8012cfa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8012d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	371c      	adds	r7, #28
 8012d30:	46bd      	mov	sp, r7
 8012d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d36:	4770      	bx	lr

08012d38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012d38:	b480      	push	{r7}
 8012d3a:	b089      	sub	sp, #36	; 0x24
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	60f8      	str	r0, [r7, #12]
 8012d40:	60b9      	str	r1, [r7, #8]
 8012d42:	4611      	mov	r1, r2
 8012d44:	461a      	mov	r2, r3
 8012d46:	460b      	mov	r3, r1
 8012d48:	71fb      	strb	r3, [r7, #7]
 8012d4a:	4613      	mov	r3, r2
 8012d4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012d52:	68bb      	ldr	r3, [r7, #8]
 8012d54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8012d56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d123      	bne.n	8012da6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012d5e:	88bb      	ldrh	r3, [r7, #4]
 8012d60:	3303      	adds	r3, #3
 8012d62:	089b      	lsrs	r3, r3, #2
 8012d64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012d66:	2300      	movs	r3, #0
 8012d68:	61bb      	str	r3, [r7, #24]
 8012d6a:	e018      	b.n	8012d9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012d6c:	79fb      	ldrb	r3, [r7, #7]
 8012d6e:	031a      	lsls	r2, r3, #12
 8012d70:	697b      	ldr	r3, [r7, #20]
 8012d72:	4413      	add	r3, r2
 8012d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012d78:	461a      	mov	r2, r3
 8012d7a:	69fb      	ldr	r3, [r7, #28]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012d80:	69fb      	ldr	r3, [r7, #28]
 8012d82:	3301      	adds	r3, #1
 8012d84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012d86:	69fb      	ldr	r3, [r7, #28]
 8012d88:	3301      	adds	r3, #1
 8012d8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012d8c:	69fb      	ldr	r3, [r7, #28]
 8012d8e:	3301      	adds	r3, #1
 8012d90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012d92:	69fb      	ldr	r3, [r7, #28]
 8012d94:	3301      	adds	r3, #1
 8012d96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012d98:	69bb      	ldr	r3, [r7, #24]
 8012d9a:	3301      	adds	r3, #1
 8012d9c:	61bb      	str	r3, [r7, #24]
 8012d9e:	69ba      	ldr	r2, [r7, #24]
 8012da0:	693b      	ldr	r3, [r7, #16]
 8012da2:	429a      	cmp	r2, r3
 8012da4:	d3e2      	bcc.n	8012d6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012da6:	2300      	movs	r3, #0
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3724      	adds	r7, #36	; 0x24
 8012dac:	46bd      	mov	sp, r7
 8012dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db2:	4770      	bx	lr

08012db4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012db4:	b480      	push	{r7}
 8012db6:	b08b      	sub	sp, #44	; 0x2c
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	60f8      	str	r0, [r7, #12]
 8012dbc:	60b9      	str	r1, [r7, #8]
 8012dbe:	4613      	mov	r3, r2
 8012dc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8012dca:	88fb      	ldrh	r3, [r7, #6]
 8012dcc:	089b      	lsrs	r3, r3, #2
 8012dce:	b29b      	uxth	r3, r3
 8012dd0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012dd2:	88fb      	ldrh	r3, [r7, #6]
 8012dd4:	f003 0303 	and.w	r3, r3, #3
 8012dd8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8012dda:	2300      	movs	r3, #0
 8012ddc:	623b      	str	r3, [r7, #32]
 8012dde:	e014      	b.n	8012e0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012de0:	69bb      	ldr	r3, [r7, #24]
 8012de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012de6:	681a      	ldr	r2, [r3, #0]
 8012de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dea:	601a      	str	r2, [r3, #0]
    pDest++;
 8012dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dee:	3301      	adds	r3, #1
 8012df0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df4:	3301      	adds	r3, #1
 8012df6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dfa:	3301      	adds	r3, #1
 8012dfc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e00:	3301      	adds	r3, #1
 8012e02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8012e04:	6a3b      	ldr	r3, [r7, #32]
 8012e06:	3301      	adds	r3, #1
 8012e08:	623b      	str	r3, [r7, #32]
 8012e0a:	6a3a      	ldr	r2, [r7, #32]
 8012e0c:	697b      	ldr	r3, [r7, #20]
 8012e0e:	429a      	cmp	r2, r3
 8012e10:	d3e6      	bcc.n	8012de0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8012e12:	8bfb      	ldrh	r3, [r7, #30]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d01e      	beq.n	8012e56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8012e18:	2300      	movs	r3, #0
 8012e1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012e1c:	69bb      	ldr	r3, [r7, #24]
 8012e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012e22:	461a      	mov	r2, r3
 8012e24:	f107 0310 	add.w	r3, r7, #16
 8012e28:	6812      	ldr	r2, [r2, #0]
 8012e2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012e2c:	693a      	ldr	r2, [r7, #16]
 8012e2e:	6a3b      	ldr	r3, [r7, #32]
 8012e30:	b2db      	uxtb	r3, r3
 8012e32:	00db      	lsls	r3, r3, #3
 8012e34:	fa22 f303 	lsr.w	r3, r2, r3
 8012e38:	b2da      	uxtb	r2, r3
 8012e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e3c:	701a      	strb	r2, [r3, #0]
      i++;
 8012e3e:	6a3b      	ldr	r3, [r7, #32]
 8012e40:	3301      	adds	r3, #1
 8012e42:	623b      	str	r3, [r7, #32]
      pDest++;
 8012e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e46:	3301      	adds	r3, #1
 8012e48:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8012e4a:	8bfb      	ldrh	r3, [r7, #30]
 8012e4c:	3b01      	subs	r3, #1
 8012e4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012e50:	8bfb      	ldrh	r3, [r7, #30]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d1ea      	bne.n	8012e2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8012e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012e58:	4618      	mov	r0, r3
 8012e5a:	372c      	adds	r7, #44	; 0x2c
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e62:	4770      	bx	lr

08012e64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012e64:	b480      	push	{r7}
 8012e66:	b085      	sub	sp, #20
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
 8012e6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	781b      	ldrb	r3, [r3, #0]
 8012e76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	785b      	ldrb	r3, [r3, #1]
 8012e7c:	2b01      	cmp	r3, #1
 8012e7e:	d12c      	bne.n	8012eda <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012e80:	68bb      	ldr	r3, [r7, #8]
 8012e82:	015a      	lsls	r2, r3, #5
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	4413      	add	r3, r2
 8012e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	db12      	blt.n	8012eb8 <USB_EPSetStall+0x54>
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d00f      	beq.n	8012eb8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	015a      	lsls	r2, r3, #5
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	4413      	add	r3, r2
 8012ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	68ba      	ldr	r2, [r7, #8]
 8012ea8:	0151      	lsls	r1, r2, #5
 8012eaa:	68fa      	ldr	r2, [r7, #12]
 8012eac:	440a      	add	r2, r1
 8012eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012eb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012eb6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012eb8:	68bb      	ldr	r3, [r7, #8]
 8012eba:	015a      	lsls	r2, r3, #5
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	4413      	add	r3, r2
 8012ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	68ba      	ldr	r2, [r7, #8]
 8012ec8:	0151      	lsls	r1, r2, #5
 8012eca:	68fa      	ldr	r2, [r7, #12]
 8012ecc:	440a      	add	r2, r1
 8012ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ed2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012ed6:	6013      	str	r3, [r2, #0]
 8012ed8:	e02b      	b.n	8012f32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	015a      	lsls	r2, r3, #5
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	4413      	add	r3, r2
 8012ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	db12      	blt.n	8012f12 <USB_EPSetStall+0xae>
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d00f      	beq.n	8012f12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012ef2:	68bb      	ldr	r3, [r7, #8]
 8012ef4:	015a      	lsls	r2, r3, #5
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	4413      	add	r3, r2
 8012efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	68ba      	ldr	r2, [r7, #8]
 8012f02:	0151      	lsls	r1, r2, #5
 8012f04:	68fa      	ldr	r2, [r7, #12]
 8012f06:	440a      	add	r2, r1
 8012f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012f0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012f10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	015a      	lsls	r2, r3, #5
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	4413      	add	r3, r2
 8012f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	68ba      	ldr	r2, [r7, #8]
 8012f22:	0151      	lsls	r1, r2, #5
 8012f24:	68fa      	ldr	r2, [r7, #12]
 8012f26:	440a      	add	r2, r1
 8012f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012f2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012f30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012f32:	2300      	movs	r3, #0
}
 8012f34:	4618      	mov	r0, r3
 8012f36:	3714      	adds	r7, #20
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3e:	4770      	bx	lr

08012f40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012f40:	b480      	push	{r7}
 8012f42:	b085      	sub	sp, #20
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
 8012f48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012f4e:	683b      	ldr	r3, [r7, #0]
 8012f50:	781b      	ldrb	r3, [r3, #0]
 8012f52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	785b      	ldrb	r3, [r3, #1]
 8012f58:	2b01      	cmp	r3, #1
 8012f5a:	d128      	bne.n	8012fae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012f5c:	68bb      	ldr	r3, [r7, #8]
 8012f5e:	015a      	lsls	r2, r3, #5
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	4413      	add	r3, r2
 8012f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	68ba      	ldr	r2, [r7, #8]
 8012f6c:	0151      	lsls	r1, r2, #5
 8012f6e:	68fa      	ldr	r2, [r7, #12]
 8012f70:	440a      	add	r2, r1
 8012f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012f7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	791b      	ldrb	r3, [r3, #4]
 8012f80:	2b03      	cmp	r3, #3
 8012f82:	d003      	beq.n	8012f8c <USB_EPClearStall+0x4c>
 8012f84:	683b      	ldr	r3, [r7, #0]
 8012f86:	791b      	ldrb	r3, [r3, #4]
 8012f88:	2b02      	cmp	r3, #2
 8012f8a:	d138      	bne.n	8012ffe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012f8c:	68bb      	ldr	r3, [r7, #8]
 8012f8e:	015a      	lsls	r2, r3, #5
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	4413      	add	r3, r2
 8012f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	68ba      	ldr	r2, [r7, #8]
 8012f9c:	0151      	lsls	r1, r2, #5
 8012f9e:	68fa      	ldr	r2, [r7, #12]
 8012fa0:	440a      	add	r2, r1
 8012fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012faa:	6013      	str	r3, [r2, #0]
 8012fac:	e027      	b.n	8012ffe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	015a      	lsls	r2, r3, #5
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	4413      	add	r3, r2
 8012fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	68ba      	ldr	r2, [r7, #8]
 8012fbe:	0151      	lsls	r1, r2, #5
 8012fc0:	68fa      	ldr	r2, [r7, #12]
 8012fc2:	440a      	add	r2, r1
 8012fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012fc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012fcc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	791b      	ldrb	r3, [r3, #4]
 8012fd2:	2b03      	cmp	r3, #3
 8012fd4:	d003      	beq.n	8012fde <USB_EPClearStall+0x9e>
 8012fd6:	683b      	ldr	r3, [r7, #0]
 8012fd8:	791b      	ldrb	r3, [r3, #4]
 8012fda:	2b02      	cmp	r3, #2
 8012fdc:	d10f      	bne.n	8012ffe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012fde:	68bb      	ldr	r3, [r7, #8]
 8012fe0:	015a      	lsls	r2, r3, #5
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	4413      	add	r3, r2
 8012fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	68ba      	ldr	r2, [r7, #8]
 8012fee:	0151      	lsls	r1, r2, #5
 8012ff0:	68fa      	ldr	r2, [r7, #12]
 8012ff2:	440a      	add	r2, r1
 8012ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012ffc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012ffe:	2300      	movs	r3, #0
}
 8013000:	4618      	mov	r0, r3
 8013002:	3714      	adds	r7, #20
 8013004:	46bd      	mov	sp, r7
 8013006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300a:	4770      	bx	lr

0801300c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801300c:	b480      	push	{r7}
 801300e:	b085      	sub	sp, #20
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
 8013014:	460b      	mov	r3, r1
 8013016:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	68fa      	ldr	r2, [r7, #12]
 8013026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801302a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801302e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013036:	681a      	ldr	r2, [r3, #0]
 8013038:	78fb      	ldrb	r3, [r7, #3]
 801303a:	011b      	lsls	r3, r3, #4
 801303c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013040:	68f9      	ldr	r1, [r7, #12]
 8013042:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013046:	4313      	orrs	r3, r2
 8013048:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801304a:	2300      	movs	r3, #0
}
 801304c:	4618      	mov	r0, r3
 801304e:	3714      	adds	r7, #20
 8013050:	46bd      	mov	sp, r7
 8013052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013056:	4770      	bx	lr

08013058 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013058:	b480      	push	{r7}
 801305a:	b085      	sub	sp, #20
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	68fa      	ldr	r2, [r7, #12]
 801306e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013072:	f023 0303 	bic.w	r3, r3, #3
 8013076:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801307e:	685b      	ldr	r3, [r3, #4]
 8013080:	68fa      	ldr	r2, [r7, #12]
 8013082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013086:	f023 0302 	bic.w	r3, r3, #2
 801308a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801308c:	2300      	movs	r3, #0
}
 801308e:	4618      	mov	r0, r3
 8013090:	3714      	adds	r7, #20
 8013092:	46bd      	mov	sp, r7
 8013094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013098:	4770      	bx	lr

0801309a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801309a:	b480      	push	{r7}
 801309c:	b085      	sub	sp, #20
 801309e:	af00      	add	r7, sp, #0
 80130a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	68fa      	ldr	r2, [r7, #12]
 80130b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80130b4:	f023 0303 	bic.w	r3, r3, #3
 80130b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130c0:	685b      	ldr	r3, [r3, #4]
 80130c2:	68fa      	ldr	r2, [r7, #12]
 80130c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80130c8:	f043 0302 	orr.w	r3, r3, #2
 80130cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80130ce:	2300      	movs	r3, #0
}
 80130d0:	4618      	mov	r0, r3
 80130d2:	3714      	adds	r7, #20
 80130d4:	46bd      	mov	sp, r7
 80130d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130da:	4770      	bx	lr

080130dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80130dc:	b480      	push	{r7}
 80130de:	b085      	sub	sp, #20
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	695b      	ldr	r3, [r3, #20]
 80130e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	699b      	ldr	r3, [r3, #24]
 80130ee:	68fa      	ldr	r2, [r7, #12]
 80130f0:	4013      	ands	r3, r2
 80130f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80130f4:	68fb      	ldr	r3, [r7, #12]
}
 80130f6:	4618      	mov	r0, r3
 80130f8:	3714      	adds	r7, #20
 80130fa:	46bd      	mov	sp, r7
 80130fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013100:	4770      	bx	lr

08013102 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013102:	b480      	push	{r7}
 8013104:	b085      	sub	sp, #20
 8013106:	af00      	add	r7, sp, #0
 8013108:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013114:	699b      	ldr	r3, [r3, #24]
 8013116:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801311e:	69db      	ldr	r3, [r3, #28]
 8013120:	68ba      	ldr	r2, [r7, #8]
 8013122:	4013      	ands	r3, r2
 8013124:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013126:	68bb      	ldr	r3, [r7, #8]
 8013128:	0c1b      	lsrs	r3, r3, #16
}
 801312a:	4618      	mov	r0, r3
 801312c:	3714      	adds	r7, #20
 801312e:	46bd      	mov	sp, r7
 8013130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013134:	4770      	bx	lr

08013136 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013136:	b480      	push	{r7}
 8013138:	b085      	sub	sp, #20
 801313a:	af00      	add	r7, sp, #0
 801313c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013148:	699b      	ldr	r3, [r3, #24]
 801314a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013152:	69db      	ldr	r3, [r3, #28]
 8013154:	68ba      	ldr	r2, [r7, #8]
 8013156:	4013      	ands	r3, r2
 8013158:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	b29b      	uxth	r3, r3
}
 801315e:	4618      	mov	r0, r3
 8013160:	3714      	adds	r7, #20
 8013162:	46bd      	mov	sp, r7
 8013164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013168:	4770      	bx	lr

0801316a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801316a:	b480      	push	{r7}
 801316c:	b085      	sub	sp, #20
 801316e:	af00      	add	r7, sp, #0
 8013170:	6078      	str	r0, [r7, #4]
 8013172:	460b      	mov	r3, r1
 8013174:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801317a:	78fb      	ldrb	r3, [r7, #3]
 801317c:	015a      	lsls	r2, r3, #5
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	4413      	add	r3, r2
 8013182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013186:	689b      	ldr	r3, [r3, #8]
 8013188:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013190:	695b      	ldr	r3, [r3, #20]
 8013192:	68ba      	ldr	r2, [r7, #8]
 8013194:	4013      	ands	r3, r2
 8013196:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013198:	68bb      	ldr	r3, [r7, #8]
}
 801319a:	4618      	mov	r0, r3
 801319c:	3714      	adds	r7, #20
 801319e:	46bd      	mov	sp, r7
 80131a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a4:	4770      	bx	lr

080131a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80131a6:	b480      	push	{r7}
 80131a8:	b087      	sub	sp, #28
 80131aa:	af00      	add	r7, sp, #0
 80131ac:	6078      	str	r0, [r7, #4]
 80131ae:	460b      	mov	r3, r1
 80131b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80131b6:	697b      	ldr	r3, [r7, #20]
 80131b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131bc:	691b      	ldr	r3, [r3, #16]
 80131be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80131c0:	697b      	ldr	r3, [r7, #20]
 80131c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80131ca:	78fb      	ldrb	r3, [r7, #3]
 80131cc:	f003 030f 	and.w	r3, r3, #15
 80131d0:	68fa      	ldr	r2, [r7, #12]
 80131d2:	fa22 f303 	lsr.w	r3, r2, r3
 80131d6:	01db      	lsls	r3, r3, #7
 80131d8:	b2db      	uxtb	r3, r3
 80131da:	693a      	ldr	r2, [r7, #16]
 80131dc:	4313      	orrs	r3, r2
 80131de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80131e0:	78fb      	ldrb	r3, [r7, #3]
 80131e2:	015a      	lsls	r2, r3, #5
 80131e4:	697b      	ldr	r3, [r7, #20]
 80131e6:	4413      	add	r3, r2
 80131e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131ec:	689b      	ldr	r3, [r3, #8]
 80131ee:	693a      	ldr	r2, [r7, #16]
 80131f0:	4013      	ands	r3, r2
 80131f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80131f4:	68bb      	ldr	r3, [r7, #8]
}
 80131f6:	4618      	mov	r0, r3
 80131f8:	371c      	adds	r7, #28
 80131fa:	46bd      	mov	sp, r7
 80131fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013200:	4770      	bx	lr

08013202 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013202:	b480      	push	{r7}
 8013204:	b083      	sub	sp, #12
 8013206:	af00      	add	r7, sp, #0
 8013208:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	695b      	ldr	r3, [r3, #20]
 801320e:	f003 0301 	and.w	r3, r3, #1
}
 8013212:	4618      	mov	r0, r3
 8013214:	370c      	adds	r7, #12
 8013216:	46bd      	mov	sp, r7
 8013218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801321c:	4770      	bx	lr

0801321e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801321e:	b480      	push	{r7}
 8013220:	b085      	sub	sp, #20
 8013222:	af00      	add	r7, sp, #0
 8013224:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	68fa      	ldr	r2, [r7, #12]
 8013234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013238:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801323c:	f023 0307 	bic.w	r3, r3, #7
 8013240:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013248:	685b      	ldr	r3, [r3, #4]
 801324a:	68fa      	ldr	r2, [r7, #12]
 801324c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013254:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013256:	2300      	movs	r3, #0
}
 8013258:	4618      	mov	r0, r3
 801325a:	3714      	adds	r7, #20
 801325c:	46bd      	mov	sp, r7
 801325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013262:	4770      	bx	lr

08013264 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013264:	b480      	push	{r7}
 8013266:	b087      	sub	sp, #28
 8013268:	af00      	add	r7, sp, #0
 801326a:	60f8      	str	r0, [r7, #12]
 801326c:	460b      	mov	r3, r1
 801326e:	607a      	str	r2, [r7, #4]
 8013270:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	333c      	adds	r3, #60	; 0x3c
 801327a:	3304      	adds	r3, #4
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013280:	693b      	ldr	r3, [r7, #16]
 8013282:	4a26      	ldr	r2, [pc, #152]	; (801331c <USB_EP0_OutStart+0xb8>)
 8013284:	4293      	cmp	r3, r2
 8013286:	d90a      	bls.n	801329e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013288:	697b      	ldr	r3, [r7, #20]
 801328a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013298:	d101      	bne.n	801329e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801329a:	2300      	movs	r3, #0
 801329c:	e037      	b.n	801330e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801329e:	697b      	ldr	r3, [r7, #20]
 80132a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132a4:	461a      	mov	r2, r3
 80132a6:	2300      	movs	r3, #0
 80132a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80132aa:	697b      	ldr	r3, [r7, #20]
 80132ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132b0:	691b      	ldr	r3, [r3, #16]
 80132b2:	697a      	ldr	r2, [r7, #20]
 80132b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80132b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80132bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80132be:	697b      	ldr	r3, [r7, #20]
 80132c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132c4:	691b      	ldr	r3, [r3, #16]
 80132c6:	697a      	ldr	r2, [r7, #20]
 80132c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80132cc:	f043 0318 	orr.w	r3, r3, #24
 80132d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80132d2:	697b      	ldr	r3, [r7, #20]
 80132d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132d8:	691b      	ldr	r3, [r3, #16]
 80132da:	697a      	ldr	r2, [r7, #20]
 80132dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80132e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80132e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80132e6:	7afb      	ldrb	r3, [r7, #11]
 80132e8:	2b01      	cmp	r3, #1
 80132ea:	d10f      	bne.n	801330c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80132ec:	697b      	ldr	r3, [r7, #20]
 80132ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132f2:	461a      	mov	r2, r3
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80132f8:	697b      	ldr	r3, [r7, #20]
 80132fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	697a      	ldr	r2, [r7, #20]
 8013302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013306:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801330a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801330c:	2300      	movs	r3, #0
}
 801330e:	4618      	mov	r0, r3
 8013310:	371c      	adds	r7, #28
 8013312:	46bd      	mov	sp, r7
 8013314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013318:	4770      	bx	lr
 801331a:	bf00      	nop
 801331c:	4f54300a 	.word	0x4f54300a

08013320 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013320:	b480      	push	{r7}
 8013322:	b085      	sub	sp, #20
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013328:	2300      	movs	r3, #0
 801332a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	3301      	adds	r3, #1
 8013330:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	4a13      	ldr	r2, [pc, #76]	; (8013384 <USB_CoreReset+0x64>)
 8013336:	4293      	cmp	r3, r2
 8013338:	d901      	bls.n	801333e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801333a:	2303      	movs	r3, #3
 801333c:	e01b      	b.n	8013376 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	691b      	ldr	r3, [r3, #16]
 8013342:	2b00      	cmp	r3, #0
 8013344:	daf2      	bge.n	801332c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013346:	2300      	movs	r3, #0
 8013348:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	691b      	ldr	r3, [r3, #16]
 801334e:	f043 0201 	orr.w	r2, r3, #1
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	3301      	adds	r3, #1
 801335a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	4a09      	ldr	r2, [pc, #36]	; (8013384 <USB_CoreReset+0x64>)
 8013360:	4293      	cmp	r3, r2
 8013362:	d901      	bls.n	8013368 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013364:	2303      	movs	r3, #3
 8013366:	e006      	b.n	8013376 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	691b      	ldr	r3, [r3, #16]
 801336c:	f003 0301 	and.w	r3, r3, #1
 8013370:	2b01      	cmp	r3, #1
 8013372:	d0f0      	beq.n	8013356 <USB_CoreReset+0x36>

  return HAL_OK;
 8013374:	2300      	movs	r3, #0
}
 8013376:	4618      	mov	r0, r3
 8013378:	3714      	adds	r7, #20
 801337a:	46bd      	mov	sp, r7
 801337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013380:	4770      	bx	lr
 8013382:	bf00      	nop
 8013384:	00030d40 	.word	0x00030d40

08013388 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b084      	sub	sp, #16
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
 8013390:	460b      	mov	r3, r1
 8013392:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8013394:	f44f 701d 	mov.w	r0, #628	; 0x274
 8013398:	f005 faec 	bl	8018974 <USBD_static_malloc>
 801339c:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d109      	bne.n	80133b8 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	32b0      	adds	r2, #176	; 0xb0
 80133ae:	2100      	movs	r1, #0
 80133b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80133b4:	2302      	movs	r3, #2
 80133b6:	e06e      	b.n	8013496 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	32b0      	adds	r2, #176	; 0xb0
 80133c2:	68f9      	ldr	r1, [r7, #12]
 80133c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	32b0      	adds	r2, #176	; 0xb0
 80133d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	7c1b      	ldrb	r3, [r3, #16]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d12b      	bne.n	801343c <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80133e4:	4b2e      	ldr	r3, [pc, #184]	; (80134a0 <USBD_MSC_Init+0x118>)
 80133e6:	7819      	ldrb	r1, [r3, #0]
 80133e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80133ec:	2202      	movs	r2, #2
 80133ee:	6878      	ldr	r0, [r7, #4]
 80133f0:	f005 f97d 	bl	80186ee <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80133f4:	4b2a      	ldr	r3, [pc, #168]	; (80134a0 <USBD_MSC_Init+0x118>)
 80133f6:	781b      	ldrb	r3, [r3, #0]
 80133f8:	f003 020f 	and.w	r2, r3, #15
 80133fc:	6879      	ldr	r1, [r7, #4]
 80133fe:	4613      	mov	r3, r2
 8013400:	009b      	lsls	r3, r3, #2
 8013402:	4413      	add	r3, r2
 8013404:	009b      	lsls	r3, r3, #2
 8013406:	440b      	add	r3, r1
 8013408:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801340c:	2201      	movs	r2, #1
 801340e:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8013410:	4b24      	ldr	r3, [pc, #144]	; (80134a4 <USBD_MSC_Init+0x11c>)
 8013412:	7819      	ldrb	r1, [r3, #0]
 8013414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013418:	2202      	movs	r2, #2
 801341a:	6878      	ldr	r0, [r7, #4]
 801341c:	f005 f967 	bl	80186ee <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8013420:	4b20      	ldr	r3, [pc, #128]	; (80134a4 <USBD_MSC_Init+0x11c>)
 8013422:	781b      	ldrb	r3, [r3, #0]
 8013424:	f003 020f 	and.w	r2, r3, #15
 8013428:	6879      	ldr	r1, [r7, #4]
 801342a:	4613      	mov	r3, r2
 801342c:	009b      	lsls	r3, r3, #2
 801342e:	4413      	add	r3, r2
 8013430:	009b      	lsls	r3, r3, #2
 8013432:	440b      	add	r3, r1
 8013434:	3324      	adds	r3, #36	; 0x24
 8013436:	2201      	movs	r2, #1
 8013438:	801a      	strh	r2, [r3, #0]
 801343a:	e028      	b.n	801348e <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801343c:	4b18      	ldr	r3, [pc, #96]	; (80134a0 <USBD_MSC_Init+0x118>)
 801343e:	7819      	ldrb	r1, [r3, #0]
 8013440:	2340      	movs	r3, #64	; 0x40
 8013442:	2202      	movs	r2, #2
 8013444:	6878      	ldr	r0, [r7, #4]
 8013446:	f005 f952 	bl	80186ee <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 801344a:	4b15      	ldr	r3, [pc, #84]	; (80134a0 <USBD_MSC_Init+0x118>)
 801344c:	781b      	ldrb	r3, [r3, #0]
 801344e:	f003 020f 	and.w	r2, r3, #15
 8013452:	6879      	ldr	r1, [r7, #4]
 8013454:	4613      	mov	r3, r2
 8013456:	009b      	lsls	r3, r3, #2
 8013458:	4413      	add	r3, r2
 801345a:	009b      	lsls	r3, r3, #2
 801345c:	440b      	add	r3, r1
 801345e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013462:	2201      	movs	r2, #1
 8013464:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8013466:	4b0f      	ldr	r3, [pc, #60]	; (80134a4 <USBD_MSC_Init+0x11c>)
 8013468:	7819      	ldrb	r1, [r3, #0]
 801346a:	2340      	movs	r3, #64	; 0x40
 801346c:	2202      	movs	r2, #2
 801346e:	6878      	ldr	r0, [r7, #4]
 8013470:	f005 f93d 	bl	80186ee <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8013474:	4b0b      	ldr	r3, [pc, #44]	; (80134a4 <USBD_MSC_Init+0x11c>)
 8013476:	781b      	ldrb	r3, [r3, #0]
 8013478:	f003 020f 	and.w	r2, r3, #15
 801347c:	6879      	ldr	r1, [r7, #4]
 801347e:	4613      	mov	r3, r2
 8013480:	009b      	lsls	r3, r3, #2
 8013482:	4413      	add	r3, r2
 8013484:	009b      	lsls	r3, r3, #2
 8013486:	440b      	add	r3, r1
 8013488:	3324      	adds	r3, #36	; 0x24
 801348a:	2201      	movs	r2, #1
 801348c:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801348e:	6878      	ldr	r0, [r7, #4]
 8013490:	f000 fa2c 	bl	80138ec <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8013494:	2300      	movs	r3, #0
}
 8013496:	4618      	mov	r0, r3
 8013498:	3710      	adds	r7, #16
 801349a:	46bd      	mov	sp, r7
 801349c:	bd80      	pop	{r7, pc}
 801349e:	bf00      	nop
 80134a0:	20000073 	.word	0x20000073
 80134a4:	20000072 	.word	0x20000072

080134a8 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b082      	sub	sp, #8
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
 80134b0:	460b      	mov	r3, r1
 80134b2:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80134b4:	4b26      	ldr	r3, [pc, #152]	; (8013550 <USBD_MSC_DeInit+0xa8>)
 80134b6:	781b      	ldrb	r3, [r3, #0]
 80134b8:	4619      	mov	r1, r3
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f005 f93d 	bl	801873a <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80134c0:	4b23      	ldr	r3, [pc, #140]	; (8013550 <USBD_MSC_DeInit+0xa8>)
 80134c2:	781b      	ldrb	r3, [r3, #0]
 80134c4:	f003 020f 	and.w	r2, r3, #15
 80134c8:	6879      	ldr	r1, [r7, #4]
 80134ca:	4613      	mov	r3, r2
 80134cc:	009b      	lsls	r3, r3, #2
 80134ce:	4413      	add	r3, r2
 80134d0:	009b      	lsls	r3, r3, #2
 80134d2:	440b      	add	r3, r1
 80134d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80134d8:	2200      	movs	r2, #0
 80134da:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 80134dc:	4b1d      	ldr	r3, [pc, #116]	; (8013554 <USBD_MSC_DeInit+0xac>)
 80134de:	781b      	ldrb	r3, [r3, #0]
 80134e0:	4619      	mov	r1, r3
 80134e2:	6878      	ldr	r0, [r7, #4]
 80134e4:	f005 f929 	bl	801873a <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 80134e8:	4b1a      	ldr	r3, [pc, #104]	; (8013554 <USBD_MSC_DeInit+0xac>)
 80134ea:	781b      	ldrb	r3, [r3, #0]
 80134ec:	f003 020f 	and.w	r2, r3, #15
 80134f0:	6879      	ldr	r1, [r7, #4]
 80134f2:	4613      	mov	r3, r2
 80134f4:	009b      	lsls	r3, r3, #2
 80134f6:	4413      	add	r3, r2
 80134f8:	009b      	lsls	r3, r3, #2
 80134fa:	440b      	add	r3, r1
 80134fc:	3324      	adds	r3, #36	; 0x24
 80134fe:	2200      	movs	r2, #0
 8013500:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	32b0      	adds	r2, #176	; 0xb0
 801350c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d018      	beq.n	8013546 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	f000 fa67 	bl	80139e8 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	32b0      	adds	r2, #176	; 0xb0
 8013524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013528:	4618      	mov	r0, r3
 801352a:	f005 fa31 	bl	8018990 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	32b0      	adds	r2, #176	; 0xb0
 8013538:	2100      	movs	r1, #0
 801353a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	2200      	movs	r2, #0
 8013542:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013546:	2300      	movs	r3, #0
}
 8013548:	4618      	mov	r0, r3
 801354a:	3708      	adds	r7, #8
 801354c:	46bd      	mov	sp, r7
 801354e:	bd80      	pop	{r7, pc}
 8013550:	20000073 	.word	0x20000073
 8013554:	20000072 	.word	0x20000072

08013558 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b086      	sub	sp, #24
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
 8013560:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	32b0      	adds	r2, #176	; 0xb0
 801356c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013570:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8013572:	2300      	movs	r3, #0
 8013574:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8013576:	2300      	movs	r3, #0
 8013578:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801357a:	693b      	ldr	r3, [r7, #16]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d101      	bne.n	8013584 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8013580:	2303      	movs	r3, #3
 8013582:	e0e1      	b.n	8013748 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013584:	683b      	ldr	r3, [r7, #0]
 8013586:	781b      	ldrb	r3, [r3, #0]
 8013588:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801358c:	2b00      	cmp	r3, #0
 801358e:	d053      	beq.n	8013638 <USBD_MSC_Setup+0xe0>
 8013590:	2b20      	cmp	r3, #32
 8013592:	f040 80d1 	bne.w	8013738 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	785b      	ldrb	r3, [r3, #1]
 801359a:	2bfe      	cmp	r3, #254	; 0xfe
 801359c:	d002      	beq.n	80135a4 <USBD_MSC_Setup+0x4c>
 801359e:	2bff      	cmp	r3, #255	; 0xff
 80135a0:	d02a      	beq.n	80135f8 <USBD_MSC_Setup+0xa0>
 80135a2:	e041      	b.n	8013628 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	885b      	ldrh	r3, [r3, #2]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d11e      	bne.n	80135ea <USBD_MSC_Setup+0x92>
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	88db      	ldrh	r3, [r3, #6]
 80135b0:	2b01      	cmp	r3, #1
 80135b2:	d11a      	bne.n	80135ea <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	781b      	ldrb	r3, [r3, #0]
 80135b8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	da15      	bge.n	80135ea <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80135c4:	687a      	ldr	r2, [r7, #4]
 80135c6:	33b0      	adds	r3, #176	; 0xb0
 80135c8:	009b      	lsls	r3, r3, #2
 80135ca:	4413      	add	r3, r2
 80135cc:	685b      	ldr	r3, [r3, #4]
 80135ce:	699b      	ldr	r3, [r3, #24]
 80135d0:	4798      	blx	r3
 80135d2:	4603      	mov	r3, r0
 80135d4:	461a      	mov	r2, r3
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80135da:	693b      	ldr	r3, [r7, #16]
 80135dc:	2201      	movs	r2, #1
 80135de:	4619      	mov	r1, r3
 80135e0:	6878      	ldr	r0, [r7, #4]
 80135e2:	f003 f8f9 	bl	80167d8 <USBD_CtlSendData>
 80135e6:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80135e8:	e025      	b.n	8013636 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 80135ea:	6839      	ldr	r1, [r7, #0]
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	f003 f882 	bl	80166f6 <USBD_CtlError>
            ret = USBD_FAIL;
 80135f2:	2303      	movs	r3, #3
 80135f4:	75fb      	strb	r3, [r7, #23]
          break;
 80135f6:	e01e      	b.n	8013636 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	885b      	ldrh	r3, [r3, #2]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d10c      	bne.n	801361a <USBD_MSC_Setup+0xc2>
 8013600:	683b      	ldr	r3, [r7, #0]
 8013602:	88db      	ldrh	r3, [r3, #6]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d108      	bne.n	801361a <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	781b      	ldrb	r3, [r3, #0]
 801360c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801360e:	2b00      	cmp	r3, #0
 8013610:	db03      	blt.n	801361a <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8013612:	6878      	ldr	r0, [r7, #4]
 8013614:	f000 f9b4 	bl	8013980 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013618:	e00d      	b.n	8013636 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 801361a:	6839      	ldr	r1, [r7, #0]
 801361c:	6878      	ldr	r0, [r7, #4]
 801361e:	f003 f86a 	bl	80166f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8013622:	2303      	movs	r3, #3
 8013624:	75fb      	strb	r3, [r7, #23]
          break;
 8013626:	e006      	b.n	8013636 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8013628:	6839      	ldr	r1, [r7, #0]
 801362a:	6878      	ldr	r0, [r7, #4]
 801362c:	f003 f863 	bl	80166f6 <USBD_CtlError>
          ret = USBD_FAIL;
 8013630:	2303      	movs	r3, #3
 8013632:	75fb      	strb	r3, [r7, #23]
          break;
 8013634:	bf00      	nop
      }
      break;
 8013636:	e086      	b.n	8013746 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	785b      	ldrb	r3, [r3, #1]
 801363c:	2b0b      	cmp	r3, #11
 801363e:	d872      	bhi.n	8013726 <USBD_MSC_Setup+0x1ce>
 8013640:	a201      	add	r2, pc, #4	; (adr r2, 8013648 <USBD_MSC_Setup+0xf0>)
 8013642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013646:	bf00      	nop
 8013648:	08013679 	.word	0x08013679
 801364c:	080136f5 	.word	0x080136f5
 8013650:	08013727 	.word	0x08013727
 8013654:	08013727 	.word	0x08013727
 8013658:	08013727 	.word	0x08013727
 801365c:	08013727 	.word	0x08013727
 8013660:	08013727 	.word	0x08013727
 8013664:	08013727 	.word	0x08013727
 8013668:	08013727 	.word	0x08013727
 801366c:	08013727 	.word	0x08013727
 8013670:	080136a3 	.word	0x080136a3
 8013674:	080136cd 	.word	0x080136cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801367e:	b2db      	uxtb	r3, r3
 8013680:	2b03      	cmp	r3, #3
 8013682:	d107      	bne.n	8013694 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013684:	f107 030e 	add.w	r3, r7, #14
 8013688:	2202      	movs	r2, #2
 801368a:	4619      	mov	r1, r3
 801368c:	6878      	ldr	r0, [r7, #4]
 801368e:	f003 f8a3 	bl	80167d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013692:	e050      	b.n	8013736 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8013694:	6839      	ldr	r1, [r7, #0]
 8013696:	6878      	ldr	r0, [r7, #4]
 8013698:	f003 f82d 	bl	80166f6 <USBD_CtlError>
            ret = USBD_FAIL;
 801369c:	2303      	movs	r3, #3
 801369e:	75fb      	strb	r3, [r7, #23]
          break;
 80136a0:	e049      	b.n	8013736 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136a8:	b2db      	uxtb	r3, r3
 80136aa:	2b03      	cmp	r3, #3
 80136ac:	d107      	bne.n	80136be <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80136ae:	693b      	ldr	r3, [r7, #16]
 80136b0:	3304      	adds	r3, #4
 80136b2:	2201      	movs	r2, #1
 80136b4:	4619      	mov	r1, r3
 80136b6:	6878      	ldr	r0, [r7, #4]
 80136b8:	f003 f88e 	bl	80167d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80136bc:	e03b      	b.n	8013736 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80136be:	6839      	ldr	r1, [r7, #0]
 80136c0:	6878      	ldr	r0, [r7, #4]
 80136c2:	f003 f818 	bl	80166f6 <USBD_CtlError>
            ret = USBD_FAIL;
 80136c6:	2303      	movs	r3, #3
 80136c8:	75fb      	strb	r3, [r7, #23]
          break;
 80136ca:	e034      	b.n	8013736 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136d2:	b2db      	uxtb	r3, r3
 80136d4:	2b03      	cmp	r3, #3
 80136d6:	d106      	bne.n	80136e6 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80136d8:	683b      	ldr	r3, [r7, #0]
 80136da:	885b      	ldrh	r3, [r3, #2]
 80136dc:	b2db      	uxtb	r3, r3
 80136de:	461a      	mov	r2, r3
 80136e0:	693b      	ldr	r3, [r7, #16]
 80136e2:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80136e4:	e027      	b.n	8013736 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80136e6:	6839      	ldr	r1, [r7, #0]
 80136e8:	6878      	ldr	r0, [r7, #4]
 80136ea:	f003 f804 	bl	80166f6 <USBD_CtlError>
            ret = USBD_FAIL;
 80136ee:	2303      	movs	r3, #3
 80136f0:	75fb      	strb	r3, [r7, #23]
          break;
 80136f2:	e020      	b.n	8013736 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136fa:	b2db      	uxtb	r3, r3
 80136fc:	2b03      	cmp	r3, #3
 80136fe:	d119      	bne.n	8013734 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8013700:	683b      	ldr	r3, [r7, #0]
 8013702:	885b      	ldrh	r3, [r3, #2]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d115      	bne.n	8013734 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	889b      	ldrh	r3, [r3, #4]
 801370c:	b2db      	uxtb	r3, r3
 801370e:	4619      	mov	r1, r3
 8013710:	6878      	ldr	r0, [r7, #4]
 8013712:	f005 f831 	bl	8018778 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	889b      	ldrh	r3, [r3, #4]
 801371a:	b2db      	uxtb	r3, r3
 801371c:	4619      	mov	r1, r3
 801371e:	6878      	ldr	r0, [r7, #4]
 8013720:	f000 fb2e 	bl	8013d80 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8013724:	e006      	b.n	8013734 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8013726:	6839      	ldr	r1, [r7, #0]
 8013728:	6878      	ldr	r0, [r7, #4]
 801372a:	f002 ffe4 	bl	80166f6 <USBD_CtlError>
          ret = USBD_FAIL;
 801372e:	2303      	movs	r3, #3
 8013730:	75fb      	strb	r3, [r7, #23]
          break;
 8013732:	e000      	b.n	8013736 <USBD_MSC_Setup+0x1de>
          break;
 8013734:	bf00      	nop
      }
      break;
 8013736:	e006      	b.n	8013746 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8013738:	6839      	ldr	r1, [r7, #0]
 801373a:	6878      	ldr	r0, [r7, #4]
 801373c:	f002 ffdb 	bl	80166f6 <USBD_CtlError>
      ret = USBD_FAIL;
 8013740:	2303      	movs	r3, #3
 8013742:	75fb      	strb	r3, [r7, #23]
      break;
 8013744:	bf00      	nop
  }

  return (uint8_t)ret;
 8013746:	7dfb      	ldrb	r3, [r7, #23]
}
 8013748:	4618      	mov	r0, r3
 801374a:	3718      	adds	r7, #24
 801374c:	46bd      	mov	sp, r7
 801374e:	bd80      	pop	{r7, pc}

08013750 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b082      	sub	sp, #8
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
 8013758:	460b      	mov	r3, r1
 801375a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801375c:	78fb      	ldrb	r3, [r7, #3]
 801375e:	4619      	mov	r1, r3
 8013760:	6878      	ldr	r0, [r7, #4]
 8013762:	f000 f959 	bl	8013a18 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8013766:	2300      	movs	r3, #0
}
 8013768:	4618      	mov	r0, r3
 801376a:	3708      	adds	r7, #8
 801376c:	46bd      	mov	sp, r7
 801376e:	bd80      	pop	{r7, pc}

08013770 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b082      	sub	sp, #8
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
 8013778:	460b      	mov	r3, r1
 801377a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801377c:	78fb      	ldrb	r3, [r7, #3]
 801377e:	4619      	mov	r1, r3
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f000 f983 	bl	8013a8c <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8013786:	2300      	movs	r3, #0
}
 8013788:	4618      	mov	r0, r3
 801378a:	3708      	adds	r7, #8
 801378c:	46bd      	mov	sp, r7
 801378e:	bd80      	pop	{r7, pc}

08013790 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8013790:	b580      	push	{r7, lr}
 8013792:	b084      	sub	sp, #16
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8013798:	2181      	movs	r1, #129	; 0x81
 801379a:	4812      	ldr	r0, [pc, #72]	; (80137e4 <USBD_MSC_GetHSCfgDesc+0x54>)
 801379c:	f002 f972 	bl	8015a84 <USBD_GetEpDesc>
 80137a0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80137a2:	2101      	movs	r1, #1
 80137a4:	480f      	ldr	r0, [pc, #60]	; (80137e4 <USBD_MSC_GetHSCfgDesc+0x54>)
 80137a6:	f002 f96d 	bl	8015a84 <USBD_GetEpDesc>
 80137aa:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d006      	beq.n	80137c0 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	2200      	movs	r2, #0
 80137b6:	711a      	strb	r2, [r3, #4]
 80137b8:	2200      	movs	r2, #0
 80137ba:	f042 0202 	orr.w	r2, r2, #2
 80137be:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d006      	beq.n	80137d4 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80137c6:	68bb      	ldr	r3, [r7, #8]
 80137c8:	2200      	movs	r2, #0
 80137ca:	711a      	strb	r2, [r3, #4]
 80137cc:	2200      	movs	r2, #0
 80137ce:	f042 0202 	orr.w	r2, r2, #2
 80137d2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	2220      	movs	r2, #32
 80137d8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80137da:	4b02      	ldr	r3, [pc, #8]	; (80137e4 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 80137dc:	4618      	mov	r0, r3
 80137de:	3710      	adds	r7, #16
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd80      	pop	{r7, pc}
 80137e4:	20000048 	.word	0x20000048

080137e8 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b084      	sub	sp, #16
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80137f0:	2181      	movs	r1, #129	; 0x81
 80137f2:	4812      	ldr	r0, [pc, #72]	; (801383c <USBD_MSC_GetFSCfgDesc+0x54>)
 80137f4:	f002 f946 	bl	8015a84 <USBD_GetEpDesc>
 80137f8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80137fa:	2101      	movs	r1, #1
 80137fc:	480f      	ldr	r0, [pc, #60]	; (801383c <USBD_MSC_GetFSCfgDesc+0x54>)
 80137fe:	f002 f941 	bl	8015a84 <USBD_GetEpDesc>
 8013802:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d006      	beq.n	8013818 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	2200      	movs	r2, #0
 801380e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013812:	711a      	strb	r2, [r3, #4]
 8013814:	2200      	movs	r2, #0
 8013816:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8013818:	68bb      	ldr	r3, [r7, #8]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d006      	beq.n	801382c <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	2200      	movs	r2, #0
 8013822:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013826:	711a      	strb	r2, [r3, #4]
 8013828:	2200      	movs	r2, #0
 801382a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	2220      	movs	r2, #32
 8013830:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8013832:	4b02      	ldr	r3, [pc, #8]	; (801383c <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8013834:	4618      	mov	r0, r3
 8013836:	3710      	adds	r7, #16
 8013838:	46bd      	mov	sp, r7
 801383a:	bd80      	pop	{r7, pc}
 801383c:	20000048 	.word	0x20000048

08013840 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013840:	b580      	push	{r7, lr}
 8013842:	b084      	sub	sp, #16
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8013848:	2181      	movs	r1, #129	; 0x81
 801384a:	4812      	ldr	r0, [pc, #72]	; (8013894 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 801384c:	f002 f91a 	bl	8015a84 <USBD_GetEpDesc>
 8013850:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8013852:	2101      	movs	r1, #1
 8013854:	480f      	ldr	r0, [pc, #60]	; (8013894 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8013856:	f002 f915 	bl	8015a84 <USBD_GetEpDesc>
 801385a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d006      	beq.n	8013870 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	2200      	movs	r2, #0
 8013866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801386a:	711a      	strb	r2, [r3, #4]
 801386c:	2200      	movs	r2, #0
 801386e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8013870:	68bb      	ldr	r3, [r7, #8]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d006      	beq.n	8013884 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8013876:	68bb      	ldr	r3, [r7, #8]
 8013878:	2200      	movs	r2, #0
 801387a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801387e:	711a      	strb	r2, [r3, #4]
 8013880:	2200      	movs	r2, #0
 8013882:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	2220      	movs	r2, #32
 8013888:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801388a:	4b02      	ldr	r3, [pc, #8]	; (8013894 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 801388c:	4618      	mov	r0, r3
 801388e:	3710      	adds	r7, #16
 8013890:	46bd      	mov	sp, r7
 8013892:	bd80      	pop	{r7, pc}
 8013894:	20000048 	.word	0x20000048

08013898 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013898:	b480      	push	{r7}
 801389a:	b083      	sub	sp, #12
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	220a      	movs	r2, #10
 80138a4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80138a6:	4b03      	ldr	r3, [pc, #12]	; (80138b4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80138a8:	4618      	mov	r0, r3
 80138aa:	370c      	adds	r7, #12
 80138ac:	46bd      	mov	sp, r7
 80138ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b2:	4770      	bx	lr
 80138b4:	20000068 	.word	0x20000068

080138b8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80138b8:	b480      	push	{r7}
 80138ba:	b083      	sub	sp, #12
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
 80138c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80138c2:	683b      	ldr	r3, [r7, #0]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d101      	bne.n	80138cc <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80138c8:	2303      	movs	r3, #3
 80138ca:	e009      	b.n	80138e0 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80138d2:	687a      	ldr	r2, [r7, #4]
 80138d4:	33b0      	adds	r3, #176	; 0xb0
 80138d6:	009b      	lsls	r3, r3, #2
 80138d8:	4413      	add	r3, r2
 80138da:	683a      	ldr	r2, [r7, #0]
 80138dc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80138de:	2300      	movs	r3, #0
}
 80138e0:	4618      	mov	r0, r3
 80138e2:	370c      	adds	r7, #12
 80138e4:	46bd      	mov	sp, r7
 80138e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ea:	4770      	bx	lr

080138ec <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b084      	sub	sp, #16
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	32b0      	adds	r2, #176	; 0xb0
 80138fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013902:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d032      	beq.n	8013970 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	2200      	movs	r2, #0
 801390e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	2200      	movs	r2, #0
 8013914:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	2200      	movs	r2, #0
 801391a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	2200      	movs	r2, #0
 8013922:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	2200      	movs	r2, #0
 801392a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013934:	687a      	ldr	r2, [r7, #4]
 8013936:	33b0      	adds	r3, #176	; 0xb0
 8013938:	009b      	lsls	r3, r3, #2
 801393a:	4413      	add	r3, r2
 801393c:	685b      	ldr	r3, [r3, #4]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	2000      	movs	r0, #0
 8013942:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8013944:	4b0c      	ldr	r3, [pc, #48]	; (8013978 <MSC_BOT_Init+0x8c>)
 8013946:	781b      	ldrb	r3, [r3, #0]
 8013948:	4619      	mov	r1, r3
 801394a:	6878      	ldr	r0, [r7, #4]
 801394c:	f004 ff14 	bl	8018778 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8013950:	4b0a      	ldr	r3, [pc, #40]	; (801397c <MSC_BOT_Init+0x90>)
 8013952:	781b      	ldrb	r3, [r3, #0]
 8013954:	4619      	mov	r1, r3
 8013956:	6878      	ldr	r0, [r7, #4]
 8013958:	f004 ff0e 	bl	8018778 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801395c:	4b06      	ldr	r3, [pc, #24]	; (8013978 <MSC_BOT_Init+0x8c>)
 801395e:	7819      	ldrb	r1, [r3, #0]
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8013966:	231f      	movs	r3, #31
 8013968:	6878      	ldr	r0, [r7, #4]
 801396a:	f004 ffce 	bl	801890a <USBD_LL_PrepareReceive>
 801396e:	e000      	b.n	8013972 <MSC_BOT_Init+0x86>
    return;
 8013970:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8013972:	3710      	adds	r7, #16
 8013974:	46bd      	mov	sp, r7
 8013976:	bd80      	pop	{r7, pc}
 8013978:	20000073 	.word	0x20000073
 801397c:	20000072 	.word	0x20000072

08013980 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b084      	sub	sp, #16
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	32b0      	adds	r2, #176	; 0xb0
 8013992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013996:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d01b      	beq.n	80139d6 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	2200      	movs	r2, #0
 80139a2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	2201      	movs	r2, #1
 80139a8:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80139aa:	4b0d      	ldr	r3, [pc, #52]	; (80139e0 <MSC_BOT_Reset+0x60>)
 80139ac:	781b      	ldrb	r3, [r3, #0]
 80139ae:	4619      	mov	r1, r3
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	f004 ff1f 	bl	80187f4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80139b6:	4b0b      	ldr	r3, [pc, #44]	; (80139e4 <MSC_BOT_Reset+0x64>)
 80139b8:	781b      	ldrb	r3, [r3, #0]
 80139ba:	4619      	mov	r1, r3
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f004 ff19 	bl	80187f4 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80139c2:	4b08      	ldr	r3, [pc, #32]	; (80139e4 <MSC_BOT_Reset+0x64>)
 80139c4:	7819      	ldrb	r1, [r3, #0]
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80139cc:	231f      	movs	r3, #31
 80139ce:	6878      	ldr	r0, [r7, #4]
 80139d0:	f004 ff9b 	bl	801890a <USBD_LL_PrepareReceive>
 80139d4:	e000      	b.n	80139d8 <MSC_BOT_Reset+0x58>
    return;
 80139d6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80139d8:	3710      	adds	r7, #16
 80139da:	46bd      	mov	sp, r7
 80139dc:	bd80      	pop	{r7, pc}
 80139de:	bf00      	nop
 80139e0:	20000072 	.word	0x20000072
 80139e4:	20000073 	.word	0x20000073

080139e8 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80139e8:	b480      	push	{r7}
 80139ea:	b085      	sub	sp, #20
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	32b0      	adds	r2, #176	; 0xb0
 80139fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139fe:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d002      	beq.n	8013a0c <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	2200      	movs	r2, #0
 8013a0a:	721a      	strb	r2, [r3, #8]
  }
}
 8013a0c:	bf00      	nop
 8013a0e:	3714      	adds	r7, #20
 8013a10:	46bd      	mov	sp, r7
 8013a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a16:	4770      	bx	lr

08013a18 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b084      	sub	sp, #16
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
 8013a20:	460b      	mov	r3, r1
 8013a22:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	32b0      	adds	r2, #176	; 0xb0
 8013a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a32:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d020      	beq.n	8013a7c <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	7a1b      	ldrb	r3, [r3, #8]
 8013a3e:	2b02      	cmp	r3, #2
 8013a40:	d005      	beq.n	8013a4e <MSC_BOT_DataIn+0x36>
 8013a42:	2b02      	cmp	r3, #2
 8013a44:	db1c      	blt.n	8013a80 <MSC_BOT_DataIn+0x68>
 8013a46:	3b03      	subs	r3, #3
 8013a48:	2b01      	cmp	r3, #1
 8013a4a:	d819      	bhi.n	8013a80 <MSC_BOT_DataIn+0x68>
 8013a4c:	e011      	b.n	8013a72 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8013a5a:	461a      	mov	r2, r3
 8013a5c:	6878      	ldr	r0, [r7, #4]
 8013a5e:	f000 f9c9 	bl	8013df4 <SCSI_ProcessCmd>
 8013a62:	4603      	mov	r3, r0
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	da0d      	bge.n	8013a84 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013a68:	2101      	movs	r1, #1
 8013a6a:	6878      	ldr	r0, [r7, #4]
 8013a6c:	f000 f90c 	bl	8013c88 <MSC_BOT_SendCSW>
      }
      break;
 8013a70:	e008      	b.n	8013a84 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013a72:	2100      	movs	r1, #0
 8013a74:	6878      	ldr	r0, [r7, #4]
 8013a76:	f000 f907 	bl	8013c88 <MSC_BOT_SendCSW>
      break;
 8013a7a:	e004      	b.n	8013a86 <MSC_BOT_DataIn+0x6e>
    return;
 8013a7c:	bf00      	nop
 8013a7e:	e002      	b.n	8013a86 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8013a80:	bf00      	nop
 8013a82:	e000      	b.n	8013a86 <MSC_BOT_DataIn+0x6e>
      break;
 8013a84:	bf00      	nop
  }
}
 8013a86:	3710      	adds	r7, #16
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}

08013a8c <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b084      	sub	sp, #16
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
 8013a94:	460b      	mov	r3, r1
 8013a96:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	32b0      	adds	r2, #176	; 0xb0
 8013aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013aa6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d01c      	beq.n	8013ae8 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	7a1b      	ldrb	r3, [r3, #8]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d002      	beq.n	8013abc <MSC_BOT_DataOut+0x30>
 8013ab6:	2b01      	cmp	r3, #1
 8013ab8:	d004      	beq.n	8013ac4 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8013aba:	e018      	b.n	8013aee <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8013abc:	6878      	ldr	r0, [r7, #4]
 8013abe:	f000 f819 	bl	8013af4 <MSC_BOT_CBW_Decode>
      break;
 8013ac2:	e014      	b.n	8013aee <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f000 f98e 	bl	8013df4 <SCSI_ProcessCmd>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	da06      	bge.n	8013aec <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013ade:	2101      	movs	r1, #1
 8013ae0:	6878      	ldr	r0, [r7, #4]
 8013ae2:	f000 f8d1 	bl	8013c88 <MSC_BOT_SendCSW>
      break;
 8013ae6:	e001      	b.n	8013aec <MSC_BOT_DataOut+0x60>
    return;
 8013ae8:	bf00      	nop
 8013aea:	e000      	b.n	8013aee <MSC_BOT_DataOut+0x62>
      break;
 8013aec:	bf00      	nop
  }
}
 8013aee:	3710      	adds	r7, #16
 8013af0:	46bd      	mov	sp, r7
 8013af2:	bd80      	pop	{r7, pc}

08013af4 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b084      	sub	sp, #16
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	32b0      	adds	r2, #176	; 0xb0
 8013b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b0a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d079      	beq.n	8013c06 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8013b2a:	4b3a      	ldr	r3, [pc, #232]	; (8013c14 <MSC_BOT_CBW_Decode+0x120>)
 8013b2c:	781b      	ldrb	r3, [r3, #0]
 8013b2e:	4619      	mov	r1, r3
 8013b30:	6878      	ldr	r0, [r7, #4]
 8013b32:	f004 ff0b 	bl	801894c <USBD_LL_GetRxDataSize>
 8013b36:	4603      	mov	r3, r0
 8013b38:	2b1f      	cmp	r3, #31
 8013b3a:	d114      	bne.n	8013b66 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8013b42:	4a35      	ldr	r2, [pc, #212]	; (8013c18 <MSC_BOT_CBW_Decode+0x124>)
 8013b44:	4293      	cmp	r3, r2
 8013b46:	d10e      	bne.n	8013b66 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013b4e:	2b01      	cmp	r3, #1
 8013b50:	d809      	bhi.n	8013b66 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d004      	beq.n	8013b66 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013b62:	2b10      	cmp	r3, #16
 8013b64:	d90e      	bls.n	8013b84 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8013b6c:	2320      	movs	r3, #32
 8013b6e:	2205      	movs	r2, #5
 8013b70:	6878      	ldr	r0, [r7, #4]
 8013b72:	f000 fe28 	bl	80147c6 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	2202      	movs	r2, #2
 8013b7a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8013b7c:	6878      	ldr	r0, [r7, #4]
 8013b7e:	f000 f8bd 	bl	8013cfc <MSC_BOT_Abort>
 8013b82:	e043      	b.n	8013c0c <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8013b90:	461a      	mov	r2, r3
 8013b92:	6878      	ldr	r0, [r7, #4]
 8013b94:	f000 f92e 	bl	8013df4 <SCSI_ProcessCmd>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	da0c      	bge.n	8013bb8 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	7a1b      	ldrb	r3, [r3, #8]
 8013ba2:	2b05      	cmp	r3, #5
 8013ba4:	d104      	bne.n	8013bb0 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013ba6:	2101      	movs	r1, #1
 8013ba8:	6878      	ldr	r0, [r7, #4]
 8013baa:	f000 f86d 	bl	8013c88 <MSC_BOT_SendCSW>
 8013bae:	e02d      	b.n	8013c0c <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013bb0:	6878      	ldr	r0, [r7, #4]
 8013bb2:	f000 f8a3 	bl	8013cfc <MSC_BOT_Abort>
 8013bb6:	e029      	b.n	8013c0c <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	7a1b      	ldrb	r3, [r3, #8]
 8013bbc:	2b02      	cmp	r3, #2
 8013bbe:	d024      	beq.n	8013c0a <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013bc4:	2b01      	cmp	r3, #1
 8013bc6:	d020      	beq.n	8013c0a <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013bcc:	2b03      	cmp	r3, #3
 8013bce:	d01c      	beq.n	8013c0a <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	68db      	ldr	r3, [r3, #12]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d009      	beq.n	8013bec <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	f103 0110 	add.w	r1, r3, #16
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	68db      	ldr	r3, [r3, #12]
 8013be2:	461a      	mov	r2, r3
 8013be4:	6878      	ldr	r0, [r7, #4]
 8013be6:	f000 f819 	bl	8013c1c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8013bea:	e00f      	b.n	8013c0c <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	68db      	ldr	r3, [r3, #12]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d104      	bne.n	8013bfe <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013bf4:	2100      	movs	r1, #0
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	f000 f846 	bl	8013c88 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8013bfc:	e006      	b.n	8013c0c <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013bfe:	6878      	ldr	r0, [r7, #4]
 8013c00:	f000 f87c 	bl	8013cfc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8013c04:	e002      	b.n	8013c0c <MSC_BOT_CBW_Decode+0x118>
    return;
 8013c06:	bf00      	nop
 8013c08:	e000      	b.n	8013c0c <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8013c0a:	bf00      	nop
    }
  }
}
 8013c0c:	3710      	adds	r7, #16
 8013c0e:	46bd      	mov	sp, r7
 8013c10:	bd80      	pop	{r7, pc}
 8013c12:	bf00      	nop
 8013c14:	20000073 	.word	0x20000073
 8013c18:	43425355 	.word	0x43425355

08013c1c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b086      	sub	sp, #24
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	60f8      	str	r0, [r7, #12]
 8013c24:	60b9      	str	r1, [r7, #8]
 8013c26:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	32b0      	adds	r2, #176	; 0xb0
 8013c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c36:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013c38:	697b      	ldr	r3, [r7, #20]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d01e      	beq.n	8013c7c <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8013c3e:	697b      	ldr	r3, [r7, #20]
 8013c40:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013c44:	687a      	ldr	r2, [r7, #4]
 8013c46:	4293      	cmp	r3, r2
 8013c48:	bf28      	it	cs
 8013c4a:	4613      	movcs	r3, r2
 8013c4c:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8013c4e:	697b      	ldr	r3, [r7, #20]
 8013c50:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	1ad2      	subs	r2, r2, r3
 8013c58:	697b      	ldr	r3, [r7, #20]
 8013c5a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8013c5e:	697b      	ldr	r3, [r7, #20]
 8013c60:	2200      	movs	r2, #0
 8013c62:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8013c66:	697b      	ldr	r3, [r7, #20]
 8013c68:	2204      	movs	r2, #4
 8013c6a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8013c6c:	4b05      	ldr	r3, [pc, #20]	; (8013c84 <MSC_BOT_SendData+0x68>)
 8013c6e:	7819      	ldrb	r1, [r3, #0]
 8013c70:	693b      	ldr	r3, [r7, #16]
 8013c72:	68ba      	ldr	r2, [r7, #8]
 8013c74:	68f8      	ldr	r0, [r7, #12]
 8013c76:	f004 fe27 	bl	80188c8 <USBD_LL_Transmit>
 8013c7a:	e000      	b.n	8013c7e <MSC_BOT_SendData+0x62>
    return;
 8013c7c:	bf00      	nop
}
 8013c7e:	3718      	adds	r7, #24
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}
 8013c84:	20000072 	.word	0x20000072

08013c88 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b084      	sub	sp, #16
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
 8013c90:	460b      	mov	r3, r1
 8013c92:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	32b0      	adds	r2, #176	; 0xb0
 8013c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ca2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d01d      	beq.n	8013ce6 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	4a10      	ldr	r2, [pc, #64]	; (8013cf0 <MSC_BOT_SendCSW+0x68>)
 8013cae:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	78fa      	ldrb	r2, [r7, #3]
 8013cb6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8013cc0:	4b0c      	ldr	r3, [pc, #48]	; (8013cf4 <MSC_BOT_SendCSW+0x6c>)
 8013cc2:	7819      	ldrb	r1, [r3, #0]
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8013cca:	230d      	movs	r3, #13
 8013ccc:	6878      	ldr	r0, [r7, #4]
 8013cce:	f004 fdfb 	bl	80188c8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8013cd2:	4b09      	ldr	r3, [pc, #36]	; (8013cf8 <MSC_BOT_SendCSW+0x70>)
 8013cd4:	7819      	ldrb	r1, [r3, #0]
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8013cdc:	231f      	movs	r3, #31
 8013cde:	6878      	ldr	r0, [r7, #4]
 8013ce0:	f004 fe13 	bl	801890a <USBD_LL_PrepareReceive>
 8013ce4:	e000      	b.n	8013ce8 <MSC_BOT_SendCSW+0x60>
    return;
 8013ce6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8013ce8:	3710      	adds	r7, #16
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}
 8013cee:	bf00      	nop
 8013cf0:	53425355 	.word	0x53425355
 8013cf4:	20000072 	.word	0x20000072
 8013cf8:	20000073 	.word	0x20000073

08013cfc <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b084      	sub	sp, #16
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	32b0      	adds	r2, #176	; 0xb0
 8013d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d12:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d02a      	beq.n	8013d70 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d10e      	bne.n	8013d42 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d009      	beq.n	8013d42 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d105      	bne.n	8013d42 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8013d36:	4b10      	ldr	r3, [pc, #64]	; (8013d78 <MSC_BOT_Abort+0x7c>)
 8013d38:	781b      	ldrb	r3, [r3, #0]
 8013d3a:	4619      	mov	r1, r3
 8013d3c:	6878      	ldr	r0, [r7, #4]
 8013d3e:	f004 fd3a 	bl	80187b6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8013d42:	4b0e      	ldr	r3, [pc, #56]	; (8013d7c <MSC_BOT_Abort+0x80>)
 8013d44:	781b      	ldrb	r3, [r3, #0]
 8013d46:	4619      	mov	r1, r3
 8013d48:	6878      	ldr	r0, [r7, #4]
 8013d4a:	f004 fd34 	bl	80187b6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	7a5b      	ldrb	r3, [r3, #9]
 8013d52:	2b02      	cmp	r3, #2
 8013d54:	d10d      	bne.n	8013d72 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8013d56:	4b09      	ldr	r3, [pc, #36]	; (8013d7c <MSC_BOT_Abort+0x80>)
 8013d58:	781b      	ldrb	r3, [r3, #0]
 8013d5a:	4619      	mov	r1, r3
 8013d5c:	6878      	ldr	r0, [r7, #4]
 8013d5e:	f004 fd2a 	bl	80187b6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8013d62:	4b05      	ldr	r3, [pc, #20]	; (8013d78 <MSC_BOT_Abort+0x7c>)
 8013d64:	781b      	ldrb	r3, [r3, #0]
 8013d66:	4619      	mov	r1, r3
 8013d68:	6878      	ldr	r0, [r7, #4]
 8013d6a:	f004 fd24 	bl	80187b6 <USBD_LL_StallEP>
 8013d6e:	e000      	b.n	8013d72 <MSC_BOT_Abort+0x76>
    return;
 8013d70:	bf00      	nop
  }
}
 8013d72:	3710      	adds	r7, #16
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bd80      	pop	{r7, pc}
 8013d78:	20000073 	.word	0x20000073
 8013d7c:	20000072 	.word	0x20000072

08013d80 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b084      	sub	sp, #16
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
 8013d88:	460b      	mov	r3, r1
 8013d8a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	32b0      	adds	r2, #176	; 0xb0
 8013d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d9a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d01d      	beq.n	8013dde <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	7a5b      	ldrb	r3, [r3, #9]
 8013da6:	2b02      	cmp	r3, #2
 8013da8:	d10c      	bne.n	8013dc4 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8013daa:	4b10      	ldr	r3, [pc, #64]	; (8013dec <MSC_BOT_CplClrFeature+0x6c>)
 8013dac:	781b      	ldrb	r3, [r3, #0]
 8013dae:	4619      	mov	r1, r3
 8013db0:	6878      	ldr	r0, [r7, #4]
 8013db2:	f004 fd00 	bl	80187b6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8013db6:	4b0e      	ldr	r3, [pc, #56]	; (8013df0 <MSC_BOT_CplClrFeature+0x70>)
 8013db8:	781b      	ldrb	r3, [r3, #0]
 8013dba:	4619      	mov	r1, r3
 8013dbc:	6878      	ldr	r0, [r7, #4]
 8013dbe:	f004 fcfa 	bl	80187b6 <USBD_LL_StallEP>
 8013dc2:	e00f      	b.n	8013de4 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8013dc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	da0a      	bge.n	8013de2 <MSC_BOT_CplClrFeature+0x62>
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	7a5b      	ldrb	r3, [r3, #9]
 8013dd0:	2b01      	cmp	r3, #1
 8013dd2:	d006      	beq.n	8013de2 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013dd4:	2101      	movs	r1, #1
 8013dd6:	6878      	ldr	r0, [r7, #4]
 8013dd8:	f7ff ff56 	bl	8013c88 <MSC_BOT_SendCSW>
 8013ddc:	e002      	b.n	8013de4 <MSC_BOT_CplClrFeature+0x64>
    return;
 8013dde:	bf00      	nop
 8013de0:	e000      	b.n	8013de4 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8013de2:	bf00      	nop
  }
}
 8013de4:	3710      	adds	r7, #16
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}
 8013dea:	bf00      	nop
 8013dec:	20000072 	.word	0x20000072
 8013df0:	20000073 	.word	0x20000073

08013df4 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b086      	sub	sp, #24
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	60f8      	str	r0, [r7, #12]
 8013dfc:	460b      	mov	r3, r1
 8013dfe:	607a      	str	r2, [r7, #4]
 8013e00:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	32b0      	adds	r2, #176	; 0xb0
 8013e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e10:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8013e12:	693b      	ldr	r3, [r7, #16]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d102      	bne.n	8013e1e <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8013e18:	f04f 33ff 	mov.w	r3, #4294967295
 8013e1c:	e168      	b.n	80140f0 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	781b      	ldrb	r3, [r3, #0]
 8013e22:	2baa      	cmp	r3, #170	; 0xaa
 8013e24:	f000 8144 	beq.w	80140b0 <SCSI_ProcessCmd+0x2bc>
 8013e28:	2baa      	cmp	r3, #170	; 0xaa
 8013e2a:	f300 8153 	bgt.w	80140d4 <SCSI_ProcessCmd+0x2e0>
 8013e2e:	2ba8      	cmp	r3, #168	; 0xa8
 8013e30:	f000 812c 	beq.w	801408c <SCSI_ProcessCmd+0x298>
 8013e34:	2ba8      	cmp	r3, #168	; 0xa8
 8013e36:	f300 814d 	bgt.w	80140d4 <SCSI_ProcessCmd+0x2e0>
 8013e3a:	2b5a      	cmp	r3, #90	; 0x5a
 8013e3c:	f300 80c0 	bgt.w	8013fc0 <SCSI_ProcessCmd+0x1cc>
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	f2c0 8147 	blt.w	80140d4 <SCSI_ProcessCmd+0x2e0>
 8013e46:	2b5a      	cmp	r3, #90	; 0x5a
 8013e48:	f200 8144 	bhi.w	80140d4 <SCSI_ProcessCmd+0x2e0>
 8013e4c:	a201      	add	r2, pc, #4	; (adr r2, 8013e54 <SCSI_ProcessCmd+0x60>)
 8013e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e52:	bf00      	nop
 8013e54:	08013fc7 	.word	0x08013fc7
 8013e58:	080140d5 	.word	0x080140d5
 8013e5c:	080140d5 	.word	0x080140d5
 8013e60:	08013fd9 	.word	0x08013fd9
 8013e64:	080140d5 	.word	0x080140d5
 8013e68:	080140d5 	.word	0x080140d5
 8013e6c:	080140d5 	.word	0x080140d5
 8013e70:	080140d5 	.word	0x080140d5
 8013e74:	080140d5 	.word	0x080140d5
 8013e78:	080140d5 	.word	0x080140d5
 8013e7c:	080140d5 	.word	0x080140d5
 8013e80:	080140d5 	.word	0x080140d5
 8013e84:	080140d5 	.word	0x080140d5
 8013e88:	080140d5 	.word	0x080140d5
 8013e8c:	080140d5 	.word	0x080140d5
 8013e90:	080140d5 	.word	0x080140d5
 8013e94:	080140d5 	.word	0x080140d5
 8013e98:	080140d5 	.word	0x080140d5
 8013e9c:	08013feb 	.word	0x08013feb
 8013ea0:	080140d5 	.word	0x080140d5
 8013ea4:	080140d5 	.word	0x080140d5
 8013ea8:	080140d5 	.word	0x080140d5
 8013eac:	080140d5 	.word	0x080140d5
 8013eb0:	080140d5 	.word	0x080140d5
 8013eb4:	080140d5 	.word	0x080140d5
 8013eb8:	080140d5 	.word	0x080140d5
 8013ebc:	08014021 	.word	0x08014021
 8013ec0:	08013ffd 	.word	0x08013ffd
 8013ec4:	080140d5 	.word	0x080140d5
 8013ec8:	080140d5 	.word	0x080140d5
 8013ecc:	0801400f 	.word	0x0801400f
 8013ed0:	080140d5 	.word	0x080140d5
 8013ed4:	080140d5 	.word	0x080140d5
 8013ed8:	080140d5 	.word	0x080140d5
 8013edc:	080140d5 	.word	0x080140d5
 8013ee0:	08014045 	.word	0x08014045
 8013ee4:	080140d5 	.word	0x080140d5
 8013ee8:	08014057 	.word	0x08014057
 8013eec:	080140d5 	.word	0x080140d5
 8013ef0:	080140d5 	.word	0x080140d5
 8013ef4:	0801407b 	.word	0x0801407b
 8013ef8:	080140d5 	.word	0x080140d5
 8013efc:	0801409f 	.word	0x0801409f
 8013f00:	080140d5 	.word	0x080140d5
 8013f04:	080140d5 	.word	0x080140d5
 8013f08:	080140d5 	.word	0x080140d5
 8013f0c:	080140d5 	.word	0x080140d5
 8013f10:	080140c3 	.word	0x080140c3
 8013f14:	080140d5 	.word	0x080140d5
 8013f18:	080140d5 	.word	0x080140d5
 8013f1c:	080140d5 	.word	0x080140d5
 8013f20:	080140d5 	.word	0x080140d5
 8013f24:	080140d5 	.word	0x080140d5
 8013f28:	080140d5 	.word	0x080140d5
 8013f2c:	080140d5 	.word	0x080140d5
 8013f30:	080140d5 	.word	0x080140d5
 8013f34:	080140d5 	.word	0x080140d5
 8013f38:	080140d5 	.word	0x080140d5
 8013f3c:	080140d5 	.word	0x080140d5
 8013f40:	080140d5 	.word	0x080140d5
 8013f44:	080140d5 	.word	0x080140d5
 8013f48:	080140d5 	.word	0x080140d5
 8013f4c:	080140d5 	.word	0x080140d5
 8013f50:	080140d5 	.word	0x080140d5
 8013f54:	080140d5 	.word	0x080140d5
 8013f58:	080140d5 	.word	0x080140d5
 8013f5c:	080140d5 	.word	0x080140d5
 8013f60:	080140d5 	.word	0x080140d5
 8013f64:	080140d5 	.word	0x080140d5
 8013f68:	080140d5 	.word	0x080140d5
 8013f6c:	080140d5 	.word	0x080140d5
 8013f70:	080140d5 	.word	0x080140d5
 8013f74:	080140d5 	.word	0x080140d5
 8013f78:	080140d5 	.word	0x080140d5
 8013f7c:	080140d5 	.word	0x080140d5
 8013f80:	080140d5 	.word	0x080140d5
 8013f84:	080140d5 	.word	0x080140d5
 8013f88:	080140d5 	.word	0x080140d5
 8013f8c:	080140d5 	.word	0x080140d5
 8013f90:	080140d5 	.word	0x080140d5
 8013f94:	080140d5 	.word	0x080140d5
 8013f98:	080140d5 	.word	0x080140d5
 8013f9c:	080140d5 	.word	0x080140d5
 8013fa0:	080140d5 	.word	0x080140d5
 8013fa4:	080140d5 	.word	0x080140d5
 8013fa8:	080140d5 	.word	0x080140d5
 8013fac:	080140d5 	.word	0x080140d5
 8013fb0:	080140d5 	.word	0x080140d5
 8013fb4:	080140d5 	.word	0x080140d5
 8013fb8:	080140d5 	.word	0x080140d5
 8013fbc:	08014033 	.word	0x08014033
 8013fc0:	2b9e      	cmp	r3, #158	; 0x9e
 8013fc2:	d051      	beq.n	8014068 <SCSI_ProcessCmd+0x274>
 8013fc4:	e086      	b.n	80140d4 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8013fc6:	7afb      	ldrb	r3, [r7, #11]
 8013fc8:	687a      	ldr	r2, [r7, #4]
 8013fca:	4619      	mov	r1, r3
 8013fcc:	68f8      	ldr	r0, [r7, #12]
 8013fce:	f000 f893 	bl	80140f8 <SCSI_TestUnitReady>
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8013fd6:	e089      	b.n	80140ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8013fd8:	7afb      	ldrb	r3, [r7, #11]
 8013fda:	687a      	ldr	r2, [r7, #4]
 8013fdc:	4619      	mov	r1, r3
 8013fde:	68f8      	ldr	r0, [r7, #12]
 8013fe0:	f000 fb6e 	bl	80146c0 <SCSI_RequestSense>
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8013fe8:	e080      	b.n	80140ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8013fea:	7afb      	ldrb	r3, [r7, #11]
 8013fec:	687a      	ldr	r2, [r7, #4]
 8013fee:	4619      	mov	r1, r3
 8013ff0:	68f8      	ldr	r0, [r7, #12]
 8013ff2:	f000 f8db 	bl	80141ac <SCSI_Inquiry>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8013ffa:	e077      	b.n	80140ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8013ffc:	7afb      	ldrb	r3, [r7, #11]
 8013ffe:	687a      	ldr	r2, [r7, #4]
 8014000:	4619      	mov	r1, r3
 8014002:	68f8      	ldr	r0, [r7, #12]
 8014004:	f000 fc2a 	bl	801485c <SCSI_StartStopUnit>
 8014008:	4603      	mov	r3, r0
 801400a:	75fb      	strb	r3, [r7, #23]
      break;
 801400c:	e06e      	b.n	80140ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801400e:	7afb      	ldrb	r3, [r7, #11]
 8014010:	687a      	ldr	r2, [r7, #4]
 8014012:	4619      	mov	r1, r3
 8014014:	68f8      	ldr	r0, [r7, #12]
 8014016:	f000 fc76 	bl	8014906 <SCSI_AllowPreventRemovable>
 801401a:	4603      	mov	r3, r0
 801401c:	75fb      	strb	r3, [r7, #23]
      break;
 801401e:	e065      	b.n	80140ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8014020:	7afb      	ldrb	r3, [r7, #11]
 8014022:	687a      	ldr	r2, [r7, #4]
 8014024:	4619      	mov	r1, r3
 8014026:	68f8      	ldr	r0, [r7, #12]
 8014028:	f000 faea 	bl	8014600 <SCSI_ModeSense6>
 801402c:	4603      	mov	r3, r0
 801402e:	75fb      	strb	r3, [r7, #23]
      break;
 8014030:	e05c      	b.n	80140ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8014032:	7afb      	ldrb	r3, [r7, #11]
 8014034:	687a      	ldr	r2, [r7, #4]
 8014036:	4619      	mov	r1, r3
 8014038:	68f8      	ldr	r0, [r7, #12]
 801403a:	f000 fb11 	bl	8014660 <SCSI_ModeSense10>
 801403e:	4603      	mov	r3, r0
 8014040:	75fb      	strb	r3, [r7, #23]
      break;
 8014042:	e053      	b.n	80140ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8014044:	7afb      	ldrb	r3, [r7, #11]
 8014046:	687a      	ldr	r2, [r7, #4]
 8014048:	4619      	mov	r1, r3
 801404a:	68f8      	ldr	r0, [r7, #12]
 801404c:	f000 fa5d 	bl	801450a <SCSI_ReadFormatCapacity>
 8014050:	4603      	mov	r3, r0
 8014052:	75fb      	strb	r3, [r7, #23]
      break;
 8014054:	e04a      	b.n	80140ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8014056:	7afb      	ldrb	r3, [r7, #11]
 8014058:	687a      	ldr	r2, [r7, #4]
 801405a:	4619      	mov	r1, r3
 801405c:	68f8      	ldr	r0, [r7, #12]
 801405e:	f000 f923 	bl	80142a8 <SCSI_ReadCapacity10>
 8014062:	4603      	mov	r3, r0
 8014064:	75fb      	strb	r3, [r7, #23]
      break;
 8014066:	e041      	b.n	80140ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8014068:	7afb      	ldrb	r3, [r7, #11]
 801406a:	687a      	ldr	r2, [r7, #4]
 801406c:	4619      	mov	r1, r3
 801406e:	68f8      	ldr	r0, [r7, #12]
 8014070:	f000 f998 	bl	80143a4 <SCSI_ReadCapacity16>
 8014074:	4603      	mov	r3, r0
 8014076:	75fb      	strb	r3, [r7, #23]
      break;
 8014078:	e038      	b.n	80140ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801407a:	7afb      	ldrb	r3, [r7, #11]
 801407c:	687a      	ldr	r2, [r7, #4]
 801407e:	4619      	mov	r1, r3
 8014080:	68f8      	ldr	r0, [r7, #12]
 8014082:	f000 fc6d 	bl	8014960 <SCSI_Read10>
 8014086:	4603      	mov	r3, r0
 8014088:	75fb      	strb	r3, [r7, #23]
      break;
 801408a:	e02f      	b.n	80140ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 801408c:	7afb      	ldrb	r3, [r7, #11]
 801408e:	687a      	ldr	r2, [r7, #4]
 8014090:	4619      	mov	r1, r3
 8014092:	68f8      	ldr	r0, [r7, #12]
 8014094:	f000 fd0e 	bl	8014ab4 <SCSI_Read12>
 8014098:	4603      	mov	r3, r0
 801409a:	75fb      	strb	r3, [r7, #23]
      break;
 801409c:	e026      	b.n	80140ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801409e:	7afb      	ldrb	r3, [r7, #11]
 80140a0:	687a      	ldr	r2, [r7, #4]
 80140a2:	4619      	mov	r1, r3
 80140a4:	68f8      	ldr	r0, [r7, #12]
 80140a6:	f000 fdb9 	bl	8014c1c <SCSI_Write10>
 80140aa:	4603      	mov	r3, r0
 80140ac:	75fb      	strb	r3, [r7, #23]
      break;
 80140ae:	e01d      	b.n	80140ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80140b0:	7afb      	ldrb	r3, [r7, #11]
 80140b2:	687a      	ldr	r2, [r7, #4]
 80140b4:	4619      	mov	r1, r3
 80140b6:	68f8      	ldr	r0, [r7, #12]
 80140b8:	f000 fe86 	bl	8014dc8 <SCSI_Write12>
 80140bc:	4603      	mov	r3, r0
 80140be:	75fb      	strb	r3, [r7, #23]
      break;
 80140c0:	e014      	b.n	80140ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80140c2:	7afb      	ldrb	r3, [r7, #11]
 80140c4:	687a      	ldr	r2, [r7, #4]
 80140c6:	4619      	mov	r1, r3
 80140c8:	68f8      	ldr	r0, [r7, #12]
 80140ca:	f000 ff63 	bl	8014f94 <SCSI_Verify10>
 80140ce:	4603      	mov	r3, r0
 80140d0:	75fb      	strb	r3, [r7, #23]
      break;
 80140d2:	e00b      	b.n	80140ec <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80140d4:	7af9      	ldrb	r1, [r7, #11]
 80140d6:	2320      	movs	r3, #32
 80140d8:	2205      	movs	r2, #5
 80140da:	68f8      	ldr	r0, [r7, #12]
 80140dc:	f000 fb73 	bl	80147c6 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80140e0:	693b      	ldr	r3, [r7, #16]
 80140e2:	2202      	movs	r2, #2
 80140e4:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80140e6:	23ff      	movs	r3, #255	; 0xff
 80140e8:	75fb      	strb	r3, [r7, #23]
      break;
 80140ea:	bf00      	nop
  }

  return ret;
 80140ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80140f0:	4618      	mov	r0, r3
 80140f2:	3718      	adds	r7, #24
 80140f4:	46bd      	mov	sp, r7
 80140f6:	bd80      	pop	{r7, pc}

080140f8 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b086      	sub	sp, #24
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	60f8      	str	r0, [r7, #12]
 8014100:	460b      	mov	r3, r1
 8014102:	607a      	str	r2, [r7, #4]
 8014104:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	32b0      	adds	r2, #176	; 0xb0
 8014110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014114:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014116:	697b      	ldr	r3, [r7, #20]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d102      	bne.n	8014122 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 801411c:	f04f 33ff 	mov.w	r3, #4294967295
 8014120:	e03f      	b.n	80141a2 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8014122:	697b      	ldr	r3, [r7, #20]
 8014124:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014128:	2b00      	cmp	r3, #0
 801412a:	d00a      	beq.n	8014142 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014132:	2320      	movs	r3, #32
 8014134:	2205      	movs	r2, #5
 8014136:	68f8      	ldr	r0, [r7, #12]
 8014138:	f000 fb45 	bl	80147c6 <SCSI_SenseCode>

    return -1;
 801413c:	f04f 33ff 	mov.w	r3, #4294967295
 8014140:	e02f      	b.n	80141a2 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8014148:	2b02      	cmp	r3, #2
 801414a:	d10b      	bne.n	8014164 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801414c:	7af9      	ldrb	r1, [r7, #11]
 801414e:	233a      	movs	r3, #58	; 0x3a
 8014150:	2202      	movs	r2, #2
 8014152:	68f8      	ldr	r0, [r7, #12]
 8014154:	f000 fb37 	bl	80147c6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8014158:	697b      	ldr	r3, [r7, #20]
 801415a:	2205      	movs	r2, #5
 801415c:	721a      	strb	r2, [r3, #8]
    return -1;
 801415e:	f04f 33ff 	mov.w	r3, #4294967295
 8014162:	e01e      	b.n	80141a2 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801416a:	68fa      	ldr	r2, [r7, #12]
 801416c:	33b0      	adds	r3, #176	; 0xb0
 801416e:	009b      	lsls	r3, r3, #2
 8014170:	4413      	add	r3, r2
 8014172:	685b      	ldr	r3, [r3, #4]
 8014174:	689b      	ldr	r3, [r3, #8]
 8014176:	7afa      	ldrb	r2, [r7, #11]
 8014178:	4610      	mov	r0, r2
 801417a:	4798      	blx	r3
 801417c:	4603      	mov	r3, r0
 801417e:	2b00      	cmp	r3, #0
 8014180:	d00b      	beq.n	801419a <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014182:	7af9      	ldrb	r1, [r7, #11]
 8014184:	233a      	movs	r3, #58	; 0x3a
 8014186:	2202      	movs	r2, #2
 8014188:	68f8      	ldr	r0, [r7, #12]
 801418a:	f000 fb1c 	bl	80147c6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801418e:	697b      	ldr	r3, [r7, #20]
 8014190:	2205      	movs	r2, #5
 8014192:	721a      	strb	r2, [r3, #8]

    return -1;
 8014194:	f04f 33ff 	mov.w	r3, #4294967295
 8014198:	e003      	b.n	80141a2 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 801419a:	697b      	ldr	r3, [r7, #20]
 801419c:	2200      	movs	r2, #0
 801419e:	60da      	str	r2, [r3, #12]

  return 0;
 80141a0:	2300      	movs	r3, #0
}
 80141a2:	4618      	mov	r0, r3
 80141a4:	3718      	adds	r7, #24
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}
	...

080141ac <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b088      	sub	sp, #32
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	60f8      	str	r0, [r7, #12]
 80141b4:	460b      	mov	r3, r1
 80141b6:	607a      	str	r2, [r7, #4]
 80141b8:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	32b0      	adds	r2, #176	; 0xb0
 80141c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141c8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80141ca:	69bb      	ldr	r3, [r7, #24]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d102      	bne.n	80141d6 <SCSI_Inquiry+0x2a>
  {
    return -1;
 80141d0:	f04f 33ff 	mov.w	r3, #4294967295
 80141d4:	e05f      	b.n	8014296 <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80141d6:	69bb      	ldr	r3, [r7, #24]
 80141d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d10a      	bne.n	80141f6 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80141e0:	69bb      	ldr	r3, [r7, #24]
 80141e2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80141e6:	2320      	movs	r3, #32
 80141e8:	2205      	movs	r2, #5
 80141ea:	68f8      	ldr	r0, [r7, #12]
 80141ec:	f000 faeb 	bl	80147c6 <SCSI_SenseCode>
    return -1;
 80141f0:	f04f 33ff 	mov.w	r3, #4294967295
 80141f4:	e04f      	b.n	8014296 <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	3301      	adds	r3, #1
 80141fa:	781b      	ldrb	r3, [r3, #0]
 80141fc:	f003 0301 	and.w	r3, r3, #1
 8014200:	2b00      	cmp	r3, #0
 8014202:	d020      	beq.n	8014246 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	3302      	adds	r3, #2
 8014208:	781b      	ldrb	r3, [r3, #0]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d105      	bne.n	801421a <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801420e:	2206      	movs	r2, #6
 8014210:	4923      	ldr	r1, [pc, #140]	; (80142a0 <SCSI_Inquiry+0xf4>)
 8014212:	69b8      	ldr	r0, [r7, #24]
 8014214:	f001 f844 	bl	80152a0 <SCSI_UpdateBotData>
 8014218:	e03c      	b.n	8014294 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	3302      	adds	r3, #2
 801421e:	781b      	ldrb	r3, [r3, #0]
 8014220:	2b80      	cmp	r3, #128	; 0x80
 8014222:	d105      	bne.n	8014230 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8014224:	2208      	movs	r2, #8
 8014226:	491f      	ldr	r1, [pc, #124]	; (80142a4 <SCSI_Inquiry+0xf8>)
 8014228:	69b8      	ldr	r0, [r7, #24]
 801422a:	f001 f839 	bl	80152a0 <SCSI_UpdateBotData>
 801422e:	e031      	b.n	8014294 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8014230:	69bb      	ldr	r3, [r7, #24]
 8014232:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014236:	2324      	movs	r3, #36	; 0x24
 8014238:	2205      	movs	r2, #5
 801423a:	68f8      	ldr	r0, [r7, #12]
 801423c:	f000 fac3 	bl	80147c6 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8014240:	f04f 33ff 	mov.w	r3, #4294967295
 8014244:	e027      	b.n	8014296 <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801424c:	68fa      	ldr	r2, [r7, #12]
 801424e:	33b0      	adds	r3, #176	; 0xb0
 8014250:	009b      	lsls	r3, r3, #2
 8014252:	4413      	add	r3, r2
 8014254:	685b      	ldr	r3, [r3, #4]
 8014256:	69d9      	ldr	r1, [r3, #28]
 8014258:	7afa      	ldrb	r2, [r7, #11]
 801425a:	4613      	mov	r3, r2
 801425c:	00db      	lsls	r3, r3, #3
 801425e:	4413      	add	r3, r2
 8014260:	009b      	lsls	r3, r3, #2
 8014262:	440b      	add	r3, r1
 8014264:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8014266:	697b      	ldr	r3, [r7, #20]
 8014268:	3304      	adds	r3, #4
 801426a:	781b      	ldrb	r3, [r3, #0]
 801426c:	b29b      	uxth	r3, r3
 801426e:	3305      	adds	r3, #5
 8014270:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	3304      	adds	r3, #4
 8014276:	781b      	ldrb	r3, [r3, #0]
 8014278:	b29b      	uxth	r3, r3
 801427a:	8bfa      	ldrh	r2, [r7, #30]
 801427c:	429a      	cmp	r2, r3
 801427e:	d303      	bcc.n	8014288 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	3304      	adds	r3, #4
 8014284:	781b      	ldrb	r3, [r3, #0]
 8014286:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8014288:	8bfb      	ldrh	r3, [r7, #30]
 801428a:	461a      	mov	r2, r3
 801428c:	6979      	ldr	r1, [r7, #20]
 801428e:	69b8      	ldr	r0, [r7, #24]
 8014290:	f001 f806 	bl	80152a0 <SCSI_UpdateBotData>
  }

  return 0;
 8014294:	2300      	movs	r3, #0
}
 8014296:	4618      	mov	r0, r3
 8014298:	3720      	adds	r7, #32
 801429a:	46bd      	mov	sp, r7
 801429c:	bd80      	pop	{r7, pc}
 801429e:	bf00      	nop
 80142a0:	20000074 	.word	0x20000074
 80142a4:	2000007c 	.word	0x2000007c

080142a8 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b086      	sub	sp, #24
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	60f8      	str	r0, [r7, #12]
 80142b0:	460b      	mov	r3, r1
 80142b2:	607a      	str	r2, [r7, #4]
 80142b4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	32b0      	adds	r2, #176	; 0xb0
 80142c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142c4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80142c6:	697b      	ldr	r3, [r7, #20]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d102      	bne.n	80142d2 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 80142cc:	f04f 33ff 	mov.w	r3, #4294967295
 80142d0:	e064      	b.n	801439c <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80142d8:	68fa      	ldr	r2, [r7, #12]
 80142da:	33b0      	adds	r3, #176	; 0xb0
 80142dc:	009b      	lsls	r3, r3, #2
 80142de:	4413      	add	r3, r2
 80142e0:	685b      	ldr	r3, [r3, #4]
 80142e2:	685b      	ldr	r3, [r3, #4]
 80142e4:	697a      	ldr	r2, [r7, #20]
 80142e6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80142ea:	697a      	ldr	r2, [r7, #20]
 80142ec:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80142f0:	7af8      	ldrb	r0, [r7, #11]
 80142f2:	4798      	blx	r3
 80142f4:	4603      	mov	r3, r0
 80142f6:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80142f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d104      	bne.n	801430a <SCSI_ReadCapacity10+0x62>
 8014300:	697b      	ldr	r3, [r7, #20]
 8014302:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8014306:	2b02      	cmp	r3, #2
 8014308:	d108      	bne.n	801431c <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801430a:	7af9      	ldrb	r1, [r7, #11]
 801430c:	233a      	movs	r3, #58	; 0x3a
 801430e:	2202      	movs	r2, #2
 8014310:	68f8      	ldr	r0, [r7, #12]
 8014312:	f000 fa58 	bl	80147c6 <SCSI_SenseCode>
    return -1;
 8014316:	f04f 33ff 	mov.w	r3, #4294967295
 801431a:	e03f      	b.n	801439c <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801431c:	697b      	ldr	r3, [r7, #20]
 801431e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8014322:	3b01      	subs	r3, #1
 8014324:	0e1b      	lsrs	r3, r3, #24
 8014326:	b2da      	uxtb	r2, r3
 8014328:	697b      	ldr	r3, [r7, #20]
 801432a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801432c:	697b      	ldr	r3, [r7, #20]
 801432e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8014332:	3b01      	subs	r3, #1
 8014334:	0c1b      	lsrs	r3, r3, #16
 8014336:	b2da      	uxtb	r2, r3
 8014338:	697b      	ldr	r3, [r7, #20]
 801433a:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801433c:	697b      	ldr	r3, [r7, #20]
 801433e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8014342:	3b01      	subs	r3, #1
 8014344:	0a1b      	lsrs	r3, r3, #8
 8014346:	b2da      	uxtb	r2, r3
 8014348:	697b      	ldr	r3, [r7, #20]
 801434a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801434c:	697b      	ldr	r3, [r7, #20]
 801434e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8014352:	b2db      	uxtb	r3, r3
 8014354:	3b01      	subs	r3, #1
 8014356:	b2da      	uxtb	r2, r3
 8014358:	697b      	ldr	r3, [r7, #20]
 801435a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801435c:	697b      	ldr	r3, [r7, #20]
 801435e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8014362:	161b      	asrs	r3, r3, #24
 8014364:	b2da      	uxtb	r2, r3
 8014366:	697b      	ldr	r3, [r7, #20]
 8014368:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801436a:	697b      	ldr	r3, [r7, #20]
 801436c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8014370:	141b      	asrs	r3, r3, #16
 8014372:	b2da      	uxtb	r2, r3
 8014374:	697b      	ldr	r3, [r7, #20]
 8014376:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014378:	697b      	ldr	r3, [r7, #20]
 801437a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801437e:	0a1b      	lsrs	r3, r3, #8
 8014380:	b29b      	uxth	r3, r3
 8014382:	b2da      	uxtb	r2, r3
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8014388:	697b      	ldr	r3, [r7, #20]
 801438a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801438e:	b2da      	uxtb	r2, r3
 8014390:	697b      	ldr	r3, [r7, #20]
 8014392:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8014394:	697b      	ldr	r3, [r7, #20]
 8014396:	2208      	movs	r2, #8
 8014398:	60da      	str	r2, [r3, #12]

  return 0;
 801439a:	2300      	movs	r3, #0

}
 801439c:	4618      	mov	r0, r3
 801439e:	3718      	adds	r7, #24
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}

080143a4 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b088      	sub	sp, #32
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	60f8      	str	r0, [r7, #12]
 80143ac:	460b      	mov	r3, r1
 80143ae:	607a      	str	r2, [r7, #4]
 80143b0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	32b0      	adds	r2, #176	; 0xb0
 80143bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143c0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80143c2:	69bb      	ldr	r3, [r7, #24]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d102      	bne.n	80143ce <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 80143c8:	f04f 33ff 	mov.w	r3, #4294967295
 80143cc:	e099      	b.n	8014502 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80143d4:	68fa      	ldr	r2, [r7, #12]
 80143d6:	33b0      	adds	r3, #176	; 0xb0
 80143d8:	009b      	lsls	r3, r3, #2
 80143da:	4413      	add	r3, r2
 80143dc:	685b      	ldr	r3, [r3, #4]
 80143de:	685b      	ldr	r3, [r3, #4]
 80143e0:	69ba      	ldr	r2, [r7, #24]
 80143e2:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80143e6:	69ba      	ldr	r2, [r7, #24]
 80143e8:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80143ec:	7af8      	ldrb	r0, [r7, #11]
 80143ee:	4798      	blx	r3
 80143f0:	4603      	mov	r3, r0
 80143f2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80143f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d104      	bne.n	8014406 <SCSI_ReadCapacity16+0x62>
 80143fc:	69bb      	ldr	r3, [r7, #24]
 80143fe:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8014402:	2b02      	cmp	r3, #2
 8014404:	d108      	bne.n	8014418 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014406:	7af9      	ldrb	r1, [r7, #11]
 8014408:	233a      	movs	r3, #58	; 0x3a
 801440a:	2202      	movs	r2, #2
 801440c:	68f8      	ldr	r0, [r7, #12]
 801440e:	f000 f9da 	bl	80147c6 <SCSI_SenseCode>
    return -1;
 8014412:	f04f 33ff 	mov.w	r3, #4294967295
 8014416:	e074      	b.n	8014502 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	330a      	adds	r3, #10
 801441c:	781b      	ldrb	r3, [r3, #0]
 801441e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	330b      	adds	r3, #11
 8014424:	781b      	ldrb	r3, [r3, #0]
 8014426:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014428:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	330c      	adds	r3, #12
 801442e:	781b      	ldrb	r3, [r3, #0]
 8014430:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014432:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8014434:	687a      	ldr	r2, [r7, #4]
 8014436:	320d      	adds	r2, #13
 8014438:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801443a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801443c:	69bb      	ldr	r3, [r7, #24]
 801443e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014440:	2300      	movs	r3, #0
 8014442:	77fb      	strb	r3, [r7, #31]
 8014444:	e007      	b.n	8014456 <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 8014446:	7ffb      	ldrb	r3, [r7, #31]
 8014448:	69ba      	ldr	r2, [r7, #24]
 801444a:	4413      	add	r3, r2
 801444c:	2200      	movs	r2, #0
 801444e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014450:	7ffb      	ldrb	r3, [r7, #31]
 8014452:	3301      	adds	r3, #1
 8014454:	77fb      	strb	r3, [r7, #31]
 8014456:	7ffa      	ldrb	r2, [r7, #31]
 8014458:	69bb      	ldr	r3, [r7, #24]
 801445a:	68db      	ldr	r3, [r3, #12]
 801445c:	429a      	cmp	r2, r3
 801445e:	d3f2      	bcc.n	8014446 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014460:	69bb      	ldr	r3, [r7, #24]
 8014462:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8014466:	3b01      	subs	r3, #1
 8014468:	0e1b      	lsrs	r3, r3, #24
 801446a:	b2da      	uxtb	r2, r3
 801446c:	69bb      	ldr	r3, [r7, #24]
 801446e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014470:	69bb      	ldr	r3, [r7, #24]
 8014472:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8014476:	3b01      	subs	r3, #1
 8014478:	0c1b      	lsrs	r3, r3, #16
 801447a:	b2da      	uxtb	r2, r3
 801447c:	69bb      	ldr	r3, [r7, #24]
 801447e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014480:	69bb      	ldr	r3, [r7, #24]
 8014482:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8014486:	3b01      	subs	r3, #1
 8014488:	0a1b      	lsrs	r3, r3, #8
 801448a:	b2da      	uxtb	r2, r3
 801448c:	69bb      	ldr	r3, [r7, #24]
 801448e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8014490:	69bb      	ldr	r3, [r7, #24]
 8014492:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8014496:	b2db      	uxtb	r3, r3
 8014498:	3b01      	subs	r3, #1
 801449a:	b2da      	uxtb	r2, r3
 801449c:	69bb      	ldr	r3, [r7, #24]
 801449e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80144a0:	69bb      	ldr	r3, [r7, #24]
 80144a2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80144a6:	161b      	asrs	r3, r3, #24
 80144a8:	b2da      	uxtb	r2, r3
 80144aa:	69bb      	ldr	r3, [r7, #24]
 80144ac:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80144ae:	69bb      	ldr	r3, [r7, #24]
 80144b0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80144b4:	141b      	asrs	r3, r3, #16
 80144b6:	b2da      	uxtb	r2, r3
 80144b8:	69bb      	ldr	r3, [r7, #24]
 80144ba:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80144bc:	69bb      	ldr	r3, [r7, #24]
 80144be:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80144c2:	0a1b      	lsrs	r3, r3, #8
 80144c4:	b29b      	uxth	r3, r3
 80144c6:	b2da      	uxtb	r2, r3
 80144c8:	69bb      	ldr	r3, [r7, #24]
 80144ca:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80144cc:	69bb      	ldr	r3, [r7, #24]
 80144ce:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80144d2:	b2da      	uxtb	r2, r3
 80144d4:	69bb      	ldr	r3, [r7, #24]
 80144d6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	330a      	adds	r3, #10
 80144dc:	781b      	ldrb	r3, [r3, #0]
 80144de:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	330b      	adds	r3, #11
 80144e4:	781b      	ldrb	r3, [r3, #0]
 80144e6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80144e8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	330c      	adds	r3, #12
 80144ee:	781b      	ldrb	r3, [r3, #0]
 80144f0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80144f2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80144f4:	687a      	ldr	r2, [r7, #4]
 80144f6:	320d      	adds	r2, #13
 80144f8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80144fa:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80144fc:	69bb      	ldr	r3, [r7, #24]
 80144fe:	60da      	str	r2, [r3, #12]

  return 0;
 8014500:	2300      	movs	r3, #0
}
 8014502:	4618      	mov	r0, r3
 8014504:	3720      	adds	r7, #32
 8014506:	46bd      	mov	sp, r7
 8014508:	bd80      	pop	{r7, pc}

0801450a <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801450a:	b580      	push	{r7, lr}
 801450c:	b088      	sub	sp, #32
 801450e:	af00      	add	r7, sp, #0
 8014510:	60f8      	str	r0, [r7, #12]
 8014512:	460b      	mov	r3, r1
 8014514:	607a      	str	r2, [r7, #4]
 8014516:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	32b0      	adds	r2, #176	; 0xb0
 8014522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014526:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8014528:	69bb      	ldr	r3, [r7, #24]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d102      	bne.n	8014534 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 801452e:	f04f 33ff 	mov.w	r3, #4294967295
 8014532:	e061      	b.n	80145f8 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801453a:	68fa      	ldr	r2, [r7, #12]
 801453c:	33b0      	adds	r3, #176	; 0xb0
 801453e:	009b      	lsls	r3, r3, #2
 8014540:	4413      	add	r3, r2
 8014542:	685b      	ldr	r3, [r3, #4]
 8014544:	685b      	ldr	r3, [r3, #4]
 8014546:	f107 0214 	add.w	r2, r7, #20
 801454a:	f107 0110 	add.w	r1, r7, #16
 801454e:	7af8      	ldrb	r0, [r7, #11]
 8014550:	4798      	blx	r3
 8014552:	4603      	mov	r3, r0
 8014554:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014556:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d104      	bne.n	8014568 <SCSI_ReadFormatCapacity+0x5e>
 801455e:	69bb      	ldr	r3, [r7, #24]
 8014560:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8014564:	2b02      	cmp	r3, #2
 8014566:	d108      	bne.n	801457a <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014568:	7af9      	ldrb	r1, [r7, #11]
 801456a:	233a      	movs	r3, #58	; 0x3a
 801456c:	2202      	movs	r2, #2
 801456e:	68f8      	ldr	r0, [r7, #12]
 8014570:	f000 f929 	bl	80147c6 <SCSI_SenseCode>
    return -1;
 8014574:	f04f 33ff 	mov.w	r3, #4294967295
 8014578:	e03e      	b.n	80145f8 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 801457a:	2300      	movs	r3, #0
 801457c:	83fb      	strh	r3, [r7, #30]
 801457e:	e007      	b.n	8014590 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8014580:	8bfb      	ldrh	r3, [r7, #30]
 8014582:	69ba      	ldr	r2, [r7, #24]
 8014584:	4413      	add	r3, r2
 8014586:	2200      	movs	r2, #0
 8014588:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 801458a:	8bfb      	ldrh	r3, [r7, #30]
 801458c:	3301      	adds	r3, #1
 801458e:	83fb      	strh	r3, [r7, #30]
 8014590:	8bfb      	ldrh	r3, [r7, #30]
 8014592:	2b0b      	cmp	r3, #11
 8014594:	d9f4      	bls.n	8014580 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8014596:	69bb      	ldr	r3, [r7, #24]
 8014598:	2208      	movs	r2, #8
 801459a:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 801459c:	693b      	ldr	r3, [r7, #16]
 801459e:	3b01      	subs	r3, #1
 80145a0:	0e1b      	lsrs	r3, r3, #24
 80145a2:	b2da      	uxtb	r2, r3
 80145a4:	69bb      	ldr	r3, [r7, #24]
 80145a6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80145a8:	693b      	ldr	r3, [r7, #16]
 80145aa:	3b01      	subs	r3, #1
 80145ac:	0c1b      	lsrs	r3, r3, #16
 80145ae:	b2da      	uxtb	r2, r3
 80145b0:	69bb      	ldr	r3, [r7, #24]
 80145b2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80145b4:	693b      	ldr	r3, [r7, #16]
 80145b6:	3b01      	subs	r3, #1
 80145b8:	0a1b      	lsrs	r3, r3, #8
 80145ba:	b2da      	uxtb	r2, r3
 80145bc:	69bb      	ldr	r3, [r7, #24]
 80145be:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80145c0:	693b      	ldr	r3, [r7, #16]
 80145c2:	b2db      	uxtb	r3, r3
 80145c4:	3b01      	subs	r3, #1
 80145c6:	b2da      	uxtb	r2, r3
 80145c8:	69bb      	ldr	r3, [r7, #24]
 80145ca:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80145cc:	69bb      	ldr	r3, [r7, #24]
 80145ce:	2202      	movs	r2, #2
 80145d0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80145d2:	8abb      	ldrh	r3, [r7, #20]
 80145d4:	141b      	asrs	r3, r3, #16
 80145d6:	b2da      	uxtb	r2, r3
 80145d8:	69bb      	ldr	r3, [r7, #24]
 80145da:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80145dc:	8abb      	ldrh	r3, [r7, #20]
 80145de:	0a1b      	lsrs	r3, r3, #8
 80145e0:	b29b      	uxth	r3, r3
 80145e2:	b2da      	uxtb	r2, r3
 80145e4:	69bb      	ldr	r3, [r7, #24]
 80145e6:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80145e8:	8abb      	ldrh	r3, [r7, #20]
 80145ea:	b2da      	uxtb	r2, r3
 80145ec:	69bb      	ldr	r3, [r7, #24]
 80145ee:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80145f0:	69bb      	ldr	r3, [r7, #24]
 80145f2:	220c      	movs	r2, #12
 80145f4:	60da      	str	r2, [r3, #12]

  return 0;
 80145f6:	2300      	movs	r3, #0
}
 80145f8:	4618      	mov	r0, r3
 80145fa:	3720      	adds	r7, #32
 80145fc:	46bd      	mov	sp, r7
 80145fe:	bd80      	pop	{r7, pc}

08014600 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b086      	sub	sp, #24
 8014604:	af00      	add	r7, sp, #0
 8014606:	60f8      	str	r0, [r7, #12]
 8014608:	460b      	mov	r3, r1
 801460a:	607a      	str	r2, [r7, #4]
 801460c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	32b0      	adds	r2, #176	; 0xb0
 8014618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801461c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 801461e:	2317      	movs	r3, #23
 8014620:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8014622:	693b      	ldr	r3, [r7, #16]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d102      	bne.n	801462e <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8014628:	f04f 33ff 	mov.w	r3, #4294967295
 801462c:	e011      	b.n	8014652 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	3304      	adds	r3, #4
 8014632:	781b      	ldrb	r3, [r3, #0]
 8014634:	b29b      	uxth	r3, r3
 8014636:	8afa      	ldrh	r2, [r7, #22]
 8014638:	429a      	cmp	r2, r3
 801463a:	d303      	bcc.n	8014644 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	3304      	adds	r3, #4
 8014640:	781b      	ldrb	r3, [r3, #0]
 8014642:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8014644:	8afb      	ldrh	r3, [r7, #22]
 8014646:	461a      	mov	r2, r3
 8014648:	4904      	ldr	r1, [pc, #16]	; (801465c <SCSI_ModeSense6+0x5c>)
 801464a:	6938      	ldr	r0, [r7, #16]
 801464c:	f000 fe28 	bl	80152a0 <SCSI_UpdateBotData>

  return 0;
 8014650:	2300      	movs	r3, #0
}
 8014652:	4618      	mov	r0, r3
 8014654:	3718      	adds	r7, #24
 8014656:	46bd      	mov	sp, r7
 8014658:	bd80      	pop	{r7, pc}
 801465a:	bf00      	nop
 801465c:	20000084 	.word	0x20000084

08014660 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014660:	b580      	push	{r7, lr}
 8014662:	b086      	sub	sp, #24
 8014664:	af00      	add	r7, sp, #0
 8014666:	60f8      	str	r0, [r7, #12]
 8014668:	460b      	mov	r3, r1
 801466a:	607a      	str	r2, [r7, #4]
 801466c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	32b0      	adds	r2, #176	; 0xb0
 8014678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801467c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 801467e:	231b      	movs	r3, #27
 8014680:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8014682:	693b      	ldr	r3, [r7, #16]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d102      	bne.n	801468e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8014688:	f04f 33ff 	mov.w	r3, #4294967295
 801468c:	e011      	b.n	80146b2 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	3308      	adds	r3, #8
 8014692:	781b      	ldrb	r3, [r3, #0]
 8014694:	b29b      	uxth	r3, r3
 8014696:	8afa      	ldrh	r2, [r7, #22]
 8014698:	429a      	cmp	r2, r3
 801469a:	d303      	bcc.n	80146a4 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	3308      	adds	r3, #8
 80146a0:	781b      	ldrb	r3, [r3, #0]
 80146a2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80146a4:	8afb      	ldrh	r3, [r7, #22]
 80146a6:	461a      	mov	r2, r3
 80146a8:	4904      	ldr	r1, [pc, #16]	; (80146bc <SCSI_ModeSense10+0x5c>)
 80146aa:	6938      	ldr	r0, [r7, #16]
 80146ac:	f000 fdf8 	bl	80152a0 <SCSI_UpdateBotData>

  return 0;
 80146b0:	2300      	movs	r3, #0
}
 80146b2:	4618      	mov	r0, r3
 80146b4:	3718      	adds	r7, #24
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd80      	pop	{r7, pc}
 80146ba:	bf00      	nop
 80146bc:	2000009c 	.word	0x2000009c

080146c0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b086      	sub	sp, #24
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	60f8      	str	r0, [r7, #12]
 80146c8:	460b      	mov	r3, r1
 80146ca:	607a      	str	r2, [r7, #4]
 80146cc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	32b0      	adds	r2, #176	; 0xb0
 80146d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146dc:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80146de:	693b      	ldr	r3, [r7, #16]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d102      	bne.n	80146ea <SCSI_RequestSense+0x2a>
  {
    return -1;
 80146e4:	f04f 33ff 	mov.w	r3, #4294967295
 80146e8:	e069      	b.n	80147be <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80146ea:	693b      	ldr	r3, [r7, #16]
 80146ec:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d10a      	bne.n	801470a <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80146f4:	693b      	ldr	r3, [r7, #16]
 80146f6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80146fa:	2320      	movs	r3, #32
 80146fc:	2205      	movs	r2, #5
 80146fe:	68f8      	ldr	r0, [r7, #12]
 8014700:	f000 f861 	bl	80147c6 <SCSI_SenseCode>
    return -1;
 8014704:	f04f 33ff 	mov.w	r3, #4294967295
 8014708:	e059      	b.n	80147be <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801470a:	2300      	movs	r3, #0
 801470c:	75fb      	strb	r3, [r7, #23]
 801470e:	e007      	b.n	8014720 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8014710:	7dfb      	ldrb	r3, [r7, #23]
 8014712:	693a      	ldr	r2, [r7, #16]
 8014714:	4413      	add	r3, r2
 8014716:	2200      	movs	r2, #0
 8014718:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801471a:	7dfb      	ldrb	r3, [r7, #23]
 801471c:	3301      	adds	r3, #1
 801471e:	75fb      	strb	r3, [r7, #23]
 8014720:	7dfb      	ldrb	r3, [r7, #23]
 8014722:	2b11      	cmp	r3, #17
 8014724:	d9f4      	bls.n	8014710 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8014726:	693b      	ldr	r3, [r7, #16]
 8014728:	2270      	movs	r2, #112	; 0x70
 801472a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 801472c:	693b      	ldr	r3, [r7, #16]
 801472e:	220c      	movs	r2, #12
 8014730:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8014732:	693b      	ldr	r3, [r7, #16]
 8014734:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8014738:	693b      	ldr	r3, [r7, #16]
 801473a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801473e:	429a      	cmp	r2, r3
 8014740:	d02e      	beq.n	80147a0 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8014742:	693b      	ldr	r3, [r7, #16]
 8014744:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8014748:	461a      	mov	r2, r3
 801474a:	693b      	ldr	r3, [r7, #16]
 801474c:	3248      	adds	r2, #72	; 0x48
 801474e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8014752:	693b      	ldr	r3, [r7, #16]
 8014754:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8014756:	693b      	ldr	r3, [r7, #16]
 8014758:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801475c:	693a      	ldr	r2, [r7, #16]
 801475e:	3348      	adds	r3, #72	; 0x48
 8014760:	00db      	lsls	r3, r3, #3
 8014762:	4413      	add	r3, r2
 8014764:	791a      	ldrb	r2, [r3, #4]
 8014766:	693b      	ldr	r3, [r7, #16]
 8014768:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801476a:	693b      	ldr	r3, [r7, #16]
 801476c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8014770:	693a      	ldr	r2, [r7, #16]
 8014772:	3348      	adds	r3, #72	; 0x48
 8014774:	00db      	lsls	r3, r3, #3
 8014776:	4413      	add	r3, r2
 8014778:	795a      	ldrb	r2, [r3, #5]
 801477a:	693b      	ldr	r3, [r7, #16]
 801477c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 801477e:	693b      	ldr	r3, [r7, #16]
 8014780:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8014784:	3301      	adds	r3, #1
 8014786:	b2da      	uxtb	r2, r3
 8014788:	693b      	ldr	r3, [r7, #16]
 801478a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 801478e:	693b      	ldr	r3, [r7, #16]
 8014790:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8014794:	2b04      	cmp	r3, #4
 8014796:	d103      	bne.n	80147a0 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 8014798:	693b      	ldr	r3, [r7, #16]
 801479a:	2200      	movs	r2, #0
 801479c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80147a0:	693b      	ldr	r3, [r7, #16]
 80147a2:	2212      	movs	r2, #18
 80147a4:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	3304      	adds	r3, #4
 80147aa:	781b      	ldrb	r3, [r3, #0]
 80147ac:	2b12      	cmp	r3, #18
 80147ae:	d805      	bhi.n	80147bc <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	3304      	adds	r3, #4
 80147b4:	781b      	ldrb	r3, [r3, #0]
 80147b6:	461a      	mov	r2, r3
 80147b8:	693b      	ldr	r3, [r7, #16]
 80147ba:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80147bc:	2300      	movs	r3, #0
}
 80147be:	4618      	mov	r0, r3
 80147c0:	3718      	adds	r7, #24
 80147c2:	46bd      	mov	sp, r7
 80147c4:	bd80      	pop	{r7, pc}

080147c6 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80147c6:	b480      	push	{r7}
 80147c8:	b085      	sub	sp, #20
 80147ca:	af00      	add	r7, sp, #0
 80147cc:	6078      	str	r0, [r7, #4]
 80147ce:	4608      	mov	r0, r1
 80147d0:	4611      	mov	r1, r2
 80147d2:	461a      	mov	r2, r3
 80147d4:	4603      	mov	r3, r0
 80147d6:	70fb      	strb	r3, [r7, #3]
 80147d8:	460b      	mov	r3, r1
 80147da:	70bb      	strb	r3, [r7, #2]
 80147dc:	4613      	mov	r3, r2
 80147de:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	32b0      	adds	r2, #176	; 0xb0
 80147ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147ee:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d02c      	beq.n	8014850 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80147fc:	461a      	mov	r2, r3
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	3248      	adds	r2, #72	; 0x48
 8014802:	78b9      	ldrb	r1, [r7, #2]
 8014804:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801480e:	68fa      	ldr	r2, [r7, #12]
 8014810:	3348      	adds	r3, #72	; 0x48
 8014812:	00db      	lsls	r3, r3, #3
 8014814:	4413      	add	r3, r2
 8014816:	787a      	ldrb	r2, [r7, #1]
 8014818:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8014820:	68fa      	ldr	r2, [r7, #12]
 8014822:	3348      	adds	r3, #72	; 0x48
 8014824:	00db      	lsls	r3, r3, #3
 8014826:	4413      	add	r3, r2
 8014828:	2200      	movs	r2, #0
 801482a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8014832:	3301      	adds	r3, #1
 8014834:	b2da      	uxtb	r2, r3
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8014842:	2b04      	cmp	r3, #4
 8014844:	d105      	bne.n	8014852 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	2200      	movs	r2, #0
 801484a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 801484e:	e000      	b.n	8014852 <SCSI_SenseCode+0x8c>
    return;
 8014850:	bf00      	nop
  }
}
 8014852:	3714      	adds	r7, #20
 8014854:	46bd      	mov	sp, r7
 8014856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485a:	4770      	bx	lr

0801485c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b086      	sub	sp, #24
 8014860:	af00      	add	r7, sp, #0
 8014862:	60f8      	str	r0, [r7, #12]
 8014864:	460b      	mov	r3, r1
 8014866:	607a      	str	r2, [r7, #4]
 8014868:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	32b0      	adds	r2, #176	; 0xb0
 8014874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014878:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801487a:	697b      	ldr	r3, [r7, #20]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d102      	bne.n	8014886 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8014880:	f04f 33ff 	mov.w	r3, #4294967295
 8014884:	e03b      	b.n	80148fe <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8014886:	697b      	ldr	r3, [r7, #20]
 8014888:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801488c:	2b01      	cmp	r3, #1
 801488e:	d10f      	bne.n	80148b0 <SCSI_StartStopUnit+0x54>
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	3304      	adds	r3, #4
 8014894:	781b      	ldrb	r3, [r3, #0]
 8014896:	f003 0303 	and.w	r3, r3, #3
 801489a:	2b02      	cmp	r3, #2
 801489c:	d108      	bne.n	80148b0 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801489e:	7af9      	ldrb	r1, [r7, #11]
 80148a0:	2324      	movs	r3, #36	; 0x24
 80148a2:	2205      	movs	r2, #5
 80148a4:	68f8      	ldr	r0, [r7, #12]
 80148a6:	f7ff ff8e 	bl	80147c6 <SCSI_SenseCode>

    return -1;
 80148aa:	f04f 33ff 	mov.w	r3, #4294967295
 80148ae:	e026      	b.n	80148fe <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	3304      	adds	r3, #4
 80148b4:	781b      	ldrb	r3, [r3, #0]
 80148b6:	f003 0303 	and.w	r3, r3, #3
 80148ba:	2b01      	cmp	r3, #1
 80148bc:	d104      	bne.n	80148c8 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80148be:	697b      	ldr	r3, [r7, #20]
 80148c0:	2200      	movs	r2, #0
 80148c2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80148c6:	e016      	b.n	80148f6 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	3304      	adds	r3, #4
 80148cc:	781b      	ldrb	r3, [r3, #0]
 80148ce:	f003 0303 	and.w	r3, r3, #3
 80148d2:	2b02      	cmp	r3, #2
 80148d4:	d104      	bne.n	80148e0 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80148d6:	697b      	ldr	r3, [r7, #20]
 80148d8:	2202      	movs	r2, #2
 80148da:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80148de:	e00a      	b.n	80148f6 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	3304      	adds	r3, #4
 80148e4:	781b      	ldrb	r3, [r3, #0]
 80148e6:	f003 0303 	and.w	r3, r3, #3
 80148ea:	2b03      	cmp	r3, #3
 80148ec:	d103      	bne.n	80148f6 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80148ee:	697b      	ldr	r3, [r7, #20]
 80148f0:	2200      	movs	r2, #0
 80148f2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80148f6:	697b      	ldr	r3, [r7, #20]
 80148f8:	2200      	movs	r2, #0
 80148fa:	60da      	str	r2, [r3, #12]

  return 0;
 80148fc:	2300      	movs	r3, #0
}
 80148fe:	4618      	mov	r0, r3
 8014900:	3718      	adds	r7, #24
 8014902:	46bd      	mov	sp, r7
 8014904:	bd80      	pop	{r7, pc}

08014906 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014906:	b480      	push	{r7}
 8014908:	b087      	sub	sp, #28
 801490a:	af00      	add	r7, sp, #0
 801490c:	60f8      	str	r0, [r7, #12]
 801490e:	460b      	mov	r3, r1
 8014910:	607a      	str	r2, [r7, #4]
 8014912:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	32b0      	adds	r2, #176	; 0xb0
 801491e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014922:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014924:	697b      	ldr	r3, [r7, #20]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d102      	bne.n	8014930 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 801492a:	f04f 33ff 	mov.w	r3, #4294967295
 801492e:	e011      	b.n	8014954 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	3304      	adds	r3, #4
 8014934:	781b      	ldrb	r3, [r3, #0]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d104      	bne.n	8014944 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801493a:	697b      	ldr	r3, [r7, #20]
 801493c:	2200      	movs	r2, #0
 801493e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8014942:	e003      	b.n	801494c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8014944:	697b      	ldr	r3, [r7, #20]
 8014946:	2201      	movs	r2, #1
 8014948:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 801494c:	697b      	ldr	r3, [r7, #20]
 801494e:	2200      	movs	r2, #0
 8014950:	60da      	str	r2, [r3, #12]

  return 0;
 8014952:	2300      	movs	r3, #0
}
 8014954:	4618      	mov	r0, r3
 8014956:	371c      	adds	r7, #28
 8014958:	46bd      	mov	sp, r7
 801495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495e:	4770      	bx	lr

08014960 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b086      	sub	sp, #24
 8014964:	af00      	add	r7, sp, #0
 8014966:	60f8      	str	r0, [r7, #12]
 8014968:	460b      	mov	r3, r1
 801496a:	607a      	str	r2, [r7, #4]
 801496c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	32b0      	adds	r2, #176	; 0xb0
 8014978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801497c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801497e:	697b      	ldr	r3, [r7, #20]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d102      	bne.n	801498a <SCSI_Read10+0x2a>
  {
    return -1;
 8014984:	f04f 33ff 	mov.w	r3, #4294967295
 8014988:	e090      	b.n	8014aac <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801498a:	697b      	ldr	r3, [r7, #20]
 801498c:	7a1b      	ldrb	r3, [r3, #8]
 801498e:	2b00      	cmp	r3, #0
 8014990:	f040 8082 	bne.w	8014a98 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8014994:	697b      	ldr	r3, [r7, #20]
 8014996:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801499a:	b25b      	sxtb	r3, r3
 801499c:	2b00      	cmp	r3, #0
 801499e:	db0a      	blt.n	80149b6 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80149a0:	697b      	ldr	r3, [r7, #20]
 80149a2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80149a6:	2320      	movs	r3, #32
 80149a8:	2205      	movs	r2, #5
 80149aa:	68f8      	ldr	r0, [r7, #12]
 80149ac:	f7ff ff0b 	bl	80147c6 <SCSI_SenseCode>
      return -1;
 80149b0:	f04f 33ff 	mov.w	r3, #4294967295
 80149b4:	e07a      	b.n	8014aac <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80149b6:	697b      	ldr	r3, [r7, #20]
 80149b8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80149bc:	2b02      	cmp	r3, #2
 80149be:	d108      	bne.n	80149d2 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80149c0:	7af9      	ldrb	r1, [r7, #11]
 80149c2:	233a      	movs	r3, #58	; 0x3a
 80149c4:	2202      	movs	r2, #2
 80149c6:	68f8      	ldr	r0, [r7, #12]
 80149c8:	f7ff fefd 	bl	80147c6 <SCSI_SenseCode>

      return -1;
 80149cc:	f04f 33ff 	mov.w	r3, #4294967295
 80149d0:	e06c      	b.n	8014aac <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149d8:	68fa      	ldr	r2, [r7, #12]
 80149da:	33b0      	adds	r3, #176	; 0xb0
 80149dc:	009b      	lsls	r3, r3, #2
 80149de:	4413      	add	r3, r2
 80149e0:	685b      	ldr	r3, [r3, #4]
 80149e2:	689b      	ldr	r3, [r3, #8]
 80149e4:	7afa      	ldrb	r2, [r7, #11]
 80149e6:	4610      	mov	r0, r2
 80149e8:	4798      	blx	r3
 80149ea:	4603      	mov	r3, r0
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d008      	beq.n	8014a02 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80149f0:	7af9      	ldrb	r1, [r7, #11]
 80149f2:	233a      	movs	r3, #58	; 0x3a
 80149f4:	2202      	movs	r2, #2
 80149f6:	68f8      	ldr	r0, [r7, #12]
 80149f8:	f7ff fee5 	bl	80147c6 <SCSI_SenseCode>
      return -1;
 80149fc:	f04f 33ff 	mov.w	r3, #4294967295
 8014a00:	e054      	b.n	8014aac <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	3302      	adds	r3, #2
 8014a06:	781b      	ldrb	r3, [r3, #0]
 8014a08:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	3303      	adds	r3, #3
 8014a0e:	781b      	ldrb	r3, [r3, #0]
 8014a10:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014a12:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	3304      	adds	r3, #4
 8014a18:	781b      	ldrb	r3, [r3, #0]
 8014a1a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014a1c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014a1e:	687a      	ldr	r2, [r7, #4]
 8014a20:	3205      	adds	r2, #5
 8014a22:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8014a24:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014a26:	697b      	ldr	r3, [r7, #20]
 8014a28:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	3307      	adds	r3, #7
 8014a30:	781b      	ldrb	r3, [r3, #0]
 8014a32:	021b      	lsls	r3, r3, #8
 8014a34:	687a      	ldr	r2, [r7, #4]
 8014a36:	3208      	adds	r2, #8
 8014a38:	7812      	ldrb	r2, [r2, #0]
 8014a3a:	431a      	orrs	r2, r3
 8014a3c:	697b      	ldr	r3, [r7, #20]
 8014a3e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014a42:	697b      	ldr	r3, [r7, #20]
 8014a44:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8014a48:	697b      	ldr	r3, [r7, #20]
 8014a4a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8014a4e:	7af9      	ldrb	r1, [r7, #11]
 8014a50:	68f8      	ldr	r0, [r7, #12]
 8014a52:	f000 fadc 	bl	801500e <SCSI_CheckAddressRange>
 8014a56:	4603      	mov	r3, r0
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	da02      	bge.n	8014a62 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8014a60:	e024      	b.n	8014aac <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8014a62:	697b      	ldr	r3, [r7, #20]
 8014a64:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8014a68:	697b      	ldr	r3, [r7, #20]
 8014a6a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8014a6e:	6979      	ldr	r1, [r7, #20]
 8014a70:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8014a74:	fb01 f303 	mul.w	r3, r1, r3
 8014a78:	429a      	cmp	r2, r3
 8014a7a:	d00a      	beq.n	8014a92 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014a7c:	697b      	ldr	r3, [r7, #20]
 8014a7e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014a82:	2320      	movs	r3, #32
 8014a84:	2205      	movs	r2, #5
 8014a86:	68f8      	ldr	r0, [r7, #12]
 8014a88:	f7ff fe9d 	bl	80147c6 <SCSI_SenseCode>
      return -1;
 8014a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8014a90:	e00c      	b.n	8014aac <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014a92:	697b      	ldr	r3, [r7, #20]
 8014a94:	2202      	movs	r2, #2
 8014a96:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8014a98:	697b      	ldr	r3, [r7, #20]
 8014a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014a9e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014aa0:	7afb      	ldrb	r3, [r7, #11]
 8014aa2:	4619      	mov	r1, r3
 8014aa4:	68f8      	ldr	r0, [r7, #12]
 8014aa6:	f000 fadf 	bl	8015068 <SCSI_ProcessRead>
 8014aaa:	4603      	mov	r3, r0
}
 8014aac:	4618      	mov	r0, r3
 8014aae:	3718      	adds	r7, #24
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}

08014ab4 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b086      	sub	sp, #24
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	60f8      	str	r0, [r7, #12]
 8014abc:	460b      	mov	r3, r1
 8014abe:	607a      	str	r2, [r7, #4]
 8014ac0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	32b0      	adds	r2, #176	; 0xb0
 8014acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ad0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014ad2:	697b      	ldr	r3, [r7, #20]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d102      	bne.n	8014ade <SCSI_Read12+0x2a>
  {
    return -1;
 8014ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8014adc:	e09a      	b.n	8014c14 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014ade:	697b      	ldr	r3, [r7, #20]
 8014ae0:	7a1b      	ldrb	r3, [r3, #8]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	f040 808c 	bne.w	8014c00 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8014ae8:	697b      	ldr	r3, [r7, #20]
 8014aea:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8014aee:	b25b      	sxtb	r3, r3
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	db0a      	blt.n	8014b0a <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014af4:	697b      	ldr	r3, [r7, #20]
 8014af6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014afa:	2320      	movs	r3, #32
 8014afc:	2205      	movs	r2, #5
 8014afe:	68f8      	ldr	r0, [r7, #12]
 8014b00:	f7ff fe61 	bl	80147c6 <SCSI_SenseCode>
      return -1;
 8014b04:	f04f 33ff 	mov.w	r3, #4294967295
 8014b08:	e084      	b.n	8014c14 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014b0a:	697b      	ldr	r3, [r7, #20]
 8014b0c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8014b10:	2b02      	cmp	r3, #2
 8014b12:	d108      	bne.n	8014b26 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014b14:	7af9      	ldrb	r1, [r7, #11]
 8014b16:	233a      	movs	r3, #58	; 0x3a
 8014b18:	2202      	movs	r2, #2
 8014b1a:	68f8      	ldr	r0, [r7, #12]
 8014b1c:	f7ff fe53 	bl	80147c6 <SCSI_SenseCode>
      return -1;
 8014b20:	f04f 33ff 	mov.w	r3, #4294967295
 8014b24:	e076      	b.n	8014c14 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b2c:	68fa      	ldr	r2, [r7, #12]
 8014b2e:	33b0      	adds	r3, #176	; 0xb0
 8014b30:	009b      	lsls	r3, r3, #2
 8014b32:	4413      	add	r3, r2
 8014b34:	685b      	ldr	r3, [r3, #4]
 8014b36:	689b      	ldr	r3, [r3, #8]
 8014b38:	7afa      	ldrb	r2, [r7, #11]
 8014b3a:	4610      	mov	r0, r2
 8014b3c:	4798      	blx	r3
 8014b3e:	4603      	mov	r3, r0
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d008      	beq.n	8014b56 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014b44:	7af9      	ldrb	r1, [r7, #11]
 8014b46:	233a      	movs	r3, #58	; 0x3a
 8014b48:	2202      	movs	r2, #2
 8014b4a:	68f8      	ldr	r0, [r7, #12]
 8014b4c:	f7ff fe3b 	bl	80147c6 <SCSI_SenseCode>
      return -1;
 8014b50:	f04f 33ff 	mov.w	r3, #4294967295
 8014b54:	e05e      	b.n	8014c14 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	3302      	adds	r3, #2
 8014b5a:	781b      	ldrb	r3, [r3, #0]
 8014b5c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	3303      	adds	r3, #3
 8014b62:	781b      	ldrb	r3, [r3, #0]
 8014b64:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014b66:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	3304      	adds	r3, #4
 8014b6c:	781b      	ldrb	r3, [r3, #0]
 8014b6e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014b70:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014b72:	687a      	ldr	r2, [r7, #4]
 8014b74:	3205      	adds	r2, #5
 8014b76:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8014b78:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014b7a:	697b      	ldr	r3, [r7, #20]
 8014b7c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	3306      	adds	r3, #6
 8014b84:	781b      	ldrb	r3, [r3, #0]
 8014b86:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	3307      	adds	r3, #7
 8014b8c:	781b      	ldrb	r3, [r3, #0]
 8014b8e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014b90:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	3308      	adds	r3, #8
 8014b96:	781b      	ldrb	r3, [r3, #0]
 8014b98:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014b9a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014b9c:	687a      	ldr	r2, [r7, #4]
 8014b9e:	3209      	adds	r2, #9
 8014ba0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014ba2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014ba4:	697b      	ldr	r3, [r7, #20]
 8014ba6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014baa:	697b      	ldr	r3, [r7, #20]
 8014bac:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8014bb0:	697b      	ldr	r3, [r7, #20]
 8014bb2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8014bb6:	7af9      	ldrb	r1, [r7, #11]
 8014bb8:	68f8      	ldr	r0, [r7, #12]
 8014bba:	f000 fa28 	bl	801500e <SCSI_CheckAddressRange>
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	da02      	bge.n	8014bca <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8014bc8:	e024      	b.n	8014c14 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8014bca:	697b      	ldr	r3, [r7, #20]
 8014bcc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8014bd0:	697b      	ldr	r3, [r7, #20]
 8014bd2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8014bd6:	6979      	ldr	r1, [r7, #20]
 8014bd8:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8014bdc:	fb01 f303 	mul.w	r3, r1, r3
 8014be0:	429a      	cmp	r2, r3
 8014be2:	d00a      	beq.n	8014bfa <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014be4:	697b      	ldr	r3, [r7, #20]
 8014be6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014bea:	2320      	movs	r3, #32
 8014bec:	2205      	movs	r2, #5
 8014bee:	68f8      	ldr	r0, [r7, #12]
 8014bf0:	f7ff fde9 	bl	80147c6 <SCSI_SenseCode>
      return -1;
 8014bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8014bf8:	e00c      	b.n	8014c14 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014bfa:	697b      	ldr	r3, [r7, #20]
 8014bfc:	2202      	movs	r2, #2
 8014bfe:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8014c00:	697b      	ldr	r3, [r7, #20]
 8014c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014c06:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014c08:	7afb      	ldrb	r3, [r7, #11]
 8014c0a:	4619      	mov	r1, r3
 8014c0c:	68f8      	ldr	r0, [r7, #12]
 8014c0e:	f000 fa2b 	bl	8015068 <SCSI_ProcessRead>
 8014c12:	4603      	mov	r3, r0
}
 8014c14:	4618      	mov	r0, r3
 8014c16:	3718      	adds	r7, #24
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	bd80      	pop	{r7, pc}

08014c1c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b086      	sub	sp, #24
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	60f8      	str	r0, [r7, #12]
 8014c24:	460b      	mov	r3, r1
 8014c26:	607a      	str	r2, [r7, #4]
 8014c28:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	32b0      	adds	r2, #176	; 0xb0
 8014c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c38:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8014c3a:	697b      	ldr	r3, [r7, #20]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d102      	bne.n	8014c46 <SCSI_Write10+0x2a>
  {
    return -1;
 8014c40:	f04f 33ff 	mov.w	r3, #4294967295
 8014c44:	e0ba      	b.n	8014dbc <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014c46:	697b      	ldr	r3, [r7, #20]
 8014c48:	7a1b      	ldrb	r3, [r3, #8]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	f040 80b0 	bne.w	8014db0 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014c50:	697b      	ldr	r3, [r7, #20]
 8014c52:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d10a      	bne.n	8014c70 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014c5a:	697b      	ldr	r3, [r7, #20]
 8014c5c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014c60:	2320      	movs	r3, #32
 8014c62:	2205      	movs	r2, #5
 8014c64:	68f8      	ldr	r0, [r7, #12]
 8014c66:	f7ff fdae 	bl	80147c6 <SCSI_SenseCode>
      return -1;
 8014c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8014c6e:	e0a5      	b.n	8014dbc <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014c70:	697b      	ldr	r3, [r7, #20]
 8014c72:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8014c76:	b25b      	sxtb	r3, r3
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	da0a      	bge.n	8014c92 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014c7c:	697b      	ldr	r3, [r7, #20]
 8014c7e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014c82:	2320      	movs	r3, #32
 8014c84:	2205      	movs	r2, #5
 8014c86:	68f8      	ldr	r0, [r7, #12]
 8014c88:	f7ff fd9d 	bl	80147c6 <SCSI_SenseCode>
      return -1;
 8014c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c90:	e094      	b.n	8014dbc <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c98:	68fa      	ldr	r2, [r7, #12]
 8014c9a:	33b0      	adds	r3, #176	; 0xb0
 8014c9c:	009b      	lsls	r3, r3, #2
 8014c9e:	4413      	add	r3, r2
 8014ca0:	685b      	ldr	r3, [r3, #4]
 8014ca2:	689b      	ldr	r3, [r3, #8]
 8014ca4:	7afa      	ldrb	r2, [r7, #11]
 8014ca6:	4610      	mov	r0, r2
 8014ca8:	4798      	blx	r3
 8014caa:	4603      	mov	r3, r0
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d008      	beq.n	8014cc2 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014cb0:	7af9      	ldrb	r1, [r7, #11]
 8014cb2:	233a      	movs	r3, #58	; 0x3a
 8014cb4:	2202      	movs	r2, #2
 8014cb6:	68f8      	ldr	r0, [r7, #12]
 8014cb8:	f7ff fd85 	bl	80147c6 <SCSI_SenseCode>
      return -1;
 8014cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8014cc0:	e07c      	b.n	8014dbc <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014cc8:	68fa      	ldr	r2, [r7, #12]
 8014cca:	33b0      	adds	r3, #176	; 0xb0
 8014ccc:	009b      	lsls	r3, r3, #2
 8014cce:	4413      	add	r3, r2
 8014cd0:	685b      	ldr	r3, [r3, #4]
 8014cd2:	68db      	ldr	r3, [r3, #12]
 8014cd4:	7afa      	ldrb	r2, [r7, #11]
 8014cd6:	4610      	mov	r0, r2
 8014cd8:	4798      	blx	r3
 8014cda:	4603      	mov	r3, r0
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d008      	beq.n	8014cf2 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014ce0:	7af9      	ldrb	r1, [r7, #11]
 8014ce2:	2327      	movs	r3, #39	; 0x27
 8014ce4:	2202      	movs	r2, #2
 8014ce6:	68f8      	ldr	r0, [r7, #12]
 8014ce8:	f7ff fd6d 	bl	80147c6 <SCSI_SenseCode>
      return -1;
 8014cec:	f04f 33ff 	mov.w	r3, #4294967295
 8014cf0:	e064      	b.n	8014dbc <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	3302      	adds	r3, #2
 8014cf6:	781b      	ldrb	r3, [r3, #0]
 8014cf8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	3303      	adds	r3, #3
 8014cfe:	781b      	ldrb	r3, [r3, #0]
 8014d00:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014d02:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	3304      	adds	r3, #4
 8014d08:	781b      	ldrb	r3, [r3, #0]
 8014d0a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014d0c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014d0e:	687a      	ldr	r2, [r7, #4]
 8014d10:	3205      	adds	r2, #5
 8014d12:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014d14:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014d16:	697b      	ldr	r3, [r7, #20]
 8014d18:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	3307      	adds	r3, #7
 8014d20:	781b      	ldrb	r3, [r3, #0]
 8014d22:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8014d24:	687a      	ldr	r2, [r7, #4]
 8014d26:	3208      	adds	r2, #8
 8014d28:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014d2a:	431a      	orrs	r2, r3
 8014d2c:	697b      	ldr	r3, [r7, #20]
 8014d2e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014d32:	697b      	ldr	r3, [r7, #20]
 8014d34:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8014d38:	697b      	ldr	r3, [r7, #20]
 8014d3a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8014d3e:	7af9      	ldrb	r1, [r7, #11]
 8014d40:	68f8      	ldr	r0, [r7, #12]
 8014d42:	f000 f964 	bl	801500e <SCSI_CheckAddressRange>
 8014d46:	4603      	mov	r3, r0
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	da02      	bge.n	8014d52 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8014d50:	e034      	b.n	8014dbc <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014d52:	697b      	ldr	r3, [r7, #20]
 8014d54:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8014d58:	697a      	ldr	r2, [r7, #20]
 8014d5a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8014d5e:	fb02 f303 	mul.w	r3, r2, r3
 8014d62:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014d64:	697b      	ldr	r3, [r7, #20]
 8014d66:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014d6a:	693a      	ldr	r2, [r7, #16]
 8014d6c:	429a      	cmp	r2, r3
 8014d6e:	d00a      	beq.n	8014d86 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014d70:	697b      	ldr	r3, [r7, #20]
 8014d72:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014d76:	2320      	movs	r3, #32
 8014d78:	2205      	movs	r2, #5
 8014d7a:	68f8      	ldr	r0, [r7, #12]
 8014d7c:	f7ff fd23 	bl	80147c6 <SCSI_SenseCode>
      return -1;
 8014d80:	f04f 33ff 	mov.w	r3, #4294967295
 8014d84:	e01a      	b.n	8014dbc <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014d86:	693b      	ldr	r3, [r7, #16]
 8014d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014d8c:	bf28      	it	cs
 8014d8e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8014d92:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014d94:	697b      	ldr	r3, [r7, #20]
 8014d96:	2201      	movs	r2, #1
 8014d98:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8014d9a:	4b0a      	ldr	r3, [pc, #40]	; (8014dc4 <SCSI_Write10+0x1a8>)
 8014d9c:	7819      	ldrb	r1, [r3, #0]
 8014d9e:	697b      	ldr	r3, [r7, #20]
 8014da0:	f103 0210 	add.w	r2, r3, #16
 8014da4:	693b      	ldr	r3, [r7, #16]
 8014da6:	68f8      	ldr	r0, [r7, #12]
 8014da8:	f003 fdaf 	bl	801890a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014dac:	2300      	movs	r3, #0
 8014dae:	e005      	b.n	8014dbc <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8014db0:	7afb      	ldrb	r3, [r7, #11]
 8014db2:	4619      	mov	r1, r3
 8014db4:	68f8      	ldr	r0, [r7, #12]
 8014db6:	f000 f9dd 	bl	8015174 <SCSI_ProcessWrite>
 8014dba:	4603      	mov	r3, r0
}
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	3718      	adds	r7, #24
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	bd80      	pop	{r7, pc}
 8014dc4:	20000073 	.word	0x20000073

08014dc8 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b086      	sub	sp, #24
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	60f8      	str	r0, [r7, #12]
 8014dd0:	460b      	mov	r3, r1
 8014dd2:	607a      	str	r2, [r7, #4]
 8014dd4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	32b0      	adds	r2, #176	; 0xb0
 8014de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014de4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8014de6:	697b      	ldr	r3, [r7, #20]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d102      	bne.n	8014df2 <SCSI_Write12+0x2a>
  {
    return -1;
 8014dec:	f04f 33ff 	mov.w	r3, #4294967295
 8014df0:	e0ca      	b.n	8014f88 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014df2:	697b      	ldr	r3, [r7, #20]
 8014df4:	7a1b      	ldrb	r3, [r3, #8]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	f040 80c0 	bne.w	8014f7c <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014dfc:	697b      	ldr	r3, [r7, #20]
 8014dfe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d10a      	bne.n	8014e1c <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014e06:	697b      	ldr	r3, [r7, #20]
 8014e08:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014e0c:	2320      	movs	r3, #32
 8014e0e:	2205      	movs	r2, #5
 8014e10:	68f8      	ldr	r0, [r7, #12]
 8014e12:	f7ff fcd8 	bl	80147c6 <SCSI_SenseCode>
      return -1;
 8014e16:	f04f 33ff 	mov.w	r3, #4294967295
 8014e1a:	e0b5      	b.n	8014f88 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014e1c:	697b      	ldr	r3, [r7, #20]
 8014e1e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8014e22:	b25b      	sxtb	r3, r3
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	da0a      	bge.n	8014e3e <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014e28:	697b      	ldr	r3, [r7, #20]
 8014e2a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014e2e:	2320      	movs	r3, #32
 8014e30:	2205      	movs	r2, #5
 8014e32:	68f8      	ldr	r0, [r7, #12]
 8014e34:	f7ff fcc7 	bl	80147c6 <SCSI_SenseCode>
      return -1;
 8014e38:	f04f 33ff 	mov.w	r3, #4294967295
 8014e3c:	e0a4      	b.n	8014f88 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e44:	68fa      	ldr	r2, [r7, #12]
 8014e46:	33b0      	adds	r3, #176	; 0xb0
 8014e48:	009b      	lsls	r3, r3, #2
 8014e4a:	4413      	add	r3, r2
 8014e4c:	685b      	ldr	r3, [r3, #4]
 8014e4e:	689b      	ldr	r3, [r3, #8]
 8014e50:	7afa      	ldrb	r2, [r7, #11]
 8014e52:	4610      	mov	r0, r2
 8014e54:	4798      	blx	r3
 8014e56:	4603      	mov	r3, r0
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d00b      	beq.n	8014e74 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014e5c:	7af9      	ldrb	r1, [r7, #11]
 8014e5e:	233a      	movs	r3, #58	; 0x3a
 8014e60:	2202      	movs	r2, #2
 8014e62:	68f8      	ldr	r0, [r7, #12]
 8014e64:	f7ff fcaf 	bl	80147c6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014e68:	697b      	ldr	r3, [r7, #20]
 8014e6a:	2205      	movs	r2, #5
 8014e6c:	721a      	strb	r2, [r3, #8]
      return -1;
 8014e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8014e72:	e089      	b.n	8014f88 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e7a:	68fa      	ldr	r2, [r7, #12]
 8014e7c:	33b0      	adds	r3, #176	; 0xb0
 8014e7e:	009b      	lsls	r3, r3, #2
 8014e80:	4413      	add	r3, r2
 8014e82:	685b      	ldr	r3, [r3, #4]
 8014e84:	68db      	ldr	r3, [r3, #12]
 8014e86:	7afa      	ldrb	r2, [r7, #11]
 8014e88:	4610      	mov	r0, r2
 8014e8a:	4798      	blx	r3
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d00b      	beq.n	8014eaa <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014e92:	7af9      	ldrb	r1, [r7, #11]
 8014e94:	2327      	movs	r3, #39	; 0x27
 8014e96:	2202      	movs	r2, #2
 8014e98:	68f8      	ldr	r0, [r7, #12]
 8014e9a:	f7ff fc94 	bl	80147c6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014e9e:	697b      	ldr	r3, [r7, #20]
 8014ea0:	2205      	movs	r2, #5
 8014ea2:	721a      	strb	r2, [r3, #8]
      return -1;
 8014ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ea8:	e06e      	b.n	8014f88 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	3302      	adds	r3, #2
 8014eae:	781b      	ldrb	r3, [r3, #0]
 8014eb0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	3303      	adds	r3, #3
 8014eb6:	781b      	ldrb	r3, [r3, #0]
 8014eb8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014eba:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	3304      	adds	r3, #4
 8014ec0:	781b      	ldrb	r3, [r3, #0]
 8014ec2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014ec4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014ec6:	687a      	ldr	r2, [r7, #4]
 8014ec8:	3205      	adds	r2, #5
 8014eca:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014ecc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014ece:	697b      	ldr	r3, [r7, #20]
 8014ed0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	3306      	adds	r3, #6
 8014ed8:	781b      	ldrb	r3, [r3, #0]
 8014eda:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	3307      	adds	r3, #7
 8014ee0:	781b      	ldrb	r3, [r3, #0]
 8014ee2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014ee4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	3308      	adds	r3, #8
 8014eea:	781b      	ldrb	r3, [r3, #0]
 8014eec:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014eee:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014ef0:	687a      	ldr	r2, [r7, #4]
 8014ef2:	3209      	adds	r2, #9
 8014ef4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014ef6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014ef8:	697b      	ldr	r3, [r7, #20]
 8014efa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014efe:	697b      	ldr	r3, [r7, #20]
 8014f00:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8014f04:	697b      	ldr	r3, [r7, #20]
 8014f06:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8014f0a:	7af9      	ldrb	r1, [r7, #11]
 8014f0c:	68f8      	ldr	r0, [r7, #12]
 8014f0e:	f000 f87e 	bl	801500e <SCSI_CheckAddressRange>
 8014f12:	4603      	mov	r3, r0
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	da02      	bge.n	8014f1e <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014f18:	f04f 33ff 	mov.w	r3, #4294967295
 8014f1c:	e034      	b.n	8014f88 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014f1e:	697b      	ldr	r3, [r7, #20]
 8014f20:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8014f24:	697a      	ldr	r2, [r7, #20]
 8014f26:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8014f2a:	fb02 f303 	mul.w	r3, r2, r3
 8014f2e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014f30:	697b      	ldr	r3, [r7, #20]
 8014f32:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014f36:	693a      	ldr	r2, [r7, #16]
 8014f38:	429a      	cmp	r2, r3
 8014f3a:	d00a      	beq.n	8014f52 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014f3c:	697b      	ldr	r3, [r7, #20]
 8014f3e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014f42:	2320      	movs	r3, #32
 8014f44:	2205      	movs	r2, #5
 8014f46:	68f8      	ldr	r0, [r7, #12]
 8014f48:	f7ff fc3d 	bl	80147c6 <SCSI_SenseCode>
      return -1;
 8014f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8014f50:	e01a      	b.n	8014f88 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014f52:	693b      	ldr	r3, [r7, #16]
 8014f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014f58:	bf28      	it	cs
 8014f5a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8014f5e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014f60:	697b      	ldr	r3, [r7, #20]
 8014f62:	2201      	movs	r2, #1
 8014f64:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8014f66:	4b0a      	ldr	r3, [pc, #40]	; (8014f90 <SCSI_Write12+0x1c8>)
 8014f68:	7819      	ldrb	r1, [r3, #0]
 8014f6a:	697b      	ldr	r3, [r7, #20]
 8014f6c:	f103 0210 	add.w	r2, r3, #16
 8014f70:	693b      	ldr	r3, [r7, #16]
 8014f72:	68f8      	ldr	r0, [r7, #12]
 8014f74:	f003 fcc9 	bl	801890a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014f78:	2300      	movs	r3, #0
 8014f7a:	e005      	b.n	8014f88 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8014f7c:	7afb      	ldrb	r3, [r7, #11]
 8014f7e:	4619      	mov	r1, r3
 8014f80:	68f8      	ldr	r0, [r7, #12]
 8014f82:	f000 f8f7 	bl	8015174 <SCSI_ProcessWrite>
 8014f86:	4603      	mov	r3, r0
}
 8014f88:	4618      	mov	r0, r3
 8014f8a:	3718      	adds	r7, #24
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	bd80      	pop	{r7, pc}
 8014f90:	20000073 	.word	0x20000073

08014f94 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	b086      	sub	sp, #24
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	60f8      	str	r0, [r7, #12]
 8014f9c:	460b      	mov	r3, r1
 8014f9e:	607a      	str	r2, [r7, #4]
 8014fa0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	32b0      	adds	r2, #176	; 0xb0
 8014fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fb0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014fb2:	697b      	ldr	r3, [r7, #20]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d102      	bne.n	8014fbe <SCSI_Verify10+0x2a>
  {
    return -1;
 8014fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8014fbc:	e023      	b.n	8015006 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	3301      	adds	r3, #1
 8014fc2:	781b      	ldrb	r3, [r3, #0]
 8014fc4:	f003 0302 	and.w	r3, r3, #2
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d008      	beq.n	8014fde <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8014fcc:	7af9      	ldrb	r1, [r7, #11]
 8014fce:	2324      	movs	r3, #36	; 0x24
 8014fd0:	2205      	movs	r2, #5
 8014fd2:	68f8      	ldr	r0, [r7, #12]
 8014fd4:	f7ff fbf7 	bl	80147c6 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8014fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8014fdc:	e013      	b.n	8015006 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8014fde:	697b      	ldr	r3, [r7, #20]
 8014fe0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8014fe4:	697b      	ldr	r3, [r7, #20]
 8014fe6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8014fea:	7af9      	ldrb	r1, [r7, #11]
 8014fec:	68f8      	ldr	r0, [r7, #12]
 8014fee:	f000 f80e 	bl	801500e <SCSI_CheckAddressRange>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	da02      	bge.n	8014ffe <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8014ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8014ffc:	e003      	b.n	8015006 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8014ffe:	697b      	ldr	r3, [r7, #20]
 8015000:	2200      	movs	r2, #0
 8015002:	60da      	str	r2, [r3, #12]

  return 0;
 8015004:	2300      	movs	r3, #0
}
 8015006:	4618      	mov	r0, r3
 8015008:	3718      	adds	r7, #24
 801500a:	46bd      	mov	sp, r7
 801500c:	bd80      	pop	{r7, pc}

0801500e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 801500e:	b580      	push	{r7, lr}
 8015010:	b086      	sub	sp, #24
 8015012:	af00      	add	r7, sp, #0
 8015014:	60f8      	str	r0, [r7, #12]
 8015016:	607a      	str	r2, [r7, #4]
 8015018:	603b      	str	r3, [r7, #0]
 801501a:	460b      	mov	r3, r1
 801501c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	32b0      	adds	r2, #176	; 0xb0
 8015028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801502c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801502e:	697b      	ldr	r3, [r7, #20]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d102      	bne.n	801503a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8015034:	f04f 33ff 	mov.w	r3, #4294967295
 8015038:	e011      	b.n	801505e <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 801503a:	687a      	ldr	r2, [r7, #4]
 801503c:	683b      	ldr	r3, [r7, #0]
 801503e:	441a      	add	r2, r3
 8015040:	697b      	ldr	r3, [r7, #20]
 8015042:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8015046:	429a      	cmp	r2, r3
 8015048:	d908      	bls.n	801505c <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 801504a:	7af9      	ldrb	r1, [r7, #11]
 801504c:	2321      	movs	r3, #33	; 0x21
 801504e:	2205      	movs	r2, #5
 8015050:	68f8      	ldr	r0, [r7, #12]
 8015052:	f7ff fbb8 	bl	80147c6 <SCSI_SenseCode>
    return -1;
 8015056:	f04f 33ff 	mov.w	r3, #4294967295
 801505a:	e000      	b.n	801505e <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 801505c:	2300      	movs	r3, #0
}
 801505e:	4618      	mov	r0, r3
 8015060:	3718      	adds	r7, #24
 8015062:	46bd      	mov	sp, r7
 8015064:	bd80      	pop	{r7, pc}
	...

08015068 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8015068:	b590      	push	{r4, r7, lr}
 801506a:	b085      	sub	sp, #20
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
 8015070:	460b      	mov	r3, r1
 8015072:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	32b0      	adds	r2, #176	; 0xb0
 801507e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015082:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d102      	bne.n	8015090 <SCSI_ProcessRead+0x28>
  {
    return -1;
 801508a:	f04f 33ff 	mov.w	r3, #4294967295
 801508e:	e06a      	b.n	8015166 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015096:	68fa      	ldr	r2, [r7, #12]
 8015098:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801509c:	fb02 f303 	mul.w	r3, r2, r3
 80150a0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80150a2:	68bb      	ldr	r3, [r7, #8]
 80150a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80150a8:	bf28      	it	cs
 80150aa:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80150ae:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80150b6:	687a      	ldr	r2, [r7, #4]
 80150b8:	33b0      	adds	r3, #176	; 0xb0
 80150ba:	009b      	lsls	r3, r3, #2
 80150bc:	4413      	add	r3, r2
 80150be:	685b      	ldr	r3, [r3, #4]
 80150c0:	691c      	ldr	r4, [r3, #16]
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	f103 0110 	add.w	r1, r3, #16
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80150d4:	4618      	mov	r0, r3
 80150d6:	68bb      	ldr	r3, [r7, #8]
 80150d8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80150dc:	b29b      	uxth	r3, r3
 80150de:	78f8      	ldrb	r0, [r7, #3]
 80150e0:	47a0      	blx	r4
 80150e2:	4603      	mov	r3, r0
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	da08      	bge.n	80150fa <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80150e8:	78f9      	ldrb	r1, [r7, #3]
 80150ea:	2311      	movs	r3, #17
 80150ec:	2204      	movs	r2, #4
 80150ee:	6878      	ldr	r0, [r7, #4]
 80150f0:	f7ff fb69 	bl	80147c6 <SCSI_SenseCode>
    return -1;
 80150f4:	f04f 33ff 	mov.w	r3, #4294967295
 80150f8:	e035      	b.n	8015166 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 80150fa:	4b1d      	ldr	r3, [pc, #116]	; (8015170 <SCSI_ProcessRead+0x108>)
 80150fc:	7819      	ldrb	r1, [r3, #0]
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	f103 0210 	add.w	r2, r3, #16
 8015104:	68bb      	ldr	r3, [r7, #8]
 8015106:	6878      	ldr	r0, [r7, #4]
 8015108:	f003 fbde 	bl	80188c8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8015118:	4619      	mov	r1, r3
 801511a:	68bb      	ldr	r3, [r7, #8]
 801511c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015120:	441a      	add	r2, r3
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8015134:	4619      	mov	r1, r3
 8015136:	68bb      	ldr	r3, [r7, #8]
 8015138:	fbb3 f3f1 	udiv	r3, r3, r1
 801513c:	1ad2      	subs	r2, r2, r3
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801514a:	68bb      	ldr	r3, [r7, #8]
 801514c:	1ad2      	subs	r2, r2, r3
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801515a:	2b00      	cmp	r3, #0
 801515c:	d102      	bne.n	8015164 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	2203      	movs	r2, #3
 8015162:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8015164:	2300      	movs	r3, #0
}
 8015166:	4618      	mov	r0, r3
 8015168:	3714      	adds	r7, #20
 801516a:	46bd      	mov	sp, r7
 801516c:	bd90      	pop	{r4, r7, pc}
 801516e:	bf00      	nop
 8015170:	20000072 	.word	0x20000072

08015174 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8015174:	b590      	push	{r4, r7, lr}
 8015176:	b085      	sub	sp, #20
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
 801517c:	460b      	mov	r3, r1
 801517e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	32b0      	adds	r2, #176	; 0xb0
 801518a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801518e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d102      	bne.n	801519c <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8015196:	f04f 33ff 	mov.w	r3, #4294967295
 801519a:	e07a      	b.n	8015292 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80151a2:	68fa      	ldr	r2, [r7, #12]
 80151a4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80151a8:	fb02 f303 	mul.w	r3, r2, r3
 80151ac:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80151ae:	68bb      	ldr	r3, [r7, #8]
 80151b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80151b4:	bf28      	it	cs
 80151b6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80151ba:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80151c2:	687a      	ldr	r2, [r7, #4]
 80151c4:	33b0      	adds	r3, #176	; 0xb0
 80151c6:	009b      	lsls	r3, r3, #2
 80151c8:	4413      	add	r3, r2
 80151ca:	685b      	ldr	r3, [r3, #4]
 80151cc:	695c      	ldr	r4, [r3, #20]
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	f103 0110 	add.w	r1, r3, #16
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80151e0:	4618      	mov	r0, r3
 80151e2:	68bb      	ldr	r3, [r7, #8]
 80151e4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80151e8:	b29b      	uxth	r3, r3
 80151ea:	78f8      	ldrb	r0, [r7, #3]
 80151ec:	47a0      	blx	r4
 80151ee:	4603      	mov	r3, r0
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	da08      	bge.n	8015206 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80151f4:	78f9      	ldrb	r1, [r7, #3]
 80151f6:	2303      	movs	r3, #3
 80151f8:	2204      	movs	r2, #4
 80151fa:	6878      	ldr	r0, [r7, #4]
 80151fc:	f7ff fae3 	bl	80147c6 <SCSI_SenseCode>
    return -1;
 8015200:	f04f 33ff 	mov.w	r3, #4294967295
 8015204:	e045      	b.n	8015292 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8015212:	4619      	mov	r1, r3
 8015214:	68bb      	ldr	r3, [r7, #8]
 8015216:	fbb3 f3f1 	udiv	r3, r3, r1
 801521a:	441a      	add	r2, r3
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801522e:	4619      	mov	r1, r3
 8015230:	68bb      	ldr	r3, [r7, #8]
 8015232:	fbb3 f3f1 	udiv	r3, r3, r1
 8015236:	1ad2      	subs	r2, r2, r3
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8015244:	68bb      	ldr	r3, [r7, #8]
 8015246:	1ad2      	subs	r2, r2, r3
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015254:	2b00      	cmp	r3, #0
 8015256:	d104      	bne.n	8015262 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8015258:	2100      	movs	r1, #0
 801525a:	6878      	ldr	r0, [r7, #4]
 801525c:	f7fe fd14 	bl	8013c88 <MSC_BOT_SendCSW>
 8015260:	e016      	b.n	8015290 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015268:	68fa      	ldr	r2, [r7, #12]
 801526a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801526e:	fb02 f303 	mul.w	r3, r2, r3
 8015272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015276:	bf28      	it	cs
 8015278:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801527c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 801527e:	4b07      	ldr	r3, [pc, #28]	; (801529c <SCSI_ProcessWrite+0x128>)
 8015280:	7819      	ldrb	r1, [r3, #0]
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	f103 0210 	add.w	r2, r3, #16
 8015288:	68bb      	ldr	r3, [r7, #8]
 801528a:	6878      	ldr	r0, [r7, #4]
 801528c:	f003 fb3d 	bl	801890a <USBD_LL_PrepareReceive>
  }

  return 0;
 8015290:	2300      	movs	r3, #0
}
 8015292:	4618      	mov	r0, r3
 8015294:	3714      	adds	r7, #20
 8015296:	46bd      	mov	sp, r7
 8015298:	bd90      	pop	{r4, r7, pc}
 801529a:	bf00      	nop
 801529c:	20000073 	.word	0x20000073

080152a0 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80152a0:	b480      	push	{r7}
 80152a2:	b087      	sub	sp, #28
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	60f8      	str	r0, [r7, #12]
 80152a8:	60b9      	str	r1, [r7, #8]
 80152aa:	4613      	mov	r3, r2
 80152ac:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80152ae:	88fb      	ldrh	r3, [r7, #6]
 80152b0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d102      	bne.n	80152be <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80152b8:	f04f 33ff 	mov.w	r3, #4294967295
 80152bc:	e013      	b.n	80152e6 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80152be:	8afa      	ldrh	r2, [r7, #22]
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80152c4:	e00b      	b.n	80152de <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80152c6:	8afb      	ldrh	r3, [r7, #22]
 80152c8:	3b01      	subs	r3, #1
 80152ca:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80152cc:	8afb      	ldrh	r3, [r7, #22]
 80152ce:	68ba      	ldr	r2, [r7, #8]
 80152d0:	441a      	add	r2, r3
 80152d2:	8afb      	ldrh	r3, [r7, #22]
 80152d4:	7811      	ldrb	r1, [r2, #0]
 80152d6:	68fa      	ldr	r2, [r7, #12]
 80152d8:	4413      	add	r3, r2
 80152da:	460a      	mov	r2, r1
 80152dc:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80152de:	8afb      	ldrh	r3, [r7, #22]
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d1f0      	bne.n	80152c6 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 80152e4:	2300      	movs	r3, #0
}
 80152e6:	4618      	mov	r0, r3
 80152e8:	371c      	adds	r7, #28
 80152ea:	46bd      	mov	sp, r7
 80152ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f0:	4770      	bx	lr

080152f2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80152f2:	b580      	push	{r7, lr}
 80152f4:	b086      	sub	sp, #24
 80152f6:	af00      	add	r7, sp, #0
 80152f8:	60f8      	str	r0, [r7, #12]
 80152fa:	60b9      	str	r1, [r7, #8]
 80152fc:	4613      	mov	r3, r2
 80152fe:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d101      	bne.n	801530a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015306:	2303      	movs	r3, #3
 8015308:	e01f      	b.n	801534a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	2200      	movs	r2, #0
 801530e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	2200      	movs	r2, #0
 8015316:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	2200      	movs	r2, #0
 801531e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015322:	68bb      	ldr	r3, [r7, #8]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d003      	beq.n	8015330 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	68ba      	ldr	r2, [r7, #8]
 801532c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	2201      	movs	r2, #1
 8015334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	79fa      	ldrb	r2, [r7, #7]
 801533c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801533e:	68f8      	ldr	r0, [r7, #12]
 8015340:	f003 f96e 	bl	8018620 <USBD_LL_Init>
 8015344:	4603      	mov	r3, r0
 8015346:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015348:	7dfb      	ldrb	r3, [r7, #23]
}
 801534a:	4618      	mov	r0, r3
 801534c:	3718      	adds	r7, #24
 801534e:	46bd      	mov	sp, r7
 8015350:	bd80      	pop	{r7, pc}

08015352 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015352:	b580      	push	{r7, lr}
 8015354:	b084      	sub	sp, #16
 8015356:	af00      	add	r7, sp, #0
 8015358:	6078      	str	r0, [r7, #4]
 801535a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801535c:	2300      	movs	r3, #0
 801535e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015360:	683b      	ldr	r3, [r7, #0]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d101      	bne.n	801536a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015366:	2303      	movs	r3, #3
 8015368:	e025      	b.n	80153b6 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	683a      	ldr	r2, [r7, #0]
 801536e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	32ae      	adds	r2, #174	; 0xae
 801537c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015382:	2b00      	cmp	r3, #0
 8015384:	d00f      	beq.n	80153a6 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	32ae      	adds	r2, #174	; 0xae
 8015390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015396:	f107 020e 	add.w	r2, r7, #14
 801539a:	4610      	mov	r0, r2
 801539c:	4798      	blx	r3
 801539e:	4602      	mov	r2, r0
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80153ac:	1c5a      	adds	r2, r3, #1
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80153b4:	2300      	movs	r3, #0
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3710      	adds	r7, #16
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}

080153be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80153be:	b580      	push	{r7, lr}
 80153c0:	b082      	sub	sp, #8
 80153c2:	af00      	add	r7, sp, #0
 80153c4:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80153c6:	6878      	ldr	r0, [r7, #4]
 80153c8:	f003 f976 	bl	80186b8 <USBD_LL_Start>
 80153cc:	4603      	mov	r3, r0
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	3708      	adds	r7, #8
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}

080153d6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80153d6:	b480      	push	{r7}
 80153d8:	b083      	sub	sp, #12
 80153da:	af00      	add	r7, sp, #0
 80153dc:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80153de:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80153e0:	4618      	mov	r0, r3
 80153e2:	370c      	adds	r7, #12
 80153e4:	46bd      	mov	sp, r7
 80153e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ea:	4770      	bx	lr

080153ec <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b084      	sub	sp, #16
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
 80153f4:	460b      	mov	r3, r1
 80153f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80153f8:	2300      	movs	r3, #0
 80153fa:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015402:	2b00      	cmp	r3, #0
 8015404:	d009      	beq.n	801541a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	78fa      	ldrb	r2, [r7, #3]
 8015410:	4611      	mov	r1, r2
 8015412:	6878      	ldr	r0, [r7, #4]
 8015414:	4798      	blx	r3
 8015416:	4603      	mov	r3, r0
 8015418:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801541a:	7bfb      	ldrb	r3, [r7, #15]
}
 801541c:	4618      	mov	r0, r3
 801541e:	3710      	adds	r7, #16
 8015420:	46bd      	mov	sp, r7
 8015422:	bd80      	pop	{r7, pc}

08015424 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b084      	sub	sp, #16
 8015428:	af00      	add	r7, sp, #0
 801542a:	6078      	str	r0, [r7, #4]
 801542c:	460b      	mov	r3, r1
 801542e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015430:	2300      	movs	r3, #0
 8015432:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801543a:	685b      	ldr	r3, [r3, #4]
 801543c:	78fa      	ldrb	r2, [r7, #3]
 801543e:	4611      	mov	r1, r2
 8015440:	6878      	ldr	r0, [r7, #4]
 8015442:	4798      	blx	r3
 8015444:	4603      	mov	r3, r0
 8015446:	2b00      	cmp	r3, #0
 8015448:	d001      	beq.n	801544e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801544a:	2303      	movs	r3, #3
 801544c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801544e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015450:	4618      	mov	r0, r3
 8015452:	3710      	adds	r7, #16
 8015454:	46bd      	mov	sp, r7
 8015456:	bd80      	pop	{r7, pc}

08015458 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b084      	sub	sp, #16
 801545c:	af00      	add	r7, sp, #0
 801545e:	6078      	str	r0, [r7, #4]
 8015460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015468:	6839      	ldr	r1, [r7, #0]
 801546a:	4618      	mov	r0, r3
 801546c:	f001 f909 	bl	8016682 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	2201      	movs	r2, #1
 8015474:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801547e:	461a      	mov	r2, r3
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801548c:	f003 031f 	and.w	r3, r3, #31
 8015490:	2b02      	cmp	r3, #2
 8015492:	d01a      	beq.n	80154ca <USBD_LL_SetupStage+0x72>
 8015494:	2b02      	cmp	r3, #2
 8015496:	d822      	bhi.n	80154de <USBD_LL_SetupStage+0x86>
 8015498:	2b00      	cmp	r3, #0
 801549a:	d002      	beq.n	80154a2 <USBD_LL_SetupStage+0x4a>
 801549c:	2b01      	cmp	r3, #1
 801549e:	d00a      	beq.n	80154b6 <USBD_LL_SetupStage+0x5e>
 80154a0:	e01d      	b.n	80154de <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80154a8:	4619      	mov	r1, r3
 80154aa:	6878      	ldr	r0, [r7, #4]
 80154ac:	f000 fb60 	bl	8015b70 <USBD_StdDevReq>
 80154b0:	4603      	mov	r3, r0
 80154b2:	73fb      	strb	r3, [r7, #15]
      break;
 80154b4:	e020      	b.n	80154f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80154bc:	4619      	mov	r1, r3
 80154be:	6878      	ldr	r0, [r7, #4]
 80154c0:	f000 fbc8 	bl	8015c54 <USBD_StdItfReq>
 80154c4:	4603      	mov	r3, r0
 80154c6:	73fb      	strb	r3, [r7, #15]
      break;
 80154c8:	e016      	b.n	80154f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80154d0:	4619      	mov	r1, r3
 80154d2:	6878      	ldr	r0, [r7, #4]
 80154d4:	f000 fc2a 	bl	8015d2c <USBD_StdEPReq>
 80154d8:	4603      	mov	r3, r0
 80154da:	73fb      	strb	r3, [r7, #15]
      break;
 80154dc:	e00c      	b.n	80154f8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80154e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80154e8:	b2db      	uxtb	r3, r3
 80154ea:	4619      	mov	r1, r3
 80154ec:	6878      	ldr	r0, [r7, #4]
 80154ee:	f003 f962 	bl	80187b6 <USBD_LL_StallEP>
 80154f2:	4603      	mov	r3, r0
 80154f4:	73fb      	strb	r3, [r7, #15]
      break;
 80154f6:	bf00      	nop
  }

  return ret;
 80154f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	3710      	adds	r7, #16
 80154fe:	46bd      	mov	sp, r7
 8015500:	bd80      	pop	{r7, pc}

08015502 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015502:	b580      	push	{r7, lr}
 8015504:	b086      	sub	sp, #24
 8015506:	af00      	add	r7, sp, #0
 8015508:	60f8      	str	r0, [r7, #12]
 801550a:	460b      	mov	r3, r1
 801550c:	607a      	str	r2, [r7, #4]
 801550e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015510:	2300      	movs	r3, #0
 8015512:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015514:	7afb      	ldrb	r3, [r7, #11]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d16e      	bne.n	80155f8 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015520:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015528:	2b03      	cmp	r3, #3
 801552a:	f040 8098 	bne.w	801565e <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801552e:	693b      	ldr	r3, [r7, #16]
 8015530:	689a      	ldr	r2, [r3, #8]
 8015532:	693b      	ldr	r3, [r7, #16]
 8015534:	68db      	ldr	r3, [r3, #12]
 8015536:	429a      	cmp	r2, r3
 8015538:	d913      	bls.n	8015562 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801553a:	693b      	ldr	r3, [r7, #16]
 801553c:	689a      	ldr	r2, [r3, #8]
 801553e:	693b      	ldr	r3, [r7, #16]
 8015540:	68db      	ldr	r3, [r3, #12]
 8015542:	1ad2      	subs	r2, r2, r3
 8015544:	693b      	ldr	r3, [r7, #16]
 8015546:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015548:	693b      	ldr	r3, [r7, #16]
 801554a:	68da      	ldr	r2, [r3, #12]
 801554c:	693b      	ldr	r3, [r7, #16]
 801554e:	689b      	ldr	r3, [r3, #8]
 8015550:	4293      	cmp	r3, r2
 8015552:	bf28      	it	cs
 8015554:	4613      	movcs	r3, r2
 8015556:	461a      	mov	r2, r3
 8015558:	6879      	ldr	r1, [r7, #4]
 801555a:	68f8      	ldr	r0, [r7, #12]
 801555c:	f001 f968 	bl	8016830 <USBD_CtlContinueRx>
 8015560:	e07d      	b.n	801565e <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015568:	f003 031f 	and.w	r3, r3, #31
 801556c:	2b02      	cmp	r3, #2
 801556e:	d014      	beq.n	801559a <USBD_LL_DataOutStage+0x98>
 8015570:	2b02      	cmp	r3, #2
 8015572:	d81d      	bhi.n	80155b0 <USBD_LL_DataOutStage+0xae>
 8015574:	2b00      	cmp	r3, #0
 8015576:	d002      	beq.n	801557e <USBD_LL_DataOutStage+0x7c>
 8015578:	2b01      	cmp	r3, #1
 801557a:	d003      	beq.n	8015584 <USBD_LL_DataOutStage+0x82>
 801557c:	e018      	b.n	80155b0 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801557e:	2300      	movs	r3, #0
 8015580:	75bb      	strb	r3, [r7, #22]
            break;
 8015582:	e018      	b.n	80155b6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801558a:	b2db      	uxtb	r3, r3
 801558c:	4619      	mov	r1, r3
 801558e:	68f8      	ldr	r0, [r7, #12]
 8015590:	f000 fa5e 	bl	8015a50 <USBD_CoreFindIF>
 8015594:	4603      	mov	r3, r0
 8015596:	75bb      	strb	r3, [r7, #22]
            break;
 8015598:	e00d      	b.n	80155b6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80155a0:	b2db      	uxtb	r3, r3
 80155a2:	4619      	mov	r1, r3
 80155a4:	68f8      	ldr	r0, [r7, #12]
 80155a6:	f000 fa60 	bl	8015a6a <USBD_CoreFindEP>
 80155aa:	4603      	mov	r3, r0
 80155ac:	75bb      	strb	r3, [r7, #22]
            break;
 80155ae:	e002      	b.n	80155b6 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80155b0:	2300      	movs	r3, #0
 80155b2:	75bb      	strb	r3, [r7, #22]
            break;
 80155b4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80155b6:	7dbb      	ldrb	r3, [r7, #22]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d119      	bne.n	80155f0 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155c2:	b2db      	uxtb	r3, r3
 80155c4:	2b03      	cmp	r3, #3
 80155c6:	d113      	bne.n	80155f0 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80155c8:	7dba      	ldrb	r2, [r7, #22]
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	32ae      	adds	r2, #174	; 0xae
 80155ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155d2:	691b      	ldr	r3, [r3, #16]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d00b      	beq.n	80155f0 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80155d8:	7dba      	ldrb	r2, [r7, #22]
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80155e0:	7dba      	ldrb	r2, [r7, #22]
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	32ae      	adds	r2, #174	; 0xae
 80155e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155ea:	691b      	ldr	r3, [r3, #16]
 80155ec:	68f8      	ldr	r0, [r7, #12]
 80155ee:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80155f0:	68f8      	ldr	r0, [r7, #12]
 80155f2:	f001 f92e 	bl	8016852 <USBD_CtlSendStatus>
 80155f6:	e032      	b.n	801565e <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80155f8:	7afb      	ldrb	r3, [r7, #11]
 80155fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80155fe:	b2db      	uxtb	r3, r3
 8015600:	4619      	mov	r1, r3
 8015602:	68f8      	ldr	r0, [r7, #12]
 8015604:	f000 fa31 	bl	8015a6a <USBD_CoreFindEP>
 8015608:	4603      	mov	r3, r0
 801560a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801560c:	7dbb      	ldrb	r3, [r7, #22]
 801560e:	2bff      	cmp	r3, #255	; 0xff
 8015610:	d025      	beq.n	801565e <USBD_LL_DataOutStage+0x15c>
 8015612:	7dbb      	ldrb	r3, [r7, #22]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d122      	bne.n	801565e <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801561e:	b2db      	uxtb	r3, r3
 8015620:	2b03      	cmp	r3, #3
 8015622:	d117      	bne.n	8015654 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015624:	7dba      	ldrb	r2, [r7, #22]
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	32ae      	adds	r2, #174	; 0xae
 801562a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801562e:	699b      	ldr	r3, [r3, #24]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d00f      	beq.n	8015654 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015634:	7dba      	ldrb	r2, [r7, #22]
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801563c:	7dba      	ldrb	r2, [r7, #22]
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	32ae      	adds	r2, #174	; 0xae
 8015642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015646:	699b      	ldr	r3, [r3, #24]
 8015648:	7afa      	ldrb	r2, [r7, #11]
 801564a:	4611      	mov	r1, r2
 801564c:	68f8      	ldr	r0, [r7, #12]
 801564e:	4798      	blx	r3
 8015650:	4603      	mov	r3, r0
 8015652:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015654:	7dfb      	ldrb	r3, [r7, #23]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d001      	beq.n	801565e <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801565a:	7dfb      	ldrb	r3, [r7, #23]
 801565c:	e000      	b.n	8015660 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801565e:	2300      	movs	r3, #0
}
 8015660:	4618      	mov	r0, r3
 8015662:	3718      	adds	r7, #24
 8015664:	46bd      	mov	sp, r7
 8015666:	bd80      	pop	{r7, pc}

08015668 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b086      	sub	sp, #24
 801566c:	af00      	add	r7, sp, #0
 801566e:	60f8      	str	r0, [r7, #12]
 8015670:	460b      	mov	r3, r1
 8015672:	607a      	str	r2, [r7, #4]
 8015674:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015676:	7afb      	ldrb	r3, [r7, #11]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d16f      	bne.n	801575c <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	3314      	adds	r3, #20
 8015680:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015688:	2b02      	cmp	r3, #2
 801568a:	d15a      	bne.n	8015742 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801568c:	693b      	ldr	r3, [r7, #16]
 801568e:	689a      	ldr	r2, [r3, #8]
 8015690:	693b      	ldr	r3, [r7, #16]
 8015692:	68db      	ldr	r3, [r3, #12]
 8015694:	429a      	cmp	r2, r3
 8015696:	d914      	bls.n	80156c2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015698:	693b      	ldr	r3, [r7, #16]
 801569a:	689a      	ldr	r2, [r3, #8]
 801569c:	693b      	ldr	r3, [r7, #16]
 801569e:	68db      	ldr	r3, [r3, #12]
 80156a0:	1ad2      	subs	r2, r2, r3
 80156a2:	693b      	ldr	r3, [r7, #16]
 80156a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80156a6:	693b      	ldr	r3, [r7, #16]
 80156a8:	689b      	ldr	r3, [r3, #8]
 80156aa:	461a      	mov	r2, r3
 80156ac:	6879      	ldr	r1, [r7, #4]
 80156ae:	68f8      	ldr	r0, [r7, #12]
 80156b0:	f001 f8ad 	bl	801680e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80156b4:	2300      	movs	r3, #0
 80156b6:	2200      	movs	r2, #0
 80156b8:	2100      	movs	r1, #0
 80156ba:	68f8      	ldr	r0, [r7, #12]
 80156bc:	f003 f925 	bl	801890a <USBD_LL_PrepareReceive>
 80156c0:	e03f      	b.n	8015742 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80156c2:	693b      	ldr	r3, [r7, #16]
 80156c4:	68da      	ldr	r2, [r3, #12]
 80156c6:	693b      	ldr	r3, [r7, #16]
 80156c8:	689b      	ldr	r3, [r3, #8]
 80156ca:	429a      	cmp	r2, r3
 80156cc:	d11c      	bne.n	8015708 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80156ce:	693b      	ldr	r3, [r7, #16]
 80156d0:	685a      	ldr	r2, [r3, #4]
 80156d2:	693b      	ldr	r3, [r7, #16]
 80156d4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80156d6:	429a      	cmp	r2, r3
 80156d8:	d316      	bcc.n	8015708 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80156da:	693b      	ldr	r3, [r7, #16]
 80156dc:	685a      	ldr	r2, [r3, #4]
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80156e4:	429a      	cmp	r2, r3
 80156e6:	d20f      	bcs.n	8015708 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80156e8:	2200      	movs	r2, #0
 80156ea:	2100      	movs	r1, #0
 80156ec:	68f8      	ldr	r0, [r7, #12]
 80156ee:	f001 f88e 	bl	801680e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	2200      	movs	r2, #0
 80156f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80156fa:	2300      	movs	r3, #0
 80156fc:	2200      	movs	r2, #0
 80156fe:	2100      	movs	r1, #0
 8015700:	68f8      	ldr	r0, [r7, #12]
 8015702:	f003 f902 	bl	801890a <USBD_LL_PrepareReceive>
 8015706:	e01c      	b.n	8015742 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801570e:	b2db      	uxtb	r3, r3
 8015710:	2b03      	cmp	r3, #3
 8015712:	d10f      	bne.n	8015734 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801571a:	68db      	ldr	r3, [r3, #12]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d009      	beq.n	8015734 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	2200      	movs	r2, #0
 8015724:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801572e:	68db      	ldr	r3, [r3, #12]
 8015730:	68f8      	ldr	r0, [r7, #12]
 8015732:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015734:	2180      	movs	r1, #128	; 0x80
 8015736:	68f8      	ldr	r0, [r7, #12]
 8015738:	f003 f83d 	bl	80187b6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801573c:	68f8      	ldr	r0, [r7, #12]
 801573e:	f001 f89b 	bl	8016878 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015748:	2b00      	cmp	r3, #0
 801574a:	d03a      	beq.n	80157c2 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801574c:	68f8      	ldr	r0, [r7, #12]
 801574e:	f7ff fe42 	bl	80153d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	2200      	movs	r2, #0
 8015756:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801575a:	e032      	b.n	80157c2 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801575c:	7afb      	ldrb	r3, [r7, #11]
 801575e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015762:	b2db      	uxtb	r3, r3
 8015764:	4619      	mov	r1, r3
 8015766:	68f8      	ldr	r0, [r7, #12]
 8015768:	f000 f97f 	bl	8015a6a <USBD_CoreFindEP>
 801576c:	4603      	mov	r3, r0
 801576e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015770:	7dfb      	ldrb	r3, [r7, #23]
 8015772:	2bff      	cmp	r3, #255	; 0xff
 8015774:	d025      	beq.n	80157c2 <USBD_LL_DataInStage+0x15a>
 8015776:	7dfb      	ldrb	r3, [r7, #23]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d122      	bne.n	80157c2 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015782:	b2db      	uxtb	r3, r3
 8015784:	2b03      	cmp	r3, #3
 8015786:	d11c      	bne.n	80157c2 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015788:	7dfa      	ldrb	r2, [r7, #23]
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	32ae      	adds	r2, #174	; 0xae
 801578e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015792:	695b      	ldr	r3, [r3, #20]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d014      	beq.n	80157c2 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015798:	7dfa      	ldrb	r2, [r7, #23]
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80157a0:	7dfa      	ldrb	r2, [r7, #23]
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	32ae      	adds	r2, #174	; 0xae
 80157a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157aa:	695b      	ldr	r3, [r3, #20]
 80157ac:	7afa      	ldrb	r2, [r7, #11]
 80157ae:	4611      	mov	r1, r2
 80157b0:	68f8      	ldr	r0, [r7, #12]
 80157b2:	4798      	blx	r3
 80157b4:	4603      	mov	r3, r0
 80157b6:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80157b8:	7dbb      	ldrb	r3, [r7, #22]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d001      	beq.n	80157c2 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80157be:	7dbb      	ldrb	r3, [r7, #22]
 80157c0:	e000      	b.n	80157c4 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80157c2:	2300      	movs	r3, #0
}
 80157c4:	4618      	mov	r0, r3
 80157c6:	3718      	adds	r7, #24
 80157c8:	46bd      	mov	sp, r7
 80157ca:	bd80      	pop	{r7, pc}

080157cc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b084      	sub	sp, #16
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80157d4:	2300      	movs	r3, #0
 80157d6:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	2201      	movs	r2, #1
 80157dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	2200      	movs	r2, #0
 80157e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	2200      	movs	r2, #0
 80157ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	2200      	movs	r2, #0
 80157f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	2200      	movs	r2, #0
 80157fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015804:	2b00      	cmp	r3, #0
 8015806:	d014      	beq.n	8015832 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801580e:	685b      	ldr	r3, [r3, #4]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d00e      	beq.n	8015832 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801581a:	685b      	ldr	r3, [r3, #4]
 801581c:	687a      	ldr	r2, [r7, #4]
 801581e:	6852      	ldr	r2, [r2, #4]
 8015820:	b2d2      	uxtb	r2, r2
 8015822:	4611      	mov	r1, r2
 8015824:	6878      	ldr	r0, [r7, #4]
 8015826:	4798      	blx	r3
 8015828:	4603      	mov	r3, r0
 801582a:	2b00      	cmp	r3, #0
 801582c:	d001      	beq.n	8015832 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801582e:	2303      	movs	r3, #3
 8015830:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015832:	2340      	movs	r3, #64	; 0x40
 8015834:	2200      	movs	r2, #0
 8015836:	2100      	movs	r1, #0
 8015838:	6878      	ldr	r0, [r7, #4]
 801583a:	f002 ff58 	bl	80186ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	2201      	movs	r2, #1
 8015842:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	2240      	movs	r2, #64	; 0x40
 801584a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801584e:	2340      	movs	r3, #64	; 0x40
 8015850:	2200      	movs	r2, #0
 8015852:	2180      	movs	r1, #128	; 0x80
 8015854:	6878      	ldr	r0, [r7, #4]
 8015856:	f002 ff4a 	bl	80186ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	2201      	movs	r2, #1
 801585e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	2240      	movs	r2, #64	; 0x40
 8015864:	621a      	str	r2, [r3, #32]

  return ret;
 8015866:	7bfb      	ldrb	r3, [r7, #15]
}
 8015868:	4618      	mov	r0, r3
 801586a:	3710      	adds	r7, #16
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}

08015870 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015870:	b480      	push	{r7}
 8015872:	b083      	sub	sp, #12
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
 8015878:	460b      	mov	r3, r1
 801587a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	78fa      	ldrb	r2, [r7, #3]
 8015880:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015882:	2300      	movs	r3, #0
}
 8015884:	4618      	mov	r0, r3
 8015886:	370c      	adds	r7, #12
 8015888:	46bd      	mov	sp, r7
 801588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801588e:	4770      	bx	lr

08015890 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015890:	b480      	push	{r7}
 8015892:	b083      	sub	sp, #12
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801589e:	b2da      	uxtb	r2, r3
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	2204      	movs	r2, #4
 80158aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80158ae:	2300      	movs	r3, #0
}
 80158b0:	4618      	mov	r0, r3
 80158b2:	370c      	adds	r7, #12
 80158b4:	46bd      	mov	sp, r7
 80158b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ba:	4770      	bx	lr

080158bc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80158bc:	b480      	push	{r7}
 80158be:	b083      	sub	sp, #12
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158ca:	b2db      	uxtb	r3, r3
 80158cc:	2b04      	cmp	r3, #4
 80158ce:	d106      	bne.n	80158de <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80158d6:	b2da      	uxtb	r2, r3
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80158de:	2300      	movs	r3, #0
}
 80158e0:	4618      	mov	r0, r3
 80158e2:	370c      	adds	r7, #12
 80158e4:	46bd      	mov	sp, r7
 80158e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ea:	4770      	bx	lr

080158ec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b082      	sub	sp, #8
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158fa:	b2db      	uxtb	r3, r3
 80158fc:	2b03      	cmp	r3, #3
 80158fe:	d110      	bne.n	8015922 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015906:	2b00      	cmp	r3, #0
 8015908:	d00b      	beq.n	8015922 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015910:	69db      	ldr	r3, [r3, #28]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d005      	beq.n	8015922 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801591c:	69db      	ldr	r3, [r3, #28]
 801591e:	6878      	ldr	r0, [r7, #4]
 8015920:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015922:	2300      	movs	r3, #0
}
 8015924:	4618      	mov	r0, r3
 8015926:	3708      	adds	r7, #8
 8015928:	46bd      	mov	sp, r7
 801592a:	bd80      	pop	{r7, pc}

0801592c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b082      	sub	sp, #8
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
 8015934:	460b      	mov	r3, r1
 8015936:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	32ae      	adds	r2, #174	; 0xae
 8015942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d101      	bne.n	801594e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801594a:	2303      	movs	r3, #3
 801594c:	e01c      	b.n	8015988 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015954:	b2db      	uxtb	r3, r3
 8015956:	2b03      	cmp	r3, #3
 8015958:	d115      	bne.n	8015986 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	32ae      	adds	r2, #174	; 0xae
 8015964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015968:	6a1b      	ldr	r3, [r3, #32]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d00b      	beq.n	8015986 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	32ae      	adds	r2, #174	; 0xae
 8015978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801597c:	6a1b      	ldr	r3, [r3, #32]
 801597e:	78fa      	ldrb	r2, [r7, #3]
 8015980:	4611      	mov	r1, r2
 8015982:	6878      	ldr	r0, [r7, #4]
 8015984:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015986:	2300      	movs	r3, #0
}
 8015988:	4618      	mov	r0, r3
 801598a:	3708      	adds	r7, #8
 801598c:	46bd      	mov	sp, r7
 801598e:	bd80      	pop	{r7, pc}

08015990 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015990:	b580      	push	{r7, lr}
 8015992:	b082      	sub	sp, #8
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
 8015998:	460b      	mov	r3, r1
 801599a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	32ae      	adds	r2, #174	; 0xae
 80159a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d101      	bne.n	80159b2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80159ae:	2303      	movs	r3, #3
 80159b0:	e01c      	b.n	80159ec <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159b8:	b2db      	uxtb	r3, r3
 80159ba:	2b03      	cmp	r3, #3
 80159bc:	d115      	bne.n	80159ea <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	32ae      	adds	r2, #174	; 0xae
 80159c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d00b      	beq.n	80159ea <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	32ae      	adds	r2, #174	; 0xae
 80159dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159e2:	78fa      	ldrb	r2, [r7, #3]
 80159e4:	4611      	mov	r1, r2
 80159e6:	6878      	ldr	r0, [r7, #4]
 80159e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80159ea:	2300      	movs	r3, #0
}
 80159ec:	4618      	mov	r0, r3
 80159ee:	3708      	adds	r7, #8
 80159f0:	46bd      	mov	sp, r7
 80159f2:	bd80      	pop	{r7, pc}

080159f4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80159f4:	b480      	push	{r7}
 80159f6:	b083      	sub	sp, #12
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80159fc:	2300      	movs	r3, #0
}
 80159fe:	4618      	mov	r0, r3
 8015a00:	370c      	adds	r7, #12
 8015a02:	46bd      	mov	sp, r7
 8015a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a08:	4770      	bx	lr

08015a0a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015a0a:	b580      	push	{r7, lr}
 8015a0c:	b084      	sub	sp, #16
 8015a0e:	af00      	add	r7, sp, #0
 8015a10:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015a12:	2300      	movs	r3, #0
 8015a14:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	2201      	movs	r2, #1
 8015a1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d00e      	beq.n	8015a46 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a2e:	685b      	ldr	r3, [r3, #4]
 8015a30:	687a      	ldr	r2, [r7, #4]
 8015a32:	6852      	ldr	r2, [r2, #4]
 8015a34:	b2d2      	uxtb	r2, r2
 8015a36:	4611      	mov	r1, r2
 8015a38:	6878      	ldr	r0, [r7, #4]
 8015a3a:	4798      	blx	r3
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d001      	beq.n	8015a46 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015a42:	2303      	movs	r3, #3
 8015a44:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a48:	4618      	mov	r0, r3
 8015a4a:	3710      	adds	r7, #16
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	bd80      	pop	{r7, pc}

08015a50 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015a50:	b480      	push	{r7}
 8015a52:	b083      	sub	sp, #12
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
 8015a58:	460b      	mov	r3, r1
 8015a5a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015a5c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015a5e:	4618      	mov	r0, r3
 8015a60:	370c      	adds	r7, #12
 8015a62:	46bd      	mov	sp, r7
 8015a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a68:	4770      	bx	lr

08015a6a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015a6a:	b480      	push	{r7}
 8015a6c:	b083      	sub	sp, #12
 8015a6e:	af00      	add	r7, sp, #0
 8015a70:	6078      	str	r0, [r7, #4]
 8015a72:	460b      	mov	r3, r1
 8015a74:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015a76:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015a78:	4618      	mov	r0, r3
 8015a7a:	370c      	adds	r7, #12
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a82:	4770      	bx	lr

08015a84 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b086      	sub	sp, #24
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
 8015a8c:	460b      	mov	r3, r1
 8015a8e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015a98:	2300      	movs	r3, #0
 8015a9a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	885b      	ldrh	r3, [r3, #2]
 8015aa0:	b29a      	uxth	r2, r3
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	781b      	ldrb	r3, [r3, #0]
 8015aa6:	b29b      	uxth	r3, r3
 8015aa8:	429a      	cmp	r2, r3
 8015aaa:	d920      	bls.n	8015aee <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	781b      	ldrb	r3, [r3, #0]
 8015ab0:	b29b      	uxth	r3, r3
 8015ab2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015ab4:	e013      	b.n	8015ade <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015ab6:	f107 030a 	add.w	r3, r7, #10
 8015aba:	4619      	mov	r1, r3
 8015abc:	6978      	ldr	r0, [r7, #20]
 8015abe:	f000 f81b 	bl	8015af8 <USBD_GetNextDesc>
 8015ac2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015ac4:	697b      	ldr	r3, [r7, #20]
 8015ac6:	785b      	ldrb	r3, [r3, #1]
 8015ac8:	2b05      	cmp	r3, #5
 8015aca:	d108      	bne.n	8015ade <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015acc:	697b      	ldr	r3, [r7, #20]
 8015ace:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015ad0:	693b      	ldr	r3, [r7, #16]
 8015ad2:	789b      	ldrb	r3, [r3, #2]
 8015ad4:	78fa      	ldrb	r2, [r7, #3]
 8015ad6:	429a      	cmp	r2, r3
 8015ad8:	d008      	beq.n	8015aec <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015ada:	2300      	movs	r3, #0
 8015adc:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	885b      	ldrh	r3, [r3, #2]
 8015ae2:	b29a      	uxth	r2, r3
 8015ae4:	897b      	ldrh	r3, [r7, #10]
 8015ae6:	429a      	cmp	r2, r3
 8015ae8:	d8e5      	bhi.n	8015ab6 <USBD_GetEpDesc+0x32>
 8015aea:	e000      	b.n	8015aee <USBD_GetEpDesc+0x6a>
          break;
 8015aec:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015aee:	693b      	ldr	r3, [r7, #16]
}
 8015af0:	4618      	mov	r0, r3
 8015af2:	3718      	adds	r7, #24
 8015af4:	46bd      	mov	sp, r7
 8015af6:	bd80      	pop	{r7, pc}

08015af8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015af8:	b480      	push	{r7}
 8015afa:	b085      	sub	sp, #20
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
 8015b00:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	881a      	ldrh	r2, [r3, #0]
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	781b      	ldrb	r3, [r3, #0]
 8015b0e:	b29b      	uxth	r3, r3
 8015b10:	4413      	add	r3, r2
 8015b12:	b29a      	uxth	r2, r3
 8015b14:	683b      	ldr	r3, [r7, #0]
 8015b16:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	781b      	ldrb	r3, [r3, #0]
 8015b1c:	461a      	mov	r2, r3
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	4413      	add	r3, r2
 8015b22:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015b24:	68fb      	ldr	r3, [r7, #12]
}
 8015b26:	4618      	mov	r0, r3
 8015b28:	3714      	adds	r7, #20
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b30:	4770      	bx	lr

08015b32 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015b32:	b480      	push	{r7}
 8015b34:	b087      	sub	sp, #28
 8015b36:	af00      	add	r7, sp, #0
 8015b38:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015b3e:	697b      	ldr	r3, [r7, #20]
 8015b40:	781b      	ldrb	r3, [r3, #0]
 8015b42:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015b44:	697b      	ldr	r3, [r7, #20]
 8015b46:	3301      	adds	r3, #1
 8015b48:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015b4a:	697b      	ldr	r3, [r7, #20]
 8015b4c:	781b      	ldrb	r3, [r3, #0]
 8015b4e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015b50:	8a3b      	ldrh	r3, [r7, #16]
 8015b52:	021b      	lsls	r3, r3, #8
 8015b54:	b21a      	sxth	r2, r3
 8015b56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015b5a:	4313      	orrs	r3, r2
 8015b5c:	b21b      	sxth	r3, r3
 8015b5e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015b60:	89fb      	ldrh	r3, [r7, #14]
}
 8015b62:	4618      	mov	r0, r3
 8015b64:	371c      	adds	r7, #28
 8015b66:	46bd      	mov	sp, r7
 8015b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6c:	4770      	bx	lr
	...

08015b70 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b084      	sub	sp, #16
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	6078      	str	r0, [r7, #4]
 8015b78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015b7e:	683b      	ldr	r3, [r7, #0]
 8015b80:	781b      	ldrb	r3, [r3, #0]
 8015b82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015b86:	2b40      	cmp	r3, #64	; 0x40
 8015b88:	d005      	beq.n	8015b96 <USBD_StdDevReq+0x26>
 8015b8a:	2b40      	cmp	r3, #64	; 0x40
 8015b8c:	d857      	bhi.n	8015c3e <USBD_StdDevReq+0xce>
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d00f      	beq.n	8015bb2 <USBD_StdDevReq+0x42>
 8015b92:	2b20      	cmp	r3, #32
 8015b94:	d153      	bne.n	8015c3e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	32ae      	adds	r2, #174	; 0xae
 8015ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ba4:	689b      	ldr	r3, [r3, #8]
 8015ba6:	6839      	ldr	r1, [r7, #0]
 8015ba8:	6878      	ldr	r0, [r7, #4]
 8015baa:	4798      	blx	r3
 8015bac:	4603      	mov	r3, r0
 8015bae:	73fb      	strb	r3, [r7, #15]
      break;
 8015bb0:	e04a      	b.n	8015c48 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015bb2:	683b      	ldr	r3, [r7, #0]
 8015bb4:	785b      	ldrb	r3, [r3, #1]
 8015bb6:	2b09      	cmp	r3, #9
 8015bb8:	d83b      	bhi.n	8015c32 <USBD_StdDevReq+0xc2>
 8015bba:	a201      	add	r2, pc, #4	; (adr r2, 8015bc0 <USBD_StdDevReq+0x50>)
 8015bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bc0:	08015c15 	.word	0x08015c15
 8015bc4:	08015c29 	.word	0x08015c29
 8015bc8:	08015c33 	.word	0x08015c33
 8015bcc:	08015c1f 	.word	0x08015c1f
 8015bd0:	08015c33 	.word	0x08015c33
 8015bd4:	08015bf3 	.word	0x08015bf3
 8015bd8:	08015be9 	.word	0x08015be9
 8015bdc:	08015c33 	.word	0x08015c33
 8015be0:	08015c0b 	.word	0x08015c0b
 8015be4:	08015bfd 	.word	0x08015bfd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015be8:	6839      	ldr	r1, [r7, #0]
 8015bea:	6878      	ldr	r0, [r7, #4]
 8015bec:	f000 fa3c 	bl	8016068 <USBD_GetDescriptor>
          break;
 8015bf0:	e024      	b.n	8015c3c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015bf2:	6839      	ldr	r1, [r7, #0]
 8015bf4:	6878      	ldr	r0, [r7, #4]
 8015bf6:	f000 fba1 	bl	801633c <USBD_SetAddress>
          break;
 8015bfa:	e01f      	b.n	8015c3c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015bfc:	6839      	ldr	r1, [r7, #0]
 8015bfe:	6878      	ldr	r0, [r7, #4]
 8015c00:	f000 fbe0 	bl	80163c4 <USBD_SetConfig>
 8015c04:	4603      	mov	r3, r0
 8015c06:	73fb      	strb	r3, [r7, #15]
          break;
 8015c08:	e018      	b.n	8015c3c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015c0a:	6839      	ldr	r1, [r7, #0]
 8015c0c:	6878      	ldr	r0, [r7, #4]
 8015c0e:	f000 fc83 	bl	8016518 <USBD_GetConfig>
          break;
 8015c12:	e013      	b.n	8015c3c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015c14:	6839      	ldr	r1, [r7, #0]
 8015c16:	6878      	ldr	r0, [r7, #4]
 8015c18:	f000 fcb4 	bl	8016584 <USBD_GetStatus>
          break;
 8015c1c:	e00e      	b.n	8015c3c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015c1e:	6839      	ldr	r1, [r7, #0]
 8015c20:	6878      	ldr	r0, [r7, #4]
 8015c22:	f000 fce3 	bl	80165ec <USBD_SetFeature>
          break;
 8015c26:	e009      	b.n	8015c3c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015c28:	6839      	ldr	r1, [r7, #0]
 8015c2a:	6878      	ldr	r0, [r7, #4]
 8015c2c:	f000 fd07 	bl	801663e <USBD_ClrFeature>
          break;
 8015c30:	e004      	b.n	8015c3c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015c32:	6839      	ldr	r1, [r7, #0]
 8015c34:	6878      	ldr	r0, [r7, #4]
 8015c36:	f000 fd5e 	bl	80166f6 <USBD_CtlError>
          break;
 8015c3a:	bf00      	nop
      }
      break;
 8015c3c:	e004      	b.n	8015c48 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015c3e:	6839      	ldr	r1, [r7, #0]
 8015c40:	6878      	ldr	r0, [r7, #4]
 8015c42:	f000 fd58 	bl	80166f6 <USBD_CtlError>
      break;
 8015c46:	bf00      	nop
  }

  return ret;
 8015c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	3710      	adds	r7, #16
 8015c4e:	46bd      	mov	sp, r7
 8015c50:	bd80      	pop	{r7, pc}
 8015c52:	bf00      	nop

08015c54 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b084      	sub	sp, #16
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
 8015c5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015c5e:	2300      	movs	r3, #0
 8015c60:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015c62:	683b      	ldr	r3, [r7, #0]
 8015c64:	781b      	ldrb	r3, [r3, #0]
 8015c66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015c6a:	2b40      	cmp	r3, #64	; 0x40
 8015c6c:	d005      	beq.n	8015c7a <USBD_StdItfReq+0x26>
 8015c6e:	2b40      	cmp	r3, #64	; 0x40
 8015c70:	d852      	bhi.n	8015d18 <USBD_StdItfReq+0xc4>
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d001      	beq.n	8015c7a <USBD_StdItfReq+0x26>
 8015c76:	2b20      	cmp	r3, #32
 8015c78:	d14e      	bne.n	8015d18 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c80:	b2db      	uxtb	r3, r3
 8015c82:	3b01      	subs	r3, #1
 8015c84:	2b02      	cmp	r3, #2
 8015c86:	d840      	bhi.n	8015d0a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015c88:	683b      	ldr	r3, [r7, #0]
 8015c8a:	889b      	ldrh	r3, [r3, #4]
 8015c8c:	b2db      	uxtb	r3, r3
 8015c8e:	2b01      	cmp	r3, #1
 8015c90:	d836      	bhi.n	8015d00 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015c92:	683b      	ldr	r3, [r7, #0]
 8015c94:	889b      	ldrh	r3, [r3, #4]
 8015c96:	b2db      	uxtb	r3, r3
 8015c98:	4619      	mov	r1, r3
 8015c9a:	6878      	ldr	r0, [r7, #4]
 8015c9c:	f7ff fed8 	bl	8015a50 <USBD_CoreFindIF>
 8015ca0:	4603      	mov	r3, r0
 8015ca2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015ca4:	7bbb      	ldrb	r3, [r7, #14]
 8015ca6:	2bff      	cmp	r3, #255	; 0xff
 8015ca8:	d01d      	beq.n	8015ce6 <USBD_StdItfReq+0x92>
 8015caa:	7bbb      	ldrb	r3, [r7, #14]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d11a      	bne.n	8015ce6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015cb0:	7bba      	ldrb	r2, [r7, #14]
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	32ae      	adds	r2, #174	; 0xae
 8015cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cba:	689b      	ldr	r3, [r3, #8]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d00f      	beq.n	8015ce0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015cc0:	7bba      	ldrb	r2, [r7, #14]
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015cc8:	7bba      	ldrb	r2, [r7, #14]
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	32ae      	adds	r2, #174	; 0xae
 8015cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cd2:	689b      	ldr	r3, [r3, #8]
 8015cd4:	6839      	ldr	r1, [r7, #0]
 8015cd6:	6878      	ldr	r0, [r7, #4]
 8015cd8:	4798      	blx	r3
 8015cda:	4603      	mov	r3, r0
 8015cdc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015cde:	e004      	b.n	8015cea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015ce0:	2303      	movs	r3, #3
 8015ce2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015ce4:	e001      	b.n	8015cea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015ce6:	2303      	movs	r3, #3
 8015ce8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015cea:	683b      	ldr	r3, [r7, #0]
 8015cec:	88db      	ldrh	r3, [r3, #6]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d110      	bne.n	8015d14 <USBD_StdItfReq+0xc0>
 8015cf2:	7bfb      	ldrb	r3, [r7, #15]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d10d      	bne.n	8015d14 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015cf8:	6878      	ldr	r0, [r7, #4]
 8015cfa:	f000 fdaa 	bl	8016852 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015cfe:	e009      	b.n	8015d14 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015d00:	6839      	ldr	r1, [r7, #0]
 8015d02:	6878      	ldr	r0, [r7, #4]
 8015d04:	f000 fcf7 	bl	80166f6 <USBD_CtlError>
          break;
 8015d08:	e004      	b.n	8015d14 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015d0a:	6839      	ldr	r1, [r7, #0]
 8015d0c:	6878      	ldr	r0, [r7, #4]
 8015d0e:	f000 fcf2 	bl	80166f6 <USBD_CtlError>
          break;
 8015d12:	e000      	b.n	8015d16 <USBD_StdItfReq+0xc2>
          break;
 8015d14:	bf00      	nop
      }
      break;
 8015d16:	e004      	b.n	8015d22 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015d18:	6839      	ldr	r1, [r7, #0]
 8015d1a:	6878      	ldr	r0, [r7, #4]
 8015d1c:	f000 fceb 	bl	80166f6 <USBD_CtlError>
      break;
 8015d20:	bf00      	nop
  }

  return ret;
 8015d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d24:	4618      	mov	r0, r3
 8015d26:	3710      	adds	r7, #16
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	bd80      	pop	{r7, pc}

08015d2c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b084      	sub	sp, #16
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	6078      	str	r0, [r7, #4]
 8015d34:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015d36:	2300      	movs	r3, #0
 8015d38:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015d3a:	683b      	ldr	r3, [r7, #0]
 8015d3c:	889b      	ldrh	r3, [r3, #4]
 8015d3e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015d40:	683b      	ldr	r3, [r7, #0]
 8015d42:	781b      	ldrb	r3, [r3, #0]
 8015d44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015d48:	2b40      	cmp	r3, #64	; 0x40
 8015d4a:	d007      	beq.n	8015d5c <USBD_StdEPReq+0x30>
 8015d4c:	2b40      	cmp	r3, #64	; 0x40
 8015d4e:	f200 817f 	bhi.w	8016050 <USBD_StdEPReq+0x324>
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d02a      	beq.n	8015dac <USBD_StdEPReq+0x80>
 8015d56:	2b20      	cmp	r3, #32
 8015d58:	f040 817a 	bne.w	8016050 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015d5c:	7bbb      	ldrb	r3, [r7, #14]
 8015d5e:	4619      	mov	r1, r3
 8015d60:	6878      	ldr	r0, [r7, #4]
 8015d62:	f7ff fe82 	bl	8015a6a <USBD_CoreFindEP>
 8015d66:	4603      	mov	r3, r0
 8015d68:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015d6a:	7b7b      	ldrb	r3, [r7, #13]
 8015d6c:	2bff      	cmp	r3, #255	; 0xff
 8015d6e:	f000 8174 	beq.w	801605a <USBD_StdEPReq+0x32e>
 8015d72:	7b7b      	ldrb	r3, [r7, #13]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	f040 8170 	bne.w	801605a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015d7a:	7b7a      	ldrb	r2, [r7, #13]
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015d82:	7b7a      	ldrb	r2, [r7, #13]
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	32ae      	adds	r2, #174	; 0xae
 8015d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d8c:	689b      	ldr	r3, [r3, #8]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	f000 8163 	beq.w	801605a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015d94:	7b7a      	ldrb	r2, [r7, #13]
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	32ae      	adds	r2, #174	; 0xae
 8015d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d9e:	689b      	ldr	r3, [r3, #8]
 8015da0:	6839      	ldr	r1, [r7, #0]
 8015da2:	6878      	ldr	r0, [r7, #4]
 8015da4:	4798      	blx	r3
 8015da6:	4603      	mov	r3, r0
 8015da8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015daa:	e156      	b.n	801605a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015dac:	683b      	ldr	r3, [r7, #0]
 8015dae:	785b      	ldrb	r3, [r3, #1]
 8015db0:	2b03      	cmp	r3, #3
 8015db2:	d008      	beq.n	8015dc6 <USBD_StdEPReq+0x9a>
 8015db4:	2b03      	cmp	r3, #3
 8015db6:	f300 8145 	bgt.w	8016044 <USBD_StdEPReq+0x318>
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	f000 809b 	beq.w	8015ef6 <USBD_StdEPReq+0x1ca>
 8015dc0:	2b01      	cmp	r3, #1
 8015dc2:	d03c      	beq.n	8015e3e <USBD_StdEPReq+0x112>
 8015dc4:	e13e      	b.n	8016044 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015dcc:	b2db      	uxtb	r3, r3
 8015dce:	2b02      	cmp	r3, #2
 8015dd0:	d002      	beq.n	8015dd8 <USBD_StdEPReq+0xac>
 8015dd2:	2b03      	cmp	r3, #3
 8015dd4:	d016      	beq.n	8015e04 <USBD_StdEPReq+0xd8>
 8015dd6:	e02c      	b.n	8015e32 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015dd8:	7bbb      	ldrb	r3, [r7, #14]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d00d      	beq.n	8015dfa <USBD_StdEPReq+0xce>
 8015dde:	7bbb      	ldrb	r3, [r7, #14]
 8015de0:	2b80      	cmp	r3, #128	; 0x80
 8015de2:	d00a      	beq.n	8015dfa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015de4:	7bbb      	ldrb	r3, [r7, #14]
 8015de6:	4619      	mov	r1, r3
 8015de8:	6878      	ldr	r0, [r7, #4]
 8015dea:	f002 fce4 	bl	80187b6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015dee:	2180      	movs	r1, #128	; 0x80
 8015df0:	6878      	ldr	r0, [r7, #4]
 8015df2:	f002 fce0 	bl	80187b6 <USBD_LL_StallEP>
 8015df6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015df8:	e020      	b.n	8015e3c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015dfa:	6839      	ldr	r1, [r7, #0]
 8015dfc:	6878      	ldr	r0, [r7, #4]
 8015dfe:	f000 fc7a 	bl	80166f6 <USBD_CtlError>
              break;
 8015e02:	e01b      	b.n	8015e3c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015e04:	683b      	ldr	r3, [r7, #0]
 8015e06:	885b      	ldrh	r3, [r3, #2]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d10e      	bne.n	8015e2a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015e0c:	7bbb      	ldrb	r3, [r7, #14]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d00b      	beq.n	8015e2a <USBD_StdEPReq+0xfe>
 8015e12:	7bbb      	ldrb	r3, [r7, #14]
 8015e14:	2b80      	cmp	r3, #128	; 0x80
 8015e16:	d008      	beq.n	8015e2a <USBD_StdEPReq+0xfe>
 8015e18:	683b      	ldr	r3, [r7, #0]
 8015e1a:	88db      	ldrh	r3, [r3, #6]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d104      	bne.n	8015e2a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015e20:	7bbb      	ldrb	r3, [r7, #14]
 8015e22:	4619      	mov	r1, r3
 8015e24:	6878      	ldr	r0, [r7, #4]
 8015e26:	f002 fcc6 	bl	80187b6 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015e2a:	6878      	ldr	r0, [r7, #4]
 8015e2c:	f000 fd11 	bl	8016852 <USBD_CtlSendStatus>

              break;
 8015e30:	e004      	b.n	8015e3c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015e32:	6839      	ldr	r1, [r7, #0]
 8015e34:	6878      	ldr	r0, [r7, #4]
 8015e36:	f000 fc5e 	bl	80166f6 <USBD_CtlError>
              break;
 8015e3a:	bf00      	nop
          }
          break;
 8015e3c:	e107      	b.n	801604e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e44:	b2db      	uxtb	r3, r3
 8015e46:	2b02      	cmp	r3, #2
 8015e48:	d002      	beq.n	8015e50 <USBD_StdEPReq+0x124>
 8015e4a:	2b03      	cmp	r3, #3
 8015e4c:	d016      	beq.n	8015e7c <USBD_StdEPReq+0x150>
 8015e4e:	e04b      	b.n	8015ee8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015e50:	7bbb      	ldrb	r3, [r7, #14]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d00d      	beq.n	8015e72 <USBD_StdEPReq+0x146>
 8015e56:	7bbb      	ldrb	r3, [r7, #14]
 8015e58:	2b80      	cmp	r3, #128	; 0x80
 8015e5a:	d00a      	beq.n	8015e72 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015e5c:	7bbb      	ldrb	r3, [r7, #14]
 8015e5e:	4619      	mov	r1, r3
 8015e60:	6878      	ldr	r0, [r7, #4]
 8015e62:	f002 fca8 	bl	80187b6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015e66:	2180      	movs	r1, #128	; 0x80
 8015e68:	6878      	ldr	r0, [r7, #4]
 8015e6a:	f002 fca4 	bl	80187b6 <USBD_LL_StallEP>
 8015e6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015e70:	e040      	b.n	8015ef4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015e72:	6839      	ldr	r1, [r7, #0]
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f000 fc3e 	bl	80166f6 <USBD_CtlError>
              break;
 8015e7a:	e03b      	b.n	8015ef4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015e7c:	683b      	ldr	r3, [r7, #0]
 8015e7e:	885b      	ldrh	r3, [r3, #2]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d136      	bne.n	8015ef2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015e84:	7bbb      	ldrb	r3, [r7, #14]
 8015e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d004      	beq.n	8015e98 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015e8e:	7bbb      	ldrb	r3, [r7, #14]
 8015e90:	4619      	mov	r1, r3
 8015e92:	6878      	ldr	r0, [r7, #4]
 8015e94:	f002 fcae 	bl	80187f4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015e98:	6878      	ldr	r0, [r7, #4]
 8015e9a:	f000 fcda 	bl	8016852 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015e9e:	7bbb      	ldrb	r3, [r7, #14]
 8015ea0:	4619      	mov	r1, r3
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	f7ff fde1 	bl	8015a6a <USBD_CoreFindEP>
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015eac:	7b7b      	ldrb	r3, [r7, #13]
 8015eae:	2bff      	cmp	r3, #255	; 0xff
 8015eb0:	d01f      	beq.n	8015ef2 <USBD_StdEPReq+0x1c6>
 8015eb2:	7b7b      	ldrb	r3, [r7, #13]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d11c      	bne.n	8015ef2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015eb8:	7b7a      	ldrb	r2, [r7, #13]
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015ec0:	7b7a      	ldrb	r2, [r7, #13]
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	32ae      	adds	r2, #174	; 0xae
 8015ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015eca:	689b      	ldr	r3, [r3, #8]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d010      	beq.n	8015ef2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015ed0:	7b7a      	ldrb	r2, [r7, #13]
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	32ae      	adds	r2, #174	; 0xae
 8015ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015eda:	689b      	ldr	r3, [r3, #8]
 8015edc:	6839      	ldr	r1, [r7, #0]
 8015ede:	6878      	ldr	r0, [r7, #4]
 8015ee0:	4798      	blx	r3
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015ee6:	e004      	b.n	8015ef2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015ee8:	6839      	ldr	r1, [r7, #0]
 8015eea:	6878      	ldr	r0, [r7, #4]
 8015eec:	f000 fc03 	bl	80166f6 <USBD_CtlError>
              break;
 8015ef0:	e000      	b.n	8015ef4 <USBD_StdEPReq+0x1c8>
              break;
 8015ef2:	bf00      	nop
          }
          break;
 8015ef4:	e0ab      	b.n	801604e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015efc:	b2db      	uxtb	r3, r3
 8015efe:	2b02      	cmp	r3, #2
 8015f00:	d002      	beq.n	8015f08 <USBD_StdEPReq+0x1dc>
 8015f02:	2b03      	cmp	r3, #3
 8015f04:	d032      	beq.n	8015f6c <USBD_StdEPReq+0x240>
 8015f06:	e097      	b.n	8016038 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015f08:	7bbb      	ldrb	r3, [r7, #14]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d007      	beq.n	8015f1e <USBD_StdEPReq+0x1f2>
 8015f0e:	7bbb      	ldrb	r3, [r7, #14]
 8015f10:	2b80      	cmp	r3, #128	; 0x80
 8015f12:	d004      	beq.n	8015f1e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015f14:	6839      	ldr	r1, [r7, #0]
 8015f16:	6878      	ldr	r0, [r7, #4]
 8015f18:	f000 fbed 	bl	80166f6 <USBD_CtlError>
                break;
 8015f1c:	e091      	b.n	8016042 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015f1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	da0b      	bge.n	8015f3e <USBD_StdEPReq+0x212>
 8015f26:	7bbb      	ldrb	r3, [r7, #14]
 8015f28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015f2c:	4613      	mov	r3, r2
 8015f2e:	009b      	lsls	r3, r3, #2
 8015f30:	4413      	add	r3, r2
 8015f32:	009b      	lsls	r3, r3, #2
 8015f34:	3310      	adds	r3, #16
 8015f36:	687a      	ldr	r2, [r7, #4]
 8015f38:	4413      	add	r3, r2
 8015f3a:	3304      	adds	r3, #4
 8015f3c:	e00b      	b.n	8015f56 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015f3e:	7bbb      	ldrb	r3, [r7, #14]
 8015f40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015f44:	4613      	mov	r3, r2
 8015f46:	009b      	lsls	r3, r3, #2
 8015f48:	4413      	add	r3, r2
 8015f4a:	009b      	lsls	r3, r3, #2
 8015f4c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015f50:	687a      	ldr	r2, [r7, #4]
 8015f52:	4413      	add	r3, r2
 8015f54:	3304      	adds	r3, #4
 8015f56:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015f58:	68bb      	ldr	r3, [r7, #8]
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015f5e:	68bb      	ldr	r3, [r7, #8]
 8015f60:	2202      	movs	r2, #2
 8015f62:	4619      	mov	r1, r3
 8015f64:	6878      	ldr	r0, [r7, #4]
 8015f66:	f000 fc37 	bl	80167d8 <USBD_CtlSendData>
              break;
 8015f6a:	e06a      	b.n	8016042 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015f6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	da11      	bge.n	8015f98 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015f74:	7bbb      	ldrb	r3, [r7, #14]
 8015f76:	f003 020f 	and.w	r2, r3, #15
 8015f7a:	6879      	ldr	r1, [r7, #4]
 8015f7c:	4613      	mov	r3, r2
 8015f7e:	009b      	lsls	r3, r3, #2
 8015f80:	4413      	add	r3, r2
 8015f82:	009b      	lsls	r3, r3, #2
 8015f84:	440b      	add	r3, r1
 8015f86:	3324      	adds	r3, #36	; 0x24
 8015f88:	881b      	ldrh	r3, [r3, #0]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d117      	bne.n	8015fbe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015f8e:	6839      	ldr	r1, [r7, #0]
 8015f90:	6878      	ldr	r0, [r7, #4]
 8015f92:	f000 fbb0 	bl	80166f6 <USBD_CtlError>
                  break;
 8015f96:	e054      	b.n	8016042 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015f98:	7bbb      	ldrb	r3, [r7, #14]
 8015f9a:	f003 020f 	and.w	r2, r3, #15
 8015f9e:	6879      	ldr	r1, [r7, #4]
 8015fa0:	4613      	mov	r3, r2
 8015fa2:	009b      	lsls	r3, r3, #2
 8015fa4:	4413      	add	r3, r2
 8015fa6:	009b      	lsls	r3, r3, #2
 8015fa8:	440b      	add	r3, r1
 8015faa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015fae:	881b      	ldrh	r3, [r3, #0]
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d104      	bne.n	8015fbe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015fb4:	6839      	ldr	r1, [r7, #0]
 8015fb6:	6878      	ldr	r0, [r7, #4]
 8015fb8:	f000 fb9d 	bl	80166f6 <USBD_CtlError>
                  break;
 8015fbc:	e041      	b.n	8016042 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015fbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	da0b      	bge.n	8015fde <USBD_StdEPReq+0x2b2>
 8015fc6:	7bbb      	ldrb	r3, [r7, #14]
 8015fc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015fcc:	4613      	mov	r3, r2
 8015fce:	009b      	lsls	r3, r3, #2
 8015fd0:	4413      	add	r3, r2
 8015fd2:	009b      	lsls	r3, r3, #2
 8015fd4:	3310      	adds	r3, #16
 8015fd6:	687a      	ldr	r2, [r7, #4]
 8015fd8:	4413      	add	r3, r2
 8015fda:	3304      	adds	r3, #4
 8015fdc:	e00b      	b.n	8015ff6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015fde:	7bbb      	ldrb	r3, [r7, #14]
 8015fe0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015fe4:	4613      	mov	r3, r2
 8015fe6:	009b      	lsls	r3, r3, #2
 8015fe8:	4413      	add	r3, r2
 8015fea:	009b      	lsls	r3, r3, #2
 8015fec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015ff0:	687a      	ldr	r2, [r7, #4]
 8015ff2:	4413      	add	r3, r2
 8015ff4:	3304      	adds	r3, #4
 8015ff6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015ff8:	7bbb      	ldrb	r3, [r7, #14]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d002      	beq.n	8016004 <USBD_StdEPReq+0x2d8>
 8015ffe:	7bbb      	ldrb	r3, [r7, #14]
 8016000:	2b80      	cmp	r3, #128	; 0x80
 8016002:	d103      	bne.n	801600c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016004:	68bb      	ldr	r3, [r7, #8]
 8016006:	2200      	movs	r2, #0
 8016008:	601a      	str	r2, [r3, #0]
 801600a:	e00e      	b.n	801602a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801600c:	7bbb      	ldrb	r3, [r7, #14]
 801600e:	4619      	mov	r1, r3
 8016010:	6878      	ldr	r0, [r7, #4]
 8016012:	f002 fc0e 	bl	8018832 <USBD_LL_IsStallEP>
 8016016:	4603      	mov	r3, r0
 8016018:	2b00      	cmp	r3, #0
 801601a:	d003      	beq.n	8016024 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801601c:	68bb      	ldr	r3, [r7, #8]
 801601e:	2201      	movs	r2, #1
 8016020:	601a      	str	r2, [r3, #0]
 8016022:	e002      	b.n	801602a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016024:	68bb      	ldr	r3, [r7, #8]
 8016026:	2200      	movs	r2, #0
 8016028:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801602a:	68bb      	ldr	r3, [r7, #8]
 801602c:	2202      	movs	r2, #2
 801602e:	4619      	mov	r1, r3
 8016030:	6878      	ldr	r0, [r7, #4]
 8016032:	f000 fbd1 	bl	80167d8 <USBD_CtlSendData>
              break;
 8016036:	e004      	b.n	8016042 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016038:	6839      	ldr	r1, [r7, #0]
 801603a:	6878      	ldr	r0, [r7, #4]
 801603c:	f000 fb5b 	bl	80166f6 <USBD_CtlError>
              break;
 8016040:	bf00      	nop
          }
          break;
 8016042:	e004      	b.n	801604e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016044:	6839      	ldr	r1, [r7, #0]
 8016046:	6878      	ldr	r0, [r7, #4]
 8016048:	f000 fb55 	bl	80166f6 <USBD_CtlError>
          break;
 801604c:	bf00      	nop
      }
      break;
 801604e:	e005      	b.n	801605c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016050:	6839      	ldr	r1, [r7, #0]
 8016052:	6878      	ldr	r0, [r7, #4]
 8016054:	f000 fb4f 	bl	80166f6 <USBD_CtlError>
      break;
 8016058:	e000      	b.n	801605c <USBD_StdEPReq+0x330>
      break;
 801605a:	bf00      	nop
  }

  return ret;
 801605c:	7bfb      	ldrb	r3, [r7, #15]
}
 801605e:	4618      	mov	r0, r3
 8016060:	3710      	adds	r7, #16
 8016062:	46bd      	mov	sp, r7
 8016064:	bd80      	pop	{r7, pc}
	...

08016068 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b084      	sub	sp, #16
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
 8016070:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016072:	2300      	movs	r3, #0
 8016074:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016076:	2300      	movs	r3, #0
 8016078:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801607a:	2300      	movs	r3, #0
 801607c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801607e:	683b      	ldr	r3, [r7, #0]
 8016080:	885b      	ldrh	r3, [r3, #2]
 8016082:	0a1b      	lsrs	r3, r3, #8
 8016084:	b29b      	uxth	r3, r3
 8016086:	3b01      	subs	r3, #1
 8016088:	2b06      	cmp	r3, #6
 801608a:	f200 8128 	bhi.w	80162de <USBD_GetDescriptor+0x276>
 801608e:	a201      	add	r2, pc, #4	; (adr r2, 8016094 <USBD_GetDescriptor+0x2c>)
 8016090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016094:	080160b1 	.word	0x080160b1
 8016098:	080160c9 	.word	0x080160c9
 801609c:	08016109 	.word	0x08016109
 80160a0:	080162df 	.word	0x080162df
 80160a4:	080162df 	.word	0x080162df
 80160a8:	0801627f 	.word	0x0801627f
 80160ac:	080162ab 	.word	0x080162ab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	687a      	ldr	r2, [r7, #4]
 80160ba:	7c12      	ldrb	r2, [r2, #16]
 80160bc:	f107 0108 	add.w	r1, r7, #8
 80160c0:	4610      	mov	r0, r2
 80160c2:	4798      	blx	r3
 80160c4:	60f8      	str	r0, [r7, #12]
      break;
 80160c6:	e112      	b.n	80162ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	7c1b      	ldrb	r3, [r3, #16]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d10d      	bne.n	80160ec <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80160d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160d8:	f107 0208 	add.w	r2, r7, #8
 80160dc:	4610      	mov	r0, r2
 80160de:	4798      	blx	r3
 80160e0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	3301      	adds	r3, #1
 80160e6:	2202      	movs	r2, #2
 80160e8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80160ea:	e100      	b.n	80162ee <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80160f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160f4:	f107 0208 	add.w	r2, r7, #8
 80160f8:	4610      	mov	r0, r2
 80160fa:	4798      	blx	r3
 80160fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	3301      	adds	r3, #1
 8016102:	2202      	movs	r2, #2
 8016104:	701a      	strb	r2, [r3, #0]
      break;
 8016106:	e0f2      	b.n	80162ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016108:	683b      	ldr	r3, [r7, #0]
 801610a:	885b      	ldrh	r3, [r3, #2]
 801610c:	b2db      	uxtb	r3, r3
 801610e:	2b05      	cmp	r3, #5
 8016110:	f200 80ac 	bhi.w	801626c <USBD_GetDescriptor+0x204>
 8016114:	a201      	add	r2, pc, #4	; (adr r2, 801611c <USBD_GetDescriptor+0xb4>)
 8016116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801611a:	bf00      	nop
 801611c:	08016135 	.word	0x08016135
 8016120:	08016169 	.word	0x08016169
 8016124:	0801619d 	.word	0x0801619d
 8016128:	080161d1 	.word	0x080161d1
 801612c:	08016205 	.word	0x08016205
 8016130:	08016239 	.word	0x08016239
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801613a:	685b      	ldr	r3, [r3, #4]
 801613c:	2b00      	cmp	r3, #0
 801613e:	d00b      	beq.n	8016158 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016146:	685b      	ldr	r3, [r3, #4]
 8016148:	687a      	ldr	r2, [r7, #4]
 801614a:	7c12      	ldrb	r2, [r2, #16]
 801614c:	f107 0108 	add.w	r1, r7, #8
 8016150:	4610      	mov	r0, r2
 8016152:	4798      	blx	r3
 8016154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016156:	e091      	b.n	801627c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016158:	6839      	ldr	r1, [r7, #0]
 801615a:	6878      	ldr	r0, [r7, #4]
 801615c:	f000 facb 	bl	80166f6 <USBD_CtlError>
            err++;
 8016160:	7afb      	ldrb	r3, [r7, #11]
 8016162:	3301      	adds	r3, #1
 8016164:	72fb      	strb	r3, [r7, #11]
          break;
 8016166:	e089      	b.n	801627c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801616e:	689b      	ldr	r3, [r3, #8]
 8016170:	2b00      	cmp	r3, #0
 8016172:	d00b      	beq.n	801618c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801617a:	689b      	ldr	r3, [r3, #8]
 801617c:	687a      	ldr	r2, [r7, #4]
 801617e:	7c12      	ldrb	r2, [r2, #16]
 8016180:	f107 0108 	add.w	r1, r7, #8
 8016184:	4610      	mov	r0, r2
 8016186:	4798      	blx	r3
 8016188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801618a:	e077      	b.n	801627c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801618c:	6839      	ldr	r1, [r7, #0]
 801618e:	6878      	ldr	r0, [r7, #4]
 8016190:	f000 fab1 	bl	80166f6 <USBD_CtlError>
            err++;
 8016194:	7afb      	ldrb	r3, [r7, #11]
 8016196:	3301      	adds	r3, #1
 8016198:	72fb      	strb	r3, [r7, #11]
          break;
 801619a:	e06f      	b.n	801627c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80161a2:	68db      	ldr	r3, [r3, #12]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d00b      	beq.n	80161c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80161ae:	68db      	ldr	r3, [r3, #12]
 80161b0:	687a      	ldr	r2, [r7, #4]
 80161b2:	7c12      	ldrb	r2, [r2, #16]
 80161b4:	f107 0108 	add.w	r1, r7, #8
 80161b8:	4610      	mov	r0, r2
 80161ba:	4798      	blx	r3
 80161bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80161be:	e05d      	b.n	801627c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80161c0:	6839      	ldr	r1, [r7, #0]
 80161c2:	6878      	ldr	r0, [r7, #4]
 80161c4:	f000 fa97 	bl	80166f6 <USBD_CtlError>
            err++;
 80161c8:	7afb      	ldrb	r3, [r7, #11]
 80161ca:	3301      	adds	r3, #1
 80161cc:	72fb      	strb	r3, [r7, #11]
          break;
 80161ce:	e055      	b.n	801627c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80161d6:	691b      	ldr	r3, [r3, #16]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d00b      	beq.n	80161f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80161e2:	691b      	ldr	r3, [r3, #16]
 80161e4:	687a      	ldr	r2, [r7, #4]
 80161e6:	7c12      	ldrb	r2, [r2, #16]
 80161e8:	f107 0108 	add.w	r1, r7, #8
 80161ec:	4610      	mov	r0, r2
 80161ee:	4798      	blx	r3
 80161f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80161f2:	e043      	b.n	801627c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80161f4:	6839      	ldr	r1, [r7, #0]
 80161f6:	6878      	ldr	r0, [r7, #4]
 80161f8:	f000 fa7d 	bl	80166f6 <USBD_CtlError>
            err++;
 80161fc:	7afb      	ldrb	r3, [r7, #11]
 80161fe:	3301      	adds	r3, #1
 8016200:	72fb      	strb	r3, [r7, #11]
          break;
 8016202:	e03b      	b.n	801627c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801620a:	695b      	ldr	r3, [r3, #20]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d00b      	beq.n	8016228 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016216:	695b      	ldr	r3, [r3, #20]
 8016218:	687a      	ldr	r2, [r7, #4]
 801621a:	7c12      	ldrb	r2, [r2, #16]
 801621c:	f107 0108 	add.w	r1, r7, #8
 8016220:	4610      	mov	r0, r2
 8016222:	4798      	blx	r3
 8016224:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016226:	e029      	b.n	801627c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016228:	6839      	ldr	r1, [r7, #0]
 801622a:	6878      	ldr	r0, [r7, #4]
 801622c:	f000 fa63 	bl	80166f6 <USBD_CtlError>
            err++;
 8016230:	7afb      	ldrb	r3, [r7, #11]
 8016232:	3301      	adds	r3, #1
 8016234:	72fb      	strb	r3, [r7, #11]
          break;
 8016236:	e021      	b.n	801627c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801623e:	699b      	ldr	r3, [r3, #24]
 8016240:	2b00      	cmp	r3, #0
 8016242:	d00b      	beq.n	801625c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801624a:	699b      	ldr	r3, [r3, #24]
 801624c:	687a      	ldr	r2, [r7, #4]
 801624e:	7c12      	ldrb	r2, [r2, #16]
 8016250:	f107 0108 	add.w	r1, r7, #8
 8016254:	4610      	mov	r0, r2
 8016256:	4798      	blx	r3
 8016258:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801625a:	e00f      	b.n	801627c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801625c:	6839      	ldr	r1, [r7, #0]
 801625e:	6878      	ldr	r0, [r7, #4]
 8016260:	f000 fa49 	bl	80166f6 <USBD_CtlError>
            err++;
 8016264:	7afb      	ldrb	r3, [r7, #11]
 8016266:	3301      	adds	r3, #1
 8016268:	72fb      	strb	r3, [r7, #11]
          break;
 801626a:	e007      	b.n	801627c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801626c:	6839      	ldr	r1, [r7, #0]
 801626e:	6878      	ldr	r0, [r7, #4]
 8016270:	f000 fa41 	bl	80166f6 <USBD_CtlError>
          err++;
 8016274:	7afb      	ldrb	r3, [r7, #11]
 8016276:	3301      	adds	r3, #1
 8016278:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801627a:	bf00      	nop
      }
      break;
 801627c:	e037      	b.n	80162ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	7c1b      	ldrb	r3, [r3, #16]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d109      	bne.n	801629a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801628c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801628e:	f107 0208 	add.w	r2, r7, #8
 8016292:	4610      	mov	r0, r2
 8016294:	4798      	blx	r3
 8016296:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016298:	e029      	b.n	80162ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801629a:	6839      	ldr	r1, [r7, #0]
 801629c:	6878      	ldr	r0, [r7, #4]
 801629e:	f000 fa2a 	bl	80166f6 <USBD_CtlError>
        err++;
 80162a2:	7afb      	ldrb	r3, [r7, #11]
 80162a4:	3301      	adds	r3, #1
 80162a6:	72fb      	strb	r3, [r7, #11]
      break;
 80162a8:	e021      	b.n	80162ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	7c1b      	ldrb	r3, [r3, #16]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d10d      	bne.n	80162ce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162ba:	f107 0208 	add.w	r2, r7, #8
 80162be:	4610      	mov	r0, r2
 80162c0:	4798      	blx	r3
 80162c2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	3301      	adds	r3, #1
 80162c8:	2207      	movs	r2, #7
 80162ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80162cc:	e00f      	b.n	80162ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80162ce:	6839      	ldr	r1, [r7, #0]
 80162d0:	6878      	ldr	r0, [r7, #4]
 80162d2:	f000 fa10 	bl	80166f6 <USBD_CtlError>
        err++;
 80162d6:	7afb      	ldrb	r3, [r7, #11]
 80162d8:	3301      	adds	r3, #1
 80162da:	72fb      	strb	r3, [r7, #11]
      break;
 80162dc:	e007      	b.n	80162ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80162de:	6839      	ldr	r1, [r7, #0]
 80162e0:	6878      	ldr	r0, [r7, #4]
 80162e2:	f000 fa08 	bl	80166f6 <USBD_CtlError>
      err++;
 80162e6:	7afb      	ldrb	r3, [r7, #11]
 80162e8:	3301      	adds	r3, #1
 80162ea:	72fb      	strb	r3, [r7, #11]
      break;
 80162ec:	bf00      	nop
  }

  if (err != 0U)
 80162ee:	7afb      	ldrb	r3, [r7, #11]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d11e      	bne.n	8016332 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80162f4:	683b      	ldr	r3, [r7, #0]
 80162f6:	88db      	ldrh	r3, [r3, #6]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d016      	beq.n	801632a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80162fc:	893b      	ldrh	r3, [r7, #8]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d00e      	beq.n	8016320 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8016302:	683b      	ldr	r3, [r7, #0]
 8016304:	88da      	ldrh	r2, [r3, #6]
 8016306:	893b      	ldrh	r3, [r7, #8]
 8016308:	4293      	cmp	r3, r2
 801630a:	bf28      	it	cs
 801630c:	4613      	movcs	r3, r2
 801630e:	b29b      	uxth	r3, r3
 8016310:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016312:	893b      	ldrh	r3, [r7, #8]
 8016314:	461a      	mov	r2, r3
 8016316:	68f9      	ldr	r1, [r7, #12]
 8016318:	6878      	ldr	r0, [r7, #4]
 801631a:	f000 fa5d 	bl	80167d8 <USBD_CtlSendData>
 801631e:	e009      	b.n	8016334 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016320:	6839      	ldr	r1, [r7, #0]
 8016322:	6878      	ldr	r0, [r7, #4]
 8016324:	f000 f9e7 	bl	80166f6 <USBD_CtlError>
 8016328:	e004      	b.n	8016334 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801632a:	6878      	ldr	r0, [r7, #4]
 801632c:	f000 fa91 	bl	8016852 <USBD_CtlSendStatus>
 8016330:	e000      	b.n	8016334 <USBD_GetDescriptor+0x2cc>
    return;
 8016332:	bf00      	nop
  }
}
 8016334:	3710      	adds	r7, #16
 8016336:	46bd      	mov	sp, r7
 8016338:	bd80      	pop	{r7, pc}
 801633a:	bf00      	nop

0801633c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801633c:	b580      	push	{r7, lr}
 801633e:	b084      	sub	sp, #16
 8016340:	af00      	add	r7, sp, #0
 8016342:	6078      	str	r0, [r7, #4]
 8016344:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016346:	683b      	ldr	r3, [r7, #0]
 8016348:	889b      	ldrh	r3, [r3, #4]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d131      	bne.n	80163b2 <USBD_SetAddress+0x76>
 801634e:	683b      	ldr	r3, [r7, #0]
 8016350:	88db      	ldrh	r3, [r3, #6]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d12d      	bne.n	80163b2 <USBD_SetAddress+0x76>
 8016356:	683b      	ldr	r3, [r7, #0]
 8016358:	885b      	ldrh	r3, [r3, #2]
 801635a:	2b7f      	cmp	r3, #127	; 0x7f
 801635c:	d829      	bhi.n	80163b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801635e:	683b      	ldr	r3, [r7, #0]
 8016360:	885b      	ldrh	r3, [r3, #2]
 8016362:	b2db      	uxtb	r3, r3
 8016364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016368:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016370:	b2db      	uxtb	r3, r3
 8016372:	2b03      	cmp	r3, #3
 8016374:	d104      	bne.n	8016380 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016376:	6839      	ldr	r1, [r7, #0]
 8016378:	6878      	ldr	r0, [r7, #4]
 801637a:	f000 f9bc 	bl	80166f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801637e:	e01d      	b.n	80163bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	7bfa      	ldrb	r2, [r7, #15]
 8016384:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016388:	7bfb      	ldrb	r3, [r7, #15]
 801638a:	4619      	mov	r1, r3
 801638c:	6878      	ldr	r0, [r7, #4]
 801638e:	f002 fa7c 	bl	801888a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016392:	6878      	ldr	r0, [r7, #4]
 8016394:	f000 fa5d 	bl	8016852 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016398:	7bfb      	ldrb	r3, [r7, #15]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d004      	beq.n	80163a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	2202      	movs	r2, #2
 80163a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163a6:	e009      	b.n	80163bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	2201      	movs	r2, #1
 80163ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163b0:	e004      	b.n	80163bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80163b2:	6839      	ldr	r1, [r7, #0]
 80163b4:	6878      	ldr	r0, [r7, #4]
 80163b6:	f000 f99e 	bl	80166f6 <USBD_CtlError>
  }
}
 80163ba:	bf00      	nop
 80163bc:	bf00      	nop
 80163be:	3710      	adds	r7, #16
 80163c0:	46bd      	mov	sp, r7
 80163c2:	bd80      	pop	{r7, pc}

080163c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b084      	sub	sp, #16
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
 80163cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80163ce:	2300      	movs	r3, #0
 80163d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80163d2:	683b      	ldr	r3, [r7, #0]
 80163d4:	885b      	ldrh	r3, [r3, #2]
 80163d6:	b2da      	uxtb	r2, r3
 80163d8:	4b4e      	ldr	r3, [pc, #312]	; (8016514 <USBD_SetConfig+0x150>)
 80163da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80163dc:	4b4d      	ldr	r3, [pc, #308]	; (8016514 <USBD_SetConfig+0x150>)
 80163de:	781b      	ldrb	r3, [r3, #0]
 80163e0:	2b01      	cmp	r3, #1
 80163e2:	d905      	bls.n	80163f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80163e4:	6839      	ldr	r1, [r7, #0]
 80163e6:	6878      	ldr	r0, [r7, #4]
 80163e8:	f000 f985 	bl	80166f6 <USBD_CtlError>
    return USBD_FAIL;
 80163ec:	2303      	movs	r3, #3
 80163ee:	e08c      	b.n	801650a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80163f6:	b2db      	uxtb	r3, r3
 80163f8:	2b02      	cmp	r3, #2
 80163fa:	d002      	beq.n	8016402 <USBD_SetConfig+0x3e>
 80163fc:	2b03      	cmp	r3, #3
 80163fe:	d029      	beq.n	8016454 <USBD_SetConfig+0x90>
 8016400:	e075      	b.n	80164ee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016402:	4b44      	ldr	r3, [pc, #272]	; (8016514 <USBD_SetConfig+0x150>)
 8016404:	781b      	ldrb	r3, [r3, #0]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d020      	beq.n	801644c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801640a:	4b42      	ldr	r3, [pc, #264]	; (8016514 <USBD_SetConfig+0x150>)
 801640c:	781b      	ldrb	r3, [r3, #0]
 801640e:	461a      	mov	r2, r3
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016414:	4b3f      	ldr	r3, [pc, #252]	; (8016514 <USBD_SetConfig+0x150>)
 8016416:	781b      	ldrb	r3, [r3, #0]
 8016418:	4619      	mov	r1, r3
 801641a:	6878      	ldr	r0, [r7, #4]
 801641c:	f7fe ffe6 	bl	80153ec <USBD_SetClassConfig>
 8016420:	4603      	mov	r3, r0
 8016422:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016424:	7bfb      	ldrb	r3, [r7, #15]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d008      	beq.n	801643c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801642a:	6839      	ldr	r1, [r7, #0]
 801642c:	6878      	ldr	r0, [r7, #4]
 801642e:	f000 f962 	bl	80166f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	2202      	movs	r2, #2
 8016436:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801643a:	e065      	b.n	8016508 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801643c:	6878      	ldr	r0, [r7, #4]
 801643e:	f000 fa08 	bl	8016852 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	2203      	movs	r2, #3
 8016446:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801644a:	e05d      	b.n	8016508 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801644c:	6878      	ldr	r0, [r7, #4]
 801644e:	f000 fa00 	bl	8016852 <USBD_CtlSendStatus>
      break;
 8016452:	e059      	b.n	8016508 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016454:	4b2f      	ldr	r3, [pc, #188]	; (8016514 <USBD_SetConfig+0x150>)
 8016456:	781b      	ldrb	r3, [r3, #0]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d112      	bne.n	8016482 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	2202      	movs	r2, #2
 8016460:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016464:	4b2b      	ldr	r3, [pc, #172]	; (8016514 <USBD_SetConfig+0x150>)
 8016466:	781b      	ldrb	r3, [r3, #0]
 8016468:	461a      	mov	r2, r3
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801646e:	4b29      	ldr	r3, [pc, #164]	; (8016514 <USBD_SetConfig+0x150>)
 8016470:	781b      	ldrb	r3, [r3, #0]
 8016472:	4619      	mov	r1, r3
 8016474:	6878      	ldr	r0, [r7, #4]
 8016476:	f7fe ffd5 	bl	8015424 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801647a:	6878      	ldr	r0, [r7, #4]
 801647c:	f000 f9e9 	bl	8016852 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016480:	e042      	b.n	8016508 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016482:	4b24      	ldr	r3, [pc, #144]	; (8016514 <USBD_SetConfig+0x150>)
 8016484:	781b      	ldrb	r3, [r3, #0]
 8016486:	461a      	mov	r2, r3
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	685b      	ldr	r3, [r3, #4]
 801648c:	429a      	cmp	r2, r3
 801648e:	d02a      	beq.n	80164e6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	685b      	ldr	r3, [r3, #4]
 8016494:	b2db      	uxtb	r3, r3
 8016496:	4619      	mov	r1, r3
 8016498:	6878      	ldr	r0, [r7, #4]
 801649a:	f7fe ffc3 	bl	8015424 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801649e:	4b1d      	ldr	r3, [pc, #116]	; (8016514 <USBD_SetConfig+0x150>)
 80164a0:	781b      	ldrb	r3, [r3, #0]
 80164a2:	461a      	mov	r2, r3
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80164a8:	4b1a      	ldr	r3, [pc, #104]	; (8016514 <USBD_SetConfig+0x150>)
 80164aa:	781b      	ldrb	r3, [r3, #0]
 80164ac:	4619      	mov	r1, r3
 80164ae:	6878      	ldr	r0, [r7, #4]
 80164b0:	f7fe ff9c 	bl	80153ec <USBD_SetClassConfig>
 80164b4:	4603      	mov	r3, r0
 80164b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80164b8:	7bfb      	ldrb	r3, [r7, #15]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d00f      	beq.n	80164de <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80164be:	6839      	ldr	r1, [r7, #0]
 80164c0:	6878      	ldr	r0, [r7, #4]
 80164c2:	f000 f918 	bl	80166f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	685b      	ldr	r3, [r3, #4]
 80164ca:	b2db      	uxtb	r3, r3
 80164cc:	4619      	mov	r1, r3
 80164ce:	6878      	ldr	r0, [r7, #4]
 80164d0:	f7fe ffa8 	bl	8015424 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	2202      	movs	r2, #2
 80164d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80164dc:	e014      	b.n	8016508 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80164de:	6878      	ldr	r0, [r7, #4]
 80164e0:	f000 f9b7 	bl	8016852 <USBD_CtlSendStatus>
      break;
 80164e4:	e010      	b.n	8016508 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80164e6:	6878      	ldr	r0, [r7, #4]
 80164e8:	f000 f9b3 	bl	8016852 <USBD_CtlSendStatus>
      break;
 80164ec:	e00c      	b.n	8016508 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80164ee:	6839      	ldr	r1, [r7, #0]
 80164f0:	6878      	ldr	r0, [r7, #4]
 80164f2:	f000 f900 	bl	80166f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80164f6:	4b07      	ldr	r3, [pc, #28]	; (8016514 <USBD_SetConfig+0x150>)
 80164f8:	781b      	ldrb	r3, [r3, #0]
 80164fa:	4619      	mov	r1, r3
 80164fc:	6878      	ldr	r0, [r7, #4]
 80164fe:	f7fe ff91 	bl	8015424 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016502:	2303      	movs	r3, #3
 8016504:	73fb      	strb	r3, [r7, #15]
      break;
 8016506:	bf00      	nop
  }

  return ret;
 8016508:	7bfb      	ldrb	r3, [r7, #15]
}
 801650a:	4618      	mov	r0, r3
 801650c:	3710      	adds	r7, #16
 801650e:	46bd      	mov	sp, r7
 8016510:	bd80      	pop	{r7, pc}
 8016512:	bf00      	nop
 8016514:	20000a84 	.word	0x20000a84

08016518 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016518:	b580      	push	{r7, lr}
 801651a:	b082      	sub	sp, #8
 801651c:	af00      	add	r7, sp, #0
 801651e:	6078      	str	r0, [r7, #4]
 8016520:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016522:	683b      	ldr	r3, [r7, #0]
 8016524:	88db      	ldrh	r3, [r3, #6]
 8016526:	2b01      	cmp	r3, #1
 8016528:	d004      	beq.n	8016534 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801652a:	6839      	ldr	r1, [r7, #0]
 801652c:	6878      	ldr	r0, [r7, #4]
 801652e:	f000 f8e2 	bl	80166f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016532:	e023      	b.n	801657c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801653a:	b2db      	uxtb	r3, r3
 801653c:	2b02      	cmp	r3, #2
 801653e:	dc02      	bgt.n	8016546 <USBD_GetConfig+0x2e>
 8016540:	2b00      	cmp	r3, #0
 8016542:	dc03      	bgt.n	801654c <USBD_GetConfig+0x34>
 8016544:	e015      	b.n	8016572 <USBD_GetConfig+0x5a>
 8016546:	2b03      	cmp	r3, #3
 8016548:	d00b      	beq.n	8016562 <USBD_GetConfig+0x4a>
 801654a:	e012      	b.n	8016572 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	2200      	movs	r2, #0
 8016550:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	3308      	adds	r3, #8
 8016556:	2201      	movs	r2, #1
 8016558:	4619      	mov	r1, r3
 801655a:	6878      	ldr	r0, [r7, #4]
 801655c:	f000 f93c 	bl	80167d8 <USBD_CtlSendData>
        break;
 8016560:	e00c      	b.n	801657c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	3304      	adds	r3, #4
 8016566:	2201      	movs	r2, #1
 8016568:	4619      	mov	r1, r3
 801656a:	6878      	ldr	r0, [r7, #4]
 801656c:	f000 f934 	bl	80167d8 <USBD_CtlSendData>
        break;
 8016570:	e004      	b.n	801657c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016572:	6839      	ldr	r1, [r7, #0]
 8016574:	6878      	ldr	r0, [r7, #4]
 8016576:	f000 f8be 	bl	80166f6 <USBD_CtlError>
        break;
 801657a:	bf00      	nop
}
 801657c:	bf00      	nop
 801657e:	3708      	adds	r7, #8
 8016580:	46bd      	mov	sp, r7
 8016582:	bd80      	pop	{r7, pc}

08016584 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016584:	b580      	push	{r7, lr}
 8016586:	b082      	sub	sp, #8
 8016588:	af00      	add	r7, sp, #0
 801658a:	6078      	str	r0, [r7, #4]
 801658c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016594:	b2db      	uxtb	r3, r3
 8016596:	3b01      	subs	r3, #1
 8016598:	2b02      	cmp	r3, #2
 801659a:	d81e      	bhi.n	80165da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801659c:	683b      	ldr	r3, [r7, #0]
 801659e:	88db      	ldrh	r3, [r3, #6]
 80165a0:	2b02      	cmp	r3, #2
 80165a2:	d004      	beq.n	80165ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80165a4:	6839      	ldr	r1, [r7, #0]
 80165a6:	6878      	ldr	r0, [r7, #4]
 80165a8:	f000 f8a5 	bl	80166f6 <USBD_CtlError>
        break;
 80165ac:	e01a      	b.n	80165e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	2201      	movs	r2, #1
 80165b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d005      	beq.n	80165ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	68db      	ldr	r3, [r3, #12]
 80165c2:	f043 0202 	orr.w	r2, r3, #2
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	330c      	adds	r3, #12
 80165ce:	2202      	movs	r2, #2
 80165d0:	4619      	mov	r1, r3
 80165d2:	6878      	ldr	r0, [r7, #4]
 80165d4:	f000 f900 	bl	80167d8 <USBD_CtlSendData>
      break;
 80165d8:	e004      	b.n	80165e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80165da:	6839      	ldr	r1, [r7, #0]
 80165dc:	6878      	ldr	r0, [r7, #4]
 80165de:	f000 f88a 	bl	80166f6 <USBD_CtlError>
      break;
 80165e2:	bf00      	nop
  }
}
 80165e4:	bf00      	nop
 80165e6:	3708      	adds	r7, #8
 80165e8:	46bd      	mov	sp, r7
 80165ea:	bd80      	pop	{r7, pc}

080165ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b082      	sub	sp, #8
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	6078      	str	r0, [r7, #4]
 80165f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80165f6:	683b      	ldr	r3, [r7, #0]
 80165f8:	885b      	ldrh	r3, [r3, #2]
 80165fa:	2b01      	cmp	r3, #1
 80165fc:	d107      	bne.n	801660e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	2201      	movs	r2, #1
 8016602:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016606:	6878      	ldr	r0, [r7, #4]
 8016608:	f000 f923 	bl	8016852 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801660c:	e013      	b.n	8016636 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801660e:	683b      	ldr	r3, [r7, #0]
 8016610:	885b      	ldrh	r3, [r3, #2]
 8016612:	2b02      	cmp	r3, #2
 8016614:	d10b      	bne.n	801662e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8016616:	683b      	ldr	r3, [r7, #0]
 8016618:	889b      	ldrh	r3, [r3, #4]
 801661a:	0a1b      	lsrs	r3, r3, #8
 801661c:	b29b      	uxth	r3, r3
 801661e:	b2da      	uxtb	r2, r3
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016626:	6878      	ldr	r0, [r7, #4]
 8016628:	f000 f913 	bl	8016852 <USBD_CtlSendStatus>
}
 801662c:	e003      	b.n	8016636 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801662e:	6839      	ldr	r1, [r7, #0]
 8016630:	6878      	ldr	r0, [r7, #4]
 8016632:	f000 f860 	bl	80166f6 <USBD_CtlError>
}
 8016636:	bf00      	nop
 8016638:	3708      	adds	r7, #8
 801663a:	46bd      	mov	sp, r7
 801663c:	bd80      	pop	{r7, pc}

0801663e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801663e:	b580      	push	{r7, lr}
 8016640:	b082      	sub	sp, #8
 8016642:	af00      	add	r7, sp, #0
 8016644:	6078      	str	r0, [r7, #4]
 8016646:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801664e:	b2db      	uxtb	r3, r3
 8016650:	3b01      	subs	r3, #1
 8016652:	2b02      	cmp	r3, #2
 8016654:	d80b      	bhi.n	801666e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016656:	683b      	ldr	r3, [r7, #0]
 8016658:	885b      	ldrh	r3, [r3, #2]
 801665a:	2b01      	cmp	r3, #1
 801665c:	d10c      	bne.n	8016678 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	2200      	movs	r2, #0
 8016662:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016666:	6878      	ldr	r0, [r7, #4]
 8016668:	f000 f8f3 	bl	8016852 <USBD_CtlSendStatus>
      }
      break;
 801666c:	e004      	b.n	8016678 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801666e:	6839      	ldr	r1, [r7, #0]
 8016670:	6878      	ldr	r0, [r7, #4]
 8016672:	f000 f840 	bl	80166f6 <USBD_CtlError>
      break;
 8016676:	e000      	b.n	801667a <USBD_ClrFeature+0x3c>
      break;
 8016678:	bf00      	nop
  }
}
 801667a:	bf00      	nop
 801667c:	3708      	adds	r7, #8
 801667e:	46bd      	mov	sp, r7
 8016680:	bd80      	pop	{r7, pc}

08016682 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016682:	b580      	push	{r7, lr}
 8016684:	b084      	sub	sp, #16
 8016686:	af00      	add	r7, sp, #0
 8016688:	6078      	str	r0, [r7, #4]
 801668a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801668c:	683b      	ldr	r3, [r7, #0]
 801668e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	781a      	ldrb	r2, [r3, #0]
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	3301      	adds	r3, #1
 801669c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	781a      	ldrb	r2, [r3, #0]
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	3301      	adds	r3, #1
 80166aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80166ac:	68f8      	ldr	r0, [r7, #12]
 80166ae:	f7ff fa40 	bl	8015b32 <SWAPBYTE>
 80166b2:	4603      	mov	r3, r0
 80166b4:	461a      	mov	r2, r3
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	3301      	adds	r3, #1
 80166be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	3301      	adds	r3, #1
 80166c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80166c6:	68f8      	ldr	r0, [r7, #12]
 80166c8:	f7ff fa33 	bl	8015b32 <SWAPBYTE>
 80166cc:	4603      	mov	r3, r0
 80166ce:	461a      	mov	r2, r3
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	3301      	adds	r3, #1
 80166d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	3301      	adds	r3, #1
 80166de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80166e0:	68f8      	ldr	r0, [r7, #12]
 80166e2:	f7ff fa26 	bl	8015b32 <SWAPBYTE>
 80166e6:	4603      	mov	r3, r0
 80166e8:	461a      	mov	r2, r3
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	80da      	strh	r2, [r3, #6]
}
 80166ee:	bf00      	nop
 80166f0:	3710      	adds	r7, #16
 80166f2:	46bd      	mov	sp, r7
 80166f4:	bd80      	pop	{r7, pc}

080166f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80166f6:	b580      	push	{r7, lr}
 80166f8:	b082      	sub	sp, #8
 80166fa:	af00      	add	r7, sp, #0
 80166fc:	6078      	str	r0, [r7, #4]
 80166fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016700:	2180      	movs	r1, #128	; 0x80
 8016702:	6878      	ldr	r0, [r7, #4]
 8016704:	f002 f857 	bl	80187b6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016708:	2100      	movs	r1, #0
 801670a:	6878      	ldr	r0, [r7, #4]
 801670c:	f002 f853 	bl	80187b6 <USBD_LL_StallEP>
}
 8016710:	bf00      	nop
 8016712:	3708      	adds	r7, #8
 8016714:	46bd      	mov	sp, r7
 8016716:	bd80      	pop	{r7, pc}

08016718 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016718:	b580      	push	{r7, lr}
 801671a:	b086      	sub	sp, #24
 801671c:	af00      	add	r7, sp, #0
 801671e:	60f8      	str	r0, [r7, #12]
 8016720:	60b9      	str	r1, [r7, #8]
 8016722:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016724:	2300      	movs	r3, #0
 8016726:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d036      	beq.n	801679c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016732:	6938      	ldr	r0, [r7, #16]
 8016734:	f000 f836 	bl	80167a4 <USBD_GetLen>
 8016738:	4603      	mov	r3, r0
 801673a:	3301      	adds	r3, #1
 801673c:	b29b      	uxth	r3, r3
 801673e:	005b      	lsls	r3, r3, #1
 8016740:	b29a      	uxth	r2, r3
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016746:	7dfb      	ldrb	r3, [r7, #23]
 8016748:	68ba      	ldr	r2, [r7, #8]
 801674a:	4413      	add	r3, r2
 801674c:	687a      	ldr	r2, [r7, #4]
 801674e:	7812      	ldrb	r2, [r2, #0]
 8016750:	701a      	strb	r2, [r3, #0]
  idx++;
 8016752:	7dfb      	ldrb	r3, [r7, #23]
 8016754:	3301      	adds	r3, #1
 8016756:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016758:	7dfb      	ldrb	r3, [r7, #23]
 801675a:	68ba      	ldr	r2, [r7, #8]
 801675c:	4413      	add	r3, r2
 801675e:	2203      	movs	r2, #3
 8016760:	701a      	strb	r2, [r3, #0]
  idx++;
 8016762:	7dfb      	ldrb	r3, [r7, #23]
 8016764:	3301      	adds	r3, #1
 8016766:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016768:	e013      	b.n	8016792 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801676a:	7dfb      	ldrb	r3, [r7, #23]
 801676c:	68ba      	ldr	r2, [r7, #8]
 801676e:	4413      	add	r3, r2
 8016770:	693a      	ldr	r2, [r7, #16]
 8016772:	7812      	ldrb	r2, [r2, #0]
 8016774:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016776:	693b      	ldr	r3, [r7, #16]
 8016778:	3301      	adds	r3, #1
 801677a:	613b      	str	r3, [r7, #16]
    idx++;
 801677c:	7dfb      	ldrb	r3, [r7, #23]
 801677e:	3301      	adds	r3, #1
 8016780:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016782:	7dfb      	ldrb	r3, [r7, #23]
 8016784:	68ba      	ldr	r2, [r7, #8]
 8016786:	4413      	add	r3, r2
 8016788:	2200      	movs	r2, #0
 801678a:	701a      	strb	r2, [r3, #0]
    idx++;
 801678c:	7dfb      	ldrb	r3, [r7, #23]
 801678e:	3301      	adds	r3, #1
 8016790:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016792:	693b      	ldr	r3, [r7, #16]
 8016794:	781b      	ldrb	r3, [r3, #0]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d1e7      	bne.n	801676a <USBD_GetString+0x52>
 801679a:	e000      	b.n	801679e <USBD_GetString+0x86>
    return;
 801679c:	bf00      	nop
  }
}
 801679e:	3718      	adds	r7, #24
 80167a0:	46bd      	mov	sp, r7
 80167a2:	bd80      	pop	{r7, pc}

080167a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80167a4:	b480      	push	{r7}
 80167a6:	b085      	sub	sp, #20
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80167ac:	2300      	movs	r3, #0
 80167ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80167b4:	e005      	b.n	80167c2 <USBD_GetLen+0x1e>
  {
    len++;
 80167b6:	7bfb      	ldrb	r3, [r7, #15]
 80167b8:	3301      	adds	r3, #1
 80167ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80167bc:	68bb      	ldr	r3, [r7, #8]
 80167be:	3301      	adds	r3, #1
 80167c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80167c2:	68bb      	ldr	r3, [r7, #8]
 80167c4:	781b      	ldrb	r3, [r3, #0]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d1f5      	bne.n	80167b6 <USBD_GetLen+0x12>
  }

  return len;
 80167ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80167cc:	4618      	mov	r0, r3
 80167ce:	3714      	adds	r7, #20
 80167d0:	46bd      	mov	sp, r7
 80167d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d6:	4770      	bx	lr

080167d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b084      	sub	sp, #16
 80167dc:	af00      	add	r7, sp, #0
 80167de:	60f8      	str	r0, [r7, #12]
 80167e0:	60b9      	str	r1, [r7, #8]
 80167e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	2202      	movs	r2, #2
 80167e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	687a      	ldr	r2, [r7, #4]
 80167f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	687a      	ldr	r2, [r7, #4]
 80167f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	68ba      	ldr	r2, [r7, #8]
 80167fc:	2100      	movs	r1, #0
 80167fe:	68f8      	ldr	r0, [r7, #12]
 8016800:	f002 f862 	bl	80188c8 <USBD_LL_Transmit>

  return USBD_OK;
 8016804:	2300      	movs	r3, #0
}
 8016806:	4618      	mov	r0, r3
 8016808:	3710      	adds	r7, #16
 801680a:	46bd      	mov	sp, r7
 801680c:	bd80      	pop	{r7, pc}

0801680e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801680e:	b580      	push	{r7, lr}
 8016810:	b084      	sub	sp, #16
 8016812:	af00      	add	r7, sp, #0
 8016814:	60f8      	str	r0, [r7, #12]
 8016816:	60b9      	str	r1, [r7, #8]
 8016818:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	68ba      	ldr	r2, [r7, #8]
 801681e:	2100      	movs	r1, #0
 8016820:	68f8      	ldr	r0, [r7, #12]
 8016822:	f002 f851 	bl	80188c8 <USBD_LL_Transmit>

  return USBD_OK;
 8016826:	2300      	movs	r3, #0
}
 8016828:	4618      	mov	r0, r3
 801682a:	3710      	adds	r7, #16
 801682c:	46bd      	mov	sp, r7
 801682e:	bd80      	pop	{r7, pc}

08016830 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016830:	b580      	push	{r7, lr}
 8016832:	b084      	sub	sp, #16
 8016834:	af00      	add	r7, sp, #0
 8016836:	60f8      	str	r0, [r7, #12]
 8016838:	60b9      	str	r1, [r7, #8]
 801683a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	68ba      	ldr	r2, [r7, #8]
 8016840:	2100      	movs	r1, #0
 8016842:	68f8      	ldr	r0, [r7, #12]
 8016844:	f002 f861 	bl	801890a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016848:	2300      	movs	r3, #0
}
 801684a:	4618      	mov	r0, r3
 801684c:	3710      	adds	r7, #16
 801684e:	46bd      	mov	sp, r7
 8016850:	bd80      	pop	{r7, pc}

08016852 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016852:	b580      	push	{r7, lr}
 8016854:	b082      	sub	sp, #8
 8016856:	af00      	add	r7, sp, #0
 8016858:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	2204      	movs	r2, #4
 801685e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016862:	2300      	movs	r3, #0
 8016864:	2200      	movs	r2, #0
 8016866:	2100      	movs	r1, #0
 8016868:	6878      	ldr	r0, [r7, #4]
 801686a:	f002 f82d 	bl	80188c8 <USBD_LL_Transmit>

  return USBD_OK;
 801686e:	2300      	movs	r3, #0
}
 8016870:	4618      	mov	r0, r3
 8016872:	3708      	adds	r7, #8
 8016874:	46bd      	mov	sp, r7
 8016876:	bd80      	pop	{r7, pc}

08016878 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016878:	b580      	push	{r7, lr}
 801687a:	b082      	sub	sp, #8
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	2205      	movs	r2, #5
 8016884:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016888:	2300      	movs	r3, #0
 801688a:	2200      	movs	r2, #0
 801688c:	2100      	movs	r1, #0
 801688e:	6878      	ldr	r0, [r7, #4]
 8016890:	f002 f83b 	bl	801890a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016894:	2300      	movs	r3, #0
}
 8016896:	4618      	mov	r0, r3
 8016898:	3708      	adds	r7, #8
 801689a:	46bd      	mov	sp, r7
 801689c:	bd80      	pop	{r7, pc}

0801689e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801689e:	b480      	push	{r7}
 80168a0:	b083      	sub	sp, #12
 80168a2:	af00      	add	r7, sp, #0
 80168a4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	f103 0208 	add.w	r2, r3, #8
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	f04f 32ff 	mov.w	r2, #4294967295
 80168b6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	f103 0208 	add.w	r2, r3, #8
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	f103 0208 	add.w	r2, r3, #8
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	2200      	movs	r2, #0
 80168d0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80168d2:	bf00      	nop
 80168d4:	370c      	adds	r7, #12
 80168d6:	46bd      	mov	sp, r7
 80168d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168dc:	4770      	bx	lr

080168de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80168de:	b480      	push	{r7}
 80168e0:	b083      	sub	sp, #12
 80168e2:	af00      	add	r7, sp, #0
 80168e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	2200      	movs	r2, #0
 80168ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80168ec:	bf00      	nop
 80168ee:	370c      	adds	r7, #12
 80168f0:	46bd      	mov	sp, r7
 80168f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f6:	4770      	bx	lr

080168f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80168f8:	b480      	push	{r7}
 80168fa:	b085      	sub	sp, #20
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
 8016900:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	685b      	ldr	r3, [r3, #4]
 8016906:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016908:	683b      	ldr	r3, [r7, #0]
 801690a:	68fa      	ldr	r2, [r7, #12]
 801690c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	689a      	ldr	r2, [r3, #8]
 8016912:	683b      	ldr	r3, [r7, #0]
 8016914:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	689b      	ldr	r3, [r3, #8]
 801691a:	683a      	ldr	r2, [r7, #0]
 801691c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	683a      	ldr	r2, [r7, #0]
 8016922:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016924:	683b      	ldr	r3, [r7, #0]
 8016926:	687a      	ldr	r2, [r7, #4]
 8016928:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	1c5a      	adds	r2, r3, #1
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	601a      	str	r2, [r3, #0]
}
 8016934:	bf00      	nop
 8016936:	3714      	adds	r7, #20
 8016938:	46bd      	mov	sp, r7
 801693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801693e:	4770      	bx	lr

08016940 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016940:	b480      	push	{r7}
 8016942:	b085      	sub	sp, #20
 8016944:	af00      	add	r7, sp, #0
 8016946:	6078      	str	r0, [r7, #4]
 8016948:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801694a:	683b      	ldr	r3, [r7, #0]
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016950:	68bb      	ldr	r3, [r7, #8]
 8016952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016956:	d103      	bne.n	8016960 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	691b      	ldr	r3, [r3, #16]
 801695c:	60fb      	str	r3, [r7, #12]
 801695e:	e00c      	b.n	801697a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	3308      	adds	r3, #8
 8016964:	60fb      	str	r3, [r7, #12]
 8016966:	e002      	b.n	801696e <vListInsert+0x2e>
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	685b      	ldr	r3, [r3, #4]
 801696c:	60fb      	str	r3, [r7, #12]
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	685b      	ldr	r3, [r3, #4]
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	68ba      	ldr	r2, [r7, #8]
 8016976:	429a      	cmp	r2, r3
 8016978:	d2f6      	bcs.n	8016968 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	685a      	ldr	r2, [r3, #4]
 801697e:	683b      	ldr	r3, [r7, #0]
 8016980:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016982:	683b      	ldr	r3, [r7, #0]
 8016984:	685b      	ldr	r3, [r3, #4]
 8016986:	683a      	ldr	r2, [r7, #0]
 8016988:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801698a:	683b      	ldr	r3, [r7, #0]
 801698c:	68fa      	ldr	r2, [r7, #12]
 801698e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	683a      	ldr	r2, [r7, #0]
 8016994:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016996:	683b      	ldr	r3, [r7, #0]
 8016998:	687a      	ldr	r2, [r7, #4]
 801699a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	1c5a      	adds	r2, r3, #1
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	601a      	str	r2, [r3, #0]
}
 80169a6:	bf00      	nop
 80169a8:	3714      	adds	r7, #20
 80169aa:	46bd      	mov	sp, r7
 80169ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b0:	4770      	bx	lr

080169b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80169b2:	b480      	push	{r7}
 80169b4:	b085      	sub	sp, #20
 80169b6:	af00      	add	r7, sp, #0
 80169b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	691b      	ldr	r3, [r3, #16]
 80169be:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	685b      	ldr	r3, [r3, #4]
 80169c4:	687a      	ldr	r2, [r7, #4]
 80169c6:	6892      	ldr	r2, [r2, #8]
 80169c8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	689b      	ldr	r3, [r3, #8]
 80169ce:	687a      	ldr	r2, [r7, #4]
 80169d0:	6852      	ldr	r2, [r2, #4]
 80169d2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	685b      	ldr	r3, [r3, #4]
 80169d8:	687a      	ldr	r2, [r7, #4]
 80169da:	429a      	cmp	r2, r3
 80169dc:	d103      	bne.n	80169e6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	689a      	ldr	r2, [r3, #8]
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	2200      	movs	r2, #0
 80169ea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	1e5a      	subs	r2, r3, #1
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	681b      	ldr	r3, [r3, #0]
}
 80169fa:	4618      	mov	r0, r3
 80169fc:	3714      	adds	r7, #20
 80169fe:	46bd      	mov	sp, r7
 8016a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a04:	4770      	bx	lr

08016a06 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016a06:	b580      	push	{r7, lr}
 8016a08:	b08e      	sub	sp, #56	; 0x38
 8016a0a:	af04      	add	r7, sp, #16
 8016a0c:	60f8      	str	r0, [r7, #12]
 8016a0e:	60b9      	str	r1, [r7, #8]
 8016a10:	607a      	str	r2, [r7, #4]
 8016a12:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d10a      	bne.n	8016a30 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a1e:	f383 8811 	msr	BASEPRI, r3
 8016a22:	f3bf 8f6f 	isb	sy
 8016a26:	f3bf 8f4f 	dsb	sy
 8016a2a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016a2c:	bf00      	nop
 8016a2e:	e7fe      	b.n	8016a2e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d10a      	bne.n	8016a4c <xTaskCreateStatic+0x46>
	__asm volatile
 8016a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a3a:	f383 8811 	msr	BASEPRI, r3
 8016a3e:	f3bf 8f6f 	isb	sy
 8016a42:	f3bf 8f4f 	dsb	sy
 8016a46:	61fb      	str	r3, [r7, #28]
}
 8016a48:	bf00      	nop
 8016a4a:	e7fe      	b.n	8016a4a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016a4c:	2354      	movs	r3, #84	; 0x54
 8016a4e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016a50:	693b      	ldr	r3, [r7, #16]
 8016a52:	2b54      	cmp	r3, #84	; 0x54
 8016a54:	d00a      	beq.n	8016a6c <xTaskCreateStatic+0x66>
	__asm volatile
 8016a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a5a:	f383 8811 	msr	BASEPRI, r3
 8016a5e:	f3bf 8f6f 	isb	sy
 8016a62:	f3bf 8f4f 	dsb	sy
 8016a66:	61bb      	str	r3, [r7, #24]
}
 8016a68:	bf00      	nop
 8016a6a:	e7fe      	b.n	8016a6a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016a6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d01e      	beq.n	8016ab2 <xTaskCreateStatic+0xac>
 8016a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d01b      	beq.n	8016ab2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a7c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016a82:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a86:	2202      	movs	r2, #2
 8016a88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	9303      	str	r3, [sp, #12]
 8016a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a92:	9302      	str	r3, [sp, #8]
 8016a94:	f107 0314 	add.w	r3, r7, #20
 8016a98:	9301      	str	r3, [sp, #4]
 8016a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a9c:	9300      	str	r3, [sp, #0]
 8016a9e:	683b      	ldr	r3, [r7, #0]
 8016aa0:	687a      	ldr	r2, [r7, #4]
 8016aa2:	68b9      	ldr	r1, [r7, #8]
 8016aa4:	68f8      	ldr	r0, [r7, #12]
 8016aa6:	f000 f850 	bl	8016b4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016aaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016aac:	f000 f8d4 	bl	8016c58 <prvAddNewTaskToReadyList>
 8016ab0:	e001      	b.n	8016ab6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016ab6:	697b      	ldr	r3, [r7, #20]
	}
 8016ab8:	4618      	mov	r0, r3
 8016aba:	3728      	adds	r7, #40	; 0x28
 8016abc:	46bd      	mov	sp, r7
 8016abe:	bd80      	pop	{r7, pc}

08016ac0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b08c      	sub	sp, #48	; 0x30
 8016ac4:	af04      	add	r7, sp, #16
 8016ac6:	60f8      	str	r0, [r7, #12]
 8016ac8:	60b9      	str	r1, [r7, #8]
 8016aca:	603b      	str	r3, [r7, #0]
 8016acc:	4613      	mov	r3, r2
 8016ace:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016ad0:	88fb      	ldrh	r3, [r7, #6]
 8016ad2:	009b      	lsls	r3, r3, #2
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	f001 f897 	bl	8017c08 <pvPortMalloc>
 8016ada:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016adc:	697b      	ldr	r3, [r7, #20]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d00e      	beq.n	8016b00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016ae2:	2054      	movs	r0, #84	; 0x54
 8016ae4:	f001 f890 	bl	8017c08 <pvPortMalloc>
 8016ae8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016aea:	69fb      	ldr	r3, [r7, #28]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d003      	beq.n	8016af8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016af0:	69fb      	ldr	r3, [r7, #28]
 8016af2:	697a      	ldr	r2, [r7, #20]
 8016af4:	631a      	str	r2, [r3, #48]	; 0x30
 8016af6:	e005      	b.n	8016b04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016af8:	6978      	ldr	r0, [r7, #20]
 8016afa:	f001 f951 	bl	8017da0 <vPortFree>
 8016afe:	e001      	b.n	8016b04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016b00:	2300      	movs	r3, #0
 8016b02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016b04:	69fb      	ldr	r3, [r7, #28]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d017      	beq.n	8016b3a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016b0a:	69fb      	ldr	r3, [r7, #28]
 8016b0c:	2200      	movs	r2, #0
 8016b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016b12:	88fa      	ldrh	r2, [r7, #6]
 8016b14:	2300      	movs	r3, #0
 8016b16:	9303      	str	r3, [sp, #12]
 8016b18:	69fb      	ldr	r3, [r7, #28]
 8016b1a:	9302      	str	r3, [sp, #8]
 8016b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b1e:	9301      	str	r3, [sp, #4]
 8016b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b22:	9300      	str	r3, [sp, #0]
 8016b24:	683b      	ldr	r3, [r7, #0]
 8016b26:	68b9      	ldr	r1, [r7, #8]
 8016b28:	68f8      	ldr	r0, [r7, #12]
 8016b2a:	f000 f80e 	bl	8016b4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016b2e:	69f8      	ldr	r0, [r7, #28]
 8016b30:	f000 f892 	bl	8016c58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016b34:	2301      	movs	r3, #1
 8016b36:	61bb      	str	r3, [r7, #24]
 8016b38:	e002      	b.n	8016b40 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8016b3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016b40:	69bb      	ldr	r3, [r7, #24]
	}
 8016b42:	4618      	mov	r0, r3
 8016b44:	3720      	adds	r7, #32
 8016b46:	46bd      	mov	sp, r7
 8016b48:	bd80      	pop	{r7, pc}

08016b4a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016b4a:	b580      	push	{r7, lr}
 8016b4c:	b088      	sub	sp, #32
 8016b4e:	af00      	add	r7, sp, #0
 8016b50:	60f8      	str	r0, [r7, #12]
 8016b52:	60b9      	str	r1, [r7, #8]
 8016b54:	607a      	str	r2, [r7, #4]
 8016b56:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016b62:	3b01      	subs	r3, #1
 8016b64:	009b      	lsls	r3, r3, #2
 8016b66:	4413      	add	r3, r2
 8016b68:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016b6a:	69bb      	ldr	r3, [r7, #24]
 8016b6c:	f023 0307 	bic.w	r3, r3, #7
 8016b70:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016b72:	69bb      	ldr	r3, [r7, #24]
 8016b74:	f003 0307 	and.w	r3, r3, #7
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d00a      	beq.n	8016b92 <prvInitialiseNewTask+0x48>
	__asm volatile
 8016b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b80:	f383 8811 	msr	BASEPRI, r3
 8016b84:	f3bf 8f6f 	isb	sy
 8016b88:	f3bf 8f4f 	dsb	sy
 8016b8c:	617b      	str	r3, [r7, #20]
}
 8016b8e:	bf00      	nop
 8016b90:	e7fe      	b.n	8016b90 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016b92:	68bb      	ldr	r3, [r7, #8]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d01f      	beq.n	8016bd8 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016b98:	2300      	movs	r3, #0
 8016b9a:	61fb      	str	r3, [r7, #28]
 8016b9c:	e012      	b.n	8016bc4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016b9e:	68ba      	ldr	r2, [r7, #8]
 8016ba0:	69fb      	ldr	r3, [r7, #28]
 8016ba2:	4413      	add	r3, r2
 8016ba4:	7819      	ldrb	r1, [r3, #0]
 8016ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ba8:	69fb      	ldr	r3, [r7, #28]
 8016baa:	4413      	add	r3, r2
 8016bac:	3334      	adds	r3, #52	; 0x34
 8016bae:	460a      	mov	r2, r1
 8016bb0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016bb2:	68ba      	ldr	r2, [r7, #8]
 8016bb4:	69fb      	ldr	r3, [r7, #28]
 8016bb6:	4413      	add	r3, r2
 8016bb8:	781b      	ldrb	r3, [r3, #0]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d006      	beq.n	8016bcc <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016bbe:	69fb      	ldr	r3, [r7, #28]
 8016bc0:	3301      	adds	r3, #1
 8016bc2:	61fb      	str	r3, [r7, #28]
 8016bc4:	69fb      	ldr	r3, [r7, #28]
 8016bc6:	2b0f      	cmp	r3, #15
 8016bc8:	d9e9      	bls.n	8016b9e <prvInitialiseNewTask+0x54>
 8016bca:	e000      	b.n	8016bce <prvInitialiseNewTask+0x84>
			{
				break;
 8016bcc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016bd6:	e003      	b.n	8016be0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bda:	2200      	movs	r2, #0
 8016bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016be2:	2b06      	cmp	r3, #6
 8016be4:	d901      	bls.n	8016bea <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016be6:	2306      	movs	r3, #6
 8016be8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016bee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016bf4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8016bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bfe:	3304      	adds	r3, #4
 8016c00:	4618      	mov	r0, r3
 8016c02:	f7ff fe6c 	bl	80168de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c08:	3318      	adds	r3, #24
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	f7ff fe67 	bl	80168de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c18:	f1c3 0207 	rsb	r2, r3, #7
 8016c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c24:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c28:	2200      	movs	r2, #0
 8016c2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c2e:	2200      	movs	r2, #0
 8016c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016c34:	683a      	ldr	r2, [r7, #0]
 8016c36:	68f9      	ldr	r1, [r7, #12]
 8016c38:	69b8      	ldr	r0, [r7, #24]
 8016c3a:	f000 fd93 	bl	8017764 <pxPortInitialiseStack>
 8016c3e:	4602      	mov	r2, r0
 8016c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d002      	beq.n	8016c50 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016c50:	bf00      	nop
 8016c52:	3720      	adds	r7, #32
 8016c54:	46bd      	mov	sp, r7
 8016c56:	bd80      	pop	{r7, pc}

08016c58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016c58:	b580      	push	{r7, lr}
 8016c5a:	b082      	sub	sp, #8
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016c60:	f000 feb0 	bl	80179c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016c64:	4b2a      	ldr	r3, [pc, #168]	; (8016d10 <prvAddNewTaskToReadyList+0xb8>)
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	3301      	adds	r3, #1
 8016c6a:	4a29      	ldr	r2, [pc, #164]	; (8016d10 <prvAddNewTaskToReadyList+0xb8>)
 8016c6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016c6e:	4b29      	ldr	r3, [pc, #164]	; (8016d14 <prvAddNewTaskToReadyList+0xbc>)
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d109      	bne.n	8016c8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016c76:	4a27      	ldr	r2, [pc, #156]	; (8016d14 <prvAddNewTaskToReadyList+0xbc>)
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016c7c:	4b24      	ldr	r3, [pc, #144]	; (8016d10 <prvAddNewTaskToReadyList+0xb8>)
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	2b01      	cmp	r3, #1
 8016c82:	d110      	bne.n	8016ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016c84:	f000 fb16 	bl	80172b4 <prvInitialiseTaskLists>
 8016c88:	e00d      	b.n	8016ca6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016c8a:	4b23      	ldr	r3, [pc, #140]	; (8016d18 <prvAddNewTaskToReadyList+0xc0>)
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d109      	bne.n	8016ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016c92:	4b20      	ldr	r3, [pc, #128]	; (8016d14 <prvAddNewTaskToReadyList+0xbc>)
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c9c:	429a      	cmp	r2, r3
 8016c9e:	d802      	bhi.n	8016ca6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016ca0:	4a1c      	ldr	r2, [pc, #112]	; (8016d14 <prvAddNewTaskToReadyList+0xbc>)
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016ca6:	4b1d      	ldr	r3, [pc, #116]	; (8016d1c <prvAddNewTaskToReadyList+0xc4>)
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	3301      	adds	r3, #1
 8016cac:	4a1b      	ldr	r2, [pc, #108]	; (8016d1c <prvAddNewTaskToReadyList+0xc4>)
 8016cae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cb4:	2201      	movs	r2, #1
 8016cb6:	409a      	lsls	r2, r3
 8016cb8:	4b19      	ldr	r3, [pc, #100]	; (8016d20 <prvAddNewTaskToReadyList+0xc8>)
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	4313      	orrs	r3, r2
 8016cbe:	4a18      	ldr	r2, [pc, #96]	; (8016d20 <prvAddNewTaskToReadyList+0xc8>)
 8016cc0:	6013      	str	r3, [r2, #0]
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016cc6:	4613      	mov	r3, r2
 8016cc8:	009b      	lsls	r3, r3, #2
 8016cca:	4413      	add	r3, r2
 8016ccc:	009b      	lsls	r3, r3, #2
 8016cce:	4a15      	ldr	r2, [pc, #84]	; (8016d24 <prvAddNewTaskToReadyList+0xcc>)
 8016cd0:	441a      	add	r2, r3
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	3304      	adds	r3, #4
 8016cd6:	4619      	mov	r1, r3
 8016cd8:	4610      	mov	r0, r2
 8016cda:	f7ff fe0d 	bl	80168f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016cde:	f000 fea1 	bl	8017a24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016ce2:	4b0d      	ldr	r3, [pc, #52]	; (8016d18 <prvAddNewTaskToReadyList+0xc0>)
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d00e      	beq.n	8016d08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016cea:	4b0a      	ldr	r3, [pc, #40]	; (8016d14 <prvAddNewTaskToReadyList+0xbc>)
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cf4:	429a      	cmp	r2, r3
 8016cf6:	d207      	bcs.n	8016d08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016cf8:	4b0b      	ldr	r3, [pc, #44]	; (8016d28 <prvAddNewTaskToReadyList+0xd0>)
 8016cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016cfe:	601a      	str	r2, [r3, #0]
 8016d00:	f3bf 8f4f 	dsb	sy
 8016d04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016d08:	bf00      	nop
 8016d0a:	3708      	adds	r7, #8
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	bd80      	pop	{r7, pc}
 8016d10:	20000b88 	.word	0x20000b88
 8016d14:	20000a88 	.word	0x20000a88
 8016d18:	20000b94 	.word	0x20000b94
 8016d1c:	20000ba4 	.word	0x20000ba4
 8016d20:	20000b90 	.word	0x20000b90
 8016d24:	20000a8c 	.word	0x20000a8c
 8016d28:	e000ed04 	.word	0xe000ed04

08016d2c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b08a      	sub	sp, #40	; 0x28
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
 8016d34:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8016d36:	2300      	movs	r3, #0
 8016d38:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d10a      	bne.n	8016d56 <vTaskDelayUntil+0x2a>
	__asm volatile
 8016d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d44:	f383 8811 	msr	BASEPRI, r3
 8016d48:	f3bf 8f6f 	isb	sy
 8016d4c:	f3bf 8f4f 	dsb	sy
 8016d50:	617b      	str	r3, [r7, #20]
}
 8016d52:	bf00      	nop
 8016d54:	e7fe      	b.n	8016d54 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8016d56:	683b      	ldr	r3, [r7, #0]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d10a      	bne.n	8016d72 <vTaskDelayUntil+0x46>
	__asm volatile
 8016d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d60:	f383 8811 	msr	BASEPRI, r3
 8016d64:	f3bf 8f6f 	isb	sy
 8016d68:	f3bf 8f4f 	dsb	sy
 8016d6c:	613b      	str	r3, [r7, #16]
}
 8016d6e:	bf00      	nop
 8016d70:	e7fe      	b.n	8016d70 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8016d72:	4b2a      	ldr	r3, [pc, #168]	; (8016e1c <vTaskDelayUntil+0xf0>)
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d00a      	beq.n	8016d90 <vTaskDelayUntil+0x64>
	__asm volatile
 8016d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d7e:	f383 8811 	msr	BASEPRI, r3
 8016d82:	f3bf 8f6f 	isb	sy
 8016d86:	f3bf 8f4f 	dsb	sy
 8016d8a:	60fb      	str	r3, [r7, #12]
}
 8016d8c:	bf00      	nop
 8016d8e:	e7fe      	b.n	8016d8e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8016d90:	f000 f8aa 	bl	8016ee8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8016d94:	4b22      	ldr	r3, [pc, #136]	; (8016e20 <vTaskDelayUntil+0xf4>)
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	683a      	ldr	r2, [r7, #0]
 8016da0:	4413      	add	r3, r2
 8016da2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	6a3a      	ldr	r2, [r7, #32]
 8016daa:	429a      	cmp	r2, r3
 8016dac:	d20b      	bcs.n	8016dc6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	69fa      	ldr	r2, [r7, #28]
 8016db4:	429a      	cmp	r2, r3
 8016db6:	d211      	bcs.n	8016ddc <vTaskDelayUntil+0xb0>
 8016db8:	69fa      	ldr	r2, [r7, #28]
 8016dba:	6a3b      	ldr	r3, [r7, #32]
 8016dbc:	429a      	cmp	r2, r3
 8016dbe:	d90d      	bls.n	8016ddc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8016dc0:	2301      	movs	r3, #1
 8016dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8016dc4:	e00a      	b.n	8016ddc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	69fa      	ldr	r2, [r7, #28]
 8016dcc:	429a      	cmp	r2, r3
 8016dce:	d303      	bcc.n	8016dd8 <vTaskDelayUntil+0xac>
 8016dd0:	69fa      	ldr	r2, [r7, #28]
 8016dd2:	6a3b      	ldr	r3, [r7, #32]
 8016dd4:	429a      	cmp	r2, r3
 8016dd6:	d901      	bls.n	8016ddc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8016dd8:	2301      	movs	r3, #1
 8016dda:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	69fa      	ldr	r2, [r7, #28]
 8016de0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8016de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d006      	beq.n	8016df6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8016de8:	69fa      	ldr	r2, [r7, #28]
 8016dea:	6a3b      	ldr	r3, [r7, #32]
 8016dec:	1ad3      	subs	r3, r2, r3
 8016dee:	2100      	movs	r1, #0
 8016df0:	4618      	mov	r0, r3
 8016df2:	f000 fc51 	bl	8017698 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8016df6:	f000 f885 	bl	8016f04 <xTaskResumeAll>
 8016dfa:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016dfc:	69bb      	ldr	r3, [r7, #24]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d107      	bne.n	8016e12 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8016e02:	4b08      	ldr	r3, [pc, #32]	; (8016e24 <vTaskDelayUntil+0xf8>)
 8016e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e08:	601a      	str	r2, [r3, #0]
 8016e0a:	f3bf 8f4f 	dsb	sy
 8016e0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016e12:	bf00      	nop
 8016e14:	3728      	adds	r7, #40	; 0x28
 8016e16:	46bd      	mov	sp, r7
 8016e18:	bd80      	pop	{r7, pc}
 8016e1a:	bf00      	nop
 8016e1c:	20000bb0 	.word	0x20000bb0
 8016e20:	20000b8c 	.word	0x20000b8c
 8016e24:	e000ed04 	.word	0xe000ed04

08016e28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b08a      	sub	sp, #40	; 0x28
 8016e2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016e2e:	2300      	movs	r3, #0
 8016e30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016e32:	2300      	movs	r3, #0
 8016e34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016e36:	463a      	mov	r2, r7
 8016e38:	1d39      	adds	r1, r7, #4
 8016e3a:	f107 0308 	add.w	r3, r7, #8
 8016e3e:	4618      	mov	r0, r3
 8016e40:	f7ea fdd8 	bl	80019f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016e44:	6839      	ldr	r1, [r7, #0]
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	68ba      	ldr	r2, [r7, #8]
 8016e4a:	9202      	str	r2, [sp, #8]
 8016e4c:	9301      	str	r3, [sp, #4]
 8016e4e:	2300      	movs	r3, #0
 8016e50:	9300      	str	r3, [sp, #0]
 8016e52:	2300      	movs	r3, #0
 8016e54:	460a      	mov	r2, r1
 8016e56:	491e      	ldr	r1, [pc, #120]	; (8016ed0 <vTaskStartScheduler+0xa8>)
 8016e58:	481e      	ldr	r0, [pc, #120]	; (8016ed4 <vTaskStartScheduler+0xac>)
 8016e5a:	f7ff fdd4 	bl	8016a06 <xTaskCreateStatic>
 8016e5e:	4603      	mov	r3, r0
 8016e60:	4a1d      	ldr	r2, [pc, #116]	; (8016ed8 <vTaskStartScheduler+0xb0>)
 8016e62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016e64:	4b1c      	ldr	r3, [pc, #112]	; (8016ed8 <vTaskStartScheduler+0xb0>)
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d002      	beq.n	8016e72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016e6c:	2301      	movs	r3, #1
 8016e6e:	617b      	str	r3, [r7, #20]
 8016e70:	e001      	b.n	8016e76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016e72:	2300      	movs	r3, #0
 8016e74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016e76:	697b      	ldr	r3, [r7, #20]
 8016e78:	2b01      	cmp	r3, #1
 8016e7a:	d116      	bne.n	8016eaa <vTaskStartScheduler+0x82>
	__asm volatile
 8016e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e80:	f383 8811 	msr	BASEPRI, r3
 8016e84:	f3bf 8f6f 	isb	sy
 8016e88:	f3bf 8f4f 	dsb	sy
 8016e8c:	613b      	str	r3, [r7, #16]
}
 8016e8e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016e90:	4b12      	ldr	r3, [pc, #72]	; (8016edc <vTaskStartScheduler+0xb4>)
 8016e92:	f04f 32ff 	mov.w	r2, #4294967295
 8016e96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016e98:	4b11      	ldr	r3, [pc, #68]	; (8016ee0 <vTaskStartScheduler+0xb8>)
 8016e9a:	2201      	movs	r2, #1
 8016e9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016e9e:	4b11      	ldr	r3, [pc, #68]	; (8016ee4 <vTaskStartScheduler+0xbc>)
 8016ea0:	2200      	movs	r2, #0
 8016ea2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016ea4:	f000 fcec 	bl	8017880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016ea8:	e00e      	b.n	8016ec8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016eaa:	697b      	ldr	r3, [r7, #20]
 8016eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016eb0:	d10a      	bne.n	8016ec8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8016eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eb6:	f383 8811 	msr	BASEPRI, r3
 8016eba:	f3bf 8f6f 	isb	sy
 8016ebe:	f3bf 8f4f 	dsb	sy
 8016ec2:	60fb      	str	r3, [r7, #12]
}
 8016ec4:	bf00      	nop
 8016ec6:	e7fe      	b.n	8016ec6 <vTaskStartScheduler+0x9e>
}
 8016ec8:	bf00      	nop
 8016eca:	3718      	adds	r7, #24
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	bd80      	pop	{r7, pc}
 8016ed0:	0801a6fc 	.word	0x0801a6fc
 8016ed4:	08017285 	.word	0x08017285
 8016ed8:	20000bac 	.word	0x20000bac
 8016edc:	20000ba8 	.word	0x20000ba8
 8016ee0:	20000b94 	.word	0x20000b94
 8016ee4:	20000b8c 	.word	0x20000b8c

08016ee8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016ee8:	b480      	push	{r7}
 8016eea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016eec:	4b04      	ldr	r3, [pc, #16]	; (8016f00 <vTaskSuspendAll+0x18>)
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	3301      	adds	r3, #1
 8016ef2:	4a03      	ldr	r2, [pc, #12]	; (8016f00 <vTaskSuspendAll+0x18>)
 8016ef4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8016ef6:	bf00      	nop
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016efe:	4770      	bx	lr
 8016f00:	20000bb0 	.word	0x20000bb0

08016f04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016f04:	b580      	push	{r7, lr}
 8016f06:	b084      	sub	sp, #16
 8016f08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016f0a:	2300      	movs	r3, #0
 8016f0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016f0e:	2300      	movs	r3, #0
 8016f10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016f12:	4b41      	ldr	r3, [pc, #260]	; (8017018 <xTaskResumeAll+0x114>)
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d10a      	bne.n	8016f30 <xTaskResumeAll+0x2c>
	__asm volatile
 8016f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f1e:	f383 8811 	msr	BASEPRI, r3
 8016f22:	f3bf 8f6f 	isb	sy
 8016f26:	f3bf 8f4f 	dsb	sy
 8016f2a:	603b      	str	r3, [r7, #0]
}
 8016f2c:	bf00      	nop
 8016f2e:	e7fe      	b.n	8016f2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016f30:	f000 fd48 	bl	80179c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016f34:	4b38      	ldr	r3, [pc, #224]	; (8017018 <xTaskResumeAll+0x114>)
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	3b01      	subs	r3, #1
 8016f3a:	4a37      	ldr	r2, [pc, #220]	; (8017018 <xTaskResumeAll+0x114>)
 8016f3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016f3e:	4b36      	ldr	r3, [pc, #216]	; (8017018 <xTaskResumeAll+0x114>)
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d161      	bne.n	801700a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016f46:	4b35      	ldr	r3, [pc, #212]	; (801701c <xTaskResumeAll+0x118>)
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d05d      	beq.n	801700a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016f4e:	e02e      	b.n	8016fae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016f50:	4b33      	ldr	r3, [pc, #204]	; (8017020 <xTaskResumeAll+0x11c>)
 8016f52:	68db      	ldr	r3, [r3, #12]
 8016f54:	68db      	ldr	r3, [r3, #12]
 8016f56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	3318      	adds	r3, #24
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	f7ff fd28 	bl	80169b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	3304      	adds	r3, #4
 8016f66:	4618      	mov	r0, r3
 8016f68:	f7ff fd23 	bl	80169b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f70:	2201      	movs	r2, #1
 8016f72:	409a      	lsls	r2, r3
 8016f74:	4b2b      	ldr	r3, [pc, #172]	; (8017024 <xTaskResumeAll+0x120>)
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	4313      	orrs	r3, r2
 8016f7a:	4a2a      	ldr	r2, [pc, #168]	; (8017024 <xTaskResumeAll+0x120>)
 8016f7c:	6013      	str	r3, [r2, #0]
 8016f7e:	68fb      	ldr	r3, [r7, #12]
 8016f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f82:	4613      	mov	r3, r2
 8016f84:	009b      	lsls	r3, r3, #2
 8016f86:	4413      	add	r3, r2
 8016f88:	009b      	lsls	r3, r3, #2
 8016f8a:	4a27      	ldr	r2, [pc, #156]	; (8017028 <xTaskResumeAll+0x124>)
 8016f8c:	441a      	add	r2, r3
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	3304      	adds	r3, #4
 8016f92:	4619      	mov	r1, r3
 8016f94:	4610      	mov	r0, r2
 8016f96:	f7ff fcaf 	bl	80168f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f9e:	4b23      	ldr	r3, [pc, #140]	; (801702c <xTaskResumeAll+0x128>)
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fa4:	429a      	cmp	r2, r3
 8016fa6:	d302      	bcc.n	8016fae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8016fa8:	4b21      	ldr	r3, [pc, #132]	; (8017030 <xTaskResumeAll+0x12c>)
 8016faa:	2201      	movs	r2, #1
 8016fac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016fae:	4b1c      	ldr	r3, [pc, #112]	; (8017020 <xTaskResumeAll+0x11c>)
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d1cc      	bne.n	8016f50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d001      	beq.n	8016fc0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016fbc:	f000 fa18 	bl	80173f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016fc0:	4b1c      	ldr	r3, [pc, #112]	; (8017034 <xTaskResumeAll+0x130>)
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d010      	beq.n	8016fee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016fcc:	f000 f846 	bl	801705c <xTaskIncrementTick>
 8016fd0:	4603      	mov	r3, r0
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d002      	beq.n	8016fdc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8016fd6:	4b16      	ldr	r3, [pc, #88]	; (8017030 <xTaskResumeAll+0x12c>)
 8016fd8:	2201      	movs	r2, #1
 8016fda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	3b01      	subs	r3, #1
 8016fe0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d1f1      	bne.n	8016fcc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8016fe8:	4b12      	ldr	r3, [pc, #72]	; (8017034 <xTaskResumeAll+0x130>)
 8016fea:	2200      	movs	r2, #0
 8016fec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016fee:	4b10      	ldr	r3, [pc, #64]	; (8017030 <xTaskResumeAll+0x12c>)
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d009      	beq.n	801700a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016ff6:	2301      	movs	r3, #1
 8016ff8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016ffa:	4b0f      	ldr	r3, [pc, #60]	; (8017038 <xTaskResumeAll+0x134>)
 8016ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017000:	601a      	str	r2, [r3, #0]
 8017002:	f3bf 8f4f 	dsb	sy
 8017006:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801700a:	f000 fd0b 	bl	8017a24 <vPortExitCritical>

	return xAlreadyYielded;
 801700e:	68bb      	ldr	r3, [r7, #8]
}
 8017010:	4618      	mov	r0, r3
 8017012:	3710      	adds	r7, #16
 8017014:	46bd      	mov	sp, r7
 8017016:	bd80      	pop	{r7, pc}
 8017018:	20000bb0 	.word	0x20000bb0
 801701c:	20000b88 	.word	0x20000b88
 8017020:	20000b48 	.word	0x20000b48
 8017024:	20000b90 	.word	0x20000b90
 8017028:	20000a8c 	.word	0x20000a8c
 801702c:	20000a88 	.word	0x20000a88
 8017030:	20000b9c 	.word	0x20000b9c
 8017034:	20000b98 	.word	0x20000b98
 8017038:	e000ed04 	.word	0xe000ed04

0801703c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801703c:	b480      	push	{r7}
 801703e:	b083      	sub	sp, #12
 8017040:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017042:	4b05      	ldr	r3, [pc, #20]	; (8017058 <xTaskGetTickCount+0x1c>)
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017048:	687b      	ldr	r3, [r7, #4]
}
 801704a:	4618      	mov	r0, r3
 801704c:	370c      	adds	r7, #12
 801704e:	46bd      	mov	sp, r7
 8017050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017054:	4770      	bx	lr
 8017056:	bf00      	nop
 8017058:	20000b8c 	.word	0x20000b8c

0801705c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b086      	sub	sp, #24
 8017060:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017062:	2300      	movs	r3, #0
 8017064:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017066:	4b4e      	ldr	r3, [pc, #312]	; (80171a0 <xTaskIncrementTick+0x144>)
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	2b00      	cmp	r3, #0
 801706c:	f040 808e 	bne.w	801718c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017070:	4b4c      	ldr	r3, [pc, #304]	; (80171a4 <xTaskIncrementTick+0x148>)
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	3301      	adds	r3, #1
 8017076:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017078:	4a4a      	ldr	r2, [pc, #296]	; (80171a4 <xTaskIncrementTick+0x148>)
 801707a:	693b      	ldr	r3, [r7, #16]
 801707c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801707e:	693b      	ldr	r3, [r7, #16]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d120      	bne.n	80170c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8017084:	4b48      	ldr	r3, [pc, #288]	; (80171a8 <xTaskIncrementTick+0x14c>)
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d00a      	beq.n	80170a4 <xTaskIncrementTick+0x48>
	__asm volatile
 801708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017092:	f383 8811 	msr	BASEPRI, r3
 8017096:	f3bf 8f6f 	isb	sy
 801709a:	f3bf 8f4f 	dsb	sy
 801709e:	603b      	str	r3, [r7, #0]
}
 80170a0:	bf00      	nop
 80170a2:	e7fe      	b.n	80170a2 <xTaskIncrementTick+0x46>
 80170a4:	4b40      	ldr	r3, [pc, #256]	; (80171a8 <xTaskIncrementTick+0x14c>)
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	60fb      	str	r3, [r7, #12]
 80170aa:	4b40      	ldr	r3, [pc, #256]	; (80171ac <xTaskIncrementTick+0x150>)
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	4a3e      	ldr	r2, [pc, #248]	; (80171a8 <xTaskIncrementTick+0x14c>)
 80170b0:	6013      	str	r3, [r2, #0]
 80170b2:	4a3e      	ldr	r2, [pc, #248]	; (80171ac <xTaskIncrementTick+0x150>)
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	6013      	str	r3, [r2, #0]
 80170b8:	4b3d      	ldr	r3, [pc, #244]	; (80171b0 <xTaskIncrementTick+0x154>)
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	3301      	adds	r3, #1
 80170be:	4a3c      	ldr	r2, [pc, #240]	; (80171b0 <xTaskIncrementTick+0x154>)
 80170c0:	6013      	str	r3, [r2, #0]
 80170c2:	f000 f995 	bl	80173f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80170c6:	4b3b      	ldr	r3, [pc, #236]	; (80171b4 <xTaskIncrementTick+0x158>)
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	693a      	ldr	r2, [r7, #16]
 80170cc:	429a      	cmp	r2, r3
 80170ce:	d348      	bcc.n	8017162 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80170d0:	4b35      	ldr	r3, [pc, #212]	; (80171a8 <xTaskIncrementTick+0x14c>)
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d104      	bne.n	80170e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80170da:	4b36      	ldr	r3, [pc, #216]	; (80171b4 <xTaskIncrementTick+0x158>)
 80170dc:	f04f 32ff 	mov.w	r2, #4294967295
 80170e0:	601a      	str	r2, [r3, #0]
					break;
 80170e2:	e03e      	b.n	8017162 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80170e4:	4b30      	ldr	r3, [pc, #192]	; (80171a8 <xTaskIncrementTick+0x14c>)
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	68db      	ldr	r3, [r3, #12]
 80170ea:	68db      	ldr	r3, [r3, #12]
 80170ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80170ee:	68bb      	ldr	r3, [r7, #8]
 80170f0:	685b      	ldr	r3, [r3, #4]
 80170f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80170f4:	693a      	ldr	r2, [r7, #16]
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	429a      	cmp	r2, r3
 80170fa:	d203      	bcs.n	8017104 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80170fc:	4a2d      	ldr	r2, [pc, #180]	; (80171b4 <xTaskIncrementTick+0x158>)
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017102:	e02e      	b.n	8017162 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017104:	68bb      	ldr	r3, [r7, #8]
 8017106:	3304      	adds	r3, #4
 8017108:	4618      	mov	r0, r3
 801710a:	f7ff fc52 	bl	80169b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801710e:	68bb      	ldr	r3, [r7, #8]
 8017110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017112:	2b00      	cmp	r3, #0
 8017114:	d004      	beq.n	8017120 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017116:	68bb      	ldr	r3, [r7, #8]
 8017118:	3318      	adds	r3, #24
 801711a:	4618      	mov	r0, r3
 801711c:	f7ff fc49 	bl	80169b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017120:	68bb      	ldr	r3, [r7, #8]
 8017122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017124:	2201      	movs	r2, #1
 8017126:	409a      	lsls	r2, r3
 8017128:	4b23      	ldr	r3, [pc, #140]	; (80171b8 <xTaskIncrementTick+0x15c>)
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	4313      	orrs	r3, r2
 801712e:	4a22      	ldr	r2, [pc, #136]	; (80171b8 <xTaskIncrementTick+0x15c>)
 8017130:	6013      	str	r3, [r2, #0]
 8017132:	68bb      	ldr	r3, [r7, #8]
 8017134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017136:	4613      	mov	r3, r2
 8017138:	009b      	lsls	r3, r3, #2
 801713a:	4413      	add	r3, r2
 801713c:	009b      	lsls	r3, r3, #2
 801713e:	4a1f      	ldr	r2, [pc, #124]	; (80171bc <xTaskIncrementTick+0x160>)
 8017140:	441a      	add	r2, r3
 8017142:	68bb      	ldr	r3, [r7, #8]
 8017144:	3304      	adds	r3, #4
 8017146:	4619      	mov	r1, r3
 8017148:	4610      	mov	r0, r2
 801714a:	f7ff fbd5 	bl	80168f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801714e:	68bb      	ldr	r3, [r7, #8]
 8017150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017152:	4b1b      	ldr	r3, [pc, #108]	; (80171c0 <xTaskIncrementTick+0x164>)
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017158:	429a      	cmp	r2, r3
 801715a:	d3b9      	bcc.n	80170d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801715c:	2301      	movs	r3, #1
 801715e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017160:	e7b6      	b.n	80170d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017162:	4b17      	ldr	r3, [pc, #92]	; (80171c0 <xTaskIncrementTick+0x164>)
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017168:	4914      	ldr	r1, [pc, #80]	; (80171bc <xTaskIncrementTick+0x160>)
 801716a:	4613      	mov	r3, r2
 801716c:	009b      	lsls	r3, r3, #2
 801716e:	4413      	add	r3, r2
 8017170:	009b      	lsls	r3, r3, #2
 8017172:	440b      	add	r3, r1
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	2b01      	cmp	r3, #1
 8017178:	d901      	bls.n	801717e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801717a:	2301      	movs	r3, #1
 801717c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801717e:	4b11      	ldr	r3, [pc, #68]	; (80171c4 <xTaskIncrementTick+0x168>)
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	2b00      	cmp	r3, #0
 8017184:	d007      	beq.n	8017196 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8017186:	2301      	movs	r3, #1
 8017188:	617b      	str	r3, [r7, #20]
 801718a:	e004      	b.n	8017196 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801718c:	4b0e      	ldr	r3, [pc, #56]	; (80171c8 <xTaskIncrementTick+0x16c>)
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	3301      	adds	r3, #1
 8017192:	4a0d      	ldr	r2, [pc, #52]	; (80171c8 <xTaskIncrementTick+0x16c>)
 8017194:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017196:	697b      	ldr	r3, [r7, #20]
}
 8017198:	4618      	mov	r0, r3
 801719a:	3718      	adds	r7, #24
 801719c:	46bd      	mov	sp, r7
 801719e:	bd80      	pop	{r7, pc}
 80171a0:	20000bb0 	.word	0x20000bb0
 80171a4:	20000b8c 	.word	0x20000b8c
 80171a8:	20000b40 	.word	0x20000b40
 80171ac:	20000b44 	.word	0x20000b44
 80171b0:	20000ba0 	.word	0x20000ba0
 80171b4:	20000ba8 	.word	0x20000ba8
 80171b8:	20000b90 	.word	0x20000b90
 80171bc:	20000a8c 	.word	0x20000a8c
 80171c0:	20000a88 	.word	0x20000a88
 80171c4:	20000b9c 	.word	0x20000b9c
 80171c8:	20000b98 	.word	0x20000b98

080171cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80171cc:	b480      	push	{r7}
 80171ce:	b087      	sub	sp, #28
 80171d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80171d2:	4b27      	ldr	r3, [pc, #156]	; (8017270 <vTaskSwitchContext+0xa4>)
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d003      	beq.n	80171e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80171da:	4b26      	ldr	r3, [pc, #152]	; (8017274 <vTaskSwitchContext+0xa8>)
 80171dc:	2201      	movs	r2, #1
 80171de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80171e0:	e03f      	b.n	8017262 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80171e2:	4b24      	ldr	r3, [pc, #144]	; (8017274 <vTaskSwitchContext+0xa8>)
 80171e4:	2200      	movs	r2, #0
 80171e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80171e8:	4b23      	ldr	r3, [pc, #140]	; (8017278 <vTaskSwitchContext+0xac>)
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	fab3 f383 	clz	r3, r3
 80171f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80171f6:	7afb      	ldrb	r3, [r7, #11]
 80171f8:	f1c3 031f 	rsb	r3, r3, #31
 80171fc:	617b      	str	r3, [r7, #20]
 80171fe:	491f      	ldr	r1, [pc, #124]	; (801727c <vTaskSwitchContext+0xb0>)
 8017200:	697a      	ldr	r2, [r7, #20]
 8017202:	4613      	mov	r3, r2
 8017204:	009b      	lsls	r3, r3, #2
 8017206:	4413      	add	r3, r2
 8017208:	009b      	lsls	r3, r3, #2
 801720a:	440b      	add	r3, r1
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	2b00      	cmp	r3, #0
 8017210:	d10a      	bne.n	8017228 <vTaskSwitchContext+0x5c>
	__asm volatile
 8017212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017216:	f383 8811 	msr	BASEPRI, r3
 801721a:	f3bf 8f6f 	isb	sy
 801721e:	f3bf 8f4f 	dsb	sy
 8017222:	607b      	str	r3, [r7, #4]
}
 8017224:	bf00      	nop
 8017226:	e7fe      	b.n	8017226 <vTaskSwitchContext+0x5a>
 8017228:	697a      	ldr	r2, [r7, #20]
 801722a:	4613      	mov	r3, r2
 801722c:	009b      	lsls	r3, r3, #2
 801722e:	4413      	add	r3, r2
 8017230:	009b      	lsls	r3, r3, #2
 8017232:	4a12      	ldr	r2, [pc, #72]	; (801727c <vTaskSwitchContext+0xb0>)
 8017234:	4413      	add	r3, r2
 8017236:	613b      	str	r3, [r7, #16]
 8017238:	693b      	ldr	r3, [r7, #16]
 801723a:	685b      	ldr	r3, [r3, #4]
 801723c:	685a      	ldr	r2, [r3, #4]
 801723e:	693b      	ldr	r3, [r7, #16]
 8017240:	605a      	str	r2, [r3, #4]
 8017242:	693b      	ldr	r3, [r7, #16]
 8017244:	685a      	ldr	r2, [r3, #4]
 8017246:	693b      	ldr	r3, [r7, #16]
 8017248:	3308      	adds	r3, #8
 801724a:	429a      	cmp	r2, r3
 801724c:	d104      	bne.n	8017258 <vTaskSwitchContext+0x8c>
 801724e:	693b      	ldr	r3, [r7, #16]
 8017250:	685b      	ldr	r3, [r3, #4]
 8017252:	685a      	ldr	r2, [r3, #4]
 8017254:	693b      	ldr	r3, [r7, #16]
 8017256:	605a      	str	r2, [r3, #4]
 8017258:	693b      	ldr	r3, [r7, #16]
 801725a:	685b      	ldr	r3, [r3, #4]
 801725c:	68db      	ldr	r3, [r3, #12]
 801725e:	4a08      	ldr	r2, [pc, #32]	; (8017280 <vTaskSwitchContext+0xb4>)
 8017260:	6013      	str	r3, [r2, #0]
}
 8017262:	bf00      	nop
 8017264:	371c      	adds	r7, #28
 8017266:	46bd      	mov	sp, r7
 8017268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801726c:	4770      	bx	lr
 801726e:	bf00      	nop
 8017270:	20000bb0 	.word	0x20000bb0
 8017274:	20000b9c 	.word	0x20000b9c
 8017278:	20000b90 	.word	0x20000b90
 801727c:	20000a8c 	.word	0x20000a8c
 8017280:	20000a88 	.word	0x20000a88

08017284 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017284:	b580      	push	{r7, lr}
 8017286:	b082      	sub	sp, #8
 8017288:	af00      	add	r7, sp, #0
 801728a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801728c:	f000 f852 	bl	8017334 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017290:	4b06      	ldr	r3, [pc, #24]	; (80172ac <prvIdleTask+0x28>)
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	2b01      	cmp	r3, #1
 8017296:	d9f9      	bls.n	801728c <prvIdleTask+0x8>
			{
				taskYIELD();
 8017298:	4b05      	ldr	r3, [pc, #20]	; (80172b0 <prvIdleTask+0x2c>)
 801729a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801729e:	601a      	str	r2, [r3, #0]
 80172a0:	f3bf 8f4f 	dsb	sy
 80172a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80172a8:	e7f0      	b.n	801728c <prvIdleTask+0x8>
 80172aa:	bf00      	nop
 80172ac:	20000a8c 	.word	0x20000a8c
 80172b0:	e000ed04 	.word	0xe000ed04

080172b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b082      	sub	sp, #8
 80172b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80172ba:	2300      	movs	r3, #0
 80172bc:	607b      	str	r3, [r7, #4]
 80172be:	e00c      	b.n	80172da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80172c0:	687a      	ldr	r2, [r7, #4]
 80172c2:	4613      	mov	r3, r2
 80172c4:	009b      	lsls	r3, r3, #2
 80172c6:	4413      	add	r3, r2
 80172c8:	009b      	lsls	r3, r3, #2
 80172ca:	4a12      	ldr	r2, [pc, #72]	; (8017314 <prvInitialiseTaskLists+0x60>)
 80172cc:	4413      	add	r3, r2
 80172ce:	4618      	mov	r0, r3
 80172d0:	f7ff fae5 	bl	801689e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	3301      	adds	r3, #1
 80172d8:	607b      	str	r3, [r7, #4]
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	2b06      	cmp	r3, #6
 80172de:	d9ef      	bls.n	80172c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80172e0:	480d      	ldr	r0, [pc, #52]	; (8017318 <prvInitialiseTaskLists+0x64>)
 80172e2:	f7ff fadc 	bl	801689e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80172e6:	480d      	ldr	r0, [pc, #52]	; (801731c <prvInitialiseTaskLists+0x68>)
 80172e8:	f7ff fad9 	bl	801689e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80172ec:	480c      	ldr	r0, [pc, #48]	; (8017320 <prvInitialiseTaskLists+0x6c>)
 80172ee:	f7ff fad6 	bl	801689e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80172f2:	480c      	ldr	r0, [pc, #48]	; (8017324 <prvInitialiseTaskLists+0x70>)
 80172f4:	f7ff fad3 	bl	801689e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80172f8:	480b      	ldr	r0, [pc, #44]	; (8017328 <prvInitialiseTaskLists+0x74>)
 80172fa:	f7ff fad0 	bl	801689e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80172fe:	4b0b      	ldr	r3, [pc, #44]	; (801732c <prvInitialiseTaskLists+0x78>)
 8017300:	4a05      	ldr	r2, [pc, #20]	; (8017318 <prvInitialiseTaskLists+0x64>)
 8017302:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017304:	4b0a      	ldr	r3, [pc, #40]	; (8017330 <prvInitialiseTaskLists+0x7c>)
 8017306:	4a05      	ldr	r2, [pc, #20]	; (801731c <prvInitialiseTaskLists+0x68>)
 8017308:	601a      	str	r2, [r3, #0]
}
 801730a:	bf00      	nop
 801730c:	3708      	adds	r7, #8
 801730e:	46bd      	mov	sp, r7
 8017310:	bd80      	pop	{r7, pc}
 8017312:	bf00      	nop
 8017314:	20000a8c 	.word	0x20000a8c
 8017318:	20000b18 	.word	0x20000b18
 801731c:	20000b2c 	.word	0x20000b2c
 8017320:	20000b48 	.word	0x20000b48
 8017324:	20000b5c 	.word	0x20000b5c
 8017328:	20000b74 	.word	0x20000b74
 801732c:	20000b40 	.word	0x20000b40
 8017330:	20000b44 	.word	0x20000b44

08017334 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017334:	b580      	push	{r7, lr}
 8017336:	b082      	sub	sp, #8
 8017338:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801733a:	e019      	b.n	8017370 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801733c:	f000 fb42 	bl	80179c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017340:	4b10      	ldr	r3, [pc, #64]	; (8017384 <prvCheckTasksWaitingTermination+0x50>)
 8017342:	68db      	ldr	r3, [r3, #12]
 8017344:	68db      	ldr	r3, [r3, #12]
 8017346:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	3304      	adds	r3, #4
 801734c:	4618      	mov	r0, r3
 801734e:	f7ff fb30 	bl	80169b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017352:	4b0d      	ldr	r3, [pc, #52]	; (8017388 <prvCheckTasksWaitingTermination+0x54>)
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	3b01      	subs	r3, #1
 8017358:	4a0b      	ldr	r2, [pc, #44]	; (8017388 <prvCheckTasksWaitingTermination+0x54>)
 801735a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801735c:	4b0b      	ldr	r3, [pc, #44]	; (801738c <prvCheckTasksWaitingTermination+0x58>)
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	3b01      	subs	r3, #1
 8017362:	4a0a      	ldr	r2, [pc, #40]	; (801738c <prvCheckTasksWaitingTermination+0x58>)
 8017364:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017366:	f000 fb5d 	bl	8017a24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801736a:	6878      	ldr	r0, [r7, #4]
 801736c:	f000 f810 	bl	8017390 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017370:	4b06      	ldr	r3, [pc, #24]	; (801738c <prvCheckTasksWaitingTermination+0x58>)
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	2b00      	cmp	r3, #0
 8017376:	d1e1      	bne.n	801733c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017378:	bf00      	nop
 801737a:	bf00      	nop
 801737c:	3708      	adds	r7, #8
 801737e:	46bd      	mov	sp, r7
 8017380:	bd80      	pop	{r7, pc}
 8017382:	bf00      	nop
 8017384:	20000b5c 	.word	0x20000b5c
 8017388:	20000b88 	.word	0x20000b88
 801738c:	20000b70 	.word	0x20000b70

08017390 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017390:	b580      	push	{r7, lr}
 8017392:	b084      	sub	sp, #16
 8017394:	af00      	add	r7, sp, #0
 8017396:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d108      	bne.n	80173b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173a6:	4618      	mov	r0, r3
 80173a8:	f000 fcfa 	bl	8017da0 <vPortFree>
				vPortFree( pxTCB );
 80173ac:	6878      	ldr	r0, [r7, #4]
 80173ae:	f000 fcf7 	bl	8017da0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80173b2:	e018      	b.n	80173e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80173ba:	2b01      	cmp	r3, #1
 80173bc:	d103      	bne.n	80173c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80173be:	6878      	ldr	r0, [r7, #4]
 80173c0:	f000 fcee 	bl	8017da0 <vPortFree>
	}
 80173c4:	e00f      	b.n	80173e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80173cc:	2b02      	cmp	r3, #2
 80173ce:	d00a      	beq.n	80173e6 <prvDeleteTCB+0x56>
	__asm volatile
 80173d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173d4:	f383 8811 	msr	BASEPRI, r3
 80173d8:	f3bf 8f6f 	isb	sy
 80173dc:	f3bf 8f4f 	dsb	sy
 80173e0:	60fb      	str	r3, [r7, #12]
}
 80173e2:	bf00      	nop
 80173e4:	e7fe      	b.n	80173e4 <prvDeleteTCB+0x54>
	}
 80173e6:	bf00      	nop
 80173e8:	3710      	adds	r7, #16
 80173ea:	46bd      	mov	sp, r7
 80173ec:	bd80      	pop	{r7, pc}
	...

080173f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80173f0:	b480      	push	{r7}
 80173f2:	b083      	sub	sp, #12
 80173f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80173f6:	4b0c      	ldr	r3, [pc, #48]	; (8017428 <prvResetNextTaskUnblockTime+0x38>)
 80173f8:	681b      	ldr	r3, [r3, #0]
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d104      	bne.n	801740a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017400:	4b0a      	ldr	r3, [pc, #40]	; (801742c <prvResetNextTaskUnblockTime+0x3c>)
 8017402:	f04f 32ff 	mov.w	r2, #4294967295
 8017406:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017408:	e008      	b.n	801741c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801740a:	4b07      	ldr	r3, [pc, #28]	; (8017428 <prvResetNextTaskUnblockTime+0x38>)
 801740c:	681b      	ldr	r3, [r3, #0]
 801740e:	68db      	ldr	r3, [r3, #12]
 8017410:	68db      	ldr	r3, [r3, #12]
 8017412:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	685b      	ldr	r3, [r3, #4]
 8017418:	4a04      	ldr	r2, [pc, #16]	; (801742c <prvResetNextTaskUnblockTime+0x3c>)
 801741a:	6013      	str	r3, [r2, #0]
}
 801741c:	bf00      	nop
 801741e:	370c      	adds	r7, #12
 8017420:	46bd      	mov	sp, r7
 8017422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017426:	4770      	bx	lr
 8017428:	20000b40 	.word	0x20000b40
 801742c:	20000ba8 	.word	0x20000ba8

08017430 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8017430:	b580      	push	{r7, lr}
 8017432:	b086      	sub	sp, #24
 8017434:	af00      	add	r7, sp, #0
 8017436:	60f8      	str	r0, [r7, #12]
 8017438:	60b9      	str	r1, [r7, #8]
 801743a:	607a      	str	r2, [r7, #4]
 801743c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801743e:	f000 fac1 	bl	80179c4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8017442:	4b26      	ldr	r3, [pc, #152]	; (80174dc <xTaskNotifyWait+0xac>)
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801744a:	b2db      	uxtb	r3, r3
 801744c:	2b02      	cmp	r3, #2
 801744e:	d01a      	beq.n	8017486 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8017450:	4b22      	ldr	r3, [pc, #136]	; (80174dc <xTaskNotifyWait+0xac>)
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8017456:	68fa      	ldr	r2, [r7, #12]
 8017458:	43d2      	mvns	r2, r2
 801745a:	400a      	ands	r2, r1
 801745c:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801745e:	4b1f      	ldr	r3, [pc, #124]	; (80174dc <xTaskNotifyWait+0xac>)
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	2201      	movs	r2, #1
 8017464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8017468:	683b      	ldr	r3, [r7, #0]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d00b      	beq.n	8017486 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801746e:	2101      	movs	r1, #1
 8017470:	6838      	ldr	r0, [r7, #0]
 8017472:	f000 f911 	bl	8017698 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8017476:	4b1a      	ldr	r3, [pc, #104]	; (80174e0 <xTaskNotifyWait+0xb0>)
 8017478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801747c:	601a      	str	r2, [r3, #0]
 801747e:	f3bf 8f4f 	dsb	sy
 8017482:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8017486:	f000 facd 	bl	8017a24 <vPortExitCritical>

		taskENTER_CRITICAL();
 801748a:	f000 fa9b 	bl	80179c4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	2b00      	cmp	r3, #0
 8017492:	d004      	beq.n	801749e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8017494:	4b11      	ldr	r3, [pc, #68]	; (80174dc <xTaskNotifyWait+0xac>)
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801749e:	4b0f      	ldr	r3, [pc, #60]	; (80174dc <xTaskNotifyWait+0xac>)
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80174a6:	b2db      	uxtb	r3, r3
 80174a8:	2b02      	cmp	r3, #2
 80174aa:	d002      	beq.n	80174b2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80174ac:	2300      	movs	r3, #0
 80174ae:	617b      	str	r3, [r7, #20]
 80174b0:	e008      	b.n	80174c4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80174b2:	4b0a      	ldr	r3, [pc, #40]	; (80174dc <xTaskNotifyWait+0xac>)
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80174b8:	68ba      	ldr	r2, [r7, #8]
 80174ba:	43d2      	mvns	r2, r2
 80174bc:	400a      	ands	r2, r1
 80174be:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 80174c0:	2301      	movs	r3, #1
 80174c2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80174c4:	4b05      	ldr	r3, [pc, #20]	; (80174dc <xTaskNotifyWait+0xac>)
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	2200      	movs	r2, #0
 80174ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80174ce:	f000 faa9 	bl	8017a24 <vPortExitCritical>

		return xReturn;
 80174d2:	697b      	ldr	r3, [r7, #20]
	}
 80174d4:	4618      	mov	r0, r3
 80174d6:	3718      	adds	r7, #24
 80174d8:	46bd      	mov	sp, r7
 80174da:	bd80      	pop	{r7, pc}
 80174dc:	20000a88 	.word	0x20000a88
 80174e0:	e000ed04 	.word	0xe000ed04

080174e4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b08e      	sub	sp, #56	; 0x38
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	60f8      	str	r0, [r7, #12]
 80174ec:	60b9      	str	r1, [r7, #8]
 80174ee:	603b      	str	r3, [r7, #0]
 80174f0:	4613      	mov	r3, r2
 80174f2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80174f4:	2301      	movs	r3, #1
 80174f6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d10a      	bne.n	8017514 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80174fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017502:	f383 8811 	msr	BASEPRI, r3
 8017506:	f3bf 8f6f 	isb	sy
 801750a:	f3bf 8f4f 	dsb	sy
 801750e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017510:	bf00      	nop
 8017512:	e7fe      	b.n	8017512 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017514:	f000 fb38 	bl	8017b88 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801751c:	f3ef 8211 	mrs	r2, BASEPRI
 8017520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017524:	f383 8811 	msr	BASEPRI, r3
 8017528:	f3bf 8f6f 	isb	sy
 801752c:	f3bf 8f4f 	dsb	sy
 8017530:	623a      	str	r2, [r7, #32]
 8017532:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017534:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017536:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8017538:	683b      	ldr	r3, [r7, #0]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d003      	beq.n	8017546 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017540:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017542:	683b      	ldr	r3, [r7, #0]
 8017544:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8017546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017548:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801754c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8017550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017552:	2202      	movs	r2, #2
 8017554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8017558:	79fb      	ldrb	r3, [r7, #7]
 801755a:	2b04      	cmp	r3, #4
 801755c:	d828      	bhi.n	80175b0 <xTaskGenericNotifyFromISR+0xcc>
 801755e:	a201      	add	r2, pc, #4	; (adr r2, 8017564 <xTaskGenericNotifyFromISR+0x80>)
 8017560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017564:	080175d1 	.word	0x080175d1
 8017568:	08017579 	.word	0x08017579
 801756c:	08017587 	.word	0x08017587
 8017570:	08017593 	.word	0x08017593
 8017574:	0801759b 	.word	0x0801759b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8017578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801757a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801757c:	68bb      	ldr	r3, [r7, #8]
 801757e:	431a      	orrs	r2, r3
 8017580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017582:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8017584:	e027      	b.n	80175d6 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8017586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801758a:	1c5a      	adds	r2, r3, #1
 801758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801758e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8017590:	e021      	b.n	80175d6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8017592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017594:	68ba      	ldr	r2, [r7, #8]
 8017596:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8017598:	e01d      	b.n	80175d6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801759a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801759e:	2b02      	cmp	r3, #2
 80175a0:	d003      	beq.n	80175aa <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80175a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175a4:	68ba      	ldr	r2, [r7, #8]
 80175a6:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80175a8:	e015      	b.n	80175d6 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 80175aa:	2300      	movs	r3, #0
 80175ac:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80175ae:	e012      	b.n	80175d6 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80175b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80175b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175b8:	d00c      	beq.n	80175d4 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80175ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175be:	f383 8811 	msr	BASEPRI, r3
 80175c2:	f3bf 8f6f 	isb	sy
 80175c6:	f3bf 8f4f 	dsb	sy
 80175ca:	61bb      	str	r3, [r7, #24]
}
 80175cc:	bf00      	nop
 80175ce:	e7fe      	b.n	80175ce <xTaskGenericNotifyFromISR+0xea>
					break;
 80175d0:	bf00      	nop
 80175d2:	e000      	b.n	80175d6 <xTaskGenericNotifyFromISR+0xf2>
					break;
 80175d4:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80175d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80175da:	2b01      	cmp	r3, #1
 80175dc:	d145      	bne.n	801766a <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80175de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d00a      	beq.n	80175fc <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 80175e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175ea:	f383 8811 	msr	BASEPRI, r3
 80175ee:	f3bf 8f6f 	isb	sy
 80175f2:	f3bf 8f4f 	dsb	sy
 80175f6:	617b      	str	r3, [r7, #20]
}
 80175f8:	bf00      	nop
 80175fa:	e7fe      	b.n	80175fa <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80175fc:	4b20      	ldr	r3, [pc, #128]	; (8017680 <xTaskGenericNotifyFromISR+0x19c>)
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	2b00      	cmp	r3, #0
 8017602:	d11c      	bne.n	801763e <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017606:	3304      	adds	r3, #4
 8017608:	4618      	mov	r0, r3
 801760a:	f7ff f9d2 	bl	80169b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017612:	2201      	movs	r2, #1
 8017614:	409a      	lsls	r2, r3
 8017616:	4b1b      	ldr	r3, [pc, #108]	; (8017684 <xTaskGenericNotifyFromISR+0x1a0>)
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	4313      	orrs	r3, r2
 801761c:	4a19      	ldr	r2, [pc, #100]	; (8017684 <xTaskGenericNotifyFromISR+0x1a0>)
 801761e:	6013      	str	r3, [r2, #0]
 8017620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017624:	4613      	mov	r3, r2
 8017626:	009b      	lsls	r3, r3, #2
 8017628:	4413      	add	r3, r2
 801762a:	009b      	lsls	r3, r3, #2
 801762c:	4a16      	ldr	r2, [pc, #88]	; (8017688 <xTaskGenericNotifyFromISR+0x1a4>)
 801762e:	441a      	add	r2, r3
 8017630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017632:	3304      	adds	r3, #4
 8017634:	4619      	mov	r1, r3
 8017636:	4610      	mov	r0, r2
 8017638:	f7ff f95e 	bl	80168f8 <vListInsertEnd>
 801763c:	e005      	b.n	801764a <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017640:	3318      	adds	r3, #24
 8017642:	4619      	mov	r1, r3
 8017644:	4811      	ldr	r0, [pc, #68]	; (801768c <xTaskGenericNotifyFromISR+0x1a8>)
 8017646:	f7ff f957 	bl	80168f8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801764c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801764e:	4b10      	ldr	r3, [pc, #64]	; (8017690 <xTaskGenericNotifyFromISR+0x1ac>)
 8017650:	681b      	ldr	r3, [r3, #0]
 8017652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017654:	429a      	cmp	r2, r3
 8017656:	d908      	bls.n	801766a <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8017658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801765a:	2b00      	cmp	r3, #0
 801765c:	d002      	beq.n	8017664 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801765e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017660:	2201      	movs	r2, #1
 8017662:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8017664:	4b0b      	ldr	r3, [pc, #44]	; (8017694 <xTaskGenericNotifyFromISR+0x1b0>)
 8017666:	2201      	movs	r2, #1
 8017668:	601a      	str	r2, [r3, #0]
 801766a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801766c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801766e:	693b      	ldr	r3, [r7, #16]
 8017670:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8017674:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8017676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8017678:	4618      	mov	r0, r3
 801767a:	3738      	adds	r7, #56	; 0x38
 801767c:	46bd      	mov	sp, r7
 801767e:	bd80      	pop	{r7, pc}
 8017680:	20000bb0 	.word	0x20000bb0
 8017684:	20000b90 	.word	0x20000b90
 8017688:	20000a8c 	.word	0x20000a8c
 801768c:	20000b48 	.word	0x20000b48
 8017690:	20000a88 	.word	0x20000a88
 8017694:	20000b9c 	.word	0x20000b9c

08017698 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b084      	sub	sp, #16
 801769c:	af00      	add	r7, sp, #0
 801769e:	6078      	str	r0, [r7, #4]
 80176a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80176a2:	4b29      	ldr	r3, [pc, #164]	; (8017748 <prvAddCurrentTaskToDelayedList+0xb0>)
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80176a8:	4b28      	ldr	r3, [pc, #160]	; (801774c <prvAddCurrentTaskToDelayedList+0xb4>)
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	3304      	adds	r3, #4
 80176ae:	4618      	mov	r0, r3
 80176b0:	f7ff f97f 	bl	80169b2 <uxListRemove>
 80176b4:	4603      	mov	r3, r0
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d10b      	bne.n	80176d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80176ba:	4b24      	ldr	r3, [pc, #144]	; (801774c <prvAddCurrentTaskToDelayedList+0xb4>)
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176c0:	2201      	movs	r2, #1
 80176c2:	fa02 f303 	lsl.w	r3, r2, r3
 80176c6:	43da      	mvns	r2, r3
 80176c8:	4b21      	ldr	r3, [pc, #132]	; (8017750 <prvAddCurrentTaskToDelayedList+0xb8>)
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	4013      	ands	r3, r2
 80176ce:	4a20      	ldr	r2, [pc, #128]	; (8017750 <prvAddCurrentTaskToDelayedList+0xb8>)
 80176d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176d8:	d10a      	bne.n	80176f0 <prvAddCurrentTaskToDelayedList+0x58>
 80176da:	683b      	ldr	r3, [r7, #0]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d007      	beq.n	80176f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80176e0:	4b1a      	ldr	r3, [pc, #104]	; (801774c <prvAddCurrentTaskToDelayedList+0xb4>)
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	3304      	adds	r3, #4
 80176e6:	4619      	mov	r1, r3
 80176e8:	481a      	ldr	r0, [pc, #104]	; (8017754 <prvAddCurrentTaskToDelayedList+0xbc>)
 80176ea:	f7ff f905 	bl	80168f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80176ee:	e026      	b.n	801773e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80176f0:	68fa      	ldr	r2, [r7, #12]
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	4413      	add	r3, r2
 80176f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80176f8:	4b14      	ldr	r3, [pc, #80]	; (801774c <prvAddCurrentTaskToDelayedList+0xb4>)
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	68ba      	ldr	r2, [r7, #8]
 80176fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017700:	68ba      	ldr	r2, [r7, #8]
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	429a      	cmp	r2, r3
 8017706:	d209      	bcs.n	801771c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017708:	4b13      	ldr	r3, [pc, #76]	; (8017758 <prvAddCurrentTaskToDelayedList+0xc0>)
 801770a:	681a      	ldr	r2, [r3, #0]
 801770c:	4b0f      	ldr	r3, [pc, #60]	; (801774c <prvAddCurrentTaskToDelayedList+0xb4>)
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	3304      	adds	r3, #4
 8017712:	4619      	mov	r1, r3
 8017714:	4610      	mov	r0, r2
 8017716:	f7ff f913 	bl	8016940 <vListInsert>
}
 801771a:	e010      	b.n	801773e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801771c:	4b0f      	ldr	r3, [pc, #60]	; (801775c <prvAddCurrentTaskToDelayedList+0xc4>)
 801771e:	681a      	ldr	r2, [r3, #0]
 8017720:	4b0a      	ldr	r3, [pc, #40]	; (801774c <prvAddCurrentTaskToDelayedList+0xb4>)
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	3304      	adds	r3, #4
 8017726:	4619      	mov	r1, r3
 8017728:	4610      	mov	r0, r2
 801772a:	f7ff f909 	bl	8016940 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801772e:	4b0c      	ldr	r3, [pc, #48]	; (8017760 <prvAddCurrentTaskToDelayedList+0xc8>)
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	68ba      	ldr	r2, [r7, #8]
 8017734:	429a      	cmp	r2, r3
 8017736:	d202      	bcs.n	801773e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8017738:	4a09      	ldr	r2, [pc, #36]	; (8017760 <prvAddCurrentTaskToDelayedList+0xc8>)
 801773a:	68bb      	ldr	r3, [r7, #8]
 801773c:	6013      	str	r3, [r2, #0]
}
 801773e:	bf00      	nop
 8017740:	3710      	adds	r7, #16
 8017742:	46bd      	mov	sp, r7
 8017744:	bd80      	pop	{r7, pc}
 8017746:	bf00      	nop
 8017748:	20000b8c 	.word	0x20000b8c
 801774c:	20000a88 	.word	0x20000a88
 8017750:	20000b90 	.word	0x20000b90
 8017754:	20000b74 	.word	0x20000b74
 8017758:	20000b44 	.word	0x20000b44
 801775c:	20000b40 	.word	0x20000b40
 8017760:	20000ba8 	.word	0x20000ba8

08017764 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017764:	b480      	push	{r7}
 8017766:	b085      	sub	sp, #20
 8017768:	af00      	add	r7, sp, #0
 801776a:	60f8      	str	r0, [r7, #12]
 801776c:	60b9      	str	r1, [r7, #8]
 801776e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	3b04      	subs	r3, #4
 8017774:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801777c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801777e:	68fb      	ldr	r3, [r7, #12]
 8017780:	3b04      	subs	r3, #4
 8017782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017784:	68bb      	ldr	r3, [r7, #8]
 8017786:	f023 0201 	bic.w	r2, r3, #1
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	3b04      	subs	r3, #4
 8017792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017794:	4a0c      	ldr	r2, [pc, #48]	; (80177c8 <pxPortInitialiseStack+0x64>)
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	3b14      	subs	r3, #20
 801779e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80177a0:	687a      	ldr	r2, [r7, #4]
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	3b04      	subs	r3, #4
 80177aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	f06f 0202 	mvn.w	r2, #2
 80177b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	3b20      	subs	r3, #32
 80177b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80177ba:	68fb      	ldr	r3, [r7, #12]
}
 80177bc:	4618      	mov	r0, r3
 80177be:	3714      	adds	r7, #20
 80177c0:	46bd      	mov	sp, r7
 80177c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177c6:	4770      	bx	lr
 80177c8:	080177cd 	.word	0x080177cd

080177cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80177cc:	b480      	push	{r7}
 80177ce:	b085      	sub	sp, #20
 80177d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80177d2:	2300      	movs	r3, #0
 80177d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80177d6:	4b12      	ldr	r3, [pc, #72]	; (8017820 <prvTaskExitError+0x54>)
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177de:	d00a      	beq.n	80177f6 <prvTaskExitError+0x2a>
	__asm volatile
 80177e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177e4:	f383 8811 	msr	BASEPRI, r3
 80177e8:	f3bf 8f6f 	isb	sy
 80177ec:	f3bf 8f4f 	dsb	sy
 80177f0:	60fb      	str	r3, [r7, #12]
}
 80177f2:	bf00      	nop
 80177f4:	e7fe      	b.n	80177f4 <prvTaskExitError+0x28>
	__asm volatile
 80177f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177fa:	f383 8811 	msr	BASEPRI, r3
 80177fe:	f3bf 8f6f 	isb	sy
 8017802:	f3bf 8f4f 	dsb	sy
 8017806:	60bb      	str	r3, [r7, #8]
}
 8017808:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801780a:	bf00      	nop
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	2b00      	cmp	r3, #0
 8017810:	d0fc      	beq.n	801780c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017812:	bf00      	nop
 8017814:	bf00      	nop
 8017816:	3714      	adds	r7, #20
 8017818:	46bd      	mov	sp, r7
 801781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801781e:	4770      	bx	lr
 8017820:	200000b8 	.word	0x200000b8
	...

08017830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017830:	4b07      	ldr	r3, [pc, #28]	; (8017850 <pxCurrentTCBConst2>)
 8017832:	6819      	ldr	r1, [r3, #0]
 8017834:	6808      	ldr	r0, [r1, #0]
 8017836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801783a:	f380 8809 	msr	PSP, r0
 801783e:	f3bf 8f6f 	isb	sy
 8017842:	f04f 0000 	mov.w	r0, #0
 8017846:	f380 8811 	msr	BASEPRI, r0
 801784a:	4770      	bx	lr
 801784c:	f3af 8000 	nop.w

08017850 <pxCurrentTCBConst2>:
 8017850:	20000a88 	.word	0x20000a88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017854:	bf00      	nop
 8017856:	bf00      	nop

08017858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017858:	4808      	ldr	r0, [pc, #32]	; (801787c <prvPortStartFirstTask+0x24>)
 801785a:	6800      	ldr	r0, [r0, #0]
 801785c:	6800      	ldr	r0, [r0, #0]
 801785e:	f380 8808 	msr	MSP, r0
 8017862:	f04f 0000 	mov.w	r0, #0
 8017866:	f380 8814 	msr	CONTROL, r0
 801786a:	b662      	cpsie	i
 801786c:	b661      	cpsie	f
 801786e:	f3bf 8f4f 	dsb	sy
 8017872:	f3bf 8f6f 	isb	sy
 8017876:	df00      	svc	0
 8017878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801787a:	bf00      	nop
 801787c:	e000ed08 	.word	0xe000ed08

08017880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017880:	b580      	push	{r7, lr}
 8017882:	b086      	sub	sp, #24
 8017884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017886:	4b46      	ldr	r3, [pc, #280]	; (80179a0 <xPortStartScheduler+0x120>)
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	4a46      	ldr	r2, [pc, #280]	; (80179a4 <xPortStartScheduler+0x124>)
 801788c:	4293      	cmp	r3, r2
 801788e:	d10a      	bne.n	80178a6 <xPortStartScheduler+0x26>
	__asm volatile
 8017890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017894:	f383 8811 	msr	BASEPRI, r3
 8017898:	f3bf 8f6f 	isb	sy
 801789c:	f3bf 8f4f 	dsb	sy
 80178a0:	613b      	str	r3, [r7, #16]
}
 80178a2:	bf00      	nop
 80178a4:	e7fe      	b.n	80178a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80178a6:	4b3e      	ldr	r3, [pc, #248]	; (80179a0 <xPortStartScheduler+0x120>)
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	4a3f      	ldr	r2, [pc, #252]	; (80179a8 <xPortStartScheduler+0x128>)
 80178ac:	4293      	cmp	r3, r2
 80178ae:	d10a      	bne.n	80178c6 <xPortStartScheduler+0x46>
	__asm volatile
 80178b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178b4:	f383 8811 	msr	BASEPRI, r3
 80178b8:	f3bf 8f6f 	isb	sy
 80178bc:	f3bf 8f4f 	dsb	sy
 80178c0:	60fb      	str	r3, [r7, #12]
}
 80178c2:	bf00      	nop
 80178c4:	e7fe      	b.n	80178c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80178c6:	4b39      	ldr	r3, [pc, #228]	; (80179ac <xPortStartScheduler+0x12c>)
 80178c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80178ca:	697b      	ldr	r3, [r7, #20]
 80178cc:	781b      	ldrb	r3, [r3, #0]
 80178ce:	b2db      	uxtb	r3, r3
 80178d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80178d2:	697b      	ldr	r3, [r7, #20]
 80178d4:	22ff      	movs	r2, #255	; 0xff
 80178d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80178d8:	697b      	ldr	r3, [r7, #20]
 80178da:	781b      	ldrb	r3, [r3, #0]
 80178dc:	b2db      	uxtb	r3, r3
 80178de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80178e0:	78fb      	ldrb	r3, [r7, #3]
 80178e2:	b2db      	uxtb	r3, r3
 80178e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80178e8:	b2da      	uxtb	r2, r3
 80178ea:	4b31      	ldr	r3, [pc, #196]	; (80179b0 <xPortStartScheduler+0x130>)
 80178ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80178ee:	4b31      	ldr	r3, [pc, #196]	; (80179b4 <xPortStartScheduler+0x134>)
 80178f0:	2207      	movs	r2, #7
 80178f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80178f4:	e009      	b.n	801790a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80178f6:	4b2f      	ldr	r3, [pc, #188]	; (80179b4 <xPortStartScheduler+0x134>)
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	3b01      	subs	r3, #1
 80178fc:	4a2d      	ldr	r2, [pc, #180]	; (80179b4 <xPortStartScheduler+0x134>)
 80178fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017900:	78fb      	ldrb	r3, [r7, #3]
 8017902:	b2db      	uxtb	r3, r3
 8017904:	005b      	lsls	r3, r3, #1
 8017906:	b2db      	uxtb	r3, r3
 8017908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801790a:	78fb      	ldrb	r3, [r7, #3]
 801790c:	b2db      	uxtb	r3, r3
 801790e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017912:	2b80      	cmp	r3, #128	; 0x80
 8017914:	d0ef      	beq.n	80178f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017916:	4b27      	ldr	r3, [pc, #156]	; (80179b4 <xPortStartScheduler+0x134>)
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	f1c3 0307 	rsb	r3, r3, #7
 801791e:	2b04      	cmp	r3, #4
 8017920:	d00a      	beq.n	8017938 <xPortStartScheduler+0xb8>
	__asm volatile
 8017922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017926:	f383 8811 	msr	BASEPRI, r3
 801792a:	f3bf 8f6f 	isb	sy
 801792e:	f3bf 8f4f 	dsb	sy
 8017932:	60bb      	str	r3, [r7, #8]
}
 8017934:	bf00      	nop
 8017936:	e7fe      	b.n	8017936 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8017938:	4b1e      	ldr	r3, [pc, #120]	; (80179b4 <xPortStartScheduler+0x134>)
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	021b      	lsls	r3, r3, #8
 801793e:	4a1d      	ldr	r2, [pc, #116]	; (80179b4 <xPortStartScheduler+0x134>)
 8017940:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017942:	4b1c      	ldr	r3, [pc, #112]	; (80179b4 <xPortStartScheduler+0x134>)
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801794a:	4a1a      	ldr	r2, [pc, #104]	; (80179b4 <xPortStartScheduler+0x134>)
 801794c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	b2da      	uxtb	r2, r3
 8017952:	697b      	ldr	r3, [r7, #20]
 8017954:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8017956:	4b18      	ldr	r3, [pc, #96]	; (80179b8 <xPortStartScheduler+0x138>)
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	4a17      	ldr	r2, [pc, #92]	; (80179b8 <xPortStartScheduler+0x138>)
 801795c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017962:	4b15      	ldr	r3, [pc, #84]	; (80179b8 <xPortStartScheduler+0x138>)
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	4a14      	ldr	r2, [pc, #80]	; (80179b8 <xPortStartScheduler+0x138>)
 8017968:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801796c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801796e:	f000 f8dd 	bl	8017b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017972:	4b12      	ldr	r3, [pc, #72]	; (80179bc <xPortStartScheduler+0x13c>)
 8017974:	2200      	movs	r2, #0
 8017976:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8017978:	f000 f8fc 	bl	8017b74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801797c:	4b10      	ldr	r3, [pc, #64]	; (80179c0 <xPortStartScheduler+0x140>)
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	4a0f      	ldr	r2, [pc, #60]	; (80179c0 <xPortStartScheduler+0x140>)
 8017982:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8017986:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017988:	f7ff ff66 	bl	8017858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801798c:	f7ff fc1e 	bl	80171cc <vTaskSwitchContext>
	prvTaskExitError();
 8017990:	f7ff ff1c 	bl	80177cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017994:	2300      	movs	r3, #0
}
 8017996:	4618      	mov	r0, r3
 8017998:	3718      	adds	r7, #24
 801799a:	46bd      	mov	sp, r7
 801799c:	bd80      	pop	{r7, pc}
 801799e:	bf00      	nop
 80179a0:	e000ed00 	.word	0xe000ed00
 80179a4:	410fc271 	.word	0x410fc271
 80179a8:	410fc270 	.word	0x410fc270
 80179ac:	e000e400 	.word	0xe000e400
 80179b0:	20000bb4 	.word	0x20000bb4
 80179b4:	20000bb8 	.word	0x20000bb8
 80179b8:	e000ed20 	.word	0xe000ed20
 80179bc:	200000b8 	.word	0x200000b8
 80179c0:	e000ef34 	.word	0xe000ef34

080179c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80179c4:	b480      	push	{r7}
 80179c6:	b083      	sub	sp, #12
 80179c8:	af00      	add	r7, sp, #0
	__asm volatile
 80179ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179ce:	f383 8811 	msr	BASEPRI, r3
 80179d2:	f3bf 8f6f 	isb	sy
 80179d6:	f3bf 8f4f 	dsb	sy
 80179da:	607b      	str	r3, [r7, #4]
}
 80179dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80179de:	4b0f      	ldr	r3, [pc, #60]	; (8017a1c <vPortEnterCritical+0x58>)
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	3301      	adds	r3, #1
 80179e4:	4a0d      	ldr	r2, [pc, #52]	; (8017a1c <vPortEnterCritical+0x58>)
 80179e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80179e8:	4b0c      	ldr	r3, [pc, #48]	; (8017a1c <vPortEnterCritical+0x58>)
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	2b01      	cmp	r3, #1
 80179ee:	d10f      	bne.n	8017a10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80179f0:	4b0b      	ldr	r3, [pc, #44]	; (8017a20 <vPortEnterCritical+0x5c>)
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	b2db      	uxtb	r3, r3
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d00a      	beq.n	8017a10 <vPortEnterCritical+0x4c>
	__asm volatile
 80179fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179fe:	f383 8811 	msr	BASEPRI, r3
 8017a02:	f3bf 8f6f 	isb	sy
 8017a06:	f3bf 8f4f 	dsb	sy
 8017a0a:	603b      	str	r3, [r7, #0]
}
 8017a0c:	bf00      	nop
 8017a0e:	e7fe      	b.n	8017a0e <vPortEnterCritical+0x4a>
	}
}
 8017a10:	bf00      	nop
 8017a12:	370c      	adds	r7, #12
 8017a14:	46bd      	mov	sp, r7
 8017a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a1a:	4770      	bx	lr
 8017a1c:	200000b8 	.word	0x200000b8
 8017a20:	e000ed04 	.word	0xe000ed04

08017a24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017a24:	b480      	push	{r7}
 8017a26:	b083      	sub	sp, #12
 8017a28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017a2a:	4b12      	ldr	r3, [pc, #72]	; (8017a74 <vPortExitCritical+0x50>)
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d10a      	bne.n	8017a48 <vPortExitCritical+0x24>
	__asm volatile
 8017a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a36:	f383 8811 	msr	BASEPRI, r3
 8017a3a:	f3bf 8f6f 	isb	sy
 8017a3e:	f3bf 8f4f 	dsb	sy
 8017a42:	607b      	str	r3, [r7, #4]
}
 8017a44:	bf00      	nop
 8017a46:	e7fe      	b.n	8017a46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017a48:	4b0a      	ldr	r3, [pc, #40]	; (8017a74 <vPortExitCritical+0x50>)
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	3b01      	subs	r3, #1
 8017a4e:	4a09      	ldr	r2, [pc, #36]	; (8017a74 <vPortExitCritical+0x50>)
 8017a50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017a52:	4b08      	ldr	r3, [pc, #32]	; (8017a74 <vPortExitCritical+0x50>)
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d105      	bne.n	8017a66 <vPortExitCritical+0x42>
 8017a5a:	2300      	movs	r3, #0
 8017a5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017a5e:	683b      	ldr	r3, [r7, #0]
 8017a60:	f383 8811 	msr	BASEPRI, r3
}
 8017a64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017a66:	bf00      	nop
 8017a68:	370c      	adds	r7, #12
 8017a6a:	46bd      	mov	sp, r7
 8017a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a70:	4770      	bx	lr
 8017a72:	bf00      	nop
 8017a74:	200000b8 	.word	0x200000b8
	...

08017a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017a80:	f3ef 8009 	mrs	r0, PSP
 8017a84:	f3bf 8f6f 	isb	sy
 8017a88:	4b15      	ldr	r3, [pc, #84]	; (8017ae0 <pxCurrentTCBConst>)
 8017a8a:	681a      	ldr	r2, [r3, #0]
 8017a8c:	f01e 0f10 	tst.w	lr, #16
 8017a90:	bf08      	it	eq
 8017a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a9a:	6010      	str	r0, [r2, #0]
 8017a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8017aa4:	f380 8811 	msr	BASEPRI, r0
 8017aa8:	f3bf 8f4f 	dsb	sy
 8017aac:	f3bf 8f6f 	isb	sy
 8017ab0:	f7ff fb8c 	bl	80171cc <vTaskSwitchContext>
 8017ab4:	f04f 0000 	mov.w	r0, #0
 8017ab8:	f380 8811 	msr	BASEPRI, r0
 8017abc:	bc09      	pop	{r0, r3}
 8017abe:	6819      	ldr	r1, [r3, #0]
 8017ac0:	6808      	ldr	r0, [r1, #0]
 8017ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ac6:	f01e 0f10 	tst.w	lr, #16
 8017aca:	bf08      	it	eq
 8017acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017ad0:	f380 8809 	msr	PSP, r0
 8017ad4:	f3bf 8f6f 	isb	sy
 8017ad8:	4770      	bx	lr
 8017ada:	bf00      	nop
 8017adc:	f3af 8000 	nop.w

08017ae0 <pxCurrentTCBConst>:
 8017ae0:	20000a88 	.word	0x20000a88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017ae4:	bf00      	nop
 8017ae6:	bf00      	nop

08017ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017ae8:	b580      	push	{r7, lr}
 8017aea:	b082      	sub	sp, #8
 8017aec:	af00      	add	r7, sp, #0
	__asm volatile
 8017aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017af2:	f383 8811 	msr	BASEPRI, r3
 8017af6:	f3bf 8f6f 	isb	sy
 8017afa:	f3bf 8f4f 	dsb	sy
 8017afe:	607b      	str	r3, [r7, #4]
}
 8017b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017b02:	f7ff faab 	bl	801705c <xTaskIncrementTick>
 8017b06:	4603      	mov	r3, r0
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d003      	beq.n	8017b14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017b0c:	4b06      	ldr	r3, [pc, #24]	; (8017b28 <SysTick_Handler+0x40>)
 8017b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b12:	601a      	str	r2, [r3, #0]
 8017b14:	2300      	movs	r3, #0
 8017b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017b18:	683b      	ldr	r3, [r7, #0]
 8017b1a:	f383 8811 	msr	BASEPRI, r3
}
 8017b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017b20:	bf00      	nop
 8017b22:	3708      	adds	r7, #8
 8017b24:	46bd      	mov	sp, r7
 8017b26:	bd80      	pop	{r7, pc}
 8017b28:	e000ed04 	.word	0xe000ed04

08017b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8017b2c:	b480      	push	{r7}
 8017b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017b30:	4b0b      	ldr	r3, [pc, #44]	; (8017b60 <vPortSetupTimerInterrupt+0x34>)
 8017b32:	2200      	movs	r2, #0
 8017b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017b36:	4b0b      	ldr	r3, [pc, #44]	; (8017b64 <vPortSetupTimerInterrupt+0x38>)
 8017b38:	2200      	movs	r2, #0
 8017b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017b3c:	4b0a      	ldr	r3, [pc, #40]	; (8017b68 <vPortSetupTimerInterrupt+0x3c>)
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	4a0a      	ldr	r2, [pc, #40]	; (8017b6c <vPortSetupTimerInterrupt+0x40>)
 8017b42:	fba2 2303 	umull	r2, r3, r2, r3
 8017b46:	099b      	lsrs	r3, r3, #6
 8017b48:	4a09      	ldr	r2, [pc, #36]	; (8017b70 <vPortSetupTimerInterrupt+0x44>)
 8017b4a:	3b01      	subs	r3, #1
 8017b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017b4e:	4b04      	ldr	r3, [pc, #16]	; (8017b60 <vPortSetupTimerInterrupt+0x34>)
 8017b50:	2207      	movs	r2, #7
 8017b52:	601a      	str	r2, [r3, #0]
}
 8017b54:	bf00      	nop
 8017b56:	46bd      	mov	sp, r7
 8017b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b5c:	4770      	bx	lr
 8017b5e:	bf00      	nop
 8017b60:	e000e010 	.word	0xe000e010
 8017b64:	e000e018 	.word	0xe000e018
 8017b68:	20000004 	.word	0x20000004
 8017b6c:	10624dd3 	.word	0x10624dd3
 8017b70:	e000e014 	.word	0xe000e014

08017b74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017b74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8017b84 <vPortEnableVFP+0x10>
 8017b78:	6801      	ldr	r1, [r0, #0]
 8017b7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8017b7e:	6001      	str	r1, [r0, #0]
 8017b80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017b82:	bf00      	nop
 8017b84:	e000ed88 	.word	0xe000ed88

08017b88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017b88:	b480      	push	{r7}
 8017b8a:	b085      	sub	sp, #20
 8017b8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017b8e:	f3ef 8305 	mrs	r3, IPSR
 8017b92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	2b0f      	cmp	r3, #15
 8017b98:	d914      	bls.n	8017bc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017b9a:	4a17      	ldr	r2, [pc, #92]	; (8017bf8 <vPortValidateInterruptPriority+0x70>)
 8017b9c:	68fb      	ldr	r3, [r7, #12]
 8017b9e:	4413      	add	r3, r2
 8017ba0:	781b      	ldrb	r3, [r3, #0]
 8017ba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017ba4:	4b15      	ldr	r3, [pc, #84]	; (8017bfc <vPortValidateInterruptPriority+0x74>)
 8017ba6:	781b      	ldrb	r3, [r3, #0]
 8017ba8:	7afa      	ldrb	r2, [r7, #11]
 8017baa:	429a      	cmp	r2, r3
 8017bac:	d20a      	bcs.n	8017bc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8017bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bb2:	f383 8811 	msr	BASEPRI, r3
 8017bb6:	f3bf 8f6f 	isb	sy
 8017bba:	f3bf 8f4f 	dsb	sy
 8017bbe:	607b      	str	r3, [r7, #4]
}
 8017bc0:	bf00      	nop
 8017bc2:	e7fe      	b.n	8017bc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017bc4:	4b0e      	ldr	r3, [pc, #56]	; (8017c00 <vPortValidateInterruptPriority+0x78>)
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8017bcc:	4b0d      	ldr	r3, [pc, #52]	; (8017c04 <vPortValidateInterruptPriority+0x7c>)
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	429a      	cmp	r2, r3
 8017bd2:	d90a      	bls.n	8017bea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8017bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bd8:	f383 8811 	msr	BASEPRI, r3
 8017bdc:	f3bf 8f6f 	isb	sy
 8017be0:	f3bf 8f4f 	dsb	sy
 8017be4:	603b      	str	r3, [r7, #0]
}
 8017be6:	bf00      	nop
 8017be8:	e7fe      	b.n	8017be8 <vPortValidateInterruptPriority+0x60>
	}
 8017bea:	bf00      	nop
 8017bec:	3714      	adds	r7, #20
 8017bee:	46bd      	mov	sp, r7
 8017bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf4:	4770      	bx	lr
 8017bf6:	bf00      	nop
 8017bf8:	e000e3f0 	.word	0xe000e3f0
 8017bfc:	20000bb4 	.word	0x20000bb4
 8017c00:	e000ed0c 	.word	0xe000ed0c
 8017c04:	20000bb8 	.word	0x20000bb8

08017c08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017c08:	b580      	push	{r7, lr}
 8017c0a:	b08a      	sub	sp, #40	; 0x28
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017c10:	2300      	movs	r3, #0
 8017c12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017c14:	f7ff f968 	bl	8016ee8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017c18:	4b5b      	ldr	r3, [pc, #364]	; (8017d88 <pvPortMalloc+0x180>)
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d101      	bne.n	8017c24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017c20:	f000 f920 	bl	8017e64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017c24:	4b59      	ldr	r3, [pc, #356]	; (8017d8c <pvPortMalloc+0x184>)
 8017c26:	681a      	ldr	r2, [r3, #0]
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	4013      	ands	r3, r2
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	f040 8093 	bne.w	8017d58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d01d      	beq.n	8017c74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8017c38:	2208      	movs	r2, #8
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	4413      	add	r3, r2
 8017c3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	f003 0307 	and.w	r3, r3, #7
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d014      	beq.n	8017c74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	f023 0307 	bic.w	r3, r3, #7
 8017c50:	3308      	adds	r3, #8
 8017c52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	f003 0307 	and.w	r3, r3, #7
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d00a      	beq.n	8017c74 <pvPortMalloc+0x6c>
	__asm volatile
 8017c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c62:	f383 8811 	msr	BASEPRI, r3
 8017c66:	f3bf 8f6f 	isb	sy
 8017c6a:	f3bf 8f4f 	dsb	sy
 8017c6e:	617b      	str	r3, [r7, #20]
}
 8017c70:	bf00      	nop
 8017c72:	e7fe      	b.n	8017c72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d06e      	beq.n	8017d58 <pvPortMalloc+0x150>
 8017c7a:	4b45      	ldr	r3, [pc, #276]	; (8017d90 <pvPortMalloc+0x188>)
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	687a      	ldr	r2, [r7, #4]
 8017c80:	429a      	cmp	r2, r3
 8017c82:	d869      	bhi.n	8017d58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8017c84:	4b43      	ldr	r3, [pc, #268]	; (8017d94 <pvPortMalloc+0x18c>)
 8017c86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8017c88:	4b42      	ldr	r3, [pc, #264]	; (8017d94 <pvPortMalloc+0x18c>)
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017c8e:	e004      	b.n	8017c9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8017c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8017c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c9c:	685b      	ldr	r3, [r3, #4]
 8017c9e:	687a      	ldr	r2, [r7, #4]
 8017ca0:	429a      	cmp	r2, r3
 8017ca2:	d903      	bls.n	8017cac <pvPortMalloc+0xa4>
 8017ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d1f1      	bne.n	8017c90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017cac:	4b36      	ldr	r3, [pc, #216]	; (8017d88 <pvPortMalloc+0x180>)
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017cb2:	429a      	cmp	r2, r3
 8017cb4:	d050      	beq.n	8017d58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017cb6:	6a3b      	ldr	r3, [r7, #32]
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	2208      	movs	r2, #8
 8017cbc:	4413      	add	r3, r2
 8017cbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cc2:	681a      	ldr	r2, [r3, #0]
 8017cc4:	6a3b      	ldr	r3, [r7, #32]
 8017cc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cca:	685a      	ldr	r2, [r3, #4]
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	1ad2      	subs	r2, r2, r3
 8017cd0:	2308      	movs	r3, #8
 8017cd2:	005b      	lsls	r3, r3, #1
 8017cd4:	429a      	cmp	r2, r3
 8017cd6:	d91f      	bls.n	8017d18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	4413      	add	r3, r2
 8017cde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017ce0:	69bb      	ldr	r3, [r7, #24]
 8017ce2:	f003 0307 	and.w	r3, r3, #7
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d00a      	beq.n	8017d00 <pvPortMalloc+0xf8>
	__asm volatile
 8017cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cee:	f383 8811 	msr	BASEPRI, r3
 8017cf2:	f3bf 8f6f 	isb	sy
 8017cf6:	f3bf 8f4f 	dsb	sy
 8017cfa:	613b      	str	r3, [r7, #16]
}
 8017cfc:	bf00      	nop
 8017cfe:	e7fe      	b.n	8017cfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d02:	685a      	ldr	r2, [r3, #4]
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	1ad2      	subs	r2, r2, r3
 8017d08:	69bb      	ldr	r3, [r7, #24]
 8017d0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d0e:	687a      	ldr	r2, [r7, #4]
 8017d10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017d12:	69b8      	ldr	r0, [r7, #24]
 8017d14:	f000 f908 	bl	8017f28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017d18:	4b1d      	ldr	r3, [pc, #116]	; (8017d90 <pvPortMalloc+0x188>)
 8017d1a:	681a      	ldr	r2, [r3, #0]
 8017d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d1e:	685b      	ldr	r3, [r3, #4]
 8017d20:	1ad3      	subs	r3, r2, r3
 8017d22:	4a1b      	ldr	r2, [pc, #108]	; (8017d90 <pvPortMalloc+0x188>)
 8017d24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017d26:	4b1a      	ldr	r3, [pc, #104]	; (8017d90 <pvPortMalloc+0x188>)
 8017d28:	681a      	ldr	r2, [r3, #0]
 8017d2a:	4b1b      	ldr	r3, [pc, #108]	; (8017d98 <pvPortMalloc+0x190>)
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	429a      	cmp	r2, r3
 8017d30:	d203      	bcs.n	8017d3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017d32:	4b17      	ldr	r3, [pc, #92]	; (8017d90 <pvPortMalloc+0x188>)
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	4a18      	ldr	r2, [pc, #96]	; (8017d98 <pvPortMalloc+0x190>)
 8017d38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d3c:	685a      	ldr	r2, [r3, #4]
 8017d3e:	4b13      	ldr	r3, [pc, #76]	; (8017d8c <pvPortMalloc+0x184>)
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	431a      	orrs	r2, r3
 8017d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d4a:	2200      	movs	r2, #0
 8017d4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8017d4e:	4b13      	ldr	r3, [pc, #76]	; (8017d9c <pvPortMalloc+0x194>)
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	3301      	adds	r3, #1
 8017d54:	4a11      	ldr	r2, [pc, #68]	; (8017d9c <pvPortMalloc+0x194>)
 8017d56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017d58:	f7ff f8d4 	bl	8016f04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017d5c:	69fb      	ldr	r3, [r7, #28]
 8017d5e:	f003 0307 	and.w	r3, r3, #7
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d00a      	beq.n	8017d7c <pvPortMalloc+0x174>
	__asm volatile
 8017d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d6a:	f383 8811 	msr	BASEPRI, r3
 8017d6e:	f3bf 8f6f 	isb	sy
 8017d72:	f3bf 8f4f 	dsb	sy
 8017d76:	60fb      	str	r3, [r7, #12]
}
 8017d78:	bf00      	nop
 8017d7a:	e7fe      	b.n	8017d7a <pvPortMalloc+0x172>
	return pvReturn;
 8017d7c:	69fb      	ldr	r3, [r7, #28]
}
 8017d7e:	4618      	mov	r0, r3
 8017d80:	3728      	adds	r7, #40	; 0x28
 8017d82:	46bd      	mov	sp, r7
 8017d84:	bd80      	pop	{r7, pc}
 8017d86:	bf00      	nop
 8017d88:	2000d3c4 	.word	0x2000d3c4
 8017d8c:	2000d3d8 	.word	0x2000d3d8
 8017d90:	2000d3c8 	.word	0x2000d3c8
 8017d94:	2000d3bc 	.word	0x2000d3bc
 8017d98:	2000d3cc 	.word	0x2000d3cc
 8017d9c:	2000d3d0 	.word	0x2000d3d0

08017da0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017da0:	b580      	push	{r7, lr}
 8017da2:	b086      	sub	sp, #24
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d04d      	beq.n	8017e4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017db2:	2308      	movs	r3, #8
 8017db4:	425b      	negs	r3, r3
 8017db6:	697a      	ldr	r2, [r7, #20]
 8017db8:	4413      	add	r3, r2
 8017dba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017dbc:	697b      	ldr	r3, [r7, #20]
 8017dbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017dc0:	693b      	ldr	r3, [r7, #16]
 8017dc2:	685a      	ldr	r2, [r3, #4]
 8017dc4:	4b24      	ldr	r3, [pc, #144]	; (8017e58 <vPortFree+0xb8>)
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	4013      	ands	r3, r2
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d10a      	bne.n	8017de4 <vPortFree+0x44>
	__asm volatile
 8017dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dd2:	f383 8811 	msr	BASEPRI, r3
 8017dd6:	f3bf 8f6f 	isb	sy
 8017dda:	f3bf 8f4f 	dsb	sy
 8017dde:	60fb      	str	r3, [r7, #12]
}
 8017de0:	bf00      	nop
 8017de2:	e7fe      	b.n	8017de2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017de4:	693b      	ldr	r3, [r7, #16]
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d00a      	beq.n	8017e02 <vPortFree+0x62>
	__asm volatile
 8017dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017df0:	f383 8811 	msr	BASEPRI, r3
 8017df4:	f3bf 8f6f 	isb	sy
 8017df8:	f3bf 8f4f 	dsb	sy
 8017dfc:	60bb      	str	r3, [r7, #8]
}
 8017dfe:	bf00      	nop
 8017e00:	e7fe      	b.n	8017e00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017e02:	693b      	ldr	r3, [r7, #16]
 8017e04:	685a      	ldr	r2, [r3, #4]
 8017e06:	4b14      	ldr	r3, [pc, #80]	; (8017e58 <vPortFree+0xb8>)
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	4013      	ands	r3, r2
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d01e      	beq.n	8017e4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017e10:	693b      	ldr	r3, [r7, #16]
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d11a      	bne.n	8017e4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017e18:	693b      	ldr	r3, [r7, #16]
 8017e1a:	685a      	ldr	r2, [r3, #4]
 8017e1c:	4b0e      	ldr	r3, [pc, #56]	; (8017e58 <vPortFree+0xb8>)
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	43db      	mvns	r3, r3
 8017e22:	401a      	ands	r2, r3
 8017e24:	693b      	ldr	r3, [r7, #16]
 8017e26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017e28:	f7ff f85e 	bl	8016ee8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017e2c:	693b      	ldr	r3, [r7, #16]
 8017e2e:	685a      	ldr	r2, [r3, #4]
 8017e30:	4b0a      	ldr	r3, [pc, #40]	; (8017e5c <vPortFree+0xbc>)
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	4413      	add	r3, r2
 8017e36:	4a09      	ldr	r2, [pc, #36]	; (8017e5c <vPortFree+0xbc>)
 8017e38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017e3a:	6938      	ldr	r0, [r7, #16]
 8017e3c:	f000 f874 	bl	8017f28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8017e40:	4b07      	ldr	r3, [pc, #28]	; (8017e60 <vPortFree+0xc0>)
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	3301      	adds	r3, #1
 8017e46:	4a06      	ldr	r2, [pc, #24]	; (8017e60 <vPortFree+0xc0>)
 8017e48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8017e4a:	f7ff f85b 	bl	8016f04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017e4e:	bf00      	nop
 8017e50:	3718      	adds	r7, #24
 8017e52:	46bd      	mov	sp, r7
 8017e54:	bd80      	pop	{r7, pc}
 8017e56:	bf00      	nop
 8017e58:	2000d3d8 	.word	0x2000d3d8
 8017e5c:	2000d3c8 	.word	0x2000d3c8
 8017e60:	2000d3d4 	.word	0x2000d3d4

08017e64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017e64:	b480      	push	{r7}
 8017e66:	b085      	sub	sp, #20
 8017e68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017e6a:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8017e6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017e70:	4b27      	ldr	r3, [pc, #156]	; (8017f10 <prvHeapInit+0xac>)
 8017e72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	f003 0307 	and.w	r3, r3, #7
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d00c      	beq.n	8017e98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	3307      	adds	r3, #7
 8017e82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	f023 0307 	bic.w	r3, r3, #7
 8017e8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017e8c:	68ba      	ldr	r2, [r7, #8]
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	1ad3      	subs	r3, r2, r3
 8017e92:	4a1f      	ldr	r2, [pc, #124]	; (8017f10 <prvHeapInit+0xac>)
 8017e94:	4413      	add	r3, r2
 8017e96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017e98:	68fb      	ldr	r3, [r7, #12]
 8017e9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017e9c:	4a1d      	ldr	r2, [pc, #116]	; (8017f14 <prvHeapInit+0xb0>)
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017ea2:	4b1c      	ldr	r3, [pc, #112]	; (8017f14 <prvHeapInit+0xb0>)
 8017ea4:	2200      	movs	r2, #0
 8017ea6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	68ba      	ldr	r2, [r7, #8]
 8017eac:	4413      	add	r3, r2
 8017eae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017eb0:	2208      	movs	r2, #8
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	1a9b      	subs	r3, r3, r2
 8017eb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	f023 0307 	bic.w	r3, r3, #7
 8017ebe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	4a15      	ldr	r2, [pc, #84]	; (8017f18 <prvHeapInit+0xb4>)
 8017ec4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017ec6:	4b14      	ldr	r3, [pc, #80]	; (8017f18 <prvHeapInit+0xb4>)
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	2200      	movs	r2, #0
 8017ecc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017ece:	4b12      	ldr	r3, [pc, #72]	; (8017f18 <prvHeapInit+0xb4>)
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	2200      	movs	r2, #0
 8017ed4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017eda:	683b      	ldr	r3, [r7, #0]
 8017edc:	68fa      	ldr	r2, [r7, #12]
 8017ede:	1ad2      	subs	r2, r2, r3
 8017ee0:	683b      	ldr	r3, [r7, #0]
 8017ee2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017ee4:	4b0c      	ldr	r3, [pc, #48]	; (8017f18 <prvHeapInit+0xb4>)
 8017ee6:	681a      	ldr	r2, [r3, #0]
 8017ee8:	683b      	ldr	r3, [r7, #0]
 8017eea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017eec:	683b      	ldr	r3, [r7, #0]
 8017eee:	685b      	ldr	r3, [r3, #4]
 8017ef0:	4a0a      	ldr	r2, [pc, #40]	; (8017f1c <prvHeapInit+0xb8>)
 8017ef2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017ef4:	683b      	ldr	r3, [r7, #0]
 8017ef6:	685b      	ldr	r3, [r3, #4]
 8017ef8:	4a09      	ldr	r2, [pc, #36]	; (8017f20 <prvHeapInit+0xbc>)
 8017efa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017efc:	4b09      	ldr	r3, [pc, #36]	; (8017f24 <prvHeapInit+0xc0>)
 8017efe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017f02:	601a      	str	r2, [r3, #0]
}
 8017f04:	bf00      	nop
 8017f06:	3714      	adds	r7, #20
 8017f08:	46bd      	mov	sp, r7
 8017f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f0e:	4770      	bx	lr
 8017f10:	20000bbc 	.word	0x20000bbc
 8017f14:	2000d3bc 	.word	0x2000d3bc
 8017f18:	2000d3c4 	.word	0x2000d3c4
 8017f1c:	2000d3cc 	.word	0x2000d3cc
 8017f20:	2000d3c8 	.word	0x2000d3c8
 8017f24:	2000d3d8 	.word	0x2000d3d8

08017f28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017f28:	b480      	push	{r7}
 8017f2a:	b085      	sub	sp, #20
 8017f2c:	af00      	add	r7, sp, #0
 8017f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017f30:	4b28      	ldr	r3, [pc, #160]	; (8017fd4 <prvInsertBlockIntoFreeList+0xac>)
 8017f32:	60fb      	str	r3, [r7, #12]
 8017f34:	e002      	b.n	8017f3c <prvInsertBlockIntoFreeList+0x14>
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	60fb      	str	r3, [r7, #12]
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	687a      	ldr	r2, [r7, #4]
 8017f42:	429a      	cmp	r2, r3
 8017f44:	d8f7      	bhi.n	8017f36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017f4a:	68fb      	ldr	r3, [r7, #12]
 8017f4c:	685b      	ldr	r3, [r3, #4]
 8017f4e:	68ba      	ldr	r2, [r7, #8]
 8017f50:	4413      	add	r3, r2
 8017f52:	687a      	ldr	r2, [r7, #4]
 8017f54:	429a      	cmp	r2, r3
 8017f56:	d108      	bne.n	8017f6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	685a      	ldr	r2, [r3, #4]
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	685b      	ldr	r3, [r3, #4]
 8017f60:	441a      	add	r2, r3
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	685b      	ldr	r3, [r3, #4]
 8017f72:	68ba      	ldr	r2, [r7, #8]
 8017f74:	441a      	add	r2, r3
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	681b      	ldr	r3, [r3, #0]
 8017f7a:	429a      	cmp	r2, r3
 8017f7c:	d118      	bne.n	8017fb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	681a      	ldr	r2, [r3, #0]
 8017f82:	4b15      	ldr	r3, [pc, #84]	; (8017fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	429a      	cmp	r2, r3
 8017f88:	d00d      	beq.n	8017fa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	685a      	ldr	r2, [r3, #4]
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	685b      	ldr	r3, [r3, #4]
 8017f94:	441a      	add	r2, r3
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017f9a:	68fb      	ldr	r3, [r7, #12]
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	681a      	ldr	r2, [r3, #0]
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	601a      	str	r2, [r3, #0]
 8017fa4:	e008      	b.n	8017fb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017fa6:	4b0c      	ldr	r3, [pc, #48]	; (8017fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8017fa8:	681a      	ldr	r2, [r3, #0]
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	601a      	str	r2, [r3, #0]
 8017fae:	e003      	b.n	8017fb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017fb0:	68fb      	ldr	r3, [r7, #12]
 8017fb2:	681a      	ldr	r2, [r3, #0]
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017fb8:	68fa      	ldr	r2, [r7, #12]
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	429a      	cmp	r2, r3
 8017fbe:	d002      	beq.n	8017fc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017fc0:	68fb      	ldr	r3, [r7, #12]
 8017fc2:	687a      	ldr	r2, [r7, #4]
 8017fc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017fc6:	bf00      	nop
 8017fc8:	3714      	adds	r7, #20
 8017fca:	46bd      	mov	sp, r7
 8017fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fd0:	4770      	bx	lr
 8017fd2:	bf00      	nop
 8017fd4:	2000d3bc 	.word	0x2000d3bc
 8017fd8:	2000d3c4 	.word	0x2000d3c4

08017fdc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017fdc:	b580      	push	{r7, lr}
 8017fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017fe0:	2200      	movs	r2, #0
 8017fe2:	4912      	ldr	r1, [pc, #72]	; (801802c <MX_USB_DEVICE_Init+0x50>)
 8017fe4:	4812      	ldr	r0, [pc, #72]	; (8018030 <MX_USB_DEVICE_Init+0x54>)
 8017fe6:	f7fd f984 	bl	80152f2 <USBD_Init>
 8017fea:	4603      	mov	r3, r0
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d001      	beq.n	8017ff4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017ff0:	f7ea ffde 	bl	8002fb0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8017ff4:	490f      	ldr	r1, [pc, #60]	; (8018034 <MX_USB_DEVICE_Init+0x58>)
 8017ff6:	480e      	ldr	r0, [pc, #56]	; (8018030 <MX_USB_DEVICE_Init+0x54>)
 8017ff8:	f7fd f9ab 	bl	8015352 <USBD_RegisterClass>
 8017ffc:	4603      	mov	r3, r0
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d001      	beq.n	8018006 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018002:	f7ea ffd5 	bl	8002fb0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8018006:	490c      	ldr	r1, [pc, #48]	; (8018038 <MX_USB_DEVICE_Init+0x5c>)
 8018008:	4809      	ldr	r0, [pc, #36]	; (8018030 <MX_USB_DEVICE_Init+0x54>)
 801800a:	f7fb fc55 	bl	80138b8 <USBD_MSC_RegisterStorage>
 801800e:	4603      	mov	r3, r0
 8018010:	2b00      	cmp	r3, #0
 8018012:	d001      	beq.n	8018018 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018014:	f7ea ffcc 	bl	8002fb0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018018:	4805      	ldr	r0, [pc, #20]	; (8018030 <MX_USB_DEVICE_Init+0x54>)
 801801a:	f7fd f9d0 	bl	80153be <USBD_Start>
 801801e:	4603      	mov	r3, r0
 8018020:	2b00      	cmp	r3, #0
 8018022:	d001      	beq.n	8018028 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018024:	f7ea ffc4 	bl	8002fb0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018028:	bf00      	nop
 801802a:	bd80      	pop	{r7, pc}
 801802c:	200000bc 	.word	0x200000bc
 8018030:	2000d3dc 	.word	0x2000d3dc
 8018034:	20000010 	.word	0x20000010
 8018038:	2000010c 	.word	0x2000010c

0801803c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801803c:	b480      	push	{r7}
 801803e:	b083      	sub	sp, #12
 8018040:	af00      	add	r7, sp, #0
 8018042:	4603      	mov	r3, r0
 8018044:	6039      	str	r1, [r7, #0]
 8018046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018048:	683b      	ldr	r3, [r7, #0]
 801804a:	2212      	movs	r2, #18
 801804c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801804e:	4b03      	ldr	r3, [pc, #12]	; (801805c <USBD_FS_DeviceDescriptor+0x20>)
}
 8018050:	4618      	mov	r0, r3
 8018052:	370c      	adds	r7, #12
 8018054:	46bd      	mov	sp, r7
 8018056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801805a:	4770      	bx	lr
 801805c:	200000d8 	.word	0x200000d8

08018060 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018060:	b480      	push	{r7}
 8018062:	b083      	sub	sp, #12
 8018064:	af00      	add	r7, sp, #0
 8018066:	4603      	mov	r3, r0
 8018068:	6039      	str	r1, [r7, #0]
 801806a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801806c:	683b      	ldr	r3, [r7, #0]
 801806e:	2204      	movs	r2, #4
 8018070:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018072:	4b03      	ldr	r3, [pc, #12]	; (8018080 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018074:	4618      	mov	r0, r3
 8018076:	370c      	adds	r7, #12
 8018078:	46bd      	mov	sp, r7
 801807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801807e:	4770      	bx	lr
 8018080:	200000ec 	.word	0x200000ec

08018084 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018084:	b580      	push	{r7, lr}
 8018086:	b082      	sub	sp, #8
 8018088:	af00      	add	r7, sp, #0
 801808a:	4603      	mov	r3, r0
 801808c:	6039      	str	r1, [r7, #0]
 801808e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018090:	79fb      	ldrb	r3, [r7, #7]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d105      	bne.n	80180a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018096:	683a      	ldr	r2, [r7, #0]
 8018098:	4907      	ldr	r1, [pc, #28]	; (80180b8 <USBD_FS_ProductStrDescriptor+0x34>)
 801809a:	4808      	ldr	r0, [pc, #32]	; (80180bc <USBD_FS_ProductStrDescriptor+0x38>)
 801809c:	f7fe fb3c 	bl	8016718 <USBD_GetString>
 80180a0:	e004      	b.n	80180ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80180a2:	683a      	ldr	r2, [r7, #0]
 80180a4:	4904      	ldr	r1, [pc, #16]	; (80180b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80180a6:	4805      	ldr	r0, [pc, #20]	; (80180bc <USBD_FS_ProductStrDescriptor+0x38>)
 80180a8:	f7fe fb36 	bl	8016718 <USBD_GetString>
  }
  return USBD_StrDesc;
 80180ac:	4b02      	ldr	r3, [pc, #8]	; (80180b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80180ae:	4618      	mov	r0, r3
 80180b0:	3708      	adds	r7, #8
 80180b2:	46bd      	mov	sp, r7
 80180b4:	bd80      	pop	{r7, pc}
 80180b6:	bf00      	nop
 80180b8:	2000d6b8 	.word	0x2000d6b8
 80180bc:	0801a704 	.word	0x0801a704

080180c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	b082      	sub	sp, #8
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	4603      	mov	r3, r0
 80180c8:	6039      	str	r1, [r7, #0]
 80180ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80180cc:	683a      	ldr	r2, [r7, #0]
 80180ce:	4904      	ldr	r1, [pc, #16]	; (80180e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80180d0:	4804      	ldr	r0, [pc, #16]	; (80180e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80180d2:	f7fe fb21 	bl	8016718 <USBD_GetString>
  return USBD_StrDesc;
 80180d6:	4b02      	ldr	r3, [pc, #8]	; (80180e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80180d8:	4618      	mov	r0, r3
 80180da:	3708      	adds	r7, #8
 80180dc:	46bd      	mov	sp, r7
 80180de:	bd80      	pop	{r7, pc}
 80180e0:	2000d6b8 	.word	0x2000d6b8
 80180e4:	0801a718 	.word	0x0801a718

080180e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80180e8:	b580      	push	{r7, lr}
 80180ea:	b082      	sub	sp, #8
 80180ec:	af00      	add	r7, sp, #0
 80180ee:	4603      	mov	r3, r0
 80180f0:	6039      	str	r1, [r7, #0]
 80180f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80180f4:	683b      	ldr	r3, [r7, #0]
 80180f6:	221a      	movs	r2, #26
 80180f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80180fa:	f000 f843 	bl	8018184 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80180fe:	4b02      	ldr	r3, [pc, #8]	; (8018108 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018100:	4618      	mov	r0, r3
 8018102:	3708      	adds	r7, #8
 8018104:	46bd      	mov	sp, r7
 8018106:	bd80      	pop	{r7, pc}
 8018108:	200000f0 	.word	0x200000f0

0801810c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801810c:	b580      	push	{r7, lr}
 801810e:	b082      	sub	sp, #8
 8018110:	af00      	add	r7, sp, #0
 8018112:	4603      	mov	r3, r0
 8018114:	6039      	str	r1, [r7, #0]
 8018116:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018118:	79fb      	ldrb	r3, [r7, #7]
 801811a:	2b00      	cmp	r3, #0
 801811c:	d105      	bne.n	801812a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801811e:	683a      	ldr	r2, [r7, #0]
 8018120:	4907      	ldr	r1, [pc, #28]	; (8018140 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018122:	4808      	ldr	r0, [pc, #32]	; (8018144 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018124:	f7fe faf8 	bl	8016718 <USBD_GetString>
 8018128:	e004      	b.n	8018134 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801812a:	683a      	ldr	r2, [r7, #0]
 801812c:	4904      	ldr	r1, [pc, #16]	; (8018140 <USBD_FS_ConfigStrDescriptor+0x34>)
 801812e:	4805      	ldr	r0, [pc, #20]	; (8018144 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018130:	f7fe faf2 	bl	8016718 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018134:	4b02      	ldr	r3, [pc, #8]	; (8018140 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018136:	4618      	mov	r0, r3
 8018138:	3708      	adds	r7, #8
 801813a:	46bd      	mov	sp, r7
 801813c:	bd80      	pop	{r7, pc}
 801813e:	bf00      	nop
 8018140:	2000d6b8 	.word	0x2000d6b8
 8018144:	0801a72c 	.word	0x0801a72c

08018148 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018148:	b580      	push	{r7, lr}
 801814a:	b082      	sub	sp, #8
 801814c:	af00      	add	r7, sp, #0
 801814e:	4603      	mov	r3, r0
 8018150:	6039      	str	r1, [r7, #0]
 8018152:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018154:	79fb      	ldrb	r3, [r7, #7]
 8018156:	2b00      	cmp	r3, #0
 8018158:	d105      	bne.n	8018166 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801815a:	683a      	ldr	r2, [r7, #0]
 801815c:	4907      	ldr	r1, [pc, #28]	; (801817c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801815e:	4808      	ldr	r0, [pc, #32]	; (8018180 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018160:	f7fe fada 	bl	8016718 <USBD_GetString>
 8018164:	e004      	b.n	8018170 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018166:	683a      	ldr	r2, [r7, #0]
 8018168:	4904      	ldr	r1, [pc, #16]	; (801817c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801816a:	4805      	ldr	r0, [pc, #20]	; (8018180 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801816c:	f7fe fad4 	bl	8016718 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018170:	4b02      	ldr	r3, [pc, #8]	; (801817c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018172:	4618      	mov	r0, r3
 8018174:	3708      	adds	r7, #8
 8018176:	46bd      	mov	sp, r7
 8018178:	bd80      	pop	{r7, pc}
 801817a:	bf00      	nop
 801817c:	2000d6b8 	.word	0x2000d6b8
 8018180:	0801a738 	.word	0x0801a738

08018184 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018184:	b580      	push	{r7, lr}
 8018186:	b084      	sub	sp, #16
 8018188:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801818a:	4b0f      	ldr	r3, [pc, #60]	; (80181c8 <Get_SerialNum+0x44>)
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018190:	4b0e      	ldr	r3, [pc, #56]	; (80181cc <Get_SerialNum+0x48>)
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018196:	4b0e      	ldr	r3, [pc, #56]	; (80181d0 <Get_SerialNum+0x4c>)
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801819c:	68fa      	ldr	r2, [r7, #12]
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	4413      	add	r3, r2
 80181a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d009      	beq.n	80181be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80181aa:	2208      	movs	r2, #8
 80181ac:	4909      	ldr	r1, [pc, #36]	; (80181d4 <Get_SerialNum+0x50>)
 80181ae:	68f8      	ldr	r0, [r7, #12]
 80181b0:	f000 f814 	bl	80181dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80181b4:	2204      	movs	r2, #4
 80181b6:	4908      	ldr	r1, [pc, #32]	; (80181d8 <Get_SerialNum+0x54>)
 80181b8:	68b8      	ldr	r0, [r7, #8]
 80181ba:	f000 f80f 	bl	80181dc <IntToUnicode>
  }
}
 80181be:	bf00      	nop
 80181c0:	3710      	adds	r7, #16
 80181c2:	46bd      	mov	sp, r7
 80181c4:	bd80      	pop	{r7, pc}
 80181c6:	bf00      	nop
 80181c8:	1fff7a10 	.word	0x1fff7a10
 80181cc:	1fff7a14 	.word	0x1fff7a14
 80181d0:	1fff7a18 	.word	0x1fff7a18
 80181d4:	200000f2 	.word	0x200000f2
 80181d8:	20000102 	.word	0x20000102

080181dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80181dc:	b480      	push	{r7}
 80181de:	b087      	sub	sp, #28
 80181e0:	af00      	add	r7, sp, #0
 80181e2:	60f8      	str	r0, [r7, #12]
 80181e4:	60b9      	str	r1, [r7, #8]
 80181e6:	4613      	mov	r3, r2
 80181e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80181ea:	2300      	movs	r3, #0
 80181ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80181ee:	2300      	movs	r3, #0
 80181f0:	75fb      	strb	r3, [r7, #23]
 80181f2:	e027      	b.n	8018244 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80181f4:	68fb      	ldr	r3, [r7, #12]
 80181f6:	0f1b      	lsrs	r3, r3, #28
 80181f8:	2b09      	cmp	r3, #9
 80181fa:	d80b      	bhi.n	8018214 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	0f1b      	lsrs	r3, r3, #28
 8018200:	b2da      	uxtb	r2, r3
 8018202:	7dfb      	ldrb	r3, [r7, #23]
 8018204:	005b      	lsls	r3, r3, #1
 8018206:	4619      	mov	r1, r3
 8018208:	68bb      	ldr	r3, [r7, #8]
 801820a:	440b      	add	r3, r1
 801820c:	3230      	adds	r2, #48	; 0x30
 801820e:	b2d2      	uxtb	r2, r2
 8018210:	701a      	strb	r2, [r3, #0]
 8018212:	e00a      	b.n	801822a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018214:	68fb      	ldr	r3, [r7, #12]
 8018216:	0f1b      	lsrs	r3, r3, #28
 8018218:	b2da      	uxtb	r2, r3
 801821a:	7dfb      	ldrb	r3, [r7, #23]
 801821c:	005b      	lsls	r3, r3, #1
 801821e:	4619      	mov	r1, r3
 8018220:	68bb      	ldr	r3, [r7, #8]
 8018222:	440b      	add	r3, r1
 8018224:	3237      	adds	r2, #55	; 0x37
 8018226:	b2d2      	uxtb	r2, r2
 8018228:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	011b      	lsls	r3, r3, #4
 801822e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018230:	7dfb      	ldrb	r3, [r7, #23]
 8018232:	005b      	lsls	r3, r3, #1
 8018234:	3301      	adds	r3, #1
 8018236:	68ba      	ldr	r2, [r7, #8]
 8018238:	4413      	add	r3, r2
 801823a:	2200      	movs	r2, #0
 801823c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801823e:	7dfb      	ldrb	r3, [r7, #23]
 8018240:	3301      	adds	r3, #1
 8018242:	75fb      	strb	r3, [r7, #23]
 8018244:	7dfa      	ldrb	r2, [r7, #23]
 8018246:	79fb      	ldrb	r3, [r7, #7]
 8018248:	429a      	cmp	r2, r3
 801824a:	d3d3      	bcc.n	80181f4 <IntToUnicode+0x18>
  }
}
 801824c:	bf00      	nop
 801824e:	bf00      	nop
 8018250:	371c      	adds	r7, #28
 8018252:	46bd      	mov	sp, r7
 8018254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018258:	4770      	bx	lr

0801825a <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801825a:	b480      	push	{r7}
 801825c:	b083      	sub	sp, #12
 801825e:	af00      	add	r7, sp, #0
 8018260:	4603      	mov	r3, r0
 8018262:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 8018264:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8018266:	4618      	mov	r0, r3
 8018268:	370c      	adds	r7, #12
 801826a:	46bd      	mov	sp, r7
 801826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018270:	4770      	bx	lr
	...

08018274 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8018274:	b580      	push	{r7, lr}
 8018276:	b08e      	sub	sp, #56	; 0x38
 8018278:	af00      	add	r7, sp, #0
 801827a:	4603      	mov	r3, r0
 801827c:	60b9      	str	r1, [r7, #8]
 801827e:	607a      	str	r2, [r7, #4]
 8018280:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  HAL_SD_CardInfoTypeDef info;
  int8_t ret = -1;
 8018282:	23ff      	movs	r3, #255	; 0xff
 8018284:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  HAL_SD_GetCardInfo(&hsd, &info);
 8018288:	f107 0314 	add.w	r3, r7, #20
 801828c:	4619      	mov	r1, r3
 801828e:	480a      	ldr	r0, [pc, #40]	; (80182b8 <STORAGE_GetCapacity_FS+0x44>)
 8018290:	f7f5 fb14 	bl	800d8bc <HAL_SD_GetCardInfo>

  *block_num =  info.LogBlockNbr  - 1;
 8018294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018296:	1e5a      	subs	r2, r3, #1
 8018298:	68bb      	ldr	r3, [r7, #8]
 801829a:	601a      	str	r2, [r3, #0]
  *block_size = info.LogBlockSize;
 801829c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801829e:	b29a      	uxth	r2, r3
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	801a      	strh	r2, [r3, #0]
  ret = 0;
 80182a4:	2300      	movs	r3, #0
 80182a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  return ret;
 80182aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 80182ae:	4618      	mov	r0, r3
 80182b0:	3738      	adds	r7, #56	; 0x38
 80182b2:	46bd      	mov	sp, r7
 80182b4:	bd80      	pop	{r7, pc}
 80182b6:	bf00      	nop
 80182b8:	200004b4 	.word	0x200004b4

080182bc <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80182bc:	b480      	push	{r7}
 80182be:	b083      	sub	sp, #12
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	4603      	mov	r3, r0
 80182c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 80182c6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80182c8:	4618      	mov	r0, r3
 80182ca:	370c      	adds	r7, #12
 80182cc:	46bd      	mov	sp, r7
 80182ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182d2:	4770      	bx	lr

080182d4 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80182d4:	b480      	push	{r7}
 80182d6:	b083      	sub	sp, #12
 80182d8:	af00      	add	r7, sp, #0
 80182da:	4603      	mov	r3, r0
 80182dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 80182de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80182e0:	4618      	mov	r0, r3
 80182e2:	370c      	adds	r7, #12
 80182e4:	46bd      	mov	sp, r7
 80182e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ea:	4770      	bx	lr

080182ec <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b088      	sub	sp, #32
 80182f0:	af02      	add	r7, sp, #8
 80182f2:	60b9      	str	r1, [r7, #8]
 80182f4:	607a      	str	r2, [r7, #4]
 80182f6:	461a      	mov	r2, r3
 80182f8:	4603      	mov	r3, r0
 80182fa:	73fb      	strb	r3, [r7, #15]
 80182fc:	4613      	mov	r3, r2
 80182fe:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

   int8_t ret = -1;
 8018300:	23ff      	movs	r3, #255	; 0xff
 8018302:	75fb      	strb	r3, [r7, #23]

  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018304:	89bb      	ldrh	r3, [r7, #12]
 8018306:	f04f 32ff 	mov.w	r2, #4294967295
 801830a:	9200      	str	r2, [sp, #0]
 801830c:	687a      	ldr	r2, [r7, #4]
 801830e:	68b9      	ldr	r1, [r7, #8]
 8018310:	4808      	ldr	r0, [pc, #32]	; (8018334 <STORAGE_Read_FS+0x48>)
 8018312:	f7f4 fdcb 	bl	800ceac <HAL_SD_ReadBlocks>

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 8018316:	bf00      	nop
 8018318:	4806      	ldr	r0, [pc, #24]	; (8018334 <STORAGE_Read_FS+0x48>)
 801831a:	f7f5 fb95 	bl	800da48 <HAL_SD_GetCardState>
 801831e:	4603      	mov	r3, r0
 8018320:	2b04      	cmp	r3, #4
 8018322:	d1f9      	bne.n	8018318 <STORAGE_Read_FS+0x2c>
  ret = 0;
 8018324:	2300      	movs	r3, #0
 8018326:	75fb      	strb	r3, [r7, #23]
  return ret;
 8018328:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801832c:	4618      	mov	r0, r3
 801832e:	3718      	adds	r7, #24
 8018330:	46bd      	mov	sp, r7
 8018332:	bd80      	pop	{r7, pc}
 8018334:	200004b4 	.word	0x200004b4

08018338 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018338:	b580      	push	{r7, lr}
 801833a:	b088      	sub	sp, #32
 801833c:	af02      	add	r7, sp, #8
 801833e:	60b9      	str	r1, [r7, #8]
 8018340:	607a      	str	r2, [r7, #4]
 8018342:	461a      	mov	r2, r3
 8018344:	4603      	mov	r3, r0
 8018346:	73fb      	strb	r3, [r7, #15]
 8018348:	4613      	mov	r3, r2
 801834a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  int8_t ret = -1;
 801834c:	23ff      	movs	r3, #255	; 0xff
 801834e:	75fb      	strb	r3, [r7, #23]

   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018350:	89bb      	ldrh	r3, [r7, #12]
 8018352:	f04f 32ff 	mov.w	r2, #4294967295
 8018356:	9200      	str	r2, [sp, #0]
 8018358:	687a      	ldr	r2, [r7, #4]
 801835a:	68b9      	ldr	r1, [r7, #8]
 801835c:	4808      	ldr	r0, [pc, #32]	; (8018380 <STORAGE_Write_FS+0x48>)
 801835e:	f7f4 ff83 	bl	800d268 <HAL_SD_WriteBlocks>


  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 8018362:	bf00      	nop
 8018364:	4806      	ldr	r0, [pc, #24]	; (8018380 <STORAGE_Write_FS+0x48>)
 8018366:	f7f5 fb6f 	bl	800da48 <HAL_SD_GetCardState>
 801836a:	4603      	mov	r3, r0
 801836c:	2b04      	cmp	r3, #4
 801836e:	d1f9      	bne.n	8018364 <STORAGE_Write_FS+0x2c>
  ret = 0;
 8018370:	2300      	movs	r3, #0
 8018372:	75fb      	strb	r3, [r7, #23]
  return ret;
 8018374:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8018378:	4618      	mov	r0, r3
 801837a:	3718      	adds	r7, #24
 801837c:	46bd      	mov	sp, r7
 801837e:	bd80      	pop	{r7, pc}
 8018380:	200004b4 	.word	0x200004b4

08018384 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8018384:	b480      	push	{r7}
 8018386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8018388:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801838a:	4618      	mov	r0, r3
 801838c:	46bd      	mov	sp, r7
 801838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018392:	4770      	bx	lr

08018394 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018394:	b580      	push	{r7, lr}
 8018396:	b08a      	sub	sp, #40	; 0x28
 8018398:	af00      	add	r7, sp, #0
 801839a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801839c:	f107 0314 	add.w	r3, r7, #20
 80183a0:	2200      	movs	r2, #0
 80183a2:	601a      	str	r2, [r3, #0]
 80183a4:	605a      	str	r2, [r3, #4]
 80183a6:	609a      	str	r2, [r3, #8]
 80183a8:	60da      	str	r2, [r3, #12]
 80183aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80183b4:	d13a      	bne.n	801842c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80183b6:	2300      	movs	r3, #0
 80183b8:	613b      	str	r3, [r7, #16]
 80183ba:	4b1e      	ldr	r3, [pc, #120]	; (8018434 <HAL_PCD_MspInit+0xa0>)
 80183bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80183be:	4a1d      	ldr	r2, [pc, #116]	; (8018434 <HAL_PCD_MspInit+0xa0>)
 80183c0:	f043 0301 	orr.w	r3, r3, #1
 80183c4:	6313      	str	r3, [r2, #48]	; 0x30
 80183c6:	4b1b      	ldr	r3, [pc, #108]	; (8018434 <HAL_PCD_MspInit+0xa0>)
 80183c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80183ca:	f003 0301 	and.w	r3, r3, #1
 80183ce:	613b      	str	r3, [r7, #16]
 80183d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80183d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80183d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80183d8:	2302      	movs	r3, #2
 80183da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80183dc:	2300      	movs	r3, #0
 80183de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80183e0:	2303      	movs	r3, #3
 80183e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80183e4:	230a      	movs	r3, #10
 80183e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80183e8:	f107 0314 	add.w	r3, r7, #20
 80183ec:	4619      	mov	r1, r3
 80183ee:	4812      	ldr	r0, [pc, #72]	; (8018438 <HAL_PCD_MspInit+0xa4>)
 80183f0:	f7f2 fb6c 	bl	800aacc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80183f4:	4b0f      	ldr	r3, [pc, #60]	; (8018434 <HAL_PCD_MspInit+0xa0>)
 80183f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80183f8:	4a0e      	ldr	r2, [pc, #56]	; (8018434 <HAL_PCD_MspInit+0xa0>)
 80183fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80183fe:	6353      	str	r3, [r2, #52]	; 0x34
 8018400:	2300      	movs	r3, #0
 8018402:	60fb      	str	r3, [r7, #12]
 8018404:	4b0b      	ldr	r3, [pc, #44]	; (8018434 <HAL_PCD_MspInit+0xa0>)
 8018406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018408:	4a0a      	ldr	r2, [pc, #40]	; (8018434 <HAL_PCD_MspInit+0xa0>)
 801840a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801840e:	6453      	str	r3, [r2, #68]	; 0x44
 8018410:	4b08      	ldr	r3, [pc, #32]	; (8018434 <HAL_PCD_MspInit+0xa0>)
 8018412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018418:	60fb      	str	r3, [r7, #12]
 801841a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801841c:	2200      	movs	r2, #0
 801841e:	2105      	movs	r1, #5
 8018420:	2043      	movs	r0, #67	; 0x43
 8018422:	f7f1 fd65 	bl	8009ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018426:	2043      	movs	r0, #67	; 0x43
 8018428:	f7f1 fd7e 	bl	8009f28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801842c:	bf00      	nop
 801842e:	3728      	adds	r7, #40	; 0x28
 8018430:	46bd      	mov	sp, r7
 8018432:	bd80      	pop	{r7, pc}
 8018434:	40023800 	.word	0x40023800
 8018438:	40020000 	.word	0x40020000

0801843c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801843c:	b580      	push	{r7, lr}
 801843e:	b082      	sub	sp, #8
 8018440:	af00      	add	r7, sp, #0
 8018442:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8018450:	4619      	mov	r1, r3
 8018452:	4610      	mov	r0, r2
 8018454:	f7fd f800 	bl	8015458 <USBD_LL_SetupStage>
}
 8018458:	bf00      	nop
 801845a:	3708      	adds	r7, #8
 801845c:	46bd      	mov	sp, r7
 801845e:	bd80      	pop	{r7, pc}

08018460 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018460:	b580      	push	{r7, lr}
 8018462:	b082      	sub	sp, #8
 8018464:	af00      	add	r7, sp, #0
 8018466:	6078      	str	r0, [r7, #4]
 8018468:	460b      	mov	r3, r1
 801846a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018472:	78fa      	ldrb	r2, [r7, #3]
 8018474:	6879      	ldr	r1, [r7, #4]
 8018476:	4613      	mov	r3, r2
 8018478:	00db      	lsls	r3, r3, #3
 801847a:	4413      	add	r3, r2
 801847c:	009b      	lsls	r3, r3, #2
 801847e:	440b      	add	r3, r1
 8018480:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8018484:	681a      	ldr	r2, [r3, #0]
 8018486:	78fb      	ldrb	r3, [r7, #3]
 8018488:	4619      	mov	r1, r3
 801848a:	f7fd f83a 	bl	8015502 <USBD_LL_DataOutStage>
}
 801848e:	bf00      	nop
 8018490:	3708      	adds	r7, #8
 8018492:	46bd      	mov	sp, r7
 8018494:	bd80      	pop	{r7, pc}

08018496 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018496:	b580      	push	{r7, lr}
 8018498:	b082      	sub	sp, #8
 801849a:	af00      	add	r7, sp, #0
 801849c:	6078      	str	r0, [r7, #4]
 801849e:	460b      	mov	r3, r1
 80184a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80184a8:	78fa      	ldrb	r2, [r7, #3]
 80184aa:	6879      	ldr	r1, [r7, #4]
 80184ac:	4613      	mov	r3, r2
 80184ae:	00db      	lsls	r3, r3, #3
 80184b0:	4413      	add	r3, r2
 80184b2:	009b      	lsls	r3, r3, #2
 80184b4:	440b      	add	r3, r1
 80184b6:	334c      	adds	r3, #76	; 0x4c
 80184b8:	681a      	ldr	r2, [r3, #0]
 80184ba:	78fb      	ldrb	r3, [r7, #3]
 80184bc:	4619      	mov	r1, r3
 80184be:	f7fd f8d3 	bl	8015668 <USBD_LL_DataInStage>
}
 80184c2:	bf00      	nop
 80184c4:	3708      	adds	r7, #8
 80184c6:	46bd      	mov	sp, r7
 80184c8:	bd80      	pop	{r7, pc}

080184ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80184ca:	b580      	push	{r7, lr}
 80184cc:	b082      	sub	sp, #8
 80184ce:	af00      	add	r7, sp, #0
 80184d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80184d8:	4618      	mov	r0, r3
 80184da:	f7fd fa07 	bl	80158ec <USBD_LL_SOF>
}
 80184de:	bf00      	nop
 80184e0:	3708      	adds	r7, #8
 80184e2:	46bd      	mov	sp, r7
 80184e4:	bd80      	pop	{r7, pc}

080184e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80184e6:	b580      	push	{r7, lr}
 80184e8:	b084      	sub	sp, #16
 80184ea:	af00      	add	r7, sp, #0
 80184ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80184ee:	2301      	movs	r3, #1
 80184f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	68db      	ldr	r3, [r3, #12]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d102      	bne.n	8018500 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80184fa:	2300      	movs	r3, #0
 80184fc:	73fb      	strb	r3, [r7, #15]
 80184fe:	e008      	b.n	8018512 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	68db      	ldr	r3, [r3, #12]
 8018504:	2b02      	cmp	r3, #2
 8018506:	d102      	bne.n	801850e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018508:	2301      	movs	r3, #1
 801850a:	73fb      	strb	r3, [r7, #15]
 801850c:	e001      	b.n	8018512 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801850e:	f7ea fd4f 	bl	8002fb0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018518:	7bfa      	ldrb	r2, [r7, #15]
 801851a:	4611      	mov	r1, r2
 801851c:	4618      	mov	r0, r3
 801851e:	f7fd f9a7 	bl	8015870 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018528:	4618      	mov	r0, r3
 801852a:	f7fd f94f 	bl	80157cc <USBD_LL_Reset>
}
 801852e:	bf00      	nop
 8018530:	3710      	adds	r7, #16
 8018532:	46bd      	mov	sp, r7
 8018534:	bd80      	pop	{r7, pc}
	...

08018538 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018538:	b580      	push	{r7, lr}
 801853a:	b082      	sub	sp, #8
 801853c:	af00      	add	r7, sp, #0
 801853e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018546:	4618      	mov	r0, r3
 8018548:	f7fd f9a2 	bl	8015890 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	687a      	ldr	r2, [r7, #4]
 8018558:	6812      	ldr	r2, [r2, #0]
 801855a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801855e:	f043 0301 	orr.w	r3, r3, #1
 8018562:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	6a1b      	ldr	r3, [r3, #32]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d005      	beq.n	8018578 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801856c:	4b04      	ldr	r3, [pc, #16]	; (8018580 <HAL_PCD_SuspendCallback+0x48>)
 801856e:	691b      	ldr	r3, [r3, #16]
 8018570:	4a03      	ldr	r2, [pc, #12]	; (8018580 <HAL_PCD_SuspendCallback+0x48>)
 8018572:	f043 0306 	orr.w	r3, r3, #6
 8018576:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018578:	bf00      	nop
 801857a:	3708      	adds	r7, #8
 801857c:	46bd      	mov	sp, r7
 801857e:	bd80      	pop	{r7, pc}
 8018580:	e000ed00 	.word	0xe000ed00

08018584 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018584:	b580      	push	{r7, lr}
 8018586:	b082      	sub	sp, #8
 8018588:	af00      	add	r7, sp, #0
 801858a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018592:	4618      	mov	r0, r3
 8018594:	f7fd f992 	bl	80158bc <USBD_LL_Resume>
}
 8018598:	bf00      	nop
 801859a:	3708      	adds	r7, #8
 801859c:	46bd      	mov	sp, r7
 801859e:	bd80      	pop	{r7, pc}

080185a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80185a0:	b580      	push	{r7, lr}
 80185a2:	b082      	sub	sp, #8
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	6078      	str	r0, [r7, #4]
 80185a8:	460b      	mov	r3, r1
 80185aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80185b2:	78fa      	ldrb	r2, [r7, #3]
 80185b4:	4611      	mov	r1, r2
 80185b6:	4618      	mov	r0, r3
 80185b8:	f7fd f9ea 	bl	8015990 <USBD_LL_IsoOUTIncomplete>
}
 80185bc:	bf00      	nop
 80185be:	3708      	adds	r7, #8
 80185c0:	46bd      	mov	sp, r7
 80185c2:	bd80      	pop	{r7, pc}

080185c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80185c4:	b580      	push	{r7, lr}
 80185c6:	b082      	sub	sp, #8
 80185c8:	af00      	add	r7, sp, #0
 80185ca:	6078      	str	r0, [r7, #4]
 80185cc:	460b      	mov	r3, r1
 80185ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80185d6:	78fa      	ldrb	r2, [r7, #3]
 80185d8:	4611      	mov	r1, r2
 80185da:	4618      	mov	r0, r3
 80185dc:	f7fd f9a6 	bl	801592c <USBD_LL_IsoINIncomplete>
}
 80185e0:	bf00      	nop
 80185e2:	3708      	adds	r7, #8
 80185e4:	46bd      	mov	sp, r7
 80185e6:	bd80      	pop	{r7, pc}

080185e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80185e8:	b580      	push	{r7, lr}
 80185ea:	b082      	sub	sp, #8
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80185f6:	4618      	mov	r0, r3
 80185f8:	f7fd f9fc 	bl	80159f4 <USBD_LL_DevConnected>
}
 80185fc:	bf00      	nop
 80185fe:	3708      	adds	r7, #8
 8018600:	46bd      	mov	sp, r7
 8018602:	bd80      	pop	{r7, pc}

08018604 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018604:	b580      	push	{r7, lr}
 8018606:	b082      	sub	sp, #8
 8018608:	af00      	add	r7, sp, #0
 801860a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018612:	4618      	mov	r0, r3
 8018614:	f7fd f9f9 	bl	8015a0a <USBD_LL_DevDisconnected>
}
 8018618:	bf00      	nop
 801861a:	3708      	adds	r7, #8
 801861c:	46bd      	mov	sp, r7
 801861e:	bd80      	pop	{r7, pc}

08018620 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018620:	b580      	push	{r7, lr}
 8018622:	b082      	sub	sp, #8
 8018624:	af00      	add	r7, sp, #0
 8018626:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	781b      	ldrb	r3, [r3, #0]
 801862c:	2b00      	cmp	r3, #0
 801862e:	d13c      	bne.n	80186aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018630:	4a20      	ldr	r2, [pc, #128]	; (80186b4 <USBD_LL_Init+0x94>)
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	4a1e      	ldr	r2, [pc, #120]	; (80186b4 <USBD_LL_Init+0x94>)
 801863c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018640:	4b1c      	ldr	r3, [pc, #112]	; (80186b4 <USBD_LL_Init+0x94>)
 8018642:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8018646:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8018648:	4b1a      	ldr	r3, [pc, #104]	; (80186b4 <USBD_LL_Init+0x94>)
 801864a:	2204      	movs	r2, #4
 801864c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801864e:	4b19      	ldr	r3, [pc, #100]	; (80186b4 <USBD_LL_Init+0x94>)
 8018650:	2202      	movs	r2, #2
 8018652:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018654:	4b17      	ldr	r3, [pc, #92]	; (80186b4 <USBD_LL_Init+0x94>)
 8018656:	2200      	movs	r2, #0
 8018658:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801865a:	4b16      	ldr	r3, [pc, #88]	; (80186b4 <USBD_LL_Init+0x94>)
 801865c:	2202      	movs	r2, #2
 801865e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018660:	4b14      	ldr	r3, [pc, #80]	; (80186b4 <USBD_LL_Init+0x94>)
 8018662:	2200      	movs	r2, #0
 8018664:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018666:	4b13      	ldr	r3, [pc, #76]	; (80186b4 <USBD_LL_Init+0x94>)
 8018668:	2200      	movs	r2, #0
 801866a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801866c:	4b11      	ldr	r3, [pc, #68]	; (80186b4 <USBD_LL_Init+0x94>)
 801866e:	2200      	movs	r2, #0
 8018670:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018672:	4b10      	ldr	r3, [pc, #64]	; (80186b4 <USBD_LL_Init+0x94>)
 8018674:	2200      	movs	r2, #0
 8018676:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018678:	4b0e      	ldr	r3, [pc, #56]	; (80186b4 <USBD_LL_Init+0x94>)
 801867a:	2200      	movs	r2, #0
 801867c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801867e:	480d      	ldr	r0, [pc, #52]	; (80186b4 <USBD_LL_Init+0x94>)
 8018680:	f7f2 fbf2 	bl	800ae68 <HAL_PCD_Init>
 8018684:	4603      	mov	r3, r0
 8018686:	2b00      	cmp	r3, #0
 8018688:	d001      	beq.n	801868e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801868a:	f7ea fc91 	bl	8002fb0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801868e:	2180      	movs	r1, #128	; 0x80
 8018690:	4808      	ldr	r0, [pc, #32]	; (80186b4 <USBD_LL_Init+0x94>)
 8018692:	f7f3 fe76 	bl	800c382 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018696:	2240      	movs	r2, #64	; 0x40
 8018698:	2100      	movs	r1, #0
 801869a:	4806      	ldr	r0, [pc, #24]	; (80186b4 <USBD_LL_Init+0x94>)
 801869c:	f7f3 fe2a 	bl	800c2f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80186a0:	2280      	movs	r2, #128	; 0x80
 80186a2:	2101      	movs	r1, #1
 80186a4:	4803      	ldr	r0, [pc, #12]	; (80186b4 <USBD_LL_Init+0x94>)
 80186a6:	f7f3 fe25 	bl	800c2f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80186aa:	2300      	movs	r3, #0
}
 80186ac:	4618      	mov	r0, r3
 80186ae:	3708      	adds	r7, #8
 80186b0:	46bd      	mov	sp, r7
 80186b2:	bd80      	pop	{r7, pc}
 80186b4:	2000d8b8 	.word	0x2000d8b8

080186b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80186b8:	b580      	push	{r7, lr}
 80186ba:	b084      	sub	sp, #16
 80186bc:	af00      	add	r7, sp, #0
 80186be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80186c0:	2300      	movs	r3, #0
 80186c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80186c4:	2300      	movs	r3, #0
 80186c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80186ce:	4618      	mov	r0, r3
 80186d0:	f7f2 fce7 	bl	800b0a2 <HAL_PCD_Start>
 80186d4:	4603      	mov	r3, r0
 80186d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80186d8:	7bfb      	ldrb	r3, [r7, #15]
 80186da:	4618      	mov	r0, r3
 80186dc:	f000 f962 	bl	80189a4 <USBD_Get_USB_Status>
 80186e0:	4603      	mov	r3, r0
 80186e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80186e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80186e6:	4618      	mov	r0, r3
 80186e8:	3710      	adds	r7, #16
 80186ea:	46bd      	mov	sp, r7
 80186ec:	bd80      	pop	{r7, pc}

080186ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80186ee:	b580      	push	{r7, lr}
 80186f0:	b084      	sub	sp, #16
 80186f2:	af00      	add	r7, sp, #0
 80186f4:	6078      	str	r0, [r7, #4]
 80186f6:	4608      	mov	r0, r1
 80186f8:	4611      	mov	r1, r2
 80186fa:	461a      	mov	r2, r3
 80186fc:	4603      	mov	r3, r0
 80186fe:	70fb      	strb	r3, [r7, #3]
 8018700:	460b      	mov	r3, r1
 8018702:	70bb      	strb	r3, [r7, #2]
 8018704:	4613      	mov	r3, r2
 8018706:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018708:	2300      	movs	r3, #0
 801870a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801870c:	2300      	movs	r3, #0
 801870e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018716:	78bb      	ldrb	r3, [r7, #2]
 8018718:	883a      	ldrh	r2, [r7, #0]
 801871a:	78f9      	ldrb	r1, [r7, #3]
 801871c:	f7f3 f9b8 	bl	800ba90 <HAL_PCD_EP_Open>
 8018720:	4603      	mov	r3, r0
 8018722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018724:	7bfb      	ldrb	r3, [r7, #15]
 8018726:	4618      	mov	r0, r3
 8018728:	f000 f93c 	bl	80189a4 <USBD_Get_USB_Status>
 801872c:	4603      	mov	r3, r0
 801872e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018730:	7bbb      	ldrb	r3, [r7, #14]
}
 8018732:	4618      	mov	r0, r3
 8018734:	3710      	adds	r7, #16
 8018736:	46bd      	mov	sp, r7
 8018738:	bd80      	pop	{r7, pc}

0801873a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801873a:	b580      	push	{r7, lr}
 801873c:	b084      	sub	sp, #16
 801873e:	af00      	add	r7, sp, #0
 8018740:	6078      	str	r0, [r7, #4]
 8018742:	460b      	mov	r3, r1
 8018744:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018746:	2300      	movs	r3, #0
 8018748:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801874a:	2300      	movs	r3, #0
 801874c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018754:	78fa      	ldrb	r2, [r7, #3]
 8018756:	4611      	mov	r1, r2
 8018758:	4618      	mov	r0, r3
 801875a:	f7f3 fa01 	bl	800bb60 <HAL_PCD_EP_Close>
 801875e:	4603      	mov	r3, r0
 8018760:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018762:	7bfb      	ldrb	r3, [r7, #15]
 8018764:	4618      	mov	r0, r3
 8018766:	f000 f91d 	bl	80189a4 <USBD_Get_USB_Status>
 801876a:	4603      	mov	r3, r0
 801876c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801876e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018770:	4618      	mov	r0, r3
 8018772:	3710      	adds	r7, #16
 8018774:	46bd      	mov	sp, r7
 8018776:	bd80      	pop	{r7, pc}

08018778 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018778:	b580      	push	{r7, lr}
 801877a:	b084      	sub	sp, #16
 801877c:	af00      	add	r7, sp, #0
 801877e:	6078      	str	r0, [r7, #4]
 8018780:	460b      	mov	r3, r1
 8018782:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018784:	2300      	movs	r3, #0
 8018786:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018788:	2300      	movs	r3, #0
 801878a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018792:	78fa      	ldrb	r2, [r7, #3]
 8018794:	4611      	mov	r1, r2
 8018796:	4618      	mov	r0, r3
 8018798:	f7f3 fbc4 	bl	800bf24 <HAL_PCD_EP_Flush>
 801879c:	4603      	mov	r3, r0
 801879e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80187a0:	7bfb      	ldrb	r3, [r7, #15]
 80187a2:	4618      	mov	r0, r3
 80187a4:	f000 f8fe 	bl	80189a4 <USBD_Get_USB_Status>
 80187a8:	4603      	mov	r3, r0
 80187aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80187ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80187ae:	4618      	mov	r0, r3
 80187b0:	3710      	adds	r7, #16
 80187b2:	46bd      	mov	sp, r7
 80187b4:	bd80      	pop	{r7, pc}

080187b6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80187b6:	b580      	push	{r7, lr}
 80187b8:	b084      	sub	sp, #16
 80187ba:	af00      	add	r7, sp, #0
 80187bc:	6078      	str	r0, [r7, #4]
 80187be:	460b      	mov	r3, r1
 80187c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80187c2:	2300      	movs	r3, #0
 80187c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80187c6:	2300      	movs	r3, #0
 80187c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80187d0:	78fa      	ldrb	r2, [r7, #3]
 80187d2:	4611      	mov	r1, r2
 80187d4:	4618      	mov	r0, r3
 80187d6:	f7f3 faba 	bl	800bd4e <HAL_PCD_EP_SetStall>
 80187da:	4603      	mov	r3, r0
 80187dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80187de:	7bfb      	ldrb	r3, [r7, #15]
 80187e0:	4618      	mov	r0, r3
 80187e2:	f000 f8df 	bl	80189a4 <USBD_Get_USB_Status>
 80187e6:	4603      	mov	r3, r0
 80187e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80187ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80187ec:	4618      	mov	r0, r3
 80187ee:	3710      	adds	r7, #16
 80187f0:	46bd      	mov	sp, r7
 80187f2:	bd80      	pop	{r7, pc}

080187f4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80187f4:	b580      	push	{r7, lr}
 80187f6:	b084      	sub	sp, #16
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	6078      	str	r0, [r7, #4]
 80187fc:	460b      	mov	r3, r1
 80187fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018800:	2300      	movs	r3, #0
 8018802:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018804:	2300      	movs	r3, #0
 8018806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801880e:	78fa      	ldrb	r2, [r7, #3]
 8018810:	4611      	mov	r1, r2
 8018812:	4618      	mov	r0, r3
 8018814:	f7f3 faff 	bl	800be16 <HAL_PCD_EP_ClrStall>
 8018818:	4603      	mov	r3, r0
 801881a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801881c:	7bfb      	ldrb	r3, [r7, #15]
 801881e:	4618      	mov	r0, r3
 8018820:	f000 f8c0 	bl	80189a4 <USBD_Get_USB_Status>
 8018824:	4603      	mov	r3, r0
 8018826:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018828:	7bbb      	ldrb	r3, [r7, #14]
}
 801882a:	4618      	mov	r0, r3
 801882c:	3710      	adds	r7, #16
 801882e:	46bd      	mov	sp, r7
 8018830:	bd80      	pop	{r7, pc}

08018832 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018832:	b480      	push	{r7}
 8018834:	b085      	sub	sp, #20
 8018836:	af00      	add	r7, sp, #0
 8018838:	6078      	str	r0, [r7, #4]
 801883a:	460b      	mov	r3, r1
 801883c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018844:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018846:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801884a:	2b00      	cmp	r3, #0
 801884c:	da0b      	bge.n	8018866 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801884e:	78fb      	ldrb	r3, [r7, #3]
 8018850:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018854:	68f9      	ldr	r1, [r7, #12]
 8018856:	4613      	mov	r3, r2
 8018858:	00db      	lsls	r3, r3, #3
 801885a:	4413      	add	r3, r2
 801885c:	009b      	lsls	r3, r3, #2
 801885e:	440b      	add	r3, r1
 8018860:	333e      	adds	r3, #62	; 0x3e
 8018862:	781b      	ldrb	r3, [r3, #0]
 8018864:	e00b      	b.n	801887e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018866:	78fb      	ldrb	r3, [r7, #3]
 8018868:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801886c:	68f9      	ldr	r1, [r7, #12]
 801886e:	4613      	mov	r3, r2
 8018870:	00db      	lsls	r3, r3, #3
 8018872:	4413      	add	r3, r2
 8018874:	009b      	lsls	r3, r3, #2
 8018876:	440b      	add	r3, r1
 8018878:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801887c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801887e:	4618      	mov	r0, r3
 8018880:	3714      	adds	r7, #20
 8018882:	46bd      	mov	sp, r7
 8018884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018888:	4770      	bx	lr

0801888a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801888a:	b580      	push	{r7, lr}
 801888c:	b084      	sub	sp, #16
 801888e:	af00      	add	r7, sp, #0
 8018890:	6078      	str	r0, [r7, #4]
 8018892:	460b      	mov	r3, r1
 8018894:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018896:	2300      	movs	r3, #0
 8018898:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801889a:	2300      	movs	r3, #0
 801889c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80188a4:	78fa      	ldrb	r2, [r7, #3]
 80188a6:	4611      	mov	r1, r2
 80188a8:	4618      	mov	r0, r3
 80188aa:	f7f3 f8cc 	bl	800ba46 <HAL_PCD_SetAddress>
 80188ae:	4603      	mov	r3, r0
 80188b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80188b2:	7bfb      	ldrb	r3, [r7, #15]
 80188b4:	4618      	mov	r0, r3
 80188b6:	f000 f875 	bl	80189a4 <USBD_Get_USB_Status>
 80188ba:	4603      	mov	r3, r0
 80188bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80188be:	7bbb      	ldrb	r3, [r7, #14]
}
 80188c0:	4618      	mov	r0, r3
 80188c2:	3710      	adds	r7, #16
 80188c4:	46bd      	mov	sp, r7
 80188c6:	bd80      	pop	{r7, pc}

080188c8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80188c8:	b580      	push	{r7, lr}
 80188ca:	b086      	sub	sp, #24
 80188cc:	af00      	add	r7, sp, #0
 80188ce:	60f8      	str	r0, [r7, #12]
 80188d0:	607a      	str	r2, [r7, #4]
 80188d2:	603b      	str	r3, [r7, #0]
 80188d4:	460b      	mov	r3, r1
 80188d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80188d8:	2300      	movs	r3, #0
 80188da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80188dc:	2300      	movs	r3, #0
 80188de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80188e6:	7af9      	ldrb	r1, [r7, #11]
 80188e8:	683b      	ldr	r3, [r7, #0]
 80188ea:	687a      	ldr	r2, [r7, #4]
 80188ec:	f7f3 f9e5 	bl	800bcba <HAL_PCD_EP_Transmit>
 80188f0:	4603      	mov	r3, r0
 80188f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80188f4:	7dfb      	ldrb	r3, [r7, #23]
 80188f6:	4618      	mov	r0, r3
 80188f8:	f000 f854 	bl	80189a4 <USBD_Get_USB_Status>
 80188fc:	4603      	mov	r3, r0
 80188fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018900:	7dbb      	ldrb	r3, [r7, #22]
}
 8018902:	4618      	mov	r0, r3
 8018904:	3718      	adds	r7, #24
 8018906:	46bd      	mov	sp, r7
 8018908:	bd80      	pop	{r7, pc}

0801890a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801890a:	b580      	push	{r7, lr}
 801890c:	b086      	sub	sp, #24
 801890e:	af00      	add	r7, sp, #0
 8018910:	60f8      	str	r0, [r7, #12]
 8018912:	607a      	str	r2, [r7, #4]
 8018914:	603b      	str	r3, [r7, #0]
 8018916:	460b      	mov	r3, r1
 8018918:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801891a:	2300      	movs	r3, #0
 801891c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801891e:	2300      	movs	r3, #0
 8018920:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018928:	7af9      	ldrb	r1, [r7, #11]
 801892a:	683b      	ldr	r3, [r7, #0]
 801892c:	687a      	ldr	r2, [r7, #4]
 801892e:	f7f3 f961 	bl	800bbf4 <HAL_PCD_EP_Receive>
 8018932:	4603      	mov	r3, r0
 8018934:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018936:	7dfb      	ldrb	r3, [r7, #23]
 8018938:	4618      	mov	r0, r3
 801893a:	f000 f833 	bl	80189a4 <USBD_Get_USB_Status>
 801893e:	4603      	mov	r3, r0
 8018940:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018942:	7dbb      	ldrb	r3, [r7, #22]
}
 8018944:	4618      	mov	r0, r3
 8018946:	3718      	adds	r7, #24
 8018948:	46bd      	mov	sp, r7
 801894a:	bd80      	pop	{r7, pc}

0801894c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801894c:	b580      	push	{r7, lr}
 801894e:	b082      	sub	sp, #8
 8018950:	af00      	add	r7, sp, #0
 8018952:	6078      	str	r0, [r7, #4]
 8018954:	460b      	mov	r3, r1
 8018956:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801895e:	78fa      	ldrb	r2, [r7, #3]
 8018960:	4611      	mov	r1, r2
 8018962:	4618      	mov	r0, r3
 8018964:	f7f3 f991 	bl	800bc8a <HAL_PCD_EP_GetRxCount>
 8018968:	4603      	mov	r3, r0
}
 801896a:	4618      	mov	r0, r3
 801896c:	3708      	adds	r7, #8
 801896e:	46bd      	mov	sp, r7
 8018970:	bd80      	pop	{r7, pc}
	...

08018974 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018974:	b480      	push	{r7}
 8018976:	b083      	sub	sp, #12
 8018978:	af00      	add	r7, sp, #0
 801897a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801897c:	4b03      	ldr	r3, [pc, #12]	; (801898c <USBD_static_malloc+0x18>)
}
 801897e:	4618      	mov	r0, r3
 8018980:	370c      	adds	r7, #12
 8018982:	46bd      	mov	sp, r7
 8018984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018988:	4770      	bx	lr
 801898a:	bf00      	nop
 801898c:	2000ddc4 	.word	0x2000ddc4

08018990 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018990:	b480      	push	{r7}
 8018992:	b083      	sub	sp, #12
 8018994:	af00      	add	r7, sp, #0
 8018996:	6078      	str	r0, [r7, #4]

}
 8018998:	bf00      	nop
 801899a:	370c      	adds	r7, #12
 801899c:	46bd      	mov	sp, r7
 801899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189a2:	4770      	bx	lr

080189a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80189a4:	b480      	push	{r7}
 80189a6:	b085      	sub	sp, #20
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	4603      	mov	r3, r0
 80189ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80189ae:	2300      	movs	r3, #0
 80189b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80189b2:	79fb      	ldrb	r3, [r7, #7]
 80189b4:	2b03      	cmp	r3, #3
 80189b6:	d817      	bhi.n	80189e8 <USBD_Get_USB_Status+0x44>
 80189b8:	a201      	add	r2, pc, #4	; (adr r2, 80189c0 <USBD_Get_USB_Status+0x1c>)
 80189ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189be:	bf00      	nop
 80189c0:	080189d1 	.word	0x080189d1
 80189c4:	080189d7 	.word	0x080189d7
 80189c8:	080189dd 	.word	0x080189dd
 80189cc:	080189e3 	.word	0x080189e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80189d0:	2300      	movs	r3, #0
 80189d2:	73fb      	strb	r3, [r7, #15]
    break;
 80189d4:	e00b      	b.n	80189ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80189d6:	2303      	movs	r3, #3
 80189d8:	73fb      	strb	r3, [r7, #15]
    break;
 80189da:	e008      	b.n	80189ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80189dc:	2301      	movs	r3, #1
 80189de:	73fb      	strb	r3, [r7, #15]
    break;
 80189e0:	e005      	b.n	80189ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80189e2:	2303      	movs	r3, #3
 80189e4:	73fb      	strb	r3, [r7, #15]
    break;
 80189e6:	e002      	b.n	80189ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80189e8:	2303      	movs	r3, #3
 80189ea:	73fb      	strb	r3, [r7, #15]
    break;
 80189ec:	bf00      	nop
  }
  return usb_status;
 80189ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80189f0:	4618      	mov	r0, r3
 80189f2:	3714      	adds	r7, #20
 80189f4:	46bd      	mov	sp, r7
 80189f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189fa:	4770      	bx	lr

080189fc <arm_mat_trans_f32>:
 80189fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a00:	f8b0 c000 	ldrh.w	ip, [r0]
 8018a04:	884a      	ldrh	r2, [r1, #2]
 8018a06:	6844      	ldr	r4, [r0, #4]
 8018a08:	8843      	ldrh	r3, [r0, #2]
 8018a0a:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8018a0e:	4562      	cmp	r2, ip
 8018a10:	b083      	sub	sp, #12
 8018a12:	d15f      	bne.n	8018ad4 <arm_mat_trans_f32+0xd8>
 8018a14:	f8b1 e000 	ldrh.w	lr, [r1]
 8018a18:	459e      	cmp	lr, r3
 8018a1a:	d15b      	bne.n	8018ad4 <arm_mat_trans_f32+0xd8>
 8018a1c:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8018a20:	f00e 0303 	and.w	r3, lr, #3
 8018a24:	461a      	mov	r2, r3
 8018a26:	9301      	str	r3, [sp, #4]
 8018a28:	f108 33ff 	add.w	r3, r8, #4294967295
 8018a2c:	b29b      	uxth	r3, r3
 8018a2e:	f103 0902 	add.w	r9, r3, #2
 8018a32:	3a01      	subs	r2, #1
 8018a34:	3301      	adds	r3, #1
 8018a36:	ea4f 170c 	mov.w	r7, ip, lsl #4
 8018a3a:	fb03 f707 	mul.w	r7, r3, r7
 8018a3e:	b292      	uxth	r2, r2
 8018a40:	3201      	adds	r2, #1
 8018a42:	ea4f 1b03 	mov.w	fp, r3, lsl #4
 8018a46:	463b      	mov	r3, r7
 8018a48:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8018a4c:	4647      	mov	r7, r8
 8018a4e:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8018a52:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8018a56:	2600      	movs	r6, #0
 8018a58:	4698      	mov	r8, r3
 8018a5a:	eb0a 0086 	add.w	r0, sl, r6, lsl #2
 8018a5e:	b3bf      	cbz	r7, 8018ad0 <arm_mat_trans_f32+0xd4>
 8018a60:	f104 0210 	add.w	r2, r4, #16
 8018a64:	eb04 0509 	add.w	r5, r4, r9
 8018a68:	4603      	mov	r3, r0
 8018a6a:	ed52 7a04 	vldr	s15, [r2, #-16]
 8018a6e:	edc3 7a00 	vstr	s15, [r3]
 8018a72:	ed52 7a03 	vldr	s15, [r2, #-12]
 8018a76:	440b      	add	r3, r1
 8018a78:	edc3 7a00 	vstr	s15, [r3]
 8018a7c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8018a80:	440b      	add	r3, r1
 8018a82:	edc3 7a00 	vstr	s15, [r3]
 8018a86:	ed52 7a01 	vldr	s15, [r2, #-4]
 8018a8a:	3210      	adds	r2, #16
 8018a8c:	440b      	add	r3, r1
 8018a8e:	42aa      	cmp	r2, r5
 8018a90:	edc3 7a00 	vstr	s15, [r3]
 8018a94:	440b      	add	r3, r1
 8018a96:	d1e8      	bne.n	8018a6a <arm_mat_trans_f32+0x6e>
 8018a98:	eb04 030b 	add.w	r3, r4, fp
 8018a9c:	4440      	add	r0, r8
 8018a9e:	9a01      	ldr	r2, [sp, #4]
 8018aa0:	b182      	cbz	r2, 8018ac4 <arm_mat_trans_f32+0xc8>
 8018aa2:	eb03 040e 	add.w	r4, r3, lr
 8018aa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018aaa:	6002      	str	r2, [r0, #0]
 8018aac:	42a3      	cmp	r3, r4
 8018aae:	4408      	add	r0, r1
 8018ab0:	d1f9      	bne.n	8018aa6 <arm_mat_trans_f32+0xaa>
 8018ab2:	3601      	adds	r6, #1
 8018ab4:	b2b6      	uxth	r6, r6
 8018ab6:	4566      	cmp	r6, ip
 8018ab8:	d1cf      	bne.n	8018a5a <arm_mat_trans_f32+0x5e>
 8018aba:	2000      	movs	r0, #0
 8018abc:	b240      	sxtb	r0, r0
 8018abe:	b003      	add	sp, #12
 8018ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ac4:	3601      	adds	r6, #1
 8018ac6:	b2b6      	uxth	r6, r6
 8018ac8:	4566      	cmp	r6, ip
 8018aca:	461c      	mov	r4, r3
 8018acc:	d1c5      	bne.n	8018a5a <arm_mat_trans_f32+0x5e>
 8018ace:	e7f4      	b.n	8018aba <arm_mat_trans_f32+0xbe>
 8018ad0:	4623      	mov	r3, r4
 8018ad2:	e7e4      	b.n	8018a9e <arm_mat_trans_f32+0xa2>
 8018ad4:	20fd      	movs	r0, #253	; 0xfd
 8018ad6:	b240      	sxtb	r0, r0
 8018ad8:	b003      	add	sp, #12
 8018ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ade:	bf00      	nop

08018ae0 <arm_mat_mult_f32>:
 8018ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ae4:	8843      	ldrh	r3, [r0, #2]
 8018ae6:	880d      	ldrh	r5, [r1, #0]
 8018ae8:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8018aec:	6854      	ldr	r4, [r2, #4]
 8018aee:	8800      	ldrh	r0, [r0, #0]
 8018af0:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 8018af4:	b087      	sub	sp, #28
 8018af6:	429d      	cmp	r5, r3
 8018af8:	9003      	str	r0, [sp, #12]
 8018afa:	9404      	str	r4, [sp, #16]
 8018afc:	f040 808d 	bne.w	8018c1a <arm_mat_mult_f32+0x13a>
 8018b00:	8813      	ldrh	r3, [r2, #0]
 8018b02:	4283      	cmp	r3, r0
 8018b04:	f040 8089 	bne.w	8018c1a <arm_mat_mult_f32+0x13a>
 8018b08:	8853      	ldrh	r3, [r2, #2]
 8018b0a:	4543      	cmp	r3, r8
 8018b0c:	f040 8085 	bne.w	8018c1a <arm_mat_mult_f32+0x13a>
 8018b10:	ea4f 0a95 	mov.w	sl, r5, lsr #2
 8018b14:	f005 0303 	and.w	r3, r5, #3
 8018b18:	461a      	mov	r2, r3
 8018b1a:	9301      	str	r3, [sp, #4]
 8018b1c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018b20:	b29b      	uxth	r3, r3
 8018b22:	3301      	adds	r3, #1
 8018b24:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8018b28:	fb0b fb03 	mul.w	fp, fp, r3
 8018b2c:	3a01      	subs	r2, #1
 8018b2e:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
 8018b32:	00ab      	lsls	r3, r5, #2
 8018b34:	b292      	uxth	r2, r2
 8018b36:	9305      	str	r3, [sp, #20]
 8018b38:	2300      	movs	r3, #0
 8018b3a:	3201      	adds	r2, #1
 8018b3c:	9302      	str	r3, [sp, #8]
 8018b3e:	460b      	mov	r3, r1
 8018b40:	684c      	ldr	r4, [r1, #4]
 8018b42:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8018b46:	4651      	mov	r1, sl
 8018b48:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8018b4c:	46da      	mov	sl, fp
 8018b4e:	469b      	mov	fp, r3
 8018b50:	9b04      	ldr	r3, [sp, #16]
 8018b52:	9a02      	ldr	r2, [sp, #8]
 8018b54:	2600      	movs	r6, #0
 8018b56:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 8018b5a:	f10c 0510 	add.w	r5, ip, #16
 8018b5e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8018c24 <arm_mat_mult_f32+0x144>
 8018b62:	2900      	cmp	r1, #0
 8018b64:	d057      	beq.n	8018c16 <arm_mat_mult_f32+0x136>
 8018b66:	f10e 0210 	add.w	r2, lr, #16
 8018b6a:	4623      	mov	r3, r4
 8018b6c:	ed52 5a04 	vldr	s11, [r2, #-16]
 8018b70:	edd3 6a00 	vldr	s13, [r3]
 8018b74:	ed12 7a03 	vldr	s14, [r2, #-12]
 8018b78:	ed12 5a02 	vldr	s10, [r2, #-8]
 8018b7c:	ed12 6a01 	vldr	s12, [r2, #-4]
 8018b80:	4403      	add	r3, r0
 8018b82:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8018b86:	edd3 6a00 	vldr	s13, [r3]
 8018b8a:	4403      	add	r3, r0
 8018b8c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018b90:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8018b94:	edd3 6a00 	vldr	s13, [r3]
 8018b98:	4403      	add	r3, r0
 8018b9a:	ee77 5a27 	vadd.f32	s11, s14, s15
 8018b9e:	ee65 7a26 	vmul.f32	s15, s10, s13
 8018ba2:	edd3 6a00 	vldr	s13, [r3]
 8018ba6:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8018baa:	3210      	adds	r2, #16
 8018bac:	ee66 7a26 	vmul.f32	s15, s12, s13
 8018bb0:	42aa      	cmp	r2, r5
 8018bb2:	4403      	add	r3, r0
 8018bb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018bb8:	d1d8      	bne.n	8018b6c <arm_mat_mult_f32+0x8c>
 8018bba:	4454      	add	r4, sl
 8018bbc:	4663      	mov	r3, ip
 8018bbe:	9a01      	ldr	r2, [sp, #4]
 8018bc0:	b162      	cbz	r2, 8018bdc <arm_mat_mult_f32+0xfc>
 8018bc2:	eb03 0209 	add.w	r2, r3, r9
 8018bc6:	ecf3 6a01 	vldmia	r3!, {s13}
 8018bca:	ed94 7a00 	vldr	s14, [r4]
 8018bce:	ee26 7a87 	vmul.f32	s14, s13, s14
 8018bd2:	4293      	cmp	r3, r2
 8018bd4:	4404      	add	r4, r0
 8018bd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018bda:	d1f4      	bne.n	8018bc6 <arm_mat_mult_f32+0xe6>
 8018bdc:	ece7 7a01 	vstmia	r7!, {s15}
 8018be0:	3601      	adds	r6, #1
 8018be2:	b2b6      	uxth	r6, r6
 8018be4:	f8db 3004 	ldr.w	r3, [fp, #4]
 8018be8:	4546      	cmp	r6, r8
 8018bea:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8018bee:	d1b6      	bne.n	8018b5e <arm_mat_mult_f32+0x7e>
 8018bf0:	9a03      	ldr	r2, [sp, #12]
 8018bf2:	9c02      	ldr	r4, [sp, #8]
 8018bf4:	9d05      	ldr	r5, [sp, #20]
 8018bf6:	3a01      	subs	r2, #1
 8018bf8:	4434      	add	r4, r6
 8018bfa:	b2a4      	uxth	r4, r4
 8018bfc:	b292      	uxth	r2, r2
 8018bfe:	9402      	str	r4, [sp, #8]
 8018c00:	9203      	str	r2, [sp, #12]
 8018c02:	44ae      	add	lr, r5
 8018c04:	44ac      	add	ip, r5
 8018c06:	461c      	mov	r4, r3
 8018c08:	2a00      	cmp	r2, #0
 8018c0a:	d1a1      	bne.n	8018b50 <arm_mat_mult_f32+0x70>
 8018c0c:	4610      	mov	r0, r2
 8018c0e:	b240      	sxtb	r0, r0
 8018c10:	b007      	add	sp, #28
 8018c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c16:	4673      	mov	r3, lr
 8018c18:	e7d1      	b.n	8018bbe <arm_mat_mult_f32+0xde>
 8018c1a:	20fd      	movs	r0, #253	; 0xfd
 8018c1c:	b240      	sxtb	r0, r0
 8018c1e:	b007      	add	sp, #28
 8018c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c24:	00000000 	.word	0x00000000

08018c28 <arm_mat_init_f32>:
 8018c28:	8001      	strh	r1, [r0, #0]
 8018c2a:	8042      	strh	r2, [r0, #2]
 8018c2c:	6043      	str	r3, [r0, #4]
 8018c2e:	4770      	bx	lr

08018c30 <_ZdlPvj>:
 8018c30:	f000 b923 	b.w	8018e7a <_ZdlPv>

08018c34 <_Znwj>:
 8018c34:	2801      	cmp	r0, #1
 8018c36:	bf38      	it	cc
 8018c38:	2001      	movcc	r0, #1
 8018c3a:	b510      	push	{r4, lr}
 8018c3c:	4604      	mov	r4, r0
 8018c3e:	4620      	mov	r0, r4
 8018c40:	f001 fa28 	bl	801a094 <malloc>
 8018c44:	b930      	cbnz	r0, 8018c54 <_Znwj+0x20>
 8018c46:	f000 f92d 	bl	8018ea4 <_ZSt15get_new_handlerv>
 8018c4a:	b908      	cbnz	r0, 8018c50 <_Znwj+0x1c>
 8018c4c:	f001 f9ed 	bl	801a02a <abort>
 8018c50:	4780      	blx	r0
 8018c52:	e7f4      	b.n	8018c3e <_Znwj+0xa>
 8018c54:	bd10      	pop	{r4, pc}

08018c56 <__cxa_pure_virtual>:
 8018c56:	b508      	push	{r3, lr}
 8018c58:	f000 f91e 	bl	8018e98 <_ZSt9terminatev>

08018c5c <_ZNSaIcEC1Ev>:
 8018c5c:	4770      	bx	lr

08018c5e <_ZNSaIcED1Ev>:
 8018c5e:	4770      	bx	lr

08018c60 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8018c60:	68c3      	ldr	r3, [r0, #12]
 8018c62:	689a      	ldr	r2, [r3, #8]
 8018c64:	60c2      	str	r2, [r0, #12]
 8018c66:	b510      	push	{r4, lr}
 8018c68:	b102      	cbz	r2, 8018c6c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8018c6a:	6050      	str	r0, [r2, #4]
 8018c6c:	6842      	ldr	r2, [r0, #4]
 8018c6e:	605a      	str	r2, [r3, #4]
 8018c70:	680c      	ldr	r4, [r1, #0]
 8018c72:	4284      	cmp	r4, r0
 8018c74:	d103      	bne.n	8018c7e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8018c76:	600b      	str	r3, [r1, #0]
 8018c78:	6098      	str	r0, [r3, #8]
 8018c7a:	6043      	str	r3, [r0, #4]
 8018c7c:	bd10      	pop	{r4, pc}
 8018c7e:	6891      	ldr	r1, [r2, #8]
 8018c80:	4281      	cmp	r1, r0
 8018c82:	bf0c      	ite	eq
 8018c84:	6093      	streq	r3, [r2, #8]
 8018c86:	60d3      	strne	r3, [r2, #12]
 8018c88:	e7f6      	b.n	8018c78 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08018c8a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8018c8a:	6883      	ldr	r3, [r0, #8]
 8018c8c:	68da      	ldr	r2, [r3, #12]
 8018c8e:	6082      	str	r2, [r0, #8]
 8018c90:	b510      	push	{r4, lr}
 8018c92:	b102      	cbz	r2, 8018c96 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8018c94:	6050      	str	r0, [r2, #4]
 8018c96:	6842      	ldr	r2, [r0, #4]
 8018c98:	605a      	str	r2, [r3, #4]
 8018c9a:	680c      	ldr	r4, [r1, #0]
 8018c9c:	4284      	cmp	r4, r0
 8018c9e:	d103      	bne.n	8018ca8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8018ca0:	600b      	str	r3, [r1, #0]
 8018ca2:	60d8      	str	r0, [r3, #12]
 8018ca4:	6043      	str	r3, [r0, #4]
 8018ca6:	bd10      	pop	{r4, pc}
 8018ca8:	68d1      	ldr	r1, [r2, #12]
 8018caa:	4281      	cmp	r1, r0
 8018cac:	bf0c      	ite	eq
 8018cae:	60d3      	streq	r3, [r2, #12]
 8018cb0:	6093      	strne	r3, [r2, #8]
 8018cb2:	e7f6      	b.n	8018ca2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08018cb4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8018cb4:	7803      	ldrb	r3, [r0, #0]
 8018cb6:	b933      	cbnz	r3, 8018cc6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8018cb8:	6843      	ldr	r3, [r0, #4]
 8018cba:	685b      	ldr	r3, [r3, #4]
 8018cbc:	4283      	cmp	r3, r0
 8018cbe:	d102      	bne.n	8018cc6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8018cc0:	68db      	ldr	r3, [r3, #12]
 8018cc2:	4618      	mov	r0, r3
 8018cc4:	4770      	bx	lr
 8018cc6:	6882      	ldr	r2, [r0, #8]
 8018cc8:	b122      	cbz	r2, 8018cd4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8018cca:	4613      	mov	r3, r2
 8018ccc:	68d2      	ldr	r2, [r2, #12]
 8018cce:	2a00      	cmp	r2, #0
 8018cd0:	d1fb      	bne.n	8018cca <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8018cd2:	e7f6      	b.n	8018cc2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8018cd4:	6843      	ldr	r3, [r0, #4]
 8018cd6:	689a      	ldr	r2, [r3, #8]
 8018cd8:	4282      	cmp	r2, r0
 8018cda:	d1f2      	bne.n	8018cc2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8018cdc:	4618      	mov	r0, r3
 8018cde:	685b      	ldr	r3, [r3, #4]
 8018ce0:	e7f9      	b.n	8018cd6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08018ce2 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8018ce2:	f7ff bfe7 	b.w	8018cb4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08018ce6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8018ce6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018cea:	461e      	mov	r6, r3
 8018cec:	f103 0804 	add.w	r8, r3, #4
 8018cf0:	2300      	movs	r3, #0
 8018cf2:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8018cf6:	460c      	mov	r4, r1
 8018cf8:	604a      	str	r2, [r1, #4]
 8018cfa:	700b      	strb	r3, [r1, #0]
 8018cfc:	b300      	cbz	r0, 8018d40 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8018cfe:	4296      	cmp	r6, r2
 8018d00:	6091      	str	r1, [r2, #8]
 8018d02:	d118      	bne.n	8018d36 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8018d04:	6071      	str	r1, [r6, #4]
 8018d06:	60f4      	str	r4, [r6, #12]
 8018d08:	2701      	movs	r7, #1
 8018d0a:	f04f 0900 	mov.w	r9, #0
 8018d0e:	6873      	ldr	r3, [r6, #4]
 8018d10:	42a3      	cmp	r3, r4
 8018d12:	d03f      	beq.n	8018d94 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8018d14:	6860      	ldr	r0, [r4, #4]
 8018d16:	7802      	ldrb	r2, [r0, #0]
 8018d18:	2a00      	cmp	r2, #0
 8018d1a:	d13b      	bne.n	8018d94 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8018d1c:	6845      	ldr	r5, [r0, #4]
 8018d1e:	68ab      	ldr	r3, [r5, #8]
 8018d20:	4298      	cmp	r0, r3
 8018d22:	d123      	bne.n	8018d6c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 8018d24:	68eb      	ldr	r3, [r5, #12]
 8018d26:	b183      	cbz	r3, 8018d4a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8018d28:	781a      	ldrb	r2, [r3, #0]
 8018d2a:	b972      	cbnz	r2, 8018d4a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8018d2c:	7007      	strb	r7, [r0, #0]
 8018d2e:	701f      	strb	r7, [r3, #0]
 8018d30:	702a      	strb	r2, [r5, #0]
 8018d32:	462c      	mov	r4, r5
 8018d34:	e7eb      	b.n	8018d0e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8018d36:	68b3      	ldr	r3, [r6, #8]
 8018d38:	4293      	cmp	r3, r2
 8018d3a:	d1e5      	bne.n	8018d08 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8018d3c:	60b1      	str	r1, [r6, #8]
 8018d3e:	e7e3      	b.n	8018d08 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8018d40:	60d1      	str	r1, [r2, #12]
 8018d42:	68f3      	ldr	r3, [r6, #12]
 8018d44:	4293      	cmp	r3, r2
 8018d46:	d1df      	bne.n	8018d08 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8018d48:	e7dd      	b.n	8018d06 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8018d4a:	68c3      	ldr	r3, [r0, #12]
 8018d4c:	42a3      	cmp	r3, r4
 8018d4e:	d103      	bne.n	8018d58 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 8018d50:	4641      	mov	r1, r8
 8018d52:	f7ff ff85 	bl	8018c60 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8018d56:	4604      	mov	r4, r0
 8018d58:	6863      	ldr	r3, [r4, #4]
 8018d5a:	4641      	mov	r1, r8
 8018d5c:	701f      	strb	r7, [r3, #0]
 8018d5e:	4628      	mov	r0, r5
 8018d60:	f885 9000 	strb.w	r9, [r5]
 8018d64:	f7ff ff91 	bl	8018c8a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8018d68:	4625      	mov	r5, r4
 8018d6a:	e7e2      	b.n	8018d32 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8018d6c:	b113      	cbz	r3, 8018d74 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8018d6e:	781a      	ldrb	r2, [r3, #0]
 8018d70:	2a00      	cmp	r2, #0
 8018d72:	d0db      	beq.n	8018d2c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 8018d74:	6883      	ldr	r3, [r0, #8]
 8018d76:	42a3      	cmp	r3, r4
 8018d78:	d103      	bne.n	8018d82 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8018d7a:	4641      	mov	r1, r8
 8018d7c:	f7ff ff85 	bl	8018c8a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8018d80:	4604      	mov	r4, r0
 8018d82:	6863      	ldr	r3, [r4, #4]
 8018d84:	4641      	mov	r1, r8
 8018d86:	701f      	strb	r7, [r3, #0]
 8018d88:	4628      	mov	r0, r5
 8018d8a:	f885 9000 	strb.w	r9, [r5]
 8018d8e:	f7ff ff67 	bl	8018c60 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8018d92:	e7e9      	b.n	8018d68 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 8018d94:	2201      	movs	r2, #1
 8018d96:	701a      	strb	r2, [r3, #0]
 8018d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018d9c <_ZSt17__throw_bad_allocv>:
 8018d9c:	b508      	push	{r3, lr}
 8018d9e:	f001 f944 	bl	801a02a <abort>

08018da2 <_ZSt20__throw_length_errorPKc>:
 8018da2:	b508      	push	{r3, lr}
 8018da4:	f001 f941 	bl	801a02a <abort>

08018da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8018da8:	b508      	push	{r3, lr}
 8018daa:	680b      	ldr	r3, [r1, #0]
 8018dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018db0:	d302      	bcc.n	8018db8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8018db2:	480d      	ldr	r0, [pc, #52]	; (8018de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8018db4:	f7ff fff5 	bl	8018da2 <_ZSt20__throw_length_errorPKc>
 8018db8:	4293      	cmp	r3, r2
 8018dba:	d90b      	bls.n	8018dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8018dbc:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8018dc0:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8018dc4:	d206      	bcs.n	8018dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8018dc6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8018dca:	bf2a      	itet	cs
 8018dcc:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8018dd0:	6008      	strcc	r0, [r1, #0]
 8018dd2:	600b      	strcs	r3, [r1, #0]
 8018dd4:	6808      	ldr	r0, [r1, #0]
 8018dd6:	3001      	adds	r0, #1
 8018dd8:	d501      	bpl.n	8018dde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8018dda:	f7ff ffdf 	bl	8018d9c <_ZSt17__throw_bad_allocv>
 8018dde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018de2:	f7ff bf27 	b.w	8018c34 <_Znwj>
 8018de6:	bf00      	nop
 8018de8:	0802e7c4 	.word	0x0802e7c4

08018dec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8018dec:	f850 3b08 	ldr.w	r3, [r0], #8
 8018df0:	4283      	cmp	r3, r0
 8018df2:	d002      	beq.n	8018dfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8018df4:	4618      	mov	r0, r3
 8018df6:	f000 b840 	b.w	8018e7a <_ZdlPv>
 8018dfa:	4770      	bx	lr

08018dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8018dfc:	460b      	mov	r3, r1
 8018dfe:	2b01      	cmp	r3, #1
 8018e00:	b410      	push	{r4}
 8018e02:	4611      	mov	r1, r2
 8018e04:	4604      	mov	r4, r0
 8018e06:	d103      	bne.n	8018e10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8018e08:	7022      	strb	r2, [r4, #0]
 8018e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e0e:	4770      	bx	lr
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d0fa      	beq.n	8018e0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8018e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e18:	461a      	mov	r2, r3
 8018e1a:	f001 b973 	b.w	801a104 <memset>

08018e1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 8018e1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018e20:	290f      	cmp	r1, #15
 8018e22:	4604      	mov	r4, r0
 8018e24:	9101      	str	r1, [sp, #4]
 8018e26:	4615      	mov	r5, r2
 8018e28:	d906      	bls.n	8018e38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 8018e2a:	2200      	movs	r2, #0
 8018e2c:	a901      	add	r1, sp, #4
 8018e2e:	f7ff ffbb 	bl	8018da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8018e32:	9b01      	ldr	r3, [sp, #4]
 8018e34:	6020      	str	r0, [r4, #0]
 8018e36:	60a3      	str	r3, [r4, #8]
 8018e38:	9901      	ldr	r1, [sp, #4]
 8018e3a:	b119      	cbz	r1, 8018e44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 8018e3c:	6820      	ldr	r0, [r4, #0]
 8018e3e:	462a      	mov	r2, r5
 8018e40:	f7ff ffdc 	bl	8018dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8018e44:	9b01      	ldr	r3, [sp, #4]
 8018e46:	6822      	ldr	r2, [r4, #0]
 8018e48:	6063      	str	r3, [r4, #4]
 8018e4a:	2100      	movs	r1, #0
 8018e4c:	54d1      	strb	r1, [r2, r3]
 8018e4e:	b003      	add	sp, #12
 8018e50:	bd30      	pop	{r4, r5, pc}

08018e52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 8018e52:	b510      	push	{r4, lr}
 8018e54:	f100 0308 	add.w	r3, r0, #8
 8018e58:	4604      	mov	r4, r0
 8018e5a:	6003      	str	r3, [r0, #0]
 8018e5c:	f7ff ffdf 	bl	8018e1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 8018e60:	4620      	mov	r0, r4
 8018e62:	bd10      	pop	{r4, pc}

08018e64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8018e64:	b510      	push	{r4, lr}
 8018e66:	4604      	mov	r4, r0
 8018e68:	f7ff ffc0 	bl	8018dec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8018e6c:	4620      	mov	r0, r4
 8018e6e:	bd10      	pop	{r4, pc}

08018e70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8018e70:	6800      	ldr	r0, [r0, #0]
 8018e72:	4408      	add	r0, r1
 8018e74:	4770      	bx	lr

08018e76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8018e76:	6800      	ldr	r0, [r0, #0]
 8018e78:	4770      	bx	lr

08018e7a <_ZdlPv>:
 8018e7a:	f001 b913 	b.w	801a0a4 <free>

08018e7e <_ZN10__cxxabiv111__terminateEPFvvE>:
 8018e7e:	b508      	push	{r3, lr}
 8018e80:	4780      	blx	r0
 8018e82:	f001 f8d2 	bl	801a02a <abort>
	...

08018e88 <_ZSt13get_terminatev>:
 8018e88:	4b02      	ldr	r3, [pc, #8]	; (8018e94 <_ZSt13get_terminatev+0xc>)
 8018e8a:	6818      	ldr	r0, [r3, #0]
 8018e8c:	f3bf 8f5b 	dmb	ish
 8018e90:	4770      	bx	lr
 8018e92:	bf00      	nop
 8018e94:	2000012c 	.word	0x2000012c

08018e98 <_ZSt9terminatev>:
 8018e98:	b508      	push	{r3, lr}
 8018e9a:	f7ff fff5 	bl	8018e88 <_ZSt13get_terminatev>
 8018e9e:	f7ff ffee 	bl	8018e7e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08018ea4 <_ZSt15get_new_handlerv>:
 8018ea4:	4b02      	ldr	r3, [pc, #8]	; (8018eb0 <_ZSt15get_new_handlerv+0xc>)
 8018ea6:	6818      	ldr	r0, [r3, #0]
 8018ea8:	f3bf 8f5b 	dmb	ish
 8018eac:	4770      	bx	lr
 8018eae:	bf00      	nop
 8018eb0:	2000e03c 	.word	0x2000e03c

08018eb4 <pow>:
 8018eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eb6:	ed2d 8b02 	vpush	{d8}
 8018eba:	eeb0 8a40 	vmov.f32	s16, s0
 8018ebe:	eef0 8a60 	vmov.f32	s17, s1
 8018ec2:	ec55 4b11 	vmov	r4, r5, d1
 8018ec6:	f000 f887 	bl	8018fd8 <__ieee754_pow>
 8018eca:	4622      	mov	r2, r4
 8018ecc:	462b      	mov	r3, r5
 8018ece:	4620      	mov	r0, r4
 8018ed0:	4629      	mov	r1, r5
 8018ed2:	ec57 6b10 	vmov	r6, r7, d0
 8018ed6:	f7e7 fdd9 	bl	8000a8c <__aeabi_dcmpun>
 8018eda:	2800      	cmp	r0, #0
 8018edc:	d13b      	bne.n	8018f56 <pow+0xa2>
 8018ede:	ec51 0b18 	vmov	r0, r1, d8
 8018ee2:	2200      	movs	r2, #0
 8018ee4:	2300      	movs	r3, #0
 8018ee6:	f7e7 fd9f 	bl	8000a28 <__aeabi_dcmpeq>
 8018eea:	b1b8      	cbz	r0, 8018f1c <pow+0x68>
 8018eec:	2200      	movs	r2, #0
 8018eee:	2300      	movs	r3, #0
 8018ef0:	4620      	mov	r0, r4
 8018ef2:	4629      	mov	r1, r5
 8018ef4:	f7e7 fd98 	bl	8000a28 <__aeabi_dcmpeq>
 8018ef8:	2800      	cmp	r0, #0
 8018efa:	d146      	bne.n	8018f8a <pow+0xd6>
 8018efc:	ec45 4b10 	vmov	d0, r4, r5
 8018f00:	f000 ff26 	bl	8019d50 <finite>
 8018f04:	b338      	cbz	r0, 8018f56 <pow+0xa2>
 8018f06:	2200      	movs	r2, #0
 8018f08:	2300      	movs	r3, #0
 8018f0a:	4620      	mov	r0, r4
 8018f0c:	4629      	mov	r1, r5
 8018f0e:	f7e7 fd95 	bl	8000a3c <__aeabi_dcmplt>
 8018f12:	b300      	cbz	r0, 8018f56 <pow+0xa2>
 8018f14:	f001 f894 	bl	801a040 <__errno>
 8018f18:	2322      	movs	r3, #34	; 0x22
 8018f1a:	e01b      	b.n	8018f54 <pow+0xa0>
 8018f1c:	ec47 6b10 	vmov	d0, r6, r7
 8018f20:	f000 ff16 	bl	8019d50 <finite>
 8018f24:	b9e0      	cbnz	r0, 8018f60 <pow+0xac>
 8018f26:	eeb0 0a48 	vmov.f32	s0, s16
 8018f2a:	eef0 0a68 	vmov.f32	s1, s17
 8018f2e:	f000 ff0f 	bl	8019d50 <finite>
 8018f32:	b1a8      	cbz	r0, 8018f60 <pow+0xac>
 8018f34:	ec45 4b10 	vmov	d0, r4, r5
 8018f38:	f000 ff0a 	bl	8019d50 <finite>
 8018f3c:	b180      	cbz	r0, 8018f60 <pow+0xac>
 8018f3e:	4632      	mov	r2, r6
 8018f40:	463b      	mov	r3, r7
 8018f42:	4630      	mov	r0, r6
 8018f44:	4639      	mov	r1, r7
 8018f46:	f7e7 fda1 	bl	8000a8c <__aeabi_dcmpun>
 8018f4a:	2800      	cmp	r0, #0
 8018f4c:	d0e2      	beq.n	8018f14 <pow+0x60>
 8018f4e:	f001 f877 	bl	801a040 <__errno>
 8018f52:	2321      	movs	r3, #33	; 0x21
 8018f54:	6003      	str	r3, [r0, #0]
 8018f56:	ecbd 8b02 	vpop	{d8}
 8018f5a:	ec47 6b10 	vmov	d0, r6, r7
 8018f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f60:	2200      	movs	r2, #0
 8018f62:	2300      	movs	r3, #0
 8018f64:	4630      	mov	r0, r6
 8018f66:	4639      	mov	r1, r7
 8018f68:	f7e7 fd5e 	bl	8000a28 <__aeabi_dcmpeq>
 8018f6c:	2800      	cmp	r0, #0
 8018f6e:	d0f2      	beq.n	8018f56 <pow+0xa2>
 8018f70:	eeb0 0a48 	vmov.f32	s0, s16
 8018f74:	eef0 0a68 	vmov.f32	s1, s17
 8018f78:	f000 feea 	bl	8019d50 <finite>
 8018f7c:	2800      	cmp	r0, #0
 8018f7e:	d0ea      	beq.n	8018f56 <pow+0xa2>
 8018f80:	ec45 4b10 	vmov	d0, r4, r5
 8018f84:	f000 fee4 	bl	8019d50 <finite>
 8018f88:	e7c3      	b.n	8018f12 <pow+0x5e>
 8018f8a:	4f01      	ldr	r7, [pc, #4]	; (8018f90 <pow+0xdc>)
 8018f8c:	2600      	movs	r6, #0
 8018f8e:	e7e2      	b.n	8018f56 <pow+0xa2>
 8018f90:	3ff00000 	.word	0x3ff00000

08018f94 <atan2f>:
 8018f94:	f000 be00 	b.w	8019b98 <__ieee754_atan2f>

08018f98 <sqrtf>:
 8018f98:	b508      	push	{r3, lr}
 8018f9a:	ed2d 8b02 	vpush	{d8}
 8018f9e:	eeb0 8a40 	vmov.f32	s16, s0
 8018fa2:	f000 fe99 	bl	8019cd8 <__ieee754_sqrtf>
 8018fa6:	eeb4 8a48 	vcmp.f32	s16, s16
 8018faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fae:	d60c      	bvs.n	8018fca <sqrtf+0x32>
 8018fb0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8018fd0 <sqrtf+0x38>
 8018fb4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fbc:	d505      	bpl.n	8018fca <sqrtf+0x32>
 8018fbe:	f001 f83f 	bl	801a040 <__errno>
 8018fc2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8018fc6:	2321      	movs	r3, #33	; 0x21
 8018fc8:	6003      	str	r3, [r0, #0]
 8018fca:	ecbd 8b02 	vpop	{d8}
 8018fce:	bd08      	pop	{r3, pc}
	...

08018fd8 <__ieee754_pow>:
 8018fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fdc:	ed2d 8b06 	vpush	{d8-d10}
 8018fe0:	b089      	sub	sp, #36	; 0x24
 8018fe2:	ed8d 1b00 	vstr	d1, [sp]
 8018fe6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8018fea:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8018fee:	ea58 0102 	orrs.w	r1, r8, r2
 8018ff2:	ec57 6b10 	vmov	r6, r7, d0
 8018ff6:	d115      	bne.n	8019024 <__ieee754_pow+0x4c>
 8018ff8:	19b3      	adds	r3, r6, r6
 8018ffa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8018ffe:	4152      	adcs	r2, r2
 8019000:	4299      	cmp	r1, r3
 8019002:	4b89      	ldr	r3, [pc, #548]	; (8019228 <__ieee754_pow+0x250>)
 8019004:	4193      	sbcs	r3, r2
 8019006:	f080 84d2 	bcs.w	80199ae <__ieee754_pow+0x9d6>
 801900a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801900e:	4630      	mov	r0, r6
 8019010:	4639      	mov	r1, r7
 8019012:	f7e7 f8eb 	bl	80001ec <__adddf3>
 8019016:	ec41 0b10 	vmov	d0, r0, r1
 801901a:	b009      	add	sp, #36	; 0x24
 801901c:	ecbd 8b06 	vpop	{d8-d10}
 8019020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019024:	4b81      	ldr	r3, [pc, #516]	; (801922c <__ieee754_pow+0x254>)
 8019026:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801902a:	429c      	cmp	r4, r3
 801902c:	ee10 aa10 	vmov	sl, s0
 8019030:	463d      	mov	r5, r7
 8019032:	dc06      	bgt.n	8019042 <__ieee754_pow+0x6a>
 8019034:	d101      	bne.n	801903a <__ieee754_pow+0x62>
 8019036:	2e00      	cmp	r6, #0
 8019038:	d1e7      	bne.n	801900a <__ieee754_pow+0x32>
 801903a:	4598      	cmp	r8, r3
 801903c:	dc01      	bgt.n	8019042 <__ieee754_pow+0x6a>
 801903e:	d10f      	bne.n	8019060 <__ieee754_pow+0x88>
 8019040:	b172      	cbz	r2, 8019060 <__ieee754_pow+0x88>
 8019042:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8019046:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801904a:	ea55 050a 	orrs.w	r5, r5, sl
 801904e:	d1dc      	bne.n	801900a <__ieee754_pow+0x32>
 8019050:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019054:	18db      	adds	r3, r3, r3
 8019056:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801905a:	4152      	adcs	r2, r2
 801905c:	429d      	cmp	r5, r3
 801905e:	e7d0      	b.n	8019002 <__ieee754_pow+0x2a>
 8019060:	2d00      	cmp	r5, #0
 8019062:	da3b      	bge.n	80190dc <__ieee754_pow+0x104>
 8019064:	4b72      	ldr	r3, [pc, #456]	; (8019230 <__ieee754_pow+0x258>)
 8019066:	4598      	cmp	r8, r3
 8019068:	dc51      	bgt.n	801910e <__ieee754_pow+0x136>
 801906a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801906e:	4598      	cmp	r8, r3
 8019070:	f340 84ac 	ble.w	80199cc <__ieee754_pow+0x9f4>
 8019074:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019078:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801907c:	2b14      	cmp	r3, #20
 801907e:	dd0f      	ble.n	80190a0 <__ieee754_pow+0xc8>
 8019080:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8019084:	fa22 f103 	lsr.w	r1, r2, r3
 8019088:	fa01 f303 	lsl.w	r3, r1, r3
 801908c:	4293      	cmp	r3, r2
 801908e:	f040 849d 	bne.w	80199cc <__ieee754_pow+0x9f4>
 8019092:	f001 0101 	and.w	r1, r1, #1
 8019096:	f1c1 0302 	rsb	r3, r1, #2
 801909a:	9304      	str	r3, [sp, #16]
 801909c:	b182      	cbz	r2, 80190c0 <__ieee754_pow+0xe8>
 801909e:	e05f      	b.n	8019160 <__ieee754_pow+0x188>
 80190a0:	2a00      	cmp	r2, #0
 80190a2:	d15b      	bne.n	801915c <__ieee754_pow+0x184>
 80190a4:	f1c3 0314 	rsb	r3, r3, #20
 80190a8:	fa48 f103 	asr.w	r1, r8, r3
 80190ac:	fa01 f303 	lsl.w	r3, r1, r3
 80190b0:	4543      	cmp	r3, r8
 80190b2:	f040 8488 	bne.w	80199c6 <__ieee754_pow+0x9ee>
 80190b6:	f001 0101 	and.w	r1, r1, #1
 80190ba:	f1c1 0302 	rsb	r3, r1, #2
 80190be:	9304      	str	r3, [sp, #16]
 80190c0:	4b5c      	ldr	r3, [pc, #368]	; (8019234 <__ieee754_pow+0x25c>)
 80190c2:	4598      	cmp	r8, r3
 80190c4:	d132      	bne.n	801912c <__ieee754_pow+0x154>
 80190c6:	f1b9 0f00 	cmp.w	r9, #0
 80190ca:	f280 8478 	bge.w	80199be <__ieee754_pow+0x9e6>
 80190ce:	4959      	ldr	r1, [pc, #356]	; (8019234 <__ieee754_pow+0x25c>)
 80190d0:	4632      	mov	r2, r6
 80190d2:	463b      	mov	r3, r7
 80190d4:	2000      	movs	r0, #0
 80190d6:	f7e7 fb69 	bl	80007ac <__aeabi_ddiv>
 80190da:	e79c      	b.n	8019016 <__ieee754_pow+0x3e>
 80190dc:	2300      	movs	r3, #0
 80190de:	9304      	str	r3, [sp, #16]
 80190e0:	2a00      	cmp	r2, #0
 80190e2:	d13d      	bne.n	8019160 <__ieee754_pow+0x188>
 80190e4:	4b51      	ldr	r3, [pc, #324]	; (801922c <__ieee754_pow+0x254>)
 80190e6:	4598      	cmp	r8, r3
 80190e8:	d1ea      	bne.n	80190c0 <__ieee754_pow+0xe8>
 80190ea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80190ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80190f2:	ea53 030a 	orrs.w	r3, r3, sl
 80190f6:	f000 845a 	beq.w	80199ae <__ieee754_pow+0x9d6>
 80190fa:	4b4f      	ldr	r3, [pc, #316]	; (8019238 <__ieee754_pow+0x260>)
 80190fc:	429c      	cmp	r4, r3
 80190fe:	dd08      	ble.n	8019112 <__ieee754_pow+0x13a>
 8019100:	f1b9 0f00 	cmp.w	r9, #0
 8019104:	f2c0 8457 	blt.w	80199b6 <__ieee754_pow+0x9de>
 8019108:	e9dd 0100 	ldrd	r0, r1, [sp]
 801910c:	e783      	b.n	8019016 <__ieee754_pow+0x3e>
 801910e:	2302      	movs	r3, #2
 8019110:	e7e5      	b.n	80190de <__ieee754_pow+0x106>
 8019112:	f1b9 0f00 	cmp.w	r9, #0
 8019116:	f04f 0000 	mov.w	r0, #0
 801911a:	f04f 0100 	mov.w	r1, #0
 801911e:	f6bf af7a 	bge.w	8019016 <__ieee754_pow+0x3e>
 8019122:	e9dd 0300 	ldrd	r0, r3, [sp]
 8019126:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801912a:	e774      	b.n	8019016 <__ieee754_pow+0x3e>
 801912c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8019130:	d106      	bne.n	8019140 <__ieee754_pow+0x168>
 8019132:	4632      	mov	r2, r6
 8019134:	463b      	mov	r3, r7
 8019136:	4630      	mov	r0, r6
 8019138:	4639      	mov	r1, r7
 801913a:	f7e7 fa0d 	bl	8000558 <__aeabi_dmul>
 801913e:	e76a      	b.n	8019016 <__ieee754_pow+0x3e>
 8019140:	4b3e      	ldr	r3, [pc, #248]	; (801923c <__ieee754_pow+0x264>)
 8019142:	4599      	cmp	r9, r3
 8019144:	d10c      	bne.n	8019160 <__ieee754_pow+0x188>
 8019146:	2d00      	cmp	r5, #0
 8019148:	db0a      	blt.n	8019160 <__ieee754_pow+0x188>
 801914a:	ec47 6b10 	vmov	d0, r6, r7
 801914e:	b009      	add	sp, #36	; 0x24
 8019150:	ecbd 8b06 	vpop	{d8-d10}
 8019154:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019158:	f000 bc6c 	b.w	8019a34 <__ieee754_sqrt>
 801915c:	2300      	movs	r3, #0
 801915e:	9304      	str	r3, [sp, #16]
 8019160:	ec47 6b10 	vmov	d0, r6, r7
 8019164:	f000 fdeb 	bl	8019d3e <fabs>
 8019168:	ec51 0b10 	vmov	r0, r1, d0
 801916c:	f1ba 0f00 	cmp.w	sl, #0
 8019170:	d129      	bne.n	80191c6 <__ieee754_pow+0x1ee>
 8019172:	b124      	cbz	r4, 801917e <__ieee754_pow+0x1a6>
 8019174:	4b2f      	ldr	r3, [pc, #188]	; (8019234 <__ieee754_pow+0x25c>)
 8019176:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801917a:	429a      	cmp	r2, r3
 801917c:	d123      	bne.n	80191c6 <__ieee754_pow+0x1ee>
 801917e:	f1b9 0f00 	cmp.w	r9, #0
 8019182:	da05      	bge.n	8019190 <__ieee754_pow+0x1b8>
 8019184:	4602      	mov	r2, r0
 8019186:	460b      	mov	r3, r1
 8019188:	2000      	movs	r0, #0
 801918a:	492a      	ldr	r1, [pc, #168]	; (8019234 <__ieee754_pow+0x25c>)
 801918c:	f7e7 fb0e 	bl	80007ac <__aeabi_ddiv>
 8019190:	2d00      	cmp	r5, #0
 8019192:	f6bf af40 	bge.w	8019016 <__ieee754_pow+0x3e>
 8019196:	9b04      	ldr	r3, [sp, #16]
 8019198:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801919c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80191a0:	4323      	orrs	r3, r4
 80191a2:	d108      	bne.n	80191b6 <__ieee754_pow+0x1de>
 80191a4:	4602      	mov	r2, r0
 80191a6:	460b      	mov	r3, r1
 80191a8:	4610      	mov	r0, r2
 80191aa:	4619      	mov	r1, r3
 80191ac:	f7e7 f81c 	bl	80001e8 <__aeabi_dsub>
 80191b0:	4602      	mov	r2, r0
 80191b2:	460b      	mov	r3, r1
 80191b4:	e78f      	b.n	80190d6 <__ieee754_pow+0xfe>
 80191b6:	9b04      	ldr	r3, [sp, #16]
 80191b8:	2b01      	cmp	r3, #1
 80191ba:	f47f af2c 	bne.w	8019016 <__ieee754_pow+0x3e>
 80191be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80191c2:	4619      	mov	r1, r3
 80191c4:	e727      	b.n	8019016 <__ieee754_pow+0x3e>
 80191c6:	0feb      	lsrs	r3, r5, #31
 80191c8:	3b01      	subs	r3, #1
 80191ca:	9306      	str	r3, [sp, #24]
 80191cc:	9a06      	ldr	r2, [sp, #24]
 80191ce:	9b04      	ldr	r3, [sp, #16]
 80191d0:	4313      	orrs	r3, r2
 80191d2:	d102      	bne.n	80191da <__ieee754_pow+0x202>
 80191d4:	4632      	mov	r2, r6
 80191d6:	463b      	mov	r3, r7
 80191d8:	e7e6      	b.n	80191a8 <__ieee754_pow+0x1d0>
 80191da:	4b19      	ldr	r3, [pc, #100]	; (8019240 <__ieee754_pow+0x268>)
 80191dc:	4598      	cmp	r8, r3
 80191de:	f340 80fb 	ble.w	80193d8 <__ieee754_pow+0x400>
 80191e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80191e6:	4598      	cmp	r8, r3
 80191e8:	4b13      	ldr	r3, [pc, #76]	; (8019238 <__ieee754_pow+0x260>)
 80191ea:	dd0c      	ble.n	8019206 <__ieee754_pow+0x22e>
 80191ec:	429c      	cmp	r4, r3
 80191ee:	dc0f      	bgt.n	8019210 <__ieee754_pow+0x238>
 80191f0:	f1b9 0f00 	cmp.w	r9, #0
 80191f4:	da0f      	bge.n	8019216 <__ieee754_pow+0x23e>
 80191f6:	2000      	movs	r0, #0
 80191f8:	b009      	add	sp, #36	; 0x24
 80191fa:	ecbd 8b06 	vpop	{d8-d10}
 80191fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019202:	f000 bd93 	b.w	8019d2c <__math_oflow>
 8019206:	429c      	cmp	r4, r3
 8019208:	dbf2      	blt.n	80191f0 <__ieee754_pow+0x218>
 801920a:	4b0a      	ldr	r3, [pc, #40]	; (8019234 <__ieee754_pow+0x25c>)
 801920c:	429c      	cmp	r4, r3
 801920e:	dd19      	ble.n	8019244 <__ieee754_pow+0x26c>
 8019210:	f1b9 0f00 	cmp.w	r9, #0
 8019214:	dcef      	bgt.n	80191f6 <__ieee754_pow+0x21e>
 8019216:	2000      	movs	r0, #0
 8019218:	b009      	add	sp, #36	; 0x24
 801921a:	ecbd 8b06 	vpop	{d8-d10}
 801921e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019222:	f000 bd7a 	b.w	8019d1a <__math_uflow>
 8019226:	bf00      	nop
 8019228:	fff00000 	.word	0xfff00000
 801922c:	7ff00000 	.word	0x7ff00000
 8019230:	433fffff 	.word	0x433fffff
 8019234:	3ff00000 	.word	0x3ff00000
 8019238:	3fefffff 	.word	0x3fefffff
 801923c:	3fe00000 	.word	0x3fe00000
 8019240:	41e00000 	.word	0x41e00000
 8019244:	4b60      	ldr	r3, [pc, #384]	; (80193c8 <__ieee754_pow+0x3f0>)
 8019246:	2200      	movs	r2, #0
 8019248:	f7e6 ffce 	bl	80001e8 <__aeabi_dsub>
 801924c:	a354      	add	r3, pc, #336	; (adr r3, 80193a0 <__ieee754_pow+0x3c8>)
 801924e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019252:	4604      	mov	r4, r0
 8019254:	460d      	mov	r5, r1
 8019256:	f7e7 f97f 	bl	8000558 <__aeabi_dmul>
 801925a:	a353      	add	r3, pc, #332	; (adr r3, 80193a8 <__ieee754_pow+0x3d0>)
 801925c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019260:	4606      	mov	r6, r0
 8019262:	460f      	mov	r7, r1
 8019264:	4620      	mov	r0, r4
 8019266:	4629      	mov	r1, r5
 8019268:	f7e7 f976 	bl	8000558 <__aeabi_dmul>
 801926c:	4b57      	ldr	r3, [pc, #348]	; (80193cc <__ieee754_pow+0x3f4>)
 801926e:	4682      	mov	sl, r0
 8019270:	468b      	mov	fp, r1
 8019272:	2200      	movs	r2, #0
 8019274:	4620      	mov	r0, r4
 8019276:	4629      	mov	r1, r5
 8019278:	f7e7 f96e 	bl	8000558 <__aeabi_dmul>
 801927c:	4602      	mov	r2, r0
 801927e:	460b      	mov	r3, r1
 8019280:	a14b      	add	r1, pc, #300	; (adr r1, 80193b0 <__ieee754_pow+0x3d8>)
 8019282:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019286:	f7e6 ffaf 	bl	80001e8 <__aeabi_dsub>
 801928a:	4622      	mov	r2, r4
 801928c:	462b      	mov	r3, r5
 801928e:	f7e7 f963 	bl	8000558 <__aeabi_dmul>
 8019292:	4602      	mov	r2, r0
 8019294:	460b      	mov	r3, r1
 8019296:	2000      	movs	r0, #0
 8019298:	494d      	ldr	r1, [pc, #308]	; (80193d0 <__ieee754_pow+0x3f8>)
 801929a:	f7e6 ffa5 	bl	80001e8 <__aeabi_dsub>
 801929e:	4622      	mov	r2, r4
 80192a0:	4680      	mov	r8, r0
 80192a2:	4689      	mov	r9, r1
 80192a4:	462b      	mov	r3, r5
 80192a6:	4620      	mov	r0, r4
 80192a8:	4629      	mov	r1, r5
 80192aa:	f7e7 f955 	bl	8000558 <__aeabi_dmul>
 80192ae:	4602      	mov	r2, r0
 80192b0:	460b      	mov	r3, r1
 80192b2:	4640      	mov	r0, r8
 80192b4:	4649      	mov	r1, r9
 80192b6:	f7e7 f94f 	bl	8000558 <__aeabi_dmul>
 80192ba:	a33f      	add	r3, pc, #252	; (adr r3, 80193b8 <__ieee754_pow+0x3e0>)
 80192bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192c0:	f7e7 f94a 	bl	8000558 <__aeabi_dmul>
 80192c4:	4602      	mov	r2, r0
 80192c6:	460b      	mov	r3, r1
 80192c8:	4650      	mov	r0, sl
 80192ca:	4659      	mov	r1, fp
 80192cc:	f7e6 ff8c 	bl	80001e8 <__aeabi_dsub>
 80192d0:	4602      	mov	r2, r0
 80192d2:	460b      	mov	r3, r1
 80192d4:	4680      	mov	r8, r0
 80192d6:	4689      	mov	r9, r1
 80192d8:	4630      	mov	r0, r6
 80192da:	4639      	mov	r1, r7
 80192dc:	f7e6 ff86 	bl	80001ec <__adddf3>
 80192e0:	2000      	movs	r0, #0
 80192e2:	4632      	mov	r2, r6
 80192e4:	463b      	mov	r3, r7
 80192e6:	4604      	mov	r4, r0
 80192e8:	460d      	mov	r5, r1
 80192ea:	f7e6 ff7d 	bl	80001e8 <__aeabi_dsub>
 80192ee:	4602      	mov	r2, r0
 80192f0:	460b      	mov	r3, r1
 80192f2:	4640      	mov	r0, r8
 80192f4:	4649      	mov	r1, r9
 80192f6:	f7e6 ff77 	bl	80001e8 <__aeabi_dsub>
 80192fa:	9b04      	ldr	r3, [sp, #16]
 80192fc:	9a06      	ldr	r2, [sp, #24]
 80192fe:	3b01      	subs	r3, #1
 8019300:	4313      	orrs	r3, r2
 8019302:	4682      	mov	sl, r0
 8019304:	468b      	mov	fp, r1
 8019306:	f040 81e7 	bne.w	80196d8 <__ieee754_pow+0x700>
 801930a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80193c0 <__ieee754_pow+0x3e8>
 801930e:	eeb0 8a47 	vmov.f32	s16, s14
 8019312:	eef0 8a67 	vmov.f32	s17, s15
 8019316:	e9dd 6700 	ldrd	r6, r7, [sp]
 801931a:	2600      	movs	r6, #0
 801931c:	4632      	mov	r2, r6
 801931e:	463b      	mov	r3, r7
 8019320:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019324:	f7e6 ff60 	bl	80001e8 <__aeabi_dsub>
 8019328:	4622      	mov	r2, r4
 801932a:	462b      	mov	r3, r5
 801932c:	f7e7 f914 	bl	8000558 <__aeabi_dmul>
 8019330:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019334:	4680      	mov	r8, r0
 8019336:	4689      	mov	r9, r1
 8019338:	4650      	mov	r0, sl
 801933a:	4659      	mov	r1, fp
 801933c:	f7e7 f90c 	bl	8000558 <__aeabi_dmul>
 8019340:	4602      	mov	r2, r0
 8019342:	460b      	mov	r3, r1
 8019344:	4640      	mov	r0, r8
 8019346:	4649      	mov	r1, r9
 8019348:	f7e6 ff50 	bl	80001ec <__adddf3>
 801934c:	4632      	mov	r2, r6
 801934e:	463b      	mov	r3, r7
 8019350:	4680      	mov	r8, r0
 8019352:	4689      	mov	r9, r1
 8019354:	4620      	mov	r0, r4
 8019356:	4629      	mov	r1, r5
 8019358:	f7e7 f8fe 	bl	8000558 <__aeabi_dmul>
 801935c:	460b      	mov	r3, r1
 801935e:	4604      	mov	r4, r0
 8019360:	460d      	mov	r5, r1
 8019362:	4602      	mov	r2, r0
 8019364:	4649      	mov	r1, r9
 8019366:	4640      	mov	r0, r8
 8019368:	f7e6 ff40 	bl	80001ec <__adddf3>
 801936c:	4b19      	ldr	r3, [pc, #100]	; (80193d4 <__ieee754_pow+0x3fc>)
 801936e:	4299      	cmp	r1, r3
 8019370:	ec45 4b19 	vmov	d9, r4, r5
 8019374:	4606      	mov	r6, r0
 8019376:	460f      	mov	r7, r1
 8019378:	468b      	mov	fp, r1
 801937a:	f340 82f1 	ble.w	8019960 <__ieee754_pow+0x988>
 801937e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8019382:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8019386:	4303      	orrs	r3, r0
 8019388:	f000 81e4 	beq.w	8019754 <__ieee754_pow+0x77c>
 801938c:	ec51 0b18 	vmov	r0, r1, d8
 8019390:	2200      	movs	r2, #0
 8019392:	2300      	movs	r3, #0
 8019394:	f7e7 fb52 	bl	8000a3c <__aeabi_dcmplt>
 8019398:	3800      	subs	r0, #0
 801939a:	bf18      	it	ne
 801939c:	2001      	movne	r0, #1
 801939e:	e72b      	b.n	80191f8 <__ieee754_pow+0x220>
 80193a0:	60000000 	.word	0x60000000
 80193a4:	3ff71547 	.word	0x3ff71547
 80193a8:	f85ddf44 	.word	0xf85ddf44
 80193ac:	3e54ae0b 	.word	0x3e54ae0b
 80193b0:	55555555 	.word	0x55555555
 80193b4:	3fd55555 	.word	0x3fd55555
 80193b8:	652b82fe 	.word	0x652b82fe
 80193bc:	3ff71547 	.word	0x3ff71547
 80193c0:	00000000 	.word	0x00000000
 80193c4:	bff00000 	.word	0xbff00000
 80193c8:	3ff00000 	.word	0x3ff00000
 80193cc:	3fd00000 	.word	0x3fd00000
 80193d0:	3fe00000 	.word	0x3fe00000
 80193d4:	408fffff 	.word	0x408fffff
 80193d8:	4bd5      	ldr	r3, [pc, #852]	; (8019730 <__ieee754_pow+0x758>)
 80193da:	402b      	ands	r3, r5
 80193dc:	2200      	movs	r2, #0
 80193de:	b92b      	cbnz	r3, 80193ec <__ieee754_pow+0x414>
 80193e0:	4bd4      	ldr	r3, [pc, #848]	; (8019734 <__ieee754_pow+0x75c>)
 80193e2:	f7e7 f8b9 	bl	8000558 <__aeabi_dmul>
 80193e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80193ea:	460c      	mov	r4, r1
 80193ec:	1523      	asrs	r3, r4, #20
 80193ee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80193f2:	4413      	add	r3, r2
 80193f4:	9305      	str	r3, [sp, #20]
 80193f6:	4bd0      	ldr	r3, [pc, #832]	; (8019738 <__ieee754_pow+0x760>)
 80193f8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80193fc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019400:	429c      	cmp	r4, r3
 8019402:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019406:	dd08      	ble.n	801941a <__ieee754_pow+0x442>
 8019408:	4bcc      	ldr	r3, [pc, #816]	; (801973c <__ieee754_pow+0x764>)
 801940a:	429c      	cmp	r4, r3
 801940c:	f340 8162 	ble.w	80196d4 <__ieee754_pow+0x6fc>
 8019410:	9b05      	ldr	r3, [sp, #20]
 8019412:	3301      	adds	r3, #1
 8019414:	9305      	str	r3, [sp, #20]
 8019416:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801941a:	2400      	movs	r4, #0
 801941c:	00e3      	lsls	r3, r4, #3
 801941e:	9307      	str	r3, [sp, #28]
 8019420:	4bc7      	ldr	r3, [pc, #796]	; (8019740 <__ieee754_pow+0x768>)
 8019422:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019426:	ed93 7b00 	vldr	d7, [r3]
 801942a:	4629      	mov	r1, r5
 801942c:	ec53 2b17 	vmov	r2, r3, d7
 8019430:	eeb0 9a47 	vmov.f32	s18, s14
 8019434:	eef0 9a67 	vmov.f32	s19, s15
 8019438:	4682      	mov	sl, r0
 801943a:	f7e6 fed5 	bl	80001e8 <__aeabi_dsub>
 801943e:	4652      	mov	r2, sl
 8019440:	4606      	mov	r6, r0
 8019442:	460f      	mov	r7, r1
 8019444:	462b      	mov	r3, r5
 8019446:	ec51 0b19 	vmov	r0, r1, d9
 801944a:	f7e6 fecf 	bl	80001ec <__adddf3>
 801944e:	4602      	mov	r2, r0
 8019450:	460b      	mov	r3, r1
 8019452:	2000      	movs	r0, #0
 8019454:	49bb      	ldr	r1, [pc, #748]	; (8019744 <__ieee754_pow+0x76c>)
 8019456:	f7e7 f9a9 	bl	80007ac <__aeabi_ddiv>
 801945a:	ec41 0b1a 	vmov	d10, r0, r1
 801945e:	4602      	mov	r2, r0
 8019460:	460b      	mov	r3, r1
 8019462:	4630      	mov	r0, r6
 8019464:	4639      	mov	r1, r7
 8019466:	f7e7 f877 	bl	8000558 <__aeabi_dmul>
 801946a:	2300      	movs	r3, #0
 801946c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019470:	9302      	str	r3, [sp, #8]
 8019472:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8019476:	46ab      	mov	fp, r5
 8019478:	106d      	asrs	r5, r5, #1
 801947a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801947e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8019482:	ec41 0b18 	vmov	d8, r0, r1
 8019486:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801948a:	2200      	movs	r2, #0
 801948c:	4640      	mov	r0, r8
 801948e:	4649      	mov	r1, r9
 8019490:	4614      	mov	r4, r2
 8019492:	461d      	mov	r5, r3
 8019494:	f7e7 f860 	bl	8000558 <__aeabi_dmul>
 8019498:	4602      	mov	r2, r0
 801949a:	460b      	mov	r3, r1
 801949c:	4630      	mov	r0, r6
 801949e:	4639      	mov	r1, r7
 80194a0:	f7e6 fea2 	bl	80001e8 <__aeabi_dsub>
 80194a4:	ec53 2b19 	vmov	r2, r3, d9
 80194a8:	4606      	mov	r6, r0
 80194aa:	460f      	mov	r7, r1
 80194ac:	4620      	mov	r0, r4
 80194ae:	4629      	mov	r1, r5
 80194b0:	f7e6 fe9a 	bl	80001e8 <__aeabi_dsub>
 80194b4:	4602      	mov	r2, r0
 80194b6:	460b      	mov	r3, r1
 80194b8:	4650      	mov	r0, sl
 80194ba:	4659      	mov	r1, fp
 80194bc:	f7e6 fe94 	bl	80001e8 <__aeabi_dsub>
 80194c0:	4642      	mov	r2, r8
 80194c2:	464b      	mov	r3, r9
 80194c4:	f7e7 f848 	bl	8000558 <__aeabi_dmul>
 80194c8:	4602      	mov	r2, r0
 80194ca:	460b      	mov	r3, r1
 80194cc:	4630      	mov	r0, r6
 80194ce:	4639      	mov	r1, r7
 80194d0:	f7e6 fe8a 	bl	80001e8 <__aeabi_dsub>
 80194d4:	ec53 2b1a 	vmov	r2, r3, d10
 80194d8:	f7e7 f83e 	bl	8000558 <__aeabi_dmul>
 80194dc:	ec53 2b18 	vmov	r2, r3, d8
 80194e0:	ec41 0b19 	vmov	d9, r0, r1
 80194e4:	ec51 0b18 	vmov	r0, r1, d8
 80194e8:	f7e7 f836 	bl	8000558 <__aeabi_dmul>
 80194ec:	a37c      	add	r3, pc, #496	; (adr r3, 80196e0 <__ieee754_pow+0x708>)
 80194ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194f2:	4604      	mov	r4, r0
 80194f4:	460d      	mov	r5, r1
 80194f6:	f7e7 f82f 	bl	8000558 <__aeabi_dmul>
 80194fa:	a37b      	add	r3, pc, #492	; (adr r3, 80196e8 <__ieee754_pow+0x710>)
 80194fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019500:	f7e6 fe74 	bl	80001ec <__adddf3>
 8019504:	4622      	mov	r2, r4
 8019506:	462b      	mov	r3, r5
 8019508:	f7e7 f826 	bl	8000558 <__aeabi_dmul>
 801950c:	a378      	add	r3, pc, #480	; (adr r3, 80196f0 <__ieee754_pow+0x718>)
 801950e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019512:	f7e6 fe6b 	bl	80001ec <__adddf3>
 8019516:	4622      	mov	r2, r4
 8019518:	462b      	mov	r3, r5
 801951a:	f7e7 f81d 	bl	8000558 <__aeabi_dmul>
 801951e:	a376      	add	r3, pc, #472	; (adr r3, 80196f8 <__ieee754_pow+0x720>)
 8019520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019524:	f7e6 fe62 	bl	80001ec <__adddf3>
 8019528:	4622      	mov	r2, r4
 801952a:	462b      	mov	r3, r5
 801952c:	f7e7 f814 	bl	8000558 <__aeabi_dmul>
 8019530:	a373      	add	r3, pc, #460	; (adr r3, 8019700 <__ieee754_pow+0x728>)
 8019532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019536:	f7e6 fe59 	bl	80001ec <__adddf3>
 801953a:	4622      	mov	r2, r4
 801953c:	462b      	mov	r3, r5
 801953e:	f7e7 f80b 	bl	8000558 <__aeabi_dmul>
 8019542:	a371      	add	r3, pc, #452	; (adr r3, 8019708 <__ieee754_pow+0x730>)
 8019544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019548:	f7e6 fe50 	bl	80001ec <__adddf3>
 801954c:	4622      	mov	r2, r4
 801954e:	4606      	mov	r6, r0
 8019550:	460f      	mov	r7, r1
 8019552:	462b      	mov	r3, r5
 8019554:	4620      	mov	r0, r4
 8019556:	4629      	mov	r1, r5
 8019558:	f7e6 fffe 	bl	8000558 <__aeabi_dmul>
 801955c:	4602      	mov	r2, r0
 801955e:	460b      	mov	r3, r1
 8019560:	4630      	mov	r0, r6
 8019562:	4639      	mov	r1, r7
 8019564:	f7e6 fff8 	bl	8000558 <__aeabi_dmul>
 8019568:	4642      	mov	r2, r8
 801956a:	4604      	mov	r4, r0
 801956c:	460d      	mov	r5, r1
 801956e:	464b      	mov	r3, r9
 8019570:	ec51 0b18 	vmov	r0, r1, d8
 8019574:	f7e6 fe3a 	bl	80001ec <__adddf3>
 8019578:	ec53 2b19 	vmov	r2, r3, d9
 801957c:	f7e6 ffec 	bl	8000558 <__aeabi_dmul>
 8019580:	4622      	mov	r2, r4
 8019582:	462b      	mov	r3, r5
 8019584:	f7e6 fe32 	bl	80001ec <__adddf3>
 8019588:	4642      	mov	r2, r8
 801958a:	4682      	mov	sl, r0
 801958c:	468b      	mov	fp, r1
 801958e:	464b      	mov	r3, r9
 8019590:	4640      	mov	r0, r8
 8019592:	4649      	mov	r1, r9
 8019594:	f7e6 ffe0 	bl	8000558 <__aeabi_dmul>
 8019598:	4b6b      	ldr	r3, [pc, #428]	; (8019748 <__ieee754_pow+0x770>)
 801959a:	2200      	movs	r2, #0
 801959c:	4606      	mov	r6, r0
 801959e:	460f      	mov	r7, r1
 80195a0:	f7e6 fe24 	bl	80001ec <__adddf3>
 80195a4:	4652      	mov	r2, sl
 80195a6:	465b      	mov	r3, fp
 80195a8:	f7e6 fe20 	bl	80001ec <__adddf3>
 80195ac:	2000      	movs	r0, #0
 80195ae:	4604      	mov	r4, r0
 80195b0:	460d      	mov	r5, r1
 80195b2:	4602      	mov	r2, r0
 80195b4:	460b      	mov	r3, r1
 80195b6:	4640      	mov	r0, r8
 80195b8:	4649      	mov	r1, r9
 80195ba:	f7e6 ffcd 	bl	8000558 <__aeabi_dmul>
 80195be:	4b62      	ldr	r3, [pc, #392]	; (8019748 <__ieee754_pow+0x770>)
 80195c0:	4680      	mov	r8, r0
 80195c2:	4689      	mov	r9, r1
 80195c4:	2200      	movs	r2, #0
 80195c6:	4620      	mov	r0, r4
 80195c8:	4629      	mov	r1, r5
 80195ca:	f7e6 fe0d 	bl	80001e8 <__aeabi_dsub>
 80195ce:	4632      	mov	r2, r6
 80195d0:	463b      	mov	r3, r7
 80195d2:	f7e6 fe09 	bl	80001e8 <__aeabi_dsub>
 80195d6:	4602      	mov	r2, r0
 80195d8:	460b      	mov	r3, r1
 80195da:	4650      	mov	r0, sl
 80195dc:	4659      	mov	r1, fp
 80195de:	f7e6 fe03 	bl	80001e8 <__aeabi_dsub>
 80195e2:	ec53 2b18 	vmov	r2, r3, d8
 80195e6:	f7e6 ffb7 	bl	8000558 <__aeabi_dmul>
 80195ea:	4622      	mov	r2, r4
 80195ec:	4606      	mov	r6, r0
 80195ee:	460f      	mov	r7, r1
 80195f0:	462b      	mov	r3, r5
 80195f2:	ec51 0b19 	vmov	r0, r1, d9
 80195f6:	f7e6 ffaf 	bl	8000558 <__aeabi_dmul>
 80195fa:	4602      	mov	r2, r0
 80195fc:	460b      	mov	r3, r1
 80195fe:	4630      	mov	r0, r6
 8019600:	4639      	mov	r1, r7
 8019602:	f7e6 fdf3 	bl	80001ec <__adddf3>
 8019606:	4606      	mov	r6, r0
 8019608:	460f      	mov	r7, r1
 801960a:	4602      	mov	r2, r0
 801960c:	460b      	mov	r3, r1
 801960e:	4640      	mov	r0, r8
 8019610:	4649      	mov	r1, r9
 8019612:	f7e6 fdeb 	bl	80001ec <__adddf3>
 8019616:	a33e      	add	r3, pc, #248	; (adr r3, 8019710 <__ieee754_pow+0x738>)
 8019618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801961c:	2000      	movs	r0, #0
 801961e:	4604      	mov	r4, r0
 8019620:	460d      	mov	r5, r1
 8019622:	f7e6 ff99 	bl	8000558 <__aeabi_dmul>
 8019626:	4642      	mov	r2, r8
 8019628:	ec41 0b18 	vmov	d8, r0, r1
 801962c:	464b      	mov	r3, r9
 801962e:	4620      	mov	r0, r4
 8019630:	4629      	mov	r1, r5
 8019632:	f7e6 fdd9 	bl	80001e8 <__aeabi_dsub>
 8019636:	4602      	mov	r2, r0
 8019638:	460b      	mov	r3, r1
 801963a:	4630      	mov	r0, r6
 801963c:	4639      	mov	r1, r7
 801963e:	f7e6 fdd3 	bl	80001e8 <__aeabi_dsub>
 8019642:	a335      	add	r3, pc, #212	; (adr r3, 8019718 <__ieee754_pow+0x740>)
 8019644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019648:	f7e6 ff86 	bl	8000558 <__aeabi_dmul>
 801964c:	a334      	add	r3, pc, #208	; (adr r3, 8019720 <__ieee754_pow+0x748>)
 801964e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019652:	4606      	mov	r6, r0
 8019654:	460f      	mov	r7, r1
 8019656:	4620      	mov	r0, r4
 8019658:	4629      	mov	r1, r5
 801965a:	f7e6 ff7d 	bl	8000558 <__aeabi_dmul>
 801965e:	4602      	mov	r2, r0
 8019660:	460b      	mov	r3, r1
 8019662:	4630      	mov	r0, r6
 8019664:	4639      	mov	r1, r7
 8019666:	f7e6 fdc1 	bl	80001ec <__adddf3>
 801966a:	9a07      	ldr	r2, [sp, #28]
 801966c:	4b37      	ldr	r3, [pc, #220]	; (801974c <__ieee754_pow+0x774>)
 801966e:	4413      	add	r3, r2
 8019670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019674:	f7e6 fdba 	bl	80001ec <__adddf3>
 8019678:	4682      	mov	sl, r0
 801967a:	9805      	ldr	r0, [sp, #20]
 801967c:	468b      	mov	fp, r1
 801967e:	f7e6 ff01 	bl	8000484 <__aeabi_i2d>
 8019682:	9a07      	ldr	r2, [sp, #28]
 8019684:	4b32      	ldr	r3, [pc, #200]	; (8019750 <__ieee754_pow+0x778>)
 8019686:	4413      	add	r3, r2
 8019688:	e9d3 8900 	ldrd	r8, r9, [r3]
 801968c:	4606      	mov	r6, r0
 801968e:	460f      	mov	r7, r1
 8019690:	4652      	mov	r2, sl
 8019692:	465b      	mov	r3, fp
 8019694:	ec51 0b18 	vmov	r0, r1, d8
 8019698:	f7e6 fda8 	bl	80001ec <__adddf3>
 801969c:	4642      	mov	r2, r8
 801969e:	464b      	mov	r3, r9
 80196a0:	f7e6 fda4 	bl	80001ec <__adddf3>
 80196a4:	4632      	mov	r2, r6
 80196a6:	463b      	mov	r3, r7
 80196a8:	f7e6 fda0 	bl	80001ec <__adddf3>
 80196ac:	2000      	movs	r0, #0
 80196ae:	4632      	mov	r2, r6
 80196b0:	463b      	mov	r3, r7
 80196b2:	4604      	mov	r4, r0
 80196b4:	460d      	mov	r5, r1
 80196b6:	f7e6 fd97 	bl	80001e8 <__aeabi_dsub>
 80196ba:	4642      	mov	r2, r8
 80196bc:	464b      	mov	r3, r9
 80196be:	f7e6 fd93 	bl	80001e8 <__aeabi_dsub>
 80196c2:	ec53 2b18 	vmov	r2, r3, d8
 80196c6:	f7e6 fd8f 	bl	80001e8 <__aeabi_dsub>
 80196ca:	4602      	mov	r2, r0
 80196cc:	460b      	mov	r3, r1
 80196ce:	4650      	mov	r0, sl
 80196d0:	4659      	mov	r1, fp
 80196d2:	e610      	b.n	80192f6 <__ieee754_pow+0x31e>
 80196d4:	2401      	movs	r4, #1
 80196d6:	e6a1      	b.n	801941c <__ieee754_pow+0x444>
 80196d8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8019728 <__ieee754_pow+0x750>
 80196dc:	e617      	b.n	801930e <__ieee754_pow+0x336>
 80196de:	bf00      	nop
 80196e0:	4a454eef 	.word	0x4a454eef
 80196e4:	3fca7e28 	.word	0x3fca7e28
 80196e8:	93c9db65 	.word	0x93c9db65
 80196ec:	3fcd864a 	.word	0x3fcd864a
 80196f0:	a91d4101 	.word	0xa91d4101
 80196f4:	3fd17460 	.word	0x3fd17460
 80196f8:	518f264d 	.word	0x518f264d
 80196fc:	3fd55555 	.word	0x3fd55555
 8019700:	db6fabff 	.word	0xdb6fabff
 8019704:	3fdb6db6 	.word	0x3fdb6db6
 8019708:	33333303 	.word	0x33333303
 801970c:	3fe33333 	.word	0x3fe33333
 8019710:	e0000000 	.word	0xe0000000
 8019714:	3feec709 	.word	0x3feec709
 8019718:	dc3a03fd 	.word	0xdc3a03fd
 801971c:	3feec709 	.word	0x3feec709
 8019720:	145b01f5 	.word	0x145b01f5
 8019724:	be3e2fe0 	.word	0xbe3e2fe0
 8019728:	00000000 	.word	0x00000000
 801972c:	3ff00000 	.word	0x3ff00000
 8019730:	7ff00000 	.word	0x7ff00000
 8019734:	43400000 	.word	0x43400000
 8019738:	0003988e 	.word	0x0003988e
 801973c:	000bb679 	.word	0x000bb679
 8019740:	0802e7e0 	.word	0x0802e7e0
 8019744:	3ff00000 	.word	0x3ff00000
 8019748:	40080000 	.word	0x40080000
 801974c:	0802e800 	.word	0x0802e800
 8019750:	0802e7f0 	.word	0x0802e7f0
 8019754:	a3b5      	add	r3, pc, #724	; (adr r3, 8019a2c <__ieee754_pow+0xa54>)
 8019756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801975a:	4640      	mov	r0, r8
 801975c:	4649      	mov	r1, r9
 801975e:	f7e6 fd45 	bl	80001ec <__adddf3>
 8019762:	4622      	mov	r2, r4
 8019764:	ec41 0b1a 	vmov	d10, r0, r1
 8019768:	462b      	mov	r3, r5
 801976a:	4630      	mov	r0, r6
 801976c:	4639      	mov	r1, r7
 801976e:	f7e6 fd3b 	bl	80001e8 <__aeabi_dsub>
 8019772:	4602      	mov	r2, r0
 8019774:	460b      	mov	r3, r1
 8019776:	ec51 0b1a 	vmov	r0, r1, d10
 801977a:	f7e7 f97d 	bl	8000a78 <__aeabi_dcmpgt>
 801977e:	2800      	cmp	r0, #0
 8019780:	f47f ae04 	bne.w	801938c <__ieee754_pow+0x3b4>
 8019784:	4aa4      	ldr	r2, [pc, #656]	; (8019a18 <__ieee754_pow+0xa40>)
 8019786:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801978a:	4293      	cmp	r3, r2
 801978c:	f340 8108 	ble.w	80199a0 <__ieee754_pow+0x9c8>
 8019790:	151b      	asrs	r3, r3, #20
 8019792:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8019796:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801979a:	fa4a f303 	asr.w	r3, sl, r3
 801979e:	445b      	add	r3, fp
 80197a0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80197a4:	4e9d      	ldr	r6, [pc, #628]	; (8019a1c <__ieee754_pow+0xa44>)
 80197a6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80197aa:	4116      	asrs	r6, r2
 80197ac:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80197b0:	2000      	movs	r0, #0
 80197b2:	ea23 0106 	bic.w	r1, r3, r6
 80197b6:	f1c2 0214 	rsb	r2, r2, #20
 80197ba:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80197be:	fa4a fa02 	asr.w	sl, sl, r2
 80197c2:	f1bb 0f00 	cmp.w	fp, #0
 80197c6:	4602      	mov	r2, r0
 80197c8:	460b      	mov	r3, r1
 80197ca:	4620      	mov	r0, r4
 80197cc:	4629      	mov	r1, r5
 80197ce:	bfb8      	it	lt
 80197d0:	f1ca 0a00 	rsblt	sl, sl, #0
 80197d4:	f7e6 fd08 	bl	80001e8 <__aeabi_dsub>
 80197d8:	ec41 0b19 	vmov	d9, r0, r1
 80197dc:	4642      	mov	r2, r8
 80197de:	464b      	mov	r3, r9
 80197e0:	ec51 0b19 	vmov	r0, r1, d9
 80197e4:	f7e6 fd02 	bl	80001ec <__adddf3>
 80197e8:	a37b      	add	r3, pc, #492	; (adr r3, 80199d8 <__ieee754_pow+0xa00>)
 80197ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197ee:	2000      	movs	r0, #0
 80197f0:	4604      	mov	r4, r0
 80197f2:	460d      	mov	r5, r1
 80197f4:	f7e6 feb0 	bl	8000558 <__aeabi_dmul>
 80197f8:	ec53 2b19 	vmov	r2, r3, d9
 80197fc:	4606      	mov	r6, r0
 80197fe:	460f      	mov	r7, r1
 8019800:	4620      	mov	r0, r4
 8019802:	4629      	mov	r1, r5
 8019804:	f7e6 fcf0 	bl	80001e8 <__aeabi_dsub>
 8019808:	4602      	mov	r2, r0
 801980a:	460b      	mov	r3, r1
 801980c:	4640      	mov	r0, r8
 801980e:	4649      	mov	r1, r9
 8019810:	f7e6 fcea 	bl	80001e8 <__aeabi_dsub>
 8019814:	a372      	add	r3, pc, #456	; (adr r3, 80199e0 <__ieee754_pow+0xa08>)
 8019816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801981a:	f7e6 fe9d 	bl	8000558 <__aeabi_dmul>
 801981e:	a372      	add	r3, pc, #456	; (adr r3, 80199e8 <__ieee754_pow+0xa10>)
 8019820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019824:	4680      	mov	r8, r0
 8019826:	4689      	mov	r9, r1
 8019828:	4620      	mov	r0, r4
 801982a:	4629      	mov	r1, r5
 801982c:	f7e6 fe94 	bl	8000558 <__aeabi_dmul>
 8019830:	4602      	mov	r2, r0
 8019832:	460b      	mov	r3, r1
 8019834:	4640      	mov	r0, r8
 8019836:	4649      	mov	r1, r9
 8019838:	f7e6 fcd8 	bl	80001ec <__adddf3>
 801983c:	4604      	mov	r4, r0
 801983e:	460d      	mov	r5, r1
 8019840:	4602      	mov	r2, r0
 8019842:	460b      	mov	r3, r1
 8019844:	4630      	mov	r0, r6
 8019846:	4639      	mov	r1, r7
 8019848:	f7e6 fcd0 	bl	80001ec <__adddf3>
 801984c:	4632      	mov	r2, r6
 801984e:	463b      	mov	r3, r7
 8019850:	4680      	mov	r8, r0
 8019852:	4689      	mov	r9, r1
 8019854:	f7e6 fcc8 	bl	80001e8 <__aeabi_dsub>
 8019858:	4602      	mov	r2, r0
 801985a:	460b      	mov	r3, r1
 801985c:	4620      	mov	r0, r4
 801985e:	4629      	mov	r1, r5
 8019860:	f7e6 fcc2 	bl	80001e8 <__aeabi_dsub>
 8019864:	4642      	mov	r2, r8
 8019866:	4606      	mov	r6, r0
 8019868:	460f      	mov	r7, r1
 801986a:	464b      	mov	r3, r9
 801986c:	4640      	mov	r0, r8
 801986e:	4649      	mov	r1, r9
 8019870:	f7e6 fe72 	bl	8000558 <__aeabi_dmul>
 8019874:	a35e      	add	r3, pc, #376	; (adr r3, 80199f0 <__ieee754_pow+0xa18>)
 8019876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801987a:	4604      	mov	r4, r0
 801987c:	460d      	mov	r5, r1
 801987e:	f7e6 fe6b 	bl	8000558 <__aeabi_dmul>
 8019882:	a35d      	add	r3, pc, #372	; (adr r3, 80199f8 <__ieee754_pow+0xa20>)
 8019884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019888:	f7e6 fcae 	bl	80001e8 <__aeabi_dsub>
 801988c:	4622      	mov	r2, r4
 801988e:	462b      	mov	r3, r5
 8019890:	f7e6 fe62 	bl	8000558 <__aeabi_dmul>
 8019894:	a35a      	add	r3, pc, #360	; (adr r3, 8019a00 <__ieee754_pow+0xa28>)
 8019896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801989a:	f7e6 fca7 	bl	80001ec <__adddf3>
 801989e:	4622      	mov	r2, r4
 80198a0:	462b      	mov	r3, r5
 80198a2:	f7e6 fe59 	bl	8000558 <__aeabi_dmul>
 80198a6:	a358      	add	r3, pc, #352	; (adr r3, 8019a08 <__ieee754_pow+0xa30>)
 80198a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198ac:	f7e6 fc9c 	bl	80001e8 <__aeabi_dsub>
 80198b0:	4622      	mov	r2, r4
 80198b2:	462b      	mov	r3, r5
 80198b4:	f7e6 fe50 	bl	8000558 <__aeabi_dmul>
 80198b8:	a355      	add	r3, pc, #340	; (adr r3, 8019a10 <__ieee754_pow+0xa38>)
 80198ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198be:	f7e6 fc95 	bl	80001ec <__adddf3>
 80198c2:	4622      	mov	r2, r4
 80198c4:	462b      	mov	r3, r5
 80198c6:	f7e6 fe47 	bl	8000558 <__aeabi_dmul>
 80198ca:	4602      	mov	r2, r0
 80198cc:	460b      	mov	r3, r1
 80198ce:	4640      	mov	r0, r8
 80198d0:	4649      	mov	r1, r9
 80198d2:	f7e6 fc89 	bl	80001e8 <__aeabi_dsub>
 80198d6:	4604      	mov	r4, r0
 80198d8:	460d      	mov	r5, r1
 80198da:	4602      	mov	r2, r0
 80198dc:	460b      	mov	r3, r1
 80198de:	4640      	mov	r0, r8
 80198e0:	4649      	mov	r1, r9
 80198e2:	f7e6 fe39 	bl	8000558 <__aeabi_dmul>
 80198e6:	2200      	movs	r2, #0
 80198e8:	ec41 0b19 	vmov	d9, r0, r1
 80198ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80198f0:	4620      	mov	r0, r4
 80198f2:	4629      	mov	r1, r5
 80198f4:	f7e6 fc78 	bl	80001e8 <__aeabi_dsub>
 80198f8:	4602      	mov	r2, r0
 80198fa:	460b      	mov	r3, r1
 80198fc:	ec51 0b19 	vmov	r0, r1, d9
 8019900:	f7e6 ff54 	bl	80007ac <__aeabi_ddiv>
 8019904:	4632      	mov	r2, r6
 8019906:	4604      	mov	r4, r0
 8019908:	460d      	mov	r5, r1
 801990a:	463b      	mov	r3, r7
 801990c:	4640      	mov	r0, r8
 801990e:	4649      	mov	r1, r9
 8019910:	f7e6 fe22 	bl	8000558 <__aeabi_dmul>
 8019914:	4632      	mov	r2, r6
 8019916:	463b      	mov	r3, r7
 8019918:	f7e6 fc68 	bl	80001ec <__adddf3>
 801991c:	4602      	mov	r2, r0
 801991e:	460b      	mov	r3, r1
 8019920:	4620      	mov	r0, r4
 8019922:	4629      	mov	r1, r5
 8019924:	f7e6 fc60 	bl	80001e8 <__aeabi_dsub>
 8019928:	4642      	mov	r2, r8
 801992a:	464b      	mov	r3, r9
 801992c:	f7e6 fc5c 	bl	80001e8 <__aeabi_dsub>
 8019930:	460b      	mov	r3, r1
 8019932:	4602      	mov	r2, r0
 8019934:	493a      	ldr	r1, [pc, #232]	; (8019a20 <__ieee754_pow+0xa48>)
 8019936:	2000      	movs	r0, #0
 8019938:	f7e6 fc56 	bl	80001e8 <__aeabi_dsub>
 801993c:	ec41 0b10 	vmov	d0, r0, r1
 8019940:	ee10 3a90 	vmov	r3, s1
 8019944:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8019948:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801994c:	da2b      	bge.n	80199a6 <__ieee754_pow+0x9ce>
 801994e:	4650      	mov	r0, sl
 8019950:	f000 fa0a 	bl	8019d68 <scalbn>
 8019954:	ec51 0b10 	vmov	r0, r1, d0
 8019958:	ec53 2b18 	vmov	r2, r3, d8
 801995c:	f7ff bbed 	b.w	801913a <__ieee754_pow+0x162>
 8019960:	4b30      	ldr	r3, [pc, #192]	; (8019a24 <__ieee754_pow+0xa4c>)
 8019962:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8019966:	429e      	cmp	r6, r3
 8019968:	f77f af0c 	ble.w	8019784 <__ieee754_pow+0x7ac>
 801996c:	4b2e      	ldr	r3, [pc, #184]	; (8019a28 <__ieee754_pow+0xa50>)
 801996e:	440b      	add	r3, r1
 8019970:	4303      	orrs	r3, r0
 8019972:	d009      	beq.n	8019988 <__ieee754_pow+0x9b0>
 8019974:	ec51 0b18 	vmov	r0, r1, d8
 8019978:	2200      	movs	r2, #0
 801997a:	2300      	movs	r3, #0
 801997c:	f7e7 f85e 	bl	8000a3c <__aeabi_dcmplt>
 8019980:	3800      	subs	r0, #0
 8019982:	bf18      	it	ne
 8019984:	2001      	movne	r0, #1
 8019986:	e447      	b.n	8019218 <__ieee754_pow+0x240>
 8019988:	4622      	mov	r2, r4
 801998a:	462b      	mov	r3, r5
 801998c:	f7e6 fc2c 	bl	80001e8 <__aeabi_dsub>
 8019990:	4642      	mov	r2, r8
 8019992:	464b      	mov	r3, r9
 8019994:	f7e7 f866 	bl	8000a64 <__aeabi_dcmpge>
 8019998:	2800      	cmp	r0, #0
 801999a:	f43f aef3 	beq.w	8019784 <__ieee754_pow+0x7ac>
 801999e:	e7e9      	b.n	8019974 <__ieee754_pow+0x99c>
 80199a0:	f04f 0a00 	mov.w	sl, #0
 80199a4:	e71a      	b.n	80197dc <__ieee754_pow+0x804>
 80199a6:	ec51 0b10 	vmov	r0, r1, d0
 80199aa:	4619      	mov	r1, r3
 80199ac:	e7d4      	b.n	8019958 <__ieee754_pow+0x980>
 80199ae:	491c      	ldr	r1, [pc, #112]	; (8019a20 <__ieee754_pow+0xa48>)
 80199b0:	2000      	movs	r0, #0
 80199b2:	f7ff bb30 	b.w	8019016 <__ieee754_pow+0x3e>
 80199b6:	2000      	movs	r0, #0
 80199b8:	2100      	movs	r1, #0
 80199ba:	f7ff bb2c 	b.w	8019016 <__ieee754_pow+0x3e>
 80199be:	4630      	mov	r0, r6
 80199c0:	4639      	mov	r1, r7
 80199c2:	f7ff bb28 	b.w	8019016 <__ieee754_pow+0x3e>
 80199c6:	9204      	str	r2, [sp, #16]
 80199c8:	f7ff bb7a 	b.w	80190c0 <__ieee754_pow+0xe8>
 80199cc:	2300      	movs	r3, #0
 80199ce:	f7ff bb64 	b.w	801909a <__ieee754_pow+0xc2>
 80199d2:	bf00      	nop
 80199d4:	f3af 8000 	nop.w
 80199d8:	00000000 	.word	0x00000000
 80199dc:	3fe62e43 	.word	0x3fe62e43
 80199e0:	fefa39ef 	.word	0xfefa39ef
 80199e4:	3fe62e42 	.word	0x3fe62e42
 80199e8:	0ca86c39 	.word	0x0ca86c39
 80199ec:	be205c61 	.word	0xbe205c61
 80199f0:	72bea4d0 	.word	0x72bea4d0
 80199f4:	3e663769 	.word	0x3e663769
 80199f8:	c5d26bf1 	.word	0xc5d26bf1
 80199fc:	3ebbbd41 	.word	0x3ebbbd41
 8019a00:	af25de2c 	.word	0xaf25de2c
 8019a04:	3f11566a 	.word	0x3f11566a
 8019a08:	16bebd93 	.word	0x16bebd93
 8019a0c:	3f66c16c 	.word	0x3f66c16c
 8019a10:	5555553e 	.word	0x5555553e
 8019a14:	3fc55555 	.word	0x3fc55555
 8019a18:	3fe00000 	.word	0x3fe00000
 8019a1c:	000fffff 	.word	0x000fffff
 8019a20:	3ff00000 	.word	0x3ff00000
 8019a24:	4090cbff 	.word	0x4090cbff
 8019a28:	3f6f3400 	.word	0x3f6f3400
 8019a2c:	652b82fe 	.word	0x652b82fe
 8019a30:	3c971547 	.word	0x3c971547

08019a34 <__ieee754_sqrt>:
 8019a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a38:	ec55 4b10 	vmov	r4, r5, d0
 8019a3c:	4e55      	ldr	r6, [pc, #340]	; (8019b94 <__ieee754_sqrt+0x160>)
 8019a3e:	43ae      	bics	r6, r5
 8019a40:	ee10 0a10 	vmov	r0, s0
 8019a44:	ee10 3a10 	vmov	r3, s0
 8019a48:	462a      	mov	r2, r5
 8019a4a:	4629      	mov	r1, r5
 8019a4c:	d110      	bne.n	8019a70 <__ieee754_sqrt+0x3c>
 8019a4e:	ee10 2a10 	vmov	r2, s0
 8019a52:	462b      	mov	r3, r5
 8019a54:	f7e6 fd80 	bl	8000558 <__aeabi_dmul>
 8019a58:	4602      	mov	r2, r0
 8019a5a:	460b      	mov	r3, r1
 8019a5c:	4620      	mov	r0, r4
 8019a5e:	4629      	mov	r1, r5
 8019a60:	f7e6 fbc4 	bl	80001ec <__adddf3>
 8019a64:	4604      	mov	r4, r0
 8019a66:	460d      	mov	r5, r1
 8019a68:	ec45 4b10 	vmov	d0, r4, r5
 8019a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a70:	2d00      	cmp	r5, #0
 8019a72:	dc10      	bgt.n	8019a96 <__ieee754_sqrt+0x62>
 8019a74:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019a78:	4330      	orrs	r0, r6
 8019a7a:	d0f5      	beq.n	8019a68 <__ieee754_sqrt+0x34>
 8019a7c:	b15d      	cbz	r5, 8019a96 <__ieee754_sqrt+0x62>
 8019a7e:	ee10 2a10 	vmov	r2, s0
 8019a82:	462b      	mov	r3, r5
 8019a84:	ee10 0a10 	vmov	r0, s0
 8019a88:	f7e6 fbae 	bl	80001e8 <__aeabi_dsub>
 8019a8c:	4602      	mov	r2, r0
 8019a8e:	460b      	mov	r3, r1
 8019a90:	f7e6 fe8c 	bl	80007ac <__aeabi_ddiv>
 8019a94:	e7e6      	b.n	8019a64 <__ieee754_sqrt+0x30>
 8019a96:	1512      	asrs	r2, r2, #20
 8019a98:	d074      	beq.n	8019b84 <__ieee754_sqrt+0x150>
 8019a9a:	07d4      	lsls	r4, r2, #31
 8019a9c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019aa0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8019aa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8019aa8:	bf5e      	ittt	pl
 8019aaa:	0fda      	lsrpl	r2, r3, #31
 8019aac:	005b      	lslpl	r3, r3, #1
 8019aae:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8019ab2:	2400      	movs	r4, #0
 8019ab4:	0fda      	lsrs	r2, r3, #31
 8019ab6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8019aba:	107f      	asrs	r7, r7, #1
 8019abc:	005b      	lsls	r3, r3, #1
 8019abe:	2516      	movs	r5, #22
 8019ac0:	4620      	mov	r0, r4
 8019ac2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8019ac6:	1886      	adds	r6, r0, r2
 8019ac8:	428e      	cmp	r6, r1
 8019aca:	bfde      	ittt	le
 8019acc:	1b89      	suble	r1, r1, r6
 8019ace:	18b0      	addle	r0, r6, r2
 8019ad0:	18a4      	addle	r4, r4, r2
 8019ad2:	0049      	lsls	r1, r1, #1
 8019ad4:	3d01      	subs	r5, #1
 8019ad6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8019ada:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8019ade:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019ae2:	d1f0      	bne.n	8019ac6 <__ieee754_sqrt+0x92>
 8019ae4:	462a      	mov	r2, r5
 8019ae6:	f04f 0e20 	mov.w	lr, #32
 8019aea:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019aee:	4281      	cmp	r1, r0
 8019af0:	eb06 0c05 	add.w	ip, r6, r5
 8019af4:	dc02      	bgt.n	8019afc <__ieee754_sqrt+0xc8>
 8019af6:	d113      	bne.n	8019b20 <__ieee754_sqrt+0xec>
 8019af8:	459c      	cmp	ip, r3
 8019afa:	d811      	bhi.n	8019b20 <__ieee754_sqrt+0xec>
 8019afc:	f1bc 0f00 	cmp.w	ip, #0
 8019b00:	eb0c 0506 	add.w	r5, ip, r6
 8019b04:	da43      	bge.n	8019b8e <__ieee754_sqrt+0x15a>
 8019b06:	2d00      	cmp	r5, #0
 8019b08:	db41      	blt.n	8019b8e <__ieee754_sqrt+0x15a>
 8019b0a:	f100 0801 	add.w	r8, r0, #1
 8019b0e:	1a09      	subs	r1, r1, r0
 8019b10:	459c      	cmp	ip, r3
 8019b12:	bf88      	it	hi
 8019b14:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8019b18:	eba3 030c 	sub.w	r3, r3, ip
 8019b1c:	4432      	add	r2, r6
 8019b1e:	4640      	mov	r0, r8
 8019b20:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8019b24:	f1be 0e01 	subs.w	lr, lr, #1
 8019b28:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8019b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019b30:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019b34:	d1db      	bne.n	8019aee <__ieee754_sqrt+0xba>
 8019b36:	430b      	orrs	r3, r1
 8019b38:	d006      	beq.n	8019b48 <__ieee754_sqrt+0x114>
 8019b3a:	1c50      	adds	r0, r2, #1
 8019b3c:	bf13      	iteet	ne
 8019b3e:	3201      	addne	r2, #1
 8019b40:	3401      	addeq	r4, #1
 8019b42:	4672      	moveq	r2, lr
 8019b44:	f022 0201 	bicne.w	r2, r2, #1
 8019b48:	1063      	asrs	r3, r4, #1
 8019b4a:	0852      	lsrs	r2, r2, #1
 8019b4c:	07e1      	lsls	r1, r4, #31
 8019b4e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8019b52:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8019b56:	bf48      	it	mi
 8019b58:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8019b5c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8019b60:	4614      	mov	r4, r2
 8019b62:	e781      	b.n	8019a68 <__ieee754_sqrt+0x34>
 8019b64:	0ad9      	lsrs	r1, r3, #11
 8019b66:	3815      	subs	r0, #21
 8019b68:	055b      	lsls	r3, r3, #21
 8019b6a:	2900      	cmp	r1, #0
 8019b6c:	d0fa      	beq.n	8019b64 <__ieee754_sqrt+0x130>
 8019b6e:	02cd      	lsls	r5, r1, #11
 8019b70:	d50a      	bpl.n	8019b88 <__ieee754_sqrt+0x154>
 8019b72:	f1c2 0420 	rsb	r4, r2, #32
 8019b76:	fa23 f404 	lsr.w	r4, r3, r4
 8019b7a:	1e55      	subs	r5, r2, #1
 8019b7c:	4093      	lsls	r3, r2
 8019b7e:	4321      	orrs	r1, r4
 8019b80:	1b42      	subs	r2, r0, r5
 8019b82:	e78a      	b.n	8019a9a <__ieee754_sqrt+0x66>
 8019b84:	4610      	mov	r0, r2
 8019b86:	e7f0      	b.n	8019b6a <__ieee754_sqrt+0x136>
 8019b88:	0049      	lsls	r1, r1, #1
 8019b8a:	3201      	adds	r2, #1
 8019b8c:	e7ef      	b.n	8019b6e <__ieee754_sqrt+0x13a>
 8019b8e:	4680      	mov	r8, r0
 8019b90:	e7bd      	b.n	8019b0e <__ieee754_sqrt+0xda>
 8019b92:	bf00      	nop
 8019b94:	7ff00000 	.word	0x7ff00000

08019b98 <__ieee754_atan2f>:
 8019b98:	ee10 2a90 	vmov	r2, s1
 8019b9c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8019ba0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019ba4:	b510      	push	{r4, lr}
 8019ba6:	eef0 7a40 	vmov.f32	s15, s0
 8019baa:	dc06      	bgt.n	8019bba <__ieee754_atan2f+0x22>
 8019bac:	ee10 0a10 	vmov	r0, s0
 8019bb0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8019bb4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019bb8:	dd04      	ble.n	8019bc4 <__ieee754_atan2f+0x2c>
 8019bba:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8019bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8019bc2:	bd10      	pop	{r4, pc}
 8019bc4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8019bc8:	d103      	bne.n	8019bd2 <__ieee754_atan2f+0x3a>
 8019bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019bce:	f000 b951 	b.w	8019e74 <atanf>
 8019bd2:	1794      	asrs	r4, r2, #30
 8019bd4:	f004 0402 	and.w	r4, r4, #2
 8019bd8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8019bdc:	b943      	cbnz	r3, 8019bf0 <__ieee754_atan2f+0x58>
 8019bde:	2c02      	cmp	r4, #2
 8019be0:	d05e      	beq.n	8019ca0 <__ieee754_atan2f+0x108>
 8019be2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8019cb4 <__ieee754_atan2f+0x11c>
 8019be6:	2c03      	cmp	r4, #3
 8019be8:	bf08      	it	eq
 8019bea:	eef0 7a47 	vmoveq.f32	s15, s14
 8019bee:	e7e6      	b.n	8019bbe <__ieee754_atan2f+0x26>
 8019bf0:	b941      	cbnz	r1, 8019c04 <__ieee754_atan2f+0x6c>
 8019bf2:	eddf 7a31 	vldr	s15, [pc, #196]	; 8019cb8 <__ieee754_atan2f+0x120>
 8019bf6:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8019cbc <__ieee754_atan2f+0x124>
 8019bfa:	2800      	cmp	r0, #0
 8019bfc:	bfb8      	it	lt
 8019bfe:	eef0 7a40 	vmovlt.f32	s15, s0
 8019c02:	e7dc      	b.n	8019bbe <__ieee754_atan2f+0x26>
 8019c04:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019c08:	d110      	bne.n	8019c2c <__ieee754_atan2f+0x94>
 8019c0a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019c0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8019c12:	d107      	bne.n	8019c24 <__ieee754_atan2f+0x8c>
 8019c14:	2c02      	cmp	r4, #2
 8019c16:	d846      	bhi.n	8019ca6 <__ieee754_atan2f+0x10e>
 8019c18:	4b29      	ldr	r3, [pc, #164]	; (8019cc0 <__ieee754_atan2f+0x128>)
 8019c1a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019c1e:	edd4 7a00 	vldr	s15, [r4]
 8019c22:	e7cc      	b.n	8019bbe <__ieee754_atan2f+0x26>
 8019c24:	2c02      	cmp	r4, #2
 8019c26:	d841      	bhi.n	8019cac <__ieee754_atan2f+0x114>
 8019c28:	4b26      	ldr	r3, [pc, #152]	; (8019cc4 <__ieee754_atan2f+0x12c>)
 8019c2a:	e7f6      	b.n	8019c1a <__ieee754_atan2f+0x82>
 8019c2c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019c30:	d0df      	beq.n	8019bf2 <__ieee754_atan2f+0x5a>
 8019c32:	1a5b      	subs	r3, r3, r1
 8019c34:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8019c38:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8019c3c:	da1a      	bge.n	8019c74 <__ieee754_atan2f+0xdc>
 8019c3e:	2a00      	cmp	r2, #0
 8019c40:	da01      	bge.n	8019c46 <__ieee754_atan2f+0xae>
 8019c42:	313c      	adds	r1, #60	; 0x3c
 8019c44:	db19      	blt.n	8019c7a <__ieee754_atan2f+0xe2>
 8019c46:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8019c4a:	f000 f9e7 	bl	801a01c <fabsf>
 8019c4e:	f000 f911 	bl	8019e74 <atanf>
 8019c52:	eef0 7a40 	vmov.f32	s15, s0
 8019c56:	2c01      	cmp	r4, #1
 8019c58:	d012      	beq.n	8019c80 <__ieee754_atan2f+0xe8>
 8019c5a:	2c02      	cmp	r4, #2
 8019c5c:	d017      	beq.n	8019c8e <__ieee754_atan2f+0xf6>
 8019c5e:	2c00      	cmp	r4, #0
 8019c60:	d0ad      	beq.n	8019bbe <__ieee754_atan2f+0x26>
 8019c62:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8019cc8 <__ieee754_atan2f+0x130>
 8019c66:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019c6a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8019ccc <__ieee754_atan2f+0x134>
 8019c6e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019c72:	e7a4      	b.n	8019bbe <__ieee754_atan2f+0x26>
 8019c74:	eddf 7a10 	vldr	s15, [pc, #64]	; 8019cb8 <__ieee754_atan2f+0x120>
 8019c78:	e7ed      	b.n	8019c56 <__ieee754_atan2f+0xbe>
 8019c7a:	eddf 7a15 	vldr	s15, [pc, #84]	; 8019cd0 <__ieee754_atan2f+0x138>
 8019c7e:	e7ea      	b.n	8019c56 <__ieee754_atan2f+0xbe>
 8019c80:	ee17 3a90 	vmov	r3, s15
 8019c84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019c88:	ee07 3a90 	vmov	s15, r3
 8019c8c:	e797      	b.n	8019bbe <__ieee754_atan2f+0x26>
 8019c8e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8019cc8 <__ieee754_atan2f+0x130>
 8019c92:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019c96:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8019ccc <__ieee754_atan2f+0x134>
 8019c9a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019c9e:	e78e      	b.n	8019bbe <__ieee754_atan2f+0x26>
 8019ca0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8019ccc <__ieee754_atan2f+0x134>
 8019ca4:	e78b      	b.n	8019bbe <__ieee754_atan2f+0x26>
 8019ca6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8019cd4 <__ieee754_atan2f+0x13c>
 8019caa:	e788      	b.n	8019bbe <__ieee754_atan2f+0x26>
 8019cac:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019cd0 <__ieee754_atan2f+0x138>
 8019cb0:	e785      	b.n	8019bbe <__ieee754_atan2f+0x26>
 8019cb2:	bf00      	nop
 8019cb4:	c0490fdb 	.word	0xc0490fdb
 8019cb8:	3fc90fdb 	.word	0x3fc90fdb
 8019cbc:	bfc90fdb 	.word	0xbfc90fdb
 8019cc0:	0802e810 	.word	0x0802e810
 8019cc4:	0802e81c 	.word	0x0802e81c
 8019cc8:	33bbbd2e 	.word	0x33bbbd2e
 8019ccc:	40490fdb 	.word	0x40490fdb
 8019cd0:	00000000 	.word	0x00000000
 8019cd4:	3f490fdb 	.word	0x3f490fdb

08019cd8 <__ieee754_sqrtf>:
 8019cd8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019cdc:	4770      	bx	lr

08019cde <with_errno>:
 8019cde:	b570      	push	{r4, r5, r6, lr}
 8019ce0:	4604      	mov	r4, r0
 8019ce2:	460d      	mov	r5, r1
 8019ce4:	4616      	mov	r6, r2
 8019ce6:	f000 f9ab 	bl	801a040 <__errno>
 8019cea:	4629      	mov	r1, r5
 8019cec:	6006      	str	r6, [r0, #0]
 8019cee:	4620      	mov	r0, r4
 8019cf0:	bd70      	pop	{r4, r5, r6, pc}

08019cf2 <xflow>:
 8019cf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019cf4:	4614      	mov	r4, r2
 8019cf6:	461d      	mov	r5, r3
 8019cf8:	b108      	cbz	r0, 8019cfe <xflow+0xc>
 8019cfa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019cfe:	e9cd 2300 	strd	r2, r3, [sp]
 8019d02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019d06:	4620      	mov	r0, r4
 8019d08:	4629      	mov	r1, r5
 8019d0a:	f7e6 fc25 	bl	8000558 <__aeabi_dmul>
 8019d0e:	2222      	movs	r2, #34	; 0x22
 8019d10:	b003      	add	sp, #12
 8019d12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019d16:	f7ff bfe2 	b.w	8019cde <with_errno>

08019d1a <__math_uflow>:
 8019d1a:	b508      	push	{r3, lr}
 8019d1c:	2200      	movs	r2, #0
 8019d1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8019d22:	f7ff ffe6 	bl	8019cf2 <xflow>
 8019d26:	ec41 0b10 	vmov	d0, r0, r1
 8019d2a:	bd08      	pop	{r3, pc}

08019d2c <__math_oflow>:
 8019d2c:	b508      	push	{r3, lr}
 8019d2e:	2200      	movs	r2, #0
 8019d30:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8019d34:	f7ff ffdd 	bl	8019cf2 <xflow>
 8019d38:	ec41 0b10 	vmov	d0, r0, r1
 8019d3c:	bd08      	pop	{r3, pc}

08019d3e <fabs>:
 8019d3e:	ec51 0b10 	vmov	r0, r1, d0
 8019d42:	ee10 2a10 	vmov	r2, s0
 8019d46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019d4a:	ec43 2b10 	vmov	d0, r2, r3
 8019d4e:	4770      	bx	lr

08019d50 <finite>:
 8019d50:	b082      	sub	sp, #8
 8019d52:	ed8d 0b00 	vstr	d0, [sp]
 8019d56:	9801      	ldr	r0, [sp, #4]
 8019d58:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8019d5c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019d60:	0fc0      	lsrs	r0, r0, #31
 8019d62:	b002      	add	sp, #8
 8019d64:	4770      	bx	lr
	...

08019d68 <scalbn>:
 8019d68:	b570      	push	{r4, r5, r6, lr}
 8019d6a:	ec55 4b10 	vmov	r4, r5, d0
 8019d6e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8019d72:	4606      	mov	r6, r0
 8019d74:	462b      	mov	r3, r5
 8019d76:	b99a      	cbnz	r2, 8019da0 <scalbn+0x38>
 8019d78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019d7c:	4323      	orrs	r3, r4
 8019d7e:	d036      	beq.n	8019dee <scalbn+0x86>
 8019d80:	4b39      	ldr	r3, [pc, #228]	; (8019e68 <scalbn+0x100>)
 8019d82:	4629      	mov	r1, r5
 8019d84:	ee10 0a10 	vmov	r0, s0
 8019d88:	2200      	movs	r2, #0
 8019d8a:	f7e6 fbe5 	bl	8000558 <__aeabi_dmul>
 8019d8e:	4b37      	ldr	r3, [pc, #220]	; (8019e6c <scalbn+0x104>)
 8019d90:	429e      	cmp	r6, r3
 8019d92:	4604      	mov	r4, r0
 8019d94:	460d      	mov	r5, r1
 8019d96:	da10      	bge.n	8019dba <scalbn+0x52>
 8019d98:	a32b      	add	r3, pc, #172	; (adr r3, 8019e48 <scalbn+0xe0>)
 8019d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d9e:	e03a      	b.n	8019e16 <scalbn+0xae>
 8019da0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8019da4:	428a      	cmp	r2, r1
 8019da6:	d10c      	bne.n	8019dc2 <scalbn+0x5a>
 8019da8:	ee10 2a10 	vmov	r2, s0
 8019dac:	4620      	mov	r0, r4
 8019dae:	4629      	mov	r1, r5
 8019db0:	f7e6 fa1c 	bl	80001ec <__adddf3>
 8019db4:	4604      	mov	r4, r0
 8019db6:	460d      	mov	r5, r1
 8019db8:	e019      	b.n	8019dee <scalbn+0x86>
 8019dba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019dbe:	460b      	mov	r3, r1
 8019dc0:	3a36      	subs	r2, #54	; 0x36
 8019dc2:	4432      	add	r2, r6
 8019dc4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019dc8:	428a      	cmp	r2, r1
 8019dca:	dd08      	ble.n	8019dde <scalbn+0x76>
 8019dcc:	2d00      	cmp	r5, #0
 8019dce:	a120      	add	r1, pc, #128	; (adr r1, 8019e50 <scalbn+0xe8>)
 8019dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019dd4:	da1c      	bge.n	8019e10 <scalbn+0xa8>
 8019dd6:	a120      	add	r1, pc, #128	; (adr r1, 8019e58 <scalbn+0xf0>)
 8019dd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ddc:	e018      	b.n	8019e10 <scalbn+0xa8>
 8019dde:	2a00      	cmp	r2, #0
 8019de0:	dd08      	ble.n	8019df4 <scalbn+0x8c>
 8019de2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019de6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019dea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019dee:	ec45 4b10 	vmov	d0, r4, r5
 8019df2:	bd70      	pop	{r4, r5, r6, pc}
 8019df4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019df8:	da19      	bge.n	8019e2e <scalbn+0xc6>
 8019dfa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019dfe:	429e      	cmp	r6, r3
 8019e00:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8019e04:	dd0a      	ble.n	8019e1c <scalbn+0xb4>
 8019e06:	a112      	add	r1, pc, #72	; (adr r1, 8019e50 <scalbn+0xe8>)
 8019e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d1e2      	bne.n	8019dd6 <scalbn+0x6e>
 8019e10:	a30f      	add	r3, pc, #60	; (adr r3, 8019e50 <scalbn+0xe8>)
 8019e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e16:	f7e6 fb9f 	bl	8000558 <__aeabi_dmul>
 8019e1a:	e7cb      	b.n	8019db4 <scalbn+0x4c>
 8019e1c:	a10a      	add	r1, pc, #40	; (adr r1, 8019e48 <scalbn+0xe0>)
 8019e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d0b8      	beq.n	8019d98 <scalbn+0x30>
 8019e26:	a10e      	add	r1, pc, #56	; (adr r1, 8019e60 <scalbn+0xf8>)
 8019e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e2c:	e7b4      	b.n	8019d98 <scalbn+0x30>
 8019e2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019e32:	3236      	adds	r2, #54	; 0x36
 8019e34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019e38:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8019e3c:	4620      	mov	r0, r4
 8019e3e:	4b0c      	ldr	r3, [pc, #48]	; (8019e70 <scalbn+0x108>)
 8019e40:	2200      	movs	r2, #0
 8019e42:	e7e8      	b.n	8019e16 <scalbn+0xae>
 8019e44:	f3af 8000 	nop.w
 8019e48:	c2f8f359 	.word	0xc2f8f359
 8019e4c:	01a56e1f 	.word	0x01a56e1f
 8019e50:	8800759c 	.word	0x8800759c
 8019e54:	7e37e43c 	.word	0x7e37e43c
 8019e58:	8800759c 	.word	0x8800759c
 8019e5c:	fe37e43c 	.word	0xfe37e43c
 8019e60:	c2f8f359 	.word	0xc2f8f359
 8019e64:	81a56e1f 	.word	0x81a56e1f
 8019e68:	43500000 	.word	0x43500000
 8019e6c:	ffff3cb0 	.word	0xffff3cb0
 8019e70:	3c900000 	.word	0x3c900000

08019e74 <atanf>:
 8019e74:	b538      	push	{r3, r4, r5, lr}
 8019e76:	ee10 5a10 	vmov	r5, s0
 8019e7a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8019e7e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8019e82:	eef0 7a40 	vmov.f32	s15, s0
 8019e86:	db10      	blt.n	8019eaa <atanf+0x36>
 8019e88:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8019e8c:	dd04      	ble.n	8019e98 <atanf+0x24>
 8019e8e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8019e92:	eeb0 0a67 	vmov.f32	s0, s15
 8019e96:	bd38      	pop	{r3, r4, r5, pc}
 8019e98:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8019fd0 <atanf+0x15c>
 8019e9c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8019fd4 <atanf+0x160>
 8019ea0:	2d00      	cmp	r5, #0
 8019ea2:	bfd8      	it	le
 8019ea4:	eef0 7a40 	vmovle.f32	s15, s0
 8019ea8:	e7f3      	b.n	8019e92 <atanf+0x1e>
 8019eaa:	4b4b      	ldr	r3, [pc, #300]	; (8019fd8 <atanf+0x164>)
 8019eac:	429c      	cmp	r4, r3
 8019eae:	dc10      	bgt.n	8019ed2 <atanf+0x5e>
 8019eb0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8019eb4:	da0a      	bge.n	8019ecc <atanf+0x58>
 8019eb6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8019fdc <atanf+0x168>
 8019eba:	ee30 7a07 	vadd.f32	s14, s0, s14
 8019ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019ec2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8019ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019eca:	dce2      	bgt.n	8019e92 <atanf+0x1e>
 8019ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8019ed0:	e013      	b.n	8019efa <atanf+0x86>
 8019ed2:	f000 f8a3 	bl	801a01c <fabsf>
 8019ed6:	4b42      	ldr	r3, [pc, #264]	; (8019fe0 <atanf+0x16c>)
 8019ed8:	429c      	cmp	r4, r3
 8019eda:	dc4f      	bgt.n	8019f7c <atanf+0x108>
 8019edc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8019ee0:	429c      	cmp	r4, r3
 8019ee2:	dc41      	bgt.n	8019f68 <atanf+0xf4>
 8019ee4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8019ee8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019eec:	eea0 7a27 	vfma.f32	s14, s0, s15
 8019ef0:	2300      	movs	r3, #0
 8019ef2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019ef6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019efa:	1c5a      	adds	r2, r3, #1
 8019efc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8019f00:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8019fe4 <atanf+0x170>
 8019f04:	eddf 5a38 	vldr	s11, [pc, #224]	; 8019fe8 <atanf+0x174>
 8019f08:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8019fec <atanf+0x178>
 8019f0c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8019f10:	eee6 5a87 	vfma.f32	s11, s13, s14
 8019f14:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8019ff0 <atanf+0x17c>
 8019f18:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019f1c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8019ff4 <atanf+0x180>
 8019f20:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019f24:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8019ff8 <atanf+0x184>
 8019f28:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019f2c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8019ffc <atanf+0x188>
 8019f30:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019f34:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801a000 <atanf+0x18c>
 8019f38:	eea6 5a87 	vfma.f32	s10, s13, s14
 8019f3c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801a004 <atanf+0x190>
 8019f40:	eea5 7a26 	vfma.f32	s14, s10, s13
 8019f44:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801a008 <atanf+0x194>
 8019f48:	eea7 5a26 	vfma.f32	s10, s14, s13
 8019f4c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801a00c <atanf+0x198>
 8019f50:	eea5 7a26 	vfma.f32	s14, s10, s13
 8019f54:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019f58:	eea5 7a86 	vfma.f32	s14, s11, s12
 8019f5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019f60:	d121      	bne.n	8019fa6 <atanf+0x132>
 8019f62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019f66:	e794      	b.n	8019e92 <atanf+0x1e>
 8019f68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019f6c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019f70:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019f74:	2301      	movs	r3, #1
 8019f76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019f7a:	e7be      	b.n	8019efa <atanf+0x86>
 8019f7c:	4b24      	ldr	r3, [pc, #144]	; (801a010 <atanf+0x19c>)
 8019f7e:	429c      	cmp	r4, r3
 8019f80:	dc0b      	bgt.n	8019f9a <atanf+0x126>
 8019f82:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8019f86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019f8a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8019f8e:	2302      	movs	r3, #2
 8019f90:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019f98:	e7af      	b.n	8019efa <atanf+0x86>
 8019f9a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019f9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019fa2:	2303      	movs	r3, #3
 8019fa4:	e7a9      	b.n	8019efa <atanf+0x86>
 8019fa6:	4a1b      	ldr	r2, [pc, #108]	; (801a014 <atanf+0x1a0>)
 8019fa8:	491b      	ldr	r1, [pc, #108]	; (801a018 <atanf+0x1a4>)
 8019faa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019fae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019fb2:	ed93 0a00 	vldr	s0, [r3]
 8019fb6:	ee37 7a40 	vsub.f32	s14, s14, s0
 8019fba:	ed92 0a00 	vldr	s0, [r2]
 8019fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019fc2:	2d00      	cmp	r5, #0
 8019fc4:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019fc8:	bfb8      	it	lt
 8019fca:	eef1 7a67 	vneglt.f32	s15, s15
 8019fce:	e760      	b.n	8019e92 <atanf+0x1e>
 8019fd0:	3fc90fdb 	.word	0x3fc90fdb
 8019fd4:	bfc90fdb 	.word	0xbfc90fdb
 8019fd8:	3edfffff 	.word	0x3edfffff
 8019fdc:	7149f2ca 	.word	0x7149f2ca
 8019fe0:	3f97ffff 	.word	0x3f97ffff
 8019fe4:	3c8569d7 	.word	0x3c8569d7
 8019fe8:	3d4bda59 	.word	0x3d4bda59
 8019fec:	bd6ef16b 	.word	0xbd6ef16b
 8019ff0:	3d886b35 	.word	0x3d886b35
 8019ff4:	3dba2e6e 	.word	0x3dba2e6e
 8019ff8:	3e124925 	.word	0x3e124925
 8019ffc:	3eaaaaab 	.word	0x3eaaaaab
 801a000:	bd15a221 	.word	0xbd15a221
 801a004:	bd9d8795 	.word	0xbd9d8795
 801a008:	bde38e38 	.word	0xbde38e38
 801a00c:	be4ccccd 	.word	0xbe4ccccd
 801a010:	401bffff 	.word	0x401bffff
 801a014:	0802e828 	.word	0x0802e828
 801a018:	0802e838 	.word	0x0802e838

0801a01c <fabsf>:
 801a01c:	ee10 3a10 	vmov	r3, s0
 801a020:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a024:	ee00 3a10 	vmov	s0, r3
 801a028:	4770      	bx	lr

0801a02a <abort>:
 801a02a:	b508      	push	{r3, lr}
 801a02c:	2006      	movs	r0, #6
 801a02e:	f000 f989 	bl	801a344 <raise>
 801a032:	2001      	movs	r0, #1
 801a034:	f7e9 fd62 	bl	8003afc <_exit>

0801a038 <atoi>:
 801a038:	220a      	movs	r2, #10
 801a03a:	2100      	movs	r1, #0
 801a03c:	f000 ba30 	b.w	801a4a0 <strtol>

0801a040 <__errno>:
 801a040:	4b01      	ldr	r3, [pc, #4]	; (801a048 <__errno+0x8>)
 801a042:	6818      	ldr	r0, [r3, #0]
 801a044:	4770      	bx	lr
 801a046:	bf00      	nop
 801a048:	20000130 	.word	0x20000130

0801a04c <__libc_init_array>:
 801a04c:	b570      	push	{r4, r5, r6, lr}
 801a04e:	4d0d      	ldr	r5, [pc, #52]	; (801a084 <__libc_init_array+0x38>)
 801a050:	4c0d      	ldr	r4, [pc, #52]	; (801a088 <__libc_init_array+0x3c>)
 801a052:	1b64      	subs	r4, r4, r5
 801a054:	10a4      	asrs	r4, r4, #2
 801a056:	2600      	movs	r6, #0
 801a058:	42a6      	cmp	r6, r4
 801a05a:	d109      	bne.n	801a070 <__libc_init_array+0x24>
 801a05c:	4d0b      	ldr	r5, [pc, #44]	; (801a08c <__libc_init_array+0x40>)
 801a05e:	4c0c      	ldr	r4, [pc, #48]	; (801a090 <__libc_init_array+0x44>)
 801a060:	f000 fa36 	bl	801a4d0 <_init>
 801a064:	1b64      	subs	r4, r4, r5
 801a066:	10a4      	asrs	r4, r4, #2
 801a068:	2600      	movs	r6, #0
 801a06a:	42a6      	cmp	r6, r4
 801a06c:	d105      	bne.n	801a07a <__libc_init_array+0x2e>
 801a06e:	bd70      	pop	{r4, r5, r6, pc}
 801a070:	f855 3b04 	ldr.w	r3, [r5], #4
 801a074:	4798      	blx	r3
 801a076:	3601      	adds	r6, #1
 801a078:	e7ee      	b.n	801a058 <__libc_init_array+0xc>
 801a07a:	f855 3b04 	ldr.w	r3, [r5], #4
 801a07e:	4798      	blx	r3
 801a080:	3601      	adds	r6, #1
 801a082:	e7f2      	b.n	801a06a <__libc_init_array+0x1e>
 801a084:	0802e954 	.word	0x0802e954
 801a088:	0802e954 	.word	0x0802e954
 801a08c:	0802e954 	.word	0x0802e954
 801a090:	0802e95c 	.word	0x0802e95c

0801a094 <malloc>:
 801a094:	4b02      	ldr	r3, [pc, #8]	; (801a0a0 <malloc+0xc>)
 801a096:	4601      	mov	r1, r0
 801a098:	6818      	ldr	r0, [r3, #0]
 801a09a:	f000 b8a7 	b.w	801a1ec <_malloc_r>
 801a09e:	bf00      	nop
 801a0a0:	20000130 	.word	0x20000130

0801a0a4 <free>:
 801a0a4:	4b02      	ldr	r3, [pc, #8]	; (801a0b0 <free+0xc>)
 801a0a6:	4601      	mov	r1, r0
 801a0a8:	6818      	ldr	r0, [r3, #0]
 801a0aa:	f000 b833 	b.w	801a114 <_free_r>
 801a0ae:	bf00      	nop
 801a0b0:	20000130 	.word	0x20000130

0801a0b4 <memcpy>:
 801a0b4:	440a      	add	r2, r1
 801a0b6:	4291      	cmp	r1, r2
 801a0b8:	f100 33ff 	add.w	r3, r0, #4294967295
 801a0bc:	d100      	bne.n	801a0c0 <memcpy+0xc>
 801a0be:	4770      	bx	lr
 801a0c0:	b510      	push	{r4, lr}
 801a0c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a0c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a0ca:	4291      	cmp	r1, r2
 801a0cc:	d1f9      	bne.n	801a0c2 <memcpy+0xe>
 801a0ce:	bd10      	pop	{r4, pc}

0801a0d0 <memmove>:
 801a0d0:	4288      	cmp	r0, r1
 801a0d2:	b510      	push	{r4, lr}
 801a0d4:	eb01 0402 	add.w	r4, r1, r2
 801a0d8:	d902      	bls.n	801a0e0 <memmove+0x10>
 801a0da:	4284      	cmp	r4, r0
 801a0dc:	4623      	mov	r3, r4
 801a0de:	d807      	bhi.n	801a0f0 <memmove+0x20>
 801a0e0:	1e43      	subs	r3, r0, #1
 801a0e2:	42a1      	cmp	r1, r4
 801a0e4:	d008      	beq.n	801a0f8 <memmove+0x28>
 801a0e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a0ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a0ee:	e7f8      	b.n	801a0e2 <memmove+0x12>
 801a0f0:	4402      	add	r2, r0
 801a0f2:	4601      	mov	r1, r0
 801a0f4:	428a      	cmp	r2, r1
 801a0f6:	d100      	bne.n	801a0fa <memmove+0x2a>
 801a0f8:	bd10      	pop	{r4, pc}
 801a0fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a0fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a102:	e7f7      	b.n	801a0f4 <memmove+0x24>

0801a104 <memset>:
 801a104:	4402      	add	r2, r0
 801a106:	4603      	mov	r3, r0
 801a108:	4293      	cmp	r3, r2
 801a10a:	d100      	bne.n	801a10e <memset+0xa>
 801a10c:	4770      	bx	lr
 801a10e:	f803 1b01 	strb.w	r1, [r3], #1
 801a112:	e7f9      	b.n	801a108 <memset+0x4>

0801a114 <_free_r>:
 801a114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a116:	2900      	cmp	r1, #0
 801a118:	d044      	beq.n	801a1a4 <_free_r+0x90>
 801a11a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a11e:	9001      	str	r0, [sp, #4]
 801a120:	2b00      	cmp	r3, #0
 801a122:	f1a1 0404 	sub.w	r4, r1, #4
 801a126:	bfb8      	it	lt
 801a128:	18e4      	addlt	r4, r4, r3
 801a12a:	f000 f9c3 	bl	801a4b4 <__malloc_lock>
 801a12e:	4a1e      	ldr	r2, [pc, #120]	; (801a1a8 <_free_r+0x94>)
 801a130:	9801      	ldr	r0, [sp, #4]
 801a132:	6813      	ldr	r3, [r2, #0]
 801a134:	b933      	cbnz	r3, 801a144 <_free_r+0x30>
 801a136:	6063      	str	r3, [r4, #4]
 801a138:	6014      	str	r4, [r2, #0]
 801a13a:	b003      	add	sp, #12
 801a13c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a140:	f000 b9be 	b.w	801a4c0 <__malloc_unlock>
 801a144:	42a3      	cmp	r3, r4
 801a146:	d908      	bls.n	801a15a <_free_r+0x46>
 801a148:	6825      	ldr	r5, [r4, #0]
 801a14a:	1961      	adds	r1, r4, r5
 801a14c:	428b      	cmp	r3, r1
 801a14e:	bf01      	itttt	eq
 801a150:	6819      	ldreq	r1, [r3, #0]
 801a152:	685b      	ldreq	r3, [r3, #4]
 801a154:	1949      	addeq	r1, r1, r5
 801a156:	6021      	streq	r1, [r4, #0]
 801a158:	e7ed      	b.n	801a136 <_free_r+0x22>
 801a15a:	461a      	mov	r2, r3
 801a15c:	685b      	ldr	r3, [r3, #4]
 801a15e:	b10b      	cbz	r3, 801a164 <_free_r+0x50>
 801a160:	42a3      	cmp	r3, r4
 801a162:	d9fa      	bls.n	801a15a <_free_r+0x46>
 801a164:	6811      	ldr	r1, [r2, #0]
 801a166:	1855      	adds	r5, r2, r1
 801a168:	42a5      	cmp	r5, r4
 801a16a:	d10b      	bne.n	801a184 <_free_r+0x70>
 801a16c:	6824      	ldr	r4, [r4, #0]
 801a16e:	4421      	add	r1, r4
 801a170:	1854      	adds	r4, r2, r1
 801a172:	42a3      	cmp	r3, r4
 801a174:	6011      	str	r1, [r2, #0]
 801a176:	d1e0      	bne.n	801a13a <_free_r+0x26>
 801a178:	681c      	ldr	r4, [r3, #0]
 801a17a:	685b      	ldr	r3, [r3, #4]
 801a17c:	6053      	str	r3, [r2, #4]
 801a17e:	4421      	add	r1, r4
 801a180:	6011      	str	r1, [r2, #0]
 801a182:	e7da      	b.n	801a13a <_free_r+0x26>
 801a184:	d902      	bls.n	801a18c <_free_r+0x78>
 801a186:	230c      	movs	r3, #12
 801a188:	6003      	str	r3, [r0, #0]
 801a18a:	e7d6      	b.n	801a13a <_free_r+0x26>
 801a18c:	6825      	ldr	r5, [r4, #0]
 801a18e:	1961      	adds	r1, r4, r5
 801a190:	428b      	cmp	r3, r1
 801a192:	bf04      	itt	eq
 801a194:	6819      	ldreq	r1, [r3, #0]
 801a196:	685b      	ldreq	r3, [r3, #4]
 801a198:	6063      	str	r3, [r4, #4]
 801a19a:	bf04      	itt	eq
 801a19c:	1949      	addeq	r1, r1, r5
 801a19e:	6021      	streq	r1, [r4, #0]
 801a1a0:	6054      	str	r4, [r2, #4]
 801a1a2:	e7ca      	b.n	801a13a <_free_r+0x26>
 801a1a4:	b003      	add	sp, #12
 801a1a6:	bd30      	pop	{r4, r5, pc}
 801a1a8:	2000e040 	.word	0x2000e040

0801a1ac <sbrk_aligned>:
 801a1ac:	b570      	push	{r4, r5, r6, lr}
 801a1ae:	4e0e      	ldr	r6, [pc, #56]	; (801a1e8 <sbrk_aligned+0x3c>)
 801a1b0:	460c      	mov	r4, r1
 801a1b2:	6831      	ldr	r1, [r6, #0]
 801a1b4:	4605      	mov	r5, r0
 801a1b6:	b911      	cbnz	r1, 801a1be <sbrk_aligned+0x12>
 801a1b8:	f000 f88c 	bl	801a2d4 <_sbrk_r>
 801a1bc:	6030      	str	r0, [r6, #0]
 801a1be:	4621      	mov	r1, r4
 801a1c0:	4628      	mov	r0, r5
 801a1c2:	f000 f887 	bl	801a2d4 <_sbrk_r>
 801a1c6:	1c43      	adds	r3, r0, #1
 801a1c8:	d00a      	beq.n	801a1e0 <sbrk_aligned+0x34>
 801a1ca:	1cc4      	adds	r4, r0, #3
 801a1cc:	f024 0403 	bic.w	r4, r4, #3
 801a1d0:	42a0      	cmp	r0, r4
 801a1d2:	d007      	beq.n	801a1e4 <sbrk_aligned+0x38>
 801a1d4:	1a21      	subs	r1, r4, r0
 801a1d6:	4628      	mov	r0, r5
 801a1d8:	f000 f87c 	bl	801a2d4 <_sbrk_r>
 801a1dc:	3001      	adds	r0, #1
 801a1de:	d101      	bne.n	801a1e4 <sbrk_aligned+0x38>
 801a1e0:	f04f 34ff 	mov.w	r4, #4294967295
 801a1e4:	4620      	mov	r0, r4
 801a1e6:	bd70      	pop	{r4, r5, r6, pc}
 801a1e8:	2000e044 	.word	0x2000e044

0801a1ec <_malloc_r>:
 801a1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1f0:	1ccd      	adds	r5, r1, #3
 801a1f2:	f025 0503 	bic.w	r5, r5, #3
 801a1f6:	3508      	adds	r5, #8
 801a1f8:	2d0c      	cmp	r5, #12
 801a1fa:	bf38      	it	cc
 801a1fc:	250c      	movcc	r5, #12
 801a1fe:	2d00      	cmp	r5, #0
 801a200:	4607      	mov	r7, r0
 801a202:	db01      	blt.n	801a208 <_malloc_r+0x1c>
 801a204:	42a9      	cmp	r1, r5
 801a206:	d905      	bls.n	801a214 <_malloc_r+0x28>
 801a208:	230c      	movs	r3, #12
 801a20a:	603b      	str	r3, [r7, #0]
 801a20c:	2600      	movs	r6, #0
 801a20e:	4630      	mov	r0, r6
 801a210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a214:	4e2e      	ldr	r6, [pc, #184]	; (801a2d0 <_malloc_r+0xe4>)
 801a216:	f000 f94d 	bl	801a4b4 <__malloc_lock>
 801a21a:	6833      	ldr	r3, [r6, #0]
 801a21c:	461c      	mov	r4, r3
 801a21e:	bb34      	cbnz	r4, 801a26e <_malloc_r+0x82>
 801a220:	4629      	mov	r1, r5
 801a222:	4638      	mov	r0, r7
 801a224:	f7ff ffc2 	bl	801a1ac <sbrk_aligned>
 801a228:	1c43      	adds	r3, r0, #1
 801a22a:	4604      	mov	r4, r0
 801a22c:	d14d      	bne.n	801a2ca <_malloc_r+0xde>
 801a22e:	6834      	ldr	r4, [r6, #0]
 801a230:	4626      	mov	r6, r4
 801a232:	2e00      	cmp	r6, #0
 801a234:	d140      	bne.n	801a2b8 <_malloc_r+0xcc>
 801a236:	6823      	ldr	r3, [r4, #0]
 801a238:	4631      	mov	r1, r6
 801a23a:	4638      	mov	r0, r7
 801a23c:	eb04 0803 	add.w	r8, r4, r3
 801a240:	f000 f848 	bl	801a2d4 <_sbrk_r>
 801a244:	4580      	cmp	r8, r0
 801a246:	d13a      	bne.n	801a2be <_malloc_r+0xd2>
 801a248:	6821      	ldr	r1, [r4, #0]
 801a24a:	3503      	adds	r5, #3
 801a24c:	1a6d      	subs	r5, r5, r1
 801a24e:	f025 0503 	bic.w	r5, r5, #3
 801a252:	3508      	adds	r5, #8
 801a254:	2d0c      	cmp	r5, #12
 801a256:	bf38      	it	cc
 801a258:	250c      	movcc	r5, #12
 801a25a:	4629      	mov	r1, r5
 801a25c:	4638      	mov	r0, r7
 801a25e:	f7ff ffa5 	bl	801a1ac <sbrk_aligned>
 801a262:	3001      	adds	r0, #1
 801a264:	d02b      	beq.n	801a2be <_malloc_r+0xd2>
 801a266:	6823      	ldr	r3, [r4, #0]
 801a268:	442b      	add	r3, r5
 801a26a:	6023      	str	r3, [r4, #0]
 801a26c:	e00e      	b.n	801a28c <_malloc_r+0xa0>
 801a26e:	6822      	ldr	r2, [r4, #0]
 801a270:	1b52      	subs	r2, r2, r5
 801a272:	d41e      	bmi.n	801a2b2 <_malloc_r+0xc6>
 801a274:	2a0b      	cmp	r2, #11
 801a276:	d916      	bls.n	801a2a6 <_malloc_r+0xba>
 801a278:	1961      	adds	r1, r4, r5
 801a27a:	42a3      	cmp	r3, r4
 801a27c:	6025      	str	r5, [r4, #0]
 801a27e:	bf18      	it	ne
 801a280:	6059      	strne	r1, [r3, #4]
 801a282:	6863      	ldr	r3, [r4, #4]
 801a284:	bf08      	it	eq
 801a286:	6031      	streq	r1, [r6, #0]
 801a288:	5162      	str	r2, [r4, r5]
 801a28a:	604b      	str	r3, [r1, #4]
 801a28c:	4638      	mov	r0, r7
 801a28e:	f104 060b 	add.w	r6, r4, #11
 801a292:	f000 f915 	bl	801a4c0 <__malloc_unlock>
 801a296:	f026 0607 	bic.w	r6, r6, #7
 801a29a:	1d23      	adds	r3, r4, #4
 801a29c:	1af2      	subs	r2, r6, r3
 801a29e:	d0b6      	beq.n	801a20e <_malloc_r+0x22>
 801a2a0:	1b9b      	subs	r3, r3, r6
 801a2a2:	50a3      	str	r3, [r4, r2]
 801a2a4:	e7b3      	b.n	801a20e <_malloc_r+0x22>
 801a2a6:	6862      	ldr	r2, [r4, #4]
 801a2a8:	42a3      	cmp	r3, r4
 801a2aa:	bf0c      	ite	eq
 801a2ac:	6032      	streq	r2, [r6, #0]
 801a2ae:	605a      	strne	r2, [r3, #4]
 801a2b0:	e7ec      	b.n	801a28c <_malloc_r+0xa0>
 801a2b2:	4623      	mov	r3, r4
 801a2b4:	6864      	ldr	r4, [r4, #4]
 801a2b6:	e7b2      	b.n	801a21e <_malloc_r+0x32>
 801a2b8:	4634      	mov	r4, r6
 801a2ba:	6876      	ldr	r6, [r6, #4]
 801a2bc:	e7b9      	b.n	801a232 <_malloc_r+0x46>
 801a2be:	230c      	movs	r3, #12
 801a2c0:	603b      	str	r3, [r7, #0]
 801a2c2:	4638      	mov	r0, r7
 801a2c4:	f000 f8fc 	bl	801a4c0 <__malloc_unlock>
 801a2c8:	e7a1      	b.n	801a20e <_malloc_r+0x22>
 801a2ca:	6025      	str	r5, [r4, #0]
 801a2cc:	e7de      	b.n	801a28c <_malloc_r+0xa0>
 801a2ce:	bf00      	nop
 801a2d0:	2000e040 	.word	0x2000e040

0801a2d4 <_sbrk_r>:
 801a2d4:	b538      	push	{r3, r4, r5, lr}
 801a2d6:	4d06      	ldr	r5, [pc, #24]	; (801a2f0 <_sbrk_r+0x1c>)
 801a2d8:	2300      	movs	r3, #0
 801a2da:	4604      	mov	r4, r0
 801a2dc:	4608      	mov	r0, r1
 801a2de:	602b      	str	r3, [r5, #0]
 801a2e0:	f7e9 fc16 	bl	8003b10 <_sbrk>
 801a2e4:	1c43      	adds	r3, r0, #1
 801a2e6:	d102      	bne.n	801a2ee <_sbrk_r+0x1a>
 801a2e8:	682b      	ldr	r3, [r5, #0]
 801a2ea:	b103      	cbz	r3, 801a2ee <_sbrk_r+0x1a>
 801a2ec:	6023      	str	r3, [r4, #0]
 801a2ee:	bd38      	pop	{r3, r4, r5, pc}
 801a2f0:	2000e048 	.word	0x2000e048

0801a2f4 <_raise_r>:
 801a2f4:	291f      	cmp	r1, #31
 801a2f6:	b538      	push	{r3, r4, r5, lr}
 801a2f8:	4604      	mov	r4, r0
 801a2fa:	460d      	mov	r5, r1
 801a2fc:	d904      	bls.n	801a308 <_raise_r+0x14>
 801a2fe:	2316      	movs	r3, #22
 801a300:	6003      	str	r3, [r0, #0]
 801a302:	f04f 30ff 	mov.w	r0, #4294967295
 801a306:	bd38      	pop	{r3, r4, r5, pc}
 801a308:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a30a:	b112      	cbz	r2, 801a312 <_raise_r+0x1e>
 801a30c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a310:	b94b      	cbnz	r3, 801a326 <_raise_r+0x32>
 801a312:	4620      	mov	r0, r4
 801a314:	f000 f830 	bl	801a378 <_getpid_r>
 801a318:	462a      	mov	r2, r5
 801a31a:	4601      	mov	r1, r0
 801a31c:	4620      	mov	r0, r4
 801a31e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a322:	f000 b817 	b.w	801a354 <_kill_r>
 801a326:	2b01      	cmp	r3, #1
 801a328:	d00a      	beq.n	801a340 <_raise_r+0x4c>
 801a32a:	1c59      	adds	r1, r3, #1
 801a32c:	d103      	bne.n	801a336 <_raise_r+0x42>
 801a32e:	2316      	movs	r3, #22
 801a330:	6003      	str	r3, [r0, #0]
 801a332:	2001      	movs	r0, #1
 801a334:	e7e7      	b.n	801a306 <_raise_r+0x12>
 801a336:	2400      	movs	r4, #0
 801a338:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a33c:	4628      	mov	r0, r5
 801a33e:	4798      	blx	r3
 801a340:	2000      	movs	r0, #0
 801a342:	e7e0      	b.n	801a306 <_raise_r+0x12>

0801a344 <raise>:
 801a344:	4b02      	ldr	r3, [pc, #8]	; (801a350 <raise+0xc>)
 801a346:	4601      	mov	r1, r0
 801a348:	6818      	ldr	r0, [r3, #0]
 801a34a:	f7ff bfd3 	b.w	801a2f4 <_raise_r>
 801a34e:	bf00      	nop
 801a350:	20000130 	.word	0x20000130

0801a354 <_kill_r>:
 801a354:	b538      	push	{r3, r4, r5, lr}
 801a356:	4d07      	ldr	r5, [pc, #28]	; (801a374 <_kill_r+0x20>)
 801a358:	2300      	movs	r3, #0
 801a35a:	4604      	mov	r4, r0
 801a35c:	4608      	mov	r0, r1
 801a35e:	4611      	mov	r1, r2
 801a360:	602b      	str	r3, [r5, #0]
 801a362:	f7e9 fbbb 	bl	8003adc <_kill>
 801a366:	1c43      	adds	r3, r0, #1
 801a368:	d102      	bne.n	801a370 <_kill_r+0x1c>
 801a36a:	682b      	ldr	r3, [r5, #0]
 801a36c:	b103      	cbz	r3, 801a370 <_kill_r+0x1c>
 801a36e:	6023      	str	r3, [r4, #0]
 801a370:	bd38      	pop	{r3, r4, r5, pc}
 801a372:	bf00      	nop
 801a374:	2000e048 	.word	0x2000e048

0801a378 <_getpid_r>:
 801a378:	f7e9 bba8 	b.w	8003acc <_getpid>

0801a37c <strcat>:
 801a37c:	b510      	push	{r4, lr}
 801a37e:	4602      	mov	r2, r0
 801a380:	7814      	ldrb	r4, [r2, #0]
 801a382:	4613      	mov	r3, r2
 801a384:	3201      	adds	r2, #1
 801a386:	2c00      	cmp	r4, #0
 801a388:	d1fa      	bne.n	801a380 <strcat+0x4>
 801a38a:	3b01      	subs	r3, #1
 801a38c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a390:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a394:	2a00      	cmp	r2, #0
 801a396:	d1f9      	bne.n	801a38c <strcat+0x10>
 801a398:	bd10      	pop	{r4, pc}
	...

0801a39c <_strtol_l.constprop.0>:
 801a39c:	2b01      	cmp	r3, #1
 801a39e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a3a2:	d001      	beq.n	801a3a8 <_strtol_l.constprop.0+0xc>
 801a3a4:	2b24      	cmp	r3, #36	; 0x24
 801a3a6:	d906      	bls.n	801a3b6 <_strtol_l.constprop.0+0x1a>
 801a3a8:	f7ff fe4a 	bl	801a040 <__errno>
 801a3ac:	2316      	movs	r3, #22
 801a3ae:	6003      	str	r3, [r0, #0]
 801a3b0:	2000      	movs	r0, #0
 801a3b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801a49c <_strtol_l.constprop.0+0x100>
 801a3ba:	460d      	mov	r5, r1
 801a3bc:	462e      	mov	r6, r5
 801a3be:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a3c2:	f814 700c 	ldrb.w	r7, [r4, ip]
 801a3c6:	f017 0708 	ands.w	r7, r7, #8
 801a3ca:	d1f7      	bne.n	801a3bc <_strtol_l.constprop.0+0x20>
 801a3cc:	2c2d      	cmp	r4, #45	; 0x2d
 801a3ce:	d132      	bne.n	801a436 <_strtol_l.constprop.0+0x9a>
 801a3d0:	782c      	ldrb	r4, [r5, #0]
 801a3d2:	2701      	movs	r7, #1
 801a3d4:	1cb5      	adds	r5, r6, #2
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d05b      	beq.n	801a492 <_strtol_l.constprop.0+0xf6>
 801a3da:	2b10      	cmp	r3, #16
 801a3dc:	d109      	bne.n	801a3f2 <_strtol_l.constprop.0+0x56>
 801a3de:	2c30      	cmp	r4, #48	; 0x30
 801a3e0:	d107      	bne.n	801a3f2 <_strtol_l.constprop.0+0x56>
 801a3e2:	782c      	ldrb	r4, [r5, #0]
 801a3e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801a3e8:	2c58      	cmp	r4, #88	; 0x58
 801a3ea:	d14d      	bne.n	801a488 <_strtol_l.constprop.0+0xec>
 801a3ec:	786c      	ldrb	r4, [r5, #1]
 801a3ee:	2310      	movs	r3, #16
 801a3f0:	3502      	adds	r5, #2
 801a3f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801a3f6:	f108 38ff 	add.w	r8, r8, #4294967295
 801a3fa:	f04f 0c00 	mov.w	ip, #0
 801a3fe:	fbb8 f9f3 	udiv	r9, r8, r3
 801a402:	4666      	mov	r6, ip
 801a404:	fb03 8a19 	mls	sl, r3, r9, r8
 801a408:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801a40c:	f1be 0f09 	cmp.w	lr, #9
 801a410:	d816      	bhi.n	801a440 <_strtol_l.constprop.0+0xa4>
 801a412:	4674      	mov	r4, lr
 801a414:	42a3      	cmp	r3, r4
 801a416:	dd24      	ble.n	801a462 <_strtol_l.constprop.0+0xc6>
 801a418:	f1bc 0f00 	cmp.w	ip, #0
 801a41c:	db1e      	blt.n	801a45c <_strtol_l.constprop.0+0xc0>
 801a41e:	45b1      	cmp	r9, r6
 801a420:	d31c      	bcc.n	801a45c <_strtol_l.constprop.0+0xc0>
 801a422:	d101      	bne.n	801a428 <_strtol_l.constprop.0+0x8c>
 801a424:	45a2      	cmp	sl, r4
 801a426:	db19      	blt.n	801a45c <_strtol_l.constprop.0+0xc0>
 801a428:	fb06 4603 	mla	r6, r6, r3, r4
 801a42c:	f04f 0c01 	mov.w	ip, #1
 801a430:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a434:	e7e8      	b.n	801a408 <_strtol_l.constprop.0+0x6c>
 801a436:	2c2b      	cmp	r4, #43	; 0x2b
 801a438:	bf04      	itt	eq
 801a43a:	782c      	ldrbeq	r4, [r5, #0]
 801a43c:	1cb5      	addeq	r5, r6, #2
 801a43e:	e7ca      	b.n	801a3d6 <_strtol_l.constprop.0+0x3a>
 801a440:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801a444:	f1be 0f19 	cmp.w	lr, #25
 801a448:	d801      	bhi.n	801a44e <_strtol_l.constprop.0+0xb2>
 801a44a:	3c37      	subs	r4, #55	; 0x37
 801a44c:	e7e2      	b.n	801a414 <_strtol_l.constprop.0+0x78>
 801a44e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801a452:	f1be 0f19 	cmp.w	lr, #25
 801a456:	d804      	bhi.n	801a462 <_strtol_l.constprop.0+0xc6>
 801a458:	3c57      	subs	r4, #87	; 0x57
 801a45a:	e7db      	b.n	801a414 <_strtol_l.constprop.0+0x78>
 801a45c:	f04f 3cff 	mov.w	ip, #4294967295
 801a460:	e7e6      	b.n	801a430 <_strtol_l.constprop.0+0x94>
 801a462:	f1bc 0f00 	cmp.w	ip, #0
 801a466:	da05      	bge.n	801a474 <_strtol_l.constprop.0+0xd8>
 801a468:	2322      	movs	r3, #34	; 0x22
 801a46a:	6003      	str	r3, [r0, #0]
 801a46c:	4646      	mov	r6, r8
 801a46e:	b942      	cbnz	r2, 801a482 <_strtol_l.constprop.0+0xe6>
 801a470:	4630      	mov	r0, r6
 801a472:	e79e      	b.n	801a3b2 <_strtol_l.constprop.0+0x16>
 801a474:	b107      	cbz	r7, 801a478 <_strtol_l.constprop.0+0xdc>
 801a476:	4276      	negs	r6, r6
 801a478:	2a00      	cmp	r2, #0
 801a47a:	d0f9      	beq.n	801a470 <_strtol_l.constprop.0+0xd4>
 801a47c:	f1bc 0f00 	cmp.w	ip, #0
 801a480:	d000      	beq.n	801a484 <_strtol_l.constprop.0+0xe8>
 801a482:	1e69      	subs	r1, r5, #1
 801a484:	6011      	str	r1, [r2, #0]
 801a486:	e7f3      	b.n	801a470 <_strtol_l.constprop.0+0xd4>
 801a488:	2430      	movs	r4, #48	; 0x30
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d1b1      	bne.n	801a3f2 <_strtol_l.constprop.0+0x56>
 801a48e:	2308      	movs	r3, #8
 801a490:	e7af      	b.n	801a3f2 <_strtol_l.constprop.0+0x56>
 801a492:	2c30      	cmp	r4, #48	; 0x30
 801a494:	d0a5      	beq.n	801a3e2 <_strtol_l.constprop.0+0x46>
 801a496:	230a      	movs	r3, #10
 801a498:	e7ab      	b.n	801a3f2 <_strtol_l.constprop.0+0x56>
 801a49a:	bf00      	nop
 801a49c:	0802e849 	.word	0x0802e849

0801a4a0 <strtol>:
 801a4a0:	4613      	mov	r3, r2
 801a4a2:	460a      	mov	r2, r1
 801a4a4:	4601      	mov	r1, r0
 801a4a6:	4802      	ldr	r0, [pc, #8]	; (801a4b0 <strtol+0x10>)
 801a4a8:	6800      	ldr	r0, [r0, #0]
 801a4aa:	f7ff bf77 	b.w	801a39c <_strtol_l.constprop.0>
 801a4ae:	bf00      	nop
 801a4b0:	20000130 	.word	0x20000130

0801a4b4 <__malloc_lock>:
 801a4b4:	4801      	ldr	r0, [pc, #4]	; (801a4bc <__malloc_lock+0x8>)
 801a4b6:	f000 b809 	b.w	801a4cc <__retarget_lock_acquire_recursive>
 801a4ba:	bf00      	nop
 801a4bc:	2000e04c 	.word	0x2000e04c

0801a4c0 <__malloc_unlock>:
 801a4c0:	4801      	ldr	r0, [pc, #4]	; (801a4c8 <__malloc_unlock+0x8>)
 801a4c2:	f000 b804 	b.w	801a4ce <__retarget_lock_release_recursive>
 801a4c6:	bf00      	nop
 801a4c8:	2000e04c 	.word	0x2000e04c

0801a4cc <__retarget_lock_acquire_recursive>:
 801a4cc:	4770      	bx	lr

0801a4ce <__retarget_lock_release_recursive>:
 801a4ce:	4770      	bx	lr

0801a4d0 <_init>:
 801a4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4d2:	bf00      	nop
 801a4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a4d6:	bc08      	pop	{r3}
 801a4d8:	469e      	mov	lr, r3
 801a4da:	4770      	bx	lr

0801a4dc <_fini>:
 801a4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4de:	bf00      	nop
 801a4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a4e2:	bc08      	pop	{r3}
 801a4e4:	469e      	mov	lr, r3
 801a4e6:	4770      	bx	lr
