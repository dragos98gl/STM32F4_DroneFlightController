
flightController_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  08014dd0  08014dd0  00024dd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801551c  0801551c  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  0801551c  0801551c  0002551c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015524  08015524  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015524  08015524  00025524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801552c  0801552c  0002552c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08015534  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003007c  2**0
                  CONTENTS
 10 .bss          000050a0  20000080  20000080  00030080  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005120  20005120  00030080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0007f4a5  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000992c  00000000  00000000  000af551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a38  00000000  00000000  000b8e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000027d0  00000000  00000000  000bb8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000bdbc  00000000  00000000  000be088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000304e3  00000000  00000000  000c9e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff4ba  00000000  00000000  000fa327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001f97e1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d78c  00000000  00000000  001f9834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014db8 	.word	0x08014db8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08014db8 	.word	0x08014db8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ebc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <vApplicationGetIdleTaskMemory+0x30>)
 8000ec2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	2000009c 	.word	0x2000009c
 8000edc:	200000f0 	.word	0x200000f0

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <_ZN7Timeout23incrementTimeoutCounterEv>:
	void resetTimeoutCounter()
	{
		timeout_counter=0;
	}

	void incrementTimeoutCounter()
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	{
		timeout_counter++;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	785b      	ldrb	r3, [r3, #1]
 8000f34:	3301      	adds	r3, #1
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	705a      	strb	r2, [r3, #1]

		if (timeout_counter>timeout_value)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	785a      	ldrb	r2, [r3, #1]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	789b      	ldrb	r3, [r3, #2]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d902      	bls.n	8000f4e <_ZN7Timeout23incrementTimeoutCounterEv+0x26>
			status = Status::Timeout;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
	}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <_ZN11PID_ControlC1ERfS0_fff>:
	float &signal;
	float &reference;
	float error = 0;
	float last_signal = 0;
public:
	PID_Control(float &signal, float &reference,float Kp,float Ki,float Kd):
 8000f5a:	b480      	push	{r7}
 8000f5c:	b087      	sub	sp, #28
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6178      	str	r0, [r7, #20]
 8000f62:	6139      	str	r1, [r7, #16]
 8000f64:	60fa      	str	r2, [r7, #12]
 8000f66:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f6a:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f6e:	ed87 1a00 	vstr	s2, [r7]
		signal(signal),
		reference(reference),
		Kp(Kp),
		Ki(Ki),
		Kd(Kd)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	68ba      	ldr	r2, [r7, #8]
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	615a      	str	r2, [r3, #20]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	61da      	str	r2, [r3, #28]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	621a      	str	r2, [r3, #32]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	625a      	str	r2, [r3, #36]	; 0x24
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
	{
		last_signal = signal;
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	629a      	str	r2, [r3, #40]	; 0x28
	};
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <_ZN17BatteryManagementC1EP17ADC_HandleTypeDefP6Buzzert>:
	ADC_HandleTypeDef *adc_port;

	uint16_t msToTick(uint16_t ms);
	void toPercentage();
public:
	BatteryManagement(ADC_HandleTypeDef *adc_port,Buzzer *buzz,uint16_t frequency_ms):
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60f8      	str	r0, [r7, #12]
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	807b      	strh	r3, [r7, #2]
		adc_port(adc_port),buzz(buzz)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f640 3222 	movw	r2, #2850	; 0xb22
 8000fea:	801a      	strh	r2, [r3, #0]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000ff2:	805a      	strh	r2, [r3, #2]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2200      	movs	r2, #0
 8001000:	811a      	strh	r2, [r3, #8]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	61da      	str	r2, [r3, #28]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	621a      	str	r2, [r3, #32]
	{
		frequency_tick = msToTick(frequency_ms);
 800102a:	887b      	ldrh	r3, [r7, #2]
 800102c:	4619      	mov	r1, r3
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	f002 ff4a 	bl	8003ec8 <_ZN17BatteryManagement8msToTickEt>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	811a      	strh	r2, [r3, #8]
	}
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <_ZN6BuzzerC1Ev>:
#ifndef LIBS_BUZZER_LIB_BUZZER_HPP_
#define LIBS_BUZZER_LIB_BUZZER_HPP_

#include "stm32f4xx_hal.h"

class Buzzer
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2210      	movs	r2, #16
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <_ZN6BuzzerC1Ev+0x50>)
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	819a      	strh	r2, [r3, #12]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	81da      	strh	r2, [r3, #14]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	821a      	strh	r2, [r3, #16]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	825a      	strh	r2, [r3, #18]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	829a      	strh	r2, [r3, #20]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	759a      	strb	r2, [r3, #22]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40020000 	.word	0x40020000

0800109c <HAL_UART_TxCpltCallback>:
int icmCouter2 = 0;
int duplicates = 0;
int duplicatesCounter = 0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <HAL_UART_TxCpltCallback+0x2c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d107      	bne.n	80010be <HAL_UART_TxCpltCallback+0x22>
    {
    	tick1++;
 80010ae:	4b07      	ldr	r3, [pc, #28]	; (80010cc <HAL_UART_TxCpltCallback+0x30>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	4a05      	ldr	r2, [pc, #20]	; (80010cc <HAL_UART_TxCpltCallback+0x30>)
 80010b6:	6013      	str	r3, [r2, #0]

    	bt.printfSensorsValues();
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <HAL_UART_TxCpltCallback+0x34>)
 80010ba:	f003 fc97 	bl	80049ec <_ZN4HC0519printfSensorsValuesEv>
    }
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40011000 	.word	0x40011000
 80010cc:	20000e44 	.word	0x20000e44
 80010d0:	20000b24 	.word	0x20000b24

080010d4 <HAL_TIM_PeriodElapsedCallback>:

int timCounter2 = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a09      	ldr	r2, [pc, #36]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d101      	bne.n	80010ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010e6:	f006 fa15 	bl	8007514 <HAL_IncTick>
  }

  if (htim->Instance == TIM4)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d104      	bne.n	80010fe <HAL_TIM_PeriodElapsedCallback+0x2a>
  {
	  timCounter2++;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80010fc:	6013      	str	r3, [r2, #0]
  }
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40010000 	.word	0x40010000
 800110c:	40000800 	.word	0x40000800
 8001110:	20000e54 	.word	0x20000e54

08001114 <HAL_GPIO_EXTI_Callback>:

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af02      	add	r7, sp, #8
 800111a:	4603      	mov	r3, r0
 800111c:	80fb      	strh	r3, [r7, #6]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]

	switch (GPIO_Pin)
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001128:	d021      	beq.n	800116e <HAL_GPIO_EXTI_Callback+0x5a>
 800112a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800112e:	dc57      	bgt.n	80011e0 <HAL_GPIO_EXTI_Callback+0xcc>
 8001130:	2b04      	cmp	r3, #4
 8001132:	d03a      	beq.n	80011aa <HAL_GPIO_EXTI_Callback+0x96>
 8001134:	2b10      	cmp	r3, #16
 8001136:	d153      	bne.n	80011e0 <HAL_GPIO_EXTI_Callback+0xcc>
	{
	case (GPIO_PIN_4):
		xTaskNotifyFromISR(SensorsDataReadHandler, EnumSensorsInterrupt::ICM42688P_t, eSetBits, &pxHigherPriorityTaskWoken);
 8001138:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <HAL_GPIO_EXTI_Callback+0xd4>)
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2300      	movs	r3, #0
 8001144:	2201      	movs	r2, #1
 8001146:	2101      	movs	r1, #1
 8001148:	f010 fcf6 	bl	8011b38 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d007      	beq.n	8001162 <HAL_GPIO_EXTI_Callback+0x4e>
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <HAL_GPIO_EXTI_Callback+0xd8>)
 8001154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	f3bf 8f4f 	dsb	sy
 800115e:	f3bf 8f6f 	isb	sy
		icmCounter1++;
 8001162:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	4a21      	ldr	r2, [pc, #132]	; (80011f0 <HAL_GPIO_EXTI_Callback+0xdc>)
 800116a:	6013      	str	r3, [r2, #0]
		break;
 800116c:	e038      	b.n	80011e0 <HAL_GPIO_EXTI_Callback+0xcc>

	case (GPIO_PIN_8):
		xTaskNotifyFromISR(SensorsDataReadHandler, EnumSensorsInterrupt::BMP390_t, eSetBits, &pxHigherPriorityTaskWoken);
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2300      	movs	r3, #0
 800117a:	2201      	movs	r2, #1
 800117c:	2102      	movs	r1, #2
 800117e:	f010 fcdb 	bl	8011b38 <xTaskGenericNotifyFromISR>
		if (pxHigherPriorityTaskWoken)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00a      	beq.n	800119e <HAL_GPIO_EXTI_Callback+0x8a>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d007      	beq.n	800119e <HAL_GPIO_EXTI_Callback+0x8a>
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <HAL_GPIO_EXTI_Callback+0xd8>)
 8001190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	f3bf 8f4f 	dsb	sy
 800119a:	f3bf 8f6f 	isb	sy
		bmpCounter1++;
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_GPIO_EXTI_Callback+0xe0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	4a13      	ldr	r2, [pc, #76]	; (80011f4 <HAL_GPIO_EXTI_Callback+0xe0>)
 80011a6:	6013      	str	r3, [r2, #0]
		break;
 80011a8:	e01a      	b.n	80011e0 <HAL_GPIO_EXTI_Callback+0xcc>

	case (GPIO_PIN_2):
		xTaskNotifyFromISR(SensorsDataReadHandler, EnumSensorsInterrupt::LIS3MDLTR_t, eSetBits, &pxHigherPriorityTaskWoken);
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_GPIO_EXTI_Callback+0xd4>)
 80011ac:	6818      	ldr	r0, [r3, #0]
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2300      	movs	r3, #0
 80011b6:	2201      	movs	r2, #1
 80011b8:	2104      	movs	r1, #4
 80011ba:	f010 fcbd 	bl	8011b38 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d007      	beq.n	80011d4 <HAL_GPIO_EXTI_Callback+0xc0>
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_GPIO_EXTI_Callback+0xd8>)
 80011c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	f3bf 8f4f 	dsb	sy
 80011d0:	f3bf 8f6f 	isb	sy
		lisCounter1++;
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80011dc:	6013      	str	r3, [r2, #0]
		break;
 80011de:	bf00      	nop
	}
}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000d70 	.word	0x20000d70
 80011ec:	e000ed04 	.word	0xe000ed04
 80011f0:	20000d90 	.word	0x20000d90
 80011f4:	20000d94 	.word	0x20000d94
 80011f8:	20000d98 	.word	0x20000d98

080011fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af02      	add	r7, sp, #8
 8001202:	6078      	str	r0, [r7, #4]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]

	if (huart->Instance == USART2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a30      	ldr	r2, [pc, #192]	; (80012d0 <HAL_UART_RxCpltCallback+0xd4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d11a      	bne.n	8001248 <HAL_UART_RxCpltCallback+0x4c>
	{
		xTaskNotifyFromISR(SensorsDataReadHandler, EnumSensorsInterrupt::PMW_t, eSetBits, &pxHigherPriorityTaskWoken);
 8001212:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <HAL_UART_RxCpltCallback+0xd8>)
 8001214:	6818      	ldr	r0, [r3, #0]
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2300      	movs	r3, #0
 800121e:	2201      	movs	r2, #1
 8001220:	2108      	movs	r1, #8
 8001222:	f010 fc89 	bl	8011b38 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d007      	beq.n	800123c <HAL_UART_RxCpltCallback+0x40>
 800122c:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <HAL_UART_RxCpltCallback+0xdc>)
 800122e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	f3bf 8f4f 	dsb	sy
 8001238:	f3bf 8f6f 	isb	sy
		pmwCounter1++;
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <HAL_UART_RxCpltCallback+0xe0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	4a26      	ldr	r2, [pc, #152]	; (80012dc <HAL_UART_RxCpltCallback+0xe0>)
 8001244:	6013      	str	r3, [r2, #0]
		xTaskNotifyFromISR(SensorsDataReadHandler, EnumSensorsInterrupt::SONAR_t, eSetBits, &pxHigherPriorityTaskWoken);
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
		sonarCounter1++;

	}
}
 8001246:	e03e      	b.n	80012c6 <HAL_UART_RxCpltCallback+0xca>
	} else if (huart->Instance == USART3)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a24      	ldr	r2, [pc, #144]	; (80012e0 <HAL_UART_RxCpltCallback+0xe4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d11a      	bne.n	8001288 <HAL_UART_RxCpltCallback+0x8c>
		xTaskNotifyFromISR(SensorsDataReadHandler, EnumSensorsInterrupt::REMOTERX_t, eSetBits, &pxHigherPriorityTaskWoken);
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <HAL_UART_RxCpltCallback+0xd8>)
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2300      	movs	r3, #0
 800125e:	2201      	movs	r2, #1
 8001260:	2110      	movs	r1, #16
 8001262:	f010 fc69 	bl	8011b38 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d007      	beq.n	800127c <HAL_UART_RxCpltCallback+0x80>
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <HAL_UART_RxCpltCallback+0xdc>)
 800126e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	f3bf 8f4f 	dsb	sy
 8001278:	f3bf 8f6f 	isb	sy
		remoteCounter1++;
 800127c:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <HAL_UART_RxCpltCallback+0xe8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <HAL_UART_RxCpltCallback+0xe8>)
 8001284:	6013      	str	r3, [r2, #0]
}
 8001286:	e01e      	b.n	80012c6 <HAL_UART_RxCpltCallback+0xca>
	} else if (huart->Instance == UART4)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a16      	ldr	r2, [pc, #88]	; (80012e8 <HAL_UART_RxCpltCallback+0xec>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d119      	bne.n	80012c6 <HAL_UART_RxCpltCallback+0xca>
		xTaskNotifyFromISR(SensorsDataReadHandler, EnumSensorsInterrupt::SONAR_t, eSetBits, &pxHigherPriorityTaskWoken);
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <HAL_UART_RxCpltCallback+0xd8>)
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2300      	movs	r3, #0
 800129e:	2201      	movs	r2, #1
 80012a0:	2120      	movs	r1, #32
 80012a2:	f010 fc49 	bl	8011b38 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d007      	beq.n	80012bc <HAL_UART_RxCpltCallback+0xc0>
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_UART_RxCpltCallback+0xdc>)
 80012ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	f3bf 8f4f 	dsb	sy
 80012b8:	f3bf 8f6f 	isb	sy
		sonarCounter1++;
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_UART_RxCpltCallback+0xf0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_UART_RxCpltCallback+0xf0>)
 80012c4:	6013      	str	r3, [r2, #0]
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40004400 	.word	0x40004400
 80012d4:	20000d70 	.word	0x20000d70
 80012d8:	e000ed04 	.word	0xe000ed04
 80012dc:	20000da0 	.word	0x20000da0
 80012e0:	40004800 	.word	0x40004800
 80012e4:	20000d9c 	.word	0x20000d9c
 80012e8:	40004c00 	.word	0x40004c00
 80012ec:	20000da4 	.word	0x20000da4

080012f0 <main>:

int main(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af02      	add	r7, sp, #8
  HAL_Init();
 80012f6:	f006 f8eb 	bl	80074d0 <HAL_Init>
  SystemClock_Config();
 80012fa:	f000 fb01 	bl	8001900 <_Z18SystemClock_Configv>

  MX_GPIO_Init();
 80012fe:	f000 feb1 	bl	8002064 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001302:	f000 fe49 	bl	8001f98 <_ZL11MX_DMA_Initv>
  MX_SPI2_Init();
 8001306:	f000 fc05 	bl	8001b14 <_ZL12MX_SPI2_Initv>
  MX_USART1_UART_Init();
 800130a:	f000 fd89 	bl	8001e20 <_ZL19MX_USART1_UART_Initv>
  MX_SDIO_SD_Init();
 800130e:	f000 fbc7 	bl	8001aa0 <_ZL15MX_SDIO_SD_Initv>
  MX_USART3_UART_Init();
 8001312:	f000 fde1 	bl	8001ed8 <_ZL19MX_USART3_UART_Initv>
  MX_ADC1_Init();
 8001316:	f000 fb67 	bl	80019e8 <_ZL12MX_ADC1_Initv>
  MX_UART4_Init();
 800131a:	f000 fd53 	bl	8001dc4 <_ZL13MX_UART4_Initv>
  MX_USART2_UART_Init();
 800131e:	f000 fdad 	bl	8001e7c <_ZL19MX_USART2_UART_Initv>
  MX_USART6_UART_Init();
 8001322:	f000 fe0b 	bl	8001f3c <_ZL19MX_USART6_UART_Initv>
  MX_TIM4_Init();
 8001326:	f000 fcf1 	bl	8001d0c <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 800132a:	f000 fc2f 	bl	8001b8c <_ZL12MX_TIM3_Initv>

  bt.addSensor(&bmp);
 800132e:	4922      	ldr	r1, [pc, #136]	; (80013b8 <main+0xc8>)
 8001330:	4822      	ldr	r0, [pc, #136]	; (80013bc <main+0xcc>)
 8001332:	f003 fb4a 	bl	80049ca <_ZN4HC059addSensorEP15PrintableSensor>
  bt.addSensor(&lis);
 8001336:	4922      	ldr	r1, [pc, #136]	; (80013c0 <main+0xd0>)
 8001338:	4820      	ldr	r0, [pc, #128]	; (80013bc <main+0xcc>)
 800133a:	f003 fb46 	bl	80049ca <_ZN4HC059addSensorEP15PrintableSensor>
  bt.addSensor(&sonar);
 800133e:	4921      	ldr	r1, [pc, #132]	; (80013c4 <main+0xd4>)
 8001340:	481e      	ldr	r0, [pc, #120]	; (80013bc <main+0xcc>)
 8001342:	f003 fb42 	bl	80049ca <_ZN4HC059addSensorEP15PrintableSensor>
  bt.addSensor(&pmw);
 8001346:	4920      	ldr	r1, [pc, #128]	; (80013c8 <main+0xd8>)
 8001348:	481c      	ldr	r0, [pc, #112]	; (80013bc <main+0xcc>)
 800134a:	f003 fb3e 	bl	80049ca <_ZN4HC059addSensorEP15PrintableSensor>
  bt.addSensor(&icm);
 800134e:	491f      	ldr	r1, [pc, #124]	; (80013cc <main+0xdc>)
 8001350:	481a      	ldr	r0, [pc, #104]	; (80013bc <main+0xcc>)
 8001352:	f003 fb3a 	bl	80049ca <_ZN4HC059addSensorEP15PrintableSensor>

  bt.addSensorParameter(HC05::SENSOR_DATA_PARAMETER::BMP_RAW_PRESS);
 8001356:	210f      	movs	r1, #15
 8001358:	4818      	ldr	r0, [pc, #96]	; (80013bc <main+0xcc>)
 800135a:	f003 fb91 	bl	8004a80 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>
  //bt.addSensorParameter(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GY);
  //bt.addSensorParameter(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GZ);
  //bt.addSensorParameter(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AX);
  //bt.addSensorParameter(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AY);
  //bt.addSensorParameter(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AZ);
  bt.printfSensorsValues();
 800135e:	4817      	ldr	r0, [pc, #92]	; (80013bc <main+0xcc>)
 8001360:	f003 fb44 	bl	80049ec <_ZN4HC0519printfSensorsValuesEv>

  TIM3 -> CCR1 = 0;
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <main+0xe0>)
 8001366:	2200      	movs	r2, #0
 8001368:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3 -> CCR2 = 0;
 800136a:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <main+0xe0>)
 800136c:	2200      	movs	r2, #0
 800136e:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3 -> CCR3 = 0;
 8001370:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <main+0xe0>)
 8001372:	2200      	movs	r2, #0
 8001374:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3 -> CCR4 = 0;
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <main+0xe0>)
 8001378:	2200      	movs	r2, #0
 800137a:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800137c:	2100      	movs	r1, #0
 800137e:	4815      	ldr	r0, [pc, #84]	; (80013d4 <main+0xe4>)
 8001380:	f00a fd92 	bl	800bea8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001384:	2104      	movs	r1, #4
 8001386:	4813      	ldr	r0, [pc, #76]	; (80013d4 <main+0xe4>)
 8001388:	f00a fd8e 	bl	800bea8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800138c:	2108      	movs	r1, #8
 800138e:	4811      	ldr	r0, [pc, #68]	; (80013d4 <main+0xe4>)
 8001390:	f00a fd8a 	bl	800bea8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8001394:	210c      	movs	r1, #12
 8001396:	480f      	ldr	r0, [pc, #60]	; (80013d4 <main+0xe4>)
 8001398:	f00a fd86 	bl	800bea8 <HAL_TIM_PWM_Start>

  xTaskCreate(SensorsDataReadTask,"SensorsDataReadTask",256,NULL,tskIDLE_PRIORITY+3, &SensorsDataReadHandler);
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <main+0xe8>)
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	2303      	movs	r3, #3
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2300      	movs	r3, #0
 80013a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013aa:	490c      	ldr	r1, [pc, #48]	; (80013dc <main+0xec>)
 80013ac:	480c      	ldr	r0, [pc, #48]	; (80013e0 <main+0xf0>)
 80013ae:	f00f feb1 	bl	8011114 <xTaskCreate>
  vTaskStartScheduler();
 80013b2:	f010 f863 	bl	801147c <vTaskStartScheduler>

  while (1)
 80013b6:	e7fe      	b.n	80013b6 <main+0xc6>
 80013b8:	2000095c 	.word	0x2000095c
 80013bc:	20000b24 	.word	0x20000b24
 80013c0:	200008fc 	.word	0x200008fc
 80013c4:	20000cf0 	.word	0x20000cf0
 80013c8:	20000bb0 	.word	0x20000bb0
 80013cc:	20000a4c 	.word	0x20000a4c
 80013d0:	40000400 	.word	0x40000400
 80013d4:	20000534 	.word	0x20000534
 80013d8:	20000d70 	.word	0x20000d70
 80013dc:	08014dd0 	.word	0x08014dd0
 80013e0:	080013e5 	.word	0x080013e5

080013e4 <_Z19SensorsDataReadTaskPv>:
  {
  }
}

void SensorsDataReadTask(void *pvParameters)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim4);
 80013ec:	4876      	ldr	r0, [pc, #472]	; (80015c8 <_Z19SensorsDataReadTaskPv+0x1e4>)
 80013ee:	f00a fc91 	bl	800bd14 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2105      	movs	r1, #5
 80013f6:	2008      	movs	r0, #8
 80013f8:	f006 fd9a 	bl	8007f30 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80013fc:	2008      	movs	r0, #8
 80013fe:	f006 fdb3 	bl	8007f68 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2105      	movs	r1, #5
 8001406:	200a      	movs	r0, #10
 8001408:	f006 fd92 	bl	8007f30 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800140c:	200a      	movs	r0, #10
 800140e:	f006 fdab 	bl	8007f68 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2105      	movs	r1, #5
 8001416:	2017      	movs	r0, #23
 8001418:	f006 fd8a 	bl	8007f30 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800141c:	2017      	movs	r0, #23
 800141e:	f006 fda3 	bl	8007f68 <HAL_NVIC_EnableIRQ>
	NVIC_SetPriorityGrouping(0);
 8001422:	2000      	movs	r0, #0
 8001424:	f7ff fd5c 	bl	8000ee0 <__NVIC_SetPriorityGrouping>

	bool startup;
	if(!lis.defaultInit())
 8001428:	4868      	ldr	r0, [pc, #416]	; (80015cc <_Z19SensorsDataReadTaskPv+0x1e8>)
 800142a:	f005 fb0d 	bl	8006a48 <_ZN9LIS3MDLTR11defaultInitEv>
 800142e:	4603      	mov	r3, r0
 8001430:	f083 0301 	eor.w	r3, r3, #1
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <_Z19SensorsDataReadTaskPv+0x5a>
	  startup = false;
 800143a:	2300      	movs	r3, #0
 800143c:	75fb      	strb	r3, [r7, #23]
	lis.update();
 800143e:	4863      	ldr	r0, [pc, #396]	; (80015cc <_Z19SensorsDataReadTaskPv+0x1e8>)
 8001440:	f005 f9cc 	bl	80067dc <_ZN9LIS3MDLTR6updateEv>

	if (!icm.defaultInit())
 8001444:	4862      	ldr	r0, [pc, #392]	; (80015d0 <_Z19SensorsDataReadTaskPv+0x1ec>)
 8001446:	f004 fb8f 	bl	8005b68 <_ZN9ICM42688P11defaultInitEv>
 800144a:	4603      	mov	r3, r0
 800144c:	f083 0301 	eor.w	r3, r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <_Z19SensorsDataReadTaskPv+0x76>
	  startup = false;
 8001456:	2300      	movs	r3, #0
 8001458:	75fb      	strb	r3, [r7, #23]
	icm.update();
 800145a:	485d      	ldr	r0, [pc, #372]	; (80015d0 <_Z19SensorsDataReadTaskPv+0x1ec>)
 800145c:	f004 fde0 	bl	8006020 <_ZN9ICM42688P6updateEv>

	if (!bmp.defaultInit())
 8001460:	485c      	ldr	r0, [pc, #368]	; (80015d4 <_Z19SensorsDataReadTaskPv+0x1f0>)
 8001462:	f002 f87d 	bl	8003560 <_ZN6BMP39011defaultInitEv>
 8001466:	4603      	mov	r3, r0
 8001468:	f083 0301 	eor.w	r3, r3, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <_Z19SensorsDataReadTaskPv+0x92>
	  startup = false;
 8001472:	2300      	movs	r3, #0
 8001474:	75fb      	strb	r3, [r7, #23]
	bmp.update();
 8001476:	4857      	ldr	r0, [pc, #348]	; (80015d4 <_Z19SensorsDataReadTaskPv+0x1f0>)
 8001478:	f002 f92d 	bl	80036d6 <_ZN6BMP3906updateEv>

	remote_rx.begin();
 800147c:	4856      	ldr	r0, [pc, #344]	; (80015d8 <_Z19SensorsDataReadTaskPv+0x1f4>)
 800147e:	f002 fe77 	bl	8004170 <_ZN7FrSkyRX5beginEv>
	sonar.begin();
 8001482:	4856      	ldr	r0, [pc, #344]	; (80015dc <_Z19SensorsDataReadTaskPv+0x1f8>)
 8001484:	f005 fbd8 	bl	8006c38 <_ZN6MB10435beginEv>
	pmw.begin();
 8001488:	4855      	ldr	r0, [pc, #340]	; (80015e0 <_Z19SensorsDataReadTaskPv+0x1fc>)
 800148a:	f005 fcd7 	bl	8006e3c <_ZN9PMW3901UY5beginEv>

	uint32_t currentSensor = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
	xTaskCreate(DynamicsProcessTask,"DynamicsProcessTask",256,NULL,tskIDLE_PRIORITY+2, &DynamicsProcessHandler);
 8001492:	4b54      	ldr	r3, [pc, #336]	; (80015e4 <_Z19SensorsDataReadTaskPv+0x200>)
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	2302      	movs	r3, #2
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2300      	movs	r3, #0
 800149c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a0:	4951      	ldr	r1, [pc, #324]	; (80015e8 <_Z19SensorsDataReadTaskPv+0x204>)
 80014a2:	4852      	ldr	r0, [pc, #328]	; (80015ec <_Z19SensorsDataReadTaskPv+0x208>)
 80014a4:	f00f fe36 	bl	8011114 <xTaskCreate>
	xTaskCreate(FaultsCheckTask,"FaultsCheckTask",256,NULL,tskIDLE_PRIORITY+2, &FaultsCheckHandler);
 80014a8:	4b51      	ldr	r3, [pc, #324]	; (80015f0 <_Z19SensorsDataReadTaskPv+0x20c>)
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	2302      	movs	r3, #2
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2300      	movs	r3, #0
 80014b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b6:	494f      	ldr	r1, [pc, #316]	; (80015f4 <_Z19SensorsDataReadTaskPv+0x210>)
 80014b8:	484f      	ldr	r0, [pc, #316]	; (80015f8 <_Z19SensorsDataReadTaskPv+0x214>)
 80014ba:	f00f fe2b 	bl	8011114 <xTaskCreate>

	while (1)
	{
		if (xTaskNotifyWait(0x00, 0xFFFFFFFFUL, &currentSensor, portMAX_DELAY) == pdTRUE)
 80014be:	f107 020c 	add.w	r2, r7, #12
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	f04f 31ff 	mov.w	r1, #4294967295
 80014ca:	2000      	movs	r0, #0
 80014cc:	f010 fada 	bl	8011a84 <xTaskNotifyWait>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	bf0c      	ite	eq
 80014d6:	2301      	moveq	r3, #1
 80014d8:	2300      	movne	r3, #0
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0ee      	beq.n	80014be <_Z19SensorsDataReadTaskPv+0xda>
		{
			if (currentSensor & EnumSensorsInterrupt::ICM42688P_t)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d01e      	beq.n	8001528 <_Z19SensorsDataReadTaskPv+0x144>
			{
				icm.update();
 80014ea:	4839      	ldr	r0, [pc, #228]	; (80015d0 <_Z19SensorsDataReadTaskPv+0x1ec>)
 80014ec:	f004 fd98 	bl	8006020 <_ZN9ICM42688P6updateEv>
				icmCounter++;
 80014f0:	4b42      	ldr	r3, [pc, #264]	; (80015fc <_Z19SensorsDataReadTaskPv+0x218>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3301      	adds	r3, #1
 80014f6:	4a41      	ldr	r2, [pc, #260]	; (80015fc <_Z19SensorsDataReadTaskPv+0x218>)
 80014f8:	6013      	str	r3, [r2, #0]
				icmCouter2++;
 80014fa:	4b41      	ldr	r3, [pc, #260]	; (8001600 <_Z19SensorsDataReadTaskPv+0x21c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3301      	adds	r3, #1
 8001500:	4a3f      	ldr	r2, [pc, #252]	; (8001600 <_Z19SensorsDataReadTaskPv+0x21c>)
 8001502:	6013      	str	r3, [r2, #0]
				int testt = icm.getAccX();
 8001504:	4832      	ldr	r0, [pc, #200]	; (80015d0 <_Z19SensorsDataReadTaskPv+0x1ec>)
 8001506:	f005 f8cf 	bl	80066a8 <_ZN9ICM42688P7getAccXEv>
 800150a:	4603      	mov	r3, r0
 800150c:	613b      	str	r3, [r7, #16]
				if (testt==duplicates)
 800150e:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <_Z19SensorsDataReadTaskPv+0x220>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	429a      	cmp	r2, r3
 8001516:	d104      	bne.n	8001522 <_Z19SensorsDataReadTaskPv+0x13e>
					duplicatesCounter++;
 8001518:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <_Z19SensorsDataReadTaskPv+0x224>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	4a3a      	ldr	r2, [pc, #232]	; (8001608 <_Z19SensorsDataReadTaskPv+0x224>)
 8001520:	6013      	str	r3, [r2, #0]
				duplicates = testt;
 8001522:	4a38      	ldr	r2, [pc, #224]	; (8001604 <_Z19SensorsDataReadTaskPv+0x220>)
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	6013      	str	r3, [r2, #0]
			}

			if (currentSensor & EnumSensorsInterrupt::BMP390_t)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d007      	beq.n	8001542 <_Z19SensorsDataReadTaskPv+0x15e>
			{
				bmp.update();
 8001532:	4828      	ldr	r0, [pc, #160]	; (80015d4 <_Z19SensorsDataReadTaskPv+0x1f0>)
 8001534:	f002 f8cf 	bl	80036d6 <_ZN6BMP3906updateEv>
				bmpCounter++;
 8001538:	4b34      	ldr	r3, [pc, #208]	; (800160c <_Z19SensorsDataReadTaskPv+0x228>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	4a33      	ldr	r2, [pc, #204]	; (800160c <_Z19SensorsDataReadTaskPv+0x228>)
 8001540:	6013      	str	r3, [r2, #0]
			}

			if (currentSensor & EnumSensorsInterrupt::LIS3MDLTR_t)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d007      	beq.n	800155c <_Z19SensorsDataReadTaskPv+0x178>
			{
				lis.update();
 800154c:	481f      	ldr	r0, [pc, #124]	; (80015cc <_Z19SensorsDataReadTaskPv+0x1e8>)
 800154e:	f005 f945 	bl	80067dc <_ZN9LIS3MDLTR6updateEv>
				lisCounter++;
 8001552:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <_Z19SensorsDataReadTaskPv+0x22c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	4a2d      	ldr	r2, [pc, #180]	; (8001610 <_Z19SensorsDataReadTaskPv+0x22c>)
 800155a:	6013      	str	r3, [r2, #0]
			}

			if (currentSensor & EnumSensorsInterrupt::PMW_t)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00a      	beq.n	800157c <_Z19SensorsDataReadTaskPv+0x198>
			{
				__HAL_UART_FLUSH_DRREGISTER(&huart2);
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <_Z19SensorsDataReadTaskPv+0x230>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
				pmw.update();
 800156c:	481c      	ldr	r0, [pc, #112]	; (80015e0 <_Z19SensorsDataReadTaskPv+0x1fc>)
 800156e:	f005 fc75 	bl	8006e5c <_ZN9PMW3901UY6updateEv>
				pmwCounter++;
 8001572:	4b29      	ldr	r3, [pc, #164]	; (8001618 <_Z19SensorsDataReadTaskPv+0x234>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	3301      	adds	r3, #1
 8001578:	4a27      	ldr	r2, [pc, #156]	; (8001618 <_Z19SensorsDataReadTaskPv+0x234>)
 800157a:	6013      	str	r3, [r2, #0]
			}

			if (currentSensor & EnumSensorsInterrupt::REMOTERX_t)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00a      	beq.n	800159c <_Z19SensorsDataReadTaskPv+0x1b8>
			{
				__HAL_UART_FLUSH_DRREGISTER(&huart3);
 8001586:	4b25      	ldr	r3, [pc, #148]	; (800161c <_Z19SensorsDataReadTaskPv+0x238>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
				remote_rx.update();
 800158c:	4812      	ldr	r0, [pc, #72]	; (80015d8 <_Z19SensorsDataReadTaskPv+0x1f4>)
 800158e:	f002 fdff 	bl	8004190 <_ZN7FrSkyRX6updateEv>
				remoteCounter++;
 8001592:	4b23      	ldr	r3, [pc, #140]	; (8001620 <_Z19SensorsDataReadTaskPv+0x23c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	3301      	adds	r3, #1
 8001598:	4a21      	ldr	r2, [pc, #132]	; (8001620 <_Z19SensorsDataReadTaskPv+0x23c>)
 800159a:	6013      	str	r3, [r2, #0]
			}

			if (currentSensor & EnumSensorsInterrupt::SONAR_t)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0320 	and.w	r3, r3, #32
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00a      	beq.n	80015bc <_Z19SensorsDataReadTaskPv+0x1d8>
			{
			   __HAL_UART_FLUSH_DRREGISTER(&huart4);
 80015a6:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <_Z19SensorsDataReadTaskPv+0x240>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
			   sonar.update();
 80015ac:	480b      	ldr	r0, [pc, #44]	; (80015dc <_Z19SensorsDataReadTaskPv+0x1f8>)
 80015ae:	f005 fb57 	bl	8006c60 <_ZN6MB10436updateEv>
			   sonarCounter++;
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <_Z19SensorsDataReadTaskPv+0x244>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	4a1b      	ldr	r2, [pc, #108]	; (8001628 <_Z19SensorsDataReadTaskPv+0x244>)
 80015ba:	6013      	str	r3, [r2, #0]
			}

			taskCounter++;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <_Z19SensorsDataReadTaskPv+0x248>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	3301      	adds	r3, #1
 80015c2:	4a1a      	ldr	r2, [pc, #104]	; (800162c <_Z19SensorsDataReadTaskPv+0x248>)
 80015c4:	6013      	str	r3, [r2, #0]
		}
	}
 80015c6:	e77a      	b.n	80014be <_Z19SensorsDataReadTaskPv+0xda>
 80015c8:	2000057c 	.word	0x2000057c
 80015cc:	200008f8 	.word	0x200008f8
 80015d0:	20000a48 	.word	0x20000a48
 80015d4:	20000958 	.word	0x20000958
 80015d8:	20000c68 	.word	0x20000c68
 80015dc:	20000cf0 	.word	0x20000cf0
 80015e0:	20000bb0 	.word	0x20000bb0
 80015e4:	20000d74 	.word	0x20000d74
 80015e8:	08014de4 	.word	0x08014de4
 80015ec:	080016a5 	.word	0x080016a5
 80015f0:	20000d6c 	.word	0x20000d6c
 80015f4:	08014df8 	.word	0x08014df8
 80015f8:	08001631 	.word	0x08001631
 80015fc:	20000d78 	.word	0x20000d78
 8001600:	20000e48 	.word	0x20000e48
 8001604:	20000e4c 	.word	0x20000e4c
 8001608:	20000e50 	.word	0x20000e50
 800160c:	20000d7c 	.word	0x20000d7c
 8001610:	20000d80 	.word	0x20000d80
 8001614:	2000064c 	.word	0x2000064c
 8001618:	20000d88 	.word	0x20000d88
 800161c:	20000690 	.word	0x20000690
 8001620:	20000d84 	.word	0x20000d84
 8001624:	200005c4 	.word	0x200005c4
 8001628:	20000d8c 	.word	0x20000d8c
 800162c:	20000da8 	.word	0x20000da8

08001630 <_Z15FaultsCheckTaskPv>:
}

void FaultsCheckTask(void *pvParameters)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1;
 8001638:	2301      	movs	r3, #1
 800163a:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 800163c:	f010 f828 	bl	8011690 <xTaskGetTickCount>
 8001640:	4603      	mov	r3, r0
 8001642:	60bb      	str	r3, [r7, #8]

	for( ;; )
	{
		pmw.incrementTimeoutCounter();
 8001644:	4811      	ldr	r0, [pc, #68]	; (800168c <_Z15FaultsCheckTaskPv+0x5c>)
 8001646:	f7ff fc6f 	bl	8000f28 <_ZN7Timeout23incrementTimeoutCounterEv>
		remote_rx.incrementTimeoutCounter();
 800164a:	4811      	ldr	r0, [pc, #68]	; (8001690 <_Z15FaultsCheckTaskPv+0x60>)
 800164c:	f7ff fc6c 	bl	8000f28 <_ZN7Timeout23incrementTimeoutCounterEv>
		sonar.incrementTimeoutCounter();
 8001650:	4810      	ldr	r0, [pc, #64]	; (8001694 <_Z15FaultsCheckTaskPv+0x64>)
 8001652:	f7ff fc69 	bl	8000f28 <_ZN7Timeout23incrementTimeoutCounterEv>

		buzz.run();
 8001656:	4810      	ldr	r0, [pc, #64]	; (8001698 <_Z15FaultsCheckTaskPv+0x68>)
 8001658:	f002 fcab 	bl	8003fb2 <_ZN6Buzzer3runEv>
		BattMgmt.run();
 800165c:	480f      	ldr	r0, [pc, #60]	; (800169c <_Z15FaultsCheckTaskPv+0x6c>)
 800165e:	f002 fb5b 	bl	8003d18 <_ZN17BatteryManagement3runEv>

		if (remote_rx.getCurrentState() == FrSkyRXState::READY)
 8001662:	480b      	ldr	r0, [pc, #44]	; (8001690 <_Z15FaultsCheckTaskPv+0x60>)
 8001664:	f002 ff06 	bl	8004474 <_ZNK7FrSkyRX15getCurrentStateEv>
 8001668:	4603      	mov	r3, r0
 800166a:	2b03      	cmp	r3, #3
 800166c:	bf0c      	ite	eq
 800166e:	2301      	moveq	r3, #1
 8001670:	2300      	movne	r3, #0
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b00      	cmp	r3, #0
 8001676:	d002      	beq.n	800167e <_Z15FaultsCheckTaskPv+0x4e>
		{
			currentFaultsStatus = FaultsStatus::OKAY;
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <_Z15FaultsCheckTaskPv+0x70>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
		}

		vTaskDelayUntil( &xLastWakeTime, xFrequency);
 800167e:	f107 0308 	add.w	r3, r7, #8
 8001682:	2101      	movs	r1, #1
 8001684:	4618      	mov	r0, r3
 8001686:	f00f fe7b 	bl	8011380 <vTaskDelayUntil>
		pmw.incrementTimeoutCounter();
 800168a:	e7db      	b.n	8001644 <_Z15FaultsCheckTaskPv+0x14>
 800168c:	20000be6 	.word	0x20000be6
 8001690:	20000c68 	.word	0x20000c68
 8001694:	20000d26 	.word	0x20000d26
 8001698:	20000b0c 	.word	0x20000b0c
 800169c:	20000d48 	.word	0x20000d48
 80016a0:	20000000 	.word	0x20000000

080016a4 <_Z19DynamicsProcessTaskPv>:
	}
}

void DynamicsProcessTask(void *pvParameters)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	ed2d 8b02 	vpush	{d8}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1;
 80016b0:	2301      	movs	r3, #1
 80016b2:	61fb      	str	r3, [r7, #28]

	xLastWakeTime = xTaskGetTickCount();
 80016b4:	f00f ffec 	bl	8011690 <xTaskGetTickCount>
 80016b8:	4603      	mov	r3, r0
 80016ba:	60bb      	str	r3, [r7, #8]

	for( ;; )
	{
		euler_x = icm.getEulerX();
 80016bc:	4882      	ldr	r0, [pc, #520]	; (80018c8 <_Z19DynamicsProcessTaskPv+0x224>)
 80016be:	f004 ffc3 	bl	8006648 <_ZN9ICM42688P9getEulerXEv>
 80016c2:	eef0 7a40 	vmov.f32	s15, s0
 80016c6:	4b81      	ldr	r3, [pc, #516]	; (80018cc <_Z19DynamicsProcessTaskPv+0x228>)
 80016c8:	edc3 7a00 	vstr	s15, [r3]
		euler_y = icm.getEulerY();
 80016cc:	487e      	ldr	r0, [pc, #504]	; (80018c8 <_Z19DynamicsProcessTaskPv+0x224>)
 80016ce:	f004 ffcb 	bl	8006668 <_ZN9ICM42688P9getEulerYEv>
 80016d2:	eef0 7a40 	vmov.f32	s15, s0
 80016d6:	4b7e      	ldr	r3, [pc, #504]	; (80018d0 <_Z19DynamicsProcessTaskPv+0x22c>)
 80016d8:	edc3 7a00 	vstr	s15, [r3]
		euler_z = icm.getEulerZ();
 80016dc:	487a      	ldr	r0, [pc, #488]	; (80018c8 <_Z19DynamicsProcessTaskPv+0x224>)
 80016de:	f004 ffd3 	bl	8006688 <_ZN9ICM42688P9getEulerZEv>
 80016e2:	eef0 7a40 	vmov.f32	s15, s0
 80016e6:	4b7b      	ldr	r3, [pc, #492]	; (80018d4 <_Z19DynamicsProcessTaskPv+0x230>)
 80016e8:	edc3 7a00 	vstr	s15, [r3]

		test1=yaw_pid.out();
 80016ec:	487a      	ldr	r0, [pc, #488]	; (80018d8 <_Z19DynamicsProcessTaskPv+0x234>)
 80016ee:	f005 fe8b 	bl	8007408 <_ZN11PID_Control3outEv>
 80016f2:	eef0 7a40 	vmov.f32	s15, s0
 80016f6:	4b79      	ldr	r3, [pc, #484]	; (80018dc <_Z19DynamicsProcessTaskPv+0x238>)
 80016f8:	edc3 7a00 	vstr	s15, [r3]

		timCounter++;
 80016fc:	4b78      	ldr	r3, [pc, #480]	; (80018e0 <_Z19DynamicsProcessTaskPv+0x23c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	3301      	adds	r3, #1
 8001702:	4a77      	ldr	r2, [pc, #476]	; (80018e0 <_Z19DynamicsProcessTaskPv+0x23c>)
 8001704:	6013      	str	r3, [r2, #0]

		if (currentFaultsStatus == FaultsStatus::OKAY)
 8001706:	4b77      	ldr	r3, [pc, #476]	; (80018e4 <_Z19DynamicsProcessTaskPv+0x240>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f040 80d0 	bne.w	80018b0 <_Z19DynamicsProcessTaskPv+0x20c>
				\/
				/\
			   /  \
			CR2    CR4
			 */
			float CCR1_value = 3000 + remote_rx.throttle + roll_pid.out() + pitch_pid.out() - yaw_pid.out();
 8001710:	4b75      	ldr	r3, [pc, #468]	; (80018e8 <_Z19DynamicsProcessTaskPv+0x244>)
 8001712:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001716:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80018ec <_Z19DynamicsProcessTaskPv+0x248>
 800171a:	ee37 8a87 	vadd.f32	s16, s15, s14
 800171e:	4874      	ldr	r0, [pc, #464]	; (80018f0 <_Z19DynamicsProcessTaskPv+0x24c>)
 8001720:	f005 fe72 	bl	8007408 <_ZN11PID_Control3outEv>
 8001724:	eef0 7a40 	vmov.f32	s15, s0
 8001728:	ee38 8a27 	vadd.f32	s16, s16, s15
 800172c:	4871      	ldr	r0, [pc, #452]	; (80018f4 <_Z19DynamicsProcessTaskPv+0x250>)
 800172e:	f005 fe6b 	bl	8007408 <_ZN11PID_Control3outEv>
 8001732:	eef0 7a40 	vmov.f32	s15, s0
 8001736:	ee38 8a27 	vadd.f32	s16, s16, s15
 800173a:	4867      	ldr	r0, [pc, #412]	; (80018d8 <_Z19DynamicsProcessTaskPv+0x234>)
 800173c:	f005 fe64 	bl	8007408 <_ZN11PID_Control3outEv>
 8001740:	eef0 7a40 	vmov.f32	s15, s0
 8001744:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001748:	edc7 7a06 	vstr	s15, [r7, #24]
			float CCR2_value = 3000 + remote_rx.throttle + roll_pid.out() - pitch_pid.out() + yaw_pid.out();
 800174c:	4b66      	ldr	r3, [pc, #408]	; (80018e8 <_Z19DynamicsProcessTaskPv+0x244>)
 800174e:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001752:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80018ec <_Z19DynamicsProcessTaskPv+0x248>
 8001756:	ee37 8a87 	vadd.f32	s16, s15, s14
 800175a:	4865      	ldr	r0, [pc, #404]	; (80018f0 <_Z19DynamicsProcessTaskPv+0x24c>)
 800175c:	f005 fe54 	bl	8007408 <_ZN11PID_Control3outEv>
 8001760:	eef0 7a40 	vmov.f32	s15, s0
 8001764:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001768:	4862      	ldr	r0, [pc, #392]	; (80018f4 <_Z19DynamicsProcessTaskPv+0x250>)
 800176a:	f005 fe4d 	bl	8007408 <_ZN11PID_Control3outEv>
 800176e:	eef0 7a40 	vmov.f32	s15, s0
 8001772:	ee38 8a67 	vsub.f32	s16, s16, s15
 8001776:	4858      	ldr	r0, [pc, #352]	; (80018d8 <_Z19DynamicsProcessTaskPv+0x234>)
 8001778:	f005 fe46 	bl	8007408 <_ZN11PID_Control3outEv>
 800177c:	eef0 7a40 	vmov.f32	s15, s0
 8001780:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001784:	edc7 7a05 	vstr	s15, [r7, #20]
			float CCR3_value = 3000 + remote_rx.throttle - roll_pid.out() + pitch_pid.out() + yaw_pid.out();
 8001788:	4b57      	ldr	r3, [pc, #348]	; (80018e8 <_Z19DynamicsProcessTaskPv+0x244>)
 800178a:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800178e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80018ec <_Z19DynamicsProcessTaskPv+0x248>
 8001792:	ee37 8a87 	vadd.f32	s16, s15, s14
 8001796:	4856      	ldr	r0, [pc, #344]	; (80018f0 <_Z19DynamicsProcessTaskPv+0x24c>)
 8001798:	f005 fe36 	bl	8007408 <_ZN11PID_Control3outEv>
 800179c:	eef0 7a40 	vmov.f32	s15, s0
 80017a0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80017a4:	4853      	ldr	r0, [pc, #332]	; (80018f4 <_Z19DynamicsProcessTaskPv+0x250>)
 80017a6:	f005 fe2f 	bl	8007408 <_ZN11PID_Control3outEv>
 80017aa:	eef0 7a40 	vmov.f32	s15, s0
 80017ae:	ee38 8a27 	vadd.f32	s16, s16, s15
 80017b2:	4849      	ldr	r0, [pc, #292]	; (80018d8 <_Z19DynamicsProcessTaskPv+0x234>)
 80017b4:	f005 fe28 	bl	8007408 <_ZN11PID_Control3outEv>
 80017b8:	eef0 7a40 	vmov.f32	s15, s0
 80017bc:	ee78 7a27 	vadd.f32	s15, s16, s15
 80017c0:	edc7 7a04 	vstr	s15, [r7, #16]
			float CCR4_value = 3000 + remote_rx.throttle - roll_pid.out() - pitch_pid.out() - yaw_pid.out();
 80017c4:	4b48      	ldr	r3, [pc, #288]	; (80018e8 <_Z19DynamicsProcessTaskPv+0x244>)
 80017c6:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80017ca:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80018ec <_Z19DynamicsProcessTaskPv+0x248>
 80017ce:	ee37 8a87 	vadd.f32	s16, s15, s14
 80017d2:	4847      	ldr	r0, [pc, #284]	; (80018f0 <_Z19DynamicsProcessTaskPv+0x24c>)
 80017d4:	f005 fe18 	bl	8007408 <_ZN11PID_Control3outEv>
 80017d8:	eef0 7a40 	vmov.f32	s15, s0
 80017dc:	ee38 8a67 	vsub.f32	s16, s16, s15
 80017e0:	4844      	ldr	r0, [pc, #272]	; (80018f4 <_Z19DynamicsProcessTaskPv+0x250>)
 80017e2:	f005 fe11 	bl	8007408 <_ZN11PID_Control3outEv>
 80017e6:	eef0 7a40 	vmov.f32	s15, s0
 80017ea:	ee38 8a67 	vsub.f32	s16, s16, s15
 80017ee:	483a      	ldr	r0, [pc, #232]	; (80018d8 <_Z19DynamicsProcessTaskPv+0x234>)
 80017f0:	f005 fe0a 	bl	8007408 <_ZN11PID_Control3outEv>
 80017f4:	eef0 7a40 	vmov.f32	s15, s0
 80017f8:	ee78 7a67 	vsub.f32	s15, s16, s15
 80017fc:	edc7 7a03 	vstr	s15, [r7, #12]

			if (CCR1_value<3300)
 8001800:	edd7 7a06 	vldr	s15, [r7, #24]
 8001804:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80018f8 <_Z19DynamicsProcessTaskPv+0x254>
 8001808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800180c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001810:	d504      	bpl.n	800181c <_Z19DynamicsProcessTaskPv+0x178>
				TIM3 -> CCR1 = 3300;
 8001812:	4b3a      	ldr	r3, [pc, #232]	; (80018fc <_Z19DynamicsProcessTaskPv+0x258>)
 8001814:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001818:	635a      	str	r2, [r3, #52]	; 0x34
 800181a:	e007      	b.n	800182c <_Z19DynamicsProcessTaskPv+0x188>
			else
				TIM3 -> CCR1 = CCR1_value;
 800181c:	4b37      	ldr	r3, [pc, #220]	; (80018fc <_Z19DynamicsProcessTaskPv+0x258>)
 800181e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001826:	ee17 2a90 	vmov	r2, s15
 800182a:	635a      	str	r2, [r3, #52]	; 0x34

			if (CCR2_value<3300)
 800182c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001830:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80018f8 <_Z19DynamicsProcessTaskPv+0x254>
 8001834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183c:	d504      	bpl.n	8001848 <_Z19DynamicsProcessTaskPv+0x1a4>
				TIM3 -> CCR2 = 3300;
 800183e:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <_Z19DynamicsProcessTaskPv+0x258>)
 8001840:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001844:	639a      	str	r2, [r3, #56]	; 0x38
 8001846:	e007      	b.n	8001858 <_Z19DynamicsProcessTaskPv+0x1b4>
			else
				TIM3 -> CCR2 = CCR2_value;
 8001848:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <_Z19DynamicsProcessTaskPv+0x258>)
 800184a:	edd7 7a05 	vldr	s15, [r7, #20]
 800184e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001852:	ee17 2a90 	vmov	r2, s15
 8001856:	639a      	str	r2, [r3, #56]	; 0x38

			if (CCR3_value<3300)
 8001858:	edd7 7a04 	vldr	s15, [r7, #16]
 800185c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80018f8 <_Z19DynamicsProcessTaskPv+0x254>
 8001860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001868:	d504      	bpl.n	8001874 <_Z19DynamicsProcessTaskPv+0x1d0>
				TIM3 -> CCR3 = 3300;
 800186a:	4b24      	ldr	r3, [pc, #144]	; (80018fc <_Z19DynamicsProcessTaskPv+0x258>)
 800186c:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001870:	63da      	str	r2, [r3, #60]	; 0x3c
 8001872:	e007      	b.n	8001884 <_Z19DynamicsProcessTaskPv+0x1e0>
			else
				TIM3 -> CCR3 = CCR3_value;
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <_Z19DynamicsProcessTaskPv+0x258>)
 8001876:	edd7 7a04 	vldr	s15, [r7, #16]
 800187a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800187e:	ee17 2a90 	vmov	r2, s15
 8001882:	63da      	str	r2, [r3, #60]	; 0x3c

			if (CCR4_value<3300)
 8001884:	edd7 7a03 	vldr	s15, [r7, #12]
 8001888:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80018f8 <_Z19DynamicsProcessTaskPv+0x254>
 800188c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	d504      	bpl.n	80018a0 <_Z19DynamicsProcessTaskPv+0x1fc>
				TIM3 -> CCR4 = 3300;
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <_Z19DynamicsProcessTaskPv+0x258>)
 8001898:	f640 42e4 	movw	r2, #3300	; 0xce4
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
 800189e:	e007      	b.n	80018b0 <_Z19DynamicsProcessTaskPv+0x20c>
			else
				TIM3 -> CCR4 = CCR4_value;
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <_Z19DynamicsProcessTaskPv+0x258>)
 80018a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018aa:	ee17 2a90 	vmov	r2, s15
 80018ae:	641a      	str	r2, [r3, #64]	; 0x40
		if (currentFaultsStatus == FaultsStatus::FAILURE)
		{

		}

		if (currentFaultsStatus == FaultsStatus::CRITICAL)
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <_Z19DynamicsProcessTaskPv+0x240>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	f47f af01 	bne.w	80016bc <_Z19DynamicsProcessTaskPv+0x18>


		vTaskDelayUntil( &xLastWakeTime, xFrequency);
 80018ba:	f107 0308 	add.w	r3, r7, #8
 80018be:	2101      	movs	r1, #1
 80018c0:	4618      	mov	r0, r3
 80018c2:	f00f fd5d 	bl	8011380 <vTaskDelayUntil>
	}
 80018c6:	e6f9      	b.n	80016bc <_Z19DynamicsProcessTaskPv+0x18>
 80018c8:	20000a48 	.word	0x20000a48
 80018cc:	20000db0 	.word	0x20000db0
 80018d0:	20000db4 	.word	0x20000db4
 80018d4:	20000db8 	.word	0x20000db8
 80018d8:	20000e14 	.word	0x20000e14
 80018dc:	20000e40 	.word	0x20000e40
 80018e0:	20000dac 	.word	0x20000dac
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000c68 	.word	0x20000c68
 80018ec:	453b8000 	.word	0x453b8000
 80018f0:	20000dbc 	.word	0x20000dbc
 80018f4:	20000de8 	.word	0x20000de8
 80018f8:	454e4000 	.word	0x454e4000
 80018fc:	40000400 	.word	0x40000400

08001900 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b094      	sub	sp, #80	; 0x50
 8001904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001906:	f107 0320 	add.w	r3, r7, #32
 800190a:	2230      	movs	r2, #48	; 0x30
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f013 f86c 	bl	80149ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <_Z18SystemClock_Configv+0xe0>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	4a2c      	ldr	r2, [pc, #176]	; (80019e0 <_Z18SystemClock_Configv+0xe0>)
 800192e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001932:	6413      	str	r3, [r2, #64]	; 0x40
 8001934:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <_Z18SystemClock_Configv+0xe0>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <_Z18SystemClock_Configv+0xe4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a26      	ldr	r2, [pc, #152]	; (80019e4 <_Z18SystemClock_Configv+0xe4>)
 800194a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <_Z18SystemClock_Configv+0xe4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800195c:	2301      	movs	r3, #1
 800195e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001960:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001966:	2302      	movs	r3, #2
 8001968:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800196a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800196e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001970:	2308      	movs	r3, #8
 8001972:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001974:	2390      	movs	r3, #144	; 0x90
 8001976:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001978:	2302      	movs	r3, #2
 800197a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800197c:	2306      	movs	r3, #6
 800197e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001980:	f107 0320 	add.w	r3, r7, #32
 8001984:	4618      	mov	r0, r3
 8001986:	f008 f941 	bl	8009c0c <HAL_RCC_OscConfig>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	bf14      	ite	ne
 8001990:	2301      	movne	r3, #1
 8001992:	2300      	moveq	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800199a:	f000 fc23 	bl	80021e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199e:	230f      	movs	r3, #15
 80019a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a2:	2302      	movs	r3, #2
 80019a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	2104      	movs	r1, #4
 80019bc:	4618      	mov	r0, r3
 80019be:	f008 fb9d 	bl	800a0fc <HAL_RCC_ClockConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf14      	ite	ne
 80019c8:	2301      	movne	r3, #1
 80019ca:	2300      	moveq	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80019d2:	f000 fc07 	bl	80021e4 <Error_Handler>
  }
}
 80019d6:	bf00      	nop
 80019d8:	3750      	adds	r7, #80	; 0x50
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40007000 	.word	0x40007000

080019e8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ee:	463b      	mov	r3, r7
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019fa:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 80019fc:	4a26      	ldr	r2, [pc, #152]	; (8001a98 <_ZL12MX_ADC1_Initv+0xb0>)
 80019fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a00:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a06:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a0c:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a18:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a20:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a28:	4a1c      	ldr	r2, [pc, #112]	; (8001a9c <_ZL12MX_ADC1_Initv+0xb4>)
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a40:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a46:	4813      	ldr	r0, [pc, #76]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a48:	f005 fda8 	bl	800759c <HAL_ADC_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	bf14      	ite	ne
 8001a52:	2301      	movne	r3, #1
 8001a54:	2300      	moveq	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8001a5c:	f000 fbc2 	bl	80021e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001a60:	230a      	movs	r3, #10
 8001a62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a64:	2301      	movs	r3, #1
 8001a66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4808      	ldr	r0, [pc, #32]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a72:	f005 ff05 	bl	8007880 <HAL_ADC_ConfigChannel>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	bf14      	ite	ne
 8001a7c:	2301      	movne	r3, #1
 8001a7e:	2300      	moveq	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8001a86:	f000 fbad 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200002f0 	.word	0x200002f0
 8001a98:	40012000 	.word	0x40012000
 8001a9c:	0f000001 	.word	0x0f000001

08001aa0 <_ZL15MX_SDIO_SD_Initv>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001aa6:	4a1a      	ldr	r2, [pc, #104]	; (8001b10 <_ZL15MX_SDIO_SD_Initv+0x70>)
 8001aa8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001ab0:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001abc:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8001ac8:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001aca:	2208      	movs	r2, #8
 8001acc:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8001ace:	480f      	ldr	r0, [pc, #60]	; (8001b0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001ad0:	f008 fd64 	bl	800a59c <HAL_SD_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bf14      	ite	ne
 8001ada:	2301      	movne	r3, #1
 8001adc:	2300      	moveq	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <_ZL15MX_SDIO_SD_Initv+0x48>
  {
    Error_Handler();
 8001ae4:	f000 fb7e 	bl	80021e4 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8001ae8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aec:	4807      	ldr	r0, [pc, #28]	; (8001b0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001aee:	f008 ffa9 	bl	800aa44 <HAL_SD_ConfigWideBusOperation>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bf14      	ite	ne
 8001af8:	2301      	movne	r3, #1
 8001afa:	2300      	moveq	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <_ZL15MX_SDIO_SD_Initv+0x66>
  {
    Error_Handler();
 8001b02:	f000 fb6f 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000398 	.word	0x20000398
 8001b10:	40012c00 	.word	0x40012c00

08001b14 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b1a:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <_ZL12MX_SPI2_Initv+0x74>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b26:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b2c:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b44:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b4c:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b60:	220a      	movs	r2, #10
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b64:	4807      	ldr	r0, [pc, #28]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b66:	f009 facc 	bl	800b102 <HAL_SPI_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	bf14      	ite	ne
 8001b70:	2301      	movne	r3, #1
 8001b72:	2300      	moveq	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8001b7a:	f000 fb33 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000041c 	.word	0x2000041c
 8001b88:	40003800 	.word	0x40003800

08001b8c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08e      	sub	sp, #56	; 0x38
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba0:	f107 0320 	add.w	r3, r7, #32
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
 8001bb8:	615a      	str	r2, [r3, #20]
 8001bba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bbc:	4b51      	ldr	r3, [pc, #324]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001bbe:	4a52      	ldr	r2, [pc, #328]	; (8001d08 <_ZL12MX_TIM3_Initv+0x17c>)
 8001bc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3-1;
 8001bc2:	4b50      	ldr	r3, [pc, #320]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc8:	4b4e      	ldr	r3, [pc, #312]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6000-1;
 8001bce:	4b4d      	ldr	r3, [pc, #308]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001bd0:	f241 726f 	movw	r2, #5999	; 0x176f
 8001bd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd6:	4b4b      	ldr	r3, [pc, #300]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bdc:	4b49      	ldr	r3, [pc, #292]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001be2:	4848      	ldr	r0, [pc, #288]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001be4:	f00a f846 	bl	800bc74 <HAL_TIM_Base_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	bf14      	ite	ne
 8001bee:	2301      	movne	r3, #1
 8001bf0:	2300      	moveq	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8001bf8:	f000 faf4 	bl	80021e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c06:	4619      	mov	r1, r3
 8001c08:	483e      	ldr	r0, [pc, #248]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001c0a:	f00a fbdf 	bl	800c3cc <HAL_TIM_ConfigClockSource>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf14      	ite	ne
 8001c14:	2301      	movne	r3, #1
 8001c16:	2300      	moveq	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8001c1e:	f000 fae1 	bl	80021e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c22:	4838      	ldr	r0, [pc, #224]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001c24:	f00a f8e6 	bl	800bdf4 <HAL_TIM_PWM_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	bf14      	ite	ne
 8001c2e:	2301      	movne	r3, #1
 8001c30:	2300      	moveq	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8001c38:	f000 fad4 	bl	80021e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c44:	f107 0320 	add.w	r3, r7, #32
 8001c48:	4619      	mov	r1, r3
 8001c4a:	482e      	ldr	r0, [pc, #184]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001c4c:	f00a ffbe 	bl	800cbcc <HAL_TIMEx_MasterConfigSynchronization>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bf14      	ite	ne
 8001c56:	2301      	movne	r3, #1
 8001c58:	2300      	moveq	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8001c60:	f000 fac0 	bl	80021e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c64:	2360      	movs	r3, #96	; 0x60
 8001c66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	2200      	movs	r2, #0
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4822      	ldr	r0, [pc, #136]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001c7c:	f00a fae4 	bl	800c248 <HAL_TIM_PWM_ConfigChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	bf14      	ite	ne
 8001c86:	2301      	movne	r3, #1
 8001c88:	2300      	moveq	r3, #0
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8001c90:	f000 faa8 	bl	80021e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	2204      	movs	r2, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	481a      	ldr	r0, [pc, #104]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001c9c:	f00a fad4 	bl	800c248 <HAL_TIM_PWM_ConfigChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	bf14      	ite	ne
 8001ca6:	2301      	movne	r3, #1
 8001ca8:	2300      	moveq	r3, #0
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 8001cb0:	f000 fa98 	bl	80021e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	2208      	movs	r2, #8
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4812      	ldr	r0, [pc, #72]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001cbc:	f00a fac4 	bl	800c248 <HAL_TIM_PWM_ConfigChannel>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	bf14      	ite	ne
 8001cc6:	2301      	movne	r3, #1
 8001cc8:	2300      	moveq	r3, #0
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <_ZL12MX_TIM3_Initv+0x148>
  {
    Error_Handler();
 8001cd0:	f000 fa88 	bl	80021e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	4619      	mov	r1, r3
 8001cda:	480a      	ldr	r0, [pc, #40]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001cdc:	f00a fab4 	bl	800c248 <HAL_TIM_PWM_ConfigChannel>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	bf14      	ite	ne
 8001ce6:	2301      	movne	r3, #1
 8001ce8:	2300      	moveq	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <_ZL12MX_TIM3_Initv+0x168>
  {
    Error_Handler();
 8001cf0:	f000 fa78 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cf4:	4803      	ldr	r0, [pc, #12]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001cf6:	f000 ff25 	bl	8002b44 <HAL_TIM_MspPostInit>

}
 8001cfa:	bf00      	nop
 8001cfc:	3738      	adds	r7, #56	; 0x38
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000534 	.word	0x20000534
 8001d08:	40000400 	.word	0x40000400

08001d0c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d12:	f107 0308 	add.w	r3, r7, #8
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d20:	463b      	mov	r3, r7
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d28:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <_ZL12MX_TIM4_Initv+0xb0>)
 8001d2a:	4a25      	ldr	r2, [pc, #148]	; (8001dc0 <_ZL12MX_TIM4_Initv+0xb4>)
 8001d2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 144-1;
 8001d2e:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <_ZL12MX_TIM4_Initv+0xb0>)
 8001d30:	228f      	movs	r2, #143	; 0x8f
 8001d32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <_ZL12MX_TIM4_Initv+0xb0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <_ZL12MX_TIM4_Initv+0xb0>)
 8001d3c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001d40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d42:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <_ZL12MX_TIM4_Initv+0xb0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d48:	4b1c      	ldr	r3, [pc, #112]	; (8001dbc <_ZL12MX_TIM4_Initv+0xb0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d4e:	481b      	ldr	r0, [pc, #108]	; (8001dbc <_ZL12MX_TIM4_Initv+0xb0>)
 8001d50:	f009 ff90 	bl	800bc74 <HAL_TIM_Base_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bf14      	ite	ne
 8001d5a:	2301      	movne	r3, #1
 8001d5c:	2300      	moveq	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8001d64:	f000 fa3e 	bl	80021e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d6e:	f107 0308 	add.w	r3, r7, #8
 8001d72:	4619      	mov	r1, r3
 8001d74:	4811      	ldr	r0, [pc, #68]	; (8001dbc <_ZL12MX_TIM4_Initv+0xb0>)
 8001d76:	f00a fb29 	bl	800c3cc <HAL_TIM_ConfigClockSource>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	bf14      	ite	ne
 8001d80:	2301      	movne	r3, #1
 8001d82:	2300      	moveq	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8001d8a:	f000 fa2b 	bl	80021e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d96:	463b      	mov	r3, r7
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4808      	ldr	r0, [pc, #32]	; (8001dbc <_ZL12MX_TIM4_Initv+0xb0>)
 8001d9c:	f00a ff16 	bl	800cbcc <HAL_TIMEx_MasterConfigSynchronization>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	bf14      	ite	ne
 8001da6:	2301      	movne	r3, #1
 8001da8:	2300      	moveq	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8001db0:	f000 fa18 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	2000057c 	.word	0x2000057c
 8001dc0:	40000800 	.word	0x40000800

08001dc4 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001dc8:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <_ZL13MX_UART4_Initv+0x54>)
 8001dca:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <_ZL13MX_UART4_Initv+0x58>)
 8001dcc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <_ZL13MX_UART4_Initv+0x54>)
 8001dd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001dd4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <_ZL13MX_UART4_Initv+0x54>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <_ZL13MX_UART4_Initv+0x54>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <_ZL13MX_UART4_Initv+0x54>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <_ZL13MX_UART4_Initv+0x54>)
 8001dea:	220c      	movs	r2, #12
 8001dec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <_ZL13MX_UART4_Initv+0x54>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <_ZL13MX_UART4_Initv+0x54>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001dfa:	4807      	ldr	r0, [pc, #28]	; (8001e18 <_ZL13MX_UART4_Initv+0x54>)
 8001dfc:	f00a ff76 	bl	800ccec <HAL_UART_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	bf14      	ite	ne
 8001e06:	2301      	movne	r3, #1
 8001e08:	2300      	moveq	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 8001e10:	f000 f9e8 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	200005c4 	.word	0x200005c4
 8001e1c:	40004c00 	.word	0x40004c00

08001e20 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e26:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001e28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e2a:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e38:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e46:	220c      	movs	r2, #12
 8001e48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e56:	4807      	ldr	r0, [pc, #28]	; (8001e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e58:	f00a ff48 	bl	800ccec <HAL_UART_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	bf14      	ite	ne
 8001e62:	2301      	movne	r3, #1
 8001e64:	2300      	moveq	r3, #0
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001e6c:	f000 f9ba 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000608 	.word	0x20000608
 8001e78:	40011000 	.word	0x40011000

08001e7c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001e82:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001e84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001e88:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001e8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eb2:	4807      	ldr	r0, [pc, #28]	; (8001ed0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001eb4:	f00a ff1a 	bl	800ccec <HAL_UART_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	bf14      	ite	ne
 8001ebe:	2301      	movne	r3, #1
 8001ec0:	2300      	moveq	r3, #0
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001ec8:	f000 f98c 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	2000064c 	.word	0x2000064c
 8001ed4:	40004400 	.word	0x40004400

08001ed8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001edc:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001ede:	4a15      	ldr	r2, [pc, #84]	; (8001f34 <_ZL19MX_USART3_UART_Initv+0x5c>)
 8001ee0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001ee4:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001ee6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_2;
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001ef0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ef4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001efc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001efe:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001f00:	220c      	movs	r2, #12
 8001f02:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f04:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f10:	4807      	ldr	r0, [pc, #28]	; (8001f30 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001f12:	f00a feeb 	bl	800ccec <HAL_UART_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf14      	ite	ne
 8001f1c:	2301      	movne	r3, #1
 8001f1e:	2300      	moveq	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <_ZL19MX_USART3_UART_Initv+0x52>
  {
    Error_Handler();
 8001f26:	f000 f95d 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000690 	.word	0x20000690
 8001f34:	40004800 	.word	0x40004800
 8001f38:	000186a0 	.word	0x000186a0

08001f3c <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001f42:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <_ZL19MX_USART6_UART_Initv+0x58>)
 8001f44:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f4c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f54:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001f62:	220c      	movs	r2, #12
 8001f64:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f72:	4807      	ldr	r0, [pc, #28]	; (8001f90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001f74:	f00a feba 	bl	800ccec <HAL_UART_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf14      	ite	ne
 8001f7e:	2301      	movne	r3, #1
 8001f80:	2300      	moveq	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8001f88:	f000 f92c 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	200006d4 	.word	0x200006d4
 8001f94:	40011400 	.word	0x40011400

08001f98 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	4b2f      	ldr	r3, [pc, #188]	; (8002060 <_ZL11MX_DMA_Initv+0xc8>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a2e      	ldr	r2, [pc, #184]	; (8002060 <_ZL11MX_DMA_Initv+0xc8>)
 8001fa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <_ZL11MX_DMA_Initv+0xc8>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	4b28      	ldr	r3, [pc, #160]	; (8002060 <_ZL11MX_DMA_Initv+0xc8>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a27      	ldr	r2, [pc, #156]	; (8002060 <_ZL11MX_DMA_Initv+0xc8>)
 8001fc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b25      	ldr	r3, [pc, #148]	; (8002060 <_ZL11MX_DMA_Initv+0xc8>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2105      	movs	r1, #5
 8001fda:	200c      	movs	r0, #12
 8001fdc:	f005 ffa8 	bl	8007f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001fe0:	200c      	movs	r0, #12
 8001fe2:	f005 ffc1 	bl	8007f68 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2105      	movs	r1, #5
 8001fea:	200d      	movs	r0, #13
 8001fec:	f005 ffa0 	bl	8007f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001ff0:	200d      	movs	r0, #13
 8001ff2:	f005 ffb9 	bl	8007f68 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2105      	movs	r1, #5
 8001ffa:	200e      	movs	r0, #14
 8001ffc:	f005 ff98 	bl	8007f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002000:	200e      	movs	r0, #14
 8002002:	f005 ffb1 	bl	8007f68 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	2105      	movs	r1, #5
 800200a:	200f      	movs	r0, #15
 800200c:	f005 ff90 	bl	8007f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002010:	200f      	movs	r0, #15
 8002012:	f005 ffa9 	bl	8007f68 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2105      	movs	r1, #5
 800201a:	2010      	movs	r0, #16
 800201c:	f005 ff88 	bl	8007f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002020:	2010      	movs	r0, #16
 8002022:	f005 ffa1 	bl	8007f68 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2105      	movs	r1, #5
 800202a:	2038      	movs	r0, #56	; 0x38
 800202c:	f005 ff80 	bl	8007f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002030:	2038      	movs	r0, #56	; 0x38
 8002032:	f005 ff99 	bl	8007f68 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2105      	movs	r1, #5
 800203a:	2039      	movs	r0, #57	; 0x39
 800203c:	f005 ff78 	bl	8007f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002040:	2039      	movs	r0, #57	; 0x39
 8002042:	f005 ff91 	bl	8007f68 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2105      	movs	r1, #5
 800204a:	2046      	movs	r0, #70	; 0x46
 800204c:	f005 ff70 	bl	8007f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002050:	2046      	movs	r0, #70	; 0x46
 8002052:	f005 ff89 	bl	8007f68 <HAL_NVIC_EnableIRQ>

}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	4b55      	ldr	r3, [pc, #340]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a54      	ldr	r2, [pc, #336]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 8002084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b52      	ldr	r3, [pc, #328]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	4b4e      	ldr	r3, [pc, #312]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a4d      	ldr	r2, [pc, #308]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b4b      	ldr	r3, [pc, #300]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a46      	ldr	r2, [pc, #280]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b44      	ldr	r3, [pc, #272]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	4b40      	ldr	r3, [pc, #256]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a3f      	ldr	r2, [pc, #252]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b3d      	ldr	r3, [pc, #244]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	4b39      	ldr	r3, [pc, #228]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a38      	ldr	r2, [pc, #224]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020f4:	f043 0308 	orr.w	r3, r3, #8
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	2130      	movs	r1, #48	; 0x30
 800210a:	4833      	ldr	r0, [pc, #204]	; (80021d8 <_ZL12MX_GPIO_Initv+0x174>)
 800210c:	f006 fcd8 	bl	8008ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8002110:	2200      	movs	r2, #0
 8002112:	2120      	movs	r1, #32
 8002114:	4831      	ldr	r0, [pc, #196]	; (80021dc <_ZL12MX_GPIO_Initv+0x178>)
 8002116:	f006 fcd3 	bl	8008ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800211a:	2200      	movs	r2, #0
 800211c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002120:	482f      	ldr	r0, [pc, #188]	; (80021e0 <_ZL12MX_GPIO_Initv+0x17c>)
 8002122:	f006 fccd 	bl	8008ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002126:	2330      	movs	r3, #48	; 0x30
 8002128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212a:	2301      	movs	r3, #1
 800212c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	4826      	ldr	r0, [pc, #152]	; (80021d8 <_ZL12MX_GPIO_Initv+0x174>)
 800213e:	f006 fb23 	bl	8008788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002142:	2310      	movs	r3, #16
 8002144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002146:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800214a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	4821      	ldr	r0, [pc, #132]	; (80021dc <_ZL12MX_GPIO_Initv+0x178>)
 8002158:	f006 fb16 	bl	8008788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800215c:	2320      	movs	r3, #32
 800215e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002160:	2301      	movs	r3, #1
 8002162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	481a      	ldr	r0, [pc, #104]	; (80021dc <_ZL12MX_GPIO_Initv+0x178>)
 8002174:	f006 fb08 	bl	8008788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002178:	2304      	movs	r3, #4
 800217a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800217c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	4619      	mov	r1, r3
 800218c:	4814      	ldr	r0, [pc, #80]	; (80021e0 <_ZL12MX_GPIO_Initv+0x17c>)
 800218e:	f006 fafb 	bl	8008788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002198:	2301      	movs	r3, #1
 800219a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a0:	2300      	movs	r3, #0
 80021a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	4619      	mov	r1, r3
 80021aa:	480d      	ldr	r0, [pc, #52]	; (80021e0 <_ZL12MX_GPIO_Initv+0x17c>)
 80021ac:	f006 faec 	bl	8008788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	4619      	mov	r1, r3
 80021c6:	4804      	ldr	r0, [pc, #16]	; (80021d8 <_ZL12MX_GPIO_Initv+0x174>)
 80021c8:	f006 fade 	bl	8008788 <HAL_GPIO_Init>
}
 80021cc:	bf00      	nop
 80021ce:	3728      	adds	r7, #40	; 0x28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40020000 	.word	0x40020000
 80021dc:	40020800 	.word	0x40020800
 80021e0:	40020400 	.word	0x40020400

080021e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021e8:	b672      	cpsid	i
}
 80021ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021ec:	e7fe      	b.n	80021ec <Error_Handler+0x8>

080021ee <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way. Managing the pointer is the user's responsibility.
       */
      ~set() = default;
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 f8d3 	bl	80023a4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EED1Ev>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <_ZN4HC05D1Ev>:
#include <set>
#include <string>

class PrintableSensor;

class HC05//: UART_Conn
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	331c      	adds	r3, #28
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f8da 	bl	80023ce <_ZNSt6vectorIP15PrintableSensorSaIS1_EED1Ev>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ffe6 	bl	80021ee <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EED1Ev>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af02      	add	r7, sp, #8
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d15d      	bne.n	80022f8 <_Z41__static_initialization_and_destruction_0ii+0xcc>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002242:	4293      	cmp	r3, r2
 8002244:	d158      	bne.n	80022f8 <_Z41__static_initialization_and_destruction_0ii+0xcc>
LIS3MDLTR lis(&hspi2);
 8002246:	4934      	ldr	r1, [pc, #208]	; (8002318 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002248:	4834      	ldr	r0, [pc, #208]	; (800231c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800224a:	f004 fa97 	bl	800677c <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef>
BMP390 bmp(&hspi2);
 800224e:	4932      	ldr	r1, [pc, #200]	; (8002318 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002250:	4833      	ldr	r0, [pc, #204]	; (8002320 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8002252:	f001 f94f 	bl	80034f4 <_ZN6BMP390C1EP19__SPI_HandleTypeDef>
ICM42688P icm(&hspi2);
 8002256:	4930      	ldr	r1, [pc, #192]	; (8002318 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002258:	4832      	ldr	r0, [pc, #200]	; (8002324 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 800225a:	f003 fbcb 	bl	80059f4 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef>
Buzzer buzz;
 800225e:	4832      	ldr	r0, [pc, #200]	; (8002328 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8002260:	f7fe fef2 	bl	8001048 <_ZN6BuzzerC1Ev>
HC05 bt(&huart1);
 8002264:	4931      	ldr	r1, [pc, #196]	; (800232c <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8002266:	4832      	ldr	r0, [pc, #200]	; (8002330 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8002268:	f002 fb79 	bl	800495e <_ZN4HC05C1EP20__UART_HandleTypeDef>
PMW3901UY pmw(&huart2,&hdma_usart2_rx,300, icm);
 800226c:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	232c      	movs	r3, #44	; 0x2c
 8002272:	4a30      	ldr	r2, [pc, #192]	; (8002334 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8002274:	4930      	ldr	r1, [pc, #192]	; (8002338 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8002276:	4831      	ldr	r0, [pc, #196]	; (800233c <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8002278:	f004 fd9e 	bl	8006db8 <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688P>
FrSkyRX remote_rx(&huart3,&hdma_usart3_rx,&buzz,1);
 800227c:	2301      	movs	r3, #1
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	4b29      	ldr	r3, [pc, #164]	; (8002328 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8002282:	4a2f      	ldr	r2, [pc, #188]	; (8002340 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8002284:	492f      	ldr	r1, [pc, #188]	; (8002344 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8002286:	4830      	ldr	r0, [pc, #192]	; (8002348 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8002288:	f001 ff41 	bl	800410e <_ZN7FrSkyRXC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefP6Buzzerh>
MB1043 sonar(&huart4,&hdma_uart4_rx,300);
 800228c:	232c      	movs	r3, #44	; 0x2c
 800228e:	4a2f      	ldr	r2, [pc, #188]	; (800234c <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8002290:	492f      	ldr	r1, [pc, #188]	; (8002350 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8002292:	4830      	ldr	r0, [pc, #192]	; (8002354 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8002294:	f004 fc9c 	bl	8006bd0 <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>
BatteryManagement BattMgmt(&hadc1,&buzz,1000);
 8002298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229c:	4a22      	ldr	r2, [pc, #136]	; (8002328 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 800229e:	492e      	ldr	r1, [pc, #184]	; (8002358 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80022a0:	482e      	ldr	r0, [pc, #184]	; (800235c <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80022a2:	f7fe fe98 	bl	8000fd6 <_ZN17BatteryManagementC1EP17ADC_HandleTypeDefP6Buzzert>
		0);
 80022a6:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8002360 <_Z41__static_initialization_and_destruction_0ii+0x134>
 80022aa:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8002360 <_Z41__static_initialization_and_destruction_0ii+0x134>
 80022ae:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80022b2:	4a2c      	ldr	r2, [pc, #176]	; (8002364 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80022b4:	492c      	ldr	r1, [pc, #176]	; (8002368 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80022b6:	482d      	ldr	r0, [pc, #180]	; (800236c <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80022b8:	f7fe fe4f 	bl	8000f5a <_ZN11PID_ControlC1ERfS0_fff>
		0);
 80022bc:	ed9f 1a28 	vldr	s2, [pc, #160]	; 8002360 <_Z41__static_initialization_and_destruction_0ii+0x134>
 80022c0:	eddf 0a27 	vldr	s1, [pc, #156]	; 8002360 <_Z41__static_initialization_and_destruction_0ii+0x134>
 80022c4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80022c8:	4a29      	ldr	r2, [pc, #164]	; (8002370 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80022ca:	492a      	ldr	r1, [pc, #168]	; (8002374 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80022cc:	482a      	ldr	r0, [pc, #168]	; (8002378 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80022ce:	f7fe fe44 	bl	8000f5a <_ZN11PID_ControlC1ERfS0_fff>
		0);
 80022d2:	ed9f 1a23 	vldr	s2, [pc, #140]	; 8002360 <_Z41__static_initialization_and_destruction_0ii+0x134>
 80022d6:	eddf 0a22 	vldr	s1, [pc, #136]	; 8002360 <_Z41__static_initialization_and_destruction_0ii+0x134>
 80022da:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8002360 <_Z41__static_initialization_and_destruction_0ii+0x134>
 80022de:	4a27      	ldr	r2, [pc, #156]	; (800237c <_Z41__static_initialization_and_destruction_0ii+0x150>)
 80022e0:	4927      	ldr	r1, [pc, #156]	; (8002380 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 80022e2:	4828      	ldr	r0, [pc, #160]	; (8002384 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80022e4:	f7fe fe39 	bl	8000f5a <_ZN11PID_ControlC1ERfS0_fff>
float test1=roll_pid.out();
 80022e8:	4820      	ldr	r0, [pc, #128]	; (800236c <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80022ea:	f005 f88d 	bl	8007408 <_ZN11PID_Control3outEv>
 80022ee:	eef0 7a40 	vmov.f32	s15, s0
 80022f2:	4b25      	ldr	r3, [pc, #148]	; (8002388 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80022f4:	edc3 7a00 	vstr	s15, [r3]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d107      	bne.n	800230e <_Z41__static_initialization_and_destruction_0ii+0xe2>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002304:	4293      	cmp	r3, r2
 8002306:	d102      	bne.n	800230e <_Z41__static_initialization_and_destruction_0ii+0xe2>
HC05 bt(&huart1);
 8002308:	4809      	ldr	r0, [pc, #36]	; (8002330 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 800230a:	f7ff ff7d 	bl	8002208 <_ZN4HC05D1Ev>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2000041c 	.word	0x2000041c
 800231c:	200008f8 	.word	0x200008f8
 8002320:	20000958 	.word	0x20000958
 8002324:	20000a48 	.word	0x20000a48
 8002328:	20000b0c 	.word	0x20000b0c
 800232c:	20000608 	.word	0x20000608
 8002330:	20000b24 	.word	0x20000b24
 8002334:	200007d8 	.word	0x200007d8
 8002338:	2000064c 	.word	0x2000064c
 800233c:	20000bb0 	.word	0x20000bb0
 8002340:	20000838 	.word	0x20000838
 8002344:	20000690 	.word	0x20000690
 8002348:	20000c68 	.word	0x20000c68
 800234c:	20000718 	.word	0x20000718
 8002350:	200005c4 	.word	0x200005c4
 8002354:	20000cf0 	.word	0x20000cf0
 8002358:	200002f0 	.word	0x200002f0
 800235c:	20000d48 	.word	0x20000d48
 8002360:	00000000 	.word	0x00000000
 8002364:	20000cd8 	.word	0x20000cd8
 8002368:	20000db4 	.word	0x20000db4
 800236c:	20000dbc 	.word	0x20000dbc
 8002370:	20000cdc 	.word	0x20000cdc
 8002374:	20000db0 	.word	0x20000db0
 8002378:	20000de8 	.word	0x20000de8
 800237c:	20000ce0 	.word	0x20000ce0
 8002380:	20000db8 	.word	0x20000db8
 8002384:	20000e14 	.word	0x20000e14
 8002388:	20000e40 	.word	0x20000e40

0800238c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f835 	bl	8002404 <_ZNSaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEED1Ev>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f854 	bl	800245a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4619      	mov	r1, r3
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f830 	bl	800241c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ffe4 	bl	800238c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EED1Ev>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <_ZNSt6vectorIP15PrintableSensorSaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80023ce:	b5b0      	push	{r4, r5, r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681c      	ldr	r4, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 f86b 	bl	80024bc <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80023e6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80023e8:	461a      	mov	r2, r3
 80023ea:	4629      	mov	r1, r5
 80023ec:	4620      	mov	r0, r4
 80023ee:	f000 f870 	bl	80024d2 <_ZSt8_DestroyIPP15PrintableSensorS1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 f848 	bl	800248a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EED1Ev>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bdb0      	pop	{r4, r5, r7, pc}

08002404 <_ZNSaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f86e 	bl	80024ee <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEED1Ev>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d012      	beq.n	8002452 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E+0x36>
	{
	  _M_erase(_S_right(__x));
 800242c:	6838      	ldr	r0, [r7, #0]
 800242e:	f000 f869 	bl	8002504 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002432:	4603      	mov	r3, r0
 8002434:	4619      	mov	r1, r3
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff fff0 	bl	800241c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E>
	  _Link_type __y = _S_left(__x);
 800243c:	6838      	ldr	r0, [r7, #0]
 800243e:	f000 f86d 	bl	800251c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>
 8002442:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8002444:	6839      	ldr	r1, [r7, #0]
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f874 	bl	8002534 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS1_E>
	  __x = __y;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8002450:	e7e9      	b.n	8002426 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E+0xa>
	}
    }
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f86b 	bl	8002556 <_ZNSaIP15PrintableSensorED1Ev>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80024a2:	461a      	mov	r2, r3
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f862 	bl	800256e <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j>
      }
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ffe0 	bl	8002472 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE12_Vector_implD1Ev>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <_ZSt8_DestroyIPP15PrintableSensorS1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80024de:	68b9      	ldr	r1, [r7, #8]
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f857 	bl	8002594 <_ZSt8_DestroyIPP15PrintableSensorEvT_S3_>
    }
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS1_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800253e:	6839      	ldr	r1, [r7, #0]
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f834 	bl	80025ae <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS1_E>
	_M_put_node(__p);
 8002546:	6839      	ldr	r1, [r7, #0]
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f845 	bl	80025d8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS1_E>
      }
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <_ZNSaIP15PrintableSensorED1Ev>:
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f84c 	bl	80025fc <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorED1Ev>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
	if (__p)
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	4618      	mov	r0, r3
 8002588:	f000 f843 	bl	8002612 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE10deallocateERS2_PS1_j>
      }
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <_ZSt8_DestroyIPP15PrintableSensorEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800259e:	6839      	ldr	r1, [r7, #0]
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f845 	bl	8002630 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP15PrintableSensorEEvT_S5_>
    }
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS1_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80025ae:	b590      	push	{r4, r7, lr}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f844 	bl	8002646 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 80025be:	4604      	mov	r4, r0
 80025c0:	6838      	ldr	r0, [r7, #0]
 80025c2:	f000 f84b 	bl	800265c <_ZNSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4619      	mov	r1, r3
 80025ca:	4620      	mov	r0, r4
 80025cc:	f000 f854 	bl	8002678 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE7destroyIS2_EEvRS4_PT_>
      }
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd90      	pop	{r4, r7, pc}

080025d8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS1_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f82f 	bl	8002646 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2201      	movs	r2, #1
 80025ec:	6839      	ldr	r1, [r7, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f84f 	bl	8002692 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE10deallocateERS4_PS3_j>
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorED1Ev>:
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 f844 	bl	80026b0 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE10deallocateEPS2_j>
 8002628:	bf00      	nop
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP15PrintableSensorEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <_ZNSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>:
      _M_valptr()
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3310      	adds	r3, #16
 8002668:	4618      	mov	r0, r3
 800266a:	f000 f831 	bl	80026d0 <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>
 800266e:	4603      	mov	r3, r0
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE7destroyIS2_EEvRS4_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8002682:	6839      	ldr	r1, [r7, #0]
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f82f 	bl	80026e8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE7destroyIS3_EEvPT_>
	}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 f82b 	bl	80026fe <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE10deallocateEPS4_j>
 80026a8:	bf00      	nop
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4619      	mov	r1, r3
 80026c2:	68b8      	ldr	r0, [r7, #8]
 80026c4:	f010 f9c2 	bl	8012a4c <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f823 	bl	8002724 <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>
 80026de:	4603      	mov	r3, r0
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE7destroyIS3_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE10deallocateEPS4_j>:
      deallocate(_Tp* __p, size_type __t)
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4619      	mov	r1, r3
 8002716:	68b8      	ldr	r0, [r7, #8]
 8002718:	f010 f998 	bl	8012a4c <_ZdlPvj>
      }
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>:
      _M_addr() noexcept
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <_GLOBAL__sub_I_hadc1>:
 800273a:	b580      	push	{r7, lr}
 800273c:	af00      	add	r7, sp, #0
 800273e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002742:	2001      	movs	r0, #1
 8002744:	f7ff fd72 	bl	800222c <_Z41__static_initialization_and_destruction_0ii>
 8002748:	bd80      	pop	{r7, pc}

0800274a <_GLOBAL__sub_D_hadc1>:
 800274a:	b580      	push	{r7, lr}
 800274c:	af00      	add	r7, sp, #0
 800274e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002752:	2000      	movs	r0, #0
 8002754:	f7ff fd6a 	bl	800222c <_Z41__static_initialization_and_destruction_0ii>
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_MspInit+0x54>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	4a11      	ldr	r2, [pc, #68]	; (80027b0 <HAL_MspInit+0x54>)
 800276c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002770:	6453      	str	r3, [r2, #68]	; 0x44
 8002772:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <HAL_MspInit+0x54>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	603b      	str	r3, [r7, #0]
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_MspInit+0x54>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <HAL_MspInit+0x54>)
 8002788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <HAL_MspInit+0x54>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	210f      	movs	r1, #15
 800279e:	f06f 0001 	mvn.w	r0, #1
 80027a2:	f005 fbc5 	bl	8007f30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800

080027b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2e      	ldr	r2, [pc, #184]	; (800288c <HAL_ADC_MspInit+0xd8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d156      	bne.n	8002884 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	4b2d      	ldr	r3, [pc, #180]	; (8002890 <HAL_ADC_MspInit+0xdc>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	4a2c      	ldr	r2, [pc, #176]	; (8002890 <HAL_ADC_MspInit+0xdc>)
 80027e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e4:	6453      	str	r3, [r2, #68]	; 0x44
 80027e6:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <HAL_ADC_MspInit+0xdc>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	4b26      	ldr	r3, [pc, #152]	; (8002890 <HAL_ADC_MspInit+0xdc>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	4a25      	ldr	r2, [pc, #148]	; (8002890 <HAL_ADC_MspInit+0xdc>)
 80027fc:	f043 0304 	orr.w	r3, r3, #4
 8002800:	6313      	str	r3, [r2, #48]	; 0x30
 8002802:	4b23      	ldr	r3, [pc, #140]	; (8002890 <HAL_ADC_MspInit+0xdc>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800280e:	2301      	movs	r3, #1
 8002810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002812:	2303      	movs	r3, #3
 8002814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800281a:	f107 0314 	add.w	r3, r7, #20
 800281e:	4619      	mov	r1, r3
 8002820:	481c      	ldr	r0, [pc, #112]	; (8002894 <HAL_ADC_MspInit+0xe0>)
 8002822:	f005 ffb1 	bl	8008788 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002826:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <HAL_ADC_MspInit+0xe4>)
 8002828:	4a1c      	ldr	r2, [pc, #112]	; (800289c <HAL_ADC_MspInit+0xe8>)
 800282a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800282c:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <HAL_ADC_MspInit+0xe4>)
 800282e:	2200      	movs	r2, #0
 8002830:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002832:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_ADC_MspInit+0xe4>)
 8002834:	2200      	movs	r2, #0
 8002836:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002838:	4b17      	ldr	r3, [pc, #92]	; (8002898 <HAL_ADC_MspInit+0xe4>)
 800283a:	2200      	movs	r2, #0
 800283c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800283e:	4b16      	ldr	r3, [pc, #88]	; (8002898 <HAL_ADC_MspInit+0xe4>)
 8002840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002844:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002846:	4b14      	ldr	r3, [pc, #80]	; (8002898 <HAL_ADC_MspInit+0xe4>)
 8002848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800284c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_ADC_MspInit+0xe4>)
 8002850:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002854:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <HAL_ADC_MspInit+0xe4>)
 8002858:	2200      	movs	r2, #0
 800285a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <HAL_ADC_MspInit+0xe4>)
 800285e:	2200      	movs	r2, #0
 8002860:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002862:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <HAL_ADC_MspInit+0xe4>)
 8002864:	2200      	movs	r2, #0
 8002866:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002868:	480b      	ldr	r0, [pc, #44]	; (8002898 <HAL_ADC_MspInit+0xe4>)
 800286a:	f005 fb8b 	bl	8007f84 <HAL_DMA_Init>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002874:	f7ff fcb6 	bl	80021e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a07      	ldr	r2, [pc, #28]	; (8002898 <HAL_ADC_MspInit+0xe4>)
 800287c:	639a      	str	r2, [r3, #56]	; 0x38
 800287e:	4a06      	ldr	r2, [pc, #24]	; (8002898 <HAL_ADC_MspInit+0xe4>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002884:	bf00      	nop
 8002886:	3728      	adds	r7, #40	; 0x28
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40012000 	.word	0x40012000
 8002890:	40023800 	.word	0x40023800
 8002894:	40020800 	.word	0x40020800
 8002898:	20000338 	.word	0x20000338
 800289c:	40026410 	.word	0x40026410

080028a0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a28      	ldr	r2, [pc, #160]	; (8002960 <HAL_SD_MspInit+0xc0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d14a      	bne.n	8002958 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	4b27      	ldr	r3, [pc, #156]	; (8002964 <HAL_SD_MspInit+0xc4>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	4a26      	ldr	r2, [pc, #152]	; (8002964 <HAL_SD_MspInit+0xc4>)
 80028cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028d0:	6453      	str	r3, [r2, #68]	; 0x44
 80028d2:	4b24      	ldr	r3, [pc, #144]	; (8002964 <HAL_SD_MspInit+0xc4>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	4b20      	ldr	r3, [pc, #128]	; (8002964 <HAL_SD_MspInit+0xc4>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a1f      	ldr	r2, [pc, #124]	; (8002964 <HAL_SD_MspInit+0xc4>)
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <HAL_SD_MspInit+0xc4>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	4b19      	ldr	r3, [pc, #100]	; (8002964 <HAL_SD_MspInit+0xc4>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a18      	ldr	r2, [pc, #96]	; (8002964 <HAL_SD_MspInit+0xc4>)
 8002904:	f043 0308 	orr.w	r3, r3, #8
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b16      	ldr	r3, [pc, #88]	; (8002964 <HAL_SD_MspInit+0xc4>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002916:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800291a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002924:	2303      	movs	r3, #3
 8002926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002928:	230c      	movs	r3, #12
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	4619      	mov	r1, r3
 8002932:	480d      	ldr	r0, [pc, #52]	; (8002968 <HAL_SD_MspInit+0xc8>)
 8002934:	f005 ff28 	bl	8008788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002938:	2304      	movs	r3, #4
 800293a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293c:	2302      	movs	r3, #2
 800293e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002944:	2303      	movs	r3, #3
 8002946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002948:	230c      	movs	r3, #12
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	4619      	mov	r1, r3
 8002952:	4806      	ldr	r0, [pc, #24]	; (800296c <HAL_SD_MspInit+0xcc>)
 8002954:	f005 ff18 	bl	8008788 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002958:	bf00      	nop
 800295a:	3728      	adds	r7, #40	; 0x28
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40012c00 	.word	0x40012c00
 8002964:	40023800 	.word	0x40023800
 8002968:	40020800 	.word	0x40020800
 800296c:	40020c00 	.word	0x40020c00

08002970 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a47      	ldr	r2, [pc, #284]	; (8002aac <HAL_SPI_MspInit+0x13c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	f040 8087 	bne.w	8002aa2 <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	4b45      	ldr	r3, [pc, #276]	; (8002ab0 <HAL_SPI_MspInit+0x140>)
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	4a44      	ldr	r2, [pc, #272]	; (8002ab0 <HAL_SPI_MspInit+0x140>)
 800299e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a2:	6413      	str	r3, [r2, #64]	; 0x40
 80029a4:	4b42      	ldr	r3, [pc, #264]	; (8002ab0 <HAL_SPI_MspInit+0x140>)
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	4b3e      	ldr	r3, [pc, #248]	; (8002ab0 <HAL_SPI_MspInit+0x140>)
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	4a3d      	ldr	r2, [pc, #244]	; (8002ab0 <HAL_SPI_MspInit+0x140>)
 80029ba:	f043 0302 	orr.w	r3, r3, #2
 80029be:	6313      	str	r3, [r2, #48]	; 0x30
 80029c0:	4b3b      	ldr	r3, [pc, #236]	; (8002ab0 <HAL_SPI_MspInit+0x140>)
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80029cc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80029d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029de:	2305      	movs	r3, #5
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e2:	f107 0314 	add.w	r3, r7, #20
 80029e6:	4619      	mov	r1, r3
 80029e8:	4832      	ldr	r0, [pc, #200]	; (8002ab4 <HAL_SPI_MspInit+0x144>)
 80029ea:	f005 fecd 	bl	8008788 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80029ee:	4b32      	ldr	r3, [pc, #200]	; (8002ab8 <HAL_SPI_MspInit+0x148>)
 80029f0:	4a32      	ldr	r2, [pc, #200]	; (8002abc <HAL_SPI_MspInit+0x14c>)
 80029f2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80029f4:	4b30      	ldr	r3, [pc, #192]	; (8002ab8 <HAL_SPI_MspInit+0x148>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029fa:	4b2f      	ldr	r3, [pc, #188]	; (8002ab8 <HAL_SPI_MspInit+0x148>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a00:	4b2d      	ldr	r3, [pc, #180]	; (8002ab8 <HAL_SPI_MspInit+0x148>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a06:	4b2c      	ldr	r3, [pc, #176]	; (8002ab8 <HAL_SPI_MspInit+0x148>)
 8002a08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a0c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a0e:	4b2a      	ldr	r3, [pc, #168]	; (8002ab8 <HAL_SPI_MspInit+0x148>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a14:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <HAL_SPI_MspInit+0x148>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002a1a:	4b27      	ldr	r3, [pc, #156]	; (8002ab8 <HAL_SPI_MspInit+0x148>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a20:	4b25      	ldr	r3, [pc, #148]	; (8002ab8 <HAL_SPI_MspInit+0x148>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a26:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <HAL_SPI_MspInit+0x148>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002a2c:	4822      	ldr	r0, [pc, #136]	; (8002ab8 <HAL_SPI_MspInit+0x148>)
 8002a2e:	f005 faa9 	bl	8007f84 <HAL_DMA_Init>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002a38:	f7ff fbd4 	bl	80021e4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a1e      	ldr	r2, [pc, #120]	; (8002ab8 <HAL_SPI_MspInit+0x148>)
 8002a40:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a42:	4a1d      	ldr	r2, [pc, #116]	; (8002ab8 <HAL_SPI_MspInit+0x148>)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002a48:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <HAL_SPI_MspInit+0x150>)
 8002a4a:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <HAL_SPI_MspInit+0x154>)
 8002a4c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002a4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <HAL_SPI_MspInit+0x150>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a54:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <HAL_SPI_MspInit+0x150>)
 8002a56:	2240      	movs	r2, #64	; 0x40
 8002a58:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a5a:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <HAL_SPI_MspInit+0x150>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a60:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <HAL_SPI_MspInit+0x150>)
 8002a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a66:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a68:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <HAL_SPI_MspInit+0x150>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a6e:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <HAL_SPI_MspInit+0x150>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002a74:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <HAL_SPI_MspInit+0x150>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a7a:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <HAL_SPI_MspInit+0x150>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <HAL_SPI_MspInit+0x150>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002a86:	480e      	ldr	r0, [pc, #56]	; (8002ac0 <HAL_SPI_MspInit+0x150>)
 8002a88:	f005 fa7c 	bl	8007f84 <HAL_DMA_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 8002a92:	f7ff fba7 	bl	80021e4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <HAL_SPI_MspInit+0x150>)
 8002a9a:	649a      	str	r2, [r3, #72]	; 0x48
 8002a9c:	4a08      	ldr	r2, [pc, #32]	; (8002ac0 <HAL_SPI_MspInit+0x150>)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002aa2:	bf00      	nop
 8002aa4:	3728      	adds	r7, #40	; 0x28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40003800 	.word	0x40003800
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40020400 	.word	0x40020400
 8002ab8:	20000474 	.word	0x20000474
 8002abc:	40026058 	.word	0x40026058
 8002ac0:	200004d4 	.word	0x200004d4
 8002ac4:	40026070 	.word	0x40026070

08002ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <HAL_TIM_Base_MspInit+0x70>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d10e      	bne.n	8002af8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <HAL_TIM_Base_MspInit+0x74>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4a16      	ldr	r2, [pc, #88]	; (8002b3c <HAL_TIM_Base_MspInit+0x74>)
 8002ae4:	f043 0302 	orr.w	r3, r3, #2
 8002ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aea:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <HAL_TIM_Base_MspInit+0x74>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002af6:	e01a      	b.n	8002b2e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a10      	ldr	r2, [pc, #64]	; (8002b40 <HAL_TIM_Base_MspInit+0x78>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d115      	bne.n	8002b2e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <HAL_TIM_Base_MspInit+0x74>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a0c      	ldr	r2, [pc, #48]	; (8002b3c <HAL_TIM_Base_MspInit+0x74>)
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_TIM_Base_MspInit+0x74>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2105      	movs	r1, #5
 8002b22:	201e      	movs	r0, #30
 8002b24:	f005 fa04 	bl	8007f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b28:	201e      	movs	r0, #30
 8002b2a:	f005 fa1d 	bl	8007f68 <HAL_NVIC_EnableIRQ>
}
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40000800 	.word	0x40000800

08002b44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08a      	sub	sp, #40	; 0x28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 0314 	add.w	r3, r7, #20
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a21      	ldr	r2, [pc, #132]	; (8002be8 <HAL_TIM_MspPostInit+0xa4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d13b      	bne.n	8002bde <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	4b20      	ldr	r3, [pc, #128]	; (8002bec <HAL_TIM_MspPostInit+0xa8>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a1f      	ldr	r2, [pc, #124]	; (8002bec <HAL_TIM_MspPostInit+0xa8>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <HAL_TIM_MspPostInit+0xa8>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_TIM_MspPostInit+0xa8>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	4a18      	ldr	r2, [pc, #96]	; (8002bec <HAL_TIM_MspPostInit+0xa8>)
 8002b8c:	f043 0302 	orr.w	r3, r3, #2
 8002b90:	6313      	str	r3, [r2, #48]	; 0x30
 8002b92:	4b16      	ldr	r3, [pc, #88]	; (8002bec <HAL_TIM_MspPostInit+0xa8>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b9e:	23c0      	movs	r3, #192	; 0xc0
 8002ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002baa:	2300      	movs	r3, #0
 8002bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb2:	f107 0314 	add.w	r3, r7, #20
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	480d      	ldr	r0, [pc, #52]	; (8002bf0 <HAL_TIM_MspPostInit+0xac>)
 8002bba:	f005 fde5 	bl	8008788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd2:	f107 0314 	add.w	r3, r7, #20
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4806      	ldr	r0, [pc, #24]	; (8002bf4 <HAL_TIM_MspPostInit+0xb0>)
 8002bda:	f005 fdd5 	bl	8008788 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002bde:	bf00      	nop
 8002be0:	3728      	adds	r7, #40	; 0x28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40000400 	.word	0x40000400
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40020000 	.word	0x40020000
 8002bf4:	40020400 	.word	0x40020400

08002bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b092      	sub	sp, #72	; 0x48
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a93      	ldr	r2, [pc, #588]	; (8002e64 <HAL_UART_MspInit+0x26c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d15a      	bne.n	8002cd0 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c1e:	4b92      	ldr	r3, [pc, #584]	; (8002e68 <HAL_UART_MspInit+0x270>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	4a91      	ldr	r2, [pc, #580]	; (8002e68 <HAL_UART_MspInit+0x270>)
 8002c24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c28:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2a:	4b8f      	ldr	r3, [pc, #572]	; (8002e68 <HAL_UART_MspInit+0x270>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c32:	633b      	str	r3, [r7, #48]	; 0x30
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c3a:	4b8b      	ldr	r3, [pc, #556]	; (8002e68 <HAL_UART_MspInit+0x270>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a8a      	ldr	r2, [pc, #552]	; (8002e68 <HAL_UART_MspInit+0x270>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b88      	ldr	r3, [pc, #544]	; (8002e68 <HAL_UART_MspInit+0x270>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c52:	2303      	movs	r3, #3
 8002c54:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c56:	2302      	movs	r3, #2
 8002c58:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002c62:	2308      	movs	r3, #8
 8002c64:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	487f      	ldr	r0, [pc, #508]	; (8002e6c <HAL_UART_MspInit+0x274>)
 8002c6e:	f005 fd8b 	bl	8008788 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002c72:	4b7f      	ldr	r3, [pc, #508]	; (8002e70 <HAL_UART_MspInit+0x278>)
 8002c74:	4a7f      	ldr	r2, [pc, #508]	; (8002e74 <HAL_UART_MspInit+0x27c>)
 8002c76:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002c78:	4b7d      	ldr	r3, [pc, #500]	; (8002e70 <HAL_UART_MspInit+0x278>)
 8002c7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c7e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c80:	4b7b      	ldr	r3, [pc, #492]	; (8002e70 <HAL_UART_MspInit+0x278>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c86:	4b7a      	ldr	r3, [pc, #488]	; (8002e70 <HAL_UART_MspInit+0x278>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c8c:	4b78      	ldr	r3, [pc, #480]	; (8002e70 <HAL_UART_MspInit+0x278>)
 8002c8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c92:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c94:	4b76      	ldr	r3, [pc, #472]	; (8002e70 <HAL_UART_MspInit+0x278>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c9a:	4b75      	ldr	r3, [pc, #468]	; (8002e70 <HAL_UART_MspInit+0x278>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002ca0:	4b73      	ldr	r3, [pc, #460]	; (8002e70 <HAL_UART_MspInit+0x278>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ca6:	4b72      	ldr	r3, [pc, #456]	; (8002e70 <HAL_UART_MspInit+0x278>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cac:	4b70      	ldr	r3, [pc, #448]	; (8002e70 <HAL_UART_MspInit+0x278>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002cb2:	486f      	ldr	r0, [pc, #444]	; (8002e70 <HAL_UART_MspInit+0x278>)
 8002cb4:	f005 f966 	bl	8007f84 <HAL_DMA_Init>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002cbe:	f7ff fa91 	bl	80021e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a6a      	ldr	r2, [pc, #424]	; (8002e70 <HAL_UART_MspInit+0x278>)
 8002cc6:	639a      	str	r2, [r3, #56]	; 0x38
 8002cc8:	4a69      	ldr	r2, [pc, #420]	; (8002e70 <HAL_UART_MspInit+0x278>)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002cce:	e19f      	b.n	8003010 <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a68      	ldr	r2, [pc, #416]	; (8002e78 <HAL_UART_MspInit+0x280>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d163      	bne.n	8002da2 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cde:	4b62      	ldr	r3, [pc, #392]	; (8002e68 <HAL_UART_MspInit+0x270>)
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	4a61      	ldr	r2, [pc, #388]	; (8002e68 <HAL_UART_MspInit+0x270>)
 8002ce4:	f043 0310 	orr.w	r3, r3, #16
 8002ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cea:	4b5f      	ldr	r3, [pc, #380]	; (8002e68 <HAL_UART_MspInit+0x270>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfa:	4b5b      	ldr	r3, [pc, #364]	; (8002e68 <HAL_UART_MspInit+0x270>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	4a5a      	ldr	r2, [pc, #360]	; (8002e68 <HAL_UART_MspInit+0x270>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	6313      	str	r3, [r2, #48]	; 0x30
 8002d06:	4b58      	ldr	r3, [pc, #352]	; (8002e68 <HAL_UART_MspInit+0x270>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d16:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d20:	2303      	movs	r3, #3
 8002d22:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d24:	2307      	movs	r3, #7
 8002d26:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	484f      	ldr	r0, [pc, #316]	; (8002e6c <HAL_UART_MspInit+0x274>)
 8002d30:	f005 fd2a 	bl	8008788 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002d34:	4b51      	ldr	r3, [pc, #324]	; (8002e7c <HAL_UART_MspInit+0x284>)
 8002d36:	4a52      	ldr	r2, [pc, #328]	; (8002e80 <HAL_UART_MspInit+0x288>)
 8002d38:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002d3a:	4b50      	ldr	r3, [pc, #320]	; (8002e7c <HAL_UART_MspInit+0x284>)
 8002d3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d40:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d42:	4b4e      	ldr	r3, [pc, #312]	; (8002e7c <HAL_UART_MspInit+0x284>)
 8002d44:	2240      	movs	r2, #64	; 0x40
 8002d46:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d48:	4b4c      	ldr	r3, [pc, #304]	; (8002e7c <HAL_UART_MspInit+0x284>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d4e:	4b4b      	ldr	r3, [pc, #300]	; (8002e7c <HAL_UART_MspInit+0x284>)
 8002d50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d54:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d56:	4b49      	ldr	r3, [pc, #292]	; (8002e7c <HAL_UART_MspInit+0x284>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d5c:	4b47      	ldr	r3, [pc, #284]	; (8002e7c <HAL_UART_MspInit+0x284>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002d62:	4b46      	ldr	r3, [pc, #280]	; (8002e7c <HAL_UART_MspInit+0x284>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d68:	4b44      	ldr	r3, [pc, #272]	; (8002e7c <HAL_UART_MspInit+0x284>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d6e:	4b43      	ldr	r3, [pc, #268]	; (8002e7c <HAL_UART_MspInit+0x284>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d74:	4841      	ldr	r0, [pc, #260]	; (8002e7c <HAL_UART_MspInit+0x284>)
 8002d76:	f005 f905 	bl	8007f84 <HAL_DMA_Init>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8002d80:	f7ff fa30 	bl	80021e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a3d      	ldr	r2, [pc, #244]	; (8002e7c <HAL_UART_MspInit+0x284>)
 8002d88:	635a      	str	r2, [r3, #52]	; 0x34
 8002d8a:	4a3c      	ldr	r2, [pc, #240]	; (8002e7c <HAL_UART_MspInit+0x284>)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002d90:	2200      	movs	r2, #0
 8002d92:	2105      	movs	r1, #5
 8002d94:	2025      	movs	r0, #37	; 0x25
 8002d96:	f005 f8cb 	bl	8007f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d9a:	2025      	movs	r0, #37	; 0x25
 8002d9c:	f005 f8e4 	bl	8007f68 <HAL_NVIC_EnableIRQ>
}
 8002da0:	e136      	b.n	8003010 <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART2)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a37      	ldr	r2, [pc, #220]	; (8002e84 <HAL_UART_MspInit+0x28c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d171      	bne.n	8002e90 <HAL_UART_MspInit+0x298>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dac:	2300      	movs	r3, #0
 8002dae:	623b      	str	r3, [r7, #32]
 8002db0:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <HAL_UART_MspInit+0x270>)
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	4a2c      	ldr	r2, [pc, #176]	; (8002e68 <HAL_UART_MspInit+0x270>)
 8002db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dba:	6413      	str	r3, [r2, #64]	; 0x40
 8002dbc:	4b2a      	ldr	r3, [pc, #168]	; (8002e68 <HAL_UART_MspInit+0x270>)
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc4:	623b      	str	r3, [r7, #32]
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61fb      	str	r3, [r7, #28]
 8002dcc:	4b26      	ldr	r3, [pc, #152]	; (8002e68 <HAL_UART_MspInit+0x270>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	4a25      	ldr	r2, [pc, #148]	; (8002e68 <HAL_UART_MspInit+0x270>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd8:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <HAL_UART_MspInit+0x270>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002de4:	230c      	movs	r3, #12
 8002de6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de8:	2302      	movs	r3, #2
 8002dea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df0:	2303      	movs	r3, #3
 8002df2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002df4:	2307      	movs	r3, #7
 8002df6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	481b      	ldr	r0, [pc, #108]	; (8002e6c <HAL_UART_MspInit+0x274>)
 8002e00:	f005 fcc2 	bl	8008788 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002e04:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <HAL_UART_MspInit+0x290>)
 8002e06:	4a21      	ldr	r2, [pc, #132]	; (8002e8c <HAL_UART_MspInit+0x294>)
 8002e08:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002e0a:	4b1f      	ldr	r3, [pc, #124]	; (8002e88 <HAL_UART_MspInit+0x290>)
 8002e0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e10:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e12:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_UART_MspInit+0x290>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e18:	4b1b      	ldr	r3, [pc, #108]	; (8002e88 <HAL_UART_MspInit+0x290>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <HAL_UART_MspInit+0x290>)
 8002e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e24:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e26:	4b18      	ldr	r3, [pc, #96]	; (8002e88 <HAL_UART_MspInit+0x290>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e2c:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <HAL_UART_MspInit+0x290>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002e32:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <HAL_UART_MspInit+0x290>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e38:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <HAL_UART_MspInit+0x290>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e3e:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_UART_MspInit+0x290>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002e44:	4810      	ldr	r0, [pc, #64]	; (8002e88 <HAL_UART_MspInit+0x290>)
 8002e46:	f005 f89d 	bl	8007f84 <HAL_DMA_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8002e50:	f7ff f9c8 	bl	80021e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a0c      	ldr	r2, [pc, #48]	; (8002e88 <HAL_UART_MspInit+0x290>)
 8002e58:	639a      	str	r2, [r3, #56]	; 0x38
 8002e5a:	4a0b      	ldr	r2, [pc, #44]	; (8002e88 <HAL_UART_MspInit+0x290>)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002e60:	e0d6      	b.n	8003010 <HAL_UART_MspInit+0x418>
 8002e62:	bf00      	nop
 8002e64:	40004c00 	.word	0x40004c00
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40020000 	.word	0x40020000
 8002e70:	20000718 	.word	0x20000718
 8002e74:	40026040 	.word	0x40026040
 8002e78:	40011000 	.word	0x40011000
 8002e7c:	20000778 	.word	0x20000778
 8002e80:	400264b8 	.word	0x400264b8
 8002e84:	40004400 	.word	0x40004400
 8002e88:	200007d8 	.word	0x200007d8
 8002e8c:	40026088 	.word	0x40026088
  else if(huart->Instance==USART3)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a60      	ldr	r2, [pc, #384]	; (8003018 <HAL_UART_MspInit+0x420>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d15b      	bne.n	8002f52 <HAL_UART_MspInit+0x35a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	4b5f      	ldr	r3, [pc, #380]	; (800301c <HAL_UART_MspInit+0x424>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	4a5e      	ldr	r2, [pc, #376]	; (800301c <HAL_UART_MspInit+0x424>)
 8002ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eaa:	4b5c      	ldr	r3, [pc, #368]	; (800301c <HAL_UART_MspInit+0x424>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb2:	61bb      	str	r3, [r7, #24]
 8002eb4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	4b58      	ldr	r3, [pc, #352]	; (800301c <HAL_UART_MspInit+0x424>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	4a57      	ldr	r2, [pc, #348]	; (800301c <HAL_UART_MspInit+0x424>)
 8002ec0:	f043 0302 	orr.w	r3, r3, #2
 8002ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec6:	4b55      	ldr	r3, [pc, #340]	; (800301c <HAL_UART_MspInit+0x424>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ed2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ed6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ee4:	2307      	movs	r3, #7
 8002ee6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002eec:	4619      	mov	r1, r3
 8002eee:	484c      	ldr	r0, [pc, #304]	; (8003020 <HAL_UART_MspInit+0x428>)
 8002ef0:	f005 fc4a 	bl	8008788 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002ef4:	4b4b      	ldr	r3, [pc, #300]	; (8003024 <HAL_UART_MspInit+0x42c>)
 8002ef6:	4a4c      	ldr	r2, [pc, #304]	; (8003028 <HAL_UART_MspInit+0x430>)
 8002ef8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002efa:	4b4a      	ldr	r3, [pc, #296]	; (8003024 <HAL_UART_MspInit+0x42c>)
 8002efc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f00:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f02:	4b48      	ldr	r3, [pc, #288]	; (8003024 <HAL_UART_MspInit+0x42c>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f08:	4b46      	ldr	r3, [pc, #280]	; (8003024 <HAL_UART_MspInit+0x42c>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f0e:	4b45      	ldr	r3, [pc, #276]	; (8003024 <HAL_UART_MspInit+0x42c>)
 8002f10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f14:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f16:	4b43      	ldr	r3, [pc, #268]	; (8003024 <HAL_UART_MspInit+0x42c>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f1c:	4b41      	ldr	r3, [pc, #260]	; (8003024 <HAL_UART_MspInit+0x42c>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002f22:	4b40      	ldr	r3, [pc, #256]	; (8003024 <HAL_UART_MspInit+0x42c>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f28:	4b3e      	ldr	r3, [pc, #248]	; (8003024 <HAL_UART_MspInit+0x42c>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f2e:	4b3d      	ldr	r3, [pc, #244]	; (8003024 <HAL_UART_MspInit+0x42c>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002f34:	483b      	ldr	r0, [pc, #236]	; (8003024 <HAL_UART_MspInit+0x42c>)
 8002f36:	f005 f825 	bl	8007f84 <HAL_DMA_Init>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_UART_MspInit+0x34c>
      Error_Handler();
 8002f40:	f7ff f950 	bl	80021e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a37      	ldr	r2, [pc, #220]	; (8003024 <HAL_UART_MspInit+0x42c>)
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38
 8002f4a:	4a36      	ldr	r2, [pc, #216]	; (8003024 <HAL_UART_MspInit+0x42c>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002f50:	e05e      	b.n	8003010 <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART6)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a35      	ldr	r2, [pc, #212]	; (800302c <HAL_UART_MspInit+0x434>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d159      	bne.n	8003010 <HAL_UART_MspInit+0x418>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	4b2e      	ldr	r3, [pc, #184]	; (800301c <HAL_UART_MspInit+0x424>)
 8002f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f64:	4a2d      	ldr	r2, [pc, #180]	; (800301c <HAL_UART_MspInit+0x424>)
 8002f66:	f043 0320 	orr.w	r3, r3, #32
 8002f6a:	6453      	str	r3, [r2, #68]	; 0x44
 8002f6c:	4b2b      	ldr	r3, [pc, #172]	; (800301c <HAL_UART_MspInit+0x424>)
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f70:	f003 0320 	and.w	r3, r3, #32
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	4b27      	ldr	r3, [pc, #156]	; (800301c <HAL_UART_MspInit+0x424>)
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	4a26      	ldr	r2, [pc, #152]	; (800301c <HAL_UART_MspInit+0x424>)
 8002f82:	f043 0304 	orr.w	r3, r3, #4
 8002f86:	6313      	str	r3, [r2, #48]	; 0x30
 8002f88:	4b24      	ldr	r3, [pc, #144]	; (800301c <HAL_UART_MspInit+0x424>)
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f94:	23c0      	movs	r3, #192	; 0xc0
 8002f96:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002fa4:	2308      	movs	r3, #8
 8002fa6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fa8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fac:	4619      	mov	r1, r3
 8002fae:	4820      	ldr	r0, [pc, #128]	; (8003030 <HAL_UART_MspInit+0x438>)
 8002fb0:	f005 fbea 	bl	8008788 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002fb4:	4b1f      	ldr	r3, [pc, #124]	; (8003034 <HAL_UART_MspInit+0x43c>)
 8002fb6:	4a20      	ldr	r2, [pc, #128]	; (8003038 <HAL_UART_MspInit+0x440>)
 8002fb8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002fba:	4b1e      	ldr	r3, [pc, #120]	; (8003034 <HAL_UART_MspInit+0x43c>)
 8002fbc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002fc0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <HAL_UART_MspInit+0x43c>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <HAL_UART_MspInit+0x43c>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fce:	4b19      	ldr	r3, [pc, #100]	; (8003034 <HAL_UART_MspInit+0x43c>)
 8002fd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fd4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fd6:	4b17      	ldr	r3, [pc, #92]	; (8003034 <HAL_UART_MspInit+0x43c>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fdc:	4b15      	ldr	r3, [pc, #84]	; (8003034 <HAL_UART_MspInit+0x43c>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002fe2:	4b14      	ldr	r3, [pc, #80]	; (8003034 <HAL_UART_MspInit+0x43c>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fe8:	4b12      	ldr	r3, [pc, #72]	; (8003034 <HAL_UART_MspInit+0x43c>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fee:	4b11      	ldr	r3, [pc, #68]	; (8003034 <HAL_UART_MspInit+0x43c>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002ff4:	480f      	ldr	r0, [pc, #60]	; (8003034 <HAL_UART_MspInit+0x43c>)
 8002ff6:	f004 ffc5 	bl	8007f84 <HAL_DMA_Init>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_UART_MspInit+0x40c>
      Error_Handler();
 8003000:	f7ff f8f0 	bl	80021e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a0b      	ldr	r2, [pc, #44]	; (8003034 <HAL_UART_MspInit+0x43c>)
 8003008:	639a      	str	r2, [r3, #56]	; 0x38
 800300a:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <HAL_UART_MspInit+0x43c>)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003010:	bf00      	nop
 8003012:	3748      	adds	r7, #72	; 0x48
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40004800 	.word	0x40004800
 800301c:	40023800 	.word	0x40023800
 8003020:	40020400 	.word	0x40020400
 8003024:	20000838 	.word	0x20000838
 8003028:	40026028 	.word	0x40026028
 800302c:	40011400 	.word	0x40011400
 8003030:	40020800 	.word	0x40020800
 8003034:	20000898 	.word	0x20000898
 8003038:	40026428 	.word	0x40026428

0800303c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08c      	sub	sp, #48	; 0x30
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800304c:	2300      	movs	r3, #0
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	4b2f      	ldr	r3, [pc, #188]	; (8003110 <HAL_InitTick+0xd4>)
 8003052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003054:	4a2e      	ldr	r2, [pc, #184]	; (8003110 <HAL_InitTick+0xd4>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	6453      	str	r3, [r2, #68]	; 0x44
 800305c:	4b2c      	ldr	r3, [pc, #176]	; (8003110 <HAL_InitTick+0xd4>)
 800305e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003068:	f107 020c 	add.w	r2, r7, #12
 800306c:	f107 0310 	add.w	r3, r7, #16
 8003070:	4611      	mov	r1, r2
 8003072:	4618      	mov	r0, r3
 8003074:	f007 fa60 	bl	800a538 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003078:	f007 fa4a 	bl	800a510 <HAL_RCC_GetPCLK2Freq>
 800307c:	4603      	mov	r3, r0
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	4a23      	ldr	r2, [pc, #140]	; (8003114 <HAL_InitTick+0xd8>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	0c9b      	lsrs	r3, r3, #18
 800308c:	3b01      	subs	r3, #1
 800308e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003090:	4b21      	ldr	r3, [pc, #132]	; (8003118 <HAL_InitTick+0xdc>)
 8003092:	4a22      	ldr	r2, [pc, #136]	; (800311c <HAL_InitTick+0xe0>)
 8003094:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003096:	4b20      	ldr	r3, [pc, #128]	; (8003118 <HAL_InitTick+0xdc>)
 8003098:	f240 32e7 	movw	r2, #999	; 0x3e7
 800309c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800309e:	4a1e      	ldr	r2, [pc, #120]	; (8003118 <HAL_InitTick+0xdc>)
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80030a4:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <HAL_InitTick+0xdc>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030aa:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <HAL_InitTick+0xdc>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030b0:	4b19      	ldr	r3, [pc, #100]	; (8003118 <HAL_InitTick+0xdc>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80030b6:	4818      	ldr	r0, [pc, #96]	; (8003118 <HAL_InitTick+0xdc>)
 80030b8:	f008 fddc 	bl	800bc74 <HAL_TIM_Base_Init>
 80030bc:	4603      	mov	r3, r0
 80030be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80030c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d11b      	bne.n	8003102 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80030ca:	4813      	ldr	r0, [pc, #76]	; (8003118 <HAL_InitTick+0xdc>)
 80030cc:	f008 fe22 	bl	800bd14 <HAL_TIM_Base_Start_IT>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80030d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d111      	bne.n	8003102 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80030de:	2019      	movs	r0, #25
 80030e0:	f004 ff42 	bl	8007f68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b0f      	cmp	r3, #15
 80030e8:	d808      	bhi.n	80030fc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80030ea:	2200      	movs	r2, #0
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	2019      	movs	r0, #25
 80030f0:	f004 ff1e 	bl	8007f30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030f4:	4a0a      	ldr	r2, [pc, #40]	; (8003120 <HAL_InitTick+0xe4>)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e002      	b.n	8003102 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003106:	4618      	mov	r0, r3
 8003108:	3730      	adds	r7, #48	; 0x30
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800
 8003114:	431bde83 	.word	0x431bde83
 8003118:	20000e58 	.word	0x20000e58
 800311c:	40010000 	.word	0x40010000
 8003120:	20000008 	.word	0x20000008

08003124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003128:	e7fe      	b.n	8003128 <NMI_Handler+0x4>

0800312a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800312a:	b480      	push	{r7}
 800312c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800312e:	e7fe      	b.n	800312e <HardFault_Handler+0x4>

08003130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003134:	e7fe      	b.n	8003134 <MemManage_Handler+0x4>

08003136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003136:	b480      	push	{r7}
 8003138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800313a:	e7fe      	b.n	800313a <BusFault_Handler+0x4>

0800313c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003140:	e7fe      	b.n	8003140 <UsageFault_Handler+0x4>

08003142 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003146:	bf00      	nop
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003154:	2004      	movs	r0, #4
 8003156:	f005 fccd 	bl	8008af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}

0800315e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003162:	2010      	movs	r0, #16
 8003164:	f005 fcc6 	bl	8008af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003168:	bf00      	nop
 800316a:	bd80      	pop	{r7, pc}

0800316c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003170:	4802      	ldr	r0, [pc, #8]	; (800317c <DMA1_Stream1_IRQHandler+0x10>)
 8003172:	f005 f89f 	bl	80082b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000838 	.word	0x20000838

08003180 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003184:	4802      	ldr	r0, [pc, #8]	; (8003190 <DMA1_Stream2_IRQHandler+0x10>)
 8003186:	f005 f895 	bl	80082b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000718 	.word	0x20000718

08003194 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003198:	4802      	ldr	r0, [pc, #8]	; (80031a4 <DMA1_Stream3_IRQHandler+0x10>)
 800319a:	f005 f88b 	bl	80082b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000474 	.word	0x20000474

080031a8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80031ac:	4802      	ldr	r0, [pc, #8]	; (80031b8 <DMA1_Stream4_IRQHandler+0x10>)
 80031ae:	f005 f881 	bl	80082b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	200004d4 	.word	0x200004d4

080031bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80031c0:	4802      	ldr	r0, [pc, #8]	; (80031cc <DMA1_Stream5_IRQHandler+0x10>)
 80031c2:	f005 f877 	bl	80082b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	200007d8 	.word	0x200007d8

080031d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80031d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80031d8:	f005 fc8c 	bl	8008af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}

080031e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031e4:	4802      	ldr	r0, [pc, #8]	; (80031f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80031e6:	f008 ff27 	bl	800c038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000e58 	.word	0x20000e58

080031f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80031f8:	4802      	ldr	r0, [pc, #8]	; (8003204 <TIM4_IRQHandler+0x10>)
 80031fa:	f008 ff1d 	bl	800c038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	2000057c 	.word	0x2000057c

08003208 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800320c:	4802      	ldr	r0, [pc, #8]	; (8003218 <USART1_IRQHandler+0x10>)
 800320e:	f009 fecf 	bl	800cfb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000608 	.word	0x20000608

0800321c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003220:	4802      	ldr	r0, [pc, #8]	; (800322c <DMA2_Stream0_IRQHandler+0x10>)
 8003222:	f005 f847 	bl	80082b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003226:	bf00      	nop
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000338 	.word	0x20000338

08003230 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003234:	4802      	ldr	r0, [pc, #8]	; (8003240 <DMA2_Stream1_IRQHandler+0x10>)
 8003236:	f005 f83d 	bl	80082b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000898 	.word	0x20000898

08003244 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003248:	4802      	ldr	r0, [pc, #8]	; (8003254 <OTG_FS_IRQHandler+0x10>)
 800324a:	f005 fc6b 	bl	8008b24 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20004c00 	.word	0x20004c00

08003258 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800325c:	4802      	ldr	r0, [pc, #8]	; (8003268 <DMA2_Stream7_IRQHandler+0x10>)
 800325e:	f005 f829 	bl	80082b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000778 	.word	0x20000778

0800326c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
	return 1;
 8003270:	2301      	movs	r3, #1
}
 8003272:	4618      	mov	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <_kill>:

int _kill(int pid, int sig)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003286:	f011 fb5d 	bl	8014944 <__errno>
 800328a:	4603      	mov	r3, r0
 800328c:	2216      	movs	r2, #22
 800328e:	601a      	str	r2, [r3, #0]
	return -1;
 8003290:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003294:	4618      	mov	r0, r3
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <_exit>:

void _exit (int status)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80032a4:	f04f 31ff 	mov.w	r1, #4294967295
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff ffe7 	bl	800327c <_kill>
	while (1) {}		/* Make sure we hang here */
 80032ae:	e7fe      	b.n	80032ae <_exit+0x12>

080032b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032b8:	4a14      	ldr	r2, [pc, #80]	; (800330c <_sbrk+0x5c>)
 80032ba:	4b15      	ldr	r3, [pc, #84]	; (8003310 <_sbrk+0x60>)
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032c4:	4b13      	ldr	r3, [pc, #76]	; (8003314 <_sbrk+0x64>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d102      	bne.n	80032d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032cc:	4b11      	ldr	r3, [pc, #68]	; (8003314 <_sbrk+0x64>)
 80032ce:	4a12      	ldr	r2, [pc, #72]	; (8003318 <_sbrk+0x68>)
 80032d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <_sbrk+0x64>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4413      	add	r3, r2
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d207      	bcs.n	80032f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032e0:	f011 fb30 	bl	8014944 <__errno>
 80032e4:	4603      	mov	r3, r0
 80032e6:	220c      	movs	r2, #12
 80032e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032ea:	f04f 33ff 	mov.w	r3, #4294967295
 80032ee:	e009      	b.n	8003304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032f0:	4b08      	ldr	r3, [pc, #32]	; (8003314 <_sbrk+0x64>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032f6:	4b07      	ldr	r3, [pc, #28]	; (8003314 <_sbrk+0x64>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4413      	add	r3, r2
 80032fe:	4a05      	ldr	r2, [pc, #20]	; (8003314 <_sbrk+0x64>)
 8003300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003302:	68fb      	ldr	r3, [r7, #12]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20020000 	.word	0x20020000
 8003310:	00000400 	.word	0x00000400
 8003314:	20000ea0 	.word	0x20000ea0
 8003318:	20005120 	.word	0x20005120

0800331c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <SystemInit+0x20>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003326:	4a05      	ldr	r2, [pc, #20]	; (800333c <SystemInit+0x20>)
 8003328:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800332c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003378 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003344:	480d      	ldr	r0, [pc, #52]	; (800337c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003346:	490e      	ldr	r1, [pc, #56]	; (8003380 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003348:	4a0e      	ldr	r2, [pc, #56]	; (8003384 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800334a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800334c:	e002      	b.n	8003354 <LoopCopyDataInit>

0800334e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800334e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003352:	3304      	adds	r3, #4

08003354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003358:	d3f9      	bcc.n	800334e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800335a:	4a0b      	ldr	r2, [pc, #44]	; (8003388 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800335c:	4c0b      	ldr	r4, [pc, #44]	; (800338c <LoopFillZerobss+0x26>)
  movs r3, #0
 800335e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003360:	e001      	b.n	8003366 <LoopFillZerobss>

08003362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003364:	3204      	adds	r2, #4

08003366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003368:	d3fb      	bcc.n	8003362 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800336a:	f7ff ffd7 	bl	800331c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800336e:	f011 faef 	bl	8014950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003372:	f7fd ffbd 	bl	80012f0 <main>
  bx  lr    
 8003376:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003378:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800337c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003380:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003384:	08015534 	.word	0x08015534
  ldr r2, =_sbss
 8003388:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800338c:	20005120 	.word	0x20005120

08003390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003390:	e7fe      	b.n	8003390 <ADC_IRQHandler>

08003392 <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 8003392:	b590      	push	{r4, r7, lr}
 8003394:	b087      	sub	sp, #28
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	0fdb      	lsrs	r3, r3, #31
 80033a0:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <_ZNSt7__cxx119to_stringEi+0x1c>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	425b      	negs	r3, r3
 80033ac:	e000      	b.n	80033b0 <_ZNSt7__cxx119to_stringEi+0x1e>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 80033b2:	210a      	movs	r1, #10
 80033b4:	6938      	ldr	r0, [r7, #16]
 80033b6:	f000 fa9d 	bl	80038f4 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 80033ba:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 80033bc:	7dfa      	ldrb	r2, [r7, #23]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	18d4      	adds	r4, r2, r3
 80033c2:	f107 0308 	add.w	r3, r7, #8
 80033c6:	4618      	mov	r0, r3
 80033c8:	f00f fb56 	bl	8012a78 <_ZNSaIcEC1Ev>
 80033cc:	f107 0308 	add.w	r3, r7, #8
 80033d0:	222d      	movs	r2, #45	; 0x2d
 80033d2:	4621      	mov	r1, r4
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f00f fc4a 	bl	8012c6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 80033da:	f107 0308 	add.w	r3, r7, #8
 80033de:	4618      	mov	r0, r3
 80033e0:	f00f fb4b 	bl	8012a7a <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
 80033e6:	4619      	mov	r1, r3
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f00f fc4f 	bl	8012c8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80033ee:	4603      	mov	r3, r0
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	68f9      	ldr	r1, [r7, #12]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fabd 	bl	8003974 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 80033fa:	bf00      	nop
  }
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	371c      	adds	r7, #28
 8003400:	46bd      	mov	sp, r7
 8003402:	bd90      	pop	{r4, r7, pc}

08003404 <_ZN15PrintableSensor11toCharArrayEi>:
	char packet[50]={};

public:
	virtual const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList) = 0;

	const char* toCharArray(int value)
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b089      	sub	sp, #36	; 0x24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
	{
		return std::to_string(value).c_str();
 800340e:	f107 0308 	add.w	r3, r7, #8
 8003412:	6839      	ldr	r1, [r7, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff ffbc 	bl	8003392 <_ZNSt7__cxx119to_stringEi>
 800341a:	f107 0308 	add.w	r3, r7, #8
 800341e:	4618      	mov	r0, r3
 8003420:	f00f fc37 	bl	8012c92 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8003424:	4604      	mov	r4, r0
 8003426:	bf00      	nop
 8003428:	f107 0308 	add.w	r3, r7, #8
 800342c:	4618      	mov	r0, r3
 800342e:	f00f fc27 	bl	8012c80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003432:	4623      	mov	r3, r4
	}
 8003434:	4618      	mov	r0, r3
 8003436:	3724      	adds	r7, #36	; 0x24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd90      	pop	{r4, r7, pc}

0800343c <_ZN8SPI_ConnC1Ev>:
#define INTERFACES_INTERFACES_H_

#include <stdint.h>
#include <string.h>

class SPI_Conn
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	4a04      	ldr	r2, [pc, #16]	; (8003458 <_ZN8SPI_ConnC1Ev+0x1c>)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	08014f5c 	.word	0x08014f5c

0800345c <_ZN15PrintableSensorC1Ev>:
class PrintableSensor
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	4a07      	ldr	r2, [pc, #28]	; (8003484 <_ZN15PrintableSensorC1Ev+0x28>)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	2232      	movs	r2, #50	; 0x32
 8003470:	2100      	movs	r1, #0
 8003472:	4618      	mov	r0, r3
 8003474:	f011 faba 	bl	80149ec <memset>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	08014f50 	.word	0x08014f50

08003488 <_ZN6BMP39010calib_coefC1Ev>:
	SPI_HandleTypeDef *spi_port;

	uint8_t spiTxBuff[2]={0,0};
	uint8_t spiRxBuff[2]={0,0};

	struct calib_coef
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	801a      	strh	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	805a      	strh	r2, [r3, #2]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	711a      	strb	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	80da      	strh	r2, [r3, #6]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	811a      	strh	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	729a      	strb	r2, [r3, #10]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	72da      	strb	r2, [r3, #11]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	819a      	strh	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	81da      	strh	r2, [r3, #14]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	741a      	strb	r2, [r3, #16]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	745a      	strb	r2, [r3, #17]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	825a      	strh	r2, [r3, #18]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	751a      	strb	r2, [r3, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	755a      	strb	r2, [r3, #21]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <_ZN6BMP390C1EP19__SPI_HandleTypeDef>:
 *      Author: Asus
 */

#include "BMP390.hpp"

BMP390::BMP390(SPI_HandleTypeDef *spi_port)
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff ff9b 	bl	800343c <_ZN8SPI_ConnC1Ev>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3304      	adds	r3, #4
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff ffa6 	bl	800345c <_ZN15PrintableSensorC1Ev>
 8003510:	4a11      	ldr	r2, [pc, #68]	; (8003558 <_ZN6BMP390C1EP19__SPI_HandleTypeDef+0x64>)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	4a11      	ldr	r2, [pc, #68]	; (800355c <_ZN6BMP390C1EP19__SPI_HandleTypeDef+0x68>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3344      	adds	r3, #68	; 0x44
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff ffa1 	bl	8003488 <_ZN6BMP39010calib_coefC1Ev>
{
	BMP390::spi_port = spi_port;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	08014f30 	.word	0x08014f30
 800355c:	08014f44 	.word	0x08014f44

08003560 <_ZN6BMP39011defaultInitEv>:

bool BMP390::defaultInit()
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af02      	add	r7, sp, #8
 8003566:	6078      	str	r0, [r7, #4]
	SPI_write(CMD,CMD_SOFTRESET);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	22b6      	movs	r2, #182	; 0xb6
 8003570:	217e      	movs	r1, #126	; 0x7e
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	4798      	blx	r3
	HAL_Delay(20);
 8003576:	2014      	movs	r0, #20
 8003578:	f003 ffec 	bl	8007554 <HAL_Delay>

	int debug = SPI_read(STATUS);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3304      	adds	r3, #4
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2103      	movs	r1, #3
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
 800358a:	4603      	mov	r3, r0
 800358c:	60fb      	str	r3, [r7, #12]
	while ((debug= SPI_read(STATUS))==0)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3304      	adds	r3, #4
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2103      	movs	r1, #3
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
 800359c:	4603      	mov	r3, r0
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	bf0c      	ite	eq
 80035a6:	2301      	moveq	r3, #1
 80035a8:	2300      	movne	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <_ZN6BMP39011defaultInitEv+0x58>
		HAL_Delay(50);
 80035b0:	2032      	movs	r0, #50	; 0x32
 80035b2:	f003 ffcf 	bl	8007554 <HAL_Delay>
	while ((debug= SPI_read(STATUS))==0)
 80035b6:	e7ea      	b.n	800358e <_ZN6BMP39011defaultInitEv+0x2e>

	if (!initAndCheck(OSR,OSR_OSR_P_X16|OSR_OSR_T_X2,10))
 80035b8:	2300      	movs	r3, #0
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	230a      	movs	r3, #10
 80035be:	220c      	movs	r2, #12
 80035c0:	211c      	movs	r1, #28
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f84d 	bl	8003662 <_ZN6BMP39012initAndCheckEhhhb>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f083 0301 	eor.w	r3, r3, #1
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <_ZN6BMP39011defaultInitEv+0x78>
		return false;
 80035d4:	2300      	movs	r3, #0
 80035d6:	e040      	b.n	800365a <_ZN6BMP39011defaultInitEv+0xfa>

	if (!initAndCheck(CONFIG,CONFIG_COEF_3,10))
 80035d8:	2300      	movs	r3, #0
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	230a      	movs	r3, #10
 80035de:	2202      	movs	r2, #2
 80035e0:	211f      	movs	r1, #31
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f83d 	bl	8003662 <_ZN6BMP39012initAndCheckEhhhb>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f083 0301 	eor.w	r3, r3, #1
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <_ZN6BMP39011defaultInitEv+0x98>
		return false;
 80035f4:	2300      	movs	r3, #0
 80035f6:	e030      	b.n	800365a <_ZN6BMP39011defaultInitEv+0xfa>

	if (!initAndCheck(ODR,ODR_ODR_25,10))
 80035f8:	2300      	movs	r3, #0
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	230a      	movs	r3, #10
 80035fe:	2203      	movs	r2, #3
 8003600:	211d      	movs	r1, #29
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f82d 	bl	8003662 <_ZN6BMP39012initAndCheckEhhhb>
 8003608:	4603      	mov	r3, r0
 800360a:	f083 0301 	eor.w	r3, r3, #1
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <_ZN6BMP39011defaultInitEv+0xb8>
		return false;
 8003614:	2300      	movs	r3, #0
 8003616:	e020      	b.n	800365a <_ZN6BMP39011defaultInitEv+0xfa>

	if (!initAndCheck(INT_CTRL,INT_CTRL_DRDY_EN|INT_CTRL_INT_LEVEL,10))
 8003618:	2300      	movs	r3, #0
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	230a      	movs	r3, #10
 800361e:	2242      	movs	r2, #66	; 0x42
 8003620:	2119      	movs	r1, #25
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f81d 	bl	8003662 <_ZN6BMP39012initAndCheckEhhhb>
 8003628:	4603      	mov	r3, r0
 800362a:	f083 0301 	eor.w	r3, r3, #1
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <_ZN6BMP39011defaultInitEv+0xd8>
		return false;
 8003634:	2300      	movs	r3, #0
 8003636:	e010      	b.n	800365a <_ZN6BMP39011defaultInitEv+0xfa>

	if (!initAndCheck(PWR_CTRL,PWR_CTRL_PRESS_EN|PWR_CTRL_TEMP_EN|PWR_CTRL_MODE_NORMAL,10))
 8003638:	2300      	movs	r3, #0
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	230a      	movs	r3, #10
 800363e:	2233      	movs	r2, #51	; 0x33
 8003640:	211b      	movs	r1, #27
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f80d 	bl	8003662 <_ZN6BMP39012initAndCheckEhhhb>
 8003648:	4603      	mov	r3, r0
 800364a:	f083 0301 	eor.w	r3, r3, #1
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <_ZN6BMP39011defaultInitEv+0xf8>
		return false;
 8003654:	2300      	movs	r3, #0
 8003656:	e000      	b.n	800365a <_ZN6BMP39011defaultInitEv+0xfa>

	return true;
 8003658:	2301      	movs	r3, #1
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <_ZN6BMP39012initAndCheckEhhhb>:

bool BMP390::initAndCheck(uint8_t addr,uint8_t val,uint8_t numberOfTries,bool read_only)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	4608      	mov	r0, r1
 800366c:	4611      	mov	r1, r2
 800366e:	461a      	mov	r2, r3
 8003670:	4603      	mov	r3, r0
 8003672:	70fb      	strb	r3, [r7, #3]
 8003674:	460b      	mov	r3, r1
 8003676:	70bb      	strb	r3, [r7, #2]
 8003678:	4613      	mov	r3, r2
 800367a:	707b      	strb	r3, [r7, #1]
	for (int i=0;i<numberOfTries;i++)
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	787b      	ldrb	r3, [r7, #1]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	429a      	cmp	r2, r3
 8003686:	da21      	bge.n	80036cc <_ZN6BMP39012initAndCheckEhhhb+0x6a>
	{
		if (read_only==false)
 8003688:	7e3b      	ldrb	r3, [r7, #24]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <_ZN6BMP39012initAndCheckEhhhb+0x3a>
			SPI_write(addr,val);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	78ba      	ldrb	r2, [r7, #2]
 8003696:	78f9      	ldrb	r1, [r7, #3]
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	4798      	blx	r3

		if (SPI_read(addr)==val)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3304      	adds	r3, #4
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	4611      	mov	r1, r2
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	4798      	blx	r3
 80036ac:	4603      	mov	r3, r0
 80036ae:	461a      	mov	r2, r3
 80036b0:	78bb      	ldrb	r3, [r7, #2]
 80036b2:	4293      	cmp	r3, r2
 80036b4:	bf0c      	ite	eq
 80036b6:	2301      	moveq	r3, #1
 80036b8:	2300      	movne	r3, #0
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <_ZN6BMP39012initAndCheckEhhhb+0x62>
			return true;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e004      	b.n	80036ce <_ZN6BMP39012initAndCheckEhhhb+0x6c>
	for (int i=0;i<numberOfTries;i++)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	3301      	adds	r3, #1
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	e7d9      	b.n	8003680 <_ZN6BMP39012initAndCheckEhhhb+0x1e>
	}
	return false;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <_ZN6BMP3906updateEv>:

void BMP390::update()
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
	uint8_t DATA0=SPI_read(DATA_0);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3304      	adds	r3, #4
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2104      	movs	r1, #4
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	4798      	blx	r3
 80036ec:	4603      	mov	r3, r0
 80036ee:	73fb      	strb	r3, [r7, #15]
	uint8_t DATA1=SPI_read(DATA_1);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3304      	adds	r3, #4
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2105      	movs	r1, #5
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
 80036fe:	4603      	mov	r3, r0
 8003700:	73bb      	strb	r3, [r7, #14]
	uint8_t DATA2=SPI_read(DATA_2);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3304      	adds	r3, #4
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2106      	movs	r1, #6
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	4798      	blx	r3
 8003710:	4603      	mov	r3, r0
 8003712:	737b      	strb	r3, [r7, #13]

	uint8_t TEMP0=SPI_read(DATA_3);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3304      	adds	r3, #4
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2107      	movs	r1, #7
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	4798      	blx	r3
 8003722:	4603      	mov	r3, r0
 8003724:	733b      	strb	r3, [r7, #12]
	uint8_t TEMP1=SPI_read(DATA_4);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3304      	adds	r3, #4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2108      	movs	r1, #8
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
 8003734:	4603      	mov	r3, r0
 8003736:	72fb      	strb	r3, [r7, #11]
	uint8_t TEMP2=SPI_read(DATA_5);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3304      	adds	r3, #4
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2109      	movs	r1, #9
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	4798      	blx	r3
 8003746:	4603      	mov	r3, r0
 8003748:	72bb      	strb	r3, [r7, #10]

	pressure = ((int32_t)DATA2<<16)|((int16_t)DATA1<<8)|DATA0;
 800374a:	7b7b      	ldrb	r3, [r7, #13]
 800374c:	041a      	lsls	r2, r3, #16
 800374e:	7bbb      	ldrb	r3, [r7, #14]
 8003750:	021b      	lsls	r3, r3, #8
 8003752:	431a      	orrs	r2, r3
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	4313      	orrs	r3, r2
 8003758:	4618      	mov	r0, r3
 800375a:	f7fc fe93 	bl	8000484 <__aeabi_i2d>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
	temp = ((int32_t)TEMP2<<16)|((int16_t)TEMP1<<8)|TEMP0;
 8003768:	7abb      	ldrb	r3, [r7, #10]
 800376a:	041a      	lsls	r2, r3, #16
 800376c:	7afb      	ldrb	r3, [r7, #11]
 800376e:	021b      	lsls	r3, r3, #8
 8003770:	431a      	orrs	r2, r3
 8003772:	7b3b      	ldrb	r3, [r7, #12]
 8003774:	4313      	orrs	r3, r2
 8003776:	4618      	mov	r0, r3
 8003778:	f7fc fe84 	bl	8000484 <__aeabi_i2d>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
}
 8003786:	bf00      	nop
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* BMP390::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8003790:	b5b0      	push	{r4, r5, r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3308      	adds	r3, #8
 800379e:	2200      	movs	r2, #0
 80037a0:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::BMP_RAW_PRESS)!=senorsList.end())
 80037a2:	230f      	movs	r3, #15
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	f107 0310 	add.w	r3, r7, #16
 80037aa:	4619      	mov	r1, r3
 80037ac:	6838      	ldr	r0, [r7, #0]
 80037ae:	f000 f937 	bl	8003a20 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80037b2:	4603      	mov	r3, r0
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	6838      	ldr	r0, [r7, #0]
 80037b8:	f000 f94b 	bl	8003a52 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80037bc:	4603      	mov	r3, r0
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	f107 0214 	add.w	r2, r7, #20
 80037c4:	f107 030c 	add.w	r3, r7, #12
 80037c8:	4611      	mov	r1, r2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 f94e 	bl	8003a6c <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d022      	beq.n	800381c <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x8c>
	{
		strcat(packet,toCharArray(pressure));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f103 0408 	add.w	r4, r3, #8
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	1d1d      	adds	r5, r3, #4
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80037e6:	4610      	mov	r0, r2
 80037e8:	4619      	mov	r1, r3
 80037ea:	f7fd f965 	bl	8000ab8 <__aeabi_d2iz>
 80037ee:	4603      	mov	r3, r0
 80037f0:	4619      	mov	r1, r3
 80037f2:	4628      	mov	r0, r5
 80037f4:	f7ff fe06 	bl	8003404 <_ZN15PrintableSensor11toCharArrayEi>
 80037f8:	4603      	mov	r3, r0
 80037fa:	4619      	mov	r1, r3
 80037fc:	4620      	mov	r0, r4
 80037fe:	f011 fa31 	bl	8014c64 <strcat>
		strcat(packet,",");
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f103 0408 	add.w	r4, r3, #8
 8003808:	4620      	mov	r0, r4
 800380a:	f7fc fce1 	bl	80001d0 <strlen>
 800380e:	4603      	mov	r3, r0
 8003810:	4423      	add	r3, r4
 8003812:	4905      	ldr	r1, [pc, #20]	; (8003828 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x98>)
 8003814:	461a      	mov	r2, r3
 8003816:	460b      	mov	r3, r1
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3308      	adds	r3, #8
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bdb0      	pop	{r4, r5, r7, pc}
 8003828:	08014e08 	.word	0x08014e08

0800382c <_ZThn4_N6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	bool defaultInit();
	void update();
	int32_t getPressure();
	int32_t getTemp();
	uint8_t getChipID();
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 800382c:	f1a0 0004 	sub.w	r0, r0, #4
 8003830:	f7ff bfae 	b.w	8003790 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>

08003834 <_ZN6BMP3909SPI_writeEhh>:
{
	return SPI_read(CHIP_ID);
}

void BMP390::SPI_write(uint8_t reg,uint8_t data)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	70fb      	strb	r3, [r7, #3]
 8003840:	4613      	mov	r3, r2
 8003842:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(BMP_CS_PORT,BMP_CS_PIN,GPIO_PIN_RESET);
 8003844:	2200      	movs	r2, #0
 8003846:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800384a:	480e      	ldr	r0, [pc, #56]	; (8003884 <_ZN6BMP3909SPI_writeEhh+0x50>)
 800384c:	f005 f938 	bl	8008ac0 <HAL_GPIO_WritePin>
	spiTxBuff[0] = reg;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	78fa      	ldrb	r2, [r7, #3]
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	spiTxBuff[1] = data;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	78ba      	ldrb	r2, [r7, #2]
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3340      	adds	r3, #64	; 0x40
 8003868:	2202      	movs	r2, #2
 800386a:	4619      	mov	r1, r3
 800386c:	f007 fcd2 	bl	800b214 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(BMP_CS_PORT,BMP_CS_PIN,GPIO_PIN_SET);
 8003870:	2201      	movs	r2, #1
 8003872:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003876:	4803      	ldr	r0, [pc, #12]	; (8003884 <_ZN6BMP3909SPI_writeEhh+0x50>)
 8003878:	f005 f922 	bl	8008ac0 <HAL_GPIO_WritePin>
}
 800387c:	bf00      	nop
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40020400 	.word	0x40020400

08003888 <_ZN6BMP3908SPI_readEh>:

uint8_t BMP390::SPI_read(uint8_t reg)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BMP_CS_PORT, BMP_CS_PIN, GPIO_PIN_RESET);
 8003894:	2200      	movs	r2, #0
 8003896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800389a:	4815      	ldr	r0, [pc, #84]	; (80038f0 <_ZN6BMP3908SPI_readEh+0x68>)
 800389c:	f005 f910 	bl	8008ac0 <HAL_GPIO_WritePin>
	spiTxBuff[0]=reg|0x80;
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	spiTxBuff[1]=0x00;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff, 2);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3340      	adds	r3, #64	; 0x40
 80038be:	2202      	movs	r2, #2
 80038c0:	4619      	mov	r1, r3
 80038c2:	f007 fca7 	bl	800b214 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(spi_port, (uint8_t*)spiRxBuff, 1);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3342      	adds	r3, #66	; 0x42
 80038ce:	2201      	movs	r2, #1
 80038d0:	4619      	mov	r1, r3
 80038d2:	f007 fd55 	bl	800b380 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(BMP_CS_PORT, BMP_CS_PIN, GPIO_PIN_SET);
 80038d6:	2201      	movs	r2, #1
 80038d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038dc:	4804      	ldr	r0, [pc, #16]	; (80038f0 <_ZN6BMP3908SPI_readEh+0x68>)
 80038de:	f005 f8ef 	bl	8008ac0 <HAL_GPIO_WritePin>

	return spiRxBuff[0];
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40020400 	.word	0x40020400

080038f4 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 80038fe:	2301      	movs	r3, #1
 8003900:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	fb03 f303 	mul.w	r3, r3, r3
 8003908:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	fb02 f303 	mul.w	r3, r2, r3
 8003912:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	fb02 f303 	mul.w	r3, r2, r3
 800391c:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	429a      	cmp	r2, r3
 8003924:	d201      	bcs.n	800392a <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	e01d      	b.n	8003966 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	429a      	cmp	r2, r3
 8003930:	d202      	bcs.n	8003938 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	3301      	adds	r3, #1
 8003936:	e016      	b.n	8003966 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	429a      	cmp	r2, r3
 800393e:	d202      	bcs.n	8003946 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	3302      	adds	r3, #2
 8003944:	e00f      	b.n	8003966 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	429a      	cmp	r2, r3
 800394c:	d202      	bcs.n	8003954 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	3303      	adds	r3, #3
 8003952:	e008      	b.n	8003966 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	fbb2 f3f3 	udiv	r3, r2, r3
 800395c:	607b      	str	r3, [r7, #4]
	  __n += 4;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	3304      	adds	r3, #4
 8003962:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8003964:	e7db      	b.n	800391e <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8003966:	4618      	mov	r0, r3
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8003974:	b480      	push	{r7}
 8003976:	b089      	sub	sp, #36	; 0x24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	3b01      	subs	r3, #1
 8003984:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b63      	cmp	r3, #99	; 0x63
 800398a:	d925      	bls.n	80039d8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x64>
	{
	  auto const __num = (__val % 100) * 2;
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	4b22      	ldr	r3, [pc, #136]	; (8003a18 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8003990:	fba3 1302 	umull	r1, r3, r3, r2
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	2164      	movs	r1, #100	; 0x64
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	61bb      	str	r3, [r7, #24]
	  __val /= 100;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a1c      	ldr	r2, [pc, #112]	; (8003a18 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	68f9      	ldr	r1, [r7, #12]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	440b      	add	r3, r1
 80039b8:	4918      	ldr	r1, [pc, #96]	; (8003a1c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80039ba:	5c8a      	ldrb	r2, [r1, r2]
 80039bc:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	3b01      	subs	r3, #1
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4413      	add	r3, r2
 80039c6:	4915      	ldr	r1, [pc, #84]	; (8003a1c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	440a      	add	r2, r1
 80039cc:	7812      	ldrb	r2, [r2, #0]
 80039ce:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	3b02      	subs	r3, #2
 80039d4:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 80039d6:	e7d6      	b.n	8003986 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x12>
	}
      if (__val >= 10)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b09      	cmp	r3, #9
 80039dc:	d910      	bls.n	8003a00 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	617b      	str	r3, [r7, #20]
	  __first[1] = __digits[__num + 1];
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3301      	adds	r3, #1
 80039ec:	490b      	ldr	r1, [pc, #44]	; (8003a1c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80039ee:	5c8a      	ldrb	r2, [r1, r2]
 80039f0:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 80039f2:	4a0a      	ldr	r2, [pc, #40]	; (8003a1c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	4413      	add	r3, r2
 80039f8:	781a      	ldrb	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 80039fe:	e005      	b.n	8003a0c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	3330      	adds	r3, #48	; 0x30
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	701a      	strb	r2, [r3, #0]
    }
 8003a0c:	bf00      	nop
 8003a0e:	3724      	adds	r7, #36	; 0x24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	51eb851f 	.word	0x51eb851f
 8003a1c:	08014e5c 	.word	0x08014e5c

08003a20 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>:
       *  the key matches.  If successful the function returns an iterator
       *  pointing to the sought after element.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */
      iterator
      find(const key_type& __x)
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6839      	ldr	r1, [r7, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 f830 	bl	8003a94 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_>
 8003a34:	4603      	mov	r3, r0
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	f107 020c 	add.w	r2, r7, #12
 8003a3c:	f107 0308 	add.w	r3, r7, #8
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 f862 	bl	8003b0c <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 f865 	bl	8003b2c <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 8003a62:	4603      	mov	r3, r0
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	bf14      	ite	ne
 8003a82:	2301      	movne	r3, #1
 8003a84:	2300      	moveq	r3, #0
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	4618      	mov	r0, r3
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fe fcdb 	bl	800245a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f851 	bl	8003b4e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 8003aac:	4602      	mov	r2, r0
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f857 	bl	8003b66 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f883 	bl	8003bc8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	f107 020c 	add.w	r2, r7, #12
 8003aca:	f107 0308 	add.w	r3, r7, #8
 8003ace:	4611      	mov	r1, r2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 f88a 	bl	8003bea <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8003ad6:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10d      	bne.n	8003af8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 8003adc:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8003ade:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 f896 	bl	8003c12 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	461a      	mov	r2, r3
 8003aea:	6839      	ldr	r1, [r7, #0]
 8003aec:	4620      	mov	r0, r4
 8003aee:	f000 f89c 	bl	8003c2a <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d004      	beq.n	8003b02 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f865 	bl	8003bc8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 8003afe:	4603      	mov	r3, r0
 8003b00:	e000      	b.n	8003b04 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x70>
 8003b02:	68bb      	ldr	r3, [r7, #8]
    }
 8003b04:	4618      	mov	r0, r3
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd90      	pop	{r4, r7, pc}

08003b0c <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	1d1a      	adds	r2, r3, #4
 8003b38:	f107 030c 	add.w	r3, r7, #12
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 f888 	bl	8003c54 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPKSt18_Rb_tree_node_base>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003b66:	b590      	push	{r4, r7, lr}
 8003b68:	b087      	sub	sp, #28
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
 8003b72:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d01b      	beq.n	8003bb2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8003b7a:	68fc      	ldr	r4, [r7, #12]
 8003b7c:	68b8      	ldr	r0, [r7, #8]
 8003b7e:	f000 f878 	bl	8003c72 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 8003b82:	4603      	mov	r3, r0
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	4619      	mov	r1, r3
 8003b88:	4620      	mov	r0, r4
 8003b8a:	f000 f84e 	bl	8003c2a <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f083 0301 	eor.w	r3, r3, #1
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d006      	beq.n	8003ba8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	607b      	str	r3, [r7, #4]
 8003b9e:	68b8      	ldr	r0, [r7, #8]
 8003ba0:	f7fe fcbc 	bl	800251c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>
 8003ba4:	60b8      	str	r0, [r7, #8]
 8003ba6:	e7e5      	b.n	8003b74 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0xe>
	  __x = _S_right(__x);
 8003ba8:	68b8      	ldr	r0, [r7, #8]
 8003baa:	f7fe fcab 	bl	8002504 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003bae:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8003bb0:	e7e0      	b.n	8003b74 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0xe>
      return iterator(__y);
 8003bb2:	f107 0314 	add.w	r3, r7, #20
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 f86d 	bl	8003c98 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8003bbe:	697b      	ldr	r3, [r7, #20]
    }
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd90      	pop	{r4, r7, pc}

08003bc8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	1d1a      	adds	r2, r3, #4
 8003bd4:	f107 030c 	add.w	r3, r7, #12
 8003bd8:	4611      	mov	r1, r2
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 f85c 	bl	8003c98 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f829 	bl	8003c72 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 8003c20:	4603      	mov	r3, r0
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8003c2a:	b480      	push	{r7}
 8003c2c:	b085      	sub	sp, #20
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	bfb4      	ite	lt
 8003c42:	2301      	movlt	r3, #1
 8003c44:	2300      	movge	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>:
      _S_key(_Const_Link_type __x)
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f81b 	bl	8003cb6 <_ZNKSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>
 8003c80:	4602      	mov	r2, r0
 8003c82:	f107 030c 	add.w	r3, r7, #12
 8003c86:	4611      	mov	r1, r2
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 f822 	bl	8003cd2 <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 8003c8e:	4603      	mov	r3, r0
      }
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4618      	mov	r0, r3
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <_ZNKSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>:
      _M_valptr() const
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3310      	adds	r3, #16
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 f811 	bl	8003cea <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>:
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	6039      	str	r1, [r7, #0]
      { return __x; }
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f805 	bl	8003d02 <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>:
      _M_addr() const noexcept
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <_ZN17BatteryManagement3runEv>:
//#include "../BatteryManagement_lib/BaterryManagement.hpp"

#include "BatteryManagement.hpp"

void BatteryManagement::run()
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	tick_counter++;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	60da      	str	r2, [r3, #12]
	toPercentage();
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f818 	bl	8003d60 <_ZN17BatteryManagement12toPercentageEv>

	if (tick_counter>=frequency_tick)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	8912      	ldrh	r2, [r2, #8]
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d30a      	bcc.n	8003d52 <_ZN17BatteryManagement3runEv+0x3a>
	{
		HAL_ADC_Start_DMA(adc_port, &batteryVal,1);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a18      	ldr	r0, [r3, #32]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3310      	adds	r3, #16
 8003d44:	2201      	movs	r2, #1
 8003d46:	4619      	mov	r1, r3
 8003d48:	f003 fc6c 	bl	8007624 <HAL_ADC_Start_DMA>
		if (batteryVal<=BATERRY_MIN_3V2)
		{
			//buzz->beep(100,1,1,100);
		}

		tick_counter = 0;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	60da      	str	r2, [r3, #12]
	}
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	0000      	movs	r0, r0
 8003d5c:	0000      	movs	r0, r0
	...

08003d60 <_ZN17BatteryManagement12toPercentageEv>:

void BatteryManagement::toPercentage()
{
 8003d60:	b5b0      	push	{r4, r5, r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	if(batteryVal>BATERRY_MAX_4V2)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	8812      	ldrh	r2, [r2, #0]
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d906      	bls.n	8003d82 <_ZN17BatteryManagement12toPercentageEv+0x22>
	{
		batteryPercentage = 100;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a50      	ldr	r2, [pc, #320]	; (8003eb8 <_ZN17BatteryManagement12toPercentageEv+0x158>)
 8003d78:	615a      	str	r2, [r3, #20]
		batteryVoltage = 4.2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a4f      	ldr	r2, [pc, #316]	; (8003ebc <_ZN17BatteryManagement12toPercentageEv+0x15c>)
 8003d7e:	619a      	str	r2, [r3, #24]
	else
	{
		batteryVoltage = 3.2+(450.0-(BATERRY_MAX_4V2-batteryVal))/(BATERRY_MAX_4V2-BATERRY_MIN_3V2);
		batteryPercentage = 123.0 - 123.0/pow((1.0 + pow(batteryVoltage/3.7,80)),0.165);
	}
}
 8003d80:	e081      	b.n	8003e86 <_ZN17BatteryManagement12toPercentageEv+0x126>
	else if(batteryVal<BATERRY_MIN_3V2)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	8852      	ldrh	r2, [r2, #2]
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d207      	bcs.n	8003d9e <_ZN17BatteryManagement12toPercentageEv+0x3e>
		batteryPercentage = 0;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	615a      	str	r2, [r3, #20]
		batteryVoltage = 3.2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a49      	ldr	r2, [pc, #292]	; (8003ec0 <_ZN17BatteryManagement12toPercentageEv+0x160>)
 8003d9a:	619a      	str	r2, [r3, #24]
}
 8003d9c:	e073      	b.n	8003e86 <_ZN17BatteryManagement12toPercentageEv+0x126>
		batteryVoltage = 3.2+(450.0-(BATERRY_MAX_4V2-batteryVal))/(BATERRY_MAX_4V2-BATERRY_MIN_3V2);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fc fb5a 	bl	8000464 <__aeabi_ui2d>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	a136      	add	r1, pc, #216	; (adr r1, 8003e90 <_ZN17BatteryManagement12toPercentageEv+0x130>)
 8003db6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dba:	f7fc fa15 	bl	80001e8 <__aeabi_dsub>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4614      	mov	r4, r2
 8003dc4:	461d      	mov	r5, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	885b      	ldrh	r3, [r3, #2]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fc fb56 	bl	8000484 <__aeabi_i2d>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4620      	mov	r0, r4
 8003dde:	4629      	mov	r1, r5
 8003de0:	f7fc fce4 	bl	80007ac <__aeabi_ddiv>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4610      	mov	r0, r2
 8003dea:	4619      	mov	r1, r3
 8003dec:	a32a      	add	r3, pc, #168	; (adr r3, 8003e98 <_ZN17BatteryManagement12toPercentageEv+0x138>)
 8003dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df2:	f7fc f9fb 	bl	80001ec <__adddf3>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f7fc fe83 	bl	8000b08 <__aeabi_d2f>
 8003e02:	4602      	mov	r2, r0
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	619a      	str	r2, [r3, #24]
		batteryPercentage = 123.0 - 123.0/pow((1.0 + pow(batteryVoltage/3.7,80)),0.165);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fc fb4b 	bl	80004a8 <__aeabi_f2d>
 8003e12:	a323      	add	r3, pc, #140	; (adr r3, 8003ea0 <_ZN17BatteryManagement12toPercentageEv+0x140>)
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	f7fc fcc8 	bl	80007ac <__aeabi_ddiv>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	ec43 2b17 	vmov	d7, r2, r3
 8003e24:	2050      	movs	r0, #80	; 0x50
 8003e26:	eeb0 0a47 	vmov.f32	s0, s14
 8003e2a:	eef0 0a67 	vmov.f32	s1, s15
 8003e2e:	f000 f866 	bl	8003efe <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003e32:	ec51 0b10 	vmov	r0, r1, d0
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	4b22      	ldr	r3, [pc, #136]	; (8003ec4 <_ZN17BatteryManagement12toPercentageEv+0x164>)
 8003e3c:	f7fc f9d6 	bl	80001ec <__adddf3>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	ec43 2b17 	vmov	d7, r2, r3
 8003e48:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8003ea8 <_ZN17BatteryManagement12toPercentageEv+0x148>
 8003e4c:	eeb0 0a47 	vmov.f32	s0, s14
 8003e50:	eef0 0a67 	vmov.f32	s1, s15
 8003e54:	f00e ff68 	bl	8012d28 <pow>
 8003e58:	ec53 2b10 	vmov	r2, r3, d0
 8003e5c:	a114      	add	r1, pc, #80	; (adr r1, 8003eb0 <_ZN17BatteryManagement12toPercentageEv+0x150>)
 8003e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e62:	f7fc fca3 	bl	80007ac <__aeabi_ddiv>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	a111      	add	r1, pc, #68	; (adr r1, 8003eb0 <_ZN17BatteryManagement12toPercentageEv+0x150>)
 8003e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e70:	f7fc f9ba 	bl	80001e8 <__aeabi_dsub>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4610      	mov	r0, r2
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f7fc fe44 	bl	8000b08 <__aeabi_d2f>
 8003e80:	4602      	mov	r2, r0
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	615a      	str	r2, [r3, #20]
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	00000000 	.word	0x00000000
 8003e94:	407c2000 	.word	0x407c2000
 8003e98:	9999999a 	.word	0x9999999a
 8003e9c:	40099999 	.word	0x40099999
 8003ea0:	9999999a 	.word	0x9999999a
 8003ea4:	400d9999 	.word	0x400d9999
 8003ea8:	51eb851f 	.word	0x51eb851f
 8003eac:	3fc51eb8 	.word	0x3fc51eb8
 8003eb0:	00000000 	.word	0x00000000
 8003eb4:	405ec000 	.word	0x405ec000
 8003eb8:	42c80000 	.word	0x42c80000
 8003ebc:	40866666 	.word	0x40866666
 8003ec0:	404ccccd 	.word	0x404ccccd
 8003ec4:	3ff00000 	.word	0x3ff00000

08003ec8 <_ZN17BatteryManagement8msToTickEt>:
{
	return batteryPercentage;
}

uint16_t BatteryManagement::msToTick(uint16_t ms)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	807b      	strh	r3, [r7, #2]
	return ms/TIM_FREQ;
 8003ed4:	887b      	ldrh	r3, [r7, #2]
 8003ed6:	ee07 3a90 	vmov	s15, r3
 8003eda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eec:	ee17 3a90 	vmov	r3, s15
 8003ef0:	b29b      	uxth	r3, r3
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	ed87 0b02 	vstr	d0, [r7, #8]
 8003f08:	6078      	str	r0, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fc faba 	bl	8000484 <__aeabi_i2d>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	ec43 2b11 	vmov	d1, r2, r3
 8003f18:	ed97 0b02 	vldr	d0, [r7, #8]
 8003f1c:	f00e ff04 	bl	8012d28 <pow>
 8003f20:	eeb0 7a40 	vmov.f32	s14, s0
 8003f24:	eef0 7a60 	vmov.f32	s15, s1
    }
 8003f28:	eeb0 0a47 	vmov.f32	s0, s14
 8003f2c:	eef0 0a67 	vmov.f32	s1, s15
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <_ZN6Buzzer4beepEiii>:
 */

#include "Buzzer.hpp"

bool Buzzer::beep(int duration_ms,int freq_ms,int repetition_count)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b084      	sub	sp, #16
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	607a      	str	r2, [r7, #4]
 8003f42:	603b      	str	r3, [r7, #0]
	if (!this->busy)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	7d9b      	ldrb	r3, [r3, #22]
 8003f48:	f083 0301 	eor.w	r3, r3, #1
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d029      	beq.n	8003fa6 <_ZN6Buzzer4beepEiii+0x70>
	{
		this->busy = true;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	759a      	strb	r2, [r3, #22]

		this->counterEnd = this->msToTick(duration_ms);
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f877 	bl	8004052 <_ZN6Buzzer8msToTickEt>
 8003f64:	4603      	mov	r3, r0
 8003f66:	461a      	mov	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	825a      	strh	r2, [r3, #18]
		this->freqTick = this->msToTick(freq_ms);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	4619      	mov	r1, r3
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f86d 	bl	8004052 <_ZN6Buzzer8msToTickEt>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	819a      	strh	r2, [r3, #12]
		this->repetitions = this->freqTick * repetition_count * 2U - 1U;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	899a      	ldrh	r2, [r3, #12]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	fb12 f303 	smulbb	r3, r2, r3
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	829a      	strh	r2, [r3, #20]

		Buzz_on();
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f874 	bl	8004088 <_ZN6Buzzer7Buzz_onEv>

		return busy;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	7d9b      	ldrb	r3, [r3, #22]
 8003fa4:	e001      	b.n	8003faa <_ZN6Buzzer4beepEiii+0x74>
	}

	return busy;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	7d9b      	ldrb	r3, [r3, #22]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <_ZN6Buzzer3runEv>:

void Buzzer::run()
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
	if (this->busy)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	7d9b      	ldrb	r3, [r3, #22]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d032      	beq.n	8004028 <_ZN6Buzzer3runEv+0x76>
	{
		this->counterStart++;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	8a1b      	ldrh	r3, [r3, #16]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	821a      	strh	r2, [r3, #16]

		if ((this->repetitions > 0U) && (this->freqTick!=0U))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	8a9b      	ldrh	r3, [r3, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01c      	beq.n	8004010 <_ZN6Buzzer3runEv+0x5e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	899b      	ldrh	r3, [r3, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d018      	beq.n	8004010 <_ZN6Buzzer3runEv+0x5e>
		{
			if (!((this->counterStart/this->freqTick) % 2U))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	8a1a      	ldrh	r2, [r3, #16]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	899b      	ldrh	r3, [r3, #12]
 8003fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d103      	bne.n	8003ffc <_ZN6Buzzer3runEv+0x4a>
			{
				this->Buzz_on();
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f847 	bl	8004088 <_ZN6Buzzer7Buzz_onEv>
 8003ffa:	e002      	b.n	8004002 <_ZN6Buzzer3runEv+0x50>
			}
			else
			{
				this->Buzz_off();
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f853 	bl	80040a8 <_ZN6Buzzer8Buzz_offEv>
			}
			this->repetitions--;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8a9b      	ldrh	r3, [r3, #20]
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	829a      	strh	r2, [r3, #20]
 800400e:	e002      	b.n	8004016 <_ZN6Buzzer3runEv+0x64>
		} else
		{
			this->Buzz_off();
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f849 	bl	80040a8 <_ZN6Buzzer8Buzz_offEv>
		}

		if (this->counterStart >= this->counterEnd)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	8a1a      	ldrh	r2, [r3, #16]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	8a5b      	ldrh	r3, [r3, #18]
 800401e:	429a      	cmp	r2, r3
 8004020:	d302      	bcc.n	8004028 <_ZN6Buzzer3runEv+0x76>
		{
			this->stop();
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f804 	bl	8004030 <_ZN6Buzzer4stopEv>
		}
	}
}
 8004028:	bf00      	nop
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <_ZN6Buzzer4stopEv>:

void Buzzer::stop()
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
	this->busy = false;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	759a      	strb	r2, [r3, #22]
	this->counterStart = 0U;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	821a      	strh	r2, [r3, #16]
	this->Buzz_off();
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f82f 	bl	80040a8 <_ZN6Buzzer8Buzz_offEv>
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <_ZN6Buzzer8msToTickEt>:
{
	return busy;
}

uint16_t Buzzer::msToTick(uint16_t ms)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	460b      	mov	r3, r1
 800405c:	807b      	strh	r3, [r7, #2]
	return ms/TIM_FREQ;
 800405e:	887b      	ldrh	r3, [r7, #2]
 8004060:	ee07 3a90 	vmov	s15, r3
 8004064:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	ed93 7a02 	vldr	s14, [r3, #8]
 800406e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004076:	ee17 3a90 	vmov	r3, s15
 800407a:	b29b      	uxth	r3, r3
}
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <_ZN6Buzzer7Buzz_onEv>:

void Buzzer::Buzz_on()
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
//#if DISABLE_ALL_BEEPS == 5
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8004090:	2201      	movs	r2, #1
 8004092:	2110      	movs	r1, #16
 8004094:	4803      	ldr	r0, [pc, #12]	; (80040a4 <_ZN6Buzzer7Buzz_onEv+0x1c>)
 8004096:	f004 fd13 	bl	8008ac0 <HAL_GPIO_WritePin>
//#endif
}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40020000 	.word	0x40020000

080040a8 <_ZN6Buzzer8Buzz_offEv>:

void Buzzer::Buzz_off()
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80040b0:	2200      	movs	r2, #0
 80040b2:	2110      	movs	r1, #16
 80040b4:	4803      	ldr	r0, [pc, #12]	; (80040c4 <_ZN6Buzzer8Buzz_offEv+0x1c>)
 80040b6:	f004 fd03 	bl	8008ac0 <HAL_GPIO_WritePin>
}
 80040ba:	bf00      	nop
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40020000 	.word	0x40020000

080040c8 <_ZN7Timeout15setTimeoutValueEh>:
	uint8_t* getTimeoutCounter()
	{
		return &timeout_counter;
	}

	void setTimeoutValue(uint8_t value)
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	70fb      	strb	r3, [r7, #3]
	{
		timeout_value = value;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	78fa      	ldrb	r2, [r7, #3]
 80040d8:	709a      	strb	r2, [r3, #2]
	}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <_ZN7TimeoutC1Ev>:
class Timeout
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	701a      	strb	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	705a      	strb	r2, [r3, #1]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	709a      	strb	r2, [r3, #2]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <_ZN7FrSkyRXC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefP6Buzzerh>:
 *      Author: DragosDarie
 */

#include "FrSkyRX.hpp"

FrSkyRX::FrSkyRX(UART_HandleTypeDef *uart_port,DMA_HandleTypeDef *uart_port_dma,Buzzer *buzz,uint8_t timeout):
 800410e:	b580      	push	{r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]
 800411a:	603b      	str	r3, [r7, #0]
	currentState {FrSkyRXState::NOT_CONNECTED}
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff ffe1 	bl	80040e6 <_ZN7TimeoutC1Ev>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	220f      	movs	r2, #15
 8004128:	70da      	strb	r2, [r3, #3]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	711a      	strb	r2, [r3, #4]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
{
	FrSkyRX::uart_port = uart_port;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	609a      	str	r2, [r3, #8]
	FrSkyRX::uart_port_dma=uart_port_dma;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	60da      	str	r2, [r3, #12]
	FrSkyRX::buzz=buzz;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	611a      	str	r2, [r3, #16]

	setTimeoutValue(timeout);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	7e3a      	ldrb	r2, [r7, #24]
 800415e:	4611      	mov	r1, r2
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff ffb1 	bl	80040c8 <_ZN7Timeout15setTimeoutValueEh>
}
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <_ZN7FrSkyRX5beginEv>:

void FrSkyRX::begin()
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6898      	ldr	r0, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3314      	adds	r3, #20
 8004180:	2219      	movs	r2, #25
 8004182:	4619      	mov	r1, r3
 8004184:	f008 fe7e 	bl	800ce84 <HAL_UART_Receive_DMA>
}
 8004188:	bf00      	nop
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <_ZN7FrSkyRX6updateEv>:

void FrSkyRX::update()
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->rx_buff[0] == this->BEGIN_BIT) && (this->rx_buff[24]==this->END_BIT);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	7d1a      	ldrb	r2, [r3, #20]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	78db      	ldrb	r3, [r3, #3]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d108      	bne.n	80041b6 <_ZN7FrSkyRX6updateEv+0x26>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	791b      	ldrb	r3, [r3, #4]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d101      	bne.n	80041b6 <_ZN7FrSkyRX6updateEv+0x26>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <_ZN7FrSkyRX6updateEv+0x28>
 80041b6:	2300      	movs	r3, #0
 80041b8:	73bb      	strb	r3, [r7, #14]

	if(isPacketOk)
 80041ba:	7bbb      	ldrb	r3, [r7, #14]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d010      	beq.n	80041e2 <_ZN7FrSkyRX6updateEv+0x52>
	{
		this->updateValues();
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f964 	bl	800448e <_ZN7FrSkyRX12updateValuesEv>
		this->processStateMachine();
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f85a 	bl	8004280 <_ZN7FrSkyRX19processStateMachineEv>

		if (this->isDisconnected())
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fb1f 	bl	8004810 <_ZNK7FrSkyRX14isDisconnectedEv>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d034      	beq.n	8004242 <_ZN7FrSkyRX6updateEv+0xb2>
			this->currentState = FrSkyRXState::TIMEOUT;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2204      	movs	r2, #4
 80041dc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80041e0:	e02f      	b.n	8004242 <_ZN7FrSkyRX6updateEv+0xb2>
	}
	else if (this->wrongDataReceived==false)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d12a      	bne.n	8004242 <_ZN7FrSkyRX6updateEv+0xb2>
	{
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 80041ec:	2300      	movs	r3, #0
 80041ee:	73fb      	strb	r3, [r7, #15]
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	2b17      	cmp	r3, #23
 80041f4:	d825      	bhi.n	8004242 <_ZN7FrSkyRX6updateEv+0xb2>
		{
			if ((this->rx_buff[iter]==this->END_BIT) && (this->rx_buff[iter+1U]==this->BEGIN_BIT))
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	4413      	add	r3, r2
 80041fc:	7d1a      	ldrb	r2, [r3, #20]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	791b      	ldrb	r3, [r3, #4]
 8004202:	429a      	cmp	r2, r3
 8004204:	d119      	bne.n	800423a <_ZN7FrSkyRX6updateEv+0xaa>
 8004206:	7bfb      	ldrb	r3, [r7, #15]
 8004208:	3301      	adds	r3, #1
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	7d1a      	ldrb	r2, [r3, #20]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	78db      	ldrb	r3, [r3, #3]
 8004214:	429a      	cmp	r2, r3
 8004216:	d110      	bne.n	800423a <_ZN7FrSkyRX6updateEv+0xaa>
			{
				HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length+iter+1);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6898      	ldr	r0, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f103 0114 	add.w	r1, r3, #20
 8004222:	7bfb      	ldrb	r3, [r7, #15]
 8004224:	b29b      	uxth	r3, r3
 8004226:	331a      	adds	r3, #26
 8004228:	b29b      	uxth	r3, r3
 800422a:	461a      	mov	r2, r3
 800422c:	f008 fe2a 	bl	800ce84 <HAL_UART_Receive_DMA>
				this->wrongDataReceived = true;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				return;
 8004238:	e01e      	b.n	8004278 <_ZN7FrSkyRX6updateEv+0xe8>
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	3301      	adds	r3, #1
 800423e:	73fb      	strb	r3, [r7, #15]
 8004240:	e7d6      	b.n	80041f0 <_ZN7FrSkyRX6updateEv+0x60>
			}
		}
	}

	if (this->wrongDataReceived == true)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004248:	2b01      	cmp	r3, #1
 800424a:	d103      	bne.n	8004254 <_ZN7FrSkyRX6updateEv+0xc4>
		this->wrongDataReceived = false;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6898      	ldr	r0, [r3, #8]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3314      	adds	r3, #20
 800425c:	2219      	movs	r2, #25
 800425e:	4619      	mov	r1, r3
 8004260:	f008 fe10 	bl	800ce84 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->uart_port_dma, DMA_IT_HT);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0208 	bic.w	r2, r2, #8
 8004276:	601a      	str	r2, [r3, #0]
}
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
	...

08004280 <_ZN7FrSkyRX19processStateMachineEv>:

void FrSkyRX::processStateMachine()
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
	switch (this->currentState)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800428e:	2b04      	cmp	r3, #4
 8004290:	f200 80e3 	bhi.w	800445a <_ZN7FrSkyRX19processStateMachineEv+0x1da>
 8004294:	a201      	add	r2, pc, #4	; (adr r2, 800429c <_ZN7FrSkyRX19processStateMachineEv+0x1c>)
 8004296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429a:	bf00      	nop
 800429c:	080042b1 	.word	0x080042b1
 80042a0:	08004305 	.word	0x08004305
 80042a4:	0800433b 	.word	0x0800433b
 80042a8:	0800437f 	.word	0x0800437f
 80042ac:	08004451 	.word	0x08004451
	{
	case FrSkyRXState::NOT_CONNECTED:
		if ((this->lu == 0U) && (this->throttle < 300U))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d11b      	bne.n	80042f2 <_ZN7FrSkyRX19processStateMachineEv+0x72>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80042c0:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8004464 <_ZN7FrSkyRX19processStateMachineEv+0x1e4>
 80042c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042cc:	d511      	bpl.n	80042f2 <_ZN7FrSkyRX19processStateMachineEv+0x72>
		{
			this->currentState = FrSkyRXState::CONNECTED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			buzz->stop();
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff fea8 	bl	8004030 <_ZN6Buzzer4stopEv>
			buzz->beep(600U,100U,3U);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6918      	ldr	r0, [r3, #16]
 80042e4:	2303      	movs	r3, #3
 80042e6:	2264      	movs	r2, #100	; 0x64
 80042e8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80042ec:	f7ff fe23 	bl	8003f36 <_ZN6Buzzer4beepEiii>
		}
		else
		{
			buzz->beep(3000U,100U,2U);
		}
		break;
 80042f0:	e0b3      	b.n	800445a <_ZN7FrSkyRX19processStateMachineEv+0x1da>
			buzz->beep(3000U,100U,2U);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6918      	ldr	r0, [r3, #16]
 80042f6:	2302      	movs	r3, #2
 80042f8:	2264      	movs	r2, #100	; 0x64
 80042fa:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80042fe:	f7ff fe1a 	bl	8003f36 <_ZN6Buzzer4beepEiii>
		break;
 8004302:	e0aa      	b.n	800445a <_ZN7FrSkyRX19processStateMachineEv+0x1da>
	case FrSkyRXState::CONNECTED:
		if (this->lu == 1U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800430a:	2b01      	cmp	r3, #1
 800430c:	f040 80a2 	bne.w	8004454 <_ZN7FrSkyRX19processStateMachineEv+0x1d4>
		{
			TIM3 -> CCR1 = 3000;
 8004310:	4b55      	ldr	r3, [pc, #340]	; (8004468 <_ZN7FrSkyRX19processStateMachineEv+0x1e8>)
 8004312:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004316:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3 -> CCR2 = 3000;
 8004318:	4b53      	ldr	r3, [pc, #332]	; (8004468 <_ZN7FrSkyRX19processStateMachineEv+0x1e8>)
 800431a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800431e:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3 -> CCR3 = 3000;
 8004320:	4b51      	ldr	r3, [pc, #324]	; (8004468 <_ZN7FrSkyRX19processStateMachineEv+0x1e8>)
 8004322:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004326:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3 -> CCR4 = 3000;
 8004328:	4b4f      	ldr	r3, [pc, #316]	; (8004468 <_ZN7FrSkyRX19processStateMachineEv+0x1e8>)
 800432a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800432e:	641a      	str	r2, [r3, #64]	; 0x40
			this->currentState = FrSkyRXState::ARMED;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		}
		break;
 8004338:	e08c      	b.n	8004454 <_ZN7FrSkyRX19processStateMachineEv+0x1d4>
	case FrSkyRXState::ARMED:
		if (this->lu == 2U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8004340:	2b02      	cmp	r3, #2
 8004342:	f040 8089 	bne.w	8004458 <_ZN7FrSkyRX19processStateMachineEv+0x1d8>
		{
			TIM3 -> CCR1 = 3300;
 8004346:	4b48      	ldr	r3, [pc, #288]	; (8004468 <_ZN7FrSkyRX19processStateMachineEv+0x1e8>)
 8004348:	f640 42e4 	movw	r2, #3300	; 0xce4
 800434c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3 -> CCR2 = 3300;
 800434e:	4b46      	ldr	r3, [pc, #280]	; (8004468 <_ZN7FrSkyRX19processStateMachineEv+0x1e8>)
 8004350:	f640 42e4 	movw	r2, #3300	; 0xce4
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3 -> CCR3 = 3300;
 8004356:	4b44      	ldr	r3, [pc, #272]	; (8004468 <_ZN7FrSkyRX19processStateMachineEv+0x1e8>)
 8004358:	f640 42e4 	movw	r2, #3300	; 0xce4
 800435c:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3 -> CCR4 = 3300;
 800435e:	4b42      	ldr	r3, [pc, #264]	; (8004468 <_ZN7FrSkyRX19processStateMachineEv+0x1e8>)
 8004360:	f640 42e4 	movw	r2, #3300	; 0xce4
 8004364:	641a      	str	r2, [r3, #64]	; 0x40
			buzz->beep(200U,100U,1U);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6918      	ldr	r0, [r3, #16]
 800436a:	2301      	movs	r3, #1
 800436c:	2264      	movs	r2, #100	; 0x64
 800436e:	21c8      	movs	r1, #200	; 0xc8
 8004370:	f7ff fde1 	bl	8003f36 <_ZN6Buzzer4beepEiii>
			this->currentState = FrSkyRXState::READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2203      	movs	r2, #3
 8004378:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		}
		break;
 800437c:	e06c      	b.n	8004458 <_ZN7FrSkyRX19processStateMachineEv+0x1d8>
	case FrSkyRXState::READY:
		target_roll = -static_cast<float>(mid_position - raw_roll) * roll_scaleFactor;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8004384:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 8004388:	ee07 3a90 	vmov	s15, r3
 800438c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004390:	eef1 7a67 	vneg.f32	s15, s15
 8004394:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800446c <_ZN7FrSkyRX19processStateMachineEv+0x1ec>
 8004398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		target_pitch = static_cast<float>(mid_position - raw_pitch) * pitch_scaleFactor;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80043a8:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 80043ac:	ee07 3a90 	vmov	s15, r3
 80043b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043b4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800446c <_ZN7FrSkyRX19processStateMachineEv+0x1ec>
 80043b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
		target_yaw = static_cast<float>(mid_position - raw_yaw) * yaw_scaleFactor;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80043c8:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 80043cc:	ee07 3a90 	vmov	s15, r3
 80043d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043d4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004470 <_ZN7FrSkyRX19processStateMachineEv+0x1f0>
 80043d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

		target_roll = ((target_roll > 2.0F) || (target_roll < -2.0F)) ? target_roll : 0.0F;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80043e8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80043ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f4:	dc09      	bgt.n	800440a <_ZN7FrSkyRX19processStateMachineEv+0x18a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80043fc:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8004400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004408:	d502      	bpl.n	8004410 <_ZN7FrSkyRX19processStateMachineEv+0x190>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	e001      	b.n	8004414 <_ZN7FrSkyRX19processStateMachineEv+0x194>
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6713      	str	r3, [r2, #112]	; 0x70
		target_pitch = ((target_pitch > 2.0F) || (target_pitch < -2.0F)) ? target_pitch : 0.0F;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800441e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004422:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800442a:	dc09      	bgt.n	8004440 <_ZN7FrSkyRX19processStateMachineEv+0x1c0>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004432:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8004436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800443a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443e:	d502      	bpl.n	8004446 <_ZN7FrSkyRX19processStateMachineEv+0x1c6>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004444:	e001      	b.n	800444a <_ZN7FrSkyRX19processStateMachineEv+0x1ca>
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6753      	str	r3, [r2, #116]	; 0x74
		break;
 800444e:	e004      	b.n	800445a <_ZN7FrSkyRX19processStateMachineEv+0x1da>
	case FrSkyRXState::TIMEOUT:
		break;
 8004450:	bf00      	nop
 8004452:	e002      	b.n	800445a <_ZN7FrSkyRX19processStateMachineEv+0x1da>
		break;
 8004454:	bf00      	nop
 8004456:	e000      	b.n	800445a <_ZN7FrSkyRX19processStateMachineEv+0x1da>
		break;
 8004458:	bf00      	nop
	}
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	43960000 	.word	0x43960000
 8004468:	40000400 	.word	0x40000400
 800446c:	3c23d70a 	.word	0x3c23d70a
 8004470:	3a83126f 	.word	0x3a83126f

08004474 <_ZNK7FrSkyRX15getCurrentStateEv>:

FrSkyRXState FrSkyRX::getCurrentState() const
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
	return this->currentState;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
}
 8004482:	4618      	mov	r0, r3
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <_ZN7FrSkyRX12updateValuesEv>:

void FrSkyRX::updateValues()
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
	this->channels[0]  = static_cast<int16_t>(rx_buff[1] | (rx_buff[2] << 8 & 0x07FF));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	7d5b      	ldrb	r3, [r3, #21]
 800449a:	b21a      	sxth	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	7d9b      	ldrb	r3, [r3, #22]
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	b21b      	sxth	r3, r3
 80044a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044a8:	b21b      	sxth	r3, r3
 80044aa:	4313      	orrs	r3, r2
 80044ac:	b21b      	sxth	r3, r3
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	this->channels[1]  = static_cast<int16_t>(rx_buff[2] >> 3 | (rx_buff[3] << 5 & 0x07FF));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	7d9b      	ldrb	r3, [r3, #22]
 80044ba:	08db      	lsrs	r3, r3, #3
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	b21a      	sxth	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	7ddb      	ldrb	r3, [r3, #23]
 80044c4:	015b      	lsls	r3, r3, #5
 80044c6:	b21b      	sxth	r3, r3
 80044c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044cc:	b21b      	sxth	r3, r3
 80044ce:	4313      	orrs	r3, r2
 80044d0:	b21b      	sxth	r3, r3
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	this->channels[2]  = static_cast<int16_t>(rx_buff[3] >> 6 | (rx_buff[4] << 2 | (rx_buff[5] << 10 & 0x07FF)));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	7ddb      	ldrb	r3, [r3, #23]
 80044de:	099b      	lsrs	r3, r3, #6
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	b21a      	sxth	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	7e1b      	ldrb	r3, [r3, #24]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	b219      	sxth	r1, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	7e5b      	ldrb	r3, [r3, #25]
 80044f0:	029b      	lsls	r3, r3, #10
 80044f2:	b21b      	sxth	r3, r3
 80044f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044f8:	b21b      	sxth	r3, r3
 80044fa:	430b      	orrs	r3, r1
 80044fc:	b21b      	sxth	r3, r3
 80044fe:	4313      	orrs	r3, r2
 8004500:	b21b      	sxth	r3, r3
 8004502:	b29a      	uxth	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	this->channels[3]  = static_cast<int16_t>(rx_buff[5] >> 1 | (rx_buff[6] << 7 & 0x07FF));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	7e5b      	ldrb	r3, [r3, #25]
 800450e:	085b      	lsrs	r3, r3, #1
 8004510:	b2db      	uxtb	r3, r3
 8004512:	b21a      	sxth	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	7e9b      	ldrb	r3, [r3, #26]
 8004518:	01db      	lsls	r3, r3, #7
 800451a:	b21b      	sxth	r3, r3
 800451c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004520:	b21b      	sxth	r3, r3
 8004522:	4313      	orrs	r3, r2
 8004524:	b21b      	sxth	r3, r3
 8004526:	b29a      	uxth	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	this->channels[4]  = static_cast<int16_t>(rx_buff[6] >> 4 | (rx_buff[7] << 4 & 0x07FF));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	7e9b      	ldrb	r3, [r3, #26]
 8004532:	091b      	lsrs	r3, r3, #4
 8004534:	b2db      	uxtb	r3, r3
 8004536:	b21a      	sxth	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	7edb      	ldrb	r3, [r3, #27]
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	b21b      	sxth	r3, r3
 8004540:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004544:	b21b      	sxth	r3, r3
 8004546:	4313      	orrs	r3, r2
 8004548:	b21b      	sxth	r3, r3
 800454a:	b29a      	uxth	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	this->channels[5]  = static_cast<int16_t>(rx_buff[7] >> 7 | (rx_buff[8] << 1 | (rx_buff[9] << 9 & 0x07FF)));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	7edb      	ldrb	r3, [r3, #27]
 8004556:	09db      	lsrs	r3, r3, #7
 8004558:	b2db      	uxtb	r3, r3
 800455a:	b21a      	sxth	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	7f1b      	ldrb	r3, [r3, #28]
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	b219      	sxth	r1, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	7f5b      	ldrb	r3, [r3, #29]
 8004568:	025b      	lsls	r3, r3, #9
 800456a:	b21b      	sxth	r3, r3
 800456c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004570:	b21b      	sxth	r3, r3
 8004572:	430b      	orrs	r3, r1
 8004574:	b21b      	sxth	r3, r3
 8004576:	4313      	orrs	r3, r2
 8004578:	b21b      	sxth	r3, r3
 800457a:	b29a      	uxth	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	this->channels[6]  = static_cast<int16_t>(rx_buff[9] >> 2 | (rx_buff[10] << 6 & 0x07FF));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	7f5b      	ldrb	r3, [r3, #29]
 8004586:	089b      	lsrs	r3, r3, #2
 8004588:	b2db      	uxtb	r3, r3
 800458a:	b21a      	sxth	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	7f9b      	ldrb	r3, [r3, #30]
 8004590:	019b      	lsls	r3, r3, #6
 8004592:	b21b      	sxth	r3, r3
 8004594:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004598:	b21b      	sxth	r3, r3
 800459a:	4313      	orrs	r3, r2
 800459c:	b21b      	sxth	r3, r3
 800459e:	b29a      	uxth	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	this->channels[7]  = static_cast<int16_t>(rx_buff[10] >> 5 | (rx_buff[11] << 3 & 0x07FF));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	7f9b      	ldrb	r3, [r3, #30]
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	b21a      	sxth	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	7fdb      	ldrb	r3, [r3, #31]
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	b21b      	sxth	r3, r3
 80045b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045bc:	b21b      	sxth	r3, r3
 80045be:	4313      	orrs	r3, r2
 80045c0:	b21b      	sxth	r3, r3
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

	this->channels[8]  = static_cast<int16_t>(rx_buff[12] | (rx_buff[13] << 8 & 0x07FF));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045d0:	b21a      	sxth	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045d8:	021b      	lsls	r3, r3, #8
 80045da:	b21b      	sxth	r3, r3
 80045dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045e0:	b21b      	sxth	r3, r3
 80045e2:	4313      	orrs	r3, r2
 80045e4:	b21b      	sxth	r3, r3
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	this->channels[9]  = static_cast<int16_t>(rx_buff[13] >> 3 | (rx_buff[14] << 5 & 0x07FF));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045f4:	08db      	lsrs	r3, r3, #3
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	b21a      	sxth	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004600:	015b      	lsls	r3, r3, #5
 8004602:	b21b      	sxth	r3, r3
 8004604:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004608:	b21b      	sxth	r3, r3
 800460a:	4313      	orrs	r3, r2
 800460c:	b21b      	sxth	r3, r3
 800460e:	b29a      	uxth	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	this->channels[10] = static_cast<int16_t>(rx_buff[14] >> 6 | (rx_buff[15] << 2 | (rx_buff[16] << 10 & 0x07FF)));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800461c:	099b      	lsrs	r3, r3, #6
 800461e:	b2db      	uxtb	r3, r3
 8004620:	b21a      	sxth	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	b219      	sxth	r1, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004632:	029b      	lsls	r3, r3, #10
 8004634:	b21b      	sxth	r3, r3
 8004636:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800463a:	b21b      	sxth	r3, r3
 800463c:	430b      	orrs	r3, r1
 800463e:	b21b      	sxth	r3, r3
 8004640:	4313      	orrs	r3, r2
 8004642:	b21b      	sxth	r3, r3
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	this->channels[11] = static_cast<int16_t>(rx_buff[16] >> 1 | (rx_buff[17] << 7 & 0x07FF));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004652:	085b      	lsrs	r3, r3, #1
 8004654:	b2db      	uxtb	r3, r3
 8004656:	b21a      	sxth	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800465e:	01db      	lsls	r3, r3, #7
 8004660:	b21b      	sxth	r3, r3
 8004662:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004666:	b21b      	sxth	r3, r3
 8004668:	4313      	orrs	r3, r2
 800466a:	b21b      	sxth	r3, r3
 800466c:	b29a      	uxth	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	this->channels[12] = static_cast<int16_t>(rx_buff[17] >> 4 | (rx_buff[18] << 4 & 0x07FF));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	b2db      	uxtb	r3, r3
 800467e:	b21a      	sxth	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	b21b      	sxth	r3, r3
 800468a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800468e:	b21b      	sxth	r3, r3
 8004690:	4313      	orrs	r3, r2
 8004692:	b21b      	sxth	r3, r3
 8004694:	b29a      	uxth	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	this->channels[13] = static_cast<int16_t>(rx_buff[18] >> 7 | (rx_buff[19] << 1 | (rx_buff[20] << 9 & 0x07FF)));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80046a2:	09db      	lsrs	r3, r3, #7
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	b21a      	sxth	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	b219      	sxth	r1, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046b8:	025b      	lsls	r3, r3, #9
 80046ba:	b21b      	sxth	r3, r3
 80046bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046c0:	b21b      	sxth	r3, r3
 80046c2:	430b      	orrs	r3, r1
 80046c4:	b21b      	sxth	r3, r3
 80046c6:	4313      	orrs	r3, r2
 80046c8:	b21b      	sxth	r3, r3
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	this->channels[14] = static_cast<int16_t>(rx_buff[20] >> 2 | (rx_buff[21] << 6 & 0x07FF));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046d8:	089b      	lsrs	r3, r3, #2
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	b21a      	sxth	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80046e4:	019b      	lsls	r3, r3, #6
 80046e6:	b21b      	sxth	r3, r3
 80046e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046ec:	b21b      	sxth	r3, r3
 80046ee:	4313      	orrs	r3, r2
 80046f0:	b21b      	sxth	r3, r3
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	this->channels[15] = static_cast<int16_t>(rx_buff[21] >> 5 | (rx_buff[22] << 3 & 0x07FF));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	b2db      	uxtb	r3, r3
 8004704:	b21a      	sxth	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	b21b      	sxth	r3, r3
 8004710:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004714:	b21b      	sxth	r3, r3
 8004716:	4313      	orrs	r3, r2
 8004718:	b21b      	sxth	r3, r3
 800471a:	b29a      	uxth	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

	this->throttle = static_cast<float>(channels[2]);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8004728:	ee07 3a90 	vmov	s15, r3
 800472c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	this->raw_roll = this->channels[0];
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	this->raw_pitch = this->channels[1];
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	this->raw_yaw = this->channels[3];
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	if (this->channels[4]<1000)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004760:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004764:	d204      	bcs.n	8004770 <_ZN7FrSkyRX12updateValuesEv+0x2e2>
		this->lb=0;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 800476e:	e003      	b.n	8004778 <_ZN7FrSkyRX12updateValuesEv+0x2ea>
	else
		this->lb=1;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

	if (this->channels[7]<1000)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800477e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004782:	d204      	bcs.n	800478e <_ZN7FrSkyRX12updateValuesEv+0x300>
		this->rb=0;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800478c:	e003      	b.n	8004796 <_ZN7FrSkyRX12updateValuesEv+0x308>
	else
		this->rb=1;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	if (this->channels[5]<500)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800479c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80047a0:	d204      	bcs.n	80047ac <_ZN7FrSkyRX12updateValuesEv+0x31e>
		this->lu = 0;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 80047aa:	e00f      	b.n	80047cc <_ZN7FrSkyRX12updateValuesEv+0x33e>
	else if(this->channels[5]<1500)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047b2:	f240 52db 	movw	r2, #1499	; 0x5db
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d804      	bhi.n	80047c4 <_ZN7FrSkyRX12updateValuesEv+0x336>
		this->lu = 1;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 80047c2:	e003      	b.n	80047cc <_ZN7FrSkyRX12updateValuesEv+0x33e>
	else
		this->lu = 2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

	if (this->channels[6]<500)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80047d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80047d6:	d204      	bcs.n	80047e2 <_ZN7FrSkyRX12updateValuesEv+0x354>
		this->ru = 0;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	else if(this->channels[6]<1500)
		this->ru = 1;
	else
		this->ru = 2;
}
 80047e0:	e00f      	b.n	8004802 <_ZN7FrSkyRX12updateValuesEv+0x374>
	else if(this->channels[6]<1500)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80047e8:	f240 52db 	movw	r2, #1499	; 0x5db
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d804      	bhi.n	80047fa <_ZN7FrSkyRX12updateValuesEv+0x36c>
		this->ru = 1;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
}
 80047f8:	e003      	b.n	8004802 <_ZN7FrSkyRX12updateValuesEv+0x374>
		this->ru = 2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2202      	movs	r2, #2
 80047fe:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
	...

08004810 <_ZNK7FrSkyRX14isDisconnectedEv>:

bool FrSkyRX::isDisconnected() const
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
	const bool failsafe =
			(this->rb == 0) &&
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
			(this->ru == 0) &&
			(this->lb == 0) &&
			(this->lu == 0) &&
			(this->throttle > 1800) &&
			(this->raw_roll > 1800) &&
			(this->raw_pitch > 1800) &&
 800481e:	2b00      	cmp	r3, #0
 8004820:	d12c      	bne.n	800487c <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->ru == 0) &&
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
			(this->rb == 0) &&
 8004828:	2b00      	cmp	r3, #0
 800482a:	d127      	bne.n	800487c <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->lb == 0) &&
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
			(this->ru == 0) &&
 8004832:	2b00      	cmp	r3, #0
 8004834:	d122      	bne.n	800487c <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->lu == 0) &&
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
			(this->lb == 0) &&
 800483c:	2b00      	cmp	r3, #0
 800483e:	d11d      	bne.n	800487c <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->throttle > 1800) &&
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
			(this->lu == 0) &&
 8004846:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004890 <_ZNK7FrSkyRX14isDisconnectedEv+0x80>
 800484a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800484e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004852:	dd13      	ble.n	800487c <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->raw_roll > 1800) &&
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
			(this->throttle > 1800) &&
 800485a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800485e:	d90d      	bls.n	800487c <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->raw_pitch > 1800) &&
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
			(this->raw_roll > 1800) &&
 8004866:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800486a:	d907      	bls.n	800487c <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->raw_yaw > 1800);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
			(this->raw_pitch > 1800) &&
 8004872:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004876:	d901      	bls.n	800487c <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <_ZNK7FrSkyRX14isDisconnectedEv+0x6e>
 800487c:	2300      	movs	r3, #0
	const bool failsafe =
 800487e:	73fb      	strb	r3, [r7, #15]

	return failsafe;
 8004880:	7bfb      	ldrb	r3, [r7, #15]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	44e10000 	.word	0x44e10000

08004894 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <_ZNSt15_Rb_tree_headerC1Ev>:
    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
      _M_header._M_color = _S_red;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	701a      	strb	r2, [r3, #0]
      _M_reset();
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f805 	bl	80048ca <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <_ZNSt15_Rb_tree_header8_M_resetEv>:
    _M_reset()
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
      _M_header._M_parent = 0;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	611a      	str	r2, [r3, #16]
    }
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EEC1Ev>:
      _Rb_tree() = default;
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b082      	sub	sp, #8
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4618      	mov	r0, r3
 8004902:	f000 f8cd 	bl	8004aa0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EEC1Ev>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EEC1Ev>:
      set() = default;
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff ffeb 	bl	80048f6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EEC1Ev>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4618      	mov	r0, r3
 8004936:	f000 f8c8 	bl	8004aca <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE12_Vector_implC1Ev>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4618      	mov	r0, r3
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEC1Ev>:
      vector() = default;
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff ffeb 	bl	800492a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EEC1Ev>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <_ZN4HC05C1EP20__UART_HandleTypeDef>:
 *      Author: DragosDarie
 */

#include "HC05.hpp"

HC05::HC05(UART_HandleTypeDef *uart_port)
 800495e:	b580      	push	{r7, lr}
 8004960:	b082      	sub	sp, #8
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff ffd0 	bl	8004910 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EEC1Ev>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	331c      	adds	r3, #28
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff ffe5 	bl	8004944 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEC1Ev>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3328      	adds	r3, #40	; 0x28
 800497e:	2264      	movs	r2, #100	; 0x64
 8004980:	2100      	movs	r1, #0
 8004982:	4618      	mov	r0, r3
 8004984:	f010 f832 	bl	80149ec <memset>
{
	HC05::uart_port = uart_port;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	619a      	str	r2, [r3, #24]
}
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4618      	mov	r0, r3
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <_ZN4HC054sendEv>:

void HC05::send()
{
 8004998:	b5b0      	push	{r4, r5, r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(uart_port, (uint8_t*)USART1_TxBuffer, strlen(USART1_TxBuffer));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699c      	ldr	r4, [r3, #24]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f103 0528 	add.w	r5, r3, #40	; 0x28
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3328      	adds	r3, #40	; 0x28
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fb fc0e 	bl	80001d0 <strlen>
 80049b4:	4603      	mov	r3, r0
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	461a      	mov	r2, r3
 80049ba:	4629      	mov	r1, r5
 80049bc:	4620      	mov	r0, r4
 80049be:	f008 f9e3 	bl	800cd88 <HAL_UART_Transmit_DMA>
}
 80049c2:	bf00      	nop
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bdb0      	pop	{r4, r5, r7, pc}

080049ca <_ZN4HC059addSensorEP15PrintableSensor>:
{
	HAL_UART_Transmit_DMA(uart_port, (uint8_t*)data, len);
}

void HC05::addSensor(PrintableSensor* sen)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b082      	sub	sp, #8
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	6039      	str	r1, [r7, #0]
	senList.push_back(sen);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	331c      	adds	r3, #28
 80049d8:	463a      	mov	r2, r7
 80049da:	4611      	mov	r1, r2
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 f884 	bl	8004aea <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_>
}
 80049e2:	bf00      	nop
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <_ZN4HC0519printfSensorsValuesEv>:

void HC05::printfSensorsValues()
{
 80049ec:	b590      	push	{r4, r7, lr}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
	strcpy(USART1_TxBuffer,"");
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3328      	adds	r3, #40	; 0x28
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]

	for (int i=0;i<(int)senList.size();i++)
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	331c      	adds	r3, #28
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 f895 	bl	8004b34 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4293      	cmp	r3, r2
 8004a12:	bfb4      	ite	lt
 8004a14:	2301      	movlt	r3, #1
 8004a16:	2300      	movge	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d019      	beq.n	8004a52 <_ZN4HC0519printfSensorsValuesEv+0x66>
	{
		strcat(USART1_TxBuffer,senList[i]->getSensorValues_str(senorsList));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	331c      	adds	r3, #28
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 f891 	bl	8004b54 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEixEj>
 8004a32:	4603      	mov	r3, r0
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	6812      	ldr	r2, [r2, #0]
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	4790      	blx	r2
 8004a40:	4603      	mov	r3, r0
 8004a42:	4619      	mov	r1, r3
 8004a44:	4620      	mov	r0, r4
 8004a46:	f010 f90d 	bl	8014c64 <strcat>
	for (int i=0;i<(int)senList.size();i++)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	e7d6      	b.n	8004a00 <_ZN4HC0519printfSensorsValuesEv+0x14>
	}

	strcat(USART1_TxBuffer,"\n\r");
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8004a58:	4620      	mov	r0, r4
 8004a5a:	f7fb fbb9 	bl	80001d0 <strlen>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	4423      	add	r3, r4
 8004a62:	4a06      	ldr	r2, [pc, #24]	; (8004a7c <_ZN4HC0519printfSensorsValuesEv+0x90>)
 8004a64:	8811      	ldrh	r1, [r2, #0]
 8004a66:	7892      	ldrb	r2, [r2, #2]
 8004a68:	8019      	strh	r1, [r3, #0]
 8004a6a:	709a      	strb	r2, [r3, #2]

	send();
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff ff93 	bl	8004998 <_ZN4HC054sendEv>
}
 8004a72:	bf00      	nop
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd90      	pop	{r4, r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	08014e0c 	.word	0x08014e0c

08004a80 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>:

void HC05::addSensorParameter(HC05::SENSOR_DATA_PARAMETER sen)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
	this->senorsList.insert(sen);
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	f107 0308 	add.w	r3, r7, #8
 8004a90:	463a      	mov	r2, r7
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f86e 	bl	8004b74 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE6insertERKS1_>
}
 8004a98:	bf00      	nop
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f87d 	bl	8004ba8 <_ZNSaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 f885 	bl	8004bc0 <_ZNSt20_Rb_tree_key_compareISt4lessIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff fef6 	bl	80048ac <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b082      	sub	sp, #8
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f87f 	bl	8004bd6 <_ZNSaIP15PrintableSensorEC1Ev>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 f887 	bl	8004bee <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d00c      	beq.n	8004b1a <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	4619      	mov	r1, r3
 8004b0a:	f000 f884 	bl	8004c16 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	1d1a      	adds	r2, r3, #4
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8004b18:	e008      	b.n	8004b2c <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f88e 	bl	8004c3c <_ZNSt6vectorIP15PrintableSensorSaIS1_EE3endEv>
 8004b20:	4603      	mov	r3, r0
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	4619      	mov	r1, r3
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f8b0 	bl	8004c8c <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	109b      	asrs	r3, r3, #2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
      }
 8004b68:	4618      	mov	r0, r3
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE6insertERKS1_>:
      insert(const value_type& __x)
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
	  _M_t._M_insert_unique(__x);
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	f107 0310 	add.w	r3, r7, #16
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 f93b 	bl	8004e04 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_>
	return std::pair<iterator, bool>(__p.first, __p.second);
 8004b8e:	f107 0310 	add.w	r3, r7, #16
 8004b92:	1d1a      	adds	r2, r3, #4
 8004b94:	f107 0310 	add.w	r3, r7, #16
 8004b98:	4619      	mov	r1, r3
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 f981 	bl	8004ea2 <_ZNSt4pairISt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IRSt17_Rb_tree_iteratorIS2_ERbLb1EEEOT_OT0_>
      }
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <_ZNSaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f991 	bl	8004ed8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <_ZNSt20_Rb_tree_key_compareISt4lessIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
      _Rb_tree_key_compare()
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
      { }
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <_ZNSaIP15PrintableSensorEC1Ev>:
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f985 	bl	8004eee <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorEC1Ev>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	605a      	str	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	609a      	str	r2, [r3, #8]
	{ }
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f96e 	bl	8004f04 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 f973 	bl	8004f1a <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 8004c34:	bf00      	nop
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <_ZNSt6vectorIP15PrintableSensorSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	1d1a      	adds	r2, r3, #4
 8004c48:	f107 030c 	add.w	r3, r7, #12
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 f979 	bl	8004f46 <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b082      	sub	sp, #8
 8004c62:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 f805 	bl	8004c74 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8004c6a:	4603      	mov	r3, r0
      }
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8004c7c:	2301      	movs	r3, #1
      }
 8004c7e:	4618      	mov	r0, r3
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8004c8c:	b5b0      	push	{r4, r5, r7, lr}
 8004c8e:	b08c      	sub	sp, #48	; 0x30
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8004c98:	4a59      	ldr	r2, [pc, #356]	; (8004e00 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 f962 	bl	8004f66 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc>
 8004ca2:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 f99f 	bl	8004ff4 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE5beginEv>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	617b      	str	r3, [r7, #20]
 8004cba:	f107 0214 	add.w	r2, r7, #20
 8004cbe:	f107 0308 	add.w	r3, r7, #8
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 f9a5 	bl	8005014 <_ZN9__gnu_cxxmiIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 f9b3 	bl	800503e <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj>
 8004cd8:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8004cde:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	18d5      	adds	r5, r2, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f90b 	bl	8004f04 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	f7ff ff8e 	bl	8004c16 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8004cfe:	f7ff ffae 	bl	8004c5e <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d027      	beq.n	8004d58 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8004d08:	f107 0308 	add.w	r3, r7, #8
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 f9be 	bl	800508e <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8004d12:	4603      	mov	r3, r0
 8004d14:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fd fbcf 	bl	80024bc <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8004d1e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	4621      	mov	r1, r4
 8004d24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d26:	f000 f99e 	bl	8005066 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8004d2a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8004d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2e:	3304      	adds	r3, #4
 8004d30:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8004d32:	f107 0308 	add.w	r3, r7, #8
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 f9a9 	bl	800508e <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fd fbba 	bl	80024bc <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8004d48:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8004d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d4c:	6a39      	ldr	r1, [r7, #32]
 8004d4e:	4620      	mov	r0, r4
 8004d50:	f000 f989 	bl	8005066 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8004d54:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004d56:	e026      	b.n	8004da6 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8004d58:	f107 0308 	add.w	r3, r7, #8
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 f996 	bl	800508e <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8004d62:	4603      	mov	r3, r0
 8004d64:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fd fba7 	bl	80024bc <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8004d6e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4621      	mov	r1, r4
 8004d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d76:	f000 f995 	bl	80050a4 <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8004d7a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	3304      	adds	r3, #4
 8004d80:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8004d82:	f107 0308 	add.w	r3, r7, #8
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 f981 	bl	800508e <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fd fb92 	bl	80024bc <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8004d98:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8004d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d9c:	6a39      	ldr	r1, [r7, #32]
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f000 f980 	bl	80050a4 <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8004da4:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8004da6:	f7ff ff5a 	bl	8004c5e <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>
 8004daa:	4603      	mov	r3, r0
 8004dac:	f083 0301 	eor.w	r3, r3, #1
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d009      	beq.n	8004dca <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fd fb7f 	bl	80024bc <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	6a39      	ldr	r1, [r7, #32]
 8004dc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dc6:	f7fd fb84 	bl	80024d2 <_ZSt8_DestroyIPP15PrintableSensorS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8004dca:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dda:	f7fd fbc8 	bl	800256e <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004de8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	441a      	add	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	609a      	str	r2, [r3, #8]
    }
 8004df6:	bf00      	nop
 8004df8:	3730      	adds	r7, #48	; 0x30
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	08014e10 	.word	0x08014e10

08004e04 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004e04:	b5b0      	push	{r4, r5, r7, lr}
 8004e06:	b08e      	sub	sp, #56	; 0x38
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
 8004e10:	f107 031c 	add.w	r3, r7, #28
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fe ff5b 	bl	8003cd2 <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	f107 0314 	add.w	r3, r7, #20
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 f956 	bl	80050d6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_>
      if (__res.second)
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d022      	beq.n	8004e76 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_+0x72>
	  _Alloc_node __an(*this);
 8004e30:	f107 0310 	add.w	r3, r7, #16
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 f9d2 	bl	80051e0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeC1ERS7_>
	  return _Res(_M_insert_(__res.first, __res.second,
 8004e3c:	697c      	ldr	r4, [r7, #20]
 8004e3e:	69bd      	ldr	r5, [r7, #24]
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f9dc 	bl	80051fe <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8004e46:	4602      	mov	r2, r0
 8004e48:	f107 0310 	add.w	r3, r7, #16
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	462a      	mov	r2, r5
 8004e52:	4621      	mov	r1, r4
 8004e54:	68b8      	ldr	r0, [r7, #8]
 8004e56:	f000 f9dd 	bl	8005214 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	623b      	str	r3, [r7, #32]
		      true);
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e64:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8004e68:	f107 0320 	add.w	r3, r7, #32
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 fa19 	bl	80052a6 <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>
    }
 8004e74:	e011      	b.n	8004e9a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_+0x96>
      return _Res(iterator(__res.first), false);
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fe ff0a 	bl	8003c98 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8004e84:	2300      	movs	r3, #0
 8004e86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004e8a:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8004e8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e92:	4619      	mov	r1, r3
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 fa06 	bl	80052a6 <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>
    }
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	3730      	adds	r7, #48	; 0x30
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bdb0      	pop	{r4, r5, r7, pc}

08004ea2 <_ZNSt4pairISt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IRSt17_Rb_tree_iteratorIS2_ERbLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8004ea2:	b590      	push	{r4, r7, lr}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8004eae:	68fc      	ldr	r4, [r7, #12]
 8004eb0:	68b8      	ldr	r0, [r7, #8]
 8004eb2:	f000 fa11 	bl	80052d8 <_ZSt7forwardIRSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS5_E4typeE>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f7fe fe26 	bl	8003b0c <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 fa14 	bl	80052ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	781a      	ldrb	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	711a      	strb	r2, [r3, #4]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd90      	pop	{r4, r7, pc}

08004ed8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorEC1Ev>:
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004f1a:	b590      	push	{r4, r7, lr}
 8004f1c:	b085      	sub	sp, #20
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff ffec 	bl	8004f04 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	681c      	ldr	r4, [r3, #0]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4619      	mov	r1, r3
 8004f34:	2004      	movs	r0, #4
 8004f36:	f7ff fcad 	bl	8004894 <_ZnwjPv>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	601c      	str	r4, [r3, #0]
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd90      	pop	{r4, r7, pc}

08004f46 <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8004f66:	b590      	push	{r4, r7, lr}
 8004f68:	b087      	sub	sp, #28
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 f9c6 	bl	8005304 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 8004f78:	4604      	mov	r4, r0
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f7ff fdda 	bl	8004b34 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 8004f80:	4603      	mov	r3, r0
 8004f82:	1ae2      	subs	r2, r4, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	bf34      	ite	cc
 8004f8a:	2301      	movcc	r3, #1
 8004f8c:	2300      	movcs	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f00d fe12 	bl	8012bbe <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f7ff fdca 	bl	8004b34 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f7ff fdc6 	bl	8004b34 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	613b      	str	r3, [r7, #16]
 8004fac:	f107 0208 	add.w	r2, r7, #8
 8004fb0:	f107 0310 	add.w	r3, r7, #16
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 f9b5 	bl	8005326 <_ZSt3maxIjERKT_S2_S2_>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4423      	add	r3, r4
 8004fc2:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f7ff fdb5 	bl	8004b34 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d306      	bcc.n	8004fe0 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 f996 	bl	8005304 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d904      	bls.n	8004fea <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x84>
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f98f 	bl	8005304 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	e000      	b.n	8004fec <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x86>
 8004fea:	697b      	ldr	r3, [r7, #20]
      }
 8004fec:	4618      	mov	r0, r3
 8004fee:	371c      	adds	r7, #28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd90      	pop	{r4, r7, pc}

08004ff4 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	f107 030c 	add.w	r3, r7, #12
 8005002:	4611      	mov	r1, r2
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff ff9e 	bl	8004f46 <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <_ZN9__gnu_cxxmiIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005014:	b590      	push	{r4, r7, lr}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f835 	bl	800508e <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8005024:	4603      	mov	r3, r0
 8005026:	681c      	ldr	r4, [r3, #0]
 8005028:	6838      	ldr	r0, [r7, #0]
 800502a:	f000 f830 	bl	800508e <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 800502e:	4603      	mov	r3, r0
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	1ae3      	subs	r3, r4, r3
 8005034:	109b      	asrs	r3, r3, #2
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	bd90      	pop	{r4, r7, pc}

0800503e <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800503e:	b580      	push	{r7, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d006      	beq.n	800505c <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj+0x1e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6839      	ldr	r1, [r7, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f000 f97b 	bl	800534e <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8allocateERS2_j>
 8005058:	4603      	mov	r3, r0
 800505a:	e000      	b.n	800505e <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj+0x20>
 800505c:	2300      	movs	r3, #0
      }
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8005066:	b590      	push	{r4, r7, lr}
 8005068:	b087      	sub	sp, #28
 800506a:	af02      	add	r7, sp, #8
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	607a      	str	r2, [r7, #4]
 8005072:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8005074:	f88d 4000 	strb.w	r4, [sp]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f974 	bl	800536c <_ZNSt6vectorIP15PrintableSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8005084:	4603      	mov	r3, r0
      }
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	bd90      	pop	{r4, r7, pc}

0800508e <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4618      	mov	r0, r3
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80050a4:	b590      	push	{r4, r7, lr}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 f96c 	bl	8005390 <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>
 80050b8:	4604      	mov	r4, r0
 80050ba:	68b8      	ldr	r0, [r7, #8]
 80050bc:	f000 f968 	bl	8005390 <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>
 80050c0:	4601      	mov	r1, r0
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	4620      	mov	r0, r4
 80050c8:	f000 f971 	bl	80053ae <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP15PrintableSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80050cc:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd90      	pop	{r4, r7, pc}

080050d6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80050d6:	b590      	push	{r4, r7, lr}
 80050d8:	b08b      	sub	sp, #44	; 0x2c
 80050da:	af00      	add	r7, sp, #0
 80050dc:	60f8      	str	r0, [r7, #12]
 80050de:	60b9      	str	r1, [r7, #8]
 80050e0:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80050e2:	68b8      	ldr	r0, [r7, #8]
 80050e4:	f7fd f9b9 	bl	800245a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>
 80050e8:	4603      	mov	r3, r0
 80050ea:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80050ec:	68b8      	ldr	r0, [r7, #8]
 80050ee:	f7fe fd2e 	bl	8003b4e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 80050f2:	4603      	mov	r3, r0
 80050f4:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80050f6:	2301      	movs	r3, #1
 80050f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d020      	beq.n	8005144 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x6e>
	  __y = __x;
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8005106:	68bc      	ldr	r4, [r7, #8]
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	4618      	mov	r0, r3
 800510c:	f7fe fdb1 	bl	8003c72 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 8005110:	4603      	mov	r3, r0
 8005112:	461a      	mov	r2, r3
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	4620      	mov	r0, r4
 8005118:	f7fe fd87 	bl	8003c2a <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8005122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005126:	2b00      	cmp	r3, #0
 8005128:	d005      	beq.n	8005136 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x60>
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	4618      	mov	r0, r3
 800512e:	f7fd f9f5 	bl	800251c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>
 8005132:	4603      	mov	r3, r0
 8005134:	e004      	b.n	8005140 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x6a>
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	4618      	mov	r0, r3
 800513a:	f7fd f9e3 	bl	8002504 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>
 800513e:	4603      	mov	r3, r0
 8005140:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8005142:	e7db      	b.n	80050fc <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x26>
      iterator __j = iterator(__y);
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	f107 0310 	add.w	r3, r7, #16
 800514a:	4611      	mov	r1, r2
 800514c:	4618      	mov	r0, r3
 800514e:	f7fe fda3 	bl	8003c98 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8005152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01d      	beq.n	8005196 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xc0>
	  if (__j == begin())
 800515a:	68b8      	ldr	r0, [r7, #8]
 800515c:	f000 f938 	bl	80053d0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE5beginEv>
 8005160:	4603      	mov	r3, r0
 8005162:	61fb      	str	r3, [r7, #28]
 8005164:	f107 021c 	add.w	r2, r7, #28
 8005168:	f107 0310 	add.w	r3, r7, #16
 800516c:	4611      	mov	r1, r2
 800516e:	4618      	mov	r0, r3
 8005170:	f7fe fd3b 	bl	8003bea <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d008      	beq.n	800518c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xb6>
	    return _Res(__x, __y);
 800517a:	f107 0214 	add.w	r2, r7, #20
 800517e:	f107 0318 	add.w	r3, r7, #24
 8005182:	4619      	mov	r1, r3
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f934 	bl	80053f2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>
 800518a:	e025      	b.n	80051d8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x102>
	    --__j;
 800518c:	f107 0310 	add.w	r3, r7, #16
 8005190:	4618      	mov	r0, r3
 8005192:	f000 f947 	bl	8005424 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8005196:	68bc      	ldr	r4, [r7, #8]
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	4618      	mov	r0, r3
 800519c:	f7fe fd39 	bl	8003c12 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80051a0:	4603      	mov	r3, r0
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	4619      	mov	r1, r3
 80051a6:	4620      	mov	r0, r4
 80051a8:	f7fe fd3f 	bl	8003c2a <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d008      	beq.n	80051c4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xee>
	return _Res(__x, __y);
 80051b2:	f107 0214 	add.w	r2, r7, #20
 80051b6:	f107 0318 	add.w	r3, r7, #24
 80051ba:	4619      	mov	r1, r3
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f918 	bl	80053f2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>
 80051c2:	e009      	b.n	80051d8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x102>
      return _Res(__j._M_node, 0);
 80051c4:	2300      	movs	r3, #0
 80051c6:	623b      	str	r3, [r7, #32]
 80051c8:	f107 0220 	add.w	r2, r7, #32
 80051cc:	f107 0310 	add.w	r3, r7, #16
 80051d0:	4619      	mov	r1, r3
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 f937 	bl	8005446 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	372c      	adds	r7, #44	; 0x2c
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd90      	pop	{r4, r7, pc}

080051e0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeC1ERS7_>:
	_Alloc_node(_Rb_tree& __t)
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4618      	mov	r0, r3
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4618      	mov	r0, r3
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005214:	b5b0      	push	{r4, r5, r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
 8005220:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d11a      	bne.n	800525e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f7fe fc90 	bl	8003b4e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 800522e:	4602      	mov	r2, r0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8005236:	68fc      	ldr	r4, [r7, #12]
 8005238:	f107 0310 	add.w	r3, r7, #16
 800523c:	6839      	ldr	r1, [r7, #0]
 800523e:	4618      	mov	r0, r3
 8005240:	f7fe fd47 	bl	8003cd2 <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 8005244:	4605      	mov	r5, r0
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fe fce3 	bl	8003c12 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800524c:	4603      	mov	r3, r0
 800524e:	461a      	mov	r2, r3
 8005250:	4629      	mov	r1, r5
 8005252:	4620      	mov	r0, r4
 8005254:	f7fe fce9 	bl	8003c2a <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4e>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x50>
 8005262:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8005264:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8005266:	6838      	ldr	r0, [r7, #0]
 8005268:	f7ff ffc9 	bl	80051fe <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 800526c:	4603      	mov	r3, r0
 800526e:	4619      	mov	r1, r3
 8005270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005272:	f000 f8fe 	bl	8005472 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeclIRKS1_EEPSt13_Rb_tree_nodeIS1_EOT_>
 8005276:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800527c:	7ff8      	ldrb	r0, [r7, #31]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	69b9      	ldr	r1, [r7, #24]
 8005282:	f00d fc3e 	bl	8012b02 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	1c5a      	adds	r2, r3, #1
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8005290:	f107 0314 	add.w	r3, r7, #20
 8005294:	69b9      	ldr	r1, [r7, #24]
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe fcfe 	bl	8003c98 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 800529c:	697b      	ldr	r3, [r7, #20]
      }
 800529e:	4618      	mov	r0, r3
 80052a0:	3720      	adds	r7, #32
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bdb0      	pop	{r4, r5, r7, pc}

080052a6 <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b084      	sub	sp, #16
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80052b2:	68b8      	ldr	r0, [r7, #8]
 80052b4:	f000 f8f1 	bl	800549a <_ZSt7forwardISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS4_E4typeE>
 80052b8:	4602      	mov	r2, r0
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6812      	ldr	r2, [r2, #0]
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f8f5 	bl	80054b0 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80052c6:	4603      	mov	r3, r0
 80052c8:	781a      	ldrb	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	711a      	strb	r2, [r3, #4]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <_ZSt7forwardIRSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4618      	mov	r0, r3
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4618      	mov	r0, r3
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4618      	mov	r0, r3
 8005310:	f000 f8f3 	bl	80054fa <_ZNKSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8005314:	4603      	mov	r3, r0
 8005316:	4618      	mov	r0, r3
 8005318:	f000 f8d5 	bl	80054c6 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_max_sizeERKS2_>
 800531c:	4603      	mov	r3, r0
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	429a      	cmp	r2, r3
 800533a:	d201      	bcs.n	8005340 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	e000      	b.n	8005342 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8005340:	687b      	ldr	r3, [r7, #4]
    }
 8005342:	4618      	mov	r0, r3
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005358:	2200      	movs	r2, #0
 800535a:	6839      	ldr	r1, [r7, #0]
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f8d7 	bl	8005510 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv>
 8005362:	4603      	mov	r3, r0
 8005364:	4618      	mov	r0, r3
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <_ZNSt6vectorIP15PrintableSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	68b9      	ldr	r1, [r7, #8]
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 f8e3 	bl	800554c <_ZSt12__relocate_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8005386:	4603      	mov	r3, r0
      }
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8005398:	f107 030c 	add.w	r3, r7, #12
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 f8f1 	bl	8005586 <_ZNSt13move_iteratorIPP15PrintableSensorEC1ES2_>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP15PrintableSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	607a      	str	r2, [r7, #4]
 80053ba:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	68b9      	ldr	r1, [r7, #8]
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 f8f2 	bl	80055aa <_ZSt18uninitialized_copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>
 80053c6:	4603      	mov	r3, r0
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	f107 030c 	add.w	r3, r7, #12
 80053e0:	4611      	mov	r1, r2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fe fc58 	bl	8003c98 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80053fe:	68b8      	ldr	r0, [r7, #8]
 8005400:	f000 f8e5 	bl	80055ce <_ZSt7forwardIRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005404:	4603      	mov	r3, r0
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f8e9 	bl	80055e4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8005412:	4603      	mov	r3, r0
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	605a      	str	r2, [r3, #4]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f00d fb64 	bl	8012afe <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8005436:	4602      	mov	r2, r0
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	601a      	str	r2, [r3, #0]
	return *this;
 800543c:	687b      	ldr	r3, [r7, #4]
      }
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	60f8      	str	r0, [r7, #12]
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8005452:	68b8      	ldr	r0, [r7, #8]
 8005454:	f000 f8c6 	bl	80055e4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8005458:	4603      	mov	r3, r0
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	605a      	str	r2, [r3, #4]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeclIRKS1_EEPSt13_Rb_tree_nodeIS1_EOT_>:
	  operator()(_Arg&& __arg) const
 8005472:	b590      	push	{r4, r7, lr}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681c      	ldr	r4, [r3, #0]
 8005480:	6838      	ldr	r0, [r7, #0]
 8005482:	f7ff febc 	bl	80051fe <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8005486:	4603      	mov	r3, r0
 8005488:	4619      	mov	r1, r3
 800548a:	4620      	mov	r0, r4
 800548c:	f000 f8b5 	bl	80055fa <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_create_nodeIJRKS1_EEEPSt13_Rb_tree_nodeIS1_EDpOT_>
 8005490:	4603      	mov	r3, r0
 8005492:	4618      	mov	r0, r3
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	bd90      	pop	{r4, r7, pc}

0800549a <_ZSt7forwardISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4618      	mov	r0, r3
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b084      	sub	sp, #16
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 80054ce:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80054d2:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f8a7 	bl	8005628 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8max_sizeERKS2_>
 80054da:	4603      	mov	r3, r0
 80054dc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80054de:	f107 0208 	add.w	r2, r7, #8
 80054e2:	f107 030c 	add.w	r3, r7, #12
 80054e6:	4611      	mov	r1, r2
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 f8a9 	bl	8005640 <_ZSt3minIjERKT_S2_S2_>
 80054ee:	4603      	mov	r3, r0
 80054f0:	681b      	ldr	r3, [r3, #0]
      }
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <_ZNKSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4618      	mov	r0, r3
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f8a3 	bl	8005668 <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>
 8005522:	4602      	mov	r2, r0
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4293      	cmp	r3, r2
 8005528:	bf8c      	ite	hi
 800552a:	2301      	movhi	r3, #1
 800552c:	2300      	movls	r3, #0
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005534:	f00d fb40 	bl	8012bb8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4618      	mov	r0, r3
 800553e:	f00d fa87 	bl	8012a50 <_Znwj>
 8005542:	4603      	mov	r3, r0
      }
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <_ZSt12__relocate_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800554c:	b5b0      	push	{r4, r5, r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 f890 	bl	8005680 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8005560:	4604      	mov	r4, r0
 8005562:	68b8      	ldr	r0, [r7, #8]
 8005564:	f000 f88c 	bl	8005680 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8005568:	4605      	mov	r5, r0
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f888 	bl	8005680 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8005570:	4602      	mov	r2, r0
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	4629      	mov	r1, r5
 8005576:	4620      	mov	r0, r4
 8005578:	f000 f88d 	bl	8005696 <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800557c:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bdb0      	pop	{r4, r5, r7, pc}

08005586 <_ZNSt13move_iteratorIPP15PrintableSensorEC1ES2_>:
      move_iterator(iterator_type __i)
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8005590:	463b      	mov	r3, r7
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f89d 	bl	80056d2 <_ZSt4moveIRPP15PrintableSensorEONSt16remove_referenceIT_E4typeEOS5_>
 8005598:	4603      	mov	r3, r0
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <_ZSt18uninitialized_copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b086      	sub	sp, #24
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80055b6:	2301      	movs	r3, #1
 80055b8:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 f892 	bl	80056e8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP15PrintableSensorES5_EET0_T_S8_S7_>
 80055c4:	4603      	mov	r3, r0
    }
 80055c6:	4618      	mov	r0, r3
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <_ZSt7forwardIRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4618      	mov	r0, r3
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_create_nodeIJRKS1_EEEPSt13_Rb_tree_nodeIS1_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f87f 	bl	8005708 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_get_nodeEv>
 800560a:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800560c:	6838      	ldr	r0, [r7, #0]
 800560e:	f7ff fdf6 	bl	80051fe <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8005612:	4603      	mov	r3, r0
 8005614:	461a      	mov	r2, r3
 8005616:	68f9      	ldr	r1, [r7, #12]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f886 	bl	800572a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE17_M_construct_nodeIJRKS1_EEEvPSt13_Rb_tree_nodeIS1_EDpOT_>
	  return __tmp;
 800561e:	68fb      	ldr	r3, [r7, #12]
	}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f89a 	bl	800576a <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE8max_sizeEv>
 8005636:	4603      	mov	r3, r0
      }
 8005638:	4618      	mov	r0, r3
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d201      	bcs.n	800565a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	e000      	b.n	800565c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800565a:	687b      	ldr	r3, [r7, #4]
    }
 800565c:	4618      	mov	r0, r3
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005670:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8005674:	4618      	mov	r0, r3
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4618      	mov	r0, r3
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8005696:	b580      	push	{r7, lr}
 8005698:	b086      	sub	sp, #24
 800569a:	af00      	add	r7, sp, #0
 800569c:	60f8      	str	r0, [r7, #12]
 800569e:	60b9      	str	r1, [r7, #8]
 80056a0:	607a      	str	r2, [r7, #4]
 80056a2:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	109b      	asrs	r3, r3, #2
 80056ac:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	dd06      	ble.n	80056c2 <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	461a      	mov	r2, r3
 80056ba:	68f9      	ldr	r1, [r7, #12]
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f00f f97b 	bl	80149b8 <memmove>
      return __result + __count;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	4413      	add	r3, r2
    }
 80056ca:	4618      	mov	r0, r3
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <_ZSt4moveIRPP15PrintableSensorEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP15PrintableSensorES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f842 	bl	8005782 <_ZSt4copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>
 80056fe:	4603      	mov	r3, r0
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_get_nodeEv>:
      _M_get_node()
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7fc ff98 	bl	8002646 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 8005716:	4603      	mov	r3, r0
 8005718:	2101      	movs	r1, #1
 800571a:	4618      	mov	r0, r3
 800571c:	f000 f849 	bl	80057b2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE8allocateERS4_j>
 8005720:	4603      	mov	r3, r0
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE17_M_construct_nodeIJRKS1_EEEvPSt13_Rb_tree_nodeIS1_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800572a:	b5b0      	push	{r4, r5, r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	4619      	mov	r1, r3
 800573a:	2014      	movs	r0, #20
 800573c:	f7ff f8aa 	bl	8004894 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f7fc ff80 	bl	8002646 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 8005746:	4604      	mov	r4, r0
 8005748:	68b8      	ldr	r0, [r7, #8]
 800574a:	f7fc ff87 	bl	800265c <_ZNSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>
 800574e:	4605      	mov	r5, r0
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff fd54 	bl	80051fe <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8005756:	4603      	mov	r3, r0
 8005758:	461a      	mov	r2, r3
 800575a:	4629      	mov	r1, r5
 800575c:	4620      	mov	r0, r4
 800575e:	f000 f837 	bl	80057d0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>
	}
 8005762:	bf00      	nop
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bdb0      	pop	{r4, r5, r7, pc}

0800576a <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff ff78 	bl	8005668 <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>
 8005778:	4603      	mov	r3, r0
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <_ZSt4copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8005782:	b590      	push	{r4, r7, lr}
 8005784:	b085      	sub	sp, #20
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 f831 	bl	80057f6 <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8005794:	4604      	mov	r4, r0
 8005796:	68b8      	ldr	r0, [r7, #8]
 8005798:	f000 f82d 	bl	80057f6 <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800579c:	4603      	mov	r3, r0
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	4619      	mov	r1, r3
 80057a2:	4620      	mov	r0, r4
 80057a4:	f000 f838 	bl	8005818 <_ZSt13__copy_move_aILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 80057a8:	4603      	mov	r3, r0
    }
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd90      	pop	{r4, r7, pc}

080057b2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b082      	sub	sp, #8
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80057bc:	2200      	movs	r2, #0
 80057be:	6839      	ldr	r1, [r7, #0]
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f84c 	bl	800585e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv>
 80057c6:	4603      	mov	r3, r0
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7ff fd0e 	bl	80051fe <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 80057e2:	4603      	mov	r3, r0
 80057e4:	461a      	mov	r2, r3
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f859 	bl	80058a0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
	}
 80057ee:	bf00      	nop
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b082      	sub	sp, #8
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80057fe:	1d3b      	adds	r3, r7, #4
 8005800:	4618      	mov	r0, r3
 8005802:	f000 f863 	bl	80058cc <_ZNKSt13move_iteratorIPP15PrintableSensorE4baseEv>
 8005806:	4603      	mov	r3, r0
 8005808:	4618      	mov	r0, r3
 800580a:	f000 f86b 	bl	80058e4 <_ZSt12__miter_baseIPP15PrintableSensorET_S3_>
 800580e:	4603      	mov	r3, r0
 8005810:	4618      	mov	r0, r3
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <_ZSt13__copy_move_aILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8005818:	b5b0      	push	{r4, r5, r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f7ff ff2b 	bl	8005680 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 800582a:	4604      	mov	r4, r0
 800582c:	68b8      	ldr	r0, [r7, #8]
 800582e:	f7ff ff27 	bl	8005680 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8005832:	4605      	mov	r5, r0
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff ff22 	bl	8005680 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 800583c:	4603      	mov	r3, r0
 800583e:	461a      	mov	r2, r3
 8005840:	4629      	mov	r1, r5
 8005842:	4620      	mov	r0, r4
 8005844:	f000 f859 	bl	80058fa <_ZSt14__copy_move_a1ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 8005848:	4602      	mov	r2, r0
 800584a:	1d3b      	adds	r3, r7, #4
 800584c:	4611      	mov	r1, r2
 800584e:	4618      	mov	r0, r3
 8005850:	f000 f863 	bl	800591a <_ZSt12__niter_wrapIPP15PrintableSensorET_RKS3_S3_>
 8005854:	4603      	mov	r3, r0
    }
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bdb0      	pop	{r4, r5, r7, pc}

0800585e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800585e:	b580      	push	{r7, lr}
 8005860:	b084      	sub	sp, #16
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 f862 	bl	8005934 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv>
 8005870:	4602      	mov	r2, r0
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	4293      	cmp	r3, r2
 8005876:	bf8c      	ite	hi
 8005878:	2301      	movhi	r3, #1
 800587a:	2300      	movls	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005882:	f00d f999 	bl	8012bb8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4618      	mov	r0, r3
 8005892:	f00d f8dd 	bl	8012a50 <_Znwj>
 8005896:	4603      	mov	r3, r0
      }
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80058a0:	b590      	push	{r4, r7, lr}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff fca6 	bl	80051fe <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 80058b2:	4603      	mov	r3, r0
 80058b4:	681c      	ldr	r4, [r3, #0]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	4619      	mov	r1, r3
 80058ba:	2004      	movs	r0, #4
 80058bc:	f7fe ffea 	bl	8004894 <_ZnwjPv>
 80058c0:	4603      	mov	r3, r0
 80058c2:	601c      	str	r4, [r3, #0]
 80058c4:	bf00      	nop
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd90      	pop	{r4, r7, pc}

080058cc <_ZNKSt13move_iteratorIPP15PrintableSensorE4baseEv>:
      base() const
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <_ZSt12__miter_baseIPP15PrintableSensorET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
    { return __it; }
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4618      	mov	r0, r3
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <_ZSt14__copy_move_a1ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f820 	bl	8005950 <_ZSt14__copy_move_a2ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 8005910:	4603      	mov	r3, r0
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <_ZSt12__niter_wrapIPP15PrintableSensorET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	6039      	str	r1, [r7, #0]
    { return __res; }
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
	...

08005934 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800593c:	4b03      	ldr	r3, [pc, #12]	; (800594c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv+0x18>)
      }
 800593e:	4618      	mov	r0, r3
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	06666666 	.word	0x06666666

08005950 <_ZSt14__copy_move_a2ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 f805 	bl	8005970 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_>
 8005966:	4603      	mov	r3, r0
    }
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	109b      	asrs	r3, r3, #2
 8005984:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d006      	beq.n	800599a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	461a      	mov	r2, r3
 8005992:	68f9      	ldr	r1, [r7, #12]
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f00f f80f 	bl	80149b8 <memmove>
	  return __result + _Num;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	4413      	add	r3, r2
	}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b082      	sub	sp, #8
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	ed87 0a01 	vstr	s0, [r7, #4]
 80059b4:	edc7 0a00 	vstr	s1, [r7]
 80059b8:	edd7 0a00 	vldr	s1, [r7]
 80059bc:	ed97 0a01 	vldr	s0, [r7, #4]
 80059c0:	f00d fa22 	bl	8012e08 <atan2f>
 80059c4:	eef0 7a40 	vmov.f32	s15, s0
 80059c8:	eeb0 0a67 	vmov.f32	s0, s15
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b082      	sub	sp, #8
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	ed87 0a01 	vstr	s0, [r7, #4]
 80059dc:	ed97 0a01 	vldr	s0, [r7, #4]
 80059e0:	f00d fa14 	bl	8012e0c <sqrtf>
 80059e4:	eef0 7a40 	vmov.f32	s15, s0
 80059e8:	eeb0 0a67 	vmov.f32	s0, s15
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
	...

080059f4 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef>:
 *      Author: Asus
 */

#include "ICM42688P.hpp"

ICM42688P::ICM42688P(SPI_HandleTypeDef *spi_port)
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7fd fd1b 	bl	800343c <_ZN8SPI_ConnC1Ev>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fd fd26 	bl	800345c <_ZN15PrintableSensorC1Ev>
 8005a10:	4a4a      	ldr	r2, [pc, #296]	; (8005b3c <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x148>)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	4a4a      	ldr	r2, [pc, #296]	; (8005b40 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x14c>)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	605a      	str	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a41      	ldr	r2, [pc, #260]	; (8005b44 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x150>)
 8005a40:	645a      	str	r2, [r3, #68]	; 0x44
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a40      	ldr	r2, [pc, #256]	; (8005b48 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x154>)
 8005a46:	649a      	str	r2, [r3, #72]	; 0x48
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a40      	ldr	r2, [pc, #256]	; (8005b4c <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x158>)
 8005a4c:	64da      	str	r2, [r3, #76]	; 0x4c
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	661a      	str	r2, [r3, #96]	; 0x60
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f04f 0200 	mov.w	r2, #0
 8005a5c:	665a      	str	r2, [r3, #100]	; 0x64
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	669a      	str	r2, [r3, #104]	; 0x68
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	66da      	str	r2, [r3, #108]	; 0x6c
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f04f 0200 	mov.w	r2, #0
 8005a74:	671a      	str	r2, [r3, #112]	; 0x70
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	675a      	str	r2, [r3, #116]	; 0x74
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	679a      	str	r2, [r3, #120]	; 0x78
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	67da      	str	r2, [r3, #124]	; 0x7c
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f04f 0200 	mov.w	r2, #0
 8005ab2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f04f 0200 	mov.w	r2, #0
 8005abc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f04f 0200 	mov.w	r2, #0
 8005ac6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f04f 0200 	mov.w	r2, #0
 8005ad0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a1b      	ldr	r2, [pc, #108]	; (8005b50 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x15c>)
 8005ae2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1a      	ldr	r2, [pc, #104]	; (8005b54 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x160>)
 8005aea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a19      	ldr	r2, [pc, #100]	; (8005b58 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x164>)
 8005af2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a18      	ldr	r2, [pc, #96]	; (8005b5c <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x168>)
 8005afa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a17      	ldr	r2, [pc, #92]	; (8005b60 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x16c>)
 8005b02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a16      	ldr	r2, [pc, #88]	; (8005b64 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x170>)
 8005b0a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b14:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b1e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
{
	ICM42688P::spi_port = spi_port;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	08014f6c 	.word	0x08014f6c
 8005b40:	08014f80 	.word	0x08014f80
 8005b44:	42652ee1 	.word	0x42652ee1
 8005b48:	4183126f 	.word	0x4183126f
 8005b4c:	3a83126f 	.word	0x3a83126f
 8005b50:	c114cccd 	.word	0xc114cccd
 8005b54:	c134cccd 	.word	0xc134cccd
 8005b58:	40f5c28f 	.word	0x40f5c28f
 8005b5c:	45057000 	.word	0x45057000
 8005b60:	c4548000 	.word	0xc4548000
 8005b64:	4520a000 	.word	0x4520a000

08005b68 <_ZN9ICM42688P11defaultInitEv>:

bool ICM42688P::defaultInit()
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	6078      	str	r0, [r7, #4]
	if (!initAndCheck(INTF_CONFIG1,0x00,10))
 8005b70:	2300      	movs	r3, #0
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	230a      	movs	r3, #10
 8005b76:	2200      	movs	r2, #0
 8005b78:	214d      	movs	r1, #77	; 0x4d
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f89a 	bl	8005cb4 <_ZN9ICM42688P12initAndCheckEhhhb>
 8005b80:	4603      	mov	r3, r0
 8005b82:	f083 0301 	eor.w	r3, r3, #1
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <_ZN9ICM42688P11defaultInitEv+0x28>
		return false;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	e08d      	b.n	8005cac <_ZN9ICM42688P11defaultInitEv+0x144>

	SPI_write(DEVICE_CONFIG,DEVICE_CONFIG_SOFT_RESET_CONFIG);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2201      	movs	r2, #1
 8005b98:	2111      	movs	r1, #17
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	4798      	blx	r3
	HAL_Delay(20);
 8005b9e:	2014      	movs	r0, #20
 8005ba0:	f001 fcd8 	bl	8007554 <HAL_Delay>

	if (!initAndCheck(INTF_CONFIG1,0x00,10))
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	230a      	movs	r3, #10
 8005baa:	2200      	movs	r2, #0
 8005bac:	214d      	movs	r1, #77	; 0x4d
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f880 	bl	8005cb4 <_ZN9ICM42688P12initAndCheckEhhhb>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	f083 0301 	eor.w	r3, r3, #1
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <_ZN9ICM42688P11defaultInitEv+0x5c>
		return false;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	e073      	b.n	8005cac <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(INT_CONFIG0,INT_CONFIG0_UI_DRDY_INT_CLEAR_ONSENSORREGREAD,10))
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	230a      	movs	r3, #10
 8005bca:	2220      	movs	r2, #32
 8005bcc:	2163      	movs	r1, #99	; 0x63
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f870 	bl	8005cb4 <_ZN9ICM42688P12initAndCheckEhhhb>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f083 0301 	eor.w	r3, r3, #1
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <_ZN9ICM42688P11defaultInitEv+0x7c>
		return false;
 8005be0:	2300      	movs	r3, #0
 8005be2:	e063      	b.n	8005cac <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(INT_CONFIG,INT_CONFIG_INT1_POLARITY_ACTIVE_HIGH|INT_CONFIG_INT1_DRIVE_CIRCUIT_PUSH_PULL,10))
 8005be4:	2300      	movs	r3, #0
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	230a      	movs	r3, #10
 8005bea:	2203      	movs	r2, #3
 8005bec:	2114      	movs	r1, #20
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f860 	bl	8005cb4 <_ZN9ICM42688P12initAndCheckEhhhb>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	f083 0301 	eor.w	r3, r3, #1
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <_ZN9ICM42688P11defaultInitEv+0x9c>
		return false;
 8005c00:	2300      	movs	r3, #0
 8005c02:	e053      	b.n	8005cac <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(INT_SOURCE0,INT_SOURCE0_UI_DRDY_INT1_EN,10))
 8005c04:	2300      	movs	r3, #0
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	230a      	movs	r3, #10
 8005c0a:	2208      	movs	r2, #8
 8005c0c:	2165      	movs	r1, #101	; 0x65
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f850 	bl	8005cb4 <_ZN9ICM42688P12initAndCheckEhhhb>
 8005c14:	4603      	mov	r3, r0
 8005c16:	f083 0301 	eor.w	r3, r3, #1
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <_ZN9ICM42688P11defaultInitEv+0xbc>
		return false;
 8005c20:	2300      	movs	r3, #0
 8005c22:	e043      	b.n	8005cac <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(GYRO_CONFIG_STATIC2,0b11,10))
 8005c24:	2300      	movs	r3, #0
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	230a      	movs	r3, #10
 8005c2a:	2203      	movs	r2, #3
 8005c2c:	210b      	movs	r1, #11
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f840 	bl	8005cb4 <_ZN9ICM42688P12initAndCheckEhhhb>
 8005c34:	4603      	mov	r3, r0
 8005c36:	f083 0301 	eor.w	r3, r3, #1
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <_ZN9ICM42688P11defaultInitEv+0xdc>
		return false;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e033      	b.n	8005cac <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(GYRO_CONFIG0,GYRO_CONFIG0_GYRO_ODR_1KHZ|GYRO_CONFIG0_GYRO_FS_SEL_2000DPS,10))
 8005c44:	2300      	movs	r3, #0
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	230a      	movs	r3, #10
 8005c4a:	2206      	movs	r2, #6
 8005c4c:	214f      	movs	r1, #79	; 0x4f
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f830 	bl	8005cb4 <_ZN9ICM42688P12initAndCheckEhhhb>
 8005c54:	4603      	mov	r3, r0
 8005c56:	f083 0301 	eor.w	r3, r3, #1
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <_ZN9ICM42688P11defaultInitEv+0xfc>
		return false;
 8005c60:	2300      	movs	r3, #0
 8005c62:	e023      	b.n	8005cac <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(ACCEL_CONFIG0,ACCEL_CONFIG0_ACCEL_ODR_1KHZ|ACCEL_CONFIG0_ACCEL_FS_SEL_2G,10))
 8005c64:	2300      	movs	r3, #0
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	230a      	movs	r3, #10
 8005c6a:	2266      	movs	r2, #102	; 0x66
 8005c6c:	2150      	movs	r1, #80	; 0x50
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f820 	bl	8005cb4 <_ZN9ICM42688P12initAndCheckEhhhb>
 8005c74:	4603      	mov	r3, r0
 8005c76:	f083 0301 	eor.w	r3, r3, #1
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <_ZN9ICM42688P11defaultInitEv+0x11c>
		return false;
 8005c80:	2300      	movs	r3, #0
 8005c82:	e013      	b.n	8005cac <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(PWR_MGMT0,0x0F,10))
 8005c84:	2300      	movs	r3, #0
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	230a      	movs	r3, #10
 8005c8a:	220f      	movs	r2, #15
 8005c8c:	214e      	movs	r1, #78	; 0x4e
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f810 	bl	8005cb4 <_ZN9ICM42688P12initAndCheckEhhhb>
 8005c94:	4603      	mov	r3, r0
 8005c96:	f083 0301 	eor.w	r3, r3, #1
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <_ZN9ICM42688P11defaultInitEv+0x13c>
		return false;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	e003      	b.n	8005cac <_ZN9ICM42688P11defaultInitEv+0x144>

	HAL_Delay(50);
 8005ca4:	2032      	movs	r0, #50	; 0x32
 8005ca6:	f001 fc55 	bl	8007554 <HAL_Delay>

	//computeGyroDrift(1000);

	return true;
 8005caa:	2301      	movs	r3, #1
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <_ZN9ICM42688P12initAndCheckEhhhb>:

bool ICM42688P::initAndCheck(uint8_t addr,uint8_t val,uint8_t numberOfTries,bool read_only)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	70fb      	strb	r3, [r7, #3]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	70bb      	strb	r3, [r7, #2]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	707b      	strb	r3, [r7, #1]
	for (int i=0;i<numberOfTries;i++)
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	787b      	ldrb	r3, [r7, #1]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	da21      	bge.n	8005d1e <_ZN9ICM42688P12initAndCheckEhhhb+0x6a>
	{
		if (read_only==false)
 8005cda:	7e3b      	ldrb	r3, [r7, #24]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d106      	bne.n	8005cee <_ZN9ICM42688P12initAndCheckEhhhb+0x3a>
			SPI_write(addr,val);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	78ba      	ldrb	r2, [r7, #2]
 8005ce8:	78f9      	ldrb	r1, [r7, #3]
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	4798      	blx	r3
		if (SPI_read(addr)==val)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	78fa      	ldrb	r2, [r7, #3]
 8005cf8:	4611      	mov	r1, r2
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	4798      	blx	r3
 8005cfe:	4603      	mov	r3, r0
 8005d00:	461a      	mov	r2, r3
 8005d02:	78bb      	ldrb	r3, [r7, #2]
 8005d04:	4293      	cmp	r3, r2
 8005d06:	bf0c      	ite	eq
 8005d08:	2301      	moveq	r3, #1
 8005d0a:	2300      	movne	r3, #0
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <_ZN9ICM42688P12initAndCheckEhhhb+0x62>
			return true;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e004      	b.n	8005d20 <_ZN9ICM42688P12initAndCheckEhhhb+0x6c>
	for (int i=0;i<numberOfTries;i++)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	e7d9      	b.n	8005cd2 <_ZN9ICM42688P12initAndCheckEhhhb+0x1e>
	}
	return false;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* ICM42688P::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8005d28:	b590      	push	{r4, r7, lr}
 8005d2a:	b095      	sub	sp, #84	; 0x54
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	3308      	adds	r3, #8
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GX)!=senorsList.end())
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	f107 030c 	add.w	r3, r7, #12
 8005d42:	4619      	mov	r1, r3
 8005d44:	6838      	ldr	r0, [r7, #0]
 8005d46:	f7fd fe6b 	bl	8003a20 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	60bb      	str	r3, [r7, #8]
 8005d4e:	6838      	ldr	r0, [r7, #0]
 8005d50:	f7fd fe7f 	bl	8003a52 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8005d54:	4603      	mov	r3, r0
 8005d56:	613b      	str	r3, [r7, #16]
 8005d58:	f107 0210 	add.w	r2, r7, #16
 8005d5c:	f107 0308 	add.w	r3, r7, #8
 8005d60:	4611      	mov	r1, r2
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fd fe82 	bl	8003a6c <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d020      	beq.n	8005db0 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x88>
	{
		strcat(packet,toCharArray(euler_x));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f103 0408 	add.w	r4, r3, #8
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	1d1a      	adds	r2, r3, #4
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d82:	ee17 1a90 	vmov	r1, s15
 8005d86:	4610      	mov	r0, r2
 8005d88:	f7fd fb3c 	bl	8003404 <_ZN15PrintableSensor11toCharArrayEi>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	4619      	mov	r1, r3
 8005d90:	4620      	mov	r0, r4
 8005d92:	f00e ff67 	bl	8014c64 <strcat>
		strcat(packet,",");
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f103 0408 	add.w	r4, r3, #8
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f7fa fa17 	bl	80001d0 <strlen>
 8005da2:	4603      	mov	r3, r0
 8005da4:	4423      	add	r3, r4
 8005da6:	499a      	ldr	r1, [pc, #616]	; (8006010 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2e8>)
 8005da8:	461a      	mov	r2, r3
 8005daa:	460b      	mov	r3, r1
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GY)!=senorsList.end())
 8005db0:	2301      	movs	r3, #1
 8005db2:	61bb      	str	r3, [r7, #24]
 8005db4:	f107 0318 	add.w	r3, r7, #24
 8005db8:	4619      	mov	r1, r3
 8005dba:	6838      	ldr	r0, [r7, #0]
 8005dbc:	f7fd fe30 	bl	8003a20 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	6838      	ldr	r0, [r7, #0]
 8005dc6:	f7fd fe44 	bl	8003a52 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	61fb      	str	r3, [r7, #28]
 8005dce:	f107 021c 	add.w	r2, r7, #28
 8005dd2:	f107 0314 	add.w	r3, r7, #20
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fd fe47 	bl	8003a6c <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d020      	beq.n	8005e26 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0xfe>
	{
		strcat(packet,toCharArray(euler_y));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f103 0408 	add.w	r4, r3, #8
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	1d1a      	adds	r2, r3, #4
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005df4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005df8:	ee17 1a90 	vmov	r1, s15
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	f7fd fb01 	bl	8003404 <_ZN15PrintableSensor11toCharArrayEi>
 8005e02:	4603      	mov	r3, r0
 8005e04:	4619      	mov	r1, r3
 8005e06:	4620      	mov	r0, r4
 8005e08:	f00e ff2c 	bl	8014c64 <strcat>
		strcat(packet,",");
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f103 0408 	add.w	r4, r3, #8
 8005e12:	4620      	mov	r0, r4
 8005e14:	f7fa f9dc 	bl	80001d0 <strlen>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	4423      	add	r3, r4
 8005e1c:	497c      	ldr	r1, [pc, #496]	; (8006010 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2e8>)
 8005e1e:	461a      	mov	r2, r3
 8005e20:	460b      	mov	r3, r1
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GZ)!=senorsList.end())
 8005e26:	2302      	movs	r3, #2
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e2e:	4619      	mov	r1, r3
 8005e30:	6838      	ldr	r0, [r7, #0]
 8005e32:	f7fd fdf5 	bl	8003a20 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8005e36:	4603      	mov	r3, r0
 8005e38:	623b      	str	r3, [r7, #32]
 8005e3a:	6838      	ldr	r0, [r7, #0]
 8005e3c:	f7fd fe09 	bl	8003a52 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8005e40:	4603      	mov	r3, r0
 8005e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e44:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e48:	f107 0320 	add.w	r3, r7, #32
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fd fe0c 	bl	8003a6c <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d020      	beq.n	8005e9c <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x174>
	{
		strcat(packet,toCharArray(euler_z));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f103 0408 	add.w	r4, r3, #8
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	1d1a      	adds	r2, r3, #4
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005e6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e6e:	ee17 1a90 	vmov	r1, s15
 8005e72:	4610      	mov	r0, r2
 8005e74:	f7fd fac6 	bl	8003404 <_ZN15PrintableSensor11toCharArrayEi>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f00e fef1 	bl	8014c64 <strcat>
		strcat(packet,",");
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f103 0408 	add.w	r4, r3, #8
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f7fa f9a1 	bl	80001d0 <strlen>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	4423      	add	r3, r4
 8005e92:	495f      	ldr	r1, [pc, #380]	; (8006010 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2e8>)
 8005e94:	461a      	mov	r2, r3
 8005e96:	460b      	mov	r3, r1
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AX)!=senorsList.end())
 8005e9c:	2306      	movs	r3, #6
 8005e9e:	633b      	str	r3, [r7, #48]	; 0x30
 8005ea0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6838      	ldr	r0, [r7, #0]
 8005ea8:	f7fd fdba 	bl	8003a20 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8005eac:	4603      	mov	r3, r0
 8005eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eb0:	6838      	ldr	r0, [r7, #0]
 8005eb2:	f7fd fdce 	bl	8003a52 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8005eba:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005ebe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fd fdd1 	bl	8003a6c <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d022      	beq.n	8005f16 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1ee>
	{
		strcat(packet,toCharArray(-ax));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f103 0408 	add.w	r4, r3, #8
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	1d1a      	adds	r2, r3, #4
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8005ee0:	eef1 7a67 	vneg.f32	s15, s15
 8005ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ee8:	ee17 1a90 	vmov	r1, s15
 8005eec:	4610      	mov	r0, r2
 8005eee:	f7fd fa89 	bl	8003404 <_ZN15PrintableSensor11toCharArrayEi>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f00e feb4 	bl	8014c64 <strcat>
		strcat(packet,",");
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f103 0408 	add.w	r4, r3, #8
 8005f02:	4620      	mov	r0, r4
 8005f04:	f7fa f964 	bl	80001d0 <strlen>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	4423      	add	r3, r4
 8005f0c:	4940      	ldr	r1, [pc, #256]	; (8006010 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2e8>)
 8005f0e:	461a      	mov	r2, r3
 8005f10:	460b      	mov	r3, r1
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AY)!=senorsList.end())
 8005f16:	2307      	movs	r3, #7
 8005f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6838      	ldr	r0, [r7, #0]
 8005f22:	f7fd fd7d 	bl	8003a20 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8005f26:	4603      	mov	r3, r0
 8005f28:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f2a:	6838      	ldr	r0, [r7, #0]
 8005f2c:	f7fd fd91 	bl	8003a52 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8005f30:	4603      	mov	r3, r0
 8005f32:	643b      	str	r3, [r7, #64]	; 0x40
 8005f34:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005f38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fd fd94 	bl	8003a6c <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d020      	beq.n	8005f8c <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x264>
	{
		strcat(packet,toCharArray(ay));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f103 0408 	add.w	r4, r3, #8
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	1d1a      	adds	r2, r3, #4
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8005f5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f5e:	ee17 1a90 	vmov	r1, s15
 8005f62:	4610      	mov	r0, r2
 8005f64:	f7fd fa4e 	bl	8003404 <_ZN15PrintableSensor11toCharArrayEi>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	f00e fe79 	bl	8014c64 <strcat>
		strcat(packet,",");
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f103 0408 	add.w	r4, r3, #8
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f7fa f929 	bl	80001d0 <strlen>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	4423      	add	r3, r4
 8005f82:	4923      	ldr	r1, [pc, #140]	; (8006010 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2e8>)
 8005f84:	461a      	mov	r2, r3
 8005f86:	460b      	mov	r3, r1
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AZ)!=senorsList.end())
 8005f8c:	2308      	movs	r3, #8
 8005f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f94:	4619      	mov	r1, r3
 8005f96:	6838      	ldr	r0, [r7, #0]
 8005f98:	f7fd fd42 	bl	8003a20 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa0:	6838      	ldr	r0, [r7, #0]
 8005fa2:	f7fd fd56 	bl	8003a52 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005faa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005fae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fd fd59 	bl	8003a6c <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d020      	beq.n	8006002 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2da>
	{
		strcat(packet,toCharArray(az));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f103 0408 	add.w	r4, r3, #8
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	1d1a      	adds	r2, r3, #4
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8005fd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fd4:	ee17 1a90 	vmov	r1, s15
 8005fd8:	4610      	mov	r0, r2
 8005fda:	f7fd fa13 	bl	8003404 <_ZN15PrintableSensor11toCharArrayEi>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f00e fe3e 	bl	8014c64 <strcat>
		strcat(packet,",");
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f103 0408 	add.w	r4, r3, #8
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f7fa f8ee 	bl	80001d0 <strlen>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	4423      	add	r3, r4
 8005ff8:	4905      	ldr	r1, [pc, #20]	; (8006010 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2e8>)
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	3308      	adds	r3, #8
}
 8006006:	4618      	mov	r0, r3
 8006008:	3754      	adds	r7, #84	; 0x54
 800600a:	46bd      	mov	sp, r7
 800600c:	bd90      	pop	{r4, r7, pc}
 800600e:	bf00      	nop
 8006010:	08014e2c 	.word	0x08014e2c

08006014 <_ZThn4_N9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	float ayScale = 2.0F;
	float azScale = 2.0F;
public:

	void SPI_write(uint8_t reg,uint8_t data);
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 8006014:	f1a0 0004 	sub.w	r0, r0, #4
 8006018:	f7ff be86 	b.w	8005d28 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>
 800601c:	0000      	movs	r0, r0
	...

08006020 <_ZN9ICM42688P6updateEv>:

void ICM42688P::update()
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
	axL = SPI_read(ACCEL_DATA_X0);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3304      	adds	r3, #4
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2120      	movs	r1, #32
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	4798      	blx	r3
 8006036:	4603      	mov	r3, r0
 8006038:	461a      	mov	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	axH = SPI_read(ACCEL_DATA_X1);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3304      	adds	r3, #4
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	211f      	movs	r1, #31
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	4798      	blx	r3
 800604e:	4603      	mov	r3, r0
 8006050:	461a      	mov	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	ayL = SPI_read(ACCEL_DATA_Y0);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3304      	adds	r3, #4
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2122      	movs	r1, #34	; 0x22
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	4798      	blx	r3
 8006066:	4603      	mov	r3, r0
 8006068:	461a      	mov	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	ayH = SPI_read(ACCEL_DATA_Y1);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3304      	adds	r3, #4
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2121      	movs	r1, #33	; 0x21
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	4798      	blx	r3
 800607e:	4603      	mov	r3, r0
 8006080:	461a      	mov	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

	azL = SPI_read(ACCEL_DATA_Z0);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3304      	adds	r3, #4
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2124      	movs	r1, #36	; 0x24
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	4798      	blx	r3
 8006096:	4603      	mov	r3, r0
 8006098:	461a      	mov	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	azH = SPI_read(ACCEL_DATA_Z1);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3304      	adds	r3, #4
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2123      	movs	r1, #35	; 0x23
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	4798      	blx	r3
 80060ae:	4603      	mov	r3, r0
 80060b0:	461a      	mov	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	gxL = SPI_read(GYRO_DATA_X0);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3304      	adds	r3, #4
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2126      	movs	r1, #38	; 0x26
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	4798      	blx	r3
 80060c6:	4603      	mov	r3, r0
 80060c8:	461a      	mov	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	gxH = SPI_read(GYRO_DATA_X1);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3304      	adds	r3, #4
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2125      	movs	r1, #37	; 0x25
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	4798      	blx	r3
 80060de:	4603      	mov	r3, r0
 80060e0:	461a      	mov	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56

	gyL = SPI_read(GYRO_DATA_Y0);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3304      	adds	r3, #4
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2128      	movs	r1, #40	; 0x28
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	4798      	blx	r3
 80060f6:	4603      	mov	r3, r0
 80060f8:	461a      	mov	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	gyH = SPI_read(GYRO_DATA_Y1);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3304      	adds	r3, #4
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2127      	movs	r1, #39	; 0x27
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	4798      	blx	r3
 800610e:	4603      	mov	r3, r0
 8006110:	461a      	mov	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	gzL = SPI_read(GYRO_DATA_Z0);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3304      	adds	r3, #4
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	212a      	movs	r1, #42	; 0x2a
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	4798      	blx	r3
 8006126:	4603      	mov	r3, r0
 8006128:	461a      	mov	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	gzH = SPI_read(GYRO_DATA_Z1);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3304      	adds	r3, #4
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2129      	movs	r1, #41	; 0x29
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	4798      	blx	r3
 800613e:	4603      	mov	r3, r0
 8006140:	461a      	mov	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

	tempL = SPI_read(TEMP_DATA0);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3304      	adds	r3, #4
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	211e      	movs	r1, #30
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	4798      	blx	r3
 8006156:	4603      	mov	r3, r0
 8006158:	461a      	mov	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	tempH = SPI_read(TEMP_DATA1);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3304      	adds	r3, #4
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	211d      	movs	r1, #29
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	4798      	blx	r3
 800616e:	4603      	mov	r3, r0
 8006170:	461a      	mov	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	raw_ax = ((int16_t)(((int16_t)axH<<8) | axL) - axOffset)*axScale;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800617e:	021b      	lsls	r3, r3, #8
 8006180:	b21a      	sxth	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006188:	b21b      	sxth	r3, r3
 800618a:	4313      	orrs	r3, r2
 800618c:	b21b      	sxth	r3, r3
 800618e:	ee07 3a90 	vmov	s15, r3
 8006192:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800619c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 80061a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	raw_ay = ((int16_t)(((int16_t)ayH<<8) | ayL) - ayOffset)*ayScale;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	b21a      	sxth	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80061c0:	b21b      	sxth	r3, r3
 80061c2:	4313      	orrs	r3, r2
 80061c4:	b21b      	sxth	r3, r3
 80061c6:	ee07 3a90 	vmov	s15, r3
 80061ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 80061d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80061de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	raw_az = ((int16_t)(((int16_t)azH<<8) | azL) - azOffset)*azScale;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80061ee:	021b      	lsls	r3, r3, #8
 80061f0:	b21a      	sxth	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80061f8:	b21b      	sxth	r3, r3
 80061fa:	4313      	orrs	r3, r2
 80061fc:	b21b      	sxth	r3, r3
 80061fe:	ee07 3a90 	vmov	s15, r3
 8006202:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800620c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8006216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	raw_gx = (int16_t)(((int16_t)gxH<<8) | gxL) - gxDrift;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006226:	021b      	lsls	r3, r3, #8
 8006228:	b21a      	sxth	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8006230:	b21b      	sxth	r3, r3
 8006232:	4313      	orrs	r3, r2
 8006234:	b21b      	sxth	r3, r3
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8006244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	raw_gy = (int16_t)(((int16_t)gyH<<8) | gyL) - gyDrift;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006254:	021b      	lsls	r3, r3, #8
 8006256:	b21a      	sxth	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800625e:	b21b      	sxth	r3, r3
 8006260:	4313      	orrs	r3, r2
 8006262:	b21b      	sxth	r3, r3
 8006264:	ee07 3a90 	vmov	s15, r3
 8006268:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8006272:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	raw_gz = (int16_t)(((int16_t)gzH<<8) | gzL) - gzDrift;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	b21a      	sxth	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800628c:	b21b      	sxth	r3, r3
 800628e:	4313      	orrs	r3, r2
 8006290:	b21b      	sxth	r3, r3
 8006292:	ee07 3a90 	vmov	s15, r3
 8006296:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 80062a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	temp = (int16_t)(((int16_t)tempH<<8) | tempL)/132.48+25;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80062b0:	021b      	lsls	r3, r3, #8
 80062b2:	b21a      	sxth	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062ba:	b21b      	sxth	r3, r3
 80062bc:	4313      	orrs	r3, r2
 80062be:	b21b      	sxth	r3, r3
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fa f8df 	bl	8000484 <__aeabi_i2d>
 80062c6:	a315      	add	r3, pc, #84	; (adr r3, 800631c <_ZN9ICM42688P6updateEv+0x2fc>)
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	f7fa fa6e 	bl	80007ac <__aeabi_ddiv>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4610      	mov	r0, r2
 80062d6:	4619      	mov	r1, r3
 80062d8:	f04f 0200 	mov.w	r2, #0
 80062dc:	4b0e      	ldr	r3, [pc, #56]	; (8006318 <_ZN9ICM42688P6updateEv+0x2f8>)
 80062de:	f7f9 ff85 	bl	80001ec <__adddf3>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	4610      	mov	r0, r2
 80062e8:	4619      	mov	r1, r3
 80062ea:	f7fa fc0d 	bl	8000b08 <__aeabi_d2f>
 80062ee:	4602      	mov	r2, r0
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	toEuler();
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f816 	bl	8006328 <_ZN9ICM42688P7toEulerEv>

	SPI_read(INT_STATUS);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3304      	adds	r3, #4
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	212d      	movs	r1, #45	; 0x2d
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	4798      	blx	r3
}
 800630a:	bf00      	nop
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	f3af 8000 	nop.w
 8006318:	40390000 	.word	0x40390000
 800631c:	28f5c28f 	.word	0x28f5c28f
 8006320:	40608f5c 	.word	0x40608f5c
 8006324:	00000000 	.word	0x00000000

08006328 <_ZN9ICM42688P7toEulerEv>:

void ICM42688P::toEuler()
{
 8006328:	b5b0      	push	{r4, r5, r7, lr}
 800632a:	ed2d 8b02 	vpush	{d8}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
	gx = gx + raw_gx*(DT/GYRO_FULLSCALE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	edd3 5a13 	vldr	s11, [r3, #76]	; 0x4c
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 800634c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8006350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	gy = gy + raw_gy*(DT/GYRO_FULLSCALE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	edd3 5a13 	vldr	s11, [r3, #76]	; 0x4c
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8006376:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800637a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800637e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	gz = gz + raw_gz*(DT/GYRO_FULLSCALE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	edd3 5a13 	vldr	s11, [r3, #76]	; 0x4c
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 80063a0:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80063a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	euler_x = euler_x + raw_gx*(DT/GYRO_FULLSCALE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	edd3 5a13 	vldr	s11, [r3, #76]	; 0x4c
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 80063ca:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80063ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	euler_y = euler_y + raw_gy*(DT/GYRO_FULLSCALE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	edd3 5a13 	vldr	s11, [r3, #76]	; 0x4c
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 80063f4:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80063f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	euler_z = euler_z + raw_gz*(DT/GYRO_FULLSCALE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	edd3 5a13 	vldr	s11, [r3, #76]	; 0x4c
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 800641e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8006422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

	ax = atan2(raw_ax,sqrt(raw_ay*raw_ay + raw_az*raw_az))*RADIANS_TO_DEGREES;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	ed93 8a21 	vldr	s16, [r3, #132]	; 0x84
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8006442:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8006452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800645a:	eeb0 0a67 	vmov.f32	s0, s15
 800645e:	f7ff fab8 	bl	80059d2 <_ZSt4sqrtf>
 8006462:	eef0 7a40 	vmov.f32	s15, s0
 8006466:	eef0 0a67 	vmov.f32	s1, s15
 800646a:	eeb0 0a48 	vmov.f32	s0, s16
 800646e:	f7ff fa9c 	bl	80059aa <_ZSt5atan2ff>
 8006472:	eeb0 7a40 	vmov.f32	s14, s0
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800647c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	ay = atan2(raw_ay,sqrt(raw_ax*raw_ax + raw_az*raw_az))*RADIANS_TO_DEGREES;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	ed93 8a22 	vldr	s16, [r3, #136]	; 0x88
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8006498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80064a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064b0:	eeb0 0a67 	vmov.f32	s0, s15
 80064b4:	f7ff fa8d 	bl	80059d2 <_ZSt4sqrtf>
 80064b8:	eef0 7a40 	vmov.f32	s15, s0
 80064bc:	eef0 0a67 	vmov.f32	s1, s15
 80064c0:	eeb0 0a48 	vmov.f32	s0, s16
 80064c4:	f7ff fa71 	bl	80059aa <_ZSt5atan2ff>
 80064c8:	eeb0 7a40 	vmov.f32	s14, s0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80064d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	az = atan2(raw_az,sqrt(raw_ax*raw_ax + raw_ay*raw_ay))*RADIANS_TO_DEGREES;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	ed93 8a23 	vldr	s16, [r3, #140]	; 0x8c
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80064ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80064fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006506:	eeb0 0a67 	vmov.f32	s0, s15
 800650a:	f7ff fa62 	bl	80059d2 <_ZSt4sqrtf>
 800650e:	eef0 7a40 	vmov.f32	s15, s0
 8006512:	eef0 0a67 	vmov.f32	s1, s15
 8006516:	eeb0 0a48 	vmov.f32	s0, s16
 800651a:	f7ff fa46 	bl	80059aa <_ZSt5atan2ff>
 800651e:	eeb0 7a40 	vmov.f32	s14, s0
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

	euler_x = euler_x*0.9999+ay*0.0001;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006538:	4618      	mov	r0, r3
 800653a:	f7f9 ffb5 	bl	80004a8 <__aeabi_f2d>
 800653e:	a33e      	add	r3, pc, #248	; (adr r3, 8006638 <_ZN9ICM42688P7toEulerEv+0x310>)
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	f7fa f808 	bl	8000558 <__aeabi_dmul>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	4614      	mov	r4, r2
 800654e:	461d      	mov	r5, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006554:	4618      	mov	r0, r3
 8006556:	f7f9 ffa7 	bl	80004a8 <__aeabi_f2d>
 800655a:	a339      	add	r3, pc, #228	; (adr r3, 8006640 <_ZN9ICM42688P7toEulerEv+0x318>)
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	f7f9 fffa 	bl	8000558 <__aeabi_dmul>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4620      	mov	r0, r4
 800656a:	4629      	mov	r1, r5
 800656c:	f7f9 fe3e 	bl	80001ec <__adddf3>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4610      	mov	r0, r2
 8006576:	4619      	mov	r1, r3
 8006578:	f7fa fac6 	bl	8000b08 <__aeabi_d2f>
 800657c:	4602      	mov	r2, r0
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	euler_y = euler_y*0.9999-ax*0.0001;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800658a:	4618      	mov	r0, r3
 800658c:	f7f9 ff8c 	bl	80004a8 <__aeabi_f2d>
 8006590:	a329      	add	r3, pc, #164	; (adr r3, 8006638 <_ZN9ICM42688P7toEulerEv+0x310>)
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f7f9 ffdf 	bl	8000558 <__aeabi_dmul>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4614      	mov	r4, r2
 80065a0:	461d      	mov	r5, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7f9 ff7e 	bl	80004a8 <__aeabi_f2d>
 80065ac:	a324      	add	r3, pc, #144	; (adr r3, 8006640 <_ZN9ICM42688P7toEulerEv+0x318>)
 80065ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b2:	f7f9 ffd1 	bl	8000558 <__aeabi_dmul>
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	4620      	mov	r0, r4
 80065bc:	4629      	mov	r1, r5
 80065be:	f7f9 fe13 	bl	80001e8 <__aeabi_dsub>
 80065c2:	4602      	mov	r2, r0
 80065c4:	460b      	mov	r3, r1
 80065c6:	4610      	mov	r0, r2
 80065c8:	4619      	mov	r1, r3
 80065ca:	f7fa fa9d 	bl	8000b08 <__aeabi_d2f>
 80065ce:	4602      	mov	r2, r0
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	euler_z = euler_z*0.9999+az*0.0001;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065dc:	4618      	mov	r0, r3
 80065de:	f7f9 ff63 	bl	80004a8 <__aeabi_f2d>
 80065e2:	a315      	add	r3, pc, #84	; (adr r3, 8006638 <_ZN9ICM42688P7toEulerEv+0x310>)
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	f7f9 ffb6 	bl	8000558 <__aeabi_dmul>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4614      	mov	r4, r2
 80065f2:	461d      	mov	r5, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7f9 ff55 	bl	80004a8 <__aeabi_f2d>
 80065fe:	a310      	add	r3, pc, #64	; (adr r3, 8006640 <_ZN9ICM42688P7toEulerEv+0x318>)
 8006600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006604:	f7f9 ffa8 	bl	8000558 <__aeabi_dmul>
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	4620      	mov	r0, r4
 800660e:	4629      	mov	r1, r5
 8006610:	f7f9 fdec 	bl	80001ec <__adddf3>
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	4610      	mov	r0, r2
 800661a:	4619      	mov	r1, r3
 800661c:	f7fa fa74 	bl	8000b08 <__aeabi_d2f>
 8006620:	4602      	mov	r2, r0
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 8006628:	bf00      	nop
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	ecbd 8b02 	vpop	{d8}
 8006632:	bdb0      	pop	{r4, r5, r7, pc}
 8006634:	f3af 8000 	nop.w
 8006638:	48e8a71e 	.word	0x48e8a71e
 800663c:	3fefff2e 	.word	0x3fefff2e
 8006640:	eb1c432d 	.word	0xeb1c432d
 8006644:	3f1a36e2 	.word	0x3f1a36e2

08006648 <_ZN9ICM42688P9getEulerXEv>:

	return true;
}

float ICM42688P::getEulerX()
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
	return euler_x;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006656:	ee07 3a90 	vmov	s15, r3
}
 800665a:	eeb0 0a67 	vmov.f32	s0, s15
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <_ZN9ICM42688P9getEulerYEv>:

float ICM42688P::getEulerY()
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
	return euler_y;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006676:	ee07 3a90 	vmov	s15, r3
}
 800667a:	eeb0 0a67 	vmov.f32	s0, s15
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <_ZN9ICM42688P9getEulerZEv>:

float ICM42688P::getEulerZ()
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
	return euler_z;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006696:	ee07 3a90 	vmov	s15, r3
}
 800669a:	eeb0 0a67 	vmov.f32	s0, s15
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <_ZN9ICM42688P7getAccXEv>:
{
	return gz;
}

int16_t ICM42688P::getAccX()
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
	return raw_ax;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80066b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066ba:	ee17 3a90 	vmov	r3, s15
 80066be:	b21b      	sxth	r3, r3
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <_ZN9ICM42688P9SPI_writeEhh>:
{
	return SPI_read(INT_STATUS);
}

void ICM42688P::SPI_write(uint8_t reg,uint8_t data)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	70fb      	strb	r3, [r7, #3]
 80066d8:	4613      	mov	r3, r2
 80066da:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(ICM_CS_PORT,ICM_CS_PIN,GPIO_PIN_RESET);
 80066dc:	2200      	movs	r2, #0
 80066de:	2120      	movs	r1, #32
 80066e0:	480d      	ldr	r0, [pc, #52]	; (8006718 <_ZN9ICM42688P9SPI_writeEhh+0x4c>)
 80066e2:	f002 f9ed 	bl	8008ac0 <HAL_GPIO_WritePin>
	spiTxBuff[0] = reg;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	78fa      	ldrb	r2, [r7, #3]
 80066ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	spiTxBuff[1] = data;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	78ba      	ldrb	r2, [r7, #2]
 80066f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	3340      	adds	r3, #64	; 0x40
 80066fe:	2202      	movs	r2, #2
 8006700:	4619      	mov	r1, r3
 8006702:	f004 fd87 	bl	800b214 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(ICM_CS_PORT,ICM_CS_PIN,GPIO_PIN_SET);
 8006706:	2201      	movs	r2, #1
 8006708:	2120      	movs	r1, #32
 800670a:	4803      	ldr	r0, [pc, #12]	; (8006718 <_ZN9ICM42688P9SPI_writeEhh+0x4c>)
 800670c:	f002 f9d8 	bl	8008ac0 <HAL_GPIO_WritePin>
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	40020800 	.word	0x40020800

0800671c <_ZN9ICM42688P8SPI_readEh>:

uint8_t ICM42688P::SPI_read(uint8_t reg)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(ICM_CS_PORT, ICM_CS_PIN, GPIO_PIN_RESET);
 8006728:	2200      	movs	r2, #0
 800672a:	2120      	movs	r1, #32
 800672c:	4812      	ldr	r0, [pc, #72]	; (8006778 <_ZN9ICM42688P8SPI_readEh+0x5c>)
 800672e:	f002 f9c7 	bl	8008ac0 <HAL_GPIO_WritePin>
	spiTxBuff[0]=reg|0x80;
 8006732:	78fb      	ldrb	r3, [r7, #3]
 8006734:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006738:	b2da      	uxtb	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff, 1);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3340      	adds	r3, #64	; 0x40
 8006748:	2201      	movs	r2, #1
 800674a:	4619      	mov	r1, r3
 800674c:	f004 fd62 	bl	800b214 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(spi_port, (uint8_t*)spiRxBuff, 1);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3342      	adds	r3, #66	; 0x42
 8006758:	2201      	movs	r2, #1
 800675a:	4619      	mov	r1, r3
 800675c:	f004 fe10 	bl	800b380 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(ICM_CS_PORT, ICM_CS_PIN, GPIO_PIN_SET);
 8006760:	2201      	movs	r2, #1
 8006762:	2120      	movs	r1, #32
 8006764:	4804      	ldr	r0, [pc, #16]	; (8006778 <_ZN9ICM42688P8SPI_readEh+0x5c>)
 8006766:	f002 f9ab 	bl	8008ac0 <HAL_GPIO_WritePin>

	return spiRxBuff[0];
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
}
 8006770:	4618      	mov	r0, r3
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	40020800 	.word	0x40020800

0800677c <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef>:
 *      Author: Asus
 */

#include "LIS3MDLTR.hpp"

LIS3MDLTR::LIS3MDLTR(SPI_HandleTypeDef *spi_port)
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4618      	mov	r0, r3
 800678a:	f7fc fe57 	bl	800343c <_ZN8SPI_ConnC1Ev>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	3304      	adds	r3, #4
 8006792:	4618      	mov	r0, r3
 8006794:	f7fc fe62 	bl	800345c <_ZN15PrintableSensorC1Ev>
 8006798:	4a0e      	ldr	r2, [pc, #56]	; (80067d4 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef+0x58>)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	4a0e      	ldr	r2, [pc, #56]	; (80067d8 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef+0x5c>)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	605a      	str	r2, [r3, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
{
	LIS3MDLTR::spi_port = spi_port;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4618      	mov	r0, r3
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	08014f8c 	.word	0x08014f8c
 80067d8:	08014fa0 	.word	0x08014fa0

080067dc <_ZN9LIS3MDLTR6updateEv>:
{
	return SPI_read(LIS_WHO_AM_I);
}

void LIS3MDLTR::update()
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
	uint8_t x_high=SPI_read(OUT_X_H);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3304      	adds	r3, #4
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2129      	movs	r1, #41	; 0x29
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	4798      	blx	r3
 80067f2:	4603      	mov	r3, r0
 80067f4:	73fb      	strb	r3, [r7, #15]
	uint8_t x_low=SPI_read(OUT_X_L);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3304      	adds	r3, #4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2128      	movs	r1, #40	; 0x28
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	4798      	blx	r3
 8006804:	4603      	mov	r3, r0
 8006806:	73bb      	strb	r3, [r7, #14]
	uint8_t y_high=SPI_read(OUT_Y_H);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3304      	adds	r3, #4
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	212b      	movs	r1, #43	; 0x2b
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	4798      	blx	r3
 8006816:	4603      	mov	r3, r0
 8006818:	737b      	strb	r3, [r7, #13]
	uint8_t y_low=SPI_read(OUT_Y_L);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3304      	adds	r3, #4
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	212a      	movs	r1, #42	; 0x2a
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	4798      	blx	r3
 8006828:	4603      	mov	r3, r0
 800682a:	733b      	strb	r3, [r7, #12]
	uint8_t z_high=SPI_read(OUT_Z_H);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3304      	adds	r3, #4
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	212d      	movs	r1, #45	; 0x2d
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	4798      	blx	r3
 800683a:	4603      	mov	r3, r0
 800683c:	72fb      	strb	r3, [r7, #11]
	uint8_t z_low=SPI_read(OUT_Z_L);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3304      	adds	r3, #4
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	212c      	movs	r1, #44	; 0x2c
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	4798      	blx	r3
 800684c:	4603      	mov	r3, r0
 800684e:	72bb      	strb	r3, [r7, #10]
	uint8_t temp_high=SPI_read(TEMP_OUT_H);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3304      	adds	r3, #4
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	212f      	movs	r1, #47	; 0x2f
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	4798      	blx	r3
 800685e:	4603      	mov	r3, r0
 8006860:	727b      	strb	r3, [r7, #9]
	uint8_t temp_low=SPI_read(TEMP_OUT_L);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3304      	adds	r3, #4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	212e      	movs	r1, #46	; 0x2e
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	4798      	blx	r3
 8006870:	4603      	mov	r3, r0
 8006872:	723b      	strb	r3, [r7, #8]

	x_raw = ((int16_t)x_high)<<8 | x_low;
 8006874:	7bfb      	ldrb	r3, [r7, #15]
 8006876:	021b      	lsls	r3, r3, #8
 8006878:	b21a      	sxth	r2, r3
 800687a:	7bbb      	ldrb	r3, [r7, #14]
 800687c:	b21b      	sxth	r3, r3
 800687e:	4313      	orrs	r3, r2
 8006880:	b21a      	sxth	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	y_raw = ((int16_t)y_high)<<8 | y_low;
 8006888:	7b7b      	ldrb	r3, [r7, #13]
 800688a:	021b      	lsls	r3, r3, #8
 800688c:	b21a      	sxth	r2, r3
 800688e:	7b3b      	ldrb	r3, [r7, #12]
 8006890:	b21b      	sxth	r3, r3
 8006892:	4313      	orrs	r3, r2
 8006894:	b21a      	sxth	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	z_raw = ((int16_t)z_high)<<8 | z_low;
 800689c:	7afb      	ldrb	r3, [r7, #11]
 800689e:	021b      	lsls	r3, r3, #8
 80068a0:	b21a      	sxth	r2, r3
 80068a2:	7abb      	ldrb	r3, [r7, #10]
 80068a4:	b21b      	sxth	r3, r3
 80068a6:	4313      	orrs	r3, r2
 80068a8:	b21a      	sxth	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	TEMP_val = ((int16_t)temp_high)<<8 | temp_low;
 80068b0:	7a7b      	ldrb	r3, [r7, #9]
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	b21a      	sxth	r2, r3
 80068b6:	7a3b      	ldrb	r3, [r7, #8]
 80068b8:	b21b      	sxth	r3, r3
 80068ba:	4313      	orrs	r3, r2
 80068bc:	b21a      	sxth	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
}
 80068c4:	bf00      	nop
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* LIS3MDLTR::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 80068cc:	b590      	push	{r4, r7, lr}
 80068ce:	b08d      	sub	sp, #52	; 0x34
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	3308      	adds	r3, #8
 80068da:	2200      	movs	r2, #0
 80068dc:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_X)!=senorsList.end())
 80068de:	2310      	movs	r3, #16
 80068e0:	613b      	str	r3, [r7, #16]
 80068e2:	f107 0310 	add.w	r3, r7, #16
 80068e6:	4619      	mov	r1, r3
 80068e8:	6838      	ldr	r0, [r7, #0]
 80068ea:	f7fd f899 	bl	8003a20 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80068ee:	4603      	mov	r3, r0
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	6838      	ldr	r0, [r7, #0]
 80068f4:	f7fd f8ad 	bl	8003a52 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80068f8:	4603      	mov	r3, r0
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	f107 0214 	add.w	r2, r7, #20
 8006900:	f107 030c 	add.w	r3, r7, #12
 8006904:	4611      	mov	r1, r2
 8006906:	4618      	mov	r0, r3
 8006908:	f7fd f8b0 	bl	8003a6c <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d01d      	beq.n	800694e <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x82>
	{
		strcat(packet,toCharArray(x_raw));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f103 0408 	add.w	r4, r3, #8
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	1d1a      	adds	r2, r3, #4
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8006922:	4619      	mov	r1, r3
 8006924:	4610      	mov	r0, r2
 8006926:	f7fc fd6d 	bl	8003404 <_ZN15PrintableSensor11toCharArrayEi>
 800692a:	4603      	mov	r3, r0
 800692c:	4619      	mov	r1, r3
 800692e:	4620      	mov	r0, r4
 8006930:	f00e f998 	bl	8014c64 <strcat>
		strcat(packet,",");
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f103 0408 	add.w	r4, r3, #8
 800693a:	4620      	mov	r0, r4
 800693c:	f7f9 fc48 	bl	80001d0 <strlen>
 8006940:	4603      	mov	r3, r0
 8006942:	4423      	add	r3, r4
 8006944:	493d      	ldr	r1, [pc, #244]	; (8006a3c <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 8006946:	461a      	mov	r2, r3
 8006948:	460b      	mov	r3, r1
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_Y)!=senorsList.end())
 800694e:	2311      	movs	r3, #17
 8006950:	61fb      	str	r3, [r7, #28]
 8006952:	f107 031c 	add.w	r3, r7, #28
 8006956:	4619      	mov	r1, r3
 8006958:	6838      	ldr	r0, [r7, #0]
 800695a:	f7fd f861 	bl	8003a20 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 800695e:	4603      	mov	r3, r0
 8006960:	61bb      	str	r3, [r7, #24]
 8006962:	6838      	ldr	r0, [r7, #0]
 8006964:	f7fd f875 	bl	8003a52 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8006968:	4603      	mov	r3, r0
 800696a:	623b      	str	r3, [r7, #32]
 800696c:	f107 0220 	add.w	r2, r7, #32
 8006970:	f107 0318 	add.w	r3, r7, #24
 8006974:	4611      	mov	r1, r2
 8006976:	4618      	mov	r0, r3
 8006978:	f7fd f878 	bl	8003a6c <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d01d      	beq.n	80069be <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0xf2>
	{
		strcat(packet,toCharArray(y_raw));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f103 0408 	add.w	r4, r3, #8
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	1d1a      	adds	r2, r3, #4
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8006992:	4619      	mov	r1, r3
 8006994:	4610      	mov	r0, r2
 8006996:	f7fc fd35 	bl	8003404 <_ZN15PrintableSensor11toCharArrayEi>
 800699a:	4603      	mov	r3, r0
 800699c:	4619      	mov	r1, r3
 800699e:	4620      	mov	r0, r4
 80069a0:	f00e f960 	bl	8014c64 <strcat>
		strcat(packet,",");
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f103 0408 	add.w	r4, r3, #8
 80069aa:	4620      	mov	r0, r4
 80069ac:	f7f9 fc10 	bl	80001d0 <strlen>
 80069b0:	4603      	mov	r3, r0
 80069b2:	4423      	add	r3, r4
 80069b4:	4921      	ldr	r1, [pc, #132]	; (8006a3c <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 80069b6:	461a      	mov	r2, r3
 80069b8:	460b      	mov	r3, r1
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_Z)!=senorsList.end())
 80069be:	2312      	movs	r3, #18
 80069c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069c6:	4619      	mov	r1, r3
 80069c8:	6838      	ldr	r0, [r7, #0]
 80069ca:	f7fd f829 	bl	8003a20 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80069ce:	4603      	mov	r3, r0
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
 80069d2:	6838      	ldr	r0, [r7, #0]
 80069d4:	f7fd f83d 	bl	8003a52 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80069d8:	4603      	mov	r3, r0
 80069da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069dc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80069e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069e4:	4611      	mov	r1, r2
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7fd f840 	bl	8003a6c <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d01d      	beq.n	8006a2e <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x162>
	{
		strcat(packet,toCharArray(z_raw));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f103 0408 	add.w	r4, r3, #8
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	1d1a      	adds	r2, r3, #4
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8006a02:	4619      	mov	r1, r3
 8006a04:	4610      	mov	r0, r2
 8006a06:	f7fc fcfd 	bl	8003404 <_ZN15PrintableSensor11toCharArrayEi>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f00e f928 	bl	8014c64 <strcat>
		strcat(packet,",");
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f103 0408 	add.w	r4, r3, #8
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f7f9 fbd8 	bl	80001d0 <strlen>
 8006a20:	4603      	mov	r3, r0
 8006a22:	4423      	add	r3, r4
 8006a24:	4905      	ldr	r1, [pc, #20]	; (8006a3c <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 8006a26:	461a      	mov	r2, r3
 8006a28:	460b      	mov	r3, r1
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	8013      	strh	r3, [r2, #0]
	}


	return packet;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3308      	adds	r3, #8
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3734      	adds	r7, #52	; 0x34
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd90      	pop	{r4, r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	08014e30 	.word	0x08014e30

08006a40 <_ZThn4_N9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	void update();
	int16_t getX();
	int16_t getY();
	int16_t getZ();
	int16_t getTEMP();
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 8006a40:	f1a0 0004 	sub.w	r0, r0, #4
 8006a44:	f7ff bf42 	b.w	80068cc <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>

08006a48 <_ZN9LIS3MDLTR11defaultInitEv>:

bool LIS3MDLTR::defaultInit()
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
	  this->SPI_write(CTRL_REG1,0b11111100);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	22fc      	movs	r2, #252	; 0xfc
 8006a58:	2120      	movs	r1, #32
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	4798      	blx	r3
	  uint8_t ctrl1 = this->SPI_read(CTRL_REG1);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3304      	adds	r3, #4
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2120      	movs	r1, #32
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	4798      	blx	r3
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73fb      	strb	r3, [r7, #15]

	  SPI_write(CTRL_REG2,0b01100000);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2260      	movs	r2, #96	; 0x60
 8006a78:	2121      	movs	r1, #33	; 0x21
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	4798      	blx	r3
	  uint8_t ctrl2 = SPI_read(CTRL_REG2);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3304      	adds	r3, #4
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2121      	movs	r1, #33	; 0x21
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	4798      	blx	r3
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	73bb      	strb	r3, [r7, #14]

	  SPI_write(CTRL_REG3,0b00000000);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2200      	movs	r2, #0
 8006a98:	2122      	movs	r1, #34	; 0x22
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	4798      	blx	r3
	  uint8_t ctrl3 = SPI_read(CTRL_REG3);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2122      	movs	r1, #34	; 0x22
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	4798      	blx	r3
 8006aac:	4603      	mov	r3, r0
 8006aae:	737b      	strb	r3, [r7, #13]

	  SPI_write(CTRL_REG4,0b00001100);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	220c      	movs	r2, #12
 8006ab8:	2123      	movs	r1, #35	; 0x23
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	4798      	blx	r3
	  uint8_t ctrl4 = SPI_read(CTRL_REG4);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2123      	movs	r1, #35	; 0x23
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	4798      	blx	r3
 8006acc:	4603      	mov	r3, r0
 8006ace:	733b      	strb	r3, [r7, #12]

	  SPI_write(CTRL_REG5,0b00000000);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2124      	movs	r1, #36	; 0x24
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	4798      	blx	r3
	  uint8_t ctrl5 = SPI_read(CTRL_REG5);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2124      	movs	r1, #36	; 0x24
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	4798      	blx	r3
 8006aec:	4603      	mov	r3, r0
 8006aee:	72fb      	strb	r3, [r7, #11]
		return false;

	if (!initAndCheck(CTRL_REG5,0b00000000,10))
		return false;*/

	return true;
 8006af0:	2301      	movs	r3, #1
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
	...

08006afc <_ZN9LIS3MDLTR9SPI_writeEhh>:
	}
	return false;
}

void LIS3MDLTR::SPI_write(uint8_t reg,uint8_t data)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	70fb      	strb	r3, [r7, #3]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(LIS_CS_PORT,LIS_CS_PIN,GPIO_PIN_RESET);
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2120      	movs	r1, #32
 8006b10:	480f      	ldr	r0, [pc, #60]	; (8006b50 <_ZN9LIS3MDLTR9SPI_writeEhh+0x54>)
 8006b12:	f001 ffd5 	bl	8008ac0 <HAL_GPIO_WritePin>
	spiTxBuff[0] = reg & 0x7f;
 8006b16:	78fb      	ldrb	r3, [r7, #3]
 8006b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	spiTxBuff[1] = data;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	78ba      	ldrb	r2, [r7, #2]
 8006b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3340      	adds	r3, #64	; 0x40
 8006b34:	2202      	movs	r2, #2
 8006b36:	4619      	mov	r1, r3
 8006b38:	f004 fb6c 	bl	800b214 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(LIS_CS_PORT,LIS_CS_PIN,GPIO_PIN_SET);
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	2120      	movs	r1, #32
 8006b40:	4803      	ldr	r0, [pc, #12]	; (8006b50 <_ZN9LIS3MDLTR9SPI_writeEhh+0x54>)
 8006b42:	f001 ffbd 	bl	8008ac0 <HAL_GPIO_WritePin>
}
 8006b46:	bf00      	nop
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	40020000 	.word	0x40020000

08006b54 <_ZN9LIS3MDLTR8SPI_readEh>:

uint8_t LIS3MDLTR::SPI_read(uint8_t reg)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(LIS_CS_PORT, LIS_CS_PIN, GPIO_PIN_RESET);
 8006b60:	2200      	movs	r2, #0
 8006b62:	2120      	movs	r1, #32
 8006b64:	4812      	ldr	r0, [pc, #72]	; (8006bb0 <_ZN9LIS3MDLTR8SPI_readEh+0x5c>)
 8006b66:	f001 ffab 	bl	8008ac0 <HAL_GPIO_WritePin>
	spiTxBuff[0]=(reg & 0x3f)|0x80|0x40;
 8006b6a:	78fb      	ldrb	r3, [r7, #3]
 8006b6c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff, 1);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	3340      	adds	r3, #64	; 0x40
 8006b80:	2201      	movs	r2, #1
 8006b82:	4619      	mov	r1, r3
 8006b84:	f004 fb46 	bl	800b214 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(spi_port, (uint8_t*)spiRxBuff, 1);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3342      	adds	r3, #66	; 0x42
 8006b90:	2201      	movs	r2, #1
 8006b92:	4619      	mov	r1, r3
 8006b94:	f004 fbf4 	bl	800b380 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(LIS_CS_PORT, LIS_CS_PIN, GPIO_PIN_SET);
 8006b98:	2201      	movs	r2, #1
 8006b9a:	2120      	movs	r1, #32
 8006b9c:	4804      	ldr	r0, [pc, #16]	; (8006bb0 <_ZN9LIS3MDLTR8SPI_readEh+0x5c>)
 8006b9e:	f001 ff8f 	bl	8008ac0 <HAL_GPIO_WritePin>

	return spiRxBuff[0];
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	40020000 	.word	0x40020000

08006bb4 <_ZN7Timeout19resetTimeoutCounterEv>:
	void resetTimeoutCounter()
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
		timeout_counter=0;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	705a      	strb	r2, [r3, #1]
	}
 8006bc2:	bf00      	nop
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
	...

08006bd0 <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>:
 */

#include "MB1043.h"
#include <stdlib.h>

MB1043::MB1043(UART_HandleTypeDef *uart_port,DMA_HandleTypeDef *uart_port_dma,uint8_t timeout)
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	70fb      	strb	r3, [r7, #3]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3336      	adds	r3, #54	; 0x36
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7fd fa7f 	bl	80040e6 <_ZN7TimeoutC1Ev>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fc fc36 	bl	800345c <_ZN15PrintableSensorC1Ev>
 8006bf0:	4a10      	ldr	r2, [pc, #64]	; (8006c34 <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh+0x64>)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2252      	movs	r2, #82	; 0x52
 8006bfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	220d      	movs	r2, #13
 8006c02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2206      	movs	r2, #6
 8006c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
	MB1043::uart_port = uart_port;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	63da      	str	r2, [r3, #60]	; 0x3c
	MB1043::uart_port_dma=uart_port_dma;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	641a      	str	r2, [r3, #64]	; 0x40

	setTimeoutValue(timeout);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3336      	adds	r3, #54	; 0x36
 8006c1e:	78fa      	ldrb	r2, [r7, #3]
 8006c20:	4611      	mov	r1, r2
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fd fa50 	bl	80040c8 <_ZN7Timeout15setTimeoutValueEh>
}
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	08014fac 	.word	0x08014fac

08006c38 <_ZN6MB10435beginEv>:

void MB1043::begin()
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(uart_port, rx_buff, buff_len);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f103 0145 	add.w	r1, r3, #69	; 0x45
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	461a      	mov	r2, r3
 8006c54:	f006 f946 	bl	800cee4 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8006c58:	bf00      	nop
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <_ZN6MB10436updateEv>:

void MB1043::update()
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
	if (rx_buff[0]==BEGIN_BIT && rx_buff[5]==END_BIT)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d144      	bne.n	8006d02 <_ZN6MB10436updateEv+0xa2>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d13c      	bne.n	8006d02 <_ZN6MB10436updateEv+0xa2>
	{
		distance_str[0]=rx_buff[1];
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		distance_str[1]=rx_buff[2],
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		distance_str[2]=rx_buff[3],
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		distance_str[3]=rx_buff[4];
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

		distance = atoi(distance_str);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	334b      	adds	r3, #75	; 0x4b
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f00d fe3c 	bl	801493a <atoi>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

		resetTimeoutCounter();
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3336      	adds	r3, #54	; 0x36
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7ff ff6f 	bl	8006bb4 <_ZN7Timeout19resetTimeoutCounterEv>

		HAL_UARTEx_ReceiveToIdle_DMA(uart_port, rx_buff, buff_len);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f103 0145 	add.w	r1, r3, #69	; 0x45
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	f006 f8fb 	bl	800cee4 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(uart_port_dma, DMA_IT_HT);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 0208 	bic.w	r2, r2, #8
 8006d00:	601a      	str	r2, [r3, #0]
	}
}
 8006d02:	bf00      	nop
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* MB1043::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8006d0c:	b590      	push	{r4, r7, lr}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	3304      	adds	r3, #4
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::SONAR_DISTANCE)!=senorsList.end())
 8006d1e:	2313      	movs	r3, #19
 8006d20:	613b      	str	r3, [r7, #16]
 8006d22:	f107 0310 	add.w	r3, r7, #16
 8006d26:	4619      	mov	r1, r3
 8006d28:	6838      	ldr	r0, [r7, #0]
 8006d2a:	f7fc fe79 	bl	8003a20 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	6838      	ldr	r0, [r7, #0]
 8006d34:	f7fc fe8d 	bl	8003a52 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	f107 0214 	add.w	r2, r7, #20
 8006d40:	f107 030c 	add.w	r3, r7, #12
 8006d44:	4611      	mov	r1, r2
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fc fe90 	bl	8003a6c <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d01a      	beq.n	8006d88 <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x7c>
	{
		strcat(packet,toCharArray(distance));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	1d1c      	adds	r4, r3, #4
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4610      	mov	r0, r2
 8006d62:	f7fc fb4f 	bl	8003404 <_ZN15PrintableSensor11toCharArrayEi>
 8006d66:	4603      	mov	r3, r0
 8006d68:	4619      	mov	r1, r3
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f00d ff7a 	bl	8014c64 <strcat>
		strcat(packet,",");
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	1d1c      	adds	r4, r3, #4
 8006d74:	4620      	mov	r0, r4
 8006d76:	f7f9 fa2b 	bl	80001d0 <strlen>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	4423      	add	r3, r4
 8006d7e:	4905      	ldr	r1, [pc, #20]	; (8006d94 <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x88>)
 8006d80:	461a      	mov	r2, r3
 8006d82:	460b      	mov	r3, r1
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	3304      	adds	r3, #4
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	371c      	adds	r7, #28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd90      	pop	{r4, r7, pc}
 8006d94:	08014e34 	.word	0x08014e34

08006d98 <_ZSt3tanf>:
  using ::tan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tan(float __x)
  { return __builtin_tanf(__x); }
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8006da2:	ed97 0a01 	vldr	s0, [r7, #4]
 8006da6:	f00b ff93 	bl	8012cd0 <tanf>
 8006daa:	eef0 7a40 	vmov.f32	s15, s0
 8006dae:	eeb0 0a67 	vmov.f32	s0, s15
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688P>:
 */

#include "PMW3901UY.hpp"
//#include "utils_functions.hpp"

PMW3901UY::PMW3901UY(UART_HandleTypeDef *uart_port,DMA_HandleTypeDef *uart_port_dma,uint8_t timeout,ICM42688P& icm):
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	70fb      	strb	r3, [r7, #3]
	icm(icm)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3336      	adds	r3, #54	; 0x36
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fd f98b 	bl	80040e6 <_ZN7TimeoutC1Ev>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fc fb42 	bl	800345c <_ZN15PrintableSensorC1Ev>
 8006dd8:	4a17      	ldr	r2, [pc, #92]	; (8006e38 <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688P+0x80>)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	22fe      	movs	r2, #254	; 0xfe
 8006de2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2204      	movs	r2, #4
 8006dea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	22aa      	movs	r2, #170	; 0xaa
 8006df2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	645a      	str	r2, [r3, #68]	; 0x44
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
{
	PMW3901UY::uart_port = uart_port;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	63da      	str	r2, [r3, #60]	; 0x3c
	PMW3901UY::uart_port_dma=uart_port_dma;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	641a      	str	r2, [r3, #64]	; 0x40

	setTimeoutValue(timeout);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	3336      	adds	r3, #54	; 0x36
 8006e24:	78fa      	ldrb	r2, [r7, #3]
 8006e26:	4611      	mov	r1, r2
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fd f94d 	bl	80040c8 <_ZN7Timeout15setTimeoutValueEh>
}
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	08014fb8 	.word	0x08014fb8

08006e3c <_ZN9PMW3901UY5beginEv>:

void PMW3901UY::begin()
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (uart_port, rx_buff, packet_length);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3348      	adds	r3, #72	; 0x48
 8006e4c:	2209      	movs	r2, #9
 8006e4e:	4619      	mov	r1, r3
 8006e50:	f006 f818 	bl	800ce84 <HAL_UART_Receive_DMA>
}
 8006e54:	bf00      	nop
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <_ZN9PMW3901UY6updateEv>:

void PMW3901UY::update()
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
	if (this->rx_buff[0]==this->BEGIN_BIT && this->rx_buff[1]==this->DATA_LEN_BIT && this->rx_buff[8]==this->END_BIT)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d156      	bne.n	8006f22 <_ZN9PMW3901UY6updateEv+0xc6>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d14e      	bne.n	8006f22 <_ZN9PMW3901UY6updateEv+0xc6>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d146      	bne.n	8006f22 <_ZN9PMW3901UY6updateEv+0xc6>
	{
		this->flow_x = (int16_t)(this->rx_buff[3]<<8 | this->rx_buff[2]);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8006e9a:	021b      	lsls	r3, r3, #8
 8006e9c:	b21a      	sxth	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8006ea4:	b21b      	sxth	r3, r3
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	b21a      	sxth	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		this->flow_y = (int16_t)(this->rx_buff[5]<<8 | this->rx_buff[4]);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006eb6:	021b      	lsls	r3, r3, #8
 8006eb8:	b21a      	sxth	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006ec0:	b21b      	sxth	r3, r3
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	b21a      	sxth	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		this->quality = this->rx_buff[7];
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

		this->x_pos += this->flow_x;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	4413      	add	r3, r2
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	b21a      	sxth	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		this->y_pos += this->flow_y;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	4413      	add	r3, r2
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	b21a      	sxth	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		this->process();
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f859 	bl	8006fc8 <_ZN9PMW3901UY7processEv>
		this->resetTimeoutCounter();
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	3336      	adds	r3, #54	; 0x36
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7ff fe4a 	bl	8006bb4 <_ZN7Timeout19resetTimeoutCounterEv>
 8006f20:	e033      	b.n	8006f8a <_ZN9PMW3901UY6updateEv+0x12e>
	}
	else if (this->wrongDataReceived==false)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d12e      	bne.n	8006f8a <_ZN9PMW3901UY6updateEv+0x12e>
	{
		for (uint iter=0;iter<this->packet_length-1U;iter++)
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2b07      	cmp	r3, #7
 8006f34:	d829      	bhi.n	8006f8a <_ZN9PMW3901UY6updateEv+0x12e>
		{
			if ((this->rx_buff[iter]==this->END_BIT) && (this->rx_buff[iter+1U]==this->BEGIN_BIT))
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	3348      	adds	r3, #72	; 0x48
 8006f3e:	781a      	ldrb	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d11b      	bne.n	8006f82 <_ZN9PMW3901UY6updateEv+0x126>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	4413      	add	r3, r2
 8006f52:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d110      	bne.n	8006f82 <_ZN9PMW3901UY6updateEv+0x126>
			{
				HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length+iter+1);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	330a      	adds	r3, #10
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	461a      	mov	r2, r3
 8006f74:	f005 ff86 	bl	800ce84 <HAL_UART_Receive_DMA>
				this->wrongDataReceived = true;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
				return;
 8006f80:	e01e      	b.n	8006fc0 <_ZN9PMW3901UY6updateEv+0x164>
		for (uint iter=0;iter<this->packet_length-1U;iter++)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3301      	adds	r3, #1
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	e7d2      	b.n	8006f30 <_ZN9PMW3901UY6updateEv+0xd4>
			}
		}
	}

	if (this->wrongDataReceived == true)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d103      	bne.n	8006f9c <_ZN9PMW3901UY6updateEv+0x140>
		this->wrongDataReceived = false;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

	HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	3348      	adds	r3, #72	; 0x48
 8006fa4:	2209      	movs	r2, #9
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	f005 ff6c 	bl	800ce84 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->uart_port_dma, DMA_IT_HT);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0208 	bic.w	r2, r2, #8
 8006fbe:	601a      	str	r2, [r3, #0]
}
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <_ZN9PMW3901UY7processEv>:

void PMW3901UY::process()
{
 8006fc8:	b5b0      	push	{r4, r5, r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
	_mini.flow_x = static_cast<float>(this->flow_x);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8006fd6:	ee07 3a90 	vmov	s15, r3
 8006fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	_mini.flow_x = static_cast<float>(this->flow_y);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	_mini.flow_x_i += _mini.flow_x;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8007004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	_mini.flow_y_i += _mini.flow_y;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800701a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

	_pixel_flow.fix_x_i += (_mini.flow_x_i - _pixel_flow.fix_x_i) * 0.2F;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8007036:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800703a:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8007230 <_ZN9PMW3901UY7processEv+0x268>
 800703e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	_pixel_flow.fix_y_i += (_mini.flow_y_i - _pixel_flow.fix_y_i) * 0.2F;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800705e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007062:	eddf 6a73 	vldr	s13, [pc, #460]	; 8007230 <_ZN9PMW3901UY7processEv+0x268>
 8007066:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800706a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

	_pixel_flow.ang_x += (600.0F * tan(icm.getEulerX()*0.0174F) - _pixel_flow.ang_x) * 0.2F;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007078:	4618      	mov	r0, r3
 800707a:	f7ff fae5 	bl	8006648 <_ZN9ICM42688P9getEulerXEv>
 800707e:	eef0 7a40 	vmov.f32	s15, s0
 8007082:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8007234 <_ZN9PMW3901UY7processEv+0x26c>
 8007086:	ee67 7a87 	vmul.f32	s15, s15, s14
 800708a:	eeb0 0a67 	vmov.f32	s0, s15
 800708e:	f7ff fe83 	bl	8006d98 <_ZSt3tanf>
 8007092:	eef0 7a40 	vmov.f32	s15, s0
 8007096:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8007238 <_ZN9PMW3901UY7processEv+0x270>
 800709a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80070a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070a8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8007230 <_ZN9PMW3901UY7processEv+0x268>
 80070ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80070b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	_pixel_flow.ang_y += (600.0F * tan(icm.getEulerY()*0.0174F) - _pixel_flow.ang_y) * 0.2F;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7ff facf 	bl	8006668 <_ZN9ICM42688P9getEulerYEv>
 80070ca:	eef0 7a40 	vmov.f32	s15, s0
 80070ce:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8007234 <_ZN9PMW3901UY7processEv+0x26c>
 80070d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80070d6:	eeb0 0a67 	vmov.f32	s0, s15
 80070da:	f7ff fe5d 	bl	8006d98 <_ZSt3tanf>
 80070de:	eef0 7a40 	vmov.f32	s15, s0
 80070e2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8007238 <_ZN9PMW3901UY7processEv+0x270>
 80070e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80070f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070f4:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8007230 <_ZN9PMW3901UY7processEv+0x268>
 80070f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8007102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

	_pixel_flow.out_x_i = _pixel_flow.fix_x_i - _pixel_flow.ang_x;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8007118:	ee77 7a67 	vsub.f32	s15, s14, s15
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	_pixel_flow.out_x_i = _pixel_flow.fix_y_i - _pixel_flow.ang_y;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800712e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	_pixel_flow.x = (_pixel_flow.out_x_i - _pixel_flow.out_x_i_o);// / dT;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8007144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	_pixel_flow.out_x_i_o = _pixel_flow.out_x_i;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	_pixel_flow.y = (_pixel_flow.out_y_i - _pixel_flow.out_y_i_o);// / dT;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8007166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	_pixel_flow.out_y_i_o = _pixel_flow.out_y_i;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	_pixel_flow.fit_x += (_pixel_flow.x - _pixel_flow.fix_x) * 0.1;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007182:	4618      	mov	r0, r3
 8007184:	f7f9 f990 	bl	80004a8 <__aeabi_f2d>
 8007188:	4604      	mov	r4, r0
 800718a:	460d      	mov	r5, r1
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8007198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800719c:	ee17 0a90 	vmov	r0, s15
 80071a0:	f7f9 f982 	bl	80004a8 <__aeabi_f2d>
 80071a4:	a320      	add	r3, pc, #128	; (adr r3, 8007228 <_ZN9PMW3901UY7processEv+0x260>)
 80071a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071aa:	f7f9 f9d5 	bl	8000558 <__aeabi_dmul>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	4620      	mov	r0, r4
 80071b4:	4629      	mov	r1, r5
 80071b6:	f7f9 f819 	bl	80001ec <__adddf3>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	4610      	mov	r0, r2
 80071c0:	4619      	mov	r1, r3
 80071c2:	f7f9 fca1 	bl	8000b08 <__aeabi_d2f>
 80071c6:	4602      	mov	r2, r0
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	_pixel_flow.fit_y += (_pixel_flow.y - _pixel_flow.fix_y) * 0.1;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7f9 f967 	bl	80004a8 <__aeabi_f2d>
 80071da:	4604      	mov	r4, r0
 80071dc:	460d      	mov	r5, r1
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80071ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071ee:	ee17 0a90 	vmov	r0, s15
 80071f2:	f7f9 f959 	bl	80004a8 <__aeabi_f2d>
 80071f6:	a30c      	add	r3, pc, #48	; (adr r3, 8007228 <_ZN9PMW3901UY7processEv+0x260>)
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	f7f9 f9ac 	bl	8000558 <__aeabi_dmul>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4620      	mov	r0, r4
 8007206:	4629      	mov	r1, r5
 8007208:	f7f8 fff0 	bl	80001ec <__adddf3>
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	4610      	mov	r0, r2
 8007212:	4619      	mov	r1, r3
 8007214:	f7f9 fc78 	bl	8000b08 <__aeabi_d2f>
 8007218:	4602      	mov	r2, r0
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8007220:	bf00      	nop
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bdb0      	pop	{r4, r5, r7, pc}
 8007228:	9999999a 	.word	0x9999999a
 800722c:	3fb99999 	.word	0x3fb99999
 8007230:	3e4ccccd 	.word	0x3e4ccccd
 8007234:	3c8e8a72 	.word	0x3c8e8a72
 8007238:	44160000 	.word	0x44160000

0800723c <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* PMW3901UY::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 800723c:	b590      	push	{r4, r7, lr}
 800723e:	b08f      	sub	sp, #60	; 0x3c
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	3304      	adds	r3, #4
 800724a:	2200      	movs	r2, #0
 800724c:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_POS_X)!=senorsList.end())
 800724e:	2314      	movs	r3, #20
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	f107 030c 	add.w	r3, r7, #12
 8007256:	4619      	mov	r1, r3
 8007258:	6838      	ldr	r0, [r7, #0]
 800725a:	f7fc fbe1 	bl	8003a20 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 800725e:	4603      	mov	r3, r0
 8007260:	60bb      	str	r3, [r7, #8]
 8007262:	6838      	ldr	r0, [r7, #0]
 8007264:	f7fc fbf5 	bl	8003a52 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8007268:	4603      	mov	r3, r0
 800726a:	613b      	str	r3, [r7, #16]
 800726c:	f107 0210 	add.w	r2, r7, #16
 8007270:	f107 0308 	add.w	r3, r7, #8
 8007274:	4611      	mov	r1, r2
 8007276:	4618      	mov	r0, r3
 8007278:	f7fc fbf8 	bl	8003a6c <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d01a      	beq.n	80072b8 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x7c>
	{
		strcat(packet,toCharArray(x_pos));
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	1d1c      	adds	r4, r3, #4
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 800728e:	4619      	mov	r1, r3
 8007290:	4610      	mov	r0, r2
 8007292:	f7fc f8b7 	bl	8003404 <_ZN15PrintableSensor11toCharArrayEi>
 8007296:	4603      	mov	r3, r0
 8007298:	4619      	mov	r1, r3
 800729a:	4620      	mov	r0, r4
 800729c:	f00d fce2 	bl	8014c64 <strcat>
		strcat(packet,",");
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	1d1c      	adds	r4, r3, #4
 80072a4:	4620      	mov	r0, r4
 80072a6:	f7f8 ff93 	bl	80001d0 <strlen>
 80072aa:	4603      	mov	r3, r0
 80072ac:	4423      	add	r3, r4
 80072ae:	4955      	ldr	r1, [pc, #340]	; (8007404 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1c8>)
 80072b0:	461a      	mov	r2, r3
 80072b2:	460b      	mov	r3, r1
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_POS_Y)!=senorsList.end())
 80072b8:	2315      	movs	r3, #21
 80072ba:	61bb      	str	r3, [r7, #24]
 80072bc:	f107 0318 	add.w	r3, r7, #24
 80072c0:	4619      	mov	r1, r3
 80072c2:	6838      	ldr	r0, [r7, #0]
 80072c4:	f7fc fbac 	bl	8003a20 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80072c8:	4603      	mov	r3, r0
 80072ca:	617b      	str	r3, [r7, #20]
 80072cc:	6838      	ldr	r0, [r7, #0]
 80072ce:	f7fc fbc0 	bl	8003a52 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80072d2:	4603      	mov	r3, r0
 80072d4:	61fb      	str	r3, [r7, #28]
 80072d6:	f107 021c 	add.w	r2, r7, #28
 80072da:	f107 0314 	add.w	r3, r7, #20
 80072de:	4611      	mov	r1, r2
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7fc fbc3 	bl	8003a6c <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d01a      	beq.n	8007322 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0xe6>
	{
		strcat(packet,toCharArray(y_pos));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	1d1c      	adds	r4, r3, #4
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 80072f8:	4619      	mov	r1, r3
 80072fa:	4610      	mov	r0, r2
 80072fc:	f7fc f882 	bl	8003404 <_ZN15PrintableSensor11toCharArrayEi>
 8007300:	4603      	mov	r3, r0
 8007302:	4619      	mov	r1, r3
 8007304:	4620      	mov	r0, r4
 8007306:	f00d fcad 	bl	8014c64 <strcat>
		strcat(packet,",");
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	1d1c      	adds	r4, r3, #4
 800730e:	4620      	mov	r0, r4
 8007310:	f7f8 ff5e 	bl	80001d0 <strlen>
 8007314:	4603      	mov	r3, r0
 8007316:	4423      	add	r3, r4
 8007318:	493a      	ldr	r1, [pc, #232]	; (8007404 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1c8>)
 800731a:	461a      	mov	r2, r3
 800731c:	460b      	mov	r3, r1
 800731e:	881b      	ldrh	r3, [r3, #0]
 8007320:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_FLOW_X)!=senorsList.end())
 8007322:	2316      	movs	r3, #22
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
 8007326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800732a:	4619      	mov	r1, r3
 800732c:	6838      	ldr	r0, [r7, #0]
 800732e:	f7fc fb77 	bl	8003a20 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8007332:	4603      	mov	r3, r0
 8007334:	623b      	str	r3, [r7, #32]
 8007336:	6838      	ldr	r0, [r7, #0]
 8007338:	f7fc fb8b 	bl	8003a52 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 800733c:	4603      	mov	r3, r0
 800733e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007340:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007344:	f107 0320 	add.w	r3, r7, #32
 8007348:	4611      	mov	r1, r2
 800734a:	4618      	mov	r0, r3
 800734c:	f7fc fb8e 	bl	8003a6c <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d01a      	beq.n	800738c <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x150>
	{
		strcat(packet,toCharArray(flow_x));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	1d1c      	adds	r4, r3, #4
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8007362:	4619      	mov	r1, r3
 8007364:	4610      	mov	r0, r2
 8007366:	f7fc f84d 	bl	8003404 <_ZN15PrintableSensor11toCharArrayEi>
 800736a:	4603      	mov	r3, r0
 800736c:	4619      	mov	r1, r3
 800736e:	4620      	mov	r0, r4
 8007370:	f00d fc78 	bl	8014c64 <strcat>
		strcat(packet,",");
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	1d1c      	adds	r4, r3, #4
 8007378:	4620      	mov	r0, r4
 800737a:	f7f8 ff29 	bl	80001d0 <strlen>
 800737e:	4603      	mov	r3, r0
 8007380:	4423      	add	r3, r4
 8007382:	4920      	ldr	r1, [pc, #128]	; (8007404 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1c8>)
 8007384:	461a      	mov	r2, r3
 8007386:	460b      	mov	r3, r1
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_FLOW_Y)!=senorsList.end())
 800738c:	2317      	movs	r3, #23
 800738e:	633b      	str	r3, [r7, #48]	; 0x30
 8007390:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007394:	4619      	mov	r1, r3
 8007396:	6838      	ldr	r0, [r7, #0]
 8007398:	f7fc fb42 	bl	8003a20 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 800739c:	4603      	mov	r3, r0
 800739e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073a0:	6838      	ldr	r0, [r7, #0]
 80073a2:	f7fc fb56 	bl	8003a52 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80073a6:	4603      	mov	r3, r0
 80073a8:	637b      	str	r3, [r7, #52]	; 0x34
 80073aa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80073ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80073b2:	4611      	mov	r1, r2
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fc fb59 	bl	8003a6c <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d01a      	beq.n	80073f6 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1ba>
	{
		strcat(packet,toCharArray(flow_y));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	1d1c      	adds	r4, r3, #4
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 80073cc:	4619      	mov	r1, r3
 80073ce:	4610      	mov	r0, r2
 80073d0:	f7fc f818 	bl	8003404 <_ZN15PrintableSensor11toCharArrayEi>
 80073d4:	4603      	mov	r3, r0
 80073d6:	4619      	mov	r1, r3
 80073d8:	4620      	mov	r0, r4
 80073da:	f00d fc43 	bl	8014c64 <strcat>
		strcat(packet,",");
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	1d1c      	adds	r4, r3, #4
 80073e2:	4620      	mov	r0, r4
 80073e4:	f7f8 fef4 	bl	80001d0 <strlen>
 80073e8:	4603      	mov	r3, r0
 80073ea:	4423      	add	r3, r4
 80073ec:	4905      	ldr	r1, [pc, #20]	; (8007404 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1c8>)
 80073ee:	461a      	mov	r2, r3
 80073f0:	460b      	mov	r3, r1
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	3304      	adds	r3, #4
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	373c      	adds	r7, #60	; 0x3c
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd90      	pop	{r4, r7, pc}
 8007402:	bf00      	nop
 8007404:	08014e38 	.word	0x08014e38

08007408 <_ZN11PID_Control3outEv>:
 */

#include "PID_Control.hpp"

float PID_Control::out()
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
	error = reference - signal;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a1b      	ldr	r3, [r3, #32]
 8007414:	ed93 7a00 	vldr	s14, [r3]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	edd3 7a00 	vldr	s15, [r3]
 8007420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	pid_p = error;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	60da      	str	r2, [r3, #12]
	pid_i = pid_i + error;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	ed93 7a04 	vldr	s14, [r3, #16]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800743e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	edc3 7a04 	vstr	s15, [r3, #16]
	pid_d = -(signal-last_signal);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	69db      	ldr	r3, [r3, #28]
 800744c:	ed93 7a00 	vldr	s14, [r3]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800745a:	eef1 7a67 	vneg.f32	s15, s15
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	edc3 7a05 	vstr	s15, [r3, #20]

	if (last_signal!=signal)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	edd3 7a00 	vldr	s15, [r3]
 8007472:	eeb4 7a67 	vcmp.f32	s14, s15
 8007476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747a:	d001      	beq.n	8007480 <_ZN11PID_Control3outEv+0x78>
		int test=0;
 800747c:	2300      	movs	r3, #0
 800747e:	60fb      	str	r3, [r7, #12]

	last_signal = signal;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	69db      	ldr	r3, [r3, #28]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	629a      	str	r2, [r3, #40]	; 0x28

	return Kp*pid_p + Ki*pid_i + Kd*pid_d;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	ed93 7a00 	vldr	s14, [r3]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	edd3 7a03 	vldr	s15, [r3, #12]
 8007496:	ee27 7a27 	vmul.f32	s14, s14, s15
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	edd3 6a01 	vldr	s13, [r3, #4]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80074a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80074ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074be:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80074c2:	eeb0 0a67 	vmov.f32	s0, s15
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80074d4:	4b0e      	ldr	r3, [pc, #56]	; (8007510 <HAL_Init+0x40>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a0d      	ldr	r2, [pc, #52]	; (8007510 <HAL_Init+0x40>)
 80074da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80074e0:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <HAL_Init+0x40>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a0a      	ldr	r2, [pc, #40]	; (8007510 <HAL_Init+0x40>)
 80074e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80074ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80074ec:	4b08      	ldr	r3, [pc, #32]	; (8007510 <HAL_Init+0x40>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a07      	ldr	r2, [pc, #28]	; (8007510 <HAL_Init+0x40>)
 80074f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80074f8:	2003      	movs	r0, #3
 80074fa:	f000 fd0e 	bl	8007f1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80074fe:	200f      	movs	r0, #15
 8007500:	f7fb fd9c 	bl	800303c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007504:	f7fb f92a 	bl	800275c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	40023c00 	.word	0x40023c00

08007514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007514:	b480      	push	{r7}
 8007516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007518:	4b06      	ldr	r3, [pc, #24]	; (8007534 <HAL_IncTick+0x20>)
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	461a      	mov	r2, r3
 800751e:	4b06      	ldr	r3, [pc, #24]	; (8007538 <HAL_IncTick+0x24>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4413      	add	r3, r2
 8007524:	4a04      	ldr	r2, [pc, #16]	; (8007538 <HAL_IncTick+0x24>)
 8007526:	6013      	str	r3, [r2, #0]
}
 8007528:	bf00      	nop
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	2000000c 	.word	0x2000000c
 8007538:	20000ea4 	.word	0x20000ea4

0800753c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800753c:	b480      	push	{r7}
 800753e:	af00      	add	r7, sp, #0
  return uwTick;
 8007540:	4b03      	ldr	r3, [pc, #12]	; (8007550 <HAL_GetTick+0x14>)
 8007542:	681b      	ldr	r3, [r3, #0]
}
 8007544:	4618      	mov	r0, r3
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	20000ea4 	.word	0x20000ea4

08007554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800755c:	f7ff ffee 	bl	800753c <HAL_GetTick>
 8007560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756c:	d005      	beq.n	800757a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800756e:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <HAL_Delay+0x44>)
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4413      	add	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800757a:	bf00      	nop
 800757c:	f7ff ffde 	bl	800753c <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	429a      	cmp	r2, r3
 800758a:	d8f7      	bhi.n	800757c <HAL_Delay+0x28>
  {
  }
}
 800758c:	bf00      	nop
 800758e:	bf00      	nop
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	2000000c 	.word	0x2000000c

0800759c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e033      	b.n	800761a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d109      	bne.n	80075ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7fb f8fa 	bl	80027b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	f003 0310 	and.w	r3, r3, #16
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d118      	bne.n	800760c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80075e2:	f023 0302 	bic.w	r3, r3, #2
 80075e6:	f043 0202 	orr.w	r2, r3, #2
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fa68 	bl	8007ac4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fe:	f023 0303 	bic.w	r3, r3, #3
 8007602:	f043 0201 	orr.w	r2, r3, #1
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	641a      	str	r2, [r3, #64]	; 0x40
 800760a:	e001      	b.n	8007610 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007618:	7bfb      	ldrb	r3, [r7, #15]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
	...

08007624 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007630:	2300      	movs	r3, #0
 8007632:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800763a:	2b01      	cmp	r3, #1
 800763c:	d101      	bne.n	8007642 <HAL_ADC_Start_DMA+0x1e>
 800763e:	2302      	movs	r3, #2
 8007640:	e0e9      	b.n	8007816 <HAL_ADC_Start_DMA+0x1f2>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b01      	cmp	r3, #1
 8007656:	d018      	beq.n	800768a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689a      	ldr	r2, [r3, #8]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f042 0201 	orr.w	r2, r2, #1
 8007666:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007668:	4b6d      	ldr	r3, [pc, #436]	; (8007820 <HAL_ADC_Start_DMA+0x1fc>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a6d      	ldr	r2, [pc, #436]	; (8007824 <HAL_ADC_Start_DMA+0x200>)
 800766e:	fba2 2303 	umull	r2, r3, r2, r3
 8007672:	0c9a      	lsrs	r2, r3, #18
 8007674:	4613      	mov	r3, r2
 8007676:	005b      	lsls	r3, r3, #1
 8007678:	4413      	add	r3, r2
 800767a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800767c:	e002      	b.n	8007684 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	3b01      	subs	r3, #1
 8007682:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1f9      	bne.n	800767e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007698:	d107      	bne.n	80076aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	f040 80a1 	bne.w	80077fc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80076c2:	f023 0301 	bic.w	r3, r3, #1
 80076c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d007      	beq.n	80076ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80076e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f8:	d106      	bne.n	8007708 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076fe:	f023 0206 	bic.w	r2, r3, #6
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	645a      	str	r2, [r3, #68]	; 0x44
 8007706:	e002      	b.n	800770e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007716:	4b44      	ldr	r3, [pc, #272]	; (8007828 <HAL_ADC_Start_DMA+0x204>)
 8007718:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771e:	4a43      	ldr	r2, [pc, #268]	; (800782c <HAL_ADC_Start_DMA+0x208>)
 8007720:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007726:	4a42      	ldr	r2, [pc, #264]	; (8007830 <HAL_ADC_Start_DMA+0x20c>)
 8007728:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772e:	4a41      	ldr	r2, [pc, #260]	; (8007834 <HAL_ADC_Start_DMA+0x210>)
 8007730:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800773a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800774a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800775a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	334c      	adds	r3, #76	; 0x4c
 8007766:	4619      	mov	r1, r3
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f000 fcb8 	bl	80080e0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f003 031f 	and.w	r3, r3, #31
 8007778:	2b00      	cmp	r3, #0
 800777a:	d12a      	bne.n	80077d2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a2d      	ldr	r2, [pc, #180]	; (8007838 <HAL_ADC_Start_DMA+0x214>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d015      	beq.n	80077b2 <HAL_ADC_Start_DMA+0x18e>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a2c      	ldr	r2, [pc, #176]	; (800783c <HAL_ADC_Start_DMA+0x218>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d105      	bne.n	800779c <HAL_ADC_Start_DMA+0x178>
 8007790:	4b25      	ldr	r3, [pc, #148]	; (8007828 <HAL_ADC_Start_DMA+0x204>)
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f003 031f 	and.w	r3, r3, #31
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00a      	beq.n	80077b2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a27      	ldr	r2, [pc, #156]	; (8007840 <HAL_ADC_Start_DMA+0x21c>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d136      	bne.n	8007814 <HAL_ADC_Start_DMA+0x1f0>
 80077a6:	4b20      	ldr	r3, [pc, #128]	; (8007828 <HAL_ADC_Start_DMA+0x204>)
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f003 0310 	and.w	r3, r3, #16
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d130      	bne.n	8007814 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d129      	bne.n	8007814 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689a      	ldr	r2, [r3, #8]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80077ce:	609a      	str	r2, [r3, #8]
 80077d0:	e020      	b.n	8007814 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a18      	ldr	r2, [pc, #96]	; (8007838 <HAL_ADC_Start_DMA+0x214>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d11b      	bne.n	8007814 <HAL_ADC_Start_DMA+0x1f0>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d114      	bne.n	8007814 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80077f8:	609a      	str	r2, [r3, #8]
 80077fa:	e00b      	b.n	8007814 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007800:	f043 0210 	orr.w	r2, r3, #16
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800780c:	f043 0201 	orr.w	r2, r3, #1
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	20000004 	.word	0x20000004
 8007824:	431bde83 	.word	0x431bde83
 8007828:	40012300 	.word	0x40012300
 800782c:	08007cbd 	.word	0x08007cbd
 8007830:	08007d77 	.word	0x08007d77
 8007834:	08007d93 	.word	0x08007d93
 8007838:	40012000 	.word	0x40012000
 800783c:	40012100 	.word	0x40012100
 8007840:	40012200 	.word	0x40012200

08007844 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007894:	2b01      	cmp	r3, #1
 8007896:	d101      	bne.n	800789c <HAL_ADC_ConfigChannel+0x1c>
 8007898:	2302      	movs	r3, #2
 800789a:	e105      	b.n	8007aa8 <HAL_ADC_ConfigChannel+0x228>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b09      	cmp	r3, #9
 80078aa:	d925      	bls.n	80078f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68d9      	ldr	r1, [r3, #12]
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	461a      	mov	r2, r3
 80078ba:	4613      	mov	r3, r2
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	4413      	add	r3, r2
 80078c0:	3b1e      	subs	r3, #30
 80078c2:	2207      	movs	r2, #7
 80078c4:	fa02 f303 	lsl.w	r3, r2, r3
 80078c8:	43da      	mvns	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	400a      	ands	r2, r1
 80078d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68d9      	ldr	r1, [r3, #12]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	4618      	mov	r0, r3
 80078e4:	4603      	mov	r3, r0
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	4403      	add	r3, r0
 80078ea:	3b1e      	subs	r3, #30
 80078ec:	409a      	lsls	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	430a      	orrs	r2, r1
 80078f4:	60da      	str	r2, [r3, #12]
 80078f6:	e022      	b.n	800793e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6919      	ldr	r1, [r3, #16]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	b29b      	uxth	r3, r3
 8007904:	461a      	mov	r2, r3
 8007906:	4613      	mov	r3, r2
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	4413      	add	r3, r2
 800790c:	2207      	movs	r2, #7
 800790e:	fa02 f303 	lsl.w	r3, r2, r3
 8007912:	43da      	mvns	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	400a      	ands	r2, r1
 800791a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6919      	ldr	r1, [r3, #16]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	689a      	ldr	r2, [r3, #8]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	b29b      	uxth	r3, r3
 800792c:	4618      	mov	r0, r3
 800792e:	4603      	mov	r3, r0
 8007930:	005b      	lsls	r3, r3, #1
 8007932:	4403      	add	r3, r0
 8007934:	409a      	lsls	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	430a      	orrs	r2, r1
 800793c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	2b06      	cmp	r3, #6
 8007944:	d824      	bhi.n	8007990 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	4613      	mov	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	3b05      	subs	r3, #5
 8007958:	221f      	movs	r2, #31
 800795a:	fa02 f303 	lsl.w	r3, r2, r3
 800795e:	43da      	mvns	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	400a      	ands	r2, r1
 8007966:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	4618      	mov	r0, r3
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	685a      	ldr	r2, [r3, #4]
 800797a:	4613      	mov	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	3b05      	subs	r3, #5
 8007982:	fa00 f203 	lsl.w	r2, r0, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	430a      	orrs	r2, r1
 800798c:	635a      	str	r2, [r3, #52]	; 0x34
 800798e:	e04c      	b.n	8007a2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	2b0c      	cmp	r3, #12
 8007996:	d824      	bhi.n	80079e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	4613      	mov	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	3b23      	subs	r3, #35	; 0x23
 80079aa:	221f      	movs	r2, #31
 80079ac:	fa02 f303 	lsl.w	r3, r2, r3
 80079b0:	43da      	mvns	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	400a      	ands	r2, r1
 80079b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	4618      	mov	r0, r3
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	4613      	mov	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	3b23      	subs	r3, #35	; 0x23
 80079d4:	fa00 f203 	lsl.w	r2, r0, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	631a      	str	r2, [r3, #48]	; 0x30
 80079e0:	e023      	b.n	8007a2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	4613      	mov	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	3b41      	subs	r3, #65	; 0x41
 80079f4:	221f      	movs	r2, #31
 80079f6:	fa02 f303 	lsl.w	r3, r2, r3
 80079fa:	43da      	mvns	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	400a      	ands	r2, r1
 8007a02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	4618      	mov	r0, r3
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	4613      	mov	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	3b41      	subs	r3, #65	; 0x41
 8007a1e:	fa00 f203 	lsl.w	r2, r0, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007a2a:	4b22      	ldr	r3, [pc, #136]	; (8007ab4 <HAL_ADC_ConfigChannel+0x234>)
 8007a2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a21      	ldr	r2, [pc, #132]	; (8007ab8 <HAL_ADC_ConfigChannel+0x238>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d109      	bne.n	8007a4c <HAL_ADC_ConfigChannel+0x1cc>
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b12      	cmp	r3, #18
 8007a3e:	d105      	bne.n	8007a4c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a19      	ldr	r2, [pc, #100]	; (8007ab8 <HAL_ADC_ConfigChannel+0x238>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d123      	bne.n	8007a9e <HAL_ADC_ConfigChannel+0x21e>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b10      	cmp	r3, #16
 8007a5c:	d003      	beq.n	8007a66 <HAL_ADC_ConfigChannel+0x1e6>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b11      	cmp	r3, #17
 8007a64:	d11b      	bne.n	8007a9e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b10      	cmp	r3, #16
 8007a78:	d111      	bne.n	8007a9e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007a7a:	4b10      	ldr	r3, [pc, #64]	; (8007abc <HAL_ADC_ConfigChannel+0x23c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a10      	ldr	r2, [pc, #64]	; (8007ac0 <HAL_ADC_ConfigChannel+0x240>)
 8007a80:	fba2 2303 	umull	r2, r3, r2, r3
 8007a84:	0c9a      	lsrs	r2, r3, #18
 8007a86:	4613      	mov	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007a90:	e002      	b.n	8007a98 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	3b01      	subs	r3, #1
 8007a96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1f9      	bne.n	8007a92 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	40012300 	.word	0x40012300
 8007ab8:	40012000 	.word	0x40012000
 8007abc:	20000004 	.word	0x20000004
 8007ac0:	431bde83 	.word	0x431bde83

08007ac4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007acc:	4b79      	ldr	r3, [pc, #484]	; (8007cb4 <ADC_Init+0x1f0>)
 8007ace:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	431a      	orrs	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007af8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6859      	ldr	r1, [r3, #4]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	021a      	lsls	r2, r3, #8
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007b1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6859      	ldr	r1, [r3, #4]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689a      	ldr	r2, [r3, #8]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689a      	ldr	r2, [r3, #8]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6899      	ldr	r1, [r3, #8]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68da      	ldr	r2, [r3, #12]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b56:	4a58      	ldr	r2, [pc, #352]	; (8007cb8 <ADC_Init+0x1f4>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d022      	beq.n	8007ba2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689a      	ldr	r2, [r3, #8]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6899      	ldr	r1, [r3, #8]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007b8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6899      	ldr	r1, [r3, #8]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	609a      	str	r2, [r3, #8]
 8007ba0:	e00f      	b.n	8007bc2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689a      	ldr	r2, [r3, #8]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007bb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689a      	ldr	r2, [r3, #8]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007bc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689a      	ldr	r2, [r3, #8]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 0202 	bic.w	r2, r2, #2
 8007bd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6899      	ldr	r1, [r3, #8]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	7e1b      	ldrb	r3, [r3, #24]
 8007bdc:	005a      	lsls	r2, r3, #1
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d01b      	beq.n	8007c28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bfe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007c0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6859      	ldr	r1, [r3, #4]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	035a      	lsls	r2, r3, #13
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	605a      	str	r2, [r3, #4]
 8007c26:	e007      	b.n	8007c38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	051a      	lsls	r2, r3, #20
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007c6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6899      	ldr	r1, [r3, #8]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c7a:	025a      	lsls	r2, r3, #9
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	430a      	orrs	r2, r1
 8007c82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689a      	ldr	r2, [r3, #8]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6899      	ldr	r1, [r3, #8]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	029a      	lsls	r2, r3, #10
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	430a      	orrs	r2, r1
 8007ca6:	609a      	str	r2, [r3, #8]
}
 8007ca8:	bf00      	nop
 8007caa:	3714      	adds	r7, #20
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	40012300 	.word	0x40012300
 8007cb8:	0f000001 	.word	0x0f000001

08007cbc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d13c      	bne.n	8007d50 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d12b      	bne.n	8007d48 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d127      	bne.n	8007d48 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d006      	beq.n	8007d14 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d119      	bne.n	8007d48 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f022 0220 	bic.w	r2, r2, #32
 8007d22:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d105      	bne.n	8007d48 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d40:	f043 0201 	orr.w	r2, r3, #1
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f7ff fd7b 	bl	8007844 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007d4e:	e00e      	b.n	8007d6e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d54:	f003 0310 	and.w	r3, r3, #16
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d003      	beq.n	8007d64 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f7ff fd85 	bl	800786c <HAL_ADC_ErrorCallback>
}
 8007d62:	e004      	b.n	8007d6e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	4798      	blx	r3
}
 8007d6e:	bf00      	nop
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d82:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f7ff fd67 	bl	8007858 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d8a:	bf00      	nop
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b084      	sub	sp, #16
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2240      	movs	r2, #64	; 0x40
 8007da4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007daa:	f043 0204 	orr.w	r2, r3, #4
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f7ff fd5a 	bl	800786c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007db8:	bf00      	nop
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <__NVIC_SetPriorityGrouping>:
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f003 0307 	and.w	r3, r3, #7
 8007dce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007dd0:	4b0c      	ldr	r3, [pc, #48]	; (8007e04 <__NVIC_SetPriorityGrouping+0x44>)
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ddc:	4013      	ands	r3, r2
 8007dde:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007df2:	4a04      	ldr	r2, [pc, #16]	; (8007e04 <__NVIC_SetPriorityGrouping+0x44>)
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	60d3      	str	r3, [r2, #12]
}
 8007df8:	bf00      	nop
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	e000ed00 	.word	0xe000ed00

08007e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e0c:	4b04      	ldr	r3, [pc, #16]	; (8007e20 <__NVIC_GetPriorityGrouping+0x18>)
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	0a1b      	lsrs	r3, r3, #8
 8007e12:	f003 0307 	and.w	r3, r3, #7
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	e000ed00 	.word	0xe000ed00

08007e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	db0b      	blt.n	8007e4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e36:	79fb      	ldrb	r3, [r7, #7]
 8007e38:	f003 021f 	and.w	r2, r3, #31
 8007e3c:	4907      	ldr	r1, [pc, #28]	; (8007e5c <__NVIC_EnableIRQ+0x38>)
 8007e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e42:	095b      	lsrs	r3, r3, #5
 8007e44:	2001      	movs	r0, #1
 8007e46:	fa00 f202 	lsl.w	r2, r0, r2
 8007e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007e4e:	bf00      	nop
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	e000e100 	.word	0xe000e100

08007e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	4603      	mov	r3, r0
 8007e68:	6039      	str	r1, [r7, #0]
 8007e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	db0a      	blt.n	8007e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	490c      	ldr	r1, [pc, #48]	; (8007eac <__NVIC_SetPriority+0x4c>)
 8007e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e7e:	0112      	lsls	r2, r2, #4
 8007e80:	b2d2      	uxtb	r2, r2
 8007e82:	440b      	add	r3, r1
 8007e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007e88:	e00a      	b.n	8007ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	b2da      	uxtb	r2, r3
 8007e8e:	4908      	ldr	r1, [pc, #32]	; (8007eb0 <__NVIC_SetPriority+0x50>)
 8007e90:	79fb      	ldrb	r3, [r7, #7]
 8007e92:	f003 030f 	and.w	r3, r3, #15
 8007e96:	3b04      	subs	r3, #4
 8007e98:	0112      	lsls	r2, r2, #4
 8007e9a:	b2d2      	uxtb	r2, r2
 8007e9c:	440b      	add	r3, r1
 8007e9e:	761a      	strb	r2, [r3, #24]
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	e000e100 	.word	0xe000e100
 8007eb0:	e000ed00 	.word	0xe000ed00

08007eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b089      	sub	sp, #36	; 0x24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f003 0307 	and.w	r3, r3, #7
 8007ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	f1c3 0307 	rsb	r3, r3, #7
 8007ece:	2b04      	cmp	r3, #4
 8007ed0:	bf28      	it	cs
 8007ed2:	2304      	movcs	r3, #4
 8007ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	3304      	adds	r3, #4
 8007eda:	2b06      	cmp	r3, #6
 8007edc:	d902      	bls.n	8007ee4 <NVIC_EncodePriority+0x30>
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	3b03      	subs	r3, #3
 8007ee2:	e000      	b.n	8007ee6 <NVIC_EncodePriority+0x32>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef2:	43da      	mvns	r2, r3
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	401a      	ands	r2, r3
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007efc:	f04f 31ff 	mov.w	r1, #4294967295
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	fa01 f303 	lsl.w	r3, r1, r3
 8007f06:	43d9      	mvns	r1, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f0c:	4313      	orrs	r3, r2
         );
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3724      	adds	r7, #36	; 0x24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b082      	sub	sp, #8
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7ff ff4c 	bl	8007dc0 <__NVIC_SetPriorityGrouping>
}
 8007f28:	bf00      	nop
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	4603      	mov	r3, r0
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
 8007f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007f42:	f7ff ff61 	bl	8007e08 <__NVIC_GetPriorityGrouping>
 8007f46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	68b9      	ldr	r1, [r7, #8]
 8007f4c:	6978      	ldr	r0, [r7, #20]
 8007f4e:	f7ff ffb1 	bl	8007eb4 <NVIC_EncodePriority>
 8007f52:	4602      	mov	r2, r0
 8007f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f58:	4611      	mov	r1, r2
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7ff ff80 	bl	8007e60 <__NVIC_SetPriority>
}
 8007f60:	bf00      	nop
 8007f62:	3718      	adds	r7, #24
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7ff ff54 	bl	8007e24 <__NVIC_EnableIRQ>
}
 8007f7c:	bf00      	nop
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007f90:	f7ff fad4 	bl	800753c <HAL_GetTick>
 8007f94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e099      	b.n	80080d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f022 0201 	bic.w	r2, r2, #1
 8007fbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007fc0:	e00f      	b.n	8007fe2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007fc2:	f7ff fabb 	bl	800753c <HAL_GetTick>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	2b05      	cmp	r3, #5
 8007fce:	d908      	bls.n	8007fe2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2203      	movs	r2, #3
 8007fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e078      	b.n	80080d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0301 	and.w	r3, r3, #1
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e8      	bne.n	8007fc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007ff8:	697a      	ldr	r2, [r7, #20]
 8007ffa:	4b38      	ldr	r3, [pc, #224]	; (80080dc <HAL_DMA_Init+0x158>)
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685a      	ldr	r2, [r3, #4]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800800e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800801a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008026:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a1b      	ldr	r3, [r3, #32]
 800802c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	4313      	orrs	r3, r2
 8008032:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008038:	2b04      	cmp	r3, #4
 800803a:	d107      	bne.n	800804c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008044:	4313      	orrs	r3, r2
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	4313      	orrs	r3, r2
 800804a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	f023 0307 	bic.w	r3, r3, #7
 8008062:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008068:	697a      	ldr	r2, [r7, #20]
 800806a:	4313      	orrs	r3, r2
 800806c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	2b04      	cmp	r3, #4
 8008074:	d117      	bne.n	80080a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	4313      	orrs	r3, r2
 800807e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00e      	beq.n	80080a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fb01 	bl	8008690 <DMA_CheckFifoParam>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d008      	beq.n	80080a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2240      	movs	r2, #64	; 0x40
 8008098:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80080a2:	2301      	movs	r3, #1
 80080a4:	e016      	b.n	80080d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fab8 	bl	8008624 <DMA_CalcBaseAndBitshift>
 80080b4:	4603      	mov	r3, r0
 80080b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080bc:	223f      	movs	r2, #63	; 0x3f
 80080be:	409a      	lsls	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3718      	adds	r7, #24
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	f010803f 	.word	0xf010803f

080080e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d101      	bne.n	8008106 <HAL_DMA_Start_IT+0x26>
 8008102:	2302      	movs	r3, #2
 8008104:	e040      	b.n	8008188 <HAL_DMA_Start_IT+0xa8>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b01      	cmp	r3, #1
 8008118:	d12f      	bne.n	800817a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2202      	movs	r2, #2
 800811e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	68b9      	ldr	r1, [r7, #8]
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f000 fa4a 	bl	80085c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008138:	223f      	movs	r2, #63	; 0x3f
 800813a:	409a      	lsls	r2, r3
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f042 0216 	orr.w	r2, r2, #22
 800814e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008154:	2b00      	cmp	r3, #0
 8008156:	d007      	beq.n	8008168 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0208 	orr.w	r2, r2, #8
 8008166:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f042 0201 	orr.w	r2, r2, #1
 8008176:	601a      	str	r2, [r3, #0]
 8008178:	e005      	b.n	8008186 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008182:	2302      	movs	r3, #2
 8008184:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008186:	7dfb      	ldrb	r3, [r7, #23]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3718      	adds	r7, #24
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800819c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800819e:	f7ff f9cd 	bl	800753c <HAL_GetTick>
 80081a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d008      	beq.n	80081c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2280      	movs	r2, #128	; 0x80
 80081b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e052      	b.n	8008268 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f022 0216 	bic.w	r2, r2, #22
 80081d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	695a      	ldr	r2, [r3, #20]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d103      	bne.n	80081f2 <HAL_DMA_Abort+0x62>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d007      	beq.n	8008202 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f022 0208 	bic.w	r2, r2, #8
 8008200:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f022 0201 	bic.w	r2, r2, #1
 8008210:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008212:	e013      	b.n	800823c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008214:	f7ff f992 	bl	800753c <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	2b05      	cmp	r3, #5
 8008220:	d90c      	bls.n	800823c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2220      	movs	r2, #32
 8008226:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2203      	movs	r2, #3
 800822c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e015      	b.n	8008268 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1e4      	bne.n	8008214 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800824e:	223f      	movs	r2, #63	; 0x3f
 8008250:	409a      	lsls	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b02      	cmp	r3, #2
 8008282:	d004      	beq.n	800828e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2280      	movs	r2, #128	; 0x80
 8008288:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e00c      	b.n	80082a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2205      	movs	r2, #5
 8008292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f022 0201 	bic.w	r2, r2, #1
 80082a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80082c0:	4b8e      	ldr	r3, [pc, #568]	; (80084fc <HAL_DMA_IRQHandler+0x248>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a8e      	ldr	r2, [pc, #568]	; (8008500 <HAL_DMA_IRQHandler+0x24c>)
 80082c6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ca:	0a9b      	lsrs	r3, r3, #10
 80082cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082de:	2208      	movs	r2, #8
 80082e0:	409a      	lsls	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	4013      	ands	r3, r2
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d01a      	beq.n	8008320 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d013      	beq.n	8008320 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 0204 	bic.w	r2, r2, #4
 8008306:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800830c:	2208      	movs	r2, #8
 800830e:	409a      	lsls	r2, r3
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008318:	f043 0201 	orr.w	r2, r3, #1
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008324:	2201      	movs	r2, #1
 8008326:	409a      	lsls	r2, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	4013      	ands	r3, r2
 800832c:	2b00      	cmp	r3, #0
 800832e:	d012      	beq.n	8008356 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00b      	beq.n	8008356 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008342:	2201      	movs	r2, #1
 8008344:	409a      	lsls	r2, r3
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800834e:	f043 0202 	orr.w	r2, r3, #2
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800835a:	2204      	movs	r2, #4
 800835c:	409a      	lsls	r2, r3
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	4013      	ands	r3, r2
 8008362:	2b00      	cmp	r3, #0
 8008364:	d012      	beq.n	800838c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0302 	and.w	r3, r3, #2
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00b      	beq.n	800838c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008378:	2204      	movs	r2, #4
 800837a:	409a      	lsls	r2, r3
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008384:	f043 0204 	orr.w	r2, r3, #4
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008390:	2210      	movs	r2, #16
 8008392:	409a      	lsls	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4013      	ands	r3, r2
 8008398:	2b00      	cmp	r3, #0
 800839a:	d043      	beq.n	8008424 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 0308 	and.w	r3, r3, #8
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d03c      	beq.n	8008424 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ae:	2210      	movs	r2, #16
 80083b0:	409a      	lsls	r2, r3
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d018      	beq.n	80083f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d108      	bne.n	80083e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d024      	beq.n	8008424 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	4798      	blx	r3
 80083e2:	e01f      	b.n	8008424 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d01b      	beq.n	8008424 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	4798      	blx	r3
 80083f4:	e016      	b.n	8008424 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008400:	2b00      	cmp	r3, #0
 8008402:	d107      	bne.n	8008414 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f022 0208 	bic.w	r2, r2, #8
 8008412:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008418:	2b00      	cmp	r3, #0
 800841a:	d003      	beq.n	8008424 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008428:	2220      	movs	r2, #32
 800842a:	409a      	lsls	r2, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4013      	ands	r3, r2
 8008430:	2b00      	cmp	r3, #0
 8008432:	f000 808f 	beq.w	8008554 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 0310 	and.w	r3, r3, #16
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 8087 	beq.w	8008554 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800844a:	2220      	movs	r2, #32
 800844c:	409a      	lsls	r2, r3
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b05      	cmp	r3, #5
 800845c:	d136      	bne.n	80084cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 0216 	bic.w	r2, r2, #22
 800846c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	695a      	ldr	r2, [r3, #20]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800847c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008482:	2b00      	cmp	r3, #0
 8008484:	d103      	bne.n	800848e <HAL_DMA_IRQHandler+0x1da>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800848a:	2b00      	cmp	r3, #0
 800848c:	d007      	beq.n	800849e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f022 0208 	bic.w	r2, r2, #8
 800849c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a2:	223f      	movs	r2, #63	; 0x3f
 80084a4:	409a      	lsls	r2, r3
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d07e      	beq.n	80085c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	4798      	blx	r3
        }
        return;
 80084ca:	e079      	b.n	80085c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d01d      	beq.n	8008516 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10d      	bne.n	8008504 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d031      	beq.n	8008554 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	4798      	blx	r3
 80084f8:	e02c      	b.n	8008554 <HAL_DMA_IRQHandler+0x2a0>
 80084fa:	bf00      	nop
 80084fc:	20000004 	.word	0x20000004
 8008500:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008508:	2b00      	cmp	r3, #0
 800850a:	d023      	beq.n	8008554 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	4798      	blx	r3
 8008514:	e01e      	b.n	8008554 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10f      	bne.n	8008544 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 0210 	bic.w	r2, r2, #16
 8008532:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008548:	2b00      	cmp	r3, #0
 800854a:	d003      	beq.n	8008554 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008558:	2b00      	cmp	r3, #0
 800855a:	d032      	beq.n	80085c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	2b00      	cmp	r3, #0
 8008566:	d022      	beq.n	80085ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2205      	movs	r2, #5
 800856c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f022 0201 	bic.w	r2, r2, #1
 800857e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	3301      	adds	r3, #1
 8008584:	60bb      	str	r3, [r7, #8]
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	429a      	cmp	r2, r3
 800858a:	d307      	bcc.n	800859c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1f2      	bne.n	8008580 <HAL_DMA_IRQHandler+0x2cc>
 800859a:	e000      	b.n	800859e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800859c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d005      	beq.n	80085c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	4798      	blx	r3
 80085be:	e000      	b.n	80085c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80085c0:	bf00      	nop
    }
  }
}
 80085c2:	3718      	adds	r7, #24
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
 80085d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80085e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	683a      	ldr	r2, [r7, #0]
 80085ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	2b40      	cmp	r3, #64	; 0x40
 80085f4:	d108      	bne.n	8008608 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008606:	e007      	b.n	8008618 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	60da      	str	r2, [r3, #12]
}
 8008618:	bf00      	nop
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	b2db      	uxtb	r3, r3
 8008632:	3b10      	subs	r3, #16
 8008634:	4a14      	ldr	r2, [pc, #80]	; (8008688 <DMA_CalcBaseAndBitshift+0x64>)
 8008636:	fba2 2303 	umull	r2, r3, r2, r3
 800863a:	091b      	lsrs	r3, r3, #4
 800863c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800863e:	4a13      	ldr	r2, [pc, #76]	; (800868c <DMA_CalcBaseAndBitshift+0x68>)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4413      	add	r3, r2
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2b03      	cmp	r3, #3
 8008650:	d909      	bls.n	8008666 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800865a:	f023 0303 	bic.w	r3, r3, #3
 800865e:	1d1a      	adds	r2, r3, #4
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	659a      	str	r2, [r3, #88]	; 0x58
 8008664:	e007      	b.n	8008676 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800866e:	f023 0303 	bic.w	r3, r3, #3
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	aaaaaaab 	.word	0xaaaaaaab
 800868c:	08014fbc 	.word	0x08014fbc

08008690 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d11f      	bne.n	80086ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	2b03      	cmp	r3, #3
 80086ae:	d856      	bhi.n	800875e <DMA_CheckFifoParam+0xce>
 80086b0:	a201      	add	r2, pc, #4	; (adr r2, 80086b8 <DMA_CheckFifoParam+0x28>)
 80086b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b6:	bf00      	nop
 80086b8:	080086c9 	.word	0x080086c9
 80086bc:	080086db 	.word	0x080086db
 80086c0:	080086c9 	.word	0x080086c9
 80086c4:	0800875f 	.word	0x0800875f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d046      	beq.n	8008762 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086d8:	e043      	b.n	8008762 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80086e2:	d140      	bne.n	8008766 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086e8:	e03d      	b.n	8008766 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086f2:	d121      	bne.n	8008738 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	d837      	bhi.n	800876a <DMA_CheckFifoParam+0xda>
 80086fa:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <DMA_CheckFifoParam+0x70>)
 80086fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008700:	08008711 	.word	0x08008711
 8008704:	08008717 	.word	0x08008717
 8008708:	08008711 	.word	0x08008711
 800870c:	08008729 	.word	0x08008729
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	73fb      	strb	r3, [r7, #15]
      break;
 8008714:	e030      	b.n	8008778 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d025      	beq.n	800876e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008726:	e022      	b.n	800876e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008730:	d11f      	bne.n	8008772 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008736:	e01c      	b.n	8008772 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2b02      	cmp	r3, #2
 800873c:	d903      	bls.n	8008746 <DMA_CheckFifoParam+0xb6>
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	2b03      	cmp	r3, #3
 8008742:	d003      	beq.n	800874c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008744:	e018      	b.n	8008778 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	73fb      	strb	r3, [r7, #15]
      break;
 800874a:	e015      	b.n	8008778 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00e      	beq.n	8008776 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	73fb      	strb	r3, [r7, #15]
      break;
 800875c:	e00b      	b.n	8008776 <DMA_CheckFifoParam+0xe6>
      break;
 800875e:	bf00      	nop
 8008760:	e00a      	b.n	8008778 <DMA_CheckFifoParam+0xe8>
      break;
 8008762:	bf00      	nop
 8008764:	e008      	b.n	8008778 <DMA_CheckFifoParam+0xe8>
      break;
 8008766:	bf00      	nop
 8008768:	e006      	b.n	8008778 <DMA_CheckFifoParam+0xe8>
      break;
 800876a:	bf00      	nop
 800876c:	e004      	b.n	8008778 <DMA_CheckFifoParam+0xe8>
      break;
 800876e:	bf00      	nop
 8008770:	e002      	b.n	8008778 <DMA_CheckFifoParam+0xe8>
      break;   
 8008772:	bf00      	nop
 8008774:	e000      	b.n	8008778 <DMA_CheckFifoParam+0xe8>
      break;
 8008776:	bf00      	nop
    }
  } 
  
  return status; 
 8008778:	7bfb      	ldrb	r3, [r7, #15]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3714      	adds	r7, #20
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop

08008788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008788:	b480      	push	{r7}
 800878a:	b089      	sub	sp, #36	; 0x24
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008792:	2300      	movs	r3, #0
 8008794:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008796:	2300      	movs	r3, #0
 8008798:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800879a:	2300      	movs	r3, #0
 800879c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800879e:	2300      	movs	r3, #0
 80087a0:	61fb      	str	r3, [r7, #28]
 80087a2:	e16b      	b.n	8008a7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80087a4:	2201      	movs	r2, #1
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	fa02 f303 	lsl.w	r3, r2, r3
 80087ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	4013      	ands	r3, r2
 80087b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80087b8:	693a      	ldr	r2, [r7, #16]
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	429a      	cmp	r2, r3
 80087be:	f040 815a 	bne.w	8008a76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	f003 0303 	and.w	r3, r3, #3
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d005      	beq.n	80087da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d130      	bne.n	800883c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	005b      	lsls	r3, r3, #1
 80087e4:	2203      	movs	r2, #3
 80087e6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ea:	43db      	mvns	r3, r3
 80087ec:	69ba      	ldr	r2, [r7, #24]
 80087ee:	4013      	ands	r3, r2
 80087f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	68da      	ldr	r2, [r3, #12]
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	005b      	lsls	r3, r3, #1
 80087fa:	fa02 f303 	lsl.w	r3, r2, r3
 80087fe:	69ba      	ldr	r2, [r7, #24]
 8008800:	4313      	orrs	r3, r2
 8008802:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	69ba      	ldr	r2, [r7, #24]
 8008808:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008810:	2201      	movs	r2, #1
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	fa02 f303 	lsl.w	r3, r2, r3
 8008818:	43db      	mvns	r3, r3
 800881a:	69ba      	ldr	r2, [r7, #24]
 800881c:	4013      	ands	r3, r2
 800881e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	091b      	lsrs	r3, r3, #4
 8008826:	f003 0201 	and.w	r2, r3, #1
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	fa02 f303 	lsl.w	r3, r2, r3
 8008830:	69ba      	ldr	r2, [r7, #24]
 8008832:	4313      	orrs	r3, r2
 8008834:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	69ba      	ldr	r2, [r7, #24]
 800883a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f003 0303 	and.w	r3, r3, #3
 8008844:	2b03      	cmp	r3, #3
 8008846:	d017      	beq.n	8008878 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	005b      	lsls	r3, r3, #1
 8008852:	2203      	movs	r2, #3
 8008854:	fa02 f303 	lsl.w	r3, r2, r3
 8008858:	43db      	mvns	r3, r3
 800885a:	69ba      	ldr	r2, [r7, #24]
 800885c:	4013      	ands	r3, r2
 800885e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	689a      	ldr	r2, [r3, #8]
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	005b      	lsls	r3, r3, #1
 8008868:	fa02 f303 	lsl.w	r3, r2, r3
 800886c:	69ba      	ldr	r2, [r7, #24]
 800886e:	4313      	orrs	r3, r2
 8008870:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	69ba      	ldr	r2, [r7, #24]
 8008876:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	f003 0303 	and.w	r3, r3, #3
 8008880:	2b02      	cmp	r3, #2
 8008882:	d123      	bne.n	80088cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	08da      	lsrs	r2, r3, #3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	3208      	adds	r2, #8
 800888c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008890:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	f003 0307 	and.w	r3, r3, #7
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	220f      	movs	r2, #15
 800889c:	fa02 f303 	lsl.w	r3, r2, r3
 80088a0:	43db      	mvns	r3, r3
 80088a2:	69ba      	ldr	r2, [r7, #24]
 80088a4:	4013      	ands	r3, r2
 80088a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	691a      	ldr	r2, [r3, #16]
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	f003 0307 	and.w	r3, r3, #7
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	fa02 f303 	lsl.w	r3, r2, r3
 80088b8:	69ba      	ldr	r2, [r7, #24]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	08da      	lsrs	r2, r3, #3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	3208      	adds	r2, #8
 80088c6:	69b9      	ldr	r1, [r7, #24]
 80088c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	005b      	lsls	r3, r3, #1
 80088d6:	2203      	movs	r2, #3
 80088d8:	fa02 f303 	lsl.w	r3, r2, r3
 80088dc:	43db      	mvns	r3, r3
 80088de:	69ba      	ldr	r2, [r7, #24]
 80088e0:	4013      	ands	r3, r2
 80088e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f003 0203 	and.w	r2, r3, #3
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	005b      	lsls	r3, r3, #1
 80088f0:	fa02 f303 	lsl.w	r3, r2, r3
 80088f4:	69ba      	ldr	r2, [r7, #24]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008908:	2b00      	cmp	r3, #0
 800890a:	f000 80b4 	beq.w	8008a76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800890e:	2300      	movs	r3, #0
 8008910:	60fb      	str	r3, [r7, #12]
 8008912:	4b60      	ldr	r3, [pc, #384]	; (8008a94 <HAL_GPIO_Init+0x30c>)
 8008914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008916:	4a5f      	ldr	r2, [pc, #380]	; (8008a94 <HAL_GPIO_Init+0x30c>)
 8008918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800891c:	6453      	str	r3, [r2, #68]	; 0x44
 800891e:	4b5d      	ldr	r3, [pc, #372]	; (8008a94 <HAL_GPIO_Init+0x30c>)
 8008920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800892a:	4a5b      	ldr	r2, [pc, #364]	; (8008a98 <HAL_GPIO_Init+0x310>)
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	089b      	lsrs	r3, r3, #2
 8008930:	3302      	adds	r3, #2
 8008932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	f003 0303 	and.w	r3, r3, #3
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	220f      	movs	r2, #15
 8008942:	fa02 f303 	lsl.w	r3, r2, r3
 8008946:	43db      	mvns	r3, r3
 8008948:	69ba      	ldr	r2, [r7, #24]
 800894a:	4013      	ands	r3, r2
 800894c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a52      	ldr	r2, [pc, #328]	; (8008a9c <HAL_GPIO_Init+0x314>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d02b      	beq.n	80089ae <HAL_GPIO_Init+0x226>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a51      	ldr	r2, [pc, #324]	; (8008aa0 <HAL_GPIO_Init+0x318>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d025      	beq.n	80089aa <HAL_GPIO_Init+0x222>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a50      	ldr	r2, [pc, #320]	; (8008aa4 <HAL_GPIO_Init+0x31c>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d01f      	beq.n	80089a6 <HAL_GPIO_Init+0x21e>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a4f      	ldr	r2, [pc, #316]	; (8008aa8 <HAL_GPIO_Init+0x320>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d019      	beq.n	80089a2 <HAL_GPIO_Init+0x21a>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a4e      	ldr	r2, [pc, #312]	; (8008aac <HAL_GPIO_Init+0x324>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d013      	beq.n	800899e <HAL_GPIO_Init+0x216>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a4d      	ldr	r2, [pc, #308]	; (8008ab0 <HAL_GPIO_Init+0x328>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d00d      	beq.n	800899a <HAL_GPIO_Init+0x212>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a4c      	ldr	r2, [pc, #304]	; (8008ab4 <HAL_GPIO_Init+0x32c>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d007      	beq.n	8008996 <HAL_GPIO_Init+0x20e>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a4b      	ldr	r2, [pc, #300]	; (8008ab8 <HAL_GPIO_Init+0x330>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d101      	bne.n	8008992 <HAL_GPIO_Init+0x20a>
 800898e:	2307      	movs	r3, #7
 8008990:	e00e      	b.n	80089b0 <HAL_GPIO_Init+0x228>
 8008992:	2308      	movs	r3, #8
 8008994:	e00c      	b.n	80089b0 <HAL_GPIO_Init+0x228>
 8008996:	2306      	movs	r3, #6
 8008998:	e00a      	b.n	80089b0 <HAL_GPIO_Init+0x228>
 800899a:	2305      	movs	r3, #5
 800899c:	e008      	b.n	80089b0 <HAL_GPIO_Init+0x228>
 800899e:	2304      	movs	r3, #4
 80089a0:	e006      	b.n	80089b0 <HAL_GPIO_Init+0x228>
 80089a2:	2303      	movs	r3, #3
 80089a4:	e004      	b.n	80089b0 <HAL_GPIO_Init+0x228>
 80089a6:	2302      	movs	r3, #2
 80089a8:	e002      	b.n	80089b0 <HAL_GPIO_Init+0x228>
 80089aa:	2301      	movs	r3, #1
 80089ac:	e000      	b.n	80089b0 <HAL_GPIO_Init+0x228>
 80089ae:	2300      	movs	r3, #0
 80089b0:	69fa      	ldr	r2, [r7, #28]
 80089b2:	f002 0203 	and.w	r2, r2, #3
 80089b6:	0092      	lsls	r2, r2, #2
 80089b8:	4093      	lsls	r3, r2
 80089ba:	69ba      	ldr	r2, [r7, #24]
 80089bc:	4313      	orrs	r3, r2
 80089be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80089c0:	4935      	ldr	r1, [pc, #212]	; (8008a98 <HAL_GPIO_Init+0x310>)
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	089b      	lsrs	r3, r3, #2
 80089c6:	3302      	adds	r3, #2
 80089c8:	69ba      	ldr	r2, [r7, #24]
 80089ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80089ce:	4b3b      	ldr	r3, [pc, #236]	; (8008abc <HAL_GPIO_Init+0x334>)
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	43db      	mvns	r3, r3
 80089d8:	69ba      	ldr	r2, [r7, #24]
 80089da:	4013      	ands	r3, r2
 80089dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80089f2:	4a32      	ldr	r2, [pc, #200]	; (8008abc <HAL_GPIO_Init+0x334>)
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80089f8:	4b30      	ldr	r3, [pc, #192]	; (8008abc <HAL_GPIO_Init+0x334>)
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	43db      	mvns	r3, r3
 8008a02:	69ba      	ldr	r2, [r7, #24]
 8008a04:	4013      	ands	r3, r2
 8008a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d003      	beq.n	8008a1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008a14:	69ba      	ldr	r2, [r7, #24]
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008a1c:	4a27      	ldr	r2, [pc, #156]	; (8008abc <HAL_GPIO_Init+0x334>)
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008a22:	4b26      	ldr	r3, [pc, #152]	; (8008abc <HAL_GPIO_Init+0x334>)
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	43db      	mvns	r3, r3
 8008a2c:	69ba      	ldr	r2, [r7, #24]
 8008a2e:	4013      	ands	r3, r2
 8008a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d003      	beq.n	8008a46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008a46:	4a1d      	ldr	r2, [pc, #116]	; (8008abc <HAL_GPIO_Init+0x334>)
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008a4c:	4b1b      	ldr	r3, [pc, #108]	; (8008abc <HAL_GPIO_Init+0x334>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	43db      	mvns	r3, r3
 8008a56:	69ba      	ldr	r2, [r7, #24]
 8008a58:	4013      	ands	r3, r2
 8008a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d003      	beq.n	8008a70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008a68:	69ba      	ldr	r2, [r7, #24]
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008a70:	4a12      	ldr	r2, [pc, #72]	; (8008abc <HAL_GPIO_Init+0x334>)
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	61fb      	str	r3, [r7, #28]
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	2b0f      	cmp	r3, #15
 8008a80:	f67f ae90 	bls.w	80087a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008a84:	bf00      	nop
 8008a86:	bf00      	nop
 8008a88:	3724      	adds	r7, #36	; 0x24
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	40023800 	.word	0x40023800
 8008a98:	40013800 	.word	0x40013800
 8008a9c:	40020000 	.word	0x40020000
 8008aa0:	40020400 	.word	0x40020400
 8008aa4:	40020800 	.word	0x40020800
 8008aa8:	40020c00 	.word	0x40020c00
 8008aac:	40021000 	.word	0x40021000
 8008ab0:	40021400 	.word	0x40021400
 8008ab4:	40021800 	.word	0x40021800
 8008ab8:	40021c00 	.word	0x40021c00
 8008abc:	40013c00 	.word	0x40013c00

08008ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	807b      	strh	r3, [r7, #2]
 8008acc:	4613      	mov	r3, r2
 8008ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008ad0:	787b      	ldrb	r3, [r7, #1]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d003      	beq.n	8008ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008ad6:	887a      	ldrh	r2, [r7, #2]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008adc:	e003      	b.n	8008ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008ade:	887b      	ldrh	r3, [r7, #2]
 8008ae0:	041a      	lsls	r2, r3, #16
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	619a      	str	r2, [r3, #24]
}
 8008ae6:	bf00      	nop
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
	...

08008af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008afe:	4b08      	ldr	r3, [pc, #32]	; (8008b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b00:	695a      	ldr	r2, [r3, #20]
 8008b02:	88fb      	ldrh	r3, [r7, #6]
 8008b04:	4013      	ands	r3, r2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d006      	beq.n	8008b18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008b0a:	4a05      	ldr	r2, [pc, #20]	; (8008b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b0c:	88fb      	ldrh	r3, [r7, #6]
 8008b0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008b10:	88fb      	ldrh	r3, [r7, #6]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7f8 fafe 	bl	8001114 <HAL_GPIO_EXTI_Callback>
  }
}
 8008b18:	bf00      	nop
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	40013c00 	.word	0x40013c00

08008b24 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008b24:	b590      	push	{r4, r7, lr}
 8008b26:	b08d      	sub	sp, #52	; 0x34
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b32:	6a3b      	ldr	r3, [r7, #32]
 8008b34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f006 ff9d 	bl	800fa7a <USB_GetMode>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f040 848a 	bne.w	800945c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f006 ff01 	bl	800f954 <USB_ReadInterrupts>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f000 8480 	beq.w	800945a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	0a1b      	lsrs	r3, r3, #8
 8008b64:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f006 feee 	bl	800f954 <USB_ReadInterrupts>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	f003 0302 	and.w	r3, r3, #2
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d107      	bne.n	8008b92 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	695a      	ldr	r2, [r3, #20]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f002 0202 	and.w	r2, r2, #2
 8008b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f006 fedc 	bl	800f954 <USB_ReadInterrupts>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	f003 0310 	and.w	r3, r3, #16
 8008ba2:	2b10      	cmp	r3, #16
 8008ba4:	d161      	bne.n	8008c6a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	699a      	ldr	r2, [r3, #24]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f022 0210 	bic.w	r2, r2, #16
 8008bb4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	f003 020f 	and.w	r2, r3, #15
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	00db      	lsls	r3, r3, #3
 8008bc6:	4413      	add	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	0c5b      	lsrs	r3, r3, #17
 8008bda:	f003 030f 	and.w	r3, r3, #15
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d124      	bne.n	8008c2c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008be2:	69ba      	ldr	r2, [r7, #24]
 8008be4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008be8:	4013      	ands	r3, r2
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d035      	beq.n	8008c5a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	091b      	lsrs	r3, r3, #4
 8008bf6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008bf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	461a      	mov	r2, r3
 8008c00:	6a38      	ldr	r0, [r7, #32]
 8008c02:	f006 fd55 	bl	800f6b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	691a      	ldr	r2, [r3, #16]
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	091b      	lsrs	r3, r3, #4
 8008c0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c12:	441a      	add	r2, r3
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	6a1a      	ldr	r2, [r3, #32]
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	091b      	lsrs	r3, r3, #4
 8008c20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c24:	441a      	add	r2, r3
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	621a      	str	r2, [r3, #32]
 8008c2a:	e016      	b.n	8008c5a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	0c5b      	lsrs	r3, r3, #17
 8008c30:	f003 030f 	and.w	r3, r3, #15
 8008c34:	2b06      	cmp	r3, #6
 8008c36:	d110      	bne.n	8008c5a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008c3e:	2208      	movs	r2, #8
 8008c40:	4619      	mov	r1, r3
 8008c42:	6a38      	ldr	r0, [r7, #32]
 8008c44:	f006 fd34 	bl	800f6b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	6a1a      	ldr	r2, [r3, #32]
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	091b      	lsrs	r3, r3, #4
 8008c50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c54:	441a      	add	r2, r3
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	699a      	ldr	r2, [r3, #24]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f042 0210 	orr.w	r2, r2, #16
 8008c68:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f006 fe70 	bl	800f954 <USB_ReadInterrupts>
 8008c74:	4603      	mov	r3, r0
 8008c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c7a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008c7e:	f040 80a7 	bne.w	8008dd0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008c82:	2300      	movs	r3, #0
 8008c84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f006 fe75 	bl	800f97a <USB_ReadDevAllOutEpInterrupt>
 8008c90:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008c92:	e099      	b.n	8008dc8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f000 808e 	beq.w	8008dbc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ca6:	b2d2      	uxtb	r2, r2
 8008ca8:	4611      	mov	r1, r2
 8008caa:	4618      	mov	r0, r3
 8008cac:	f006 fe99 	bl	800f9e2 <USB_ReadDevOutEPInterrupt>
 8008cb0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00c      	beq.n	8008cd6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	015a      	lsls	r2, r3, #5
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc8:	461a      	mov	r2, r3
 8008cca:	2301      	movs	r3, #1
 8008ccc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008cce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fe61 	bl	8009998 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f003 0308 	and.w	r3, r3, #8
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00c      	beq.n	8008cfa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cec:	461a      	mov	r2, r3
 8008cee:	2308      	movs	r3, #8
 8008cf0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008cf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 ff37 	bl	8009b68 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	f003 0310 	and.w	r3, r3, #16
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d008      	beq.n	8008d16 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d06:	015a      	lsls	r2, r3, #5
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d10:	461a      	mov	r2, r3
 8008d12:	2310      	movs	r3, #16
 8008d14:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	f003 0302 	and.w	r3, r3, #2
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d030      	beq.n	8008d82 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008d20:	6a3b      	ldr	r3, [r7, #32]
 8008d22:	695b      	ldr	r3, [r3, #20]
 8008d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d28:	2b80      	cmp	r3, #128	; 0x80
 8008d2a:	d109      	bne.n	8008d40 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	69fa      	ldr	r2, [r7, #28]
 8008d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d3e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d42:	4613      	mov	r3, r2
 8008d44:	00db      	lsls	r3, r3, #3
 8008d46:	4413      	add	r3, r2
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	4413      	add	r3, r2
 8008d52:	3304      	adds	r3, #4
 8008d54:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	78db      	ldrb	r3, [r3, #3]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d108      	bne.n	8008d70 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2200      	movs	r2, #0
 8008d62:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f009 fd10 	bl	8012790 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d72:	015a      	lsls	r2, r3, #5
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	4413      	add	r3, r2
 8008d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	2302      	movs	r3, #2
 8008d80:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	f003 0320 	and.w	r3, r3, #32
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d008      	beq.n	8008d9e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	015a      	lsls	r2, r3, #5
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d98:	461a      	mov	r2, r3
 8008d9a:	2320      	movs	r3, #32
 8008d9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d009      	beq.n	8008dbc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	015a      	lsls	r2, r3, #5
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	4413      	add	r3, r2
 8008db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db4:	461a      	mov	r2, r3
 8008db6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008dba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc4:	085b      	lsrs	r3, r3, #1
 8008dc6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f47f af62 	bne.w	8008c94 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f006 fdbd 	bl	800f954 <USB_ReadInterrupts>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008de0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008de4:	f040 80db 	bne.w	8008f9e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f006 fdde 	bl	800f9ae <USB_ReadDevAllInEpInterrupt>
 8008df2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008df4:	2300      	movs	r3, #0
 8008df6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008df8:	e0cd      	b.n	8008f96 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfc:	f003 0301 	and.w	r3, r3, #1
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 80c2 	beq.w	8008f8a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e0c:	b2d2      	uxtb	r2, r2
 8008e0e:	4611      	mov	r1, r2
 8008e10:	4618      	mov	r0, r3
 8008e12:	f006 fe04 	bl	800fa1e <USB_ReadDevInEPInterrupt>
 8008e16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d057      	beq.n	8008ed2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e24:	f003 030f 	and.w	r3, r3, #15
 8008e28:	2201      	movs	r2, #1
 8008e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e2e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	43db      	mvns	r3, r3
 8008e3c:	69f9      	ldr	r1, [r7, #28]
 8008e3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e42:	4013      	ands	r3, r2
 8008e44:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e48:	015a      	lsls	r2, r3, #5
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e52:	461a      	mov	r2, r3
 8008e54:	2301      	movs	r3, #1
 8008e56:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d132      	bne.n	8008ec6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008e60:	6879      	ldr	r1, [r7, #4]
 8008e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e64:	4613      	mov	r3, r2
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	4413      	add	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	440b      	add	r3, r1
 8008e6e:	334c      	adds	r3, #76	; 0x4c
 8008e70:	6819      	ldr	r1, [r3, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e76:	4613      	mov	r3, r2
 8008e78:	00db      	lsls	r3, r3, #3
 8008e7a:	4413      	add	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4403      	add	r3, r0
 8008e80:	3348      	adds	r3, #72	; 0x48
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4419      	add	r1, r3
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	00db      	lsls	r3, r3, #3
 8008e8e:	4413      	add	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4403      	add	r3, r0
 8008e94:	334c      	adds	r3, #76	; 0x4c
 8008e96:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d113      	bne.n	8008ec6 <HAL_PCD_IRQHandler+0x3a2>
 8008e9e:	6879      	ldr	r1, [r7, #4]
 8008ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	00db      	lsls	r3, r3, #3
 8008ea6:	4413      	add	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	440b      	add	r3, r1
 8008eac:	3354      	adds	r3, #84	; 0x54
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d108      	bne.n	8008ec6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6818      	ldr	r0, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	f006 fe0b 	bl	800fadc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f009 fbda 	bl	8012686 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	f003 0308 	and.w	r3, r3, #8
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d008      	beq.n	8008eee <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee8:	461a      	mov	r2, r3
 8008eea:	2308      	movs	r3, #8
 8008eec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	f003 0310 	and.w	r3, r3, #16
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d008      	beq.n	8008f0a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efa:	015a      	lsls	r2, r3, #5
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	4413      	add	r3, r2
 8008f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f04:	461a      	mov	r2, r3
 8008f06:	2310      	movs	r3, #16
 8008f08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d008      	beq.n	8008f26 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f20:	461a      	mov	r2, r3
 8008f22:	2340      	movs	r3, #64	; 0x40
 8008f24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	f003 0302 	and.w	r3, r3, #2
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d023      	beq.n	8008f78 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f32:	6a38      	ldr	r0, [r7, #32]
 8008f34:	f005 fe54 	bl	800ebe0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	00db      	lsls	r3, r3, #3
 8008f3e:	4413      	add	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	3338      	adds	r3, #56	; 0x38
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	4413      	add	r3, r2
 8008f48:	3304      	adds	r3, #4
 8008f4a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	78db      	ldrb	r3, [r3, #3]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d108      	bne.n	8008f66 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	2200      	movs	r2, #0
 8008f58:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	4619      	mov	r1, r3
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f009 fc27 	bl	80127b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f68:	015a      	lsls	r2, r3, #5
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f72:	461a      	mov	r2, r3
 8008f74:	2302      	movs	r3, #2
 8008f76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d003      	beq.n	8008f8a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008f82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fc79 	bl	800987c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f92:	085b      	lsrs	r3, r3, #1
 8008f94:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f47f af2e 	bne.w	8008dfa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f006 fcd6 	bl	800f954 <USB_ReadInterrupts>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fb2:	d122      	bne.n	8008ffa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	69fa      	ldr	r2, [r7, #28]
 8008fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fc2:	f023 0301 	bic.w	r3, r3, #1
 8008fc6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d108      	bne.n	8008fe4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008fda:	2100      	movs	r1, #0
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fe09 	bl	8009bf4 <HAL_PCDEx_LPM_Callback>
 8008fe2:	e002      	b.n	8008fea <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f009 fbc5 	bl	8012774 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	695a      	ldr	r2, [r3, #20]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008ff8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4618      	mov	r0, r3
 8009000:	f006 fca8 	bl	800f954 <USB_ReadInterrupts>
 8009004:	4603      	mov	r3, r0
 8009006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800900a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800900e:	d112      	bne.n	8009036 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f003 0301 	and.w	r3, r3, #1
 800901c:	2b01      	cmp	r3, #1
 800901e:	d102      	bne.n	8009026 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f009 fb81 	bl	8012728 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	695a      	ldr	r2, [r3, #20]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009034:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4618      	mov	r0, r3
 800903c:	f006 fc8a 	bl	800f954 <USB_ReadInterrupts>
 8009040:	4603      	mov	r3, r0
 8009042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800904a:	f040 80b7 	bne.w	80091bc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	69fa      	ldr	r2, [r7, #28]
 8009058:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800905c:	f023 0301 	bic.w	r3, r3, #1
 8009060:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2110      	movs	r1, #16
 8009068:	4618      	mov	r0, r3
 800906a:	f005 fdb9 	bl	800ebe0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800906e:	2300      	movs	r3, #0
 8009070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009072:	e046      	b.n	8009102 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009076:	015a      	lsls	r2, r3, #5
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	4413      	add	r3, r2
 800907c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009080:	461a      	mov	r2, r3
 8009082:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009086:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908a:	015a      	lsls	r2, r3, #5
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	4413      	add	r3, r2
 8009090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009098:	0151      	lsls	r1, r2, #5
 800909a:	69fa      	ldr	r2, [r7, #28]
 800909c:	440a      	add	r2, r1
 800909e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80090a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80090a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090aa:	015a      	lsls	r2, r3, #5
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	4413      	add	r3, r2
 80090b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b4:	461a      	mov	r2, r3
 80090b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80090ba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80090bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090be:	015a      	lsls	r2, r3, #5
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	4413      	add	r3, r2
 80090c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090cc:	0151      	lsls	r1, r2, #5
 80090ce:	69fa      	ldr	r2, [r7, #28]
 80090d0:	440a      	add	r2, r1
 80090d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80090da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80090dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090de:	015a      	lsls	r2, r3, #5
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	4413      	add	r3, r2
 80090e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090ec:	0151      	lsls	r1, r2, #5
 80090ee:	69fa      	ldr	r2, [r7, #28]
 80090f0:	440a      	add	r2, r1
 80090f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090fa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80090fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fe:	3301      	adds	r3, #1
 8009100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009108:	429a      	cmp	r2, r3
 800910a:	d3b3      	bcc.n	8009074 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009112:	69db      	ldr	r3, [r3, #28]
 8009114:	69fa      	ldr	r2, [r7, #28]
 8009116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800911a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800911e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009124:	2b00      	cmp	r3, #0
 8009126:	d016      	beq.n	8009156 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009132:	69fa      	ldr	r2, [r7, #28]
 8009134:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009138:	f043 030b 	orr.w	r3, r3, #11
 800913c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009148:	69fa      	ldr	r2, [r7, #28]
 800914a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800914e:	f043 030b 	orr.w	r3, r3, #11
 8009152:	6453      	str	r3, [r2, #68]	; 0x44
 8009154:	e015      	b.n	8009182 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	69fa      	ldr	r2, [r7, #28]
 8009160:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009164:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009168:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800916c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	69fa      	ldr	r2, [r7, #28]
 8009178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800917c:	f043 030b 	orr.w	r3, r3, #11
 8009180:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	69fa      	ldr	r2, [r7, #28]
 800918c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009190:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009194:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6818      	ldr	r0, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80091a6:	461a      	mov	r2, r3
 80091a8:	f006 fc98 	bl	800fadc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	695a      	ldr	r2, [r3, #20]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80091ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4618      	mov	r0, r3
 80091c2:	f006 fbc7 	bl	800f954 <USB_ReadInterrupts>
 80091c6:	4603      	mov	r3, r0
 80091c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091d0:	d124      	bne.n	800921c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f006 fc5d 	bl	800fa96 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f005 fd31 	bl	800ec48 <USB_GetDevSpeed>
 80091e6:	4603      	mov	r3, r0
 80091e8:	461a      	mov	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681c      	ldr	r4, [r3, #0]
 80091f2:	f001 f96d 	bl	800a4d0 <HAL_RCC_GetHCLKFreq>
 80091f6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	461a      	mov	r2, r3
 8009200:	4620      	mov	r0, r4
 8009202:	f005 fc4b 	bl	800ea9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f009 fa65 	bl	80126d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	695a      	ldr	r2, [r3, #20]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800921a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4618      	mov	r0, r3
 8009222:	f006 fb97 	bl	800f954 <USB_ReadInterrupts>
 8009226:	4603      	mov	r3, r0
 8009228:	f003 0308 	and.w	r3, r3, #8
 800922c:	2b08      	cmp	r3, #8
 800922e:	d10a      	bne.n	8009246 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f009 fa42 	bl	80126ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	695a      	ldr	r2, [r3, #20]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f002 0208 	and.w	r2, r2, #8
 8009244:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4618      	mov	r0, r3
 800924c:	f006 fb82 	bl	800f954 <USB_ReadInterrupts>
 8009250:	4603      	mov	r3, r0
 8009252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009256:	2b80      	cmp	r3, #128	; 0x80
 8009258:	d122      	bne.n	80092a0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800925a:	6a3b      	ldr	r3, [r7, #32]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009262:	6a3b      	ldr	r3, [r7, #32]
 8009264:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009266:	2301      	movs	r3, #1
 8009268:	627b      	str	r3, [r7, #36]	; 0x24
 800926a:	e014      	b.n	8009296 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800926c:	6879      	ldr	r1, [r7, #4]
 800926e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009270:	4613      	mov	r3, r2
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	4413      	add	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	440b      	add	r3, r1
 800927a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d105      	bne.n	8009290 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	b2db      	uxtb	r3, r3
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 fac5 	bl	800981a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	3301      	adds	r3, #1
 8009294:	627b      	str	r3, [r7, #36]	; 0x24
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800929c:	429a      	cmp	r2, r3
 800929e:	d3e5      	bcc.n	800926c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f006 fb55 	bl	800f954 <USB_ReadInterrupts>
 80092aa:	4603      	mov	r3, r0
 80092ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092b4:	d13b      	bne.n	800932e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80092b6:	2301      	movs	r3, #1
 80092b8:	627b      	str	r3, [r7, #36]	; 0x24
 80092ba:	e02b      	b.n	8009314 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	015a      	lsls	r2, r3, #5
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	4413      	add	r3, r2
 80092c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80092cc:	6879      	ldr	r1, [r7, #4]
 80092ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092d0:	4613      	mov	r3, r2
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	4413      	add	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	440b      	add	r3, r1
 80092da:	3340      	adds	r3, #64	; 0x40
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d115      	bne.n	800930e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80092e2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	da12      	bge.n	800930e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80092e8:	6879      	ldr	r1, [r7, #4]
 80092ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ec:	4613      	mov	r3, r2
 80092ee:	00db      	lsls	r3, r3, #3
 80092f0:	4413      	add	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	440b      	add	r3, r1
 80092f6:	333f      	adds	r3, #63	; 0x3f
 80092f8:	2201      	movs	r2, #1
 80092fa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80092fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009304:	b2db      	uxtb	r3, r3
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 fa86 	bl	800981a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800930e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009310:	3301      	adds	r3, #1
 8009312:	627b      	str	r3, [r7, #36]	; 0x24
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800931a:	429a      	cmp	r2, r3
 800931c:	d3ce      	bcc.n	80092bc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	695a      	ldr	r2, [r3, #20]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800932c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4618      	mov	r0, r3
 8009334:	f006 fb0e 	bl	800f954 <USB_ReadInterrupts>
 8009338:	4603      	mov	r3, r0
 800933a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800933e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009342:	d155      	bne.n	80093f0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009344:	2301      	movs	r3, #1
 8009346:	627b      	str	r3, [r7, #36]	; 0x24
 8009348:	e045      	b.n	80093d6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800934a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934c:	015a      	lsls	r2, r3, #5
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	4413      	add	r3, r2
 8009352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800935a:	6879      	ldr	r1, [r7, #4]
 800935c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800935e:	4613      	mov	r3, r2
 8009360:	00db      	lsls	r3, r3, #3
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	440b      	add	r3, r1
 8009368:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d12e      	bne.n	80093d0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009372:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009374:	2b00      	cmp	r3, #0
 8009376:	da2b      	bge.n	80093d0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009384:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009388:	429a      	cmp	r2, r3
 800938a:	d121      	bne.n	80093d0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800938c:	6879      	ldr	r1, [r7, #4]
 800938e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009390:	4613      	mov	r3, r2
 8009392:	00db      	lsls	r3, r3, #3
 8009394:	4413      	add	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	440b      	add	r3, r1
 800939a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800939e:	2201      	movs	r2, #1
 80093a0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80093a2:	6a3b      	ldr	r3, [r7, #32]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80093aa:	6a3b      	ldr	r3, [r7, #32]
 80093ac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80093ae:	6a3b      	ldr	r3, [r7, #32]
 80093b0:	695b      	ldr	r3, [r3, #20]
 80093b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10a      	bne.n	80093d0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	69fa      	ldr	r2, [r7, #28]
 80093c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80093cc:	6053      	str	r3, [r2, #4]
            break;
 80093ce:	e007      	b.n	80093e0 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	3301      	adds	r3, #1
 80093d4:	627b      	str	r3, [r7, #36]	; 0x24
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093dc:	429a      	cmp	r2, r3
 80093de:	d3b4      	bcc.n	800934a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	695a      	ldr	r2, [r3, #20]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80093ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f006 faad 	bl	800f954 <USB_ReadInterrupts>
 80093fa:	4603      	mov	r3, r0
 80093fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009404:	d10a      	bne.n	800941c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f009 f9e6 	bl	80127d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	695a      	ldr	r2, [r3, #20]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800941a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4618      	mov	r0, r3
 8009422:	f006 fa97 	bl	800f954 <USB_ReadInterrupts>
 8009426:	4603      	mov	r3, r0
 8009428:	f003 0304 	and.w	r3, r3, #4
 800942c:	2b04      	cmp	r3, #4
 800942e:	d115      	bne.n	800945c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	f003 0304 	and.w	r3, r3, #4
 800943e:	2b00      	cmp	r3, #0
 8009440:	d002      	beq.n	8009448 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f009 f9d6 	bl	80127f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6859      	ldr	r1, [r3, #4]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	69ba      	ldr	r2, [r7, #24]
 8009454:	430a      	orrs	r2, r1
 8009456:	605a      	str	r2, [r3, #4]
 8009458:	e000      	b.n	800945c <HAL_PCD_IRQHandler+0x938>
      return;
 800945a:	bf00      	nop
    }
  }
}
 800945c:	3734      	adds	r7, #52	; 0x34
 800945e:	46bd      	mov	sp, r7
 8009460:	bd90      	pop	{r4, r7, pc}

08009462 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b082      	sub	sp, #8
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	460b      	mov	r3, r1
 800946c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009474:	2b01      	cmp	r3, #1
 8009476:	d101      	bne.n	800947c <HAL_PCD_SetAddress+0x1a>
 8009478:	2302      	movs	r3, #2
 800947a:	e013      	b.n	80094a4 <HAL_PCD_SetAddress+0x42>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	78fa      	ldrb	r2, [r7, #3]
 8009488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	78fa      	ldrb	r2, [r7, #3]
 8009492:	4611      	mov	r1, r2
 8009494:	4618      	mov	r0, r3
 8009496:	f006 fa37 	bl	800f908 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	4608      	mov	r0, r1
 80094b6:	4611      	mov	r1, r2
 80094b8:	461a      	mov	r2, r3
 80094ba:	4603      	mov	r3, r0
 80094bc:	70fb      	strb	r3, [r7, #3]
 80094be:	460b      	mov	r3, r1
 80094c0:	803b      	strh	r3, [r7, #0]
 80094c2:	4613      	mov	r3, r2
 80094c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80094ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	da0f      	bge.n	80094f2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094d2:	78fb      	ldrb	r3, [r7, #3]
 80094d4:	f003 020f 	and.w	r2, r3, #15
 80094d8:	4613      	mov	r3, r2
 80094da:	00db      	lsls	r3, r3, #3
 80094dc:	4413      	add	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	3338      	adds	r3, #56	; 0x38
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	4413      	add	r3, r2
 80094e6:	3304      	adds	r3, #4
 80094e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2201      	movs	r2, #1
 80094ee:	705a      	strb	r2, [r3, #1]
 80094f0:	e00f      	b.n	8009512 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094f2:	78fb      	ldrb	r3, [r7, #3]
 80094f4:	f003 020f 	and.w	r2, r3, #15
 80094f8:	4613      	mov	r3, r2
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	4413      	add	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	4413      	add	r3, r2
 8009508:	3304      	adds	r3, #4
 800950a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009512:	78fb      	ldrb	r3, [r7, #3]
 8009514:	f003 030f 	and.w	r3, r3, #15
 8009518:	b2da      	uxtb	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800951e:	883a      	ldrh	r2, [r7, #0]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	78ba      	ldrb	r2, [r7, #2]
 8009528:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	785b      	ldrb	r3, [r3, #1]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d004      	beq.n	800953c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	b29a      	uxth	r2, r3
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800953c:	78bb      	ldrb	r3, [r7, #2]
 800953e:	2b02      	cmp	r3, #2
 8009540:	d102      	bne.n	8009548 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800954e:	2b01      	cmp	r3, #1
 8009550:	d101      	bne.n	8009556 <HAL_PCD_EP_Open+0xaa>
 8009552:	2302      	movs	r3, #2
 8009554:	e00e      	b.n	8009574 <HAL_PCD_EP_Open+0xc8>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2201      	movs	r2, #1
 800955a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68f9      	ldr	r1, [r7, #12]
 8009564:	4618      	mov	r0, r3
 8009566:	f005 fb94 	bl	800ec92 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009572:	7afb      	ldrb	r3, [r7, #11]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	607a      	str	r2, [r7, #4]
 8009586:	603b      	str	r3, [r7, #0]
 8009588:	460b      	mov	r3, r1
 800958a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800958c:	7afb      	ldrb	r3, [r7, #11]
 800958e:	f003 020f 	and.w	r2, r3, #15
 8009592:	4613      	mov	r3, r2
 8009594:	00db      	lsls	r3, r3, #3
 8009596:	4413      	add	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	4413      	add	r3, r2
 80095a2:	3304      	adds	r3, #4
 80095a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	2200      	movs	r2, #0
 80095b6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	2200      	movs	r2, #0
 80095bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80095be:	7afb      	ldrb	r3, [r7, #11]
 80095c0:	f003 030f 	and.w	r3, r3, #15
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d102      	bne.n	80095d8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80095d8:	7afb      	ldrb	r3, [r7, #11]
 80095da:	f003 030f 	and.w	r3, r3, #15
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d109      	bne.n	80095f6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6818      	ldr	r0, [r3, #0]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	461a      	mov	r2, r3
 80095ee:	6979      	ldr	r1, [r7, #20]
 80095f0:	f005 fe1e 	bl	800f230 <USB_EP0StartXfer>
 80095f4:	e008      	b.n	8009608 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6818      	ldr	r0, [r3, #0]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	461a      	mov	r2, r3
 8009602:	6979      	ldr	r1, [r7, #20]
 8009604:	f005 fbcc 	bl	800eda0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3718      	adds	r7, #24
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b086      	sub	sp, #24
 8009616:	af00      	add	r7, sp, #0
 8009618:	60f8      	str	r0, [r7, #12]
 800961a:	607a      	str	r2, [r7, #4]
 800961c:	603b      	str	r3, [r7, #0]
 800961e:	460b      	mov	r3, r1
 8009620:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009622:	7afb      	ldrb	r3, [r7, #11]
 8009624:	f003 020f 	and.w	r2, r3, #15
 8009628:	4613      	mov	r3, r2
 800962a:	00db      	lsls	r3, r3, #3
 800962c:	4413      	add	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	3338      	adds	r3, #56	; 0x38
 8009632:	68fa      	ldr	r2, [r7, #12]
 8009634:	4413      	add	r3, r2
 8009636:	3304      	adds	r3, #4
 8009638:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	2200      	movs	r2, #0
 800964a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	2201      	movs	r2, #1
 8009650:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009652:	7afb      	ldrb	r3, [r7, #11]
 8009654:	f003 030f 	and.w	r3, r3, #15
 8009658:	b2da      	uxtb	r2, r3
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	2b01      	cmp	r3, #1
 8009664:	d102      	bne.n	800966c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800966c:	7afb      	ldrb	r3, [r7, #11]
 800966e:	f003 030f 	and.w	r3, r3, #15
 8009672:	2b00      	cmp	r3, #0
 8009674:	d109      	bne.n	800968a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6818      	ldr	r0, [r3, #0]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	b2db      	uxtb	r3, r3
 8009680:	461a      	mov	r2, r3
 8009682:	6979      	ldr	r1, [r7, #20]
 8009684:	f005 fdd4 	bl	800f230 <USB_EP0StartXfer>
 8009688:	e008      	b.n	800969c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6818      	ldr	r0, [r3, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	b2db      	uxtb	r3, r3
 8009694:	461a      	mov	r2, r3
 8009696:	6979      	ldr	r1, [r7, #20]
 8009698:	f005 fb82 	bl	800eda0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3718      	adds	r7, #24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b084      	sub	sp, #16
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	460b      	mov	r3, r1
 80096b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80096b2:	78fb      	ldrb	r3, [r7, #3]
 80096b4:	f003 020f 	and.w	r2, r3, #15
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	429a      	cmp	r2, r3
 80096be:	d901      	bls.n	80096c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e050      	b.n	8009766 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80096c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	da0f      	bge.n	80096ec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096cc:	78fb      	ldrb	r3, [r7, #3]
 80096ce:	f003 020f 	and.w	r2, r3, #15
 80096d2:	4613      	mov	r3, r2
 80096d4:	00db      	lsls	r3, r3, #3
 80096d6:	4413      	add	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	3338      	adds	r3, #56	; 0x38
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	4413      	add	r3, r2
 80096e0:	3304      	adds	r3, #4
 80096e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2201      	movs	r2, #1
 80096e8:	705a      	strb	r2, [r3, #1]
 80096ea:	e00d      	b.n	8009708 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80096ec:	78fa      	ldrb	r2, [r7, #3]
 80096ee:	4613      	mov	r3, r2
 80096f0:	00db      	lsls	r3, r3, #3
 80096f2:	4413      	add	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	4413      	add	r3, r2
 80096fe:	3304      	adds	r3, #4
 8009700:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2200      	movs	r2, #0
 8009706:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2201      	movs	r2, #1
 800970c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800970e:	78fb      	ldrb	r3, [r7, #3]
 8009710:	f003 030f 	and.w	r3, r3, #15
 8009714:	b2da      	uxtb	r2, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009720:	2b01      	cmp	r3, #1
 8009722:	d101      	bne.n	8009728 <HAL_PCD_EP_SetStall+0x82>
 8009724:	2302      	movs	r3, #2
 8009726:	e01e      	b.n	8009766 <HAL_PCD_EP_SetStall+0xc0>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68f9      	ldr	r1, [r7, #12]
 8009736:	4618      	mov	r0, r3
 8009738:	f006 f812 	bl	800f760 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800973c:	78fb      	ldrb	r3, [r7, #3]
 800973e:	f003 030f 	and.w	r3, r3, #15
 8009742:	2b00      	cmp	r3, #0
 8009744:	d10a      	bne.n	800975c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6818      	ldr	r0, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	b2d9      	uxtb	r1, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009756:	461a      	mov	r2, r3
 8009758:	f006 f9c0 	bl	800fadc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b084      	sub	sp, #16
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	460b      	mov	r3, r1
 8009778:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800977a:	78fb      	ldrb	r3, [r7, #3]
 800977c:	f003 020f 	and.w	r2, r3, #15
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	429a      	cmp	r2, r3
 8009786:	d901      	bls.n	800978c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e042      	b.n	8009812 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800978c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009790:	2b00      	cmp	r3, #0
 8009792:	da0f      	bge.n	80097b4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009794:	78fb      	ldrb	r3, [r7, #3]
 8009796:	f003 020f 	and.w	r2, r3, #15
 800979a:	4613      	mov	r3, r2
 800979c:	00db      	lsls	r3, r3, #3
 800979e:	4413      	add	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	3338      	adds	r3, #56	; 0x38
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	4413      	add	r3, r2
 80097a8:	3304      	adds	r3, #4
 80097aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2201      	movs	r2, #1
 80097b0:	705a      	strb	r2, [r3, #1]
 80097b2:	e00f      	b.n	80097d4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80097b4:	78fb      	ldrb	r3, [r7, #3]
 80097b6:	f003 020f 	and.w	r2, r3, #15
 80097ba:	4613      	mov	r3, r2
 80097bc:	00db      	lsls	r3, r3, #3
 80097be:	4413      	add	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	4413      	add	r3, r2
 80097ca:	3304      	adds	r3, #4
 80097cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2200      	movs	r2, #0
 80097d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80097da:	78fb      	ldrb	r3, [r7, #3]
 80097dc:	f003 030f 	and.w	r3, r3, #15
 80097e0:	b2da      	uxtb	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d101      	bne.n	80097f4 <HAL_PCD_EP_ClrStall+0x86>
 80097f0:	2302      	movs	r3, #2
 80097f2:	e00e      	b.n	8009812 <HAL_PCD_EP_ClrStall+0xa4>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	68f9      	ldr	r1, [r7, #12]
 8009802:	4618      	mov	r0, r3
 8009804:	f006 f81a 	bl	800f83c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b084      	sub	sp, #16
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
 8009822:	460b      	mov	r3, r1
 8009824:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009826:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800982a:	2b00      	cmp	r3, #0
 800982c:	da0c      	bge.n	8009848 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800982e:	78fb      	ldrb	r3, [r7, #3]
 8009830:	f003 020f 	and.w	r2, r3, #15
 8009834:	4613      	mov	r3, r2
 8009836:	00db      	lsls	r3, r3, #3
 8009838:	4413      	add	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	3338      	adds	r3, #56	; 0x38
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	4413      	add	r3, r2
 8009842:	3304      	adds	r3, #4
 8009844:	60fb      	str	r3, [r7, #12]
 8009846:	e00c      	b.n	8009862 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009848:	78fb      	ldrb	r3, [r7, #3]
 800984a:	f003 020f 	and.w	r2, r3, #15
 800984e:	4613      	mov	r3, r2
 8009850:	00db      	lsls	r3, r3, #3
 8009852:	4413      	add	r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	4413      	add	r3, r2
 800985e:	3304      	adds	r3, #4
 8009860:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68f9      	ldr	r1, [r7, #12]
 8009868:	4618      	mov	r0, r3
 800986a:	f005 fe39 	bl	800f4e0 <USB_EPStopXfer>
 800986e:	4603      	mov	r3, r0
 8009870:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009872:	7afb      	ldrb	r3, [r7, #11]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b08a      	sub	sp, #40	; 0x28
 8009880:	af02      	add	r7, sp, #8
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	4613      	mov	r3, r2
 8009894:	00db      	lsls	r3, r3, #3
 8009896:	4413      	add	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	3338      	adds	r3, #56	; 0x38
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	4413      	add	r3, r2
 80098a0:	3304      	adds	r3, #4
 80098a2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6a1a      	ldr	r2, [r3, #32]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d901      	bls.n	80098b4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e06c      	b.n	800998e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	699a      	ldr	r2, [r3, #24]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6a1b      	ldr	r3, [r3, #32]
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	69fa      	ldr	r2, [r7, #28]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d902      	bls.n	80098d0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	3303      	adds	r3, #3
 80098d4:	089b      	lsrs	r3, r3, #2
 80098d6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80098d8:	e02b      	b.n	8009932 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	699a      	ldr	r2, [r3, #24]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6a1b      	ldr	r3, [r3, #32]
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	69fa      	ldr	r2, [r7, #28]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d902      	bls.n	80098f6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	3303      	adds	r3, #3
 80098fa:	089b      	lsrs	r3, r3, #2
 80098fc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6919      	ldr	r1, [r3, #16]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	b2da      	uxtb	r2, r3
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800990e:	b2db      	uxtb	r3, r3
 8009910:	9300      	str	r3, [sp, #0]
 8009912:	4603      	mov	r3, r0
 8009914:	6978      	ldr	r0, [r7, #20]
 8009916:	f005 fe8d 	bl	800f634 <USB_WritePacket>

    ep->xfer_buff  += len;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	691a      	ldr	r2, [r3, #16]
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	441a      	add	r2, r3
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6a1a      	ldr	r2, [r3, #32]
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	441a      	add	r2, r3
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	015a      	lsls	r2, r3, #5
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	4413      	add	r3, r2
 800993a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	b29b      	uxth	r3, r3
 8009942:	69ba      	ldr	r2, [r7, #24]
 8009944:	429a      	cmp	r2, r3
 8009946:	d809      	bhi.n	800995c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6a1a      	ldr	r2, [r3, #32]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009950:	429a      	cmp	r2, r3
 8009952:	d203      	bcs.n	800995c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1be      	bne.n	80098da <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	699a      	ldr	r2, [r3, #24]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6a1b      	ldr	r3, [r3, #32]
 8009964:	429a      	cmp	r2, r3
 8009966:	d811      	bhi.n	800998c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	f003 030f 	and.w	r3, r3, #15
 800996e:	2201      	movs	r2, #1
 8009970:	fa02 f303 	lsl.w	r3, r2, r3
 8009974:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800997c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	43db      	mvns	r3, r3
 8009982:	6939      	ldr	r1, [r7, #16]
 8009984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009988:	4013      	ands	r3, r2
 800998a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3720      	adds	r7, #32
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
	...

08009998 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b088      	sub	sp, #32
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	333c      	adds	r3, #60	; 0x3c
 80099b0:	3304      	adds	r3, #4
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	015a      	lsls	r2, r3, #5
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	4413      	add	r3, r2
 80099be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d17b      	bne.n	8009ac6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	f003 0308 	and.w	r3, r3, #8
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d015      	beq.n	8009a04 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	4a61      	ldr	r2, [pc, #388]	; (8009b60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	f240 80b9 	bls.w	8009b54 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 80b3 	beq.w	8009b54 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	015a      	lsls	r2, r3, #5
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099fa:	461a      	mov	r2, r3
 80099fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a00:	6093      	str	r3, [r2, #8]
 8009a02:	e0a7      	b.n	8009b54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	f003 0320 	and.w	r3, r3, #32
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d009      	beq.n	8009a22 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	015a      	lsls	r2, r3, #5
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	4413      	add	r3, r2
 8009a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	2320      	movs	r3, #32
 8009a1e:	6093      	str	r3, [r2, #8]
 8009a20:	e098      	b.n	8009b54 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f040 8093 	bne.w	8009b54 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	4a4b      	ldr	r2, [pc, #300]	; (8009b60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d90f      	bls.n	8009a56 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00a      	beq.n	8009a56 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a52:	6093      	str	r3, [r2, #8]
 8009a54:	e07e      	b.n	8009b54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	00db      	lsls	r3, r3, #3
 8009a5c:	4413      	add	r3, r2
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	4413      	add	r3, r2
 8009a68:	3304      	adds	r3, #4
 8009a6a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	69da      	ldr	r2, [r3, #28]
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	0159      	lsls	r1, r3, #5
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	440b      	add	r3, r1
 8009a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a82:	1ad2      	subs	r2, r2, r3
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d114      	bne.n	8009ab8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	699b      	ldr	r3, [r3, #24]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d109      	bne.n	8009aaa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6818      	ldr	r0, [r3, #0]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	f006 f81a 	bl	800fadc <USB_EP0_OutStart>
 8009aa8:	e006      	b.n	8009ab8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	691a      	ldr	r2, [r3, #16]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	441a      	add	r2, r3
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	4619      	mov	r1, r3
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f008 fdc6 	bl	8012650 <HAL_PCD_DataOutStageCallback>
 8009ac4:	e046      	b.n	8009b54 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	4a26      	ldr	r2, [pc, #152]	; (8009b64 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d124      	bne.n	8009b18 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00a      	beq.n	8009aee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	015a      	lsls	r2, r3, #5
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	4413      	add	r3, r2
 8009ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009aea:	6093      	str	r3, [r2, #8]
 8009aec:	e032      	b.n	8009b54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	f003 0320 	and.w	r3, r3, #32
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d008      	beq.n	8009b0a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	015a      	lsls	r2, r3, #5
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	4413      	add	r3, r2
 8009b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b04:	461a      	mov	r2, r3
 8009b06:	2320      	movs	r3, #32
 8009b08:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	4619      	mov	r1, r3
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f008 fd9d 	bl	8012650 <HAL_PCD_DataOutStageCallback>
 8009b16:	e01d      	b.n	8009b54 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d114      	bne.n	8009b48 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009b1e:	6879      	ldr	r1, [r7, #4]
 8009b20:	683a      	ldr	r2, [r7, #0]
 8009b22:	4613      	mov	r3, r2
 8009b24:	00db      	lsls	r3, r3, #3
 8009b26:	4413      	add	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	440b      	add	r3, r1
 8009b2c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d108      	bne.n	8009b48 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6818      	ldr	r0, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b40:	461a      	mov	r2, r3
 8009b42:	2100      	movs	r1, #0
 8009b44:	f005 ffca 	bl	800fadc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f008 fd7e 	bl	8012650 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3720      	adds	r7, #32
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	4f54300a 	.word	0x4f54300a
 8009b64:	4f54310a 	.word	0x4f54310a

08009b68 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	333c      	adds	r3, #60	; 0x3c
 8009b80:	3304      	adds	r3, #4
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	015a      	lsls	r2, r3, #5
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	4a15      	ldr	r2, [pc, #84]	; (8009bf0 <PCD_EP_OutSetupPacket_int+0x88>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d90e      	bls.n	8009bbc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d009      	beq.n	8009bbc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	015a      	lsls	r2, r3, #5
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	4413      	add	r3, r2
 8009bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f008 fd35 	bl	801262c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	4a0a      	ldr	r2, [pc, #40]	; (8009bf0 <PCD_EP_OutSetupPacket_int+0x88>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d90c      	bls.n	8009be4 <PCD_EP_OutSetupPacket_int+0x7c>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d108      	bne.n	8009be4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6818      	ldr	r0, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009bdc:	461a      	mov	r2, r3
 8009bde:	2101      	movs	r1, #1
 8009be0:	f005 ff7c 	bl	800fadc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3718      	adds	r7, #24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	4f54300a 	.word	0x4f54300a

08009bf4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b086      	sub	sp, #24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d101      	bne.n	8009c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e267      	b.n	800a0ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f003 0301 	and.w	r3, r3, #1
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d075      	beq.n	8009d16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009c2a:	4b88      	ldr	r3, [pc, #544]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	f003 030c 	and.w	r3, r3, #12
 8009c32:	2b04      	cmp	r3, #4
 8009c34:	d00c      	beq.n	8009c50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009c36:	4b85      	ldr	r3, [pc, #532]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009c3e:	2b08      	cmp	r3, #8
 8009c40:	d112      	bne.n	8009c68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009c42:	4b82      	ldr	r3, [pc, #520]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c4e:	d10b      	bne.n	8009c68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c50:	4b7e      	ldr	r3, [pc, #504]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d05b      	beq.n	8009d14 <HAL_RCC_OscConfig+0x108>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d157      	bne.n	8009d14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	e242      	b.n	800a0ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c70:	d106      	bne.n	8009c80 <HAL_RCC_OscConfig+0x74>
 8009c72:	4b76      	ldr	r3, [pc, #472]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a75      	ldr	r2, [pc, #468]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c7c:	6013      	str	r3, [r2, #0]
 8009c7e:	e01d      	b.n	8009cbc <HAL_RCC_OscConfig+0xb0>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c88:	d10c      	bne.n	8009ca4 <HAL_RCC_OscConfig+0x98>
 8009c8a:	4b70      	ldr	r3, [pc, #448]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a6f      	ldr	r2, [pc, #444]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c94:	6013      	str	r3, [r2, #0]
 8009c96:	4b6d      	ldr	r3, [pc, #436]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a6c      	ldr	r2, [pc, #432]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ca0:	6013      	str	r3, [r2, #0]
 8009ca2:	e00b      	b.n	8009cbc <HAL_RCC_OscConfig+0xb0>
 8009ca4:	4b69      	ldr	r3, [pc, #420]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a68      	ldr	r2, [pc, #416]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cae:	6013      	str	r3, [r2, #0]
 8009cb0:	4b66      	ldr	r3, [pc, #408]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a65      	ldr	r2, [pc, #404]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d013      	beq.n	8009cec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cc4:	f7fd fc3a 	bl	800753c <HAL_GetTick>
 8009cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009cca:	e008      	b.n	8009cde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ccc:	f7fd fc36 	bl	800753c <HAL_GetTick>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	2b64      	cmp	r3, #100	; 0x64
 8009cd8:	d901      	bls.n	8009cde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	e207      	b.n	800a0ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009cde:	4b5b      	ldr	r3, [pc, #364]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d0f0      	beq.n	8009ccc <HAL_RCC_OscConfig+0xc0>
 8009cea:	e014      	b.n	8009d16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cec:	f7fd fc26 	bl	800753c <HAL_GetTick>
 8009cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009cf2:	e008      	b.n	8009d06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009cf4:	f7fd fc22 	bl	800753c <HAL_GetTick>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	2b64      	cmp	r3, #100	; 0x64
 8009d00:	d901      	bls.n	8009d06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009d02:	2303      	movs	r3, #3
 8009d04:	e1f3      	b.n	800a0ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d06:	4b51      	ldr	r3, [pc, #324]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1f0      	bne.n	8009cf4 <HAL_RCC_OscConfig+0xe8>
 8009d12:	e000      	b.n	8009d16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f003 0302 	and.w	r3, r3, #2
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d063      	beq.n	8009dea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009d22:	4b4a      	ldr	r3, [pc, #296]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	f003 030c 	and.w	r3, r3, #12
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00b      	beq.n	8009d46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009d2e:	4b47      	ldr	r3, [pc, #284]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009d36:	2b08      	cmp	r3, #8
 8009d38:	d11c      	bne.n	8009d74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009d3a:	4b44      	ldr	r3, [pc, #272]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d116      	bne.n	8009d74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009d46:	4b41      	ldr	r3, [pc, #260]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f003 0302 	and.w	r3, r3, #2
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d005      	beq.n	8009d5e <HAL_RCC_OscConfig+0x152>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d001      	beq.n	8009d5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e1c7      	b.n	800a0ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d5e:	4b3b      	ldr	r3, [pc, #236]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	691b      	ldr	r3, [r3, #16]
 8009d6a:	00db      	lsls	r3, r3, #3
 8009d6c:	4937      	ldr	r1, [pc, #220]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009d72:	e03a      	b.n	8009dea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d020      	beq.n	8009dbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009d7c:	4b34      	ldr	r3, [pc, #208]	; (8009e50 <HAL_RCC_OscConfig+0x244>)
 8009d7e:	2201      	movs	r2, #1
 8009d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d82:	f7fd fbdb 	bl	800753c <HAL_GetTick>
 8009d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d88:	e008      	b.n	8009d9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009d8a:	f7fd fbd7 	bl	800753c <HAL_GetTick>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	1ad3      	subs	r3, r2, r3
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d901      	bls.n	8009d9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	e1a8      	b.n	800a0ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d9c:	4b2b      	ldr	r3, [pc, #172]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f003 0302 	and.w	r3, r3, #2
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d0f0      	beq.n	8009d8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009da8:	4b28      	ldr	r3, [pc, #160]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	00db      	lsls	r3, r3, #3
 8009db6:	4925      	ldr	r1, [pc, #148]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009db8:	4313      	orrs	r3, r2
 8009dba:	600b      	str	r3, [r1, #0]
 8009dbc:	e015      	b.n	8009dea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009dbe:	4b24      	ldr	r3, [pc, #144]	; (8009e50 <HAL_RCC_OscConfig+0x244>)
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dc4:	f7fd fbba 	bl	800753c <HAL_GetTick>
 8009dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009dca:	e008      	b.n	8009dde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009dcc:	f7fd fbb6 	bl	800753c <HAL_GetTick>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d901      	bls.n	8009dde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	e187      	b.n	800a0ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009dde:	4b1b      	ldr	r3, [pc, #108]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f003 0302 	and.w	r3, r3, #2
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1f0      	bne.n	8009dcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 0308 	and.w	r3, r3, #8
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d036      	beq.n	8009e64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	695b      	ldr	r3, [r3, #20]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d016      	beq.n	8009e2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009dfe:	4b15      	ldr	r3, [pc, #84]	; (8009e54 <HAL_RCC_OscConfig+0x248>)
 8009e00:	2201      	movs	r2, #1
 8009e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e04:	f7fd fb9a 	bl	800753c <HAL_GetTick>
 8009e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e0a:	e008      	b.n	8009e1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e0c:	f7fd fb96 	bl	800753c <HAL_GetTick>
 8009e10:	4602      	mov	r2, r0
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d901      	bls.n	8009e1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	e167      	b.n	800a0ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e1e:	4b0b      	ldr	r3, [pc, #44]	; (8009e4c <HAL_RCC_OscConfig+0x240>)
 8009e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e22:	f003 0302 	and.w	r3, r3, #2
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d0f0      	beq.n	8009e0c <HAL_RCC_OscConfig+0x200>
 8009e2a:	e01b      	b.n	8009e64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e2c:	4b09      	ldr	r3, [pc, #36]	; (8009e54 <HAL_RCC_OscConfig+0x248>)
 8009e2e:	2200      	movs	r2, #0
 8009e30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e32:	f7fd fb83 	bl	800753c <HAL_GetTick>
 8009e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009e38:	e00e      	b.n	8009e58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e3a:	f7fd fb7f 	bl	800753c <HAL_GetTick>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	d907      	bls.n	8009e58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	e150      	b.n	800a0ee <HAL_RCC_OscConfig+0x4e2>
 8009e4c:	40023800 	.word	0x40023800
 8009e50:	42470000 	.word	0x42470000
 8009e54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009e58:	4b88      	ldr	r3, [pc, #544]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e5c:	f003 0302 	and.w	r3, r3, #2
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1ea      	bne.n	8009e3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f003 0304 	and.w	r3, r3, #4
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f000 8097 	beq.w	8009fa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e72:	2300      	movs	r3, #0
 8009e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e76:	4b81      	ldr	r3, [pc, #516]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10f      	bne.n	8009ea2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e82:	2300      	movs	r3, #0
 8009e84:	60bb      	str	r3, [r7, #8]
 8009e86:	4b7d      	ldr	r3, [pc, #500]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8a:	4a7c      	ldr	r2, [pc, #496]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e90:	6413      	str	r3, [r2, #64]	; 0x40
 8009e92:	4b7a      	ldr	r3, [pc, #488]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e9a:	60bb      	str	r3, [r7, #8]
 8009e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ea2:	4b77      	ldr	r3, [pc, #476]	; (800a080 <HAL_RCC_OscConfig+0x474>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d118      	bne.n	8009ee0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009eae:	4b74      	ldr	r3, [pc, #464]	; (800a080 <HAL_RCC_OscConfig+0x474>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a73      	ldr	r2, [pc, #460]	; (800a080 <HAL_RCC_OscConfig+0x474>)
 8009eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009eba:	f7fd fb3f 	bl	800753c <HAL_GetTick>
 8009ebe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ec0:	e008      	b.n	8009ed4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ec2:	f7fd fb3b 	bl	800753c <HAL_GetTick>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	1ad3      	subs	r3, r2, r3
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d901      	bls.n	8009ed4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	e10c      	b.n	800a0ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ed4:	4b6a      	ldr	r3, [pc, #424]	; (800a080 <HAL_RCC_OscConfig+0x474>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d0f0      	beq.n	8009ec2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d106      	bne.n	8009ef6 <HAL_RCC_OscConfig+0x2ea>
 8009ee8:	4b64      	ldr	r3, [pc, #400]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eec:	4a63      	ldr	r2, [pc, #396]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009eee:	f043 0301 	orr.w	r3, r3, #1
 8009ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8009ef4:	e01c      	b.n	8009f30 <HAL_RCC_OscConfig+0x324>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	2b05      	cmp	r3, #5
 8009efc:	d10c      	bne.n	8009f18 <HAL_RCC_OscConfig+0x30c>
 8009efe:	4b5f      	ldr	r3, [pc, #380]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f02:	4a5e      	ldr	r2, [pc, #376]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009f04:	f043 0304 	orr.w	r3, r3, #4
 8009f08:	6713      	str	r3, [r2, #112]	; 0x70
 8009f0a:	4b5c      	ldr	r3, [pc, #368]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f0e:	4a5b      	ldr	r2, [pc, #364]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009f10:	f043 0301 	orr.w	r3, r3, #1
 8009f14:	6713      	str	r3, [r2, #112]	; 0x70
 8009f16:	e00b      	b.n	8009f30 <HAL_RCC_OscConfig+0x324>
 8009f18:	4b58      	ldr	r3, [pc, #352]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f1c:	4a57      	ldr	r2, [pc, #348]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009f1e:	f023 0301 	bic.w	r3, r3, #1
 8009f22:	6713      	str	r3, [r2, #112]	; 0x70
 8009f24:	4b55      	ldr	r3, [pc, #340]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f28:	4a54      	ldr	r2, [pc, #336]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009f2a:	f023 0304 	bic.w	r3, r3, #4
 8009f2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d015      	beq.n	8009f64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f38:	f7fd fb00 	bl	800753c <HAL_GetTick>
 8009f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f3e:	e00a      	b.n	8009f56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f40:	f7fd fafc 	bl	800753c <HAL_GetTick>
 8009f44:	4602      	mov	r2, r0
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d901      	bls.n	8009f56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009f52:	2303      	movs	r3, #3
 8009f54:	e0cb      	b.n	800a0ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f56:	4b49      	ldr	r3, [pc, #292]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f5a:	f003 0302 	and.w	r3, r3, #2
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d0ee      	beq.n	8009f40 <HAL_RCC_OscConfig+0x334>
 8009f62:	e014      	b.n	8009f8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f64:	f7fd faea 	bl	800753c <HAL_GetTick>
 8009f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f6a:	e00a      	b.n	8009f82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f6c:	f7fd fae6 	bl	800753c <HAL_GetTick>
 8009f70:	4602      	mov	r2, r0
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	1ad3      	subs	r3, r2, r3
 8009f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d901      	bls.n	8009f82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	e0b5      	b.n	800a0ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f82:	4b3e      	ldr	r3, [pc, #248]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f86:	f003 0302 	and.w	r3, r3, #2
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d1ee      	bne.n	8009f6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009f8e:	7dfb      	ldrb	r3, [r7, #23]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d105      	bne.n	8009fa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f94:	4b39      	ldr	r3, [pc, #228]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f98:	4a38      	ldr	r2, [pc, #224]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	699b      	ldr	r3, [r3, #24]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f000 80a1 	beq.w	800a0ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009faa:	4b34      	ldr	r3, [pc, #208]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	f003 030c 	and.w	r3, r3, #12
 8009fb2:	2b08      	cmp	r3, #8
 8009fb4:	d05c      	beq.n	800a070 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	699b      	ldr	r3, [r3, #24]
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d141      	bne.n	800a042 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fbe:	4b31      	ldr	r3, [pc, #196]	; (800a084 <HAL_RCC_OscConfig+0x478>)
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009fc4:	f7fd faba 	bl	800753c <HAL_GetTick>
 8009fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fca:	e008      	b.n	8009fde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009fcc:	f7fd fab6 	bl	800753c <HAL_GetTick>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	2b02      	cmp	r3, #2
 8009fd8:	d901      	bls.n	8009fde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	e087      	b.n	800a0ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fde:	4b27      	ldr	r3, [pc, #156]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d1f0      	bne.n	8009fcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	69da      	ldr	r2, [r3, #28]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a1b      	ldr	r3, [r3, #32]
 8009ff2:	431a      	orrs	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff8:	019b      	lsls	r3, r3, #6
 8009ffa:	431a      	orrs	r2, r3
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a000:	085b      	lsrs	r3, r3, #1
 800a002:	3b01      	subs	r3, #1
 800a004:	041b      	lsls	r3, r3, #16
 800a006:	431a      	orrs	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00c:	061b      	lsls	r3, r3, #24
 800a00e:	491b      	ldr	r1, [pc, #108]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 800a010:	4313      	orrs	r3, r2
 800a012:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a014:	4b1b      	ldr	r3, [pc, #108]	; (800a084 <HAL_RCC_OscConfig+0x478>)
 800a016:	2201      	movs	r2, #1
 800a018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a01a:	f7fd fa8f 	bl	800753c <HAL_GetTick>
 800a01e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a020:	e008      	b.n	800a034 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a022:	f7fd fa8b 	bl	800753c <HAL_GetTick>
 800a026:	4602      	mov	r2, r0
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	2b02      	cmp	r3, #2
 800a02e:	d901      	bls.n	800a034 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a030:	2303      	movs	r3, #3
 800a032:	e05c      	b.n	800a0ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a034:	4b11      	ldr	r3, [pc, #68]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d0f0      	beq.n	800a022 <HAL_RCC_OscConfig+0x416>
 800a040:	e054      	b.n	800a0ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a042:	4b10      	ldr	r3, [pc, #64]	; (800a084 <HAL_RCC_OscConfig+0x478>)
 800a044:	2200      	movs	r2, #0
 800a046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a048:	f7fd fa78 	bl	800753c <HAL_GetTick>
 800a04c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a04e:	e008      	b.n	800a062 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a050:	f7fd fa74 	bl	800753c <HAL_GetTick>
 800a054:	4602      	mov	r2, r0
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d901      	bls.n	800a062 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a05e:	2303      	movs	r3, #3
 800a060:	e045      	b.n	800a0ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a062:	4b06      	ldr	r3, [pc, #24]	; (800a07c <HAL_RCC_OscConfig+0x470>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1f0      	bne.n	800a050 <HAL_RCC_OscConfig+0x444>
 800a06e:	e03d      	b.n	800a0ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	699b      	ldr	r3, [r3, #24]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d107      	bne.n	800a088 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	e038      	b.n	800a0ee <HAL_RCC_OscConfig+0x4e2>
 800a07c:	40023800 	.word	0x40023800
 800a080:	40007000 	.word	0x40007000
 800a084:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a088:	4b1b      	ldr	r3, [pc, #108]	; (800a0f8 <HAL_RCC_OscConfig+0x4ec>)
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	2b01      	cmp	r3, #1
 800a094:	d028      	beq.n	800a0e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d121      	bne.n	800a0e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d11a      	bne.n	800a0e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a0be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d111      	bne.n	800a0e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ce:	085b      	lsrs	r3, r3, #1
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d107      	bne.n	800a0e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d001      	beq.n	800a0ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e000      	b.n	800a0ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3718      	adds	r7, #24
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	40023800 	.word	0x40023800

0800a0fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d101      	bne.n	800a110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	e0cc      	b.n	800a2aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a110:	4b68      	ldr	r3, [pc, #416]	; (800a2b4 <HAL_RCC_ClockConfig+0x1b8>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 0307 	and.w	r3, r3, #7
 800a118:	683a      	ldr	r2, [r7, #0]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d90c      	bls.n	800a138 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a11e:	4b65      	ldr	r3, [pc, #404]	; (800a2b4 <HAL_RCC_ClockConfig+0x1b8>)
 800a120:	683a      	ldr	r2, [r7, #0]
 800a122:	b2d2      	uxtb	r2, r2
 800a124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a126:	4b63      	ldr	r3, [pc, #396]	; (800a2b4 <HAL_RCC_ClockConfig+0x1b8>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 0307 	and.w	r3, r3, #7
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	429a      	cmp	r2, r3
 800a132:	d001      	beq.n	800a138 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	e0b8      	b.n	800a2aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 0302 	and.w	r3, r3, #2
 800a140:	2b00      	cmp	r3, #0
 800a142:	d020      	beq.n	800a186 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f003 0304 	and.w	r3, r3, #4
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d005      	beq.n	800a15c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a150:	4b59      	ldr	r3, [pc, #356]	; (800a2b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	4a58      	ldr	r2, [pc, #352]	; (800a2b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a156:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a15a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f003 0308 	and.w	r3, r3, #8
 800a164:	2b00      	cmp	r3, #0
 800a166:	d005      	beq.n	800a174 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a168:	4b53      	ldr	r3, [pc, #332]	; (800a2b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	4a52      	ldr	r2, [pc, #328]	; (800a2b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a16e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a172:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a174:	4b50      	ldr	r3, [pc, #320]	; (800a2b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	494d      	ldr	r1, [pc, #308]	; (800a2b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a182:	4313      	orrs	r3, r2
 800a184:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 0301 	and.w	r3, r3, #1
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d044      	beq.n	800a21c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d107      	bne.n	800a1aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a19a:	4b47      	ldr	r3, [pc, #284]	; (800a2b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d119      	bne.n	800a1da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e07f      	b.n	800a2aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	d003      	beq.n	800a1ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a1b6:	2b03      	cmp	r3, #3
 800a1b8:	d107      	bne.n	800a1ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1ba:	4b3f      	ldr	r3, [pc, #252]	; (800a2b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d109      	bne.n	800a1da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e06f      	b.n	800a2aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1ca:	4b3b      	ldr	r3, [pc, #236]	; (800a2b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f003 0302 	and.w	r3, r3, #2
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d101      	bne.n	800a1da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e067      	b.n	800a2aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a1da:	4b37      	ldr	r3, [pc, #220]	; (800a2b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f023 0203 	bic.w	r2, r3, #3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	4934      	ldr	r1, [pc, #208]	; (800a2b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a1ec:	f7fd f9a6 	bl	800753c <HAL_GetTick>
 800a1f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1f2:	e00a      	b.n	800a20a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1f4:	f7fd f9a2 	bl	800753c <HAL_GetTick>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	1ad3      	subs	r3, r2, r3
 800a1fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800a202:	4293      	cmp	r3, r2
 800a204:	d901      	bls.n	800a20a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a206:	2303      	movs	r3, #3
 800a208:	e04f      	b.n	800a2aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a20a:	4b2b      	ldr	r3, [pc, #172]	; (800a2b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	f003 020c 	and.w	r2, r3, #12
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	429a      	cmp	r2, r3
 800a21a:	d1eb      	bne.n	800a1f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a21c:	4b25      	ldr	r3, [pc, #148]	; (800a2b4 <HAL_RCC_ClockConfig+0x1b8>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 0307 	and.w	r3, r3, #7
 800a224:	683a      	ldr	r2, [r7, #0]
 800a226:	429a      	cmp	r2, r3
 800a228:	d20c      	bcs.n	800a244 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a22a:	4b22      	ldr	r3, [pc, #136]	; (800a2b4 <HAL_RCC_ClockConfig+0x1b8>)
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	b2d2      	uxtb	r2, r2
 800a230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a232:	4b20      	ldr	r3, [pc, #128]	; (800a2b4 <HAL_RCC_ClockConfig+0x1b8>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 0307 	and.w	r3, r3, #7
 800a23a:	683a      	ldr	r2, [r7, #0]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d001      	beq.n	800a244 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	e032      	b.n	800a2aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f003 0304 	and.w	r3, r3, #4
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d008      	beq.n	800a262 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a250:	4b19      	ldr	r3, [pc, #100]	; (800a2b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	4916      	ldr	r1, [pc, #88]	; (800a2b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f003 0308 	and.w	r3, r3, #8
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d009      	beq.n	800a282 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a26e:	4b12      	ldr	r3, [pc, #72]	; (800a2b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	00db      	lsls	r3, r3, #3
 800a27c:	490e      	ldr	r1, [pc, #56]	; (800a2b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a27e:	4313      	orrs	r3, r2
 800a280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a282:	f000 f821 	bl	800a2c8 <HAL_RCC_GetSysClockFreq>
 800a286:	4602      	mov	r2, r0
 800a288:	4b0b      	ldr	r3, [pc, #44]	; (800a2b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	091b      	lsrs	r3, r3, #4
 800a28e:	f003 030f 	and.w	r3, r3, #15
 800a292:	490a      	ldr	r1, [pc, #40]	; (800a2bc <HAL_RCC_ClockConfig+0x1c0>)
 800a294:	5ccb      	ldrb	r3, [r1, r3]
 800a296:	fa22 f303 	lsr.w	r3, r2, r3
 800a29a:	4a09      	ldr	r2, [pc, #36]	; (800a2c0 <HAL_RCC_ClockConfig+0x1c4>)
 800a29c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a29e:	4b09      	ldr	r3, [pc, #36]	; (800a2c4 <HAL_RCC_ClockConfig+0x1c8>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7f8 feca 	bl	800303c <HAL_InitTick>

  return HAL_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	40023c00 	.word	0x40023c00
 800a2b8:	40023800 	.word	0x40023800
 800a2bc:	08014e44 	.word	0x08014e44
 800a2c0:	20000004 	.word	0x20000004
 800a2c4:	20000008 	.word	0x20000008

0800a2c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a2c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2cc:	b094      	sub	sp, #80	; 0x50
 800a2ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	647b      	str	r3, [r7, #68]	; 0x44
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2d8:	2300      	movs	r3, #0
 800a2da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a2e0:	4b79      	ldr	r3, [pc, #484]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	f003 030c 	and.w	r3, r3, #12
 800a2e8:	2b08      	cmp	r3, #8
 800a2ea:	d00d      	beq.n	800a308 <HAL_RCC_GetSysClockFreq+0x40>
 800a2ec:	2b08      	cmp	r3, #8
 800a2ee:	f200 80e1 	bhi.w	800a4b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d002      	beq.n	800a2fc <HAL_RCC_GetSysClockFreq+0x34>
 800a2f6:	2b04      	cmp	r3, #4
 800a2f8:	d003      	beq.n	800a302 <HAL_RCC_GetSysClockFreq+0x3a>
 800a2fa:	e0db      	b.n	800a4b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a2fc:	4b73      	ldr	r3, [pc, #460]	; (800a4cc <HAL_RCC_GetSysClockFreq+0x204>)
 800a2fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a300:	e0db      	b.n	800a4ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a302:	4b72      	ldr	r3, [pc, #456]	; (800a4cc <HAL_RCC_GetSysClockFreq+0x204>)
 800a304:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a306:	e0d8      	b.n	800a4ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a308:	4b6f      	ldr	r3, [pc, #444]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a310:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a312:	4b6d      	ldr	r3, [pc, #436]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d063      	beq.n	800a3e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a31e:	4b6a      	ldr	r3, [pc, #424]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	099b      	lsrs	r3, r3, #6
 800a324:	2200      	movs	r2, #0
 800a326:	63bb      	str	r3, [r7, #56]	; 0x38
 800a328:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a330:	633b      	str	r3, [r7, #48]	; 0x30
 800a332:	2300      	movs	r3, #0
 800a334:	637b      	str	r3, [r7, #52]	; 0x34
 800a336:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a33a:	4622      	mov	r2, r4
 800a33c:	462b      	mov	r3, r5
 800a33e:	f04f 0000 	mov.w	r0, #0
 800a342:	f04f 0100 	mov.w	r1, #0
 800a346:	0159      	lsls	r1, r3, #5
 800a348:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a34c:	0150      	lsls	r0, r2, #5
 800a34e:	4602      	mov	r2, r0
 800a350:	460b      	mov	r3, r1
 800a352:	4621      	mov	r1, r4
 800a354:	1a51      	subs	r1, r2, r1
 800a356:	6139      	str	r1, [r7, #16]
 800a358:	4629      	mov	r1, r5
 800a35a:	eb63 0301 	sbc.w	r3, r3, r1
 800a35e:	617b      	str	r3, [r7, #20]
 800a360:	f04f 0200 	mov.w	r2, #0
 800a364:	f04f 0300 	mov.w	r3, #0
 800a368:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a36c:	4659      	mov	r1, fp
 800a36e:	018b      	lsls	r3, r1, #6
 800a370:	4651      	mov	r1, sl
 800a372:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a376:	4651      	mov	r1, sl
 800a378:	018a      	lsls	r2, r1, #6
 800a37a:	4651      	mov	r1, sl
 800a37c:	ebb2 0801 	subs.w	r8, r2, r1
 800a380:	4659      	mov	r1, fp
 800a382:	eb63 0901 	sbc.w	r9, r3, r1
 800a386:	f04f 0200 	mov.w	r2, #0
 800a38a:	f04f 0300 	mov.w	r3, #0
 800a38e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a392:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a396:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a39a:	4690      	mov	r8, r2
 800a39c:	4699      	mov	r9, r3
 800a39e:	4623      	mov	r3, r4
 800a3a0:	eb18 0303 	adds.w	r3, r8, r3
 800a3a4:	60bb      	str	r3, [r7, #8]
 800a3a6:	462b      	mov	r3, r5
 800a3a8:	eb49 0303 	adc.w	r3, r9, r3
 800a3ac:	60fb      	str	r3, [r7, #12]
 800a3ae:	f04f 0200 	mov.w	r2, #0
 800a3b2:	f04f 0300 	mov.w	r3, #0
 800a3b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	028b      	lsls	r3, r1, #10
 800a3be:	4621      	mov	r1, r4
 800a3c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	028a      	lsls	r2, r1, #10
 800a3c8:	4610      	mov	r0, r2
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a3d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a3d8:	f7f6 fbe6 	bl	8000ba8 <__aeabi_uldivmod>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4613      	mov	r3, r2
 800a3e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3e4:	e058      	b.n	800a498 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a3e6:	4b38      	ldr	r3, [pc, #224]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	099b      	lsrs	r3, r3, #6
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	4611      	mov	r1, r2
 800a3f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a3f6:	623b      	str	r3, [r7, #32]
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	627b      	str	r3, [r7, #36]	; 0x24
 800a3fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a400:	4642      	mov	r2, r8
 800a402:	464b      	mov	r3, r9
 800a404:	f04f 0000 	mov.w	r0, #0
 800a408:	f04f 0100 	mov.w	r1, #0
 800a40c:	0159      	lsls	r1, r3, #5
 800a40e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a412:	0150      	lsls	r0, r2, #5
 800a414:	4602      	mov	r2, r0
 800a416:	460b      	mov	r3, r1
 800a418:	4641      	mov	r1, r8
 800a41a:	ebb2 0a01 	subs.w	sl, r2, r1
 800a41e:	4649      	mov	r1, r9
 800a420:	eb63 0b01 	sbc.w	fp, r3, r1
 800a424:	f04f 0200 	mov.w	r2, #0
 800a428:	f04f 0300 	mov.w	r3, #0
 800a42c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a430:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a434:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a438:	ebb2 040a 	subs.w	r4, r2, sl
 800a43c:	eb63 050b 	sbc.w	r5, r3, fp
 800a440:	f04f 0200 	mov.w	r2, #0
 800a444:	f04f 0300 	mov.w	r3, #0
 800a448:	00eb      	lsls	r3, r5, #3
 800a44a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a44e:	00e2      	lsls	r2, r4, #3
 800a450:	4614      	mov	r4, r2
 800a452:	461d      	mov	r5, r3
 800a454:	4643      	mov	r3, r8
 800a456:	18e3      	adds	r3, r4, r3
 800a458:	603b      	str	r3, [r7, #0]
 800a45a:	464b      	mov	r3, r9
 800a45c:	eb45 0303 	adc.w	r3, r5, r3
 800a460:	607b      	str	r3, [r7, #4]
 800a462:	f04f 0200 	mov.w	r2, #0
 800a466:	f04f 0300 	mov.w	r3, #0
 800a46a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a46e:	4629      	mov	r1, r5
 800a470:	028b      	lsls	r3, r1, #10
 800a472:	4621      	mov	r1, r4
 800a474:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a478:	4621      	mov	r1, r4
 800a47a:	028a      	lsls	r2, r1, #10
 800a47c:	4610      	mov	r0, r2
 800a47e:	4619      	mov	r1, r3
 800a480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a482:	2200      	movs	r2, #0
 800a484:	61bb      	str	r3, [r7, #24]
 800a486:	61fa      	str	r2, [r7, #28]
 800a488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a48c:	f7f6 fb8c 	bl	8000ba8 <__aeabi_uldivmod>
 800a490:	4602      	mov	r2, r0
 800a492:	460b      	mov	r3, r1
 800a494:	4613      	mov	r3, r2
 800a496:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a498:	4b0b      	ldr	r3, [pc, #44]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	0c1b      	lsrs	r3, r3, #16
 800a49e:	f003 0303 	and.w	r3, r3, #3
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	005b      	lsls	r3, r3, #1
 800a4a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a4a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a4b2:	e002      	b.n	800a4ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a4b4:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <HAL_RCC_GetSysClockFreq+0x204>)
 800a4b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a4b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a4ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3750      	adds	r7, #80	; 0x50
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4c6:	bf00      	nop
 800a4c8:	40023800 	.word	0x40023800
 800a4cc:	00f42400 	.word	0x00f42400

0800a4d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a4d4:	4b03      	ldr	r3, [pc, #12]	; (800a4e4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	20000004 	.word	0x20000004

0800a4e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a4ec:	f7ff fff0 	bl	800a4d0 <HAL_RCC_GetHCLKFreq>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	4b05      	ldr	r3, [pc, #20]	; (800a508 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	0a9b      	lsrs	r3, r3, #10
 800a4f8:	f003 0307 	and.w	r3, r3, #7
 800a4fc:	4903      	ldr	r1, [pc, #12]	; (800a50c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a4fe:	5ccb      	ldrb	r3, [r1, r3]
 800a500:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a504:	4618      	mov	r0, r3
 800a506:	bd80      	pop	{r7, pc}
 800a508:	40023800 	.word	0x40023800
 800a50c:	08014e54 	.word	0x08014e54

0800a510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a514:	f7ff ffdc 	bl	800a4d0 <HAL_RCC_GetHCLKFreq>
 800a518:	4602      	mov	r2, r0
 800a51a:	4b05      	ldr	r3, [pc, #20]	; (800a530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	0b5b      	lsrs	r3, r3, #13
 800a520:	f003 0307 	and.w	r3, r3, #7
 800a524:	4903      	ldr	r1, [pc, #12]	; (800a534 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a526:	5ccb      	ldrb	r3, [r1, r3]
 800a528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	40023800 	.word	0x40023800
 800a534:	08014e54 	.word	0x08014e54

0800a538 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	220f      	movs	r2, #15
 800a546:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a548:	4b12      	ldr	r3, [pc, #72]	; (800a594 <HAL_RCC_GetClockConfig+0x5c>)
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	f003 0203 	and.w	r2, r3, #3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a554:	4b0f      	ldr	r3, [pc, #60]	; (800a594 <HAL_RCC_GetClockConfig+0x5c>)
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a560:	4b0c      	ldr	r3, [pc, #48]	; (800a594 <HAL_RCC_GetClockConfig+0x5c>)
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a56c:	4b09      	ldr	r3, [pc, #36]	; (800a594 <HAL_RCC_GetClockConfig+0x5c>)
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	08db      	lsrs	r3, r3, #3
 800a572:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a57a:	4b07      	ldr	r3, [pc, #28]	; (800a598 <HAL_RCC_GetClockConfig+0x60>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f003 0207 	and.w	r2, r3, #7
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	601a      	str	r2, [r3, #0]
}
 800a586:	bf00      	nop
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	40023800 	.word	0x40023800
 800a598:	40023c00 	.word	0x40023c00

0800a59c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d101      	bne.n	800a5ae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e022      	b.n	800a5f4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d105      	bne.n	800a5c6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f7f8 f96d 	bl	80028a0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2203      	movs	r2, #3
 800a5ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 f814 	bl	800a5fc <HAL_SD_InitCard>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d001      	beq.n	800a5de <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e00a      	b.n	800a5f4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a5fc:	b5b0      	push	{r4, r5, r7, lr}
 800a5fe:	b08e      	sub	sp, #56	; 0x38
 800a600:	af04      	add	r7, sp, #16
 800a602:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a604:	2300      	movs	r3, #0
 800a606:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a608:	2300      	movs	r3, #0
 800a60a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a60c:	2300      	movs	r3, #0
 800a60e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a610:	2300      	movs	r3, #0
 800a612:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a614:	2300      	movs	r3, #0
 800a616:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a618:	2376      	movs	r3, #118	; 0x76
 800a61a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681d      	ldr	r5, [r3, #0]
 800a620:	466c      	mov	r4, sp
 800a622:	f107 0314 	add.w	r3, r7, #20
 800a626:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a62a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a62e:	f107 0308 	add.w	r3, r7, #8
 800a632:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a634:	4628      	mov	r0, r5
 800a636:	f003 fd9b 	bl	800e170 <SDIO_Init>
 800a63a:	4603      	mov	r3, r0
 800a63c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a644:	2b00      	cmp	r3, #0
 800a646:	d001      	beq.n	800a64c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e04f      	b.n	800a6ec <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a64c:	4b29      	ldr	r3, [pc, #164]	; (800a6f4 <HAL_SD_InitCard+0xf8>)
 800a64e:	2200      	movs	r2, #0
 800a650:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4618      	mov	r0, r3
 800a658:	f003 fdc2 	bl	800e1e0 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a65c:	4b25      	ldr	r3, [pc, #148]	; (800a6f4 <HAL_SD_InitCard+0xf8>)
 800a65e:	2201      	movs	r2, #1
 800a660:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a662:	2002      	movs	r0, #2
 800a664:	f7fc ff76 	bl	8007554 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 fb53 	bl	800ad14 <SD_PowerON>
 800a66e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a670:	6a3b      	ldr	r3, [r7, #32]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00b      	beq.n	800a68e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a682:	6a3b      	ldr	r3, [r7, #32]
 800a684:	431a      	orrs	r2, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e02e      	b.n	800a6ec <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 fa72 	bl	800ab78 <SD_InitCard>
 800a694:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00b      	beq.n	800a6b4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6a8:	6a3b      	ldr	r3, [r7, #32]
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e01b      	b.n	800a6ec <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f003 fe21 	bl	800e304 <SDMMC_CmdBlockLength>
 800a6c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6c4:	6a3b      	ldr	r3, [r7, #32]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00f      	beq.n	800a6ea <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a0a      	ldr	r2, [pc, #40]	; (800a6f8 <HAL_SD_InitCard+0xfc>)
 800a6d0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6d6:	6a3b      	ldr	r3, [r7, #32]
 800a6d8:	431a      	orrs	r2, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e000      	b.n	800a6ec <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3728      	adds	r7, #40	; 0x28
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bdb0      	pop	{r4, r5, r7, pc}
 800a6f4:	422580a0 	.word	0x422580a0
 800a6f8:	004005ff 	.word	0x004005ff

0800a6fc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a70a:	0f9b      	lsrs	r3, r3, #30
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a716:	0e9b      	lsrs	r3, r3, #26
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	f003 030f 	and.w	r3, r3, #15
 800a71e:	b2da      	uxtb	r2, r3
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a728:	0e1b      	lsrs	r3, r3, #24
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	f003 0303 	and.w	r3, r3, #3
 800a730:	b2da      	uxtb	r2, r3
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a73a:	0c1b      	lsrs	r3, r3, #16
 800a73c:	b2da      	uxtb	r2, r3
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a746:	0a1b      	lsrs	r3, r3, #8
 800a748:	b2da      	uxtb	r2, r3
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a752:	b2da      	uxtb	r2, r3
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a75c:	0d1b      	lsrs	r3, r3, #20
 800a75e:	b29a      	uxth	r2, r3
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a768:	0c1b      	lsrs	r3, r3, #16
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	f003 030f 	and.w	r3, r3, #15
 800a770:	b2da      	uxtb	r2, r3
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a77a:	0bdb      	lsrs	r3, r3, #15
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	f003 0301 	and.w	r3, r3, #1
 800a782:	b2da      	uxtb	r2, r3
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a78c:	0b9b      	lsrs	r3, r3, #14
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	f003 0301 	and.w	r3, r3, #1
 800a794:	b2da      	uxtb	r2, r3
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a79e:	0b5b      	lsrs	r3, r3, #13
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	f003 0301 	and.w	r3, r3, #1
 800a7a6:	b2da      	uxtb	r2, r3
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7b0:	0b1b      	lsrs	r3, r3, #12
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	f003 0301 	and.w	r3, r3, #1
 800a7b8:	b2da      	uxtb	r2, r3
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d163      	bne.n	800a894 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7d0:	009a      	lsls	r2, r3, #2
 800a7d2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a7dc:	0f92      	lsrs	r2, r2, #30
 800a7de:	431a      	orrs	r2, r3
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7e8:	0edb      	lsrs	r3, r3, #27
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	f003 0307 	and.w	r3, r3, #7
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7fa:	0e1b      	lsrs	r3, r3, #24
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	f003 0307 	and.w	r3, r3, #7
 800a802:	b2da      	uxtb	r2, r3
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a80c:	0d5b      	lsrs	r3, r3, #21
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	f003 0307 	and.w	r3, r3, #7
 800a814:	b2da      	uxtb	r2, r3
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a81e:	0c9b      	lsrs	r3, r3, #18
 800a820:	b2db      	uxtb	r3, r3
 800a822:	f003 0307 	and.w	r3, r3, #7
 800a826:	b2da      	uxtb	r2, r3
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a830:	0bdb      	lsrs	r3, r3, #15
 800a832:	b2db      	uxtb	r3, r3
 800a834:	f003 0307 	and.w	r3, r3, #7
 800a838:	b2da      	uxtb	r2, r3
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	691b      	ldr	r3, [r3, #16]
 800a842:	1c5a      	adds	r2, r3, #1
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	7e1b      	ldrb	r3, [r3, #24]
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	f003 0307 	and.w	r3, r3, #7
 800a852:	3302      	adds	r3, #2
 800a854:	2201      	movs	r2, #1
 800a856:	fa02 f303 	lsl.w	r3, r2, r3
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a85e:	fb03 f202 	mul.w	r2, r3, r2
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	7a1b      	ldrb	r3, [r3, #8]
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	f003 030f 	and.w	r3, r3, #15
 800a870:	2201      	movs	r2, #1
 800a872:	409a      	lsls	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a880:	0a52      	lsrs	r2, r2, #9
 800a882:	fb03 f202 	mul.w	r2, r3, r2
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a890:	661a      	str	r2, [r3, #96]	; 0x60
 800a892:	e031      	b.n	800a8f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d11d      	bne.n	800a8d8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8a0:	041b      	lsls	r3, r3, #16
 800a8a2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8aa:	0c1b      	lsrs	r3, r3, #16
 800a8ac:	431a      	orrs	r2, r3
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	691b      	ldr	r3, [r3, #16]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	029a      	lsls	r2, r3, #10
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8cc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	661a      	str	r2, [r3, #96]	; 0x60
 800a8d6:	e00f      	b.n	800a8f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a58      	ldr	r2, [pc, #352]	; (800aa40 <HAL_SD_GetCardCSD+0x344>)
 800a8de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e09d      	b.n	800aa34 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8fc:	0b9b      	lsrs	r3, r3, #14
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	f003 0301 	and.w	r3, r3, #1
 800a904:	b2da      	uxtb	r2, r3
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a90e:	09db      	lsrs	r3, r3, #7
 800a910:	b2db      	uxtb	r3, r3
 800a912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a916:	b2da      	uxtb	r2, r3
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a920:	b2db      	uxtb	r3, r3
 800a922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a926:	b2da      	uxtb	r2, r3
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a930:	0fdb      	lsrs	r3, r3, #31
 800a932:	b2da      	uxtb	r2, r3
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a93c:	0f5b      	lsrs	r3, r3, #29
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	f003 0303 	and.w	r3, r3, #3
 800a944:	b2da      	uxtb	r2, r3
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a94e:	0e9b      	lsrs	r3, r3, #26
 800a950:	b2db      	uxtb	r3, r3
 800a952:	f003 0307 	and.w	r3, r3, #7
 800a956:	b2da      	uxtb	r2, r3
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a960:	0d9b      	lsrs	r3, r3, #22
 800a962:	b2db      	uxtb	r3, r3
 800a964:	f003 030f 	and.w	r3, r3, #15
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a972:	0d5b      	lsrs	r3, r3, #21
 800a974:	b2db      	uxtb	r3, r3
 800a976:	f003 0301 	and.w	r3, r3, #1
 800a97a:	b2da      	uxtb	r2, r3
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a98e:	0c1b      	lsrs	r3, r3, #16
 800a990:	b2db      	uxtb	r3, r3
 800a992:	f003 0301 	and.w	r3, r3, #1
 800a996:	b2da      	uxtb	r2, r3
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9a2:	0bdb      	lsrs	r3, r3, #15
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	f003 0301 	and.w	r3, r3, #1
 800a9aa:	b2da      	uxtb	r2, r3
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9b6:	0b9b      	lsrs	r3, r3, #14
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	f003 0301 	and.w	r3, r3, #1
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ca:	0b5b      	lsrs	r3, r3, #13
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	f003 0301 	and.w	r3, r3, #1
 800a9d2:	b2da      	uxtb	r2, r3
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9de:	0b1b      	lsrs	r3, r3, #12
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	f003 0301 	and.w	r3, r3, #1
 800a9e6:	b2da      	uxtb	r2, r3
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9f2:	0a9b      	lsrs	r3, r3, #10
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	f003 0303 	and.w	r3, r3, #3
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa06:	0a1b      	lsrs	r3, r3, #8
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	f003 0303 	and.w	r3, r3, #3
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa1a:	085b      	lsrs	r3, r3, #1
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa22:	b2da      	uxtb	r2, r3
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr
 800aa40:	004005ff 	.word	0x004005ff

0800aa44 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800aa44:	b5b0      	push	{r4, r5, r7, lr}
 800aa46:	b08e      	sub	sp, #56	; 0x38
 800aa48:	af04      	add	r7, sp, #16
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2203      	movs	r2, #3
 800aa58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa60:	2b03      	cmp	r3, #3
 800aa62:	d02e      	beq.n	800aac2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa6a:	d106      	bne.n	800aa7a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	639a      	str	r2, [r3, #56]	; 0x38
 800aa78:	e029      	b.n	800aace <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa80:	d10a      	bne.n	800aa98 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 f9d4 	bl	800ae30 <SD_WideBus_Enable>
 800aa88:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa8e:	6a3b      	ldr	r3, [r7, #32]
 800aa90:	431a      	orrs	r2, r3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	639a      	str	r2, [r3, #56]	; 0x38
 800aa96:	e01a      	b.n	800aace <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d10a      	bne.n	800aab4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 fa11 	bl	800aec6 <SD_WideBus_Disable>
 800aaa4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaaa:	6a3b      	ldr	r3, [r7, #32]
 800aaac:	431a      	orrs	r2, r3
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	639a      	str	r2, [r3, #56]	; 0x38
 800aab2:	e00c      	b.n	800aace <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	639a      	str	r2, [r3, #56]	; 0x38
 800aac0:	e005      	b.n	800aace <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00b      	beq.n	800aaee <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a26      	ldr	r2, [pc, #152]	; (800ab74 <HAL_SD_ConfigWideBusOperation+0x130>)
 800aadc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2201      	movs	r2, #1
 800aae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aaec:	e01f      	b.n	800ab2e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	695b      	ldr	r3, [r3, #20]
 800ab08:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	699b      	ldr	r3, [r3, #24]
 800ab0e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681d      	ldr	r5, [r3, #0]
 800ab14:	466c      	mov	r4, sp
 800ab16:	f107 0314 	add.w	r3, r7, #20
 800ab1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ab1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ab22:	f107 0308 	add.w	r3, r7, #8
 800ab26:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ab28:	4628      	mov	r0, r5
 800ab2a:	f003 fb21 	bl	800e170 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab36:	4618      	mov	r0, r3
 800ab38:	f003 fbe4 	bl	800e304 <SDMMC_CmdBlockLength>
 800ab3c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab3e:	6a3b      	ldr	r3, [r7, #32]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00c      	beq.n	800ab5e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a0a      	ldr	r2, [pc, #40]	; (800ab74 <HAL_SD_ConfigWideBusOperation+0x130>)
 800ab4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab50:	6a3b      	ldr	r3, [r7, #32]
 800ab52:	431a      	orrs	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2201      	movs	r2, #1
 800ab62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800ab66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3728      	adds	r7, #40	; 0x28
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bdb0      	pop	{r4, r5, r7, pc}
 800ab72:	bf00      	nop
 800ab74:	004005ff 	.word	0x004005ff

0800ab78 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ab78:	b5b0      	push	{r4, r5, r7, lr}
 800ab7a:	b094      	sub	sp, #80	; 0x50
 800ab7c:	af04      	add	r7, sp, #16
 800ab7e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ab80:	2301      	movs	r3, #1
 800ab82:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f003 fb37 	bl	800e1fc <SDIO_GetPowerState>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d102      	bne.n	800ab9a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ab94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ab98:	e0b8      	b.n	800ad0c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab9e:	2b03      	cmp	r3, #3
 800aba0:	d02f      	beq.n	800ac02 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4618      	mov	r0, r3
 800aba8:	f003 fcb6 	bl	800e518 <SDMMC_CmdSendCID>
 800abac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800abae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d001      	beq.n	800abb8 <SD_InitCard+0x40>
    {
      return errorstate;
 800abb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb6:	e0a9      	b.n	800ad0c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2100      	movs	r1, #0
 800abbe:	4618      	mov	r0, r3
 800abc0:	f003 fb61 	bl	800e286 <SDIO_GetResponse>
 800abc4:	4602      	mov	r2, r0
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2104      	movs	r1, #4
 800abd0:	4618      	mov	r0, r3
 800abd2:	f003 fb58 	bl	800e286 <SDIO_GetResponse>
 800abd6:	4602      	mov	r2, r0
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2108      	movs	r1, #8
 800abe2:	4618      	mov	r0, r3
 800abe4:	f003 fb4f 	bl	800e286 <SDIO_GetResponse>
 800abe8:	4602      	mov	r2, r0
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	210c      	movs	r1, #12
 800abf4:	4618      	mov	r0, r3
 800abf6:	f003 fb46 	bl	800e286 <SDIO_GetResponse>
 800abfa:	4602      	mov	r2, r0
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac06:	2b03      	cmp	r3, #3
 800ac08:	d00d      	beq.n	800ac26 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f107 020e 	add.w	r2, r7, #14
 800ac12:	4611      	mov	r1, r2
 800ac14:	4618      	mov	r0, r3
 800ac16:	f003 fcbc 	bl	800e592 <SDMMC_CmdSetRelAdd>
 800ac1a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d001      	beq.n	800ac26 <SD_InitCard+0xae>
    {
      return errorstate;
 800ac22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac24:	e072      	b.n	800ad0c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac2a:	2b03      	cmp	r3, #3
 800ac2c:	d036      	beq.n	800ac9c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ac2e:	89fb      	ldrh	r3, [r7, #14]
 800ac30:	461a      	mov	r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac3e:	041b      	lsls	r3, r3, #16
 800ac40:	4619      	mov	r1, r3
 800ac42:	4610      	mov	r0, r2
 800ac44:	f003 fc86 	bl	800e554 <SDMMC_CmdSendCSD>
 800ac48:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d001      	beq.n	800ac54 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ac50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac52:	e05b      	b.n	800ad0c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2100      	movs	r1, #0
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f003 fb13 	bl	800e286 <SDIO_GetResponse>
 800ac60:	4602      	mov	r2, r0
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2104      	movs	r1, #4
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f003 fb0a 	bl	800e286 <SDIO_GetResponse>
 800ac72:	4602      	mov	r2, r0
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2108      	movs	r1, #8
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f003 fb01 	bl	800e286 <SDIO_GetResponse>
 800ac84:	4602      	mov	r2, r0
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	210c      	movs	r1, #12
 800ac90:	4618      	mov	r0, r3
 800ac92:	f003 faf8 	bl	800e286 <SDIO_GetResponse>
 800ac96:	4602      	mov	r2, r0
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2104      	movs	r1, #4
 800aca2:	4618      	mov	r0, r3
 800aca4:	f003 faef 	bl	800e286 <SDIO_GetResponse>
 800aca8:	4603      	mov	r3, r0
 800acaa:	0d1a      	lsrs	r2, r3, #20
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800acb0:	f107 0310 	add.w	r3, r7, #16
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7ff fd20 	bl	800a6fc <HAL_SD_GetCardCSD>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d002      	beq.n	800acc8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800acc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800acc6:	e021      	b.n	800ad0c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6819      	ldr	r1, [r3, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acd0:	041b      	lsls	r3, r3, #16
 800acd2:	2200      	movs	r2, #0
 800acd4:	461c      	mov	r4, r3
 800acd6:	4615      	mov	r5, r2
 800acd8:	4622      	mov	r2, r4
 800acda:	462b      	mov	r3, r5
 800acdc:	4608      	mov	r0, r1
 800acde:	f003 fb33 	bl	800e348 <SDMMC_CmdSelDesel>
 800ace2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ace4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d001      	beq.n	800acee <SD_InitCard+0x176>
  {
    return errorstate;
 800acea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acec:	e00e      	b.n	800ad0c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681d      	ldr	r5, [r3, #0]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	466c      	mov	r4, sp
 800acf6:	f103 0210 	add.w	r2, r3, #16
 800acfa:	ca07      	ldmia	r2, {r0, r1, r2}
 800acfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ad00:	3304      	adds	r3, #4
 800ad02:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad04:	4628      	mov	r0, r5
 800ad06:	f003 fa33 	bl	800e170 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3740      	adds	r7, #64	; 0x40
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bdb0      	pop	{r4, r5, r7, pc}

0800ad14 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800ad20:	2300      	movs	r3, #0
 800ad22:	617b      	str	r3, [r7, #20]
 800ad24:	2300      	movs	r3, #0
 800ad26:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f003 fb2e 	bl	800e38e <SDMMC_CmdGoIdleState>
 800ad32:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d001      	beq.n	800ad3e <SD_PowerON+0x2a>
  {
    return errorstate;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	e072      	b.n	800ae24 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4618      	mov	r0, r3
 800ad44:	f003 fb41 	bl	800e3ca <SDMMC_CmdOperCond>
 800ad48:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d00d      	beq.n	800ad6c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f003 fb17 	bl	800e38e <SDMMC_CmdGoIdleState>
 800ad60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d004      	beq.n	800ad72 <SD_PowerON+0x5e>
    {
      return errorstate;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	e05b      	b.n	800ae24 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d137      	bne.n	800adea <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2100      	movs	r1, #0
 800ad80:	4618      	mov	r0, r3
 800ad82:	f003 fb41 	bl	800e408 <SDMMC_CmdAppCommand>
 800ad86:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d02d      	beq.n	800adea <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ad92:	e047      	b.n	800ae24 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2100      	movs	r1, #0
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f003 fb34 	bl	800e408 <SDMMC_CmdAppCommand>
 800ada0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d001      	beq.n	800adac <SD_PowerON+0x98>
    {
      return errorstate;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	e03b      	b.n	800ae24 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	491e      	ldr	r1, [pc, #120]	; (800ae2c <SD_PowerON+0x118>)
 800adb2:	4618      	mov	r0, r3
 800adb4:	f003 fb4a 	bl	800e44c <SDMMC_CmdAppOperCommand>
 800adb8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d002      	beq.n	800adc6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800adc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800adc4:	e02e      	b.n	800ae24 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2100      	movs	r1, #0
 800adcc:	4618      	mov	r0, r3
 800adce:	f003 fa5a 	bl	800e286 <SDIO_GetResponse>
 800add2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	0fdb      	lsrs	r3, r3, #31
 800add8:	2b01      	cmp	r3, #1
 800adda:	d101      	bne.n	800ade0 <SD_PowerON+0xcc>
 800addc:	2301      	movs	r3, #1
 800adde:	e000      	b.n	800ade2 <SD_PowerON+0xce>
 800ade0:	2300      	movs	r3, #0
 800ade2:	613b      	str	r3, [r7, #16]

    count++;
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	3301      	adds	r3, #1
 800ade8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d802      	bhi.n	800adfa <SD_PowerON+0xe6>
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d0cc      	beq.n	800ad94 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d902      	bls.n	800ae0a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ae04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae08:	e00c      	b.n	800ae24 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d003      	beq.n	800ae1c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	645a      	str	r2, [r3, #68]	; 0x44
 800ae1a:	e002      	b.n	800ae22 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ae22:	2300      	movs	r3, #0
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3718      	adds	r7, #24
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	c1100000 	.word	0xc1100000

0800ae30 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ae38:	2300      	movs	r3, #0
 800ae3a:	60fb      	str	r3, [r7, #12]
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2100      	movs	r1, #0
 800ae46:	4618      	mov	r0, r3
 800ae48:	f003 fa1d 	bl	800e286 <SDIO_GetResponse>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae56:	d102      	bne.n	800ae5e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ae58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae5c:	e02f      	b.n	800aebe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ae5e:	f107 030c 	add.w	r3, r7, #12
 800ae62:	4619      	mov	r1, r3
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 f879 	bl	800af5c <SD_FindSCR>
 800ae6a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d001      	beq.n	800ae76 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	e023      	b.n	800aebe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d01c      	beq.n	800aeba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae88:	041b      	lsls	r3, r3, #16
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	f003 fabb 	bl	800e408 <SDMMC_CmdAppCommand>
 800ae92:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	e00f      	b.n	800aebe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2102      	movs	r1, #2
 800aea4:	4618      	mov	r0, r3
 800aea6:	f003 faf4 	bl	800e492 <SDMMC_CmdBusWidth>
 800aeaa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d001      	beq.n	800aeb6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	e003      	b.n	800aebe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	e001      	b.n	800aebe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aeba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3718      	adds	r7, #24
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b086      	sub	sp, #24
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800aece:	2300      	movs	r3, #0
 800aed0:	60fb      	str	r3, [r7, #12]
 800aed2:	2300      	movs	r3, #0
 800aed4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	2100      	movs	r1, #0
 800aedc:	4618      	mov	r0, r3
 800aede:	f003 f9d2 	bl	800e286 <SDIO_GetResponse>
 800aee2:	4603      	mov	r3, r0
 800aee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aee8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aeec:	d102      	bne.n	800aef4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aeee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aef2:	e02f      	b.n	800af54 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aef4:	f107 030c 	add.w	r3, r7, #12
 800aef8:	4619      	mov	r1, r3
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 f82e 	bl	800af5c <SD_FindSCR>
 800af00:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d001      	beq.n	800af0c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	e023      	b.n	800af54 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af12:	2b00      	cmp	r3, #0
 800af14:	d01c      	beq.n	800af50 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af1e:	041b      	lsls	r3, r3, #16
 800af20:	4619      	mov	r1, r3
 800af22:	4610      	mov	r0, r2
 800af24:	f003 fa70 	bl	800e408 <SDMMC_CmdAppCommand>
 800af28:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	e00f      	b.n	800af54 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2100      	movs	r1, #0
 800af3a:	4618      	mov	r0, r3
 800af3c:	f003 faa9 	bl	800e492 <SDMMC_CmdBusWidth>
 800af40:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	e003      	b.n	800af54 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800af4c:	2300      	movs	r3, #0
 800af4e:	e001      	b.n	800af54 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800af50:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800af54:	4618      	mov	r0, r3
 800af56:	3718      	adds	r7, #24
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800af5c:	b590      	push	{r4, r7, lr}
 800af5e:	b08f      	sub	sp, #60	; 0x3c
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800af66:	f7fc fae9 	bl	800753c <HAL_GetTick>
 800af6a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800af6c:	2300      	movs	r3, #0
 800af6e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800af70:	2300      	movs	r3, #0
 800af72:	60bb      	str	r3, [r7, #8]
 800af74:	2300      	movs	r3, #0
 800af76:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2108      	movs	r1, #8
 800af82:	4618      	mov	r0, r3
 800af84:	f003 f9be 	bl	800e304 <SDMMC_CmdBlockLength>
 800af88:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800af8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d001      	beq.n	800af94 <SD_FindSCR+0x38>
  {
    return errorstate;
 800af90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af92:	e0b2      	b.n	800b0fa <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af9c:	041b      	lsls	r3, r3, #16
 800af9e:	4619      	mov	r1, r3
 800afa0:	4610      	mov	r0, r2
 800afa2:	f003 fa31 	bl	800e408 <SDMMC_CmdAppCommand>
 800afa6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800afa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d001      	beq.n	800afb2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800afae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb0:	e0a3      	b.n	800b0fa <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800afb2:	f04f 33ff 	mov.w	r3, #4294967295
 800afb6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800afb8:	2308      	movs	r3, #8
 800afba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800afbc:	2330      	movs	r3, #48	; 0x30
 800afbe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800afc0:	2302      	movs	r3, #2
 800afc2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800afc4:	2300      	movs	r3, #0
 800afc6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800afc8:	2301      	movs	r3, #1
 800afca:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f107 0210 	add.w	r2, r7, #16
 800afd4:	4611      	mov	r1, r2
 800afd6:	4618      	mov	r0, r3
 800afd8:	f003 f968 	bl	800e2ac <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4618      	mov	r0, r3
 800afe2:	f003 fa78 	bl	800e4d6 <SDMMC_CmdSendSCR>
 800afe6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800afe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afea:	2b00      	cmp	r3, #0
 800afec:	d02a      	beq.n	800b044 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800afee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff0:	e083      	b.n	800b0fa <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00f      	beq.n	800b020 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6819      	ldr	r1, [r3, #0]
 800b004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	f107 0208 	add.w	r2, r7, #8
 800b00c:	18d4      	adds	r4, r2, r3
 800b00e:	4608      	mov	r0, r1
 800b010:	f003 f8d9 	bl	800e1c6 <SDIO_ReadFIFO>
 800b014:	4603      	mov	r3, r0
 800b016:	6023      	str	r3, [r4, #0]
      index++;
 800b018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b01a:	3301      	adds	r3, #1
 800b01c:	637b      	str	r3, [r7, #52]	; 0x34
 800b01e:	e006      	b.n	800b02e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d012      	beq.n	800b054 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b02e:	f7fc fa85 	bl	800753c <HAL_GetTick>
 800b032:	4602      	mov	r2, r0
 800b034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b036:	1ad3      	subs	r3, r2, r3
 800b038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b03c:	d102      	bne.n	800b044 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b03e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b042:	e05a      	b.n	800b0fa <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b04a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d0cf      	beq.n	800aff2 <SD_FindSCR+0x96>
 800b052:	e000      	b.n	800b056 <SD_FindSCR+0xfa>
      break;
 800b054:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b05c:	f003 0308 	and.w	r3, r3, #8
 800b060:	2b00      	cmp	r3, #0
 800b062:	d005      	beq.n	800b070 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2208      	movs	r2, #8
 800b06a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b06c:	2308      	movs	r3, #8
 800b06e:	e044      	b.n	800b0fa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b076:	f003 0302 	and.w	r3, r3, #2
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d005      	beq.n	800b08a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2202      	movs	r2, #2
 800b084:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b086:	2302      	movs	r3, #2
 800b088:	e037      	b.n	800b0fa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b090:	f003 0320 	and.w	r3, r3, #32
 800b094:	2b00      	cmp	r3, #0
 800b096:	d005      	beq.n	800b0a4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2220      	movs	r2, #32
 800b09e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b0a0:	2320      	movs	r3, #32
 800b0a2:	e02a      	b.n	800b0fa <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f240 523a 	movw	r2, #1338	; 0x53a
 800b0ac:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	061a      	lsls	r2, r3, #24
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	021b      	lsls	r3, r3, #8
 800b0b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b0ba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	0a1b      	lsrs	r3, r3, #8
 800b0c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b0c4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	0e1b      	lsrs	r3, r3, #24
 800b0ca:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ce:	601a      	str	r2, [r3, #0]
    scr++;
 800b0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	061a      	lsls	r2, r3, #24
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	021b      	lsls	r3, r3, #8
 800b0de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b0e2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	0a1b      	lsrs	r3, r3, #8
 800b0e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b0ec:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	0e1b      	lsrs	r3, r3, #24
 800b0f2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	373c      	adds	r7, #60	; 0x3c
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd90      	pop	{r4, r7, pc}

0800b102 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b082      	sub	sp, #8
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d101      	bne.n	800b114 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	e07b      	b.n	800b20c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d108      	bne.n	800b12e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b124:	d009      	beq.n	800b13a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	61da      	str	r2, [r3, #28]
 800b12c:	e005      	b.n	800b13a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b146:	b2db      	uxtb	r3, r3
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d106      	bne.n	800b15a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f7f7 fc0b 	bl	8002970 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2202      	movs	r2, #2
 800b15e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b170:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b182:	431a      	orrs	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b18c:	431a      	orrs	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	691b      	ldr	r3, [r3, #16]
 800b192:	f003 0302 	and.w	r3, r3, #2
 800b196:	431a      	orrs	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	695b      	ldr	r3, [r3, #20]
 800b19c:	f003 0301 	and.w	r3, r3, #1
 800b1a0:	431a      	orrs	r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	699b      	ldr	r3, [r3, #24]
 800b1a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b1aa:	431a      	orrs	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	69db      	ldr	r3, [r3, #28]
 800b1b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b1b4:	431a      	orrs	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a1b      	ldr	r3, [r3, #32]
 800b1ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1be:	ea42 0103 	orr.w	r1, r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	430a      	orrs	r2, r1
 800b1d0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	0c1b      	lsrs	r3, r3, #16
 800b1d8:	f003 0104 	and.w	r1, r3, #4
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e0:	f003 0210 	and.w	r2, r3, #16
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	430a      	orrs	r2, r1
 800b1ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	69da      	ldr	r2, [r3, #28]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b1fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2201      	movs	r2, #1
 800b206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3708      	adds	r7, #8
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b086      	sub	sp, #24
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	4613      	mov	r3, r2
 800b220:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b222:	2300      	movs	r3, #0
 800b224:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d101      	bne.n	800b234 <HAL_SPI_Transmit_DMA+0x20>
 800b230:	2302      	movs	r3, #2
 800b232:	e09b      	b.n	800b36c <HAL_SPI_Transmit_DMA+0x158>
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2201      	movs	r2, #1
 800b238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b242:	b2db      	uxtb	r3, r3
 800b244:	2b01      	cmp	r3, #1
 800b246:	d002      	beq.n	800b24e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800b248:	2302      	movs	r3, #2
 800b24a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b24c:	e089      	b.n	800b362 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d002      	beq.n	800b25a <HAL_SPI_Transmit_DMA+0x46>
 800b254:	88fb      	ldrh	r3, [r7, #6]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d102      	bne.n	800b260 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800b25a:	2301      	movs	r3, #1
 800b25c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b25e:	e080      	b.n	800b362 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2203      	movs	r2, #3
 800b264:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2200      	movs	r2, #0
 800b26c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	68ba      	ldr	r2, [r7, #8]
 800b272:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	88fa      	ldrh	r2, [r7, #6]
 800b278:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	88fa      	ldrh	r2, [r7, #6]
 800b27e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2200      	movs	r2, #0
 800b284:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2200      	movs	r2, #0
 800b290:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2200      	movs	r2, #0
 800b296:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2200      	movs	r2, #0
 800b29c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2a6:	d10f      	bne.n	800b2c8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b2c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2cc:	4a29      	ldr	r2, [pc, #164]	; (800b374 <HAL_SPI_Transmit_DMA+0x160>)
 800b2ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2d4:	4a28      	ldr	r2, [pc, #160]	; (800b378 <HAL_SPI_Transmit_DMA+0x164>)
 800b2d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2dc:	4a27      	ldr	r2, [pc, #156]	; (800b37c <HAL_SPI_Transmit_DMA+0x168>)
 800b2de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	330c      	adds	r3, #12
 800b2f8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2fe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b300:	f7fc feee 	bl	80080e0 <HAL_DMA_Start_IT>
 800b304:	4603      	mov	r3, r0
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00c      	beq.n	800b324 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b30e:	f043 0210 	orr.w	r2, r3, #16
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b316:	2301      	movs	r3, #1
 800b318:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2201      	movs	r2, #1
 800b31e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800b322:	e01e      	b.n	800b362 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b32e:	2b40      	cmp	r3, #64	; 0x40
 800b330:	d007      	beq.n	800b342 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b340:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	685a      	ldr	r2, [r3, #4]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f042 0220 	orr.w	r2, r2, #32
 800b350:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	685a      	ldr	r2, [r3, #4]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f042 0202 	orr.w	r2, r2, #2
 800b360:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2200      	movs	r2, #0
 800b366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b36a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3718      	adds	r7, #24
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}
 800b374:	0800b981 	.word	0x0800b981
 800b378:	0800b7a1 	.word	0x0800b7a1
 800b37c:	0800b9d5 	.word	0x0800b9d5

0800b380 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b086      	sub	sp, #24
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	4613      	mov	r3, r2
 800b38c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b38e:	2300      	movs	r3, #0
 800b390:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d110      	bne.n	800b3bc <HAL_SPI_Receive_DMA+0x3c>
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3a2:	d10b      	bne.n	800b3bc <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2204      	movs	r2, #4
 800b3a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800b3ac:	88fb      	ldrh	r3, [r7, #6]
 800b3ae:	68ba      	ldr	r2, [r7, #8]
 800b3b0:	68b9      	ldr	r1, [r7, #8]
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f000 f8ac 	bl	800b510 <HAL_SPI_TransmitReceive_DMA>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	e09f      	b.n	800b4fc <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d101      	bne.n	800b3ca <HAL_SPI_Receive_DMA+0x4a>
 800b3c6:	2302      	movs	r3, #2
 800b3c8:	e098      	b.n	800b4fc <HAL_SPI_Receive_DMA+0x17c>
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d002      	beq.n	800b3e4 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800b3de:	2302      	movs	r3, #2
 800b3e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b3e2:	e086      	b.n	800b4f2 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d002      	beq.n	800b3f0 <HAL_SPI_Receive_DMA+0x70>
 800b3ea:	88fb      	ldrh	r3, [r7, #6]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d102      	bne.n	800b3f6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b3f4:	e07d      	b.n	800b4f2 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2204      	movs	r2, #4
 800b3fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2200      	movs	r2, #0
 800b402:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	68ba      	ldr	r2, [r7, #8]
 800b408:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	88fa      	ldrh	r2, [r7, #6]
 800b40e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	88fa      	ldrh	r2, [r7, #6]
 800b414:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2200      	movs	r2, #0
 800b41a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2200      	movs	r2, #0
 800b420:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2200      	movs	r2, #0
 800b426:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2200      	movs	r2, #0
 800b42c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b436:	d10f      	bne.n	800b458 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b446:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b456:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b45c:	4a29      	ldr	r2, [pc, #164]	; (800b504 <HAL_SPI_Receive_DMA+0x184>)
 800b45e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b464:	4a28      	ldr	r2, [pc, #160]	; (800b508 <HAL_SPI_Receive_DMA+0x188>)
 800b466:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b46c:	4a27      	ldr	r2, [pc, #156]	; (800b50c <HAL_SPI_Receive_DMA+0x18c>)
 800b46e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b474:	2200      	movs	r2, #0
 800b476:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	330c      	adds	r3, #12
 800b482:	4619      	mov	r1, r3
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b488:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b48e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800b490:	f7fc fe26 	bl	80080e0 <HAL_DMA_Start_IT>
 800b494:	4603      	mov	r3, r0
 800b496:	2b00      	cmp	r3, #0
 800b498:	d00c      	beq.n	800b4b4 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b49e:	f043 0210 	orr.w	r2, r3, #16
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800b4b2:	e01e      	b.n	800b4f2 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4be:	2b40      	cmp	r3, #64	; 0x40
 800b4c0:	d007      	beq.n	800b4d2 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4d0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	685a      	ldr	r2, [r3, #4]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f042 0220 	orr.w	r2, r2, #32
 800b4e0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	685a      	ldr	r2, [r3, #4]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f042 0201 	orr.w	r2, r2, #1
 800b4f0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b4fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3718      	adds	r7, #24
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	0800b99d 	.word	0x0800b99d
 800b508:	0800b849 	.word	0x0800b849
 800b50c:	0800b9d5 	.word	0x0800b9d5

0800b510 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
 800b51c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b51e:	2300      	movs	r3, #0
 800b520:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d101      	bne.n	800b530 <HAL_SPI_TransmitReceive_DMA+0x20>
 800b52c:	2302      	movs	r3, #2
 800b52e:	e0e3      	b.n	800b6f8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2201      	movs	r2, #1
 800b534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b53e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800b546:	7dbb      	ldrb	r3, [r7, #22]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d00d      	beq.n	800b568 <HAL_SPI_TransmitReceive_DMA+0x58>
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b552:	d106      	bne.n	800b562 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d102      	bne.n	800b562 <HAL_SPI_TransmitReceive_DMA+0x52>
 800b55c:	7dbb      	ldrb	r3, [r7, #22]
 800b55e:	2b04      	cmp	r3, #4
 800b560:	d002      	beq.n	800b568 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800b562:	2302      	movs	r3, #2
 800b564:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b566:	e0c2      	b.n	800b6ee <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d005      	beq.n	800b57a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d002      	beq.n	800b57a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800b574:	887b      	ldrh	r3, [r7, #2]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d102      	bne.n	800b580 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b57e:	e0b6      	b.n	800b6ee <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b586:	b2db      	uxtb	r3, r3
 800b588:	2b04      	cmp	r3, #4
 800b58a:	d003      	beq.n	800b594 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2205      	movs	r2, #5
 800b590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2200      	movs	r2, #0
 800b598:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	68ba      	ldr	r2, [r7, #8]
 800b59e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	887a      	ldrh	r2, [r7, #2]
 800b5a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	887a      	ldrh	r2, [r7, #2]
 800b5aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	887a      	ldrh	r2, [r7, #2]
 800b5b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	887a      	ldrh	r2, [r7, #2]
 800b5bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	2b04      	cmp	r3, #4
 800b5d4:	d108      	bne.n	800b5e8 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5da:	4a49      	ldr	r2, [pc, #292]	; (800b700 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800b5dc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5e2:	4a48      	ldr	r2, [pc, #288]	; (800b704 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800b5e4:	63da      	str	r2, [r3, #60]	; 0x3c
 800b5e6:	e007      	b.n	800b5f8 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5ec:	4a46      	ldr	r2, [pc, #280]	; (800b708 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800b5ee:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5f4:	4a45      	ldr	r2, [pc, #276]	; (800b70c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800b5f6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5fc:	4a44      	ldr	r2, [pc, #272]	; (800b710 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800b5fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b604:	2200      	movs	r2, #0
 800b606:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	330c      	adds	r3, #12
 800b612:	4619      	mov	r1, r3
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b618:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b61e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800b620:	f7fc fd5e 	bl	80080e0 <HAL_DMA_Start_IT>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00c      	beq.n	800b644 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b62e:	f043 0210 	orr.w	r2, r3, #16
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b636:	2301      	movs	r3, #1
 800b638:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2201      	movs	r2, #1
 800b63e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800b642:	e054      	b.n	800b6ee <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	685a      	ldr	r2, [r3, #4]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f042 0201 	orr.w	r2, r2, #1
 800b652:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b658:	2200      	movs	r2, #0
 800b65a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b660:	2200      	movs	r2, #0
 800b662:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b668:	2200      	movs	r2, #0
 800b66a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b670:	2200      	movs	r2, #0
 800b672:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b67c:	4619      	mov	r1, r3
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	330c      	adds	r3, #12
 800b684:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b68a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b68c:	f7fc fd28 	bl	80080e0 <HAL_DMA_Start_IT>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00c      	beq.n	800b6b0 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b69a:	f043 0210 	orr.w	r2, r3, #16
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800b6ae:	e01e      	b.n	800b6ee <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ba:	2b40      	cmp	r3, #64	; 0x40
 800b6bc:	d007      	beq.n	800b6ce <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6cc:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	685a      	ldr	r2, [r3, #4]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f042 0220 	orr.w	r2, r2, #32
 800b6dc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	685a      	ldr	r2, [r3, #4]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f042 0202 	orr.w	r2, r2, #2
 800b6ec:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3718      	adds	r7, #24
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	0800b99d 	.word	0x0800b99d
 800b704:	0800b849 	.word	0x0800b849
 800b708:	0800b9b9 	.word	0x0800b9b9
 800b70c:	0800b8f1 	.word	0x0800b8f1
 800b710:	0800b9d5 	.word	0x0800b9d5

0800b714 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b71c:	bf00      	nop
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b744:	bf00      	nop
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800b76c:	bf00      	nop
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b778:	b480      	push	{r7}
 800b77a:	b083      	sub	sp, #12
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800b780:	bf00      	nop
 800b782:	370c      	adds	r7, #12
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b794:	bf00      	nop
 800b796:	370c      	adds	r7, #12
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr

0800b7a0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b7ae:	f7fb fec5 	bl	800753c <HAL_GetTick>
 800b7b2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7c2:	d03b      	beq.n	800b83c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	685a      	ldr	r2, [r3, #4]
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f022 0220 	bic.w	r2, r2, #32
 800b7d2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	685a      	ldr	r2, [r3, #4]
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f022 0202 	bic.w	r2, r2, #2
 800b7e2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b7e4:	693a      	ldr	r2, [r7, #16]
 800b7e6:	2164      	movs	r1, #100	; 0x64
 800b7e8:	6978      	ldr	r0, [r7, #20]
 800b7ea:	f000 fa01 	bl	800bbf0 <SPI_EndRxTxTransaction>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d005      	beq.n	800b800 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7f8:	f043 0220 	orr.w	r2, r3, #32
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d10a      	bne.n	800b81e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b808:	2300      	movs	r3, #0
 800b80a:	60fb      	str	r3, [r7, #12]
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	60fb      	str	r3, [r7, #12]
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	60fb      	str	r3, [r7, #12]
 800b81c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	2200      	movs	r2, #0
 800b822:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b830:	2b00      	cmp	r3, #0
 800b832:	d003      	beq.n	800b83c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b834:	6978      	ldr	r0, [r7, #20]
 800b836:	f7ff ffa9 	bl	800b78c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b83a:	e002      	b.n	800b842 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800b83c:	6978      	ldr	r0, [r7, #20]
 800b83e:	f7ff ff69 	bl	800b714 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b854:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b856:	f7fb fe71 	bl	800753c <HAL_GetTick>
 800b85a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b86a:	d03b      	beq.n	800b8e4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	685a      	ldr	r2, [r3, #4]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f022 0220 	bic.w	r2, r2, #32
 800b87a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d10d      	bne.n	800b8a0 <SPI_DMAReceiveCplt+0x58>
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b88c:	d108      	bne.n	800b8a0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	685a      	ldr	r2, [r3, #4]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f022 0203 	bic.w	r2, r2, #3
 800b89c:	605a      	str	r2, [r3, #4]
 800b89e:	e007      	b.n	800b8b0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	685a      	ldr	r2, [r3, #4]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f022 0201 	bic.w	r2, r2, #1
 800b8ae:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b8b0:	68ba      	ldr	r2, [r7, #8]
 800b8b2:	2164      	movs	r1, #100	; 0x64
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f000 f935 	bl	800bb24 <SPI_EndRxTransaction>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d002      	beq.n	800b8c6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2220      	movs	r2, #32
 800b8c4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d003      	beq.n	800b8e4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f7ff ff55 	bl	800b78c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b8e2:	e002      	b.n	800b8ea <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800b8e4:	68f8      	ldr	r0, [r7, #12]
 800b8e6:	f7ff ff1f 	bl	800b728 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8fc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8fe:	f7fb fe1d 	bl	800753c <HAL_GetTick>
 800b902:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b90e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b912:	d02f      	beq.n	800b974 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	685a      	ldr	r2, [r3, #4]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f022 0220 	bic.w	r2, r2, #32
 800b922:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b924:	68ba      	ldr	r2, [r7, #8]
 800b926:	2164      	movs	r1, #100	; 0x64
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f000 f961 	bl	800bbf0 <SPI_EndRxTxTransaction>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d005      	beq.n	800b940 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b938:	f043 0220 	orr.w	r2, r3, #32
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	685a      	ldr	r2, [r3, #4]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f022 0203 	bic.w	r2, r2, #3
 800b94e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2200      	movs	r2, #0
 800b954:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2200      	movs	r2, #0
 800b95a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2201      	movs	r2, #1
 800b960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d003      	beq.n	800b974 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f7ff ff0d 	bl	800b78c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b972:	e002      	b.n	800b97a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f7ff fee1 	bl	800b73c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b97a:	3710      	adds	r7, #16
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b98c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b98e:	68f8      	ldr	r0, [r7, #12]
 800b990:	f7ff fede 	bl	800b750 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b994:	bf00      	nop
 800b996:	3710      	adds	r7, #16
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f7ff feda 	bl	800b764 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b9b0:	bf00      	nop
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9c4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f7ff fed6 	bl	800b778 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b9cc:	bf00      	nop
 800b9ce:	3710      	adds	r7, #16
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	685a      	ldr	r2, [r3, #4]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f022 0203 	bic.w	r2, r2, #3
 800b9f0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9f6:	f043 0210 	orr.w	r2, r3, #16
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2201      	movs	r2, #1
 800ba02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ba06:	68f8      	ldr	r0, [r7, #12]
 800ba08:	f7ff fec0 	bl	800b78c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ba0c:	bf00      	nop
 800ba0e:	3710      	adds	r7, #16
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b088      	sub	sp, #32
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	60b9      	str	r1, [r7, #8]
 800ba1e:	603b      	str	r3, [r7, #0]
 800ba20:	4613      	mov	r3, r2
 800ba22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ba24:	f7fb fd8a 	bl	800753c <HAL_GetTick>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2c:	1a9b      	subs	r3, r3, r2
 800ba2e:	683a      	ldr	r2, [r7, #0]
 800ba30:	4413      	add	r3, r2
 800ba32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ba34:	f7fb fd82 	bl	800753c <HAL_GetTick>
 800ba38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ba3a:	4b39      	ldr	r3, [pc, #228]	; (800bb20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	015b      	lsls	r3, r3, #5
 800ba40:	0d1b      	lsrs	r3, r3, #20
 800ba42:	69fa      	ldr	r2, [r7, #28]
 800ba44:	fb02 f303 	mul.w	r3, r2, r3
 800ba48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ba4a:	e054      	b.n	800baf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba52:	d050      	beq.n	800baf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ba54:	f7fb fd72 	bl	800753c <HAL_GetTick>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	1ad3      	subs	r3, r2, r3
 800ba5e:	69fa      	ldr	r2, [r7, #28]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d902      	bls.n	800ba6a <SPI_WaitFlagStateUntilTimeout+0x56>
 800ba64:	69fb      	ldr	r3, [r7, #28]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d13d      	bne.n	800bae6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	685a      	ldr	r2, [r3, #4]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ba78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ba82:	d111      	bne.n	800baa8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba8c:	d004      	beq.n	800ba98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba96:	d107      	bne.n	800baa8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800baa6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bab0:	d10f      	bne.n	800bad2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bac0:	601a      	str	r2, [r3, #0]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bad0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2201      	movs	r2, #1
 800bad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2200      	movs	r2, #0
 800bade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bae2:	2303      	movs	r3, #3
 800bae4:	e017      	b.n	800bb16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d101      	bne.n	800baf0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800baec:	2300      	movs	r3, #0
 800baee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	3b01      	subs	r3, #1
 800baf4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	689a      	ldr	r2, [r3, #8]
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	4013      	ands	r3, r2
 800bb00:	68ba      	ldr	r2, [r7, #8]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	bf0c      	ite	eq
 800bb06:	2301      	moveq	r3, #1
 800bb08:	2300      	movne	r3, #0
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	79fb      	ldrb	r3, [r7, #7]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d19b      	bne.n	800ba4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3720      	adds	r7, #32
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	20000004 	.word	0x20000004

0800bb24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b086      	sub	sp, #24
 800bb28:	af02      	add	r7, sp, #8
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb38:	d111      	bne.n	800bb5e <SPI_EndRxTransaction+0x3a>
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb42:	d004      	beq.n	800bb4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb4c:	d107      	bne.n	800bb5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb5c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb66:	d12a      	bne.n	800bbbe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb70:	d012      	beq.n	800bb98 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	9300      	str	r3, [sp, #0]
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	2180      	movs	r1, #128	; 0x80
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	f7ff ff49 	bl	800ba14 <SPI_WaitFlagStateUntilTimeout>
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d02d      	beq.n	800bbe4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb8c:	f043 0220 	orr.w	r2, r3, #32
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bb94:	2303      	movs	r3, #3
 800bb96:	e026      	b.n	800bbe6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	9300      	str	r3, [sp, #0]
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	2101      	movs	r1, #1
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f7ff ff36 	bl	800ba14 <SPI_WaitFlagStateUntilTimeout>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d01a      	beq.n	800bbe4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbb2:	f043 0220 	orr.w	r2, r3, #32
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bbba:	2303      	movs	r3, #3
 800bbbc:	e013      	b.n	800bbe6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	9300      	str	r3, [sp, #0]
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	2101      	movs	r1, #1
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f7ff ff23 	bl	800ba14 <SPI_WaitFlagStateUntilTimeout>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d007      	beq.n	800bbe4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbd8:	f043 0220 	orr.w	r2, r3, #32
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	e000      	b.n	800bbe6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
	...

0800bbf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b088      	sub	sp, #32
 800bbf4:	af02      	add	r7, sp, #8
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bbfc:	4b1b      	ldr	r3, [pc, #108]	; (800bc6c <SPI_EndRxTxTransaction+0x7c>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a1b      	ldr	r2, [pc, #108]	; (800bc70 <SPI_EndRxTxTransaction+0x80>)
 800bc02:	fba2 2303 	umull	r2, r3, r2, r3
 800bc06:	0d5b      	lsrs	r3, r3, #21
 800bc08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bc0c:	fb02 f303 	mul.w	r3, r2, r3
 800bc10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc1a:	d112      	bne.n	800bc42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	2200      	movs	r2, #0
 800bc24:	2180      	movs	r1, #128	; 0x80
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f7ff fef4 	bl	800ba14 <SPI_WaitFlagStateUntilTimeout>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d016      	beq.n	800bc60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc36:	f043 0220 	orr.w	r2, r3, #32
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bc3e:	2303      	movs	r3, #3
 800bc40:	e00f      	b.n	800bc62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00a      	beq.n	800bc5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc58:	2b80      	cmp	r3, #128	; 0x80
 800bc5a:	d0f2      	beq.n	800bc42 <SPI_EndRxTxTransaction+0x52>
 800bc5c:	e000      	b.n	800bc60 <SPI_EndRxTxTransaction+0x70>
        break;
 800bc5e:	bf00      	nop
  }

  return HAL_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3718      	adds	r7, #24
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	20000004 	.word	0x20000004
 800bc70:	165e9f81 	.word	0x165e9f81

0800bc74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d101      	bne.n	800bc86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc82:	2301      	movs	r3, #1
 800bc84:	e041      	b.n	800bd0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d106      	bne.n	800bca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f7f6 ff14 	bl	8002ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2202      	movs	r2, #2
 800bca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	3304      	adds	r3, #4
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	4610      	mov	r0, r2
 800bcb4:	f000 fc7a 	bl	800c5ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2201      	movs	r2, #1
 800bd04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
	...

0800bd14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d001      	beq.n	800bd2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e04e      	b.n	800bdca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2202      	movs	r2, #2
 800bd30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	68da      	ldr	r2, [r3, #12]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f042 0201 	orr.w	r2, r2, #1
 800bd42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a23      	ldr	r2, [pc, #140]	; (800bdd8 <HAL_TIM_Base_Start_IT+0xc4>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d022      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd56:	d01d      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a1f      	ldr	r2, [pc, #124]	; (800bddc <HAL_TIM_Base_Start_IT+0xc8>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d018      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a1e      	ldr	r2, [pc, #120]	; (800bde0 <HAL_TIM_Base_Start_IT+0xcc>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d013      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a1c      	ldr	r2, [pc, #112]	; (800bde4 <HAL_TIM_Base_Start_IT+0xd0>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d00e      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a1b      	ldr	r2, [pc, #108]	; (800bde8 <HAL_TIM_Base_Start_IT+0xd4>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d009      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a19      	ldr	r2, [pc, #100]	; (800bdec <HAL_TIM_Base_Start_IT+0xd8>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d004      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4a18      	ldr	r2, [pc, #96]	; (800bdf0 <HAL_TIM_Base_Start_IT+0xdc>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d111      	bne.n	800bdb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	f003 0307 	and.w	r3, r3, #7
 800bd9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2b06      	cmp	r3, #6
 800bda4:	d010      	beq.n	800bdc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f042 0201 	orr.w	r2, r2, #1
 800bdb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdb6:	e007      	b.n	800bdc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f042 0201 	orr.w	r2, r2, #1
 800bdc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bdc8:	2300      	movs	r3, #0
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3714      	adds	r7, #20
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	40010000 	.word	0x40010000
 800bddc:	40000400 	.word	0x40000400
 800bde0:	40000800 	.word	0x40000800
 800bde4:	40000c00 	.word	0x40000c00
 800bde8:	40010400 	.word	0x40010400
 800bdec:	40014000 	.word	0x40014000
 800bdf0:	40001800 	.word	0x40001800

0800bdf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d101      	bne.n	800be06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800be02:	2301      	movs	r3, #1
 800be04:	e041      	b.n	800be8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d106      	bne.n	800be20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2200      	movs	r2, #0
 800be16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 f839 	bl	800be92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2202      	movs	r2, #2
 800be24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	3304      	adds	r3, #4
 800be30:	4619      	mov	r1, r3
 800be32:	4610      	mov	r0, r2
 800be34:	f000 fbba 	bl	800c5ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2201      	movs	r2, #1
 800be3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2201      	movs	r2, #1
 800be44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2201      	movs	r2, #1
 800be4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2201      	movs	r2, #1
 800be54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2201      	movs	r2, #1
 800be5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2201      	movs	r2, #1
 800be64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2201      	movs	r2, #1
 800be6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2201      	movs	r2, #1
 800be74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2201      	movs	r2, #1
 800be7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2201      	movs	r2, #1
 800be84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be88:	2300      	movs	r3, #0
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3708      	adds	r7, #8
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800be92:	b480      	push	{r7}
 800be94:	b083      	sub	sp, #12
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800be9a:	bf00      	nop
 800be9c:	370c      	adds	r7, #12
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr
	...

0800bea8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d109      	bne.n	800becc <HAL_TIM_PWM_Start+0x24>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	bf14      	ite	ne
 800bec4:	2301      	movne	r3, #1
 800bec6:	2300      	moveq	r3, #0
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	e022      	b.n	800bf12 <HAL_TIM_PWM_Start+0x6a>
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	2b04      	cmp	r3, #4
 800bed0:	d109      	bne.n	800bee6 <HAL_TIM_PWM_Start+0x3e>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	2b01      	cmp	r3, #1
 800bedc:	bf14      	ite	ne
 800bede:	2301      	movne	r3, #1
 800bee0:	2300      	moveq	r3, #0
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	e015      	b.n	800bf12 <HAL_TIM_PWM_Start+0x6a>
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	2b08      	cmp	r3, #8
 800beea:	d109      	bne.n	800bf00 <HAL_TIM_PWM_Start+0x58>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	bf14      	ite	ne
 800bef8:	2301      	movne	r3, #1
 800befa:	2300      	moveq	r3, #0
 800befc:	b2db      	uxtb	r3, r3
 800befe:	e008      	b.n	800bf12 <HAL_TIM_PWM_Start+0x6a>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	bf14      	ite	ne
 800bf0c:	2301      	movne	r3, #1
 800bf0e:	2300      	moveq	r3, #0
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d001      	beq.n	800bf1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800bf16:	2301      	movs	r3, #1
 800bf18:	e07c      	b.n	800c014 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d104      	bne.n	800bf2a <HAL_TIM_PWM_Start+0x82>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2202      	movs	r2, #2
 800bf24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf28:	e013      	b.n	800bf52 <HAL_TIM_PWM_Start+0xaa>
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	2b04      	cmp	r3, #4
 800bf2e:	d104      	bne.n	800bf3a <HAL_TIM_PWM_Start+0x92>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2202      	movs	r2, #2
 800bf34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf38:	e00b      	b.n	800bf52 <HAL_TIM_PWM_Start+0xaa>
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	2b08      	cmp	r3, #8
 800bf3e:	d104      	bne.n	800bf4a <HAL_TIM_PWM_Start+0xa2>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2202      	movs	r2, #2
 800bf44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf48:	e003      	b.n	800bf52 <HAL_TIM_PWM_Start+0xaa>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2202      	movs	r2, #2
 800bf4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2201      	movs	r2, #1
 800bf58:	6839      	ldr	r1, [r7, #0]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f000 fe10 	bl	800cb80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4a2d      	ldr	r2, [pc, #180]	; (800c01c <HAL_TIM_PWM_Start+0x174>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d004      	beq.n	800bf74 <HAL_TIM_PWM_Start+0xcc>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	4a2c      	ldr	r2, [pc, #176]	; (800c020 <HAL_TIM_PWM_Start+0x178>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d101      	bne.n	800bf78 <HAL_TIM_PWM_Start+0xd0>
 800bf74:	2301      	movs	r3, #1
 800bf76:	e000      	b.n	800bf7a <HAL_TIM_PWM_Start+0xd2>
 800bf78:	2300      	movs	r3, #0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d007      	beq.n	800bf8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4a22      	ldr	r2, [pc, #136]	; (800c01c <HAL_TIM_PWM_Start+0x174>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d022      	beq.n	800bfde <HAL_TIM_PWM_Start+0x136>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfa0:	d01d      	beq.n	800bfde <HAL_TIM_PWM_Start+0x136>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4a1f      	ldr	r2, [pc, #124]	; (800c024 <HAL_TIM_PWM_Start+0x17c>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d018      	beq.n	800bfde <HAL_TIM_PWM_Start+0x136>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a1d      	ldr	r2, [pc, #116]	; (800c028 <HAL_TIM_PWM_Start+0x180>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d013      	beq.n	800bfde <HAL_TIM_PWM_Start+0x136>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a1c      	ldr	r2, [pc, #112]	; (800c02c <HAL_TIM_PWM_Start+0x184>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d00e      	beq.n	800bfde <HAL_TIM_PWM_Start+0x136>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4a16      	ldr	r2, [pc, #88]	; (800c020 <HAL_TIM_PWM_Start+0x178>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d009      	beq.n	800bfde <HAL_TIM_PWM_Start+0x136>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	4a18      	ldr	r2, [pc, #96]	; (800c030 <HAL_TIM_PWM_Start+0x188>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d004      	beq.n	800bfde <HAL_TIM_PWM_Start+0x136>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a16      	ldr	r2, [pc, #88]	; (800c034 <HAL_TIM_PWM_Start+0x18c>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d111      	bne.n	800c002 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	f003 0307 	and.w	r3, r3, #7
 800bfe8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2b06      	cmp	r3, #6
 800bfee:	d010      	beq.n	800c012 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f042 0201 	orr.w	r2, r2, #1
 800bffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c000:	e007      	b.n	800c012 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	681a      	ldr	r2, [r3, #0]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f042 0201 	orr.w	r2, r2, #1
 800c010:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	40010000 	.word	0x40010000
 800c020:	40010400 	.word	0x40010400
 800c024:	40000400 	.word	0x40000400
 800c028:	40000800 	.word	0x40000800
 800c02c:	40000c00 	.word	0x40000c00
 800c030:	40014000 	.word	0x40014000
 800c034:	40001800 	.word	0x40001800

0800c038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	691b      	ldr	r3, [r3, #16]
 800c046:	f003 0302 	and.w	r3, r3, #2
 800c04a:	2b02      	cmp	r3, #2
 800c04c:	d122      	bne.n	800c094 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	f003 0302 	and.w	r3, r3, #2
 800c058:	2b02      	cmp	r3, #2
 800c05a:	d11b      	bne.n	800c094 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f06f 0202 	mvn.w	r2, #2
 800c064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2201      	movs	r2, #1
 800c06a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	699b      	ldr	r3, [r3, #24]
 800c072:	f003 0303 	and.w	r3, r3, #3
 800c076:	2b00      	cmp	r3, #0
 800c078:	d003      	beq.n	800c082 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 fa77 	bl	800c56e <HAL_TIM_IC_CaptureCallback>
 800c080:	e005      	b.n	800c08e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 fa69 	bl	800c55a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 fa7a 	bl	800c582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	691b      	ldr	r3, [r3, #16]
 800c09a:	f003 0304 	and.w	r3, r3, #4
 800c09e:	2b04      	cmp	r3, #4
 800c0a0:	d122      	bne.n	800c0e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	68db      	ldr	r3, [r3, #12]
 800c0a8:	f003 0304 	and.w	r3, r3, #4
 800c0ac:	2b04      	cmp	r3, #4
 800c0ae:	d11b      	bne.n	800c0e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f06f 0204 	mvn.w	r2, #4
 800c0b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2202      	movs	r2, #2
 800c0be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	699b      	ldr	r3, [r3, #24]
 800c0c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d003      	beq.n	800c0d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 fa4d 	bl	800c56e <HAL_TIM_IC_CaptureCallback>
 800c0d4:	e005      	b.n	800c0e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 fa3f 	bl	800c55a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 fa50 	bl	800c582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	691b      	ldr	r3, [r3, #16]
 800c0ee:	f003 0308 	and.w	r3, r3, #8
 800c0f2:	2b08      	cmp	r3, #8
 800c0f4:	d122      	bne.n	800c13c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	f003 0308 	and.w	r3, r3, #8
 800c100:	2b08      	cmp	r3, #8
 800c102:	d11b      	bne.n	800c13c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f06f 0208 	mvn.w	r2, #8
 800c10c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2204      	movs	r2, #4
 800c112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	69db      	ldr	r3, [r3, #28]
 800c11a:	f003 0303 	and.w	r3, r3, #3
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d003      	beq.n	800c12a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 fa23 	bl	800c56e <HAL_TIM_IC_CaptureCallback>
 800c128:	e005      	b.n	800c136 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 fa15 	bl	800c55a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 fa26 	bl	800c582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2200      	movs	r2, #0
 800c13a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	691b      	ldr	r3, [r3, #16]
 800c142:	f003 0310 	and.w	r3, r3, #16
 800c146:	2b10      	cmp	r3, #16
 800c148:	d122      	bne.n	800c190 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	f003 0310 	and.w	r3, r3, #16
 800c154:	2b10      	cmp	r3, #16
 800c156:	d11b      	bne.n	800c190 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f06f 0210 	mvn.w	r2, #16
 800c160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2208      	movs	r2, #8
 800c166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	69db      	ldr	r3, [r3, #28]
 800c16e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c172:	2b00      	cmp	r3, #0
 800c174:	d003      	beq.n	800c17e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 f9f9 	bl	800c56e <HAL_TIM_IC_CaptureCallback>
 800c17c:	e005      	b.n	800c18a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f9eb 	bl	800c55a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f000 f9fc 	bl	800c582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	691b      	ldr	r3, [r3, #16]
 800c196:	f003 0301 	and.w	r3, r3, #1
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d10e      	bne.n	800c1bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	f003 0301 	and.w	r3, r3, #1
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d107      	bne.n	800c1bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f06f 0201 	mvn.w	r2, #1
 800c1b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f7f4 ff8c 	bl	80010d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	691b      	ldr	r3, [r3, #16]
 800c1c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1c6:	2b80      	cmp	r3, #128	; 0x80
 800c1c8:	d10e      	bne.n	800c1e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1d4:	2b80      	cmp	r3, #128	; 0x80
 800c1d6:	d107      	bne.n	800c1e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c1e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 fd78 	bl	800ccd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	691b      	ldr	r3, [r3, #16]
 800c1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1f2:	2b40      	cmp	r3, #64	; 0x40
 800c1f4:	d10e      	bne.n	800c214 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	68db      	ldr	r3, [r3, #12]
 800c1fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c200:	2b40      	cmp	r3, #64	; 0x40
 800c202:	d107      	bne.n	800c214 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c20c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 f9c1 	bl	800c596 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	691b      	ldr	r3, [r3, #16]
 800c21a:	f003 0320 	and.w	r3, r3, #32
 800c21e:	2b20      	cmp	r3, #32
 800c220:	d10e      	bne.n	800c240 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	68db      	ldr	r3, [r3, #12]
 800c228:	f003 0320 	and.w	r3, r3, #32
 800c22c:	2b20      	cmp	r3, #32
 800c22e:	d107      	bne.n	800c240 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f06f 0220 	mvn.w	r2, #32
 800c238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 fd42 	bl	800ccc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c240:	bf00      	nop
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b086      	sub	sp, #24
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c254:	2300      	movs	r3, #0
 800c256:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d101      	bne.n	800c266 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c262:	2302      	movs	r3, #2
 800c264:	e0ae      	b.n	800c3c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2201      	movs	r2, #1
 800c26a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2b0c      	cmp	r3, #12
 800c272:	f200 809f 	bhi.w	800c3b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c276:	a201      	add	r2, pc, #4	; (adr r2, 800c27c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c27c:	0800c2b1 	.word	0x0800c2b1
 800c280:	0800c3b5 	.word	0x0800c3b5
 800c284:	0800c3b5 	.word	0x0800c3b5
 800c288:	0800c3b5 	.word	0x0800c3b5
 800c28c:	0800c2f1 	.word	0x0800c2f1
 800c290:	0800c3b5 	.word	0x0800c3b5
 800c294:	0800c3b5 	.word	0x0800c3b5
 800c298:	0800c3b5 	.word	0x0800c3b5
 800c29c:	0800c333 	.word	0x0800c333
 800c2a0:	0800c3b5 	.word	0x0800c3b5
 800c2a4:	0800c3b5 	.word	0x0800c3b5
 800c2a8:	0800c3b5 	.word	0x0800c3b5
 800c2ac:	0800c373 	.word	0x0800c373
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	68b9      	ldr	r1, [r7, #8]
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f000 fa18 	bl	800c6ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	699a      	ldr	r2, [r3, #24]
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f042 0208 	orr.w	r2, r2, #8
 800c2ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	699a      	ldr	r2, [r3, #24]
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f022 0204 	bic.w	r2, r2, #4
 800c2da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	6999      	ldr	r1, [r3, #24]
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	691a      	ldr	r2, [r3, #16]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	430a      	orrs	r2, r1
 800c2ec:	619a      	str	r2, [r3, #24]
      break;
 800c2ee:	e064      	b.n	800c3ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	68b9      	ldr	r1, [r7, #8]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f000 fa68 	bl	800c7cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	699a      	ldr	r2, [r3, #24]
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c30a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	699a      	ldr	r2, [r3, #24]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c31a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	6999      	ldr	r1, [r3, #24]
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	691b      	ldr	r3, [r3, #16]
 800c326:	021a      	lsls	r2, r3, #8
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	430a      	orrs	r2, r1
 800c32e:	619a      	str	r2, [r3, #24]
      break;
 800c330:	e043      	b.n	800c3ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	68b9      	ldr	r1, [r7, #8]
 800c338:	4618      	mov	r0, r3
 800c33a:	f000 fabd 	bl	800c8b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	69da      	ldr	r2, [r3, #28]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f042 0208 	orr.w	r2, r2, #8
 800c34c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	69da      	ldr	r2, [r3, #28]
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f022 0204 	bic.w	r2, r2, #4
 800c35c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	69d9      	ldr	r1, [r3, #28]
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	691a      	ldr	r2, [r3, #16]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	430a      	orrs	r2, r1
 800c36e:	61da      	str	r2, [r3, #28]
      break;
 800c370:	e023      	b.n	800c3ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	68b9      	ldr	r1, [r7, #8]
 800c378:	4618      	mov	r0, r3
 800c37a:	f000 fb11 	bl	800c9a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	69da      	ldr	r2, [r3, #28]
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c38c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	69da      	ldr	r2, [r3, #28]
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c39c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	69d9      	ldr	r1, [r3, #28]
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	691b      	ldr	r3, [r3, #16]
 800c3a8:	021a      	lsls	r2, r3, #8
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	430a      	orrs	r2, r1
 800c3b0:	61da      	str	r2, [r3, #28]
      break;
 800c3b2:	e002      	b.n	800c3ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	75fb      	strb	r3, [r7, #23]
      break;
 800c3b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c3c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3718      	adds	r7, #24
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b084      	sub	sp, #16
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d101      	bne.n	800c3e8 <HAL_TIM_ConfigClockSource+0x1c>
 800c3e4:	2302      	movs	r3, #2
 800c3e6:	e0b4      	b.n	800c552 <HAL_TIM_ConfigClockSource+0x186>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2202      	movs	r2, #2
 800c3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c40e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	68ba      	ldr	r2, [r7, #8]
 800c416:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c420:	d03e      	beq.n	800c4a0 <HAL_TIM_ConfigClockSource+0xd4>
 800c422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c426:	f200 8087 	bhi.w	800c538 <HAL_TIM_ConfigClockSource+0x16c>
 800c42a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c42e:	f000 8086 	beq.w	800c53e <HAL_TIM_ConfigClockSource+0x172>
 800c432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c436:	d87f      	bhi.n	800c538 <HAL_TIM_ConfigClockSource+0x16c>
 800c438:	2b70      	cmp	r3, #112	; 0x70
 800c43a:	d01a      	beq.n	800c472 <HAL_TIM_ConfigClockSource+0xa6>
 800c43c:	2b70      	cmp	r3, #112	; 0x70
 800c43e:	d87b      	bhi.n	800c538 <HAL_TIM_ConfigClockSource+0x16c>
 800c440:	2b60      	cmp	r3, #96	; 0x60
 800c442:	d050      	beq.n	800c4e6 <HAL_TIM_ConfigClockSource+0x11a>
 800c444:	2b60      	cmp	r3, #96	; 0x60
 800c446:	d877      	bhi.n	800c538 <HAL_TIM_ConfigClockSource+0x16c>
 800c448:	2b50      	cmp	r3, #80	; 0x50
 800c44a:	d03c      	beq.n	800c4c6 <HAL_TIM_ConfigClockSource+0xfa>
 800c44c:	2b50      	cmp	r3, #80	; 0x50
 800c44e:	d873      	bhi.n	800c538 <HAL_TIM_ConfigClockSource+0x16c>
 800c450:	2b40      	cmp	r3, #64	; 0x40
 800c452:	d058      	beq.n	800c506 <HAL_TIM_ConfigClockSource+0x13a>
 800c454:	2b40      	cmp	r3, #64	; 0x40
 800c456:	d86f      	bhi.n	800c538 <HAL_TIM_ConfigClockSource+0x16c>
 800c458:	2b30      	cmp	r3, #48	; 0x30
 800c45a:	d064      	beq.n	800c526 <HAL_TIM_ConfigClockSource+0x15a>
 800c45c:	2b30      	cmp	r3, #48	; 0x30
 800c45e:	d86b      	bhi.n	800c538 <HAL_TIM_ConfigClockSource+0x16c>
 800c460:	2b20      	cmp	r3, #32
 800c462:	d060      	beq.n	800c526 <HAL_TIM_ConfigClockSource+0x15a>
 800c464:	2b20      	cmp	r3, #32
 800c466:	d867      	bhi.n	800c538 <HAL_TIM_ConfigClockSource+0x16c>
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d05c      	beq.n	800c526 <HAL_TIM_ConfigClockSource+0x15a>
 800c46c:	2b10      	cmp	r3, #16
 800c46e:	d05a      	beq.n	800c526 <HAL_TIM_ConfigClockSource+0x15a>
 800c470:	e062      	b.n	800c538 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6818      	ldr	r0, [r3, #0]
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	6899      	ldr	r1, [r3, #8]
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	685a      	ldr	r2, [r3, #4]
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	f000 fb5d 	bl	800cb40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c494:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	68ba      	ldr	r2, [r7, #8]
 800c49c:	609a      	str	r2, [r3, #8]
      break;
 800c49e:	e04f      	b.n	800c540 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6818      	ldr	r0, [r3, #0]
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	6899      	ldr	r1, [r3, #8]
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	685a      	ldr	r2, [r3, #4]
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	f000 fb46 	bl	800cb40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	689a      	ldr	r2, [r3, #8]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c4c2:	609a      	str	r2, [r3, #8]
      break;
 800c4c4:	e03c      	b.n	800c540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6818      	ldr	r0, [r3, #0]
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	6859      	ldr	r1, [r3, #4]
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	f000 faba 	bl	800ca4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2150      	movs	r1, #80	; 0x50
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f000 fb13 	bl	800cb0a <TIM_ITRx_SetConfig>
      break;
 800c4e4:	e02c      	b.n	800c540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6818      	ldr	r0, [r3, #0]
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	6859      	ldr	r1, [r3, #4]
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	f000 fad9 	bl	800caaa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2160      	movs	r1, #96	; 0x60
 800c4fe:	4618      	mov	r0, r3
 800c500:	f000 fb03 	bl	800cb0a <TIM_ITRx_SetConfig>
      break;
 800c504:	e01c      	b.n	800c540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6818      	ldr	r0, [r3, #0]
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	6859      	ldr	r1, [r3, #4]
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	461a      	mov	r2, r3
 800c514:	f000 fa9a 	bl	800ca4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2140      	movs	r1, #64	; 0x40
 800c51e:	4618      	mov	r0, r3
 800c520:	f000 faf3 	bl	800cb0a <TIM_ITRx_SetConfig>
      break;
 800c524:	e00c      	b.n	800c540 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4619      	mov	r1, r3
 800c530:	4610      	mov	r0, r2
 800c532:	f000 faea 	bl	800cb0a <TIM_ITRx_SetConfig>
      break;
 800c536:	e003      	b.n	800c540 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c538:	2301      	movs	r3, #1
 800c53a:	73fb      	strb	r3, [r7, #15]
      break;
 800c53c:	e000      	b.n	800c540 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c53e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2201      	movs	r2, #1
 800c544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2200      	movs	r2, #0
 800c54c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c550:	7bfb      	ldrb	r3, [r7, #15]
}
 800c552:	4618      	mov	r0, r3
 800c554:	3710      	adds	r7, #16
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c55a:	b480      	push	{r7}
 800c55c:	b083      	sub	sp, #12
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c562:	bf00      	nop
 800c564:	370c      	adds	r7, #12
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr

0800c56e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c56e:	b480      	push	{r7}
 800c570:	b083      	sub	sp, #12
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c576:	bf00      	nop
 800c578:	370c      	adds	r7, #12
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr

0800c582 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c582:	b480      	push	{r7}
 800c584:	b083      	sub	sp, #12
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c58a:	bf00      	nop
 800c58c:	370c      	adds	r7, #12
 800c58e:	46bd      	mov	sp, r7
 800c590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c594:	4770      	bx	lr

0800c596 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c596:	b480      	push	{r7}
 800c598:	b083      	sub	sp, #12
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c59e:	bf00      	nop
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr
	...

0800c5ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b085      	sub	sp, #20
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4a40      	ldr	r2, [pc, #256]	; (800c6c0 <TIM_Base_SetConfig+0x114>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d013      	beq.n	800c5ec <TIM_Base_SetConfig+0x40>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5ca:	d00f      	beq.n	800c5ec <TIM_Base_SetConfig+0x40>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	4a3d      	ldr	r2, [pc, #244]	; (800c6c4 <TIM_Base_SetConfig+0x118>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d00b      	beq.n	800c5ec <TIM_Base_SetConfig+0x40>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	4a3c      	ldr	r2, [pc, #240]	; (800c6c8 <TIM_Base_SetConfig+0x11c>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d007      	beq.n	800c5ec <TIM_Base_SetConfig+0x40>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	4a3b      	ldr	r2, [pc, #236]	; (800c6cc <TIM_Base_SetConfig+0x120>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d003      	beq.n	800c5ec <TIM_Base_SetConfig+0x40>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	4a3a      	ldr	r2, [pc, #232]	; (800c6d0 <TIM_Base_SetConfig+0x124>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d108      	bne.n	800c5fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	4313      	orrs	r3, r2
 800c5fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	4a2f      	ldr	r2, [pc, #188]	; (800c6c0 <TIM_Base_SetConfig+0x114>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d02b      	beq.n	800c65e <TIM_Base_SetConfig+0xb2>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c60c:	d027      	beq.n	800c65e <TIM_Base_SetConfig+0xb2>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	4a2c      	ldr	r2, [pc, #176]	; (800c6c4 <TIM_Base_SetConfig+0x118>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d023      	beq.n	800c65e <TIM_Base_SetConfig+0xb2>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	4a2b      	ldr	r2, [pc, #172]	; (800c6c8 <TIM_Base_SetConfig+0x11c>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d01f      	beq.n	800c65e <TIM_Base_SetConfig+0xb2>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	4a2a      	ldr	r2, [pc, #168]	; (800c6cc <TIM_Base_SetConfig+0x120>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d01b      	beq.n	800c65e <TIM_Base_SetConfig+0xb2>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	4a29      	ldr	r2, [pc, #164]	; (800c6d0 <TIM_Base_SetConfig+0x124>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d017      	beq.n	800c65e <TIM_Base_SetConfig+0xb2>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	4a28      	ldr	r2, [pc, #160]	; (800c6d4 <TIM_Base_SetConfig+0x128>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d013      	beq.n	800c65e <TIM_Base_SetConfig+0xb2>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	4a27      	ldr	r2, [pc, #156]	; (800c6d8 <TIM_Base_SetConfig+0x12c>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d00f      	beq.n	800c65e <TIM_Base_SetConfig+0xb2>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	4a26      	ldr	r2, [pc, #152]	; (800c6dc <TIM_Base_SetConfig+0x130>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d00b      	beq.n	800c65e <TIM_Base_SetConfig+0xb2>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	4a25      	ldr	r2, [pc, #148]	; (800c6e0 <TIM_Base_SetConfig+0x134>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d007      	beq.n	800c65e <TIM_Base_SetConfig+0xb2>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4a24      	ldr	r2, [pc, #144]	; (800c6e4 <TIM_Base_SetConfig+0x138>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d003      	beq.n	800c65e <TIM_Base_SetConfig+0xb2>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	4a23      	ldr	r2, [pc, #140]	; (800c6e8 <TIM_Base_SetConfig+0x13c>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d108      	bne.n	800c670 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	68db      	ldr	r3, [r3, #12]
 800c66a:	68fa      	ldr	r2, [r7, #12]
 800c66c:	4313      	orrs	r3, r2
 800c66e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	695b      	ldr	r3, [r3, #20]
 800c67a:	4313      	orrs	r3, r2
 800c67c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	689a      	ldr	r2, [r3, #8]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	681a      	ldr	r2, [r3, #0]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4a0a      	ldr	r2, [pc, #40]	; (800c6c0 <TIM_Base_SetConfig+0x114>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d003      	beq.n	800c6a4 <TIM_Base_SetConfig+0xf8>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a0c      	ldr	r2, [pc, #48]	; (800c6d0 <TIM_Base_SetConfig+0x124>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d103      	bne.n	800c6ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	691a      	ldr	r2, [r3, #16]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	615a      	str	r2, [r3, #20]
}
 800c6b2:	bf00      	nop
 800c6b4:	3714      	adds	r7, #20
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop
 800c6c0:	40010000 	.word	0x40010000
 800c6c4:	40000400 	.word	0x40000400
 800c6c8:	40000800 	.word	0x40000800
 800c6cc:	40000c00 	.word	0x40000c00
 800c6d0:	40010400 	.word	0x40010400
 800c6d4:	40014000 	.word	0x40014000
 800c6d8:	40014400 	.word	0x40014400
 800c6dc:	40014800 	.word	0x40014800
 800c6e0:	40001800 	.word	0x40001800
 800c6e4:	40001c00 	.word	0x40001c00
 800c6e8:	40002000 	.word	0x40002000

0800c6ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b087      	sub	sp, #28
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6a1b      	ldr	r3, [r3, #32]
 800c6fa:	f023 0201 	bic.w	r2, r3, #1
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6a1b      	ldr	r3, [r3, #32]
 800c706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	699b      	ldr	r3, [r3, #24]
 800c712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c71a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f023 0303 	bic.w	r3, r3, #3
 800c722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	4313      	orrs	r3, r2
 800c72c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	f023 0302 	bic.w	r3, r3, #2
 800c734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	689b      	ldr	r3, [r3, #8]
 800c73a:	697a      	ldr	r2, [r7, #20]
 800c73c:	4313      	orrs	r3, r2
 800c73e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4a20      	ldr	r2, [pc, #128]	; (800c7c4 <TIM_OC1_SetConfig+0xd8>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d003      	beq.n	800c750 <TIM_OC1_SetConfig+0x64>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4a1f      	ldr	r2, [pc, #124]	; (800c7c8 <TIM_OC1_SetConfig+0xdc>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d10c      	bne.n	800c76a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	f023 0308 	bic.w	r3, r3, #8
 800c756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	68db      	ldr	r3, [r3, #12]
 800c75c:	697a      	ldr	r2, [r7, #20]
 800c75e:	4313      	orrs	r3, r2
 800c760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	f023 0304 	bic.w	r3, r3, #4
 800c768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	4a15      	ldr	r2, [pc, #84]	; (800c7c4 <TIM_OC1_SetConfig+0xd8>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d003      	beq.n	800c77a <TIM_OC1_SetConfig+0x8e>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	4a14      	ldr	r2, [pc, #80]	; (800c7c8 <TIM_OC1_SetConfig+0xdc>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d111      	bne.n	800c79e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	695b      	ldr	r3, [r3, #20]
 800c78e:	693a      	ldr	r2, [r7, #16]
 800c790:	4313      	orrs	r3, r2
 800c792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	699b      	ldr	r3, [r3, #24]
 800c798:	693a      	ldr	r2, [r7, #16]
 800c79a:	4313      	orrs	r3, r2
 800c79c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	693a      	ldr	r2, [r7, #16]
 800c7a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	685a      	ldr	r2, [r3, #4]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	697a      	ldr	r2, [r7, #20]
 800c7b6:	621a      	str	r2, [r3, #32]
}
 800c7b8:	bf00      	nop
 800c7ba:	371c      	adds	r7, #28
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr
 800c7c4:	40010000 	.word	0x40010000
 800c7c8:	40010400 	.word	0x40010400

0800c7cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b087      	sub	sp, #28
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6a1b      	ldr	r3, [r3, #32]
 800c7da:	f023 0210 	bic.w	r2, r3, #16
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6a1b      	ldr	r3, [r3, #32]
 800c7e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	699b      	ldr	r3, [r3, #24]
 800c7f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	021b      	lsls	r3, r3, #8
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	4313      	orrs	r3, r2
 800c80e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	f023 0320 	bic.w	r3, r3, #32
 800c816:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	011b      	lsls	r3, r3, #4
 800c81e:	697a      	ldr	r2, [r7, #20]
 800c820:	4313      	orrs	r3, r2
 800c822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	4a22      	ldr	r2, [pc, #136]	; (800c8b0 <TIM_OC2_SetConfig+0xe4>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d003      	beq.n	800c834 <TIM_OC2_SetConfig+0x68>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4a21      	ldr	r2, [pc, #132]	; (800c8b4 <TIM_OC2_SetConfig+0xe8>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d10d      	bne.n	800c850 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c83a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	011b      	lsls	r3, r3, #4
 800c842:	697a      	ldr	r2, [r7, #20]
 800c844:	4313      	orrs	r3, r2
 800c846:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c84e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	4a17      	ldr	r2, [pc, #92]	; (800c8b0 <TIM_OC2_SetConfig+0xe4>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d003      	beq.n	800c860 <TIM_OC2_SetConfig+0x94>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	4a16      	ldr	r2, [pc, #88]	; (800c8b4 <TIM_OC2_SetConfig+0xe8>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d113      	bne.n	800c888 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c866:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c86e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	695b      	ldr	r3, [r3, #20]
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	693a      	ldr	r2, [r7, #16]
 800c878:	4313      	orrs	r3, r2
 800c87a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	699b      	ldr	r3, [r3, #24]
 800c880:	009b      	lsls	r3, r3, #2
 800c882:	693a      	ldr	r2, [r7, #16]
 800c884:	4313      	orrs	r3, r2
 800c886:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	693a      	ldr	r2, [r7, #16]
 800c88c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	68fa      	ldr	r2, [r7, #12]
 800c892:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	685a      	ldr	r2, [r3, #4]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	697a      	ldr	r2, [r7, #20]
 800c8a0:	621a      	str	r2, [r3, #32]
}
 800c8a2:	bf00      	nop
 800c8a4:	371c      	adds	r7, #28
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr
 800c8ae:	bf00      	nop
 800c8b0:	40010000 	.word	0x40010000
 800c8b4:	40010400 	.word	0x40010400

0800c8b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b087      	sub	sp, #28
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6a1b      	ldr	r3, [r3, #32]
 800c8c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6a1b      	ldr	r3, [r3, #32]
 800c8d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	69db      	ldr	r3, [r3, #28]
 800c8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f023 0303 	bic.w	r3, r3, #3
 800c8ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	021b      	lsls	r3, r3, #8
 800c908:	697a      	ldr	r2, [r7, #20]
 800c90a:	4313      	orrs	r3, r2
 800c90c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	4a21      	ldr	r2, [pc, #132]	; (800c998 <TIM_OC3_SetConfig+0xe0>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d003      	beq.n	800c91e <TIM_OC3_SetConfig+0x66>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	4a20      	ldr	r2, [pc, #128]	; (800c99c <TIM_OC3_SetConfig+0xe4>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d10d      	bne.n	800c93a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	021b      	lsls	r3, r3, #8
 800c92c:	697a      	ldr	r2, [r7, #20]
 800c92e:	4313      	orrs	r3, r2
 800c930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	4a16      	ldr	r2, [pc, #88]	; (800c998 <TIM_OC3_SetConfig+0xe0>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d003      	beq.n	800c94a <TIM_OC3_SetConfig+0x92>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	4a15      	ldr	r2, [pc, #84]	; (800c99c <TIM_OC3_SetConfig+0xe4>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d113      	bne.n	800c972 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	695b      	ldr	r3, [r3, #20]
 800c95e:	011b      	lsls	r3, r3, #4
 800c960:	693a      	ldr	r2, [r7, #16]
 800c962:	4313      	orrs	r3, r2
 800c964:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	699b      	ldr	r3, [r3, #24]
 800c96a:	011b      	lsls	r3, r3, #4
 800c96c:	693a      	ldr	r2, [r7, #16]
 800c96e:	4313      	orrs	r3, r2
 800c970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	693a      	ldr	r2, [r7, #16]
 800c976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	68fa      	ldr	r2, [r7, #12]
 800c97c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	685a      	ldr	r2, [r3, #4]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	697a      	ldr	r2, [r7, #20]
 800c98a:	621a      	str	r2, [r3, #32]
}
 800c98c:	bf00      	nop
 800c98e:	371c      	adds	r7, #28
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr
 800c998:	40010000 	.word	0x40010000
 800c99c:	40010400 	.word	0x40010400

0800c9a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b087      	sub	sp, #28
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6a1b      	ldr	r3, [r3, #32]
 800c9ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6a1b      	ldr	r3, [r3, #32]
 800c9ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	69db      	ldr	r3, [r3, #28]
 800c9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	021b      	lsls	r3, r3, #8
 800c9de:	68fa      	ldr	r2, [r7, #12]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c9ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	031b      	lsls	r3, r3, #12
 800c9f2:	693a      	ldr	r2, [r7, #16]
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	4a12      	ldr	r2, [pc, #72]	; (800ca44 <TIM_OC4_SetConfig+0xa4>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d003      	beq.n	800ca08 <TIM_OC4_SetConfig+0x68>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	4a11      	ldr	r2, [pc, #68]	; (800ca48 <TIM_OC4_SetConfig+0xa8>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d109      	bne.n	800ca1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	695b      	ldr	r3, [r3, #20]
 800ca14:	019b      	lsls	r3, r3, #6
 800ca16:	697a      	ldr	r2, [r7, #20]
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	697a      	ldr	r2, [r7, #20]
 800ca20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	68fa      	ldr	r2, [r7, #12]
 800ca26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	685a      	ldr	r2, [r3, #4]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	693a      	ldr	r2, [r7, #16]
 800ca34:	621a      	str	r2, [r3, #32]
}
 800ca36:	bf00      	nop
 800ca38:	371c      	adds	r7, #28
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr
 800ca42:	bf00      	nop
 800ca44:	40010000 	.word	0x40010000
 800ca48:	40010400 	.word	0x40010400

0800ca4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b087      	sub	sp, #28
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	6a1b      	ldr	r3, [r3, #32]
 800ca5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	6a1b      	ldr	r3, [r3, #32]
 800ca62:	f023 0201 	bic.w	r2, r3, #1
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	699b      	ldr	r3, [r3, #24]
 800ca6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ca76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	011b      	lsls	r3, r3, #4
 800ca7c:	693a      	ldr	r2, [r7, #16]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	f023 030a 	bic.w	r3, r3, #10
 800ca88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ca8a:	697a      	ldr	r2, [r7, #20]
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	693a      	ldr	r2, [r7, #16]
 800ca96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	697a      	ldr	r2, [r7, #20]
 800ca9c:	621a      	str	r2, [r3, #32]
}
 800ca9e:	bf00      	nop
 800caa0:	371c      	adds	r7, #28
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr

0800caaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800caaa:	b480      	push	{r7}
 800caac:	b087      	sub	sp, #28
 800caae:	af00      	add	r7, sp, #0
 800cab0:	60f8      	str	r0, [r7, #12]
 800cab2:	60b9      	str	r1, [r7, #8]
 800cab4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	6a1b      	ldr	r3, [r3, #32]
 800caba:	f023 0210 	bic.w	r2, r3, #16
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	699b      	ldr	r3, [r3, #24]
 800cac6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	6a1b      	ldr	r3, [r3, #32]
 800cacc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cad4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	031b      	lsls	r3, r3, #12
 800cada:	697a      	ldr	r2, [r7, #20]
 800cadc:	4313      	orrs	r3, r2
 800cade:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cae6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	011b      	lsls	r3, r3, #4
 800caec:	693a      	ldr	r2, [r7, #16]
 800caee:	4313      	orrs	r3, r2
 800caf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	697a      	ldr	r2, [r7, #20]
 800caf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	693a      	ldr	r2, [r7, #16]
 800cafc:	621a      	str	r2, [r3, #32]
}
 800cafe:	bf00      	nop
 800cb00:	371c      	adds	r7, #28
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr

0800cb0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cb0a:	b480      	push	{r7}
 800cb0c:	b085      	sub	sp, #20
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
 800cb12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cb22:	683a      	ldr	r2, [r7, #0]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	4313      	orrs	r3, r2
 800cb28:	f043 0307 	orr.w	r3, r3, #7
 800cb2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	609a      	str	r2, [r3, #8]
}
 800cb34:	bf00      	nop
 800cb36:	3714      	adds	r7, #20
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr

0800cb40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b087      	sub	sp, #28
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	607a      	str	r2, [r7, #4]
 800cb4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cb5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	021a      	lsls	r2, r3, #8
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	431a      	orrs	r2, r3
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	697a      	ldr	r2, [r7, #20]
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	697a      	ldr	r2, [r7, #20]
 800cb72:	609a      	str	r2, [r3, #8]
}
 800cb74:	bf00      	nop
 800cb76:	371c      	adds	r7, #28
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b087      	sub	sp, #28
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	60f8      	str	r0, [r7, #12]
 800cb88:	60b9      	str	r1, [r7, #8]
 800cb8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	f003 031f 	and.w	r3, r3, #31
 800cb92:	2201      	movs	r2, #1
 800cb94:	fa02 f303 	lsl.w	r3, r2, r3
 800cb98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	6a1a      	ldr	r2, [r3, #32]
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	43db      	mvns	r3, r3
 800cba2:	401a      	ands	r2, r3
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6a1a      	ldr	r2, [r3, #32]
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	f003 031f 	and.w	r3, r3, #31
 800cbb2:	6879      	ldr	r1, [r7, #4]
 800cbb4:	fa01 f303 	lsl.w	r3, r1, r3
 800cbb8:	431a      	orrs	r2, r3
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	621a      	str	r2, [r3, #32]
}
 800cbbe:	bf00      	nop
 800cbc0:	371c      	adds	r7, #28
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr
	...

0800cbcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	d101      	bne.n	800cbe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cbe0:	2302      	movs	r3, #2
 800cbe2:	e05a      	b.n	800cc9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2202      	movs	r2, #2
 800cbf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	4313      	orrs	r3, r2
 800cc14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	68fa      	ldr	r2, [r7, #12]
 800cc1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	4a21      	ldr	r2, [pc, #132]	; (800cca8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d022      	beq.n	800cc6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc30:	d01d      	beq.n	800cc6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4a1d      	ldr	r2, [pc, #116]	; (800ccac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d018      	beq.n	800cc6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a1b      	ldr	r2, [pc, #108]	; (800ccb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d013      	beq.n	800cc6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a1a      	ldr	r2, [pc, #104]	; (800ccb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d00e      	beq.n	800cc6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a18      	ldr	r2, [pc, #96]	; (800ccb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d009      	beq.n	800cc6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a17      	ldr	r2, [pc, #92]	; (800ccbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d004      	beq.n	800cc6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a15      	ldr	r2, [pc, #84]	; (800ccc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d10c      	bne.n	800cc88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	68ba      	ldr	r2, [r7, #8]
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	68ba      	ldr	r2, [r7, #8]
 800cc86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2200      	movs	r2, #0
 800cc94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc98:	2300      	movs	r3, #0
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3714      	adds	r7, #20
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr
 800cca6:	bf00      	nop
 800cca8:	40010000 	.word	0x40010000
 800ccac:	40000400 	.word	0x40000400
 800ccb0:	40000800 	.word	0x40000800
 800ccb4:	40000c00 	.word	0x40000c00
 800ccb8:	40010400 	.word	0x40010400
 800ccbc:	40014000 	.word	0x40014000
 800ccc0:	40001800 	.word	0x40001800

0800ccc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cccc:	bf00      	nop
 800ccce:	370c      	adds	r7, #12
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr

0800ccd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b083      	sub	sp, #12
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cce0:	bf00      	nop
 800cce2:	370c      	adds	r7, #12
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d101      	bne.n	800ccfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e03f      	b.n	800cd7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d106      	bne.n	800cd18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f7f5 ff70 	bl	8002bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2224      	movs	r2, #36	; 0x24
 800cd1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	68da      	ldr	r2, [r3, #12]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cd2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 ffa9 	bl	800dc88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	691a      	ldr	r2, [r3, #16]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cd44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	695a      	ldr	r2, [r3, #20]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cd54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	68da      	ldr	r2, [r3, #12]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cd64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2220      	movs	r2, #32
 800cd70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2220      	movs	r2, #32
 800cd78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3708      	adds	r7, #8
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
	...

0800cd88 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b08c      	sub	sp, #48	; 0x30
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	4613      	mov	r3, r2
 800cd94:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd9c:	b2db      	uxtb	r3, r3
 800cd9e:	2b20      	cmp	r3, #32
 800cda0:	d165      	bne.n	800ce6e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d002      	beq.n	800cdae <HAL_UART_Transmit_DMA+0x26>
 800cda8:	88fb      	ldrh	r3, [r7, #6]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d101      	bne.n	800cdb2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e05e      	b.n	800ce70 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	d101      	bne.n	800cdc0 <HAL_UART_Transmit_DMA+0x38>
 800cdbc:	2302      	movs	r3, #2
 800cdbe:	e057      	b.n	800ce70 <HAL_UART_Transmit_DMA+0xe8>
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800cdc8:	68ba      	ldr	r2, [r7, #8]
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	88fa      	ldrh	r2, [r7, #6]
 800cdd2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	88fa      	ldrh	r2, [r7, #6]
 800cdd8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	2200      	movs	r2, #0
 800cdde:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2221      	movs	r2, #33	; 0x21
 800cde4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdec:	4a22      	ldr	r2, [pc, #136]	; (800ce78 <HAL_UART_Transmit_DMA+0xf0>)
 800cdee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdf4:	4a21      	ldr	r2, [pc, #132]	; (800ce7c <HAL_UART_Transmit_DMA+0xf4>)
 800cdf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdfc:	4a20      	ldr	r2, [pc, #128]	; (800ce80 <HAL_UART_Transmit_DMA+0xf8>)
 800cdfe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce04:	2200      	movs	r2, #0
 800ce06:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800ce08:	f107 0308 	add.w	r3, r7, #8
 800ce0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ce12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce14:	6819      	ldr	r1, [r3, #0]
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	3304      	adds	r3, #4
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	88fb      	ldrh	r3, [r7, #6]
 800ce20:	f7fb f95e 	bl	80080e0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ce2c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2200      	movs	r2, #0
 800ce32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	3314      	adds	r3, #20
 800ce3c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce3e:	69bb      	ldr	r3, [r7, #24]
 800ce40:	e853 3f00 	ldrex	r3, [r3]
 800ce44:	617b      	str	r3, [r7, #20]
   return(result);
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce4c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	3314      	adds	r3, #20
 800ce54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce56:	627a      	str	r2, [r7, #36]	; 0x24
 800ce58:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce5a:	6a39      	ldr	r1, [r7, #32]
 800ce5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce5e:	e841 2300 	strex	r3, r2, [r1]
 800ce62:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d1e5      	bne.n	800ce36 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	e000      	b.n	800ce70 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800ce6e:	2302      	movs	r3, #2
  }
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3730      	adds	r7, #48	; 0x30
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	0800d521 	.word	0x0800d521
 800ce7c:	0800d5bb 	.word	0x0800d5bb
 800ce80:	0800d733 	.word	0x0800d733

0800ce84 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	60f8      	str	r0, [r7, #12]
 800ce8c:	60b9      	str	r1, [r7, #8]
 800ce8e:	4613      	mov	r3, r2
 800ce90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ce98:	b2db      	uxtb	r3, r3
 800ce9a:	2b20      	cmp	r3, #32
 800ce9c:	d11d      	bne.n	800ceda <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d002      	beq.n	800ceaa <HAL_UART_Receive_DMA+0x26>
 800cea4:	88fb      	ldrh	r3, [r7, #6]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d101      	bne.n	800ceae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e016      	b.n	800cedc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d101      	bne.n	800cebc <HAL_UART_Receive_DMA+0x38>
 800ceb8:	2302      	movs	r3, #2
 800ceba:	e00f      	b.n	800cedc <HAL_UART_Receive_DMA+0x58>
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2201      	movs	r2, #1
 800cec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2200      	movs	r2, #0
 800cec8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ceca:	88fb      	ldrh	r3, [r7, #6]
 800cecc:	461a      	mov	r2, r3
 800cece:	68b9      	ldr	r1, [r7, #8]
 800ced0:	68f8      	ldr	r0, [r7, #12]
 800ced2:	f000 fc79 	bl	800d7c8 <UART_Start_Receive_DMA>
 800ced6:	4603      	mov	r3, r0
 800ced8:	e000      	b.n	800cedc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ceda:	2302      	movs	r3, #2
  }
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3710      	adds	r7, #16
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b08c      	sub	sp, #48	; 0x30
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	4613      	mov	r3, r2
 800cef0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	2b20      	cmp	r3, #32
 800cefc:	d152      	bne.n	800cfa4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d002      	beq.n	800cf0a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800cf04:	88fb      	ldrh	r3, [r7, #6]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d101      	bne.n	800cf0e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	e04b      	b.n	800cfa6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d101      	bne.n	800cf1c <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800cf18:	2302      	movs	r3, #2
 800cf1a:	e044      	b.n	800cfa6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2201      	movs	r2, #1
 800cf28:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800cf2a:	88fb      	ldrh	r3, [r7, #6]
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	68b9      	ldr	r1, [r7, #8]
 800cf30:	68f8      	ldr	r0, [r7, #12]
 800cf32:	f000 fc49 	bl	800d7c8 <UART_Start_Receive_DMA>
 800cf36:	4603      	mov	r3, r0
 800cf38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800cf3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d12c      	bne.n	800cf9e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d125      	bne.n	800cf98 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	613b      	str	r3, [r7, #16]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	613b      	str	r3, [r7, #16]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	613b      	str	r3, [r7, #16]
 800cf60:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	330c      	adds	r3, #12
 800cf68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf6a:	69bb      	ldr	r3, [r7, #24]
 800cf6c:	e853 3f00 	ldrex	r3, [r3]
 800cf70:	617b      	str	r3, [r7, #20]
   return(result);
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	f043 0310 	orr.w	r3, r3, #16
 800cf78:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	330c      	adds	r3, #12
 800cf80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf82:	627a      	str	r2, [r7, #36]	; 0x24
 800cf84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf86:	6a39      	ldr	r1, [r7, #32]
 800cf88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf8a:	e841 2300 	strex	r3, r2, [r1]
 800cf8e:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf90:	69fb      	ldr	r3, [r7, #28]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d1e5      	bne.n	800cf62 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800cf96:	e002      	b.n	800cf9e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800cf98:	2301      	movs	r3, #1
 800cf9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800cf9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cfa2:	e000      	b.n	800cfa6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800cfa4:	2302      	movs	r3, #2
  }
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3730      	adds	r7, #48	; 0x30
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
	...

0800cfb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b0ba      	sub	sp, #232	; 0xe8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	695b      	ldr	r3, [r3, #20]
 800cfd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cfe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfe6:	f003 030f 	and.w	r3, r3, #15
 800cfea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800cfee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d10f      	bne.n	800d016 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cffa:	f003 0320 	and.w	r3, r3, #32
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d009      	beq.n	800d016 <HAL_UART_IRQHandler+0x66>
 800d002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d006:	f003 0320 	and.w	r3, r3, #32
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d003      	beq.n	800d016 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f000 fd7f 	bl	800db12 <UART_Receive_IT>
      return;
 800d014:	e256      	b.n	800d4c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	f000 80de 	beq.w	800d1dc <HAL_UART_IRQHandler+0x22c>
 800d020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d024:	f003 0301 	and.w	r3, r3, #1
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d106      	bne.n	800d03a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d02c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d030:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d034:	2b00      	cmp	r3, #0
 800d036:	f000 80d1 	beq.w	800d1dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d03a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d03e:	f003 0301 	and.w	r3, r3, #1
 800d042:	2b00      	cmp	r3, #0
 800d044:	d00b      	beq.n	800d05e <HAL_UART_IRQHandler+0xae>
 800d046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d04a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d005      	beq.n	800d05e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d056:	f043 0201 	orr.w	r2, r3, #1
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d05e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d062:	f003 0304 	and.w	r3, r3, #4
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00b      	beq.n	800d082 <HAL_UART_IRQHandler+0xd2>
 800d06a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d06e:	f003 0301 	and.w	r3, r3, #1
 800d072:	2b00      	cmp	r3, #0
 800d074:	d005      	beq.n	800d082 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d07a:	f043 0202 	orr.w	r2, r3, #2
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d086:	f003 0302 	and.w	r3, r3, #2
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d00b      	beq.n	800d0a6 <HAL_UART_IRQHandler+0xf6>
 800d08e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d092:	f003 0301 	and.w	r3, r3, #1
 800d096:	2b00      	cmp	r3, #0
 800d098:	d005      	beq.n	800d0a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d09e:	f043 0204 	orr.w	r2, r3, #4
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d0a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0aa:	f003 0308 	and.w	r3, r3, #8
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d011      	beq.n	800d0d6 <HAL_UART_IRQHandler+0x126>
 800d0b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0b6:	f003 0320 	and.w	r3, r3, #32
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d105      	bne.n	800d0ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d0be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0c2:	f003 0301 	and.w	r3, r3, #1
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d005      	beq.n	800d0d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ce:	f043 0208 	orr.w	r2, r3, #8
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	f000 81ed 	beq.w	800d4ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d0e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0e4:	f003 0320 	and.w	r3, r3, #32
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d008      	beq.n	800d0fe <HAL_UART_IRQHandler+0x14e>
 800d0ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0f0:	f003 0320 	and.w	r3, r3, #32
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d002      	beq.n	800d0fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 fd0a 	bl	800db12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	695b      	ldr	r3, [r3, #20]
 800d104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d108:	2b40      	cmp	r3, #64	; 0x40
 800d10a:	bf0c      	ite	eq
 800d10c:	2301      	moveq	r3, #1
 800d10e:	2300      	movne	r3, #0
 800d110:	b2db      	uxtb	r3, r3
 800d112:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d11a:	f003 0308 	and.w	r3, r3, #8
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d103      	bne.n	800d12a <HAL_UART_IRQHandler+0x17a>
 800d122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d126:	2b00      	cmp	r3, #0
 800d128:	d04f      	beq.n	800d1ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f000 fc12 	bl	800d954 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	695b      	ldr	r3, [r3, #20]
 800d136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d13a:	2b40      	cmp	r3, #64	; 0x40
 800d13c:	d141      	bne.n	800d1c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	3314      	adds	r3, #20
 800d144:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d148:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d14c:	e853 3f00 	ldrex	r3, [r3]
 800d150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d154:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d15c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	3314      	adds	r3, #20
 800d166:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d16a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d16e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d172:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d176:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d17a:	e841 2300 	strex	r3, r2, [r1]
 800d17e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d186:	2b00      	cmp	r3, #0
 800d188:	d1d9      	bne.n	800d13e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d013      	beq.n	800d1ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d196:	4a7d      	ldr	r2, [pc, #500]	; (800d38c <HAL_UART_IRQHandler+0x3dc>)
 800d198:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7fb f866 	bl	8008270 <HAL_DMA_Abort_IT>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d016      	beq.n	800d1d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1b0:	687a      	ldr	r2, [r7, #4]
 800d1b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d1b4:	4610      	mov	r0, r2
 800d1b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1b8:	e00e      	b.n	800d1d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f000 f99a 	bl	800d4f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1c0:	e00a      	b.n	800d1d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f000 f996 	bl	800d4f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1c8:	e006      	b.n	800d1d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f000 f992 	bl	800d4f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800d1d6:	e170      	b.n	800d4ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1d8:	bf00      	nop
    return;
 800d1da:	e16e      	b.n	800d4ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	f040 814a 	bne.w	800d47a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d1e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1ea:	f003 0310 	and.w	r3, r3, #16
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	f000 8143 	beq.w	800d47a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d1f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1f8:	f003 0310 	and.w	r3, r3, #16
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f000 813c 	beq.w	800d47a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d202:	2300      	movs	r3, #0
 800d204:	60bb      	str	r3, [r7, #8]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	60bb      	str	r3, [r7, #8]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	60bb      	str	r3, [r7, #8]
 800d216:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	695b      	ldr	r3, [r3, #20]
 800d21e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d222:	2b40      	cmp	r3, #64	; 0x40
 800d224:	f040 80b4 	bne.w	800d390 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d234:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d238:	2b00      	cmp	r3, #0
 800d23a:	f000 8140 	beq.w	800d4be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d246:	429a      	cmp	r2, r3
 800d248:	f080 8139 	bcs.w	800d4be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d252:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d258:	69db      	ldr	r3, [r3, #28]
 800d25a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d25e:	f000 8088 	beq.w	800d372 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	330c      	adds	r3, #12
 800d268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d26c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d270:	e853 3f00 	ldrex	r3, [r3]
 800d274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d278:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d27c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d280:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	330c      	adds	r3, #12
 800d28a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d28e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d292:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d296:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d29a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d29e:	e841 2300 	strex	r3, r2, [r1]
 800d2a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d2a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d1d9      	bne.n	800d262 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	3314      	adds	r3, #20
 800d2b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2b8:	e853 3f00 	ldrex	r3, [r3]
 800d2bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d2be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d2c0:	f023 0301 	bic.w	r3, r3, #1
 800d2c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	3314      	adds	r3, #20
 800d2ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d2d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d2d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d2da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d2de:	e841 2300 	strex	r3, r2, [r1]
 800d2e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d2e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d1e1      	bne.n	800d2ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	3314      	adds	r3, #20
 800d2f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2f4:	e853 3f00 	ldrex	r3, [r3]
 800d2f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d2fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d300:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	3314      	adds	r3, #20
 800d30a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d30e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d310:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d312:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d314:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d316:	e841 2300 	strex	r3, r2, [r1]
 800d31a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d31c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d1e3      	bne.n	800d2ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2220      	movs	r2, #32
 800d326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2200      	movs	r2, #0
 800d32e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	330c      	adds	r3, #12
 800d336:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d33a:	e853 3f00 	ldrex	r3, [r3]
 800d33e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d342:	f023 0310 	bic.w	r3, r3, #16
 800d346:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	330c      	adds	r3, #12
 800d350:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d354:	65ba      	str	r2, [r7, #88]	; 0x58
 800d356:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d358:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d35a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d35c:	e841 2300 	strex	r3, r2, [r1]
 800d360:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d364:	2b00      	cmp	r3, #0
 800d366:	d1e3      	bne.n	800d330 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d36c:	4618      	mov	r0, r3
 800d36e:	f7fa ff0f 	bl	8008190 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	1ad3      	subs	r3, r2, r3
 800d37e:	b29b      	uxth	r3, r3
 800d380:	4619      	mov	r1, r3
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f000 f8c0 	bl	800d508 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d388:	e099      	b.n	800d4be <HAL_UART_IRQHandler+0x50e>
 800d38a:	bf00      	nop
 800d38c:	0800da1b 	.word	0x0800da1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d398:	b29b      	uxth	r3, r3
 800d39a:	1ad3      	subs	r3, r2, r3
 800d39c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	f000 808b 	beq.w	800d4c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800d3ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	f000 8086 	beq.w	800d4c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	330c      	adds	r3, #12
 800d3bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c0:	e853 3f00 	ldrex	r3, [r3]
 800d3c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d3cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	330c      	adds	r3, #12
 800d3d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d3da:	647a      	str	r2, [r7, #68]	; 0x44
 800d3dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d3e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d3e2:	e841 2300 	strex	r3, r2, [r1]
 800d3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d1e3      	bne.n	800d3b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	3314      	adds	r3, #20
 800d3f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f8:	e853 3f00 	ldrex	r3, [r3]
 800d3fc:	623b      	str	r3, [r7, #32]
   return(result);
 800d3fe:	6a3b      	ldr	r3, [r7, #32]
 800d400:	f023 0301 	bic.w	r3, r3, #1
 800d404:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	3314      	adds	r3, #20
 800d40e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d412:	633a      	str	r2, [r7, #48]	; 0x30
 800d414:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d41a:	e841 2300 	strex	r3, r2, [r1]
 800d41e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d422:	2b00      	cmp	r3, #0
 800d424:	d1e3      	bne.n	800d3ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2220      	movs	r2, #32
 800d42a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2200      	movs	r2, #0
 800d432:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	330c      	adds	r3, #12
 800d43a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	e853 3f00 	ldrex	r3, [r3]
 800d442:	60fb      	str	r3, [r7, #12]
   return(result);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f023 0310 	bic.w	r3, r3, #16
 800d44a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	330c      	adds	r3, #12
 800d454:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d458:	61fa      	str	r2, [r7, #28]
 800d45a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d45c:	69b9      	ldr	r1, [r7, #24]
 800d45e:	69fa      	ldr	r2, [r7, #28]
 800d460:	e841 2300 	strex	r3, r2, [r1]
 800d464:	617b      	str	r3, [r7, #20]
   return(result);
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d1e3      	bne.n	800d434 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d46c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d470:	4619      	mov	r1, r3
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 f848 	bl	800d508 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d478:	e023      	b.n	800d4c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d47a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d47e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d482:	2b00      	cmp	r3, #0
 800d484:	d009      	beq.n	800d49a <HAL_UART_IRQHandler+0x4ea>
 800d486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d48a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d003      	beq.n	800d49a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f000 fad5 	bl	800da42 <UART_Transmit_IT>
    return;
 800d498:	e014      	b.n	800d4c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d49a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d49e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d00e      	beq.n	800d4c4 <HAL_UART_IRQHandler+0x514>
 800d4a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d008      	beq.n	800d4c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 fb15 	bl	800dae2 <UART_EndTransmit_IT>
    return;
 800d4b8:	e004      	b.n	800d4c4 <HAL_UART_IRQHandler+0x514>
    return;
 800d4ba:	bf00      	nop
 800d4bc:	e002      	b.n	800d4c4 <HAL_UART_IRQHandler+0x514>
      return;
 800d4be:	bf00      	nop
 800d4c0:	e000      	b.n	800d4c4 <HAL_UART_IRQHandler+0x514>
      return;
 800d4c2:	bf00      	nop
  }
}
 800d4c4:	37e8      	adds	r7, #232	; 0xe8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop

0800d4cc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800d4d4:	bf00      	nop
 800d4d6:	370c      	adds	r7, #12
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b083      	sub	sp, #12
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800d4e8:	bf00      	nop
 800d4ea:	370c      	adds	r7, #12
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr

0800d4f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d4fc:	bf00      	nop
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	460b      	mov	r3, r1
 800d512:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d514:	bf00      	nop
 800d516:	370c      	adds	r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr

0800d520 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b090      	sub	sp, #64	; 0x40
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d52c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d137      	bne.n	800d5ac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800d53c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d53e:	2200      	movs	r2, #0
 800d540:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	3314      	adds	r3, #20
 800d548:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d54c:	e853 3f00 	ldrex	r3, [r3]
 800d550:	623b      	str	r3, [r7, #32]
   return(result);
 800d552:	6a3b      	ldr	r3, [r7, #32]
 800d554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d558:	63bb      	str	r3, [r7, #56]	; 0x38
 800d55a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	3314      	adds	r3, #20
 800d560:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d562:	633a      	str	r2, [r7, #48]	; 0x30
 800d564:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d56a:	e841 2300 	strex	r3, r2, [r1]
 800d56e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d572:	2b00      	cmp	r3, #0
 800d574:	d1e5      	bne.n	800d542 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	330c      	adds	r3, #12
 800d57c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	e853 3f00 	ldrex	r3, [r3]
 800d584:	60fb      	str	r3, [r7, #12]
   return(result);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d58c:	637b      	str	r3, [r7, #52]	; 0x34
 800d58e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	330c      	adds	r3, #12
 800d594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d596:	61fa      	str	r2, [r7, #28]
 800d598:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d59a:	69b9      	ldr	r1, [r7, #24]
 800d59c:	69fa      	ldr	r2, [r7, #28]
 800d59e:	e841 2300 	strex	r3, r2, [r1]
 800d5a2:	617b      	str	r3, [r7, #20]
   return(result);
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d1e5      	bne.n	800d576 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d5aa:	e002      	b.n	800d5b2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d5ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d5ae:	f7f3 fd75 	bl	800109c <HAL_UART_TxCpltCallback>
}
 800d5b2:	bf00      	nop
 800d5b4:	3740      	adds	r7, #64	; 0x40
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b084      	sub	sp, #16
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d5c8:	68f8      	ldr	r0, [r7, #12]
 800d5ca:	f7ff ff7f 	bl	800d4cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5ce:	bf00      	nop
 800d5d0:	3710      	adds	r7, #16
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}

0800d5d6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b09c      	sub	sp, #112	; 0x70
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d172      	bne.n	800d6d8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800d5f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	330c      	adds	r3, #12
 800d5fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d602:	e853 3f00 	ldrex	r3, [r3]
 800d606:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d60a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d60e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	330c      	adds	r3, #12
 800d616:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d618:	65ba      	str	r2, [r7, #88]	; 0x58
 800d61a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d61c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d61e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d620:	e841 2300 	strex	r3, r2, [r1]
 800d624:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d1e5      	bne.n	800d5f8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d62c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	3314      	adds	r3, #20
 800d632:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d636:	e853 3f00 	ldrex	r3, [r3]
 800d63a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d63e:	f023 0301 	bic.w	r3, r3, #1
 800d642:	667b      	str	r3, [r7, #100]	; 0x64
 800d644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	3314      	adds	r3, #20
 800d64a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d64c:	647a      	str	r2, [r7, #68]	; 0x44
 800d64e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d650:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d652:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d654:	e841 2300 	strex	r3, r2, [r1]
 800d658:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d65a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d1e5      	bne.n	800d62c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	3314      	adds	r3, #20
 800d666:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66a:	e853 3f00 	ldrex	r3, [r3]
 800d66e:	623b      	str	r3, [r7, #32]
   return(result);
 800d670:	6a3b      	ldr	r3, [r7, #32]
 800d672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d676:	663b      	str	r3, [r7, #96]	; 0x60
 800d678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	3314      	adds	r3, #20
 800d67e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d680:	633a      	str	r2, [r7, #48]	; 0x30
 800d682:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d684:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d688:	e841 2300 	strex	r3, r2, [r1]
 800d68c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d690:	2b00      	cmp	r3, #0
 800d692:	d1e5      	bne.n	800d660 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d696:	2220      	movs	r2, #32
 800d698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d69c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d119      	bne.n	800d6d8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	330c      	adds	r3, #12
 800d6aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	e853 3f00 	ldrex	r3, [r3]
 800d6b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f023 0310 	bic.w	r3, r3, #16
 800d6ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d6bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	330c      	adds	r3, #12
 800d6c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d6c4:	61fa      	str	r2, [r7, #28]
 800d6c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c8:	69b9      	ldr	r1, [r7, #24]
 800d6ca:	69fa      	ldr	r2, [r7, #28]
 800d6cc:	e841 2300 	strex	r3, r2, [r1]
 800d6d0:	617b      	str	r3, [r7, #20]
   return(result);
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d1e5      	bne.n	800d6a4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6dc:	2b01      	cmp	r3, #1
 800d6de:	d106      	bne.n	800d6ee <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d6e8:	f7ff ff0e 	bl	800d508 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d6ec:	e002      	b.n	800d6f4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800d6ee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d6f0:	f7f3 fd84 	bl	80011fc <HAL_UART_RxCpltCallback>
}
 800d6f4:	bf00      	nop
 800d6f6:	3770      	adds	r7, #112	; 0x70
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b084      	sub	sp, #16
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d708:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d70e:	2b01      	cmp	r3, #1
 800d710:	d108      	bne.n	800d724 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d716:	085b      	lsrs	r3, r3, #1
 800d718:	b29b      	uxth	r3, r3
 800d71a:	4619      	mov	r1, r3
 800d71c:	68f8      	ldr	r0, [r7, #12]
 800d71e:	f7ff fef3 	bl	800d508 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d722:	e002      	b.n	800d72a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800d724:	68f8      	ldr	r0, [r7, #12]
 800d726:	f7ff fedb 	bl	800d4e0 <HAL_UART_RxHalfCpltCallback>
}
 800d72a:	bf00      	nop
 800d72c:	3710      	adds	r7, #16
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d732:	b580      	push	{r7, lr}
 800d734:	b084      	sub	sp, #16
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d73a:	2300      	movs	r3, #0
 800d73c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d742:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	695b      	ldr	r3, [r3, #20]
 800d74a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d74e:	2b80      	cmp	r3, #128	; 0x80
 800d750:	bf0c      	ite	eq
 800d752:	2301      	moveq	r3, #1
 800d754:	2300      	movne	r3, #0
 800d756:	b2db      	uxtb	r3, r3
 800d758:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d760:	b2db      	uxtb	r3, r3
 800d762:	2b21      	cmp	r3, #33	; 0x21
 800d764:	d108      	bne.n	800d778 <UART_DMAError+0x46>
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d005      	beq.n	800d778 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	2200      	movs	r2, #0
 800d770:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800d772:	68b8      	ldr	r0, [r7, #8]
 800d774:	f000 f8c6 	bl	800d904 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	695b      	ldr	r3, [r3, #20]
 800d77e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d782:	2b40      	cmp	r3, #64	; 0x40
 800d784:	bf0c      	ite	eq
 800d786:	2301      	moveq	r3, #1
 800d788:	2300      	movne	r3, #0
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d794:	b2db      	uxtb	r3, r3
 800d796:	2b22      	cmp	r3, #34	; 0x22
 800d798:	d108      	bne.n	800d7ac <UART_DMAError+0x7a>
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d005      	beq.n	800d7ac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800d7a6:	68b8      	ldr	r0, [r7, #8]
 800d7a8:	f000 f8d4 	bl	800d954 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7b0:	f043 0210 	orr.w	r2, r3, #16
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d7b8:	68b8      	ldr	r0, [r7, #8]
 800d7ba:	f7ff fe9b 	bl	800d4f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7be:	bf00      	nop
 800d7c0:	3710      	adds	r7, #16
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
	...

0800d7c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b098      	sub	sp, #96	; 0x60
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	60f8      	str	r0, [r7, #12]
 800d7d0:	60b9      	str	r1, [r7, #8]
 800d7d2:	4613      	mov	r3, r2
 800d7d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800d7d6:	68ba      	ldr	r2, [r7, #8]
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	88fa      	ldrh	r2, [r7, #6]
 800d7e0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	2222      	movs	r2, #34	; 0x22
 800d7ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7f4:	4a40      	ldr	r2, [pc, #256]	; (800d8f8 <UART_Start_Receive_DMA+0x130>)
 800d7f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fc:	4a3f      	ldr	r2, [pc, #252]	; (800d8fc <UART_Start_Receive_DMA+0x134>)
 800d7fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d804:	4a3e      	ldr	r2, [pc, #248]	; (800d900 <UART_Start_Receive_DMA+0x138>)
 800d806:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80c:	2200      	movs	r2, #0
 800d80e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800d810:	f107 0308 	add.w	r3, r7, #8
 800d814:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	3304      	adds	r3, #4
 800d820:	4619      	mov	r1, r3
 800d822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d824:	681a      	ldr	r2, [r3, #0]
 800d826:	88fb      	ldrh	r3, [r7, #6]
 800d828:	f7fa fc5a 	bl	80080e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800d82c:	2300      	movs	r3, #0
 800d82e:	613b      	str	r3, [r7, #16]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	613b      	str	r3, [r7, #16]
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	613b      	str	r3, [r7, #16]
 800d840:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2200      	movs	r2, #0
 800d846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	691b      	ldr	r3, [r3, #16]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d019      	beq.n	800d886 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	330c      	adds	r3, #12
 800d858:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d85a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d85c:	e853 3f00 	ldrex	r3, [r3]
 800d860:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d868:	65bb      	str	r3, [r7, #88]	; 0x58
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	330c      	adds	r3, #12
 800d870:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d872:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d874:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d876:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d878:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d87a:	e841 2300 	strex	r3, r2, [r1]
 800d87e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d882:	2b00      	cmp	r3, #0
 800d884:	d1e5      	bne.n	800d852 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	3314      	adds	r3, #20
 800d88c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d890:	e853 3f00 	ldrex	r3, [r3]
 800d894:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d898:	f043 0301 	orr.w	r3, r3, #1
 800d89c:	657b      	str	r3, [r7, #84]	; 0x54
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	3314      	adds	r3, #20
 800d8a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d8a6:	63ba      	str	r2, [r7, #56]	; 0x38
 800d8a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d8ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8ae:	e841 2300 	strex	r3, r2, [r1]
 800d8b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d1e5      	bne.n	800d886 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	3314      	adds	r3, #20
 800d8c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	e853 3f00 	ldrex	r3, [r3]
 800d8c8:	617b      	str	r3, [r7, #20]
   return(result);
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8d0:	653b      	str	r3, [r7, #80]	; 0x50
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	3314      	adds	r3, #20
 800d8d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d8da:	627a      	str	r2, [r7, #36]	; 0x24
 800d8dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8de:	6a39      	ldr	r1, [r7, #32]
 800d8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8e2:	e841 2300 	strex	r3, r2, [r1]
 800d8e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d1e5      	bne.n	800d8ba <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800d8ee:	2300      	movs	r3, #0
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3760      	adds	r7, #96	; 0x60
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	0800d5d7 	.word	0x0800d5d7
 800d8fc:	0800d6fd 	.word	0x0800d6fd
 800d900:	0800d733 	.word	0x0800d733

0800d904 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d904:	b480      	push	{r7}
 800d906:	b089      	sub	sp, #36	; 0x24
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	330c      	adds	r3, #12
 800d912:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	e853 3f00 	ldrex	r3, [r3]
 800d91a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d922:	61fb      	str	r3, [r7, #28]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	330c      	adds	r3, #12
 800d92a:	69fa      	ldr	r2, [r7, #28]
 800d92c:	61ba      	str	r2, [r7, #24]
 800d92e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d930:	6979      	ldr	r1, [r7, #20]
 800d932:	69ba      	ldr	r2, [r7, #24]
 800d934:	e841 2300 	strex	r3, r2, [r1]
 800d938:	613b      	str	r3, [r7, #16]
   return(result);
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d1e5      	bne.n	800d90c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2220      	movs	r2, #32
 800d944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800d948:	bf00      	nop
 800d94a:	3724      	adds	r7, #36	; 0x24
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr

0800d954 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d954:	b480      	push	{r7}
 800d956:	b095      	sub	sp, #84	; 0x54
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	330c      	adds	r3, #12
 800d962:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d966:	e853 3f00 	ldrex	r3, [r3]
 800d96a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d972:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	330c      	adds	r3, #12
 800d97a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d97c:	643a      	str	r2, [r7, #64]	; 0x40
 800d97e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d980:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d982:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d984:	e841 2300 	strex	r3, r2, [r1]
 800d988:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d1e5      	bne.n	800d95c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	3314      	adds	r3, #20
 800d996:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d998:	6a3b      	ldr	r3, [r7, #32]
 800d99a:	e853 3f00 	ldrex	r3, [r3]
 800d99e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d9a0:	69fb      	ldr	r3, [r7, #28]
 800d9a2:	f023 0301 	bic.w	r3, r3, #1
 800d9a6:	64bb      	str	r3, [r7, #72]	; 0x48
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	3314      	adds	r3, #20
 800d9ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d9b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d9b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9b8:	e841 2300 	strex	r3, r2, [r1]
 800d9bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d1e5      	bne.n	800d990 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d119      	bne.n	800da00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	330c      	adds	r3, #12
 800d9d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	e853 3f00 	ldrex	r3, [r3]
 800d9da:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	f023 0310 	bic.w	r3, r3, #16
 800d9e2:	647b      	str	r3, [r7, #68]	; 0x44
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	330c      	adds	r3, #12
 800d9ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d9ec:	61ba      	str	r2, [r7, #24]
 800d9ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9f0:	6979      	ldr	r1, [r7, #20]
 800d9f2:	69ba      	ldr	r2, [r7, #24]
 800d9f4:	e841 2300 	strex	r3, r2, [r1]
 800d9f8:	613b      	str	r3, [r7, #16]
   return(result);
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d1e5      	bne.n	800d9cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2220      	movs	r2, #32
 800da04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2200      	movs	r2, #0
 800da0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800da0e:	bf00      	nop
 800da10:	3754      	adds	r7, #84	; 0x54
 800da12:	46bd      	mov	sp, r7
 800da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da18:	4770      	bx	lr

0800da1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b084      	sub	sp, #16
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2200      	movs	r2, #0
 800da2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	2200      	movs	r2, #0
 800da32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f7ff fd5d 	bl	800d4f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da3a:	bf00      	nop
 800da3c:	3710      	adds	r7, #16
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800da42:	b480      	push	{r7}
 800da44:	b085      	sub	sp, #20
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da50:	b2db      	uxtb	r3, r3
 800da52:	2b21      	cmp	r3, #33	; 0x21
 800da54:	d13e      	bne.n	800dad4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	689b      	ldr	r3, [r3, #8]
 800da5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da5e:	d114      	bne.n	800da8a <UART_Transmit_IT+0x48>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	691b      	ldr	r3, [r3, #16]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d110      	bne.n	800da8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6a1b      	ldr	r3, [r3, #32]
 800da6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	881b      	ldrh	r3, [r3, #0]
 800da72:	461a      	mov	r2, r3
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800da7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6a1b      	ldr	r3, [r3, #32]
 800da82:	1c9a      	adds	r2, r3, #2
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	621a      	str	r2, [r3, #32]
 800da88:	e008      	b.n	800da9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6a1b      	ldr	r3, [r3, #32]
 800da8e:	1c59      	adds	r1, r3, #1
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	6211      	str	r1, [r2, #32]
 800da94:	781a      	ldrb	r2, [r3, #0]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	3b01      	subs	r3, #1
 800daa4:	b29b      	uxth	r3, r3
 800daa6:	687a      	ldr	r2, [r7, #4]
 800daa8:	4619      	mov	r1, r3
 800daaa:	84d1      	strh	r1, [r2, #38]	; 0x26
 800daac:	2b00      	cmp	r3, #0
 800daae:	d10f      	bne.n	800dad0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	68da      	ldr	r2, [r3, #12]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dabe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	68da      	ldr	r2, [r3, #12]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dace:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dad0:	2300      	movs	r3, #0
 800dad2:	e000      	b.n	800dad6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800dad4:	2302      	movs	r3, #2
  }
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3714      	adds	r7, #20
 800dada:	46bd      	mov	sp, r7
 800dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae0:	4770      	bx	lr

0800dae2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b082      	sub	sp, #8
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	68da      	ldr	r2, [r3, #12]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800daf8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2220      	movs	r2, #32
 800dafe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f7f3 faca 	bl	800109c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800db08:	2300      	movs	r3, #0
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3708      	adds	r7, #8
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800db12:	b580      	push	{r7, lr}
 800db14:	b08c      	sub	sp, #48	; 0x30
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800db20:	b2db      	uxtb	r3, r3
 800db22:	2b22      	cmp	r3, #34	; 0x22
 800db24:	f040 80ab 	bne.w	800dc7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	689b      	ldr	r3, [r3, #8]
 800db2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db30:	d117      	bne.n	800db62 <UART_Receive_IT+0x50>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	691b      	ldr	r3, [r3, #16]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d113      	bne.n	800db62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800db3a:	2300      	movs	r3, #0
 800db3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	685b      	ldr	r3, [r3, #4]
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db50:	b29a      	uxth	r2, r3
 800db52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db5a:	1c9a      	adds	r2, r3, #2
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	629a      	str	r2, [r3, #40]	; 0x28
 800db60:	e026      	b.n	800dbb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800db68:	2300      	movs	r3, #0
 800db6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	689b      	ldr	r3, [r3, #8]
 800db70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db74:	d007      	beq.n	800db86 <UART_Receive_IT+0x74>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	689b      	ldr	r3, [r3, #8]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d10a      	bne.n	800db94 <UART_Receive_IT+0x82>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	691b      	ldr	r3, [r3, #16]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d106      	bne.n	800db94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	685b      	ldr	r3, [r3, #4]
 800db8c:	b2da      	uxtb	r2, r3
 800db8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db90:	701a      	strb	r2, [r3, #0]
 800db92:	e008      	b.n	800dba6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	685b      	ldr	r3, [r3, #4]
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dba0:	b2da      	uxtb	r2, r3
 800dba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbaa:	1c5a      	adds	r2, r3, #1
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dbb4:	b29b      	uxth	r3, r3
 800dbb6:	3b01      	subs	r3, #1
 800dbb8:	b29b      	uxth	r3, r3
 800dbba:	687a      	ldr	r2, [r7, #4]
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d15a      	bne.n	800dc7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	68da      	ldr	r2, [r3, #12]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f022 0220 	bic.w	r2, r2, #32
 800dbd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	68da      	ldr	r2, [r3, #12]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dbe2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	695a      	ldr	r2, [r3, #20]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f022 0201 	bic.w	r2, r2, #1
 800dbf2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2220      	movs	r2, #32
 800dbf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d135      	bne.n	800dc70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2200      	movs	r2, #0
 800dc08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	330c      	adds	r3, #12
 800dc10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	e853 3f00 	ldrex	r3, [r3]
 800dc18:	613b      	str	r3, [r7, #16]
   return(result);
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	f023 0310 	bic.w	r3, r3, #16
 800dc20:	627b      	str	r3, [r7, #36]	; 0x24
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	330c      	adds	r3, #12
 800dc28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc2a:	623a      	str	r2, [r7, #32]
 800dc2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc2e:	69f9      	ldr	r1, [r7, #28]
 800dc30:	6a3a      	ldr	r2, [r7, #32]
 800dc32:	e841 2300 	strex	r3, r2, [r1]
 800dc36:	61bb      	str	r3, [r7, #24]
   return(result);
 800dc38:	69bb      	ldr	r3, [r7, #24]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d1e5      	bne.n	800dc0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f003 0310 	and.w	r3, r3, #16
 800dc48:	2b10      	cmp	r3, #16
 800dc4a:	d10a      	bne.n	800dc62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	60fb      	str	r3, [r7, #12]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	60fb      	str	r3, [r7, #12]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	60fb      	str	r3, [r7, #12]
 800dc60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dc66:	4619      	mov	r1, r3
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f7ff fc4d 	bl	800d508 <HAL_UARTEx_RxEventCallback>
 800dc6e:	e002      	b.n	800dc76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f7f3 fac3 	bl	80011fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800dc76:	2300      	movs	r3, #0
 800dc78:	e002      	b.n	800dc80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	e000      	b.n	800dc80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800dc7e:	2302      	movs	r3, #2
  }
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3730      	adds	r7, #48	; 0x30
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dc88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc8c:	b0c0      	sub	sp, #256	; 0x100
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dc94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	691b      	ldr	r3, [r3, #16]
 800dc9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800dca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dca4:	68d9      	ldr	r1, [r3, #12]
 800dca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcaa:	681a      	ldr	r2, [r3, #0]
 800dcac:	ea40 0301 	orr.w	r3, r0, r1
 800dcb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800dcb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcb6:	689a      	ldr	r2, [r3, #8]
 800dcb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcbc:	691b      	ldr	r3, [r3, #16]
 800dcbe:	431a      	orrs	r2, r3
 800dcc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcc4:	695b      	ldr	r3, [r3, #20]
 800dcc6:	431a      	orrs	r2, r3
 800dcc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dccc:	69db      	ldr	r3, [r3, #28]
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800dcd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	68db      	ldr	r3, [r3, #12]
 800dcdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800dce0:	f021 010c 	bic.w	r1, r1, #12
 800dce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dce8:	681a      	ldr	r2, [r3, #0]
 800dcea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800dcee:	430b      	orrs	r3, r1
 800dcf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dcf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	695b      	ldr	r3, [r3, #20]
 800dcfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800dcfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd02:	6999      	ldr	r1, [r3, #24]
 800dd04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	ea40 0301 	orr.w	r3, r0, r1
 800dd0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dd10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	4b8f      	ldr	r3, [pc, #572]	; (800df54 <UART_SetConfig+0x2cc>)
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d005      	beq.n	800dd28 <UART_SetConfig+0xa0>
 800dd1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	4b8d      	ldr	r3, [pc, #564]	; (800df58 <UART_SetConfig+0x2d0>)
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d104      	bne.n	800dd32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800dd28:	f7fc fbf2 	bl	800a510 <HAL_RCC_GetPCLK2Freq>
 800dd2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800dd30:	e003      	b.n	800dd3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800dd32:	f7fc fbd9 	bl	800a4e8 <HAL_RCC_GetPCLK1Freq>
 800dd36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd3e:	69db      	ldr	r3, [r3, #28]
 800dd40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd44:	f040 810c 	bne.w	800df60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dd48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dd52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800dd56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800dd5a:	4622      	mov	r2, r4
 800dd5c:	462b      	mov	r3, r5
 800dd5e:	1891      	adds	r1, r2, r2
 800dd60:	65b9      	str	r1, [r7, #88]	; 0x58
 800dd62:	415b      	adcs	r3, r3
 800dd64:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dd66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800dd6a:	4621      	mov	r1, r4
 800dd6c:	eb12 0801 	adds.w	r8, r2, r1
 800dd70:	4629      	mov	r1, r5
 800dd72:	eb43 0901 	adc.w	r9, r3, r1
 800dd76:	f04f 0200 	mov.w	r2, #0
 800dd7a:	f04f 0300 	mov.w	r3, #0
 800dd7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dd82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dd86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dd8a:	4690      	mov	r8, r2
 800dd8c:	4699      	mov	r9, r3
 800dd8e:	4623      	mov	r3, r4
 800dd90:	eb18 0303 	adds.w	r3, r8, r3
 800dd94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dd98:	462b      	mov	r3, r5
 800dd9a:	eb49 0303 	adc.w	r3, r9, r3
 800dd9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dda2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ddae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ddb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ddb6:	460b      	mov	r3, r1
 800ddb8:	18db      	adds	r3, r3, r3
 800ddba:	653b      	str	r3, [r7, #80]	; 0x50
 800ddbc:	4613      	mov	r3, r2
 800ddbe:	eb42 0303 	adc.w	r3, r2, r3
 800ddc2:	657b      	str	r3, [r7, #84]	; 0x54
 800ddc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ddc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ddcc:	f7f2 feec 	bl	8000ba8 <__aeabi_uldivmod>
 800ddd0:	4602      	mov	r2, r0
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	4b61      	ldr	r3, [pc, #388]	; (800df5c <UART_SetConfig+0x2d4>)
 800ddd6:	fba3 2302 	umull	r2, r3, r3, r2
 800ddda:	095b      	lsrs	r3, r3, #5
 800dddc:	011c      	lsls	r4, r3, #4
 800ddde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dde2:	2200      	movs	r2, #0
 800dde4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dde8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ddec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ddf0:	4642      	mov	r2, r8
 800ddf2:	464b      	mov	r3, r9
 800ddf4:	1891      	adds	r1, r2, r2
 800ddf6:	64b9      	str	r1, [r7, #72]	; 0x48
 800ddf8:	415b      	adcs	r3, r3
 800ddfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ddfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800de00:	4641      	mov	r1, r8
 800de02:	eb12 0a01 	adds.w	sl, r2, r1
 800de06:	4649      	mov	r1, r9
 800de08:	eb43 0b01 	adc.w	fp, r3, r1
 800de0c:	f04f 0200 	mov.w	r2, #0
 800de10:	f04f 0300 	mov.w	r3, #0
 800de14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800de18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800de1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800de20:	4692      	mov	sl, r2
 800de22:	469b      	mov	fp, r3
 800de24:	4643      	mov	r3, r8
 800de26:	eb1a 0303 	adds.w	r3, sl, r3
 800de2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800de2e:	464b      	mov	r3, r9
 800de30:	eb4b 0303 	adc.w	r3, fp, r3
 800de34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800de38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	2200      	movs	r2, #0
 800de40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800de44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800de48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800de4c:	460b      	mov	r3, r1
 800de4e:	18db      	adds	r3, r3, r3
 800de50:	643b      	str	r3, [r7, #64]	; 0x40
 800de52:	4613      	mov	r3, r2
 800de54:	eb42 0303 	adc.w	r3, r2, r3
 800de58:	647b      	str	r3, [r7, #68]	; 0x44
 800de5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800de5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800de62:	f7f2 fea1 	bl	8000ba8 <__aeabi_uldivmod>
 800de66:	4602      	mov	r2, r0
 800de68:	460b      	mov	r3, r1
 800de6a:	4611      	mov	r1, r2
 800de6c:	4b3b      	ldr	r3, [pc, #236]	; (800df5c <UART_SetConfig+0x2d4>)
 800de6e:	fba3 2301 	umull	r2, r3, r3, r1
 800de72:	095b      	lsrs	r3, r3, #5
 800de74:	2264      	movs	r2, #100	; 0x64
 800de76:	fb02 f303 	mul.w	r3, r2, r3
 800de7a:	1acb      	subs	r3, r1, r3
 800de7c:	00db      	lsls	r3, r3, #3
 800de7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800de82:	4b36      	ldr	r3, [pc, #216]	; (800df5c <UART_SetConfig+0x2d4>)
 800de84:	fba3 2302 	umull	r2, r3, r3, r2
 800de88:	095b      	lsrs	r3, r3, #5
 800de8a:	005b      	lsls	r3, r3, #1
 800de8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800de90:	441c      	add	r4, r3
 800de92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800de96:	2200      	movs	r2, #0
 800de98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800de9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800dea0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800dea4:	4642      	mov	r2, r8
 800dea6:	464b      	mov	r3, r9
 800dea8:	1891      	adds	r1, r2, r2
 800deaa:	63b9      	str	r1, [r7, #56]	; 0x38
 800deac:	415b      	adcs	r3, r3
 800deae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800deb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800deb4:	4641      	mov	r1, r8
 800deb6:	1851      	adds	r1, r2, r1
 800deb8:	6339      	str	r1, [r7, #48]	; 0x30
 800deba:	4649      	mov	r1, r9
 800debc:	414b      	adcs	r3, r1
 800debe:	637b      	str	r3, [r7, #52]	; 0x34
 800dec0:	f04f 0200 	mov.w	r2, #0
 800dec4:	f04f 0300 	mov.w	r3, #0
 800dec8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800decc:	4659      	mov	r1, fp
 800dece:	00cb      	lsls	r3, r1, #3
 800ded0:	4651      	mov	r1, sl
 800ded2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ded6:	4651      	mov	r1, sl
 800ded8:	00ca      	lsls	r2, r1, #3
 800deda:	4610      	mov	r0, r2
 800dedc:	4619      	mov	r1, r3
 800dede:	4603      	mov	r3, r0
 800dee0:	4642      	mov	r2, r8
 800dee2:	189b      	adds	r3, r3, r2
 800dee4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dee8:	464b      	mov	r3, r9
 800deea:	460a      	mov	r2, r1
 800deec:	eb42 0303 	adc.w	r3, r2, r3
 800def0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800def4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	2200      	movs	r2, #0
 800defc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800df00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800df04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800df08:	460b      	mov	r3, r1
 800df0a:	18db      	adds	r3, r3, r3
 800df0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800df0e:	4613      	mov	r3, r2
 800df10:	eb42 0303 	adc.w	r3, r2, r3
 800df14:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800df1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800df1e:	f7f2 fe43 	bl	8000ba8 <__aeabi_uldivmod>
 800df22:	4602      	mov	r2, r0
 800df24:	460b      	mov	r3, r1
 800df26:	4b0d      	ldr	r3, [pc, #52]	; (800df5c <UART_SetConfig+0x2d4>)
 800df28:	fba3 1302 	umull	r1, r3, r3, r2
 800df2c:	095b      	lsrs	r3, r3, #5
 800df2e:	2164      	movs	r1, #100	; 0x64
 800df30:	fb01 f303 	mul.w	r3, r1, r3
 800df34:	1ad3      	subs	r3, r2, r3
 800df36:	00db      	lsls	r3, r3, #3
 800df38:	3332      	adds	r3, #50	; 0x32
 800df3a:	4a08      	ldr	r2, [pc, #32]	; (800df5c <UART_SetConfig+0x2d4>)
 800df3c:	fba2 2303 	umull	r2, r3, r2, r3
 800df40:	095b      	lsrs	r3, r3, #5
 800df42:	f003 0207 	and.w	r2, r3, #7
 800df46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	4422      	add	r2, r4
 800df4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800df50:	e105      	b.n	800e15e <UART_SetConfig+0x4d6>
 800df52:	bf00      	nop
 800df54:	40011000 	.word	0x40011000
 800df58:	40011400 	.word	0x40011400
 800df5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800df60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800df64:	2200      	movs	r2, #0
 800df66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800df6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800df6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800df72:	4642      	mov	r2, r8
 800df74:	464b      	mov	r3, r9
 800df76:	1891      	adds	r1, r2, r2
 800df78:	6239      	str	r1, [r7, #32]
 800df7a:	415b      	adcs	r3, r3
 800df7c:	627b      	str	r3, [r7, #36]	; 0x24
 800df7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800df82:	4641      	mov	r1, r8
 800df84:	1854      	adds	r4, r2, r1
 800df86:	4649      	mov	r1, r9
 800df88:	eb43 0501 	adc.w	r5, r3, r1
 800df8c:	f04f 0200 	mov.w	r2, #0
 800df90:	f04f 0300 	mov.w	r3, #0
 800df94:	00eb      	lsls	r3, r5, #3
 800df96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800df9a:	00e2      	lsls	r2, r4, #3
 800df9c:	4614      	mov	r4, r2
 800df9e:	461d      	mov	r5, r3
 800dfa0:	4643      	mov	r3, r8
 800dfa2:	18e3      	adds	r3, r4, r3
 800dfa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dfa8:	464b      	mov	r3, r9
 800dfaa:	eb45 0303 	adc.w	r3, r5, r3
 800dfae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dfb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dfb6:	685b      	ldr	r3, [r3, #4]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dfbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800dfc2:	f04f 0200 	mov.w	r2, #0
 800dfc6:	f04f 0300 	mov.w	r3, #0
 800dfca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800dfce:	4629      	mov	r1, r5
 800dfd0:	008b      	lsls	r3, r1, #2
 800dfd2:	4621      	mov	r1, r4
 800dfd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dfd8:	4621      	mov	r1, r4
 800dfda:	008a      	lsls	r2, r1, #2
 800dfdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800dfe0:	f7f2 fde2 	bl	8000ba8 <__aeabi_uldivmod>
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	460b      	mov	r3, r1
 800dfe8:	4b60      	ldr	r3, [pc, #384]	; (800e16c <UART_SetConfig+0x4e4>)
 800dfea:	fba3 2302 	umull	r2, r3, r3, r2
 800dfee:	095b      	lsrs	r3, r3, #5
 800dff0:	011c      	lsls	r4, r3, #4
 800dff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dff6:	2200      	movs	r2, #0
 800dff8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dffc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e000:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800e004:	4642      	mov	r2, r8
 800e006:	464b      	mov	r3, r9
 800e008:	1891      	adds	r1, r2, r2
 800e00a:	61b9      	str	r1, [r7, #24]
 800e00c:	415b      	adcs	r3, r3
 800e00e:	61fb      	str	r3, [r7, #28]
 800e010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e014:	4641      	mov	r1, r8
 800e016:	1851      	adds	r1, r2, r1
 800e018:	6139      	str	r1, [r7, #16]
 800e01a:	4649      	mov	r1, r9
 800e01c:	414b      	adcs	r3, r1
 800e01e:	617b      	str	r3, [r7, #20]
 800e020:	f04f 0200 	mov.w	r2, #0
 800e024:	f04f 0300 	mov.w	r3, #0
 800e028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e02c:	4659      	mov	r1, fp
 800e02e:	00cb      	lsls	r3, r1, #3
 800e030:	4651      	mov	r1, sl
 800e032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e036:	4651      	mov	r1, sl
 800e038:	00ca      	lsls	r2, r1, #3
 800e03a:	4610      	mov	r0, r2
 800e03c:	4619      	mov	r1, r3
 800e03e:	4603      	mov	r3, r0
 800e040:	4642      	mov	r2, r8
 800e042:	189b      	adds	r3, r3, r2
 800e044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e048:	464b      	mov	r3, r9
 800e04a:	460a      	mov	r2, r1
 800e04c:	eb42 0303 	adc.w	r3, r2, r3
 800e050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	2200      	movs	r2, #0
 800e05c:	67bb      	str	r3, [r7, #120]	; 0x78
 800e05e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e060:	f04f 0200 	mov.w	r2, #0
 800e064:	f04f 0300 	mov.w	r3, #0
 800e068:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800e06c:	4649      	mov	r1, r9
 800e06e:	008b      	lsls	r3, r1, #2
 800e070:	4641      	mov	r1, r8
 800e072:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e076:	4641      	mov	r1, r8
 800e078:	008a      	lsls	r2, r1, #2
 800e07a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e07e:	f7f2 fd93 	bl	8000ba8 <__aeabi_uldivmod>
 800e082:	4602      	mov	r2, r0
 800e084:	460b      	mov	r3, r1
 800e086:	4b39      	ldr	r3, [pc, #228]	; (800e16c <UART_SetConfig+0x4e4>)
 800e088:	fba3 1302 	umull	r1, r3, r3, r2
 800e08c:	095b      	lsrs	r3, r3, #5
 800e08e:	2164      	movs	r1, #100	; 0x64
 800e090:	fb01 f303 	mul.w	r3, r1, r3
 800e094:	1ad3      	subs	r3, r2, r3
 800e096:	011b      	lsls	r3, r3, #4
 800e098:	3332      	adds	r3, #50	; 0x32
 800e09a:	4a34      	ldr	r2, [pc, #208]	; (800e16c <UART_SetConfig+0x4e4>)
 800e09c:	fba2 2303 	umull	r2, r3, r2, r3
 800e0a0:	095b      	lsrs	r3, r3, #5
 800e0a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0a6:	441c      	add	r4, r3
 800e0a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	673b      	str	r3, [r7, #112]	; 0x70
 800e0b0:	677a      	str	r2, [r7, #116]	; 0x74
 800e0b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800e0b6:	4642      	mov	r2, r8
 800e0b8:	464b      	mov	r3, r9
 800e0ba:	1891      	adds	r1, r2, r2
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	415b      	adcs	r3, r3
 800e0c0:	60fb      	str	r3, [r7, #12]
 800e0c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e0c6:	4641      	mov	r1, r8
 800e0c8:	1851      	adds	r1, r2, r1
 800e0ca:	6039      	str	r1, [r7, #0]
 800e0cc:	4649      	mov	r1, r9
 800e0ce:	414b      	adcs	r3, r1
 800e0d0:	607b      	str	r3, [r7, #4]
 800e0d2:	f04f 0200 	mov.w	r2, #0
 800e0d6:	f04f 0300 	mov.w	r3, #0
 800e0da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e0de:	4659      	mov	r1, fp
 800e0e0:	00cb      	lsls	r3, r1, #3
 800e0e2:	4651      	mov	r1, sl
 800e0e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e0e8:	4651      	mov	r1, sl
 800e0ea:	00ca      	lsls	r2, r1, #3
 800e0ec:	4610      	mov	r0, r2
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	4642      	mov	r2, r8
 800e0f4:	189b      	adds	r3, r3, r2
 800e0f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800e0f8:	464b      	mov	r3, r9
 800e0fa:	460a      	mov	r2, r1
 800e0fc:	eb42 0303 	adc.w	r3, r2, r3
 800e100:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	2200      	movs	r2, #0
 800e10a:	663b      	str	r3, [r7, #96]	; 0x60
 800e10c:	667a      	str	r2, [r7, #100]	; 0x64
 800e10e:	f04f 0200 	mov.w	r2, #0
 800e112:	f04f 0300 	mov.w	r3, #0
 800e116:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e11a:	4649      	mov	r1, r9
 800e11c:	008b      	lsls	r3, r1, #2
 800e11e:	4641      	mov	r1, r8
 800e120:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e124:	4641      	mov	r1, r8
 800e126:	008a      	lsls	r2, r1, #2
 800e128:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e12c:	f7f2 fd3c 	bl	8000ba8 <__aeabi_uldivmod>
 800e130:	4602      	mov	r2, r0
 800e132:	460b      	mov	r3, r1
 800e134:	4b0d      	ldr	r3, [pc, #52]	; (800e16c <UART_SetConfig+0x4e4>)
 800e136:	fba3 1302 	umull	r1, r3, r3, r2
 800e13a:	095b      	lsrs	r3, r3, #5
 800e13c:	2164      	movs	r1, #100	; 0x64
 800e13e:	fb01 f303 	mul.w	r3, r1, r3
 800e142:	1ad3      	subs	r3, r2, r3
 800e144:	011b      	lsls	r3, r3, #4
 800e146:	3332      	adds	r3, #50	; 0x32
 800e148:	4a08      	ldr	r2, [pc, #32]	; (800e16c <UART_SetConfig+0x4e4>)
 800e14a:	fba2 2303 	umull	r2, r3, r2, r3
 800e14e:	095b      	lsrs	r3, r3, #5
 800e150:	f003 020f 	and.w	r2, r3, #15
 800e154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4422      	add	r2, r4
 800e15c:	609a      	str	r2, [r3, #8]
}
 800e15e:	bf00      	nop
 800e160:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800e164:	46bd      	mov	sp, r7
 800e166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e16a:	bf00      	nop
 800e16c:	51eb851f 	.word	0x51eb851f

0800e170 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800e170:	b084      	sub	sp, #16
 800e172:	b480      	push	{r7}
 800e174:	b085      	sub	sp, #20
 800e176:	af00      	add	r7, sp, #0
 800e178:	6078      	str	r0, [r7, #4]
 800e17a:	f107 001c 	add.w	r0, r7, #28
 800e17e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e182:	2300      	movs	r3, #0
 800e184:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e186:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e188:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e18a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e18e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e190:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e192:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e196:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e19a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e19c:	68fa      	ldr	r2, [r7, #12]
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800e1aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e1ae:	68fa      	ldr	r2, [r7, #12]
 800e1b0:	431a      	orrs	r2, r3
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e1b6:	2300      	movs	r3, #0
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3714      	adds	r7, #20
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	b004      	add	sp, #16
 800e1c4:	4770      	bx	lr

0800e1c6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800e1c6:	b480      	push	{r7}
 800e1c8:	b083      	sub	sp, #12
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	370c      	adds	r7, #12
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr

0800e1e0 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800e1e0:	b480      	push	{r7}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2203      	movs	r2, #3
 800e1ec:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e1ee:	2300      	movs	r3, #0
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	370c      	adds	r7, #12
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr

0800e1fc <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b083      	sub	sp, #12
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f003 0303 	and.w	r3, r3, #3
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	370c      	adds	r7, #12
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800e218:	b480      	push	{r7}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e222:	2300      	movs	r3, #0
 800e224:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e236:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e23c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e242:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e244:	68fa      	ldr	r2, [r7, #12]
 800e246:	4313      	orrs	r3, r2
 800e248:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	68db      	ldr	r3, [r3, #12]
 800e24e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e252:	f023 030f 	bic.w	r3, r3, #15
 800e256:	68fa      	ldr	r2, [r7, #12]
 800e258:	431a      	orrs	r2, r3
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e25e:	2300      	movs	r3, #0
}
 800e260:	4618      	mov	r0, r3
 800e262:	3714      	adds	r7, #20
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr

0800e26c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	691b      	ldr	r3, [r3, #16]
 800e278:	b2db      	uxtb	r3, r3
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	370c      	adds	r7, #12
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr

0800e286 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800e286:	b480      	push	{r7}
 800e288:	b085      	sub	sp, #20
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
 800e28e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	3314      	adds	r3, #20
 800e294:	461a      	mov	r2, r3
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	4413      	add	r3, r2
 800e29a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
}  
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3714      	adds	r7, #20
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr

0800e2ac <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b085      	sub	sp, #20
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	681a      	ldr	r2, [r3, #0]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	685a      	ldr	r2, [r3, #4]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e2d2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e2d8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e2de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e2e0:	68fa      	ldr	r2, [r7, #12]
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ea:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	431a      	orrs	r2, r3
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e2f6:	2300      	movs	r3, #0

}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3714      	adds	r7, #20
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e302:	4770      	bx	lr

0800e304 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b088      	sub	sp, #32
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e312:	2310      	movs	r3, #16
 800e314:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e316:	2340      	movs	r3, #64	; 0x40
 800e318:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e31a:	2300      	movs	r3, #0
 800e31c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e31e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e322:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e324:	f107 0308 	add.w	r3, r7, #8
 800e328:	4619      	mov	r1, r3
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f7ff ff74 	bl	800e218 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800e330:	f241 3288 	movw	r2, #5000	; 0x1388
 800e334:	2110      	movs	r1, #16
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 f94c 	bl	800e5d4 <SDMMC_GetCmdResp1>
 800e33c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e33e:	69fb      	ldr	r3, [r7, #28]
}
 800e340:	4618      	mov	r0, r3
 800e342:	3720      	adds	r7, #32
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b08a      	sub	sp, #40	; 0x28
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	60f8      	str	r0, [r7, #12]
 800e350:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e358:	2307      	movs	r3, #7
 800e35a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e35c:	2340      	movs	r3, #64	; 0x40
 800e35e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e360:	2300      	movs	r3, #0
 800e362:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e368:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e36a:	f107 0310 	add.w	r3, r7, #16
 800e36e:	4619      	mov	r1, r3
 800e370:	68f8      	ldr	r0, [r7, #12]
 800e372:	f7ff ff51 	bl	800e218 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e376:	f241 3288 	movw	r2, #5000	; 0x1388
 800e37a:	2107      	movs	r1, #7
 800e37c:	68f8      	ldr	r0, [r7, #12]
 800e37e:	f000 f929 	bl	800e5d4 <SDMMC_GetCmdResp1>
 800e382:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e386:	4618      	mov	r0, r3
 800e388:	3728      	adds	r7, #40	; 0x28
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}

0800e38e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e38e:	b580      	push	{r7, lr}
 800e390:	b088      	sub	sp, #32
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e396:	2300      	movs	r3, #0
 800e398:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e39a:	2300      	movs	r3, #0
 800e39c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3ac:	f107 0308 	add.w	r3, r7, #8
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f7ff ff30 	bl	800e218 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 fb43 	bl	800ea44 <SDMMC_GetCmdError>
 800e3be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3c0:	69fb      	ldr	r3, [r7, #28]
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3720      	adds	r7, #32
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}

0800e3ca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e3ca:	b580      	push	{r7, lr}
 800e3cc:	b088      	sub	sp, #32
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e3d2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e3d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e3d8:	2308      	movs	r3, #8
 800e3da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e3dc:	2340      	movs	r3, #64	; 0x40
 800e3de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3ea:	f107 0308 	add.w	r3, r7, #8
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f7ff ff11 	bl	800e218 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f000 fad6 	bl	800e9a8 <SDMMC_GetCmdResp7>
 800e3fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3fe:	69fb      	ldr	r3, [r7, #28]
}
 800e400:	4618      	mov	r0, r3
 800e402:	3720      	adds	r7, #32
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}

0800e408 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b088      	sub	sp, #32
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e416:	2337      	movs	r3, #55	; 0x37
 800e418:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e41a:	2340      	movs	r3, #64	; 0x40
 800e41c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e41e:	2300      	movs	r3, #0
 800e420:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e426:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e428:	f107 0308 	add.w	r3, r7, #8
 800e42c:	4619      	mov	r1, r3
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f7ff fef2 	bl	800e218 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e434:	f241 3288 	movw	r2, #5000	; 0x1388
 800e438:	2137      	movs	r1, #55	; 0x37
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 f8ca 	bl	800e5d4 <SDMMC_GetCmdResp1>
 800e440:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e442:	69fb      	ldr	r3, [r7, #28]
}
 800e444:	4618      	mov	r0, r3
 800e446:	3720      	adds	r7, #32
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b088      	sub	sp, #32
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e45c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e460:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e462:	2329      	movs	r3, #41	; 0x29
 800e464:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e466:	2340      	movs	r3, #64	; 0x40
 800e468:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e46a:	2300      	movs	r3, #0
 800e46c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e46e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e472:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e474:	f107 0308 	add.w	r3, r7, #8
 800e478:	4619      	mov	r1, r3
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f7ff fecc 	bl	800e218 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f000 f9dd 	bl	800e840 <SDMMC_GetCmdResp3>
 800e486:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e488:	69fb      	ldr	r3, [r7, #28]
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3720      	adds	r7, #32
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}

0800e492 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800e492:	b580      	push	{r7, lr}
 800e494:	b088      	sub	sp, #32
 800e496:	af00      	add	r7, sp, #0
 800e498:	6078      	str	r0, [r7, #4]
 800e49a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e4a0:	2306      	movs	r3, #6
 800e4a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e4a4:	2340      	movs	r3, #64	; 0x40
 800e4a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e4ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e4b2:	f107 0308 	add.w	r3, r7, #8
 800e4b6:	4619      	mov	r1, r3
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f7ff fead 	bl	800e218 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800e4be:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4c2:	2106      	movs	r1, #6
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f000 f885 	bl	800e5d4 <SDMMC_GetCmdResp1>
 800e4ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4cc:	69fb      	ldr	r3, [r7, #28]
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3720      	adds	r7, #32
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}

0800e4d6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800e4d6:	b580      	push	{r7, lr}
 800e4d8:	b088      	sub	sp, #32
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e4e2:	2333      	movs	r3, #51	; 0x33
 800e4e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e4e6:	2340      	movs	r3, #64	; 0x40
 800e4e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e4ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e4f4:	f107 0308 	add.w	r3, r7, #8
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f7ff fe8c 	bl	800e218 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800e500:	f241 3288 	movw	r2, #5000	; 0x1388
 800e504:	2133      	movs	r1, #51	; 0x33
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f000 f864 	bl	800e5d4 <SDMMC_GetCmdResp1>
 800e50c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e50e:	69fb      	ldr	r3, [r7, #28]
}
 800e510:	4618      	mov	r0, r3
 800e512:	3720      	adds	r7, #32
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b088      	sub	sp, #32
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e520:	2300      	movs	r3, #0
 800e522:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e524:	2302      	movs	r3, #2
 800e526:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e528:	23c0      	movs	r3, #192	; 0xc0
 800e52a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e52c:	2300      	movs	r3, #0
 800e52e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e534:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e536:	f107 0308 	add.w	r3, r7, #8
 800e53a:	4619      	mov	r1, r3
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f7ff fe6b 	bl	800e218 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f000 f934 	bl	800e7b0 <SDMMC_GetCmdResp2>
 800e548:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e54a:	69fb      	ldr	r3, [r7, #28]
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3720      	adds	r7, #32
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}

0800e554 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b088      	sub	sp, #32
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e562:	2309      	movs	r3, #9
 800e564:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e566:	23c0      	movs	r3, #192	; 0xc0
 800e568:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e56a:	2300      	movs	r3, #0
 800e56c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e56e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e572:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e574:	f107 0308 	add.w	r3, r7, #8
 800e578:	4619      	mov	r1, r3
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f7ff fe4c 	bl	800e218 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f000 f915 	bl	800e7b0 <SDMMC_GetCmdResp2>
 800e586:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e588:	69fb      	ldr	r3, [r7, #28]
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3720      	adds	r7, #32
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}

0800e592 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e592:	b580      	push	{r7, lr}
 800e594:	b088      	sub	sp, #32
 800e596:	af00      	add	r7, sp, #0
 800e598:	6078      	str	r0, [r7, #4]
 800e59a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e59c:	2300      	movs	r3, #0
 800e59e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e5a0:	2303      	movs	r3, #3
 800e5a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e5a4:	2340      	movs	r3, #64	; 0x40
 800e5a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e5ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e5b2:	f107 0308 	add.w	r3, r7, #8
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f7ff fe2d 	bl	800e218 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e5be:	683a      	ldr	r2, [r7, #0]
 800e5c0:	2103      	movs	r1, #3
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f000 f97a 	bl	800e8bc <SDMMC_GetCmdResp6>
 800e5c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5ca:	69fb      	ldr	r3, [r7, #28]
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3720      	adds	r7, #32
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}

0800e5d4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b088      	sub	sp, #32
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	460b      	mov	r3, r1
 800e5de:	607a      	str	r2, [r7, #4]
 800e5e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e5e2:	4b70      	ldr	r3, [pc, #448]	; (800e7a4 <SDMMC_GetCmdResp1+0x1d0>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	4a70      	ldr	r2, [pc, #448]	; (800e7a8 <SDMMC_GetCmdResp1+0x1d4>)
 800e5e8:	fba2 2303 	umull	r2, r3, r2, r3
 800e5ec:	0a5a      	lsrs	r2, r3, #9
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	fb02 f303 	mul.w	r3, r2, r3
 800e5f4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e5f6:	69fb      	ldr	r3, [r7, #28]
 800e5f8:	1e5a      	subs	r2, r3, #1
 800e5fa:	61fa      	str	r2, [r7, #28]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d102      	bne.n	800e606 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e600:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e604:	e0c9      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e60a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e612:	2b00      	cmp	r3, #0
 800e614:	d0ef      	beq.n	800e5f6 <SDMMC_GetCmdResp1+0x22>
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d1ea      	bne.n	800e5f6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e624:	f003 0304 	and.w	r3, r3, #4
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d004      	beq.n	800e636 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2204      	movs	r2, #4
 800e630:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e632:	2304      	movs	r3, #4
 800e634:	e0b1      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e63a:	f003 0301 	and.w	r3, r3, #1
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d004      	beq.n	800e64c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	2201      	movs	r2, #1
 800e646:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e648:	2301      	movs	r3, #1
 800e64a:	e0a6      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	22c5      	movs	r2, #197	; 0xc5
 800e650:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e652:	68f8      	ldr	r0, [r7, #12]
 800e654:	f7ff fe0a 	bl	800e26c <SDIO_GetCommandResponse>
 800e658:	4603      	mov	r3, r0
 800e65a:	461a      	mov	r2, r3
 800e65c:	7afb      	ldrb	r3, [r7, #11]
 800e65e:	4293      	cmp	r3, r2
 800e660:	d001      	beq.n	800e666 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e662:	2301      	movs	r3, #1
 800e664:	e099      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e666:	2100      	movs	r1, #0
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f7ff fe0c 	bl	800e286 <SDIO_GetResponse>
 800e66e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e670:	697a      	ldr	r2, [r7, #20]
 800e672:	4b4e      	ldr	r3, [pc, #312]	; (800e7ac <SDMMC_GetCmdResp1+0x1d8>)
 800e674:	4013      	ands	r3, r2
 800e676:	2b00      	cmp	r3, #0
 800e678:	d101      	bne.n	800e67e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e67a:	2300      	movs	r3, #0
 800e67c:	e08d      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	2b00      	cmp	r3, #0
 800e682:	da02      	bge.n	800e68a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e684:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e688:	e087      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e690:	2b00      	cmp	r3, #0
 800e692:	d001      	beq.n	800e698 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e694:	2340      	movs	r3, #64	; 0x40
 800e696:	e080      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d001      	beq.n	800e6a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e6a2:	2380      	movs	r3, #128	; 0x80
 800e6a4:	e079      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d002      	beq.n	800e6b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e6b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e6b4:	e071      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d002      	beq.n	800e6c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e6c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e6c4:	e069      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d002      	beq.n	800e6d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e6d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6d4:	e061      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d002      	beq.n	800e6e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e6e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e6e4:	e059      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d002      	beq.n	800e6f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e6f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e6f4:	e051      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d002      	beq.n	800e706 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e704:	e049      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d002      	beq.n	800e716 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e710:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e714:	e041      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d002      	beq.n	800e726 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e724:	e039      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d002      	beq.n	800e736 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e730:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e734:	e031      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d002      	beq.n	800e746 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e740:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e744:	e029      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d002      	beq.n	800e756 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e750:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e754:	e021      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d002      	beq.n	800e766 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e760:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e764:	e019      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d002      	beq.n	800e776 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e770:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e774:	e011      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d002      	beq.n	800e786 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e780:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e784:	e009      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	f003 0308 	and.w	r3, r3, #8
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d002      	beq.n	800e796 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e790:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e794:	e001      	b.n	800e79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3720      	adds	r7, #32
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	bf00      	nop
 800e7a4:	20000004 	.word	0x20000004
 800e7a8:	10624dd3 	.word	0x10624dd3
 800e7ac:	fdffe008 	.word	0xfdffe008

0800e7b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b085      	sub	sp, #20
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e7b8:	4b1f      	ldr	r3, [pc, #124]	; (800e838 <SDMMC_GetCmdResp2+0x88>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	4a1f      	ldr	r2, [pc, #124]	; (800e83c <SDMMC_GetCmdResp2+0x8c>)
 800e7be:	fba2 2303 	umull	r2, r3, r2, r3
 800e7c2:	0a5b      	lsrs	r3, r3, #9
 800e7c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7c8:	fb02 f303 	mul.w	r3, r2, r3
 800e7cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	1e5a      	subs	r2, r3, #1
 800e7d2:	60fa      	str	r2, [r7, #12]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d102      	bne.n	800e7de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e7d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e7dc:	e026      	b.n	800e82c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d0ef      	beq.n	800e7ce <SDMMC_GetCmdResp2+0x1e>
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d1ea      	bne.n	800e7ce <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7fc:	f003 0304 	and.w	r3, r3, #4
 800e800:	2b00      	cmp	r3, #0
 800e802:	d004      	beq.n	800e80e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2204      	movs	r2, #4
 800e808:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e80a:	2304      	movs	r3, #4
 800e80c:	e00e      	b.n	800e82c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e812:	f003 0301 	and.w	r3, r3, #1
 800e816:	2b00      	cmp	r3, #0
 800e818:	d004      	beq.n	800e824 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2201      	movs	r2, #1
 800e81e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e820:	2301      	movs	r3, #1
 800e822:	e003      	b.n	800e82c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	22c5      	movs	r2, #197	; 0xc5
 800e828:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e82a:	2300      	movs	r3, #0
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3714      	adds	r7, #20
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr
 800e838:	20000004 	.word	0x20000004
 800e83c:	10624dd3 	.word	0x10624dd3

0800e840 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e840:	b480      	push	{r7}
 800e842:	b085      	sub	sp, #20
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e848:	4b1a      	ldr	r3, [pc, #104]	; (800e8b4 <SDMMC_GetCmdResp3+0x74>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4a1a      	ldr	r2, [pc, #104]	; (800e8b8 <SDMMC_GetCmdResp3+0x78>)
 800e84e:	fba2 2303 	umull	r2, r3, r2, r3
 800e852:	0a5b      	lsrs	r3, r3, #9
 800e854:	f241 3288 	movw	r2, #5000	; 0x1388
 800e858:	fb02 f303 	mul.w	r3, r2, r3
 800e85c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	1e5a      	subs	r2, r3, #1
 800e862:	60fa      	str	r2, [r7, #12]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d102      	bne.n	800e86e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e868:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e86c:	e01b      	b.n	800e8a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e872:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d0ef      	beq.n	800e85e <SDMMC_GetCmdResp3+0x1e>
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e884:	2b00      	cmp	r3, #0
 800e886:	d1ea      	bne.n	800e85e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e88c:	f003 0304 	and.w	r3, r3, #4
 800e890:	2b00      	cmp	r3, #0
 800e892:	d004      	beq.n	800e89e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2204      	movs	r2, #4
 800e898:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e89a:	2304      	movs	r3, #4
 800e89c:	e003      	b.n	800e8a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	22c5      	movs	r2, #197	; 0xc5
 800e8a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e8a4:	2300      	movs	r3, #0
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3714      	adds	r7, #20
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b0:	4770      	bx	lr
 800e8b2:	bf00      	nop
 800e8b4:	20000004 	.word	0x20000004
 800e8b8:	10624dd3 	.word	0x10624dd3

0800e8bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b088      	sub	sp, #32
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	607a      	str	r2, [r7, #4]
 800e8c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e8ca:	4b35      	ldr	r3, [pc, #212]	; (800e9a0 <SDMMC_GetCmdResp6+0xe4>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	4a35      	ldr	r2, [pc, #212]	; (800e9a4 <SDMMC_GetCmdResp6+0xe8>)
 800e8d0:	fba2 2303 	umull	r2, r3, r2, r3
 800e8d4:	0a5b      	lsrs	r3, r3, #9
 800e8d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8da:	fb02 f303 	mul.w	r3, r2, r3
 800e8de:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	1e5a      	subs	r2, r3, #1
 800e8e4:	61fa      	str	r2, [r7, #28]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d102      	bne.n	800e8f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e8ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e8ee:	e052      	b.n	800e996 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8f4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e8f6:	69bb      	ldr	r3, [r7, #24]
 800e8f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d0ef      	beq.n	800e8e0 <SDMMC_GetCmdResp6+0x24>
 800e900:	69bb      	ldr	r3, [r7, #24]
 800e902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e906:	2b00      	cmp	r3, #0
 800e908:	d1ea      	bne.n	800e8e0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e90e:	f003 0304 	and.w	r3, r3, #4
 800e912:	2b00      	cmp	r3, #0
 800e914:	d004      	beq.n	800e920 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	2204      	movs	r2, #4
 800e91a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e91c:	2304      	movs	r3, #4
 800e91e:	e03a      	b.n	800e996 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e924:	f003 0301 	and.w	r3, r3, #1
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d004      	beq.n	800e936 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2201      	movs	r2, #1
 800e930:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e932:	2301      	movs	r3, #1
 800e934:	e02f      	b.n	800e996 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e936:	68f8      	ldr	r0, [r7, #12]
 800e938:	f7ff fc98 	bl	800e26c <SDIO_GetCommandResponse>
 800e93c:	4603      	mov	r3, r0
 800e93e:	461a      	mov	r2, r3
 800e940:	7afb      	ldrb	r3, [r7, #11]
 800e942:	4293      	cmp	r3, r2
 800e944:	d001      	beq.n	800e94a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e946:	2301      	movs	r3, #1
 800e948:	e025      	b.n	800e996 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	22c5      	movs	r2, #197	; 0xc5
 800e94e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e950:	2100      	movs	r1, #0
 800e952:	68f8      	ldr	r0, [r7, #12]
 800e954:	f7ff fc97 	bl	800e286 <SDIO_GetResponse>
 800e958:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e960:	2b00      	cmp	r3, #0
 800e962:	d106      	bne.n	800e972 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	0c1b      	lsrs	r3, r3, #16
 800e968:	b29a      	uxth	r2, r3
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e96e:	2300      	movs	r3, #0
 800e970:	e011      	b.n	800e996 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d002      	beq.n	800e982 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e97c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e980:	e009      	b.n	800e996 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d002      	beq.n	800e992 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e98c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e990:	e001      	b.n	800e996 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e992:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e996:	4618      	mov	r0, r3
 800e998:	3720      	adds	r7, #32
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	20000004 	.word	0x20000004
 800e9a4:	10624dd3 	.word	0x10624dd3

0800e9a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b085      	sub	sp, #20
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e9b0:	4b22      	ldr	r3, [pc, #136]	; (800ea3c <SDMMC_GetCmdResp7+0x94>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	4a22      	ldr	r2, [pc, #136]	; (800ea40 <SDMMC_GetCmdResp7+0x98>)
 800e9b6:	fba2 2303 	umull	r2, r3, r2, r3
 800e9ba:	0a5b      	lsrs	r3, r3, #9
 800e9bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9c0:	fb02 f303 	mul.w	r3, r2, r3
 800e9c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	1e5a      	subs	r2, r3, #1
 800e9ca:	60fa      	str	r2, [r7, #12]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d102      	bne.n	800e9d6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e9d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e9d4:	e02c      	b.n	800ea30 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d0ef      	beq.n	800e9c6 <SDMMC_GetCmdResp7+0x1e>
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d1ea      	bne.n	800e9c6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9f4:	f003 0304 	and.w	r3, r3, #4
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d004      	beq.n	800ea06 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2204      	movs	r2, #4
 800ea00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea02:	2304      	movs	r3, #4
 800ea04:	e014      	b.n	800ea30 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea0a:	f003 0301 	and.w	r3, r3, #1
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d004      	beq.n	800ea1c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2201      	movs	r2, #1
 800ea16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea18:	2301      	movs	r3, #1
 800ea1a:	e009      	b.n	800ea30 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d002      	beq.n	800ea2e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2240      	movs	r2, #64	; 0x40
 800ea2c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ea2e:	2300      	movs	r3, #0
  
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3714      	adds	r7, #20
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr
 800ea3c:	20000004 	.word	0x20000004
 800ea40:	10624dd3 	.word	0x10624dd3

0800ea44 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b085      	sub	sp, #20
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ea4c:	4b11      	ldr	r3, [pc, #68]	; (800ea94 <SDMMC_GetCmdError+0x50>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	4a11      	ldr	r2, [pc, #68]	; (800ea98 <SDMMC_GetCmdError+0x54>)
 800ea52:	fba2 2303 	umull	r2, r3, r2, r3
 800ea56:	0a5b      	lsrs	r3, r3, #9
 800ea58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea5c:	fb02 f303 	mul.w	r3, r2, r3
 800ea60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	1e5a      	subs	r2, r3, #1
 800ea66:	60fa      	str	r2, [r7, #12]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d102      	bne.n	800ea72 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ea6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea70:	e009      	b.n	800ea86 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d0f1      	beq.n	800ea62 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	22c5      	movs	r2, #197	; 0xc5
 800ea82:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ea84:	2300      	movs	r3, #0
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3714      	adds	r7, #20
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop
 800ea94:	20000004 	.word	0x20000004
 800ea98:	10624dd3 	.word	0x10624dd3

0800ea9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b087      	sub	sp, #28
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	60f8      	str	r0, [r7, #12]
 800eaa4:	60b9      	str	r1, [r7, #8]
 800eaa6:	4613      	mov	r3, r2
 800eaa8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800eaaa:	79fb      	ldrb	r3, [r7, #7]
 800eaac:	2b02      	cmp	r3, #2
 800eaae:	d165      	bne.n	800eb7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	4a41      	ldr	r2, [pc, #260]	; (800ebb8 <USB_SetTurnaroundTime+0x11c>)
 800eab4:	4293      	cmp	r3, r2
 800eab6:	d906      	bls.n	800eac6 <USB_SetTurnaroundTime+0x2a>
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	4a40      	ldr	r2, [pc, #256]	; (800ebbc <USB_SetTurnaroundTime+0x120>)
 800eabc:	4293      	cmp	r3, r2
 800eabe:	d202      	bcs.n	800eac6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800eac0:	230f      	movs	r3, #15
 800eac2:	617b      	str	r3, [r7, #20]
 800eac4:	e062      	b.n	800eb8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	4a3c      	ldr	r2, [pc, #240]	; (800ebbc <USB_SetTurnaroundTime+0x120>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d306      	bcc.n	800eadc <USB_SetTurnaroundTime+0x40>
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	4a3b      	ldr	r2, [pc, #236]	; (800ebc0 <USB_SetTurnaroundTime+0x124>)
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d202      	bcs.n	800eadc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ead6:	230e      	movs	r3, #14
 800ead8:	617b      	str	r3, [r7, #20]
 800eada:	e057      	b.n	800eb8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	4a38      	ldr	r2, [pc, #224]	; (800ebc0 <USB_SetTurnaroundTime+0x124>)
 800eae0:	4293      	cmp	r3, r2
 800eae2:	d306      	bcc.n	800eaf2 <USB_SetTurnaroundTime+0x56>
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	4a37      	ldr	r2, [pc, #220]	; (800ebc4 <USB_SetTurnaroundTime+0x128>)
 800eae8:	4293      	cmp	r3, r2
 800eaea:	d202      	bcs.n	800eaf2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800eaec:	230d      	movs	r3, #13
 800eaee:	617b      	str	r3, [r7, #20]
 800eaf0:	e04c      	b.n	800eb8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	4a33      	ldr	r2, [pc, #204]	; (800ebc4 <USB_SetTurnaroundTime+0x128>)
 800eaf6:	4293      	cmp	r3, r2
 800eaf8:	d306      	bcc.n	800eb08 <USB_SetTurnaroundTime+0x6c>
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	4a32      	ldr	r2, [pc, #200]	; (800ebc8 <USB_SetTurnaroundTime+0x12c>)
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d802      	bhi.n	800eb08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800eb02:	230c      	movs	r3, #12
 800eb04:	617b      	str	r3, [r7, #20]
 800eb06:	e041      	b.n	800eb8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	4a2f      	ldr	r2, [pc, #188]	; (800ebc8 <USB_SetTurnaroundTime+0x12c>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d906      	bls.n	800eb1e <USB_SetTurnaroundTime+0x82>
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	4a2e      	ldr	r2, [pc, #184]	; (800ebcc <USB_SetTurnaroundTime+0x130>)
 800eb14:	4293      	cmp	r3, r2
 800eb16:	d802      	bhi.n	800eb1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800eb18:	230b      	movs	r3, #11
 800eb1a:	617b      	str	r3, [r7, #20]
 800eb1c:	e036      	b.n	800eb8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	4a2a      	ldr	r2, [pc, #168]	; (800ebcc <USB_SetTurnaroundTime+0x130>)
 800eb22:	4293      	cmp	r3, r2
 800eb24:	d906      	bls.n	800eb34 <USB_SetTurnaroundTime+0x98>
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	4a29      	ldr	r2, [pc, #164]	; (800ebd0 <USB_SetTurnaroundTime+0x134>)
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	d802      	bhi.n	800eb34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800eb2e:	230a      	movs	r3, #10
 800eb30:	617b      	str	r3, [r7, #20]
 800eb32:	e02b      	b.n	800eb8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	4a26      	ldr	r2, [pc, #152]	; (800ebd0 <USB_SetTurnaroundTime+0x134>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d906      	bls.n	800eb4a <USB_SetTurnaroundTime+0xae>
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	4a25      	ldr	r2, [pc, #148]	; (800ebd4 <USB_SetTurnaroundTime+0x138>)
 800eb40:	4293      	cmp	r3, r2
 800eb42:	d202      	bcs.n	800eb4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800eb44:	2309      	movs	r3, #9
 800eb46:	617b      	str	r3, [r7, #20]
 800eb48:	e020      	b.n	800eb8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	4a21      	ldr	r2, [pc, #132]	; (800ebd4 <USB_SetTurnaroundTime+0x138>)
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d306      	bcc.n	800eb60 <USB_SetTurnaroundTime+0xc4>
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	4a20      	ldr	r2, [pc, #128]	; (800ebd8 <USB_SetTurnaroundTime+0x13c>)
 800eb56:	4293      	cmp	r3, r2
 800eb58:	d802      	bhi.n	800eb60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800eb5a:	2308      	movs	r3, #8
 800eb5c:	617b      	str	r3, [r7, #20]
 800eb5e:	e015      	b.n	800eb8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	4a1d      	ldr	r2, [pc, #116]	; (800ebd8 <USB_SetTurnaroundTime+0x13c>)
 800eb64:	4293      	cmp	r3, r2
 800eb66:	d906      	bls.n	800eb76 <USB_SetTurnaroundTime+0xda>
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	4a1c      	ldr	r2, [pc, #112]	; (800ebdc <USB_SetTurnaroundTime+0x140>)
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	d202      	bcs.n	800eb76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800eb70:	2307      	movs	r3, #7
 800eb72:	617b      	str	r3, [r7, #20]
 800eb74:	e00a      	b.n	800eb8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800eb76:	2306      	movs	r3, #6
 800eb78:	617b      	str	r3, [r7, #20]
 800eb7a:	e007      	b.n	800eb8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800eb7c:	79fb      	ldrb	r3, [r7, #7]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d102      	bne.n	800eb88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800eb82:	2309      	movs	r3, #9
 800eb84:	617b      	str	r3, [r7, #20]
 800eb86:	e001      	b.n	800eb8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800eb88:	2309      	movs	r3, #9
 800eb8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	68db      	ldr	r3, [r3, #12]
 800eb90:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	68da      	ldr	r2, [r3, #12]
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	029b      	lsls	r3, r3, #10
 800eba0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800eba4:	431a      	orrs	r2, r3
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ebaa:	2300      	movs	r3, #0
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	371c      	adds	r7, #28
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr
 800ebb8:	00d8acbf 	.word	0x00d8acbf
 800ebbc:	00e4e1c0 	.word	0x00e4e1c0
 800ebc0:	00f42400 	.word	0x00f42400
 800ebc4:	01067380 	.word	0x01067380
 800ebc8:	011a499f 	.word	0x011a499f
 800ebcc:	01312cff 	.word	0x01312cff
 800ebd0:	014ca43f 	.word	0x014ca43f
 800ebd4:	016e3600 	.word	0x016e3600
 800ebd8:	01a6ab1f 	.word	0x01a6ab1f
 800ebdc:	01e84800 	.word	0x01e84800

0800ebe0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b085      	sub	sp, #20
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ebea:	2300      	movs	r3, #0
 800ebec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	4a13      	ldr	r2, [pc, #76]	; (800ec44 <USB_FlushTxFifo+0x64>)
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	d901      	bls.n	800ec00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ebfc:	2303      	movs	r3, #3
 800ebfe:	e01b      	b.n	800ec38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	691b      	ldr	r3, [r3, #16]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	daf2      	bge.n	800ebee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	019b      	lsls	r3, r3, #6
 800ec10:	f043 0220 	orr.w	r2, r3, #32
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	3301      	adds	r3, #1
 800ec1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	4a08      	ldr	r2, [pc, #32]	; (800ec44 <USB_FlushTxFifo+0x64>)
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d901      	bls.n	800ec2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ec26:	2303      	movs	r3, #3
 800ec28:	e006      	b.n	800ec38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	691b      	ldr	r3, [r3, #16]
 800ec2e:	f003 0320 	and.w	r3, r3, #32
 800ec32:	2b20      	cmp	r3, #32
 800ec34:	d0f0      	beq.n	800ec18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ec36:	2300      	movs	r3, #0
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3714      	adds	r7, #20
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr
 800ec44:	00030d40 	.word	0x00030d40

0800ec48 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b087      	sub	sp, #28
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec5a:	689b      	ldr	r3, [r3, #8]
 800ec5c:	f003 0306 	and.w	r3, r3, #6
 800ec60:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d102      	bne.n	800ec6e <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	75fb      	strb	r3, [r7, #23]
 800ec6c:	e00a      	b.n	800ec84 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2b02      	cmp	r3, #2
 800ec72:	d002      	beq.n	800ec7a <USB_GetDevSpeed+0x32>
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2b06      	cmp	r3, #6
 800ec78:	d102      	bne.n	800ec80 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ec7a:	2302      	movs	r3, #2
 800ec7c:	75fb      	strb	r3, [r7, #23]
 800ec7e:	e001      	b.n	800ec84 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ec80:	230f      	movs	r3, #15
 800ec82:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ec84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	371c      	adds	r7, #28
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec90:	4770      	bx	lr

0800ec92 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ec92:	b480      	push	{r7}
 800ec94:	b085      	sub	sp, #20
 800ec96:	af00      	add	r7, sp, #0
 800ec98:	6078      	str	r0, [r7, #4]
 800ec9a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	781b      	ldrb	r3, [r3, #0]
 800eca4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	785b      	ldrb	r3, [r3, #1]
 800ecaa:	2b01      	cmp	r3, #1
 800ecac:	d13a      	bne.n	800ed24 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecb4:	69da      	ldr	r2, [r3, #28]
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	f003 030f 	and.w	r3, r3, #15
 800ecbe:	2101      	movs	r1, #1
 800ecc0:	fa01 f303 	lsl.w	r3, r1, r3
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	68f9      	ldr	r1, [r7, #12]
 800ecc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eccc:	4313      	orrs	r3, r2
 800ecce:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	015a      	lsls	r2, r3, #5
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	4413      	add	r3, r2
 800ecd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d155      	bne.n	800ed92 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	015a      	lsls	r2, r3, #5
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	4413      	add	r3, r2
 800ecee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	68db      	ldr	r3, [r3, #12]
 800ecf8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	791b      	ldrb	r3, [r3, #4]
 800ed00:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ed02:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	059b      	lsls	r3, r3, #22
 800ed08:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ed0a:	4313      	orrs	r3, r2
 800ed0c:	68ba      	ldr	r2, [r7, #8]
 800ed0e:	0151      	lsls	r1, r2, #5
 800ed10:	68fa      	ldr	r2, [r7, #12]
 800ed12:	440a      	add	r2, r1
 800ed14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ed1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed20:	6013      	str	r3, [r2, #0]
 800ed22:	e036      	b.n	800ed92 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed2a:	69da      	ldr	r2, [r3, #28]
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	f003 030f 	and.w	r3, r3, #15
 800ed34:	2101      	movs	r1, #1
 800ed36:	fa01 f303 	lsl.w	r3, r1, r3
 800ed3a:	041b      	lsls	r3, r3, #16
 800ed3c:	68f9      	ldr	r1, [r7, #12]
 800ed3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed42:	4313      	orrs	r3, r2
 800ed44:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	015a      	lsls	r2, r3, #5
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	4413      	add	r3, r2
 800ed4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d11a      	bne.n	800ed92 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	015a      	lsls	r2, r3, #5
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	4413      	add	r3, r2
 800ed64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed68:	681a      	ldr	r2, [r3, #0]
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	68db      	ldr	r3, [r3, #12]
 800ed6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	791b      	ldrb	r3, [r3, #4]
 800ed76:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ed78:	430b      	orrs	r3, r1
 800ed7a:	4313      	orrs	r3, r2
 800ed7c:	68ba      	ldr	r2, [r7, #8]
 800ed7e:	0151      	lsls	r1, r2, #5
 800ed80:	68fa      	ldr	r2, [r7, #12]
 800ed82:	440a      	add	r2, r1
 800ed84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ed8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed90:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ed92:	2300      	movs	r3, #0
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3714      	adds	r7, #20
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr

0800eda0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b08a      	sub	sp, #40	; 0x28
 800eda4:	af02      	add	r7, sp, #8
 800eda6:	60f8      	str	r0, [r7, #12]
 800eda8:	60b9      	str	r1, [r7, #8]
 800edaa:	4613      	mov	r3, r2
 800edac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	785b      	ldrb	r3, [r3, #1]
 800edbc:	2b01      	cmp	r3, #1
 800edbe:	f040 815c 	bne.w	800f07a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	699b      	ldr	r3, [r3, #24]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d132      	bne.n	800ee30 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800edca:	69bb      	ldr	r3, [r7, #24]
 800edcc:	015a      	lsls	r2, r3, #5
 800edce:	69fb      	ldr	r3, [r7, #28]
 800edd0:	4413      	add	r3, r2
 800edd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edd6:	691b      	ldr	r3, [r3, #16]
 800edd8:	69ba      	ldr	r2, [r7, #24]
 800edda:	0151      	lsls	r1, r2, #5
 800eddc:	69fa      	ldr	r2, [r7, #28]
 800edde:	440a      	add	r2, r1
 800ede0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ede4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ede8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800edec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800edee:	69bb      	ldr	r3, [r7, #24]
 800edf0:	015a      	lsls	r2, r3, #5
 800edf2:	69fb      	ldr	r3, [r7, #28]
 800edf4:	4413      	add	r3, r2
 800edf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edfa:	691b      	ldr	r3, [r3, #16]
 800edfc:	69ba      	ldr	r2, [r7, #24]
 800edfe:	0151      	lsls	r1, r2, #5
 800ee00:	69fa      	ldr	r2, [r7, #28]
 800ee02:	440a      	add	r2, r1
 800ee04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ee0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ee0e:	69bb      	ldr	r3, [r7, #24]
 800ee10:	015a      	lsls	r2, r3, #5
 800ee12:	69fb      	ldr	r3, [r7, #28]
 800ee14:	4413      	add	r3, r2
 800ee16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee1a:	691b      	ldr	r3, [r3, #16]
 800ee1c:	69ba      	ldr	r2, [r7, #24]
 800ee1e:	0151      	lsls	r1, r2, #5
 800ee20:	69fa      	ldr	r2, [r7, #28]
 800ee22:	440a      	add	r2, r1
 800ee24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee28:	0cdb      	lsrs	r3, r3, #19
 800ee2a:	04db      	lsls	r3, r3, #19
 800ee2c:	6113      	str	r3, [r2, #16]
 800ee2e:	e074      	b.n	800ef1a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ee30:	69bb      	ldr	r3, [r7, #24]
 800ee32:	015a      	lsls	r2, r3, #5
 800ee34:	69fb      	ldr	r3, [r7, #28]
 800ee36:	4413      	add	r3, r2
 800ee38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee3c:	691b      	ldr	r3, [r3, #16]
 800ee3e:	69ba      	ldr	r2, [r7, #24]
 800ee40:	0151      	lsls	r1, r2, #5
 800ee42:	69fa      	ldr	r2, [r7, #28]
 800ee44:	440a      	add	r2, r1
 800ee46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee4a:	0cdb      	lsrs	r3, r3, #19
 800ee4c:	04db      	lsls	r3, r3, #19
 800ee4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ee50:	69bb      	ldr	r3, [r7, #24]
 800ee52:	015a      	lsls	r2, r3, #5
 800ee54:	69fb      	ldr	r3, [r7, #28]
 800ee56:	4413      	add	r3, r2
 800ee58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee5c:	691b      	ldr	r3, [r3, #16]
 800ee5e:	69ba      	ldr	r2, [r7, #24]
 800ee60:	0151      	lsls	r1, r2, #5
 800ee62:	69fa      	ldr	r2, [r7, #28]
 800ee64:	440a      	add	r2, r1
 800ee66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ee6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ee72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ee74:	69bb      	ldr	r3, [r7, #24]
 800ee76:	015a      	lsls	r2, r3, #5
 800ee78:	69fb      	ldr	r3, [r7, #28]
 800ee7a:	4413      	add	r3, r2
 800ee7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee80:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	6999      	ldr	r1, [r3, #24]
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	68db      	ldr	r3, [r3, #12]
 800ee8a:	440b      	add	r3, r1
 800ee8c:	1e59      	subs	r1, r3, #1
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	68db      	ldr	r3, [r3, #12]
 800ee92:	fbb1 f3f3 	udiv	r3, r1, r3
 800ee96:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ee98:	4b9d      	ldr	r3, [pc, #628]	; (800f110 <USB_EPStartXfer+0x370>)
 800ee9a:	400b      	ands	r3, r1
 800ee9c:	69b9      	ldr	r1, [r7, #24]
 800ee9e:	0148      	lsls	r0, r1, #5
 800eea0:	69f9      	ldr	r1, [r7, #28]
 800eea2:	4401      	add	r1, r0
 800eea4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eea8:	4313      	orrs	r3, r2
 800eeaa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800eeac:	69bb      	ldr	r3, [r7, #24]
 800eeae:	015a      	lsls	r2, r3, #5
 800eeb0:	69fb      	ldr	r3, [r7, #28]
 800eeb2:	4413      	add	r3, r2
 800eeb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeb8:	691a      	ldr	r2, [r3, #16]
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	699b      	ldr	r3, [r3, #24]
 800eebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eec2:	69b9      	ldr	r1, [r7, #24]
 800eec4:	0148      	lsls	r0, r1, #5
 800eec6:	69f9      	ldr	r1, [r7, #28]
 800eec8:	4401      	add	r1, r0
 800eeca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eece:	4313      	orrs	r3, r2
 800eed0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	791b      	ldrb	r3, [r3, #4]
 800eed6:	2b01      	cmp	r3, #1
 800eed8:	d11f      	bne.n	800ef1a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800eeda:	69bb      	ldr	r3, [r7, #24]
 800eedc:	015a      	lsls	r2, r3, #5
 800eede:	69fb      	ldr	r3, [r7, #28]
 800eee0:	4413      	add	r3, r2
 800eee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eee6:	691b      	ldr	r3, [r3, #16]
 800eee8:	69ba      	ldr	r2, [r7, #24]
 800eeea:	0151      	lsls	r1, r2, #5
 800eeec:	69fa      	ldr	r2, [r7, #28]
 800eeee:	440a      	add	r2, r1
 800eef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eef4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800eef8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800eefa:	69bb      	ldr	r3, [r7, #24]
 800eefc:	015a      	lsls	r2, r3, #5
 800eefe:	69fb      	ldr	r3, [r7, #28]
 800ef00:	4413      	add	r3, r2
 800ef02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef06:	691b      	ldr	r3, [r3, #16]
 800ef08:	69ba      	ldr	r2, [r7, #24]
 800ef0a:	0151      	lsls	r1, r2, #5
 800ef0c:	69fa      	ldr	r2, [r7, #28]
 800ef0e:	440a      	add	r2, r1
 800ef10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ef18:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ef1a:	79fb      	ldrb	r3, [r7, #7]
 800ef1c:	2b01      	cmp	r3, #1
 800ef1e:	d14b      	bne.n	800efb8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	695b      	ldr	r3, [r3, #20]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d009      	beq.n	800ef3c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ef28:	69bb      	ldr	r3, [r7, #24]
 800ef2a:	015a      	lsls	r2, r3, #5
 800ef2c:	69fb      	ldr	r3, [r7, #28]
 800ef2e:	4413      	add	r3, r2
 800ef30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef34:	461a      	mov	r2, r3
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	695b      	ldr	r3, [r3, #20]
 800ef3a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	791b      	ldrb	r3, [r3, #4]
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	d128      	bne.n	800ef96 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ef44:	69fb      	ldr	r3, [r7, #28]
 800ef46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef4a:	689b      	ldr	r3, [r3, #8]
 800ef4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d110      	bne.n	800ef76 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ef54:	69bb      	ldr	r3, [r7, #24]
 800ef56:	015a      	lsls	r2, r3, #5
 800ef58:	69fb      	ldr	r3, [r7, #28]
 800ef5a:	4413      	add	r3, r2
 800ef5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	69ba      	ldr	r2, [r7, #24]
 800ef64:	0151      	lsls	r1, r2, #5
 800ef66:	69fa      	ldr	r2, [r7, #28]
 800ef68:	440a      	add	r2, r1
 800ef6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ef72:	6013      	str	r3, [r2, #0]
 800ef74:	e00f      	b.n	800ef96 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ef76:	69bb      	ldr	r3, [r7, #24]
 800ef78:	015a      	lsls	r2, r3, #5
 800ef7a:	69fb      	ldr	r3, [r7, #28]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	69ba      	ldr	r2, [r7, #24]
 800ef86:	0151      	lsls	r1, r2, #5
 800ef88:	69fa      	ldr	r2, [r7, #28]
 800ef8a:	440a      	add	r2, r1
 800ef8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef94:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ef96:	69bb      	ldr	r3, [r7, #24]
 800ef98:	015a      	lsls	r2, r3, #5
 800ef9a:	69fb      	ldr	r3, [r7, #28]
 800ef9c:	4413      	add	r3, r2
 800ef9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	69ba      	ldr	r2, [r7, #24]
 800efa6:	0151      	lsls	r1, r2, #5
 800efa8:	69fa      	ldr	r2, [r7, #28]
 800efaa:	440a      	add	r2, r1
 800efac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800efb4:	6013      	str	r3, [r2, #0]
 800efb6:	e133      	b.n	800f220 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800efb8:	69bb      	ldr	r3, [r7, #24]
 800efba:	015a      	lsls	r2, r3, #5
 800efbc:	69fb      	ldr	r3, [r7, #28]
 800efbe:	4413      	add	r3, r2
 800efc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	69ba      	ldr	r2, [r7, #24]
 800efc8:	0151      	lsls	r1, r2, #5
 800efca:	69fa      	ldr	r2, [r7, #28]
 800efcc:	440a      	add	r2, r1
 800efce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800efd6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	791b      	ldrb	r3, [r3, #4]
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d015      	beq.n	800f00c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	699b      	ldr	r3, [r3, #24]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	f000 811b 	beq.w	800f220 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800efea:	69fb      	ldr	r3, [r7, #28]
 800efec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	f003 030f 	and.w	r3, r3, #15
 800effa:	2101      	movs	r1, #1
 800effc:	fa01 f303 	lsl.w	r3, r1, r3
 800f000:	69f9      	ldr	r1, [r7, #28]
 800f002:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f006:	4313      	orrs	r3, r2
 800f008:	634b      	str	r3, [r1, #52]	; 0x34
 800f00a:	e109      	b.n	800f220 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f00c:	69fb      	ldr	r3, [r7, #28]
 800f00e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f012:	689b      	ldr	r3, [r3, #8]
 800f014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d110      	bne.n	800f03e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f01c:	69bb      	ldr	r3, [r7, #24]
 800f01e:	015a      	lsls	r2, r3, #5
 800f020:	69fb      	ldr	r3, [r7, #28]
 800f022:	4413      	add	r3, r2
 800f024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	69ba      	ldr	r2, [r7, #24]
 800f02c:	0151      	lsls	r1, r2, #5
 800f02e:	69fa      	ldr	r2, [r7, #28]
 800f030:	440a      	add	r2, r1
 800f032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f036:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f03a:	6013      	str	r3, [r2, #0]
 800f03c:	e00f      	b.n	800f05e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f03e:	69bb      	ldr	r3, [r7, #24]
 800f040:	015a      	lsls	r2, r3, #5
 800f042:	69fb      	ldr	r3, [r7, #28]
 800f044:	4413      	add	r3, r2
 800f046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	69ba      	ldr	r2, [r7, #24]
 800f04e:	0151      	lsls	r1, r2, #5
 800f050:	69fa      	ldr	r2, [r7, #28]
 800f052:	440a      	add	r2, r1
 800f054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f05c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	6919      	ldr	r1, [r3, #16]
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	781a      	ldrb	r2, [r3, #0]
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	699b      	ldr	r3, [r3, #24]
 800f06a:	b298      	uxth	r0, r3
 800f06c:	79fb      	ldrb	r3, [r7, #7]
 800f06e:	9300      	str	r3, [sp, #0]
 800f070:	4603      	mov	r3, r0
 800f072:	68f8      	ldr	r0, [r7, #12]
 800f074:	f000 fade 	bl	800f634 <USB_WritePacket>
 800f078:	e0d2      	b.n	800f220 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	015a      	lsls	r2, r3, #5
 800f07e:	69fb      	ldr	r3, [r7, #28]
 800f080:	4413      	add	r3, r2
 800f082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f086:	691b      	ldr	r3, [r3, #16]
 800f088:	69ba      	ldr	r2, [r7, #24]
 800f08a:	0151      	lsls	r1, r2, #5
 800f08c:	69fa      	ldr	r2, [r7, #28]
 800f08e:	440a      	add	r2, r1
 800f090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f094:	0cdb      	lsrs	r3, r3, #19
 800f096:	04db      	lsls	r3, r3, #19
 800f098:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f09a:	69bb      	ldr	r3, [r7, #24]
 800f09c:	015a      	lsls	r2, r3, #5
 800f09e:	69fb      	ldr	r3, [r7, #28]
 800f0a0:	4413      	add	r3, r2
 800f0a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0a6:	691b      	ldr	r3, [r3, #16]
 800f0a8:	69ba      	ldr	r2, [r7, #24]
 800f0aa:	0151      	lsls	r1, r2, #5
 800f0ac:	69fa      	ldr	r2, [r7, #28]
 800f0ae:	440a      	add	r2, r1
 800f0b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f0b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f0bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	699b      	ldr	r3, [r3, #24]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d126      	bne.n	800f114 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f0c6:	69bb      	ldr	r3, [r7, #24]
 800f0c8:	015a      	lsls	r2, r3, #5
 800f0ca:	69fb      	ldr	r3, [r7, #28]
 800f0cc:	4413      	add	r3, r2
 800f0ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0d2:	691a      	ldr	r2, [r3, #16]
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	68db      	ldr	r3, [r3, #12]
 800f0d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f0dc:	69b9      	ldr	r1, [r7, #24]
 800f0de:	0148      	lsls	r0, r1, #5
 800f0e0:	69f9      	ldr	r1, [r7, #28]
 800f0e2:	4401      	add	r1, r0
 800f0e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f0e8:	4313      	orrs	r3, r2
 800f0ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f0ec:	69bb      	ldr	r3, [r7, #24]
 800f0ee:	015a      	lsls	r2, r3, #5
 800f0f0:	69fb      	ldr	r3, [r7, #28]
 800f0f2:	4413      	add	r3, r2
 800f0f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0f8:	691b      	ldr	r3, [r3, #16]
 800f0fa:	69ba      	ldr	r2, [r7, #24]
 800f0fc:	0151      	lsls	r1, r2, #5
 800f0fe:	69fa      	ldr	r2, [r7, #28]
 800f100:	440a      	add	r2, r1
 800f102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f106:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f10a:	6113      	str	r3, [r2, #16]
 800f10c:	e03a      	b.n	800f184 <USB_EPStartXfer+0x3e4>
 800f10e:	bf00      	nop
 800f110:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	699a      	ldr	r2, [r3, #24]
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	68db      	ldr	r3, [r3, #12]
 800f11c:	4413      	add	r3, r2
 800f11e:	1e5a      	subs	r2, r3, #1
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	68db      	ldr	r3, [r3, #12]
 800f124:	fbb2 f3f3 	udiv	r3, r2, r3
 800f128:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	68db      	ldr	r3, [r3, #12]
 800f12e:	8afa      	ldrh	r2, [r7, #22]
 800f130:	fb03 f202 	mul.w	r2, r3, r2
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f138:	69bb      	ldr	r3, [r7, #24]
 800f13a:	015a      	lsls	r2, r3, #5
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	4413      	add	r3, r2
 800f140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f144:	691a      	ldr	r2, [r3, #16]
 800f146:	8afb      	ldrh	r3, [r7, #22]
 800f148:	04d9      	lsls	r1, r3, #19
 800f14a:	4b38      	ldr	r3, [pc, #224]	; (800f22c <USB_EPStartXfer+0x48c>)
 800f14c:	400b      	ands	r3, r1
 800f14e:	69b9      	ldr	r1, [r7, #24]
 800f150:	0148      	lsls	r0, r1, #5
 800f152:	69f9      	ldr	r1, [r7, #28]
 800f154:	4401      	add	r1, r0
 800f156:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f15a:	4313      	orrs	r3, r2
 800f15c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f15e:	69bb      	ldr	r3, [r7, #24]
 800f160:	015a      	lsls	r2, r3, #5
 800f162:	69fb      	ldr	r3, [r7, #28]
 800f164:	4413      	add	r3, r2
 800f166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f16a:	691a      	ldr	r2, [r3, #16]
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	69db      	ldr	r3, [r3, #28]
 800f170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f174:	69b9      	ldr	r1, [r7, #24]
 800f176:	0148      	lsls	r0, r1, #5
 800f178:	69f9      	ldr	r1, [r7, #28]
 800f17a:	4401      	add	r1, r0
 800f17c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f180:	4313      	orrs	r3, r2
 800f182:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f184:	79fb      	ldrb	r3, [r7, #7]
 800f186:	2b01      	cmp	r3, #1
 800f188:	d10d      	bne.n	800f1a6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	691b      	ldr	r3, [r3, #16]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d009      	beq.n	800f1a6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	6919      	ldr	r1, [r3, #16]
 800f196:	69bb      	ldr	r3, [r7, #24]
 800f198:	015a      	lsls	r2, r3, #5
 800f19a:	69fb      	ldr	r3, [r7, #28]
 800f19c:	4413      	add	r3, r2
 800f19e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1a2:	460a      	mov	r2, r1
 800f1a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	791b      	ldrb	r3, [r3, #4]
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d128      	bne.n	800f200 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f1ae:	69fb      	ldr	r3, [r7, #28]
 800f1b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1b4:	689b      	ldr	r3, [r3, #8]
 800f1b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d110      	bne.n	800f1e0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f1be:	69bb      	ldr	r3, [r7, #24]
 800f1c0:	015a      	lsls	r2, r3, #5
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	4413      	add	r3, r2
 800f1c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	69ba      	ldr	r2, [r7, #24]
 800f1ce:	0151      	lsls	r1, r2, #5
 800f1d0:	69fa      	ldr	r2, [r7, #28]
 800f1d2:	440a      	add	r2, r1
 800f1d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f1dc:	6013      	str	r3, [r2, #0]
 800f1de:	e00f      	b.n	800f200 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f1e0:	69bb      	ldr	r3, [r7, #24]
 800f1e2:	015a      	lsls	r2, r3, #5
 800f1e4:	69fb      	ldr	r3, [r7, #28]
 800f1e6:	4413      	add	r3, r2
 800f1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	69ba      	ldr	r2, [r7, #24]
 800f1f0:	0151      	lsls	r1, r2, #5
 800f1f2:	69fa      	ldr	r2, [r7, #28]
 800f1f4:	440a      	add	r2, r1
 800f1f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f1fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f200:	69bb      	ldr	r3, [r7, #24]
 800f202:	015a      	lsls	r2, r3, #5
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	4413      	add	r3, r2
 800f208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	69ba      	ldr	r2, [r7, #24]
 800f210:	0151      	lsls	r1, r2, #5
 800f212:	69fa      	ldr	r2, [r7, #28]
 800f214:	440a      	add	r2, r1
 800f216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f21a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f21e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f220:	2300      	movs	r3, #0
}
 800f222:	4618      	mov	r0, r3
 800f224:	3720      	adds	r7, #32
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	1ff80000 	.word	0x1ff80000

0800f230 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f230:	b480      	push	{r7}
 800f232:	b087      	sub	sp, #28
 800f234:	af00      	add	r7, sp, #0
 800f236:	60f8      	str	r0, [r7, #12]
 800f238:	60b9      	str	r1, [r7, #8]
 800f23a:	4613      	mov	r3, r2
 800f23c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	785b      	ldrb	r3, [r3, #1]
 800f24c:	2b01      	cmp	r3, #1
 800f24e:	f040 80ce 	bne.w	800f3ee <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	699b      	ldr	r3, [r3, #24]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d132      	bne.n	800f2c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	015a      	lsls	r2, r3, #5
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	4413      	add	r3, r2
 800f262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f266:	691b      	ldr	r3, [r3, #16]
 800f268:	693a      	ldr	r2, [r7, #16]
 800f26a:	0151      	lsls	r1, r2, #5
 800f26c:	697a      	ldr	r2, [r7, #20]
 800f26e:	440a      	add	r2, r1
 800f270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f274:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f278:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f27c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	015a      	lsls	r2, r3, #5
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	4413      	add	r3, r2
 800f286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f28a:	691b      	ldr	r3, [r3, #16]
 800f28c:	693a      	ldr	r2, [r7, #16]
 800f28e:	0151      	lsls	r1, r2, #5
 800f290:	697a      	ldr	r2, [r7, #20]
 800f292:	440a      	add	r2, r1
 800f294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f298:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f29c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	015a      	lsls	r2, r3, #5
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	4413      	add	r3, r2
 800f2a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2aa:	691b      	ldr	r3, [r3, #16]
 800f2ac:	693a      	ldr	r2, [r7, #16]
 800f2ae:	0151      	lsls	r1, r2, #5
 800f2b0:	697a      	ldr	r2, [r7, #20]
 800f2b2:	440a      	add	r2, r1
 800f2b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2b8:	0cdb      	lsrs	r3, r3, #19
 800f2ba:	04db      	lsls	r3, r3, #19
 800f2bc:	6113      	str	r3, [r2, #16]
 800f2be:	e04e      	b.n	800f35e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f2c0:	693b      	ldr	r3, [r7, #16]
 800f2c2:	015a      	lsls	r2, r3, #5
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	4413      	add	r3, r2
 800f2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2cc:	691b      	ldr	r3, [r3, #16]
 800f2ce:	693a      	ldr	r2, [r7, #16]
 800f2d0:	0151      	lsls	r1, r2, #5
 800f2d2:	697a      	ldr	r2, [r7, #20]
 800f2d4:	440a      	add	r2, r1
 800f2d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2da:	0cdb      	lsrs	r3, r3, #19
 800f2dc:	04db      	lsls	r3, r3, #19
 800f2de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	015a      	lsls	r2, r3, #5
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	4413      	add	r3, r2
 800f2e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2ec:	691b      	ldr	r3, [r3, #16]
 800f2ee:	693a      	ldr	r2, [r7, #16]
 800f2f0:	0151      	lsls	r1, r2, #5
 800f2f2:	697a      	ldr	r2, [r7, #20]
 800f2f4:	440a      	add	r2, r1
 800f2f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f2fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f302:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	699a      	ldr	r2, [r3, #24]
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	68db      	ldr	r3, [r3, #12]
 800f30c:	429a      	cmp	r2, r3
 800f30e:	d903      	bls.n	800f318 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	68da      	ldr	r2, [r3, #12]
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	015a      	lsls	r2, r3, #5
 800f31c:	697b      	ldr	r3, [r7, #20]
 800f31e:	4413      	add	r3, r2
 800f320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f324:	691b      	ldr	r3, [r3, #16]
 800f326:	693a      	ldr	r2, [r7, #16]
 800f328:	0151      	lsls	r1, r2, #5
 800f32a:	697a      	ldr	r2, [r7, #20]
 800f32c:	440a      	add	r2, r1
 800f32e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f332:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f336:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	015a      	lsls	r2, r3, #5
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	4413      	add	r3, r2
 800f340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f344:	691a      	ldr	r2, [r3, #16]
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	699b      	ldr	r3, [r3, #24]
 800f34a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f34e:	6939      	ldr	r1, [r7, #16]
 800f350:	0148      	lsls	r0, r1, #5
 800f352:	6979      	ldr	r1, [r7, #20]
 800f354:	4401      	add	r1, r0
 800f356:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f35a:	4313      	orrs	r3, r2
 800f35c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f35e:	79fb      	ldrb	r3, [r7, #7]
 800f360:	2b01      	cmp	r3, #1
 800f362:	d11e      	bne.n	800f3a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	695b      	ldr	r3, [r3, #20]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d009      	beq.n	800f380 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	015a      	lsls	r2, r3, #5
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	4413      	add	r3, r2
 800f374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f378:	461a      	mov	r2, r3
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	695b      	ldr	r3, [r3, #20]
 800f37e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	015a      	lsls	r2, r3, #5
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	4413      	add	r3, r2
 800f388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	693a      	ldr	r2, [r7, #16]
 800f390:	0151      	lsls	r1, r2, #5
 800f392:	697a      	ldr	r2, [r7, #20]
 800f394:	440a      	add	r2, r1
 800f396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f39a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f39e:	6013      	str	r3, [r2, #0]
 800f3a0:	e097      	b.n	800f4d2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	015a      	lsls	r2, r3, #5
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	4413      	add	r3, r2
 800f3aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	693a      	ldr	r2, [r7, #16]
 800f3b2:	0151      	lsls	r1, r2, #5
 800f3b4:	697a      	ldr	r2, [r7, #20]
 800f3b6:	440a      	add	r2, r1
 800f3b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f3c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	699b      	ldr	r3, [r3, #24]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	f000 8083 	beq.w	800f4d2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	f003 030f 	and.w	r3, r3, #15
 800f3dc:	2101      	movs	r1, #1
 800f3de:	fa01 f303 	lsl.w	r3, r1, r3
 800f3e2:	6979      	ldr	r1, [r7, #20]
 800f3e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f3e8:	4313      	orrs	r3, r2
 800f3ea:	634b      	str	r3, [r1, #52]	; 0x34
 800f3ec:	e071      	b.n	800f4d2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f3ee:	693b      	ldr	r3, [r7, #16]
 800f3f0:	015a      	lsls	r2, r3, #5
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	4413      	add	r3, r2
 800f3f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3fa:	691b      	ldr	r3, [r3, #16]
 800f3fc:	693a      	ldr	r2, [r7, #16]
 800f3fe:	0151      	lsls	r1, r2, #5
 800f400:	697a      	ldr	r2, [r7, #20]
 800f402:	440a      	add	r2, r1
 800f404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f408:	0cdb      	lsrs	r3, r3, #19
 800f40a:	04db      	lsls	r3, r3, #19
 800f40c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f40e:	693b      	ldr	r3, [r7, #16]
 800f410:	015a      	lsls	r2, r3, #5
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	4413      	add	r3, r2
 800f416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f41a:	691b      	ldr	r3, [r3, #16]
 800f41c:	693a      	ldr	r2, [r7, #16]
 800f41e:	0151      	lsls	r1, r2, #5
 800f420:	697a      	ldr	r2, [r7, #20]
 800f422:	440a      	add	r2, r1
 800f424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f428:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f42c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f430:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	699b      	ldr	r3, [r3, #24]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d003      	beq.n	800f442 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	68da      	ldr	r2, [r3, #12]
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	68da      	ldr	r2, [r3, #12]
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f44a:	693b      	ldr	r3, [r7, #16]
 800f44c:	015a      	lsls	r2, r3, #5
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	4413      	add	r3, r2
 800f452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f456:	691b      	ldr	r3, [r3, #16]
 800f458:	693a      	ldr	r2, [r7, #16]
 800f45a:	0151      	lsls	r1, r2, #5
 800f45c:	697a      	ldr	r2, [r7, #20]
 800f45e:	440a      	add	r2, r1
 800f460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f464:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f468:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	015a      	lsls	r2, r3, #5
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	4413      	add	r3, r2
 800f472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f476:	691a      	ldr	r2, [r3, #16]
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	69db      	ldr	r3, [r3, #28]
 800f47c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f480:	6939      	ldr	r1, [r7, #16]
 800f482:	0148      	lsls	r0, r1, #5
 800f484:	6979      	ldr	r1, [r7, #20]
 800f486:	4401      	add	r1, r0
 800f488:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f48c:	4313      	orrs	r3, r2
 800f48e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f490:	79fb      	ldrb	r3, [r7, #7]
 800f492:	2b01      	cmp	r3, #1
 800f494:	d10d      	bne.n	800f4b2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	691b      	ldr	r3, [r3, #16]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d009      	beq.n	800f4b2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	6919      	ldr	r1, [r3, #16]
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	015a      	lsls	r2, r3, #5
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	4413      	add	r3, r2
 800f4aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4ae:	460a      	mov	r2, r1
 800f4b0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	015a      	lsls	r2, r3, #5
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	4413      	add	r3, r2
 800f4ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	693a      	ldr	r2, [r7, #16]
 800f4c2:	0151      	lsls	r1, r2, #5
 800f4c4:	697a      	ldr	r2, [r7, #20]
 800f4c6:	440a      	add	r2, r1
 800f4c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f4d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f4d2:	2300      	movs	r3, #0
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	371c      	adds	r7, #28
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4de:	4770      	bx	lr

0800f4e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f4e0:	b480      	push	{r7}
 800f4e2:	b087      	sub	sp, #28
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
 800f4e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	785b      	ldrb	r3, [r3, #1]
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d14a      	bne.n	800f594 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	781b      	ldrb	r3, [r3, #0]
 800f502:	015a      	lsls	r2, r3, #5
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	4413      	add	r3, r2
 800f508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f516:	f040 8086 	bne.w	800f626 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	015a      	lsls	r2, r3, #5
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	4413      	add	r3, r2
 800f524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	683a      	ldr	r2, [r7, #0]
 800f52c:	7812      	ldrb	r2, [r2, #0]
 800f52e:	0151      	lsls	r1, r2, #5
 800f530:	693a      	ldr	r2, [r7, #16]
 800f532:	440a      	add	r2, r1
 800f534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f538:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f53c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	781b      	ldrb	r3, [r3, #0]
 800f542:	015a      	lsls	r2, r3, #5
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	4413      	add	r3, r2
 800f548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	683a      	ldr	r2, [r7, #0]
 800f550:	7812      	ldrb	r2, [r2, #0]
 800f552:	0151      	lsls	r1, r2, #5
 800f554:	693a      	ldr	r2, [r7, #16]
 800f556:	440a      	add	r2, r1
 800f558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f55c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f560:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	3301      	adds	r3, #1
 800f566:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	f242 7210 	movw	r2, #10000	; 0x2710
 800f56e:	4293      	cmp	r3, r2
 800f570:	d902      	bls.n	800f578 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f572:	2301      	movs	r3, #1
 800f574:	75fb      	strb	r3, [r7, #23]
          break;
 800f576:	e056      	b.n	800f626 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	015a      	lsls	r2, r3, #5
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	4413      	add	r3, r2
 800f582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f58c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f590:	d0e7      	beq.n	800f562 <USB_EPStopXfer+0x82>
 800f592:	e048      	b.n	800f626 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	781b      	ldrb	r3, [r3, #0]
 800f598:	015a      	lsls	r2, r3, #5
 800f59a:	693b      	ldr	r3, [r7, #16]
 800f59c:	4413      	add	r3, r2
 800f59e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f5a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f5ac:	d13b      	bne.n	800f626 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	015a      	lsls	r2, r3, #5
 800f5b4:	693b      	ldr	r3, [r7, #16]
 800f5b6:	4413      	add	r3, r2
 800f5b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	683a      	ldr	r2, [r7, #0]
 800f5c0:	7812      	ldrb	r2, [r2, #0]
 800f5c2:	0151      	lsls	r1, r2, #5
 800f5c4:	693a      	ldr	r2, [r7, #16]
 800f5c6:	440a      	add	r2, r1
 800f5c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f5d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	015a      	lsls	r2, r3, #5
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	4413      	add	r3, r2
 800f5dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	683a      	ldr	r2, [r7, #0]
 800f5e4:	7812      	ldrb	r2, [r2, #0]
 800f5e6:	0151      	lsls	r1, r2, #5
 800f5e8:	693a      	ldr	r2, [r7, #16]
 800f5ea:	440a      	add	r2, r1
 800f5ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f5f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	f242 7210 	movw	r2, #10000	; 0x2710
 800f602:	4293      	cmp	r3, r2
 800f604:	d902      	bls.n	800f60c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f606:	2301      	movs	r3, #1
 800f608:	75fb      	strb	r3, [r7, #23]
          break;
 800f60a:	e00c      	b.n	800f626 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	015a      	lsls	r2, r3, #5
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	4413      	add	r3, r2
 800f616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f620:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f624:	d0e7      	beq.n	800f5f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f626:	7dfb      	ldrb	r3, [r7, #23]
}
 800f628:	4618      	mov	r0, r3
 800f62a:	371c      	adds	r7, #28
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr

0800f634 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f634:	b480      	push	{r7}
 800f636:	b089      	sub	sp, #36	; 0x24
 800f638:	af00      	add	r7, sp, #0
 800f63a:	60f8      	str	r0, [r7, #12]
 800f63c:	60b9      	str	r1, [r7, #8]
 800f63e:	4611      	mov	r1, r2
 800f640:	461a      	mov	r2, r3
 800f642:	460b      	mov	r3, r1
 800f644:	71fb      	strb	r3, [r7, #7]
 800f646:	4613      	mov	r3, r2
 800f648:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f652:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f656:	2b00      	cmp	r3, #0
 800f658:	d123      	bne.n	800f6a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f65a:	88bb      	ldrh	r3, [r7, #4]
 800f65c:	3303      	adds	r3, #3
 800f65e:	089b      	lsrs	r3, r3, #2
 800f660:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f662:	2300      	movs	r3, #0
 800f664:	61bb      	str	r3, [r7, #24]
 800f666:	e018      	b.n	800f69a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f668:	79fb      	ldrb	r3, [r7, #7]
 800f66a:	031a      	lsls	r2, r3, #12
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	4413      	add	r3, r2
 800f670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f674:	461a      	mov	r2, r3
 800f676:	69fb      	ldr	r3, [r7, #28]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	3301      	adds	r3, #1
 800f680:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f682:	69fb      	ldr	r3, [r7, #28]
 800f684:	3301      	adds	r3, #1
 800f686:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	3301      	adds	r3, #1
 800f68c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f68e:	69fb      	ldr	r3, [r7, #28]
 800f690:	3301      	adds	r3, #1
 800f692:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f694:	69bb      	ldr	r3, [r7, #24]
 800f696:	3301      	adds	r3, #1
 800f698:	61bb      	str	r3, [r7, #24]
 800f69a:	69ba      	ldr	r2, [r7, #24]
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d3e2      	bcc.n	800f668 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f6a2:	2300      	movs	r3, #0
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3724      	adds	r7, #36	; 0x24
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr

0800f6b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	b08b      	sub	sp, #44	; 0x2c
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	60f8      	str	r0, [r7, #12]
 800f6b8:	60b9      	str	r1, [r7, #8]
 800f6ba:	4613      	mov	r3, r2
 800f6bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f6c6:	88fb      	ldrh	r3, [r7, #6]
 800f6c8:	089b      	lsrs	r3, r3, #2
 800f6ca:	b29b      	uxth	r3, r3
 800f6cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f6ce:	88fb      	ldrh	r3, [r7, #6]
 800f6d0:	f003 0303 	and.w	r3, r3, #3
 800f6d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	623b      	str	r3, [r7, #32]
 800f6da:	e014      	b.n	800f706 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6e2:	681a      	ldr	r2, [r3, #0]
 800f6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e6:	601a      	str	r2, [r3, #0]
    pDest++;
 800f6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f6:	3301      	adds	r3, #1
 800f6f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6fc:	3301      	adds	r3, #1
 800f6fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f700:	6a3b      	ldr	r3, [r7, #32]
 800f702:	3301      	adds	r3, #1
 800f704:	623b      	str	r3, [r7, #32]
 800f706:	6a3a      	ldr	r2, [r7, #32]
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d3e6      	bcc.n	800f6dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f70e:	8bfb      	ldrh	r3, [r7, #30]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d01e      	beq.n	800f752 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f714:	2300      	movs	r3, #0
 800f716:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f718:	69bb      	ldr	r3, [r7, #24]
 800f71a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f71e:	461a      	mov	r2, r3
 800f720:	f107 0310 	add.w	r3, r7, #16
 800f724:	6812      	ldr	r2, [r2, #0]
 800f726:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f728:	693a      	ldr	r2, [r7, #16]
 800f72a:	6a3b      	ldr	r3, [r7, #32]
 800f72c:	b2db      	uxtb	r3, r3
 800f72e:	00db      	lsls	r3, r3, #3
 800f730:	fa22 f303 	lsr.w	r3, r2, r3
 800f734:	b2da      	uxtb	r2, r3
 800f736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f738:	701a      	strb	r2, [r3, #0]
      i++;
 800f73a:	6a3b      	ldr	r3, [r7, #32]
 800f73c:	3301      	adds	r3, #1
 800f73e:	623b      	str	r3, [r7, #32]
      pDest++;
 800f740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f742:	3301      	adds	r3, #1
 800f744:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f746:	8bfb      	ldrh	r3, [r7, #30]
 800f748:	3b01      	subs	r3, #1
 800f74a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f74c:	8bfb      	ldrh	r3, [r7, #30]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d1ea      	bne.n	800f728 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f754:	4618      	mov	r0, r3
 800f756:	372c      	adds	r7, #44	; 0x2c
 800f758:	46bd      	mov	sp, r7
 800f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75e:	4770      	bx	lr

0800f760 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f760:	b480      	push	{r7}
 800f762:	b085      	sub	sp, #20
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	785b      	ldrb	r3, [r3, #1]
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d12c      	bne.n	800f7d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	015a      	lsls	r2, r3, #5
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	4413      	add	r3, r2
 800f784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	db12      	blt.n	800f7b4 <USB_EPSetStall+0x54>
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d00f      	beq.n	800f7b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	015a      	lsls	r2, r3, #5
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	4413      	add	r3, r2
 800f79c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	68ba      	ldr	r2, [r7, #8]
 800f7a4:	0151      	lsls	r1, r2, #5
 800f7a6:	68fa      	ldr	r2, [r7, #12]
 800f7a8:	440a      	add	r2, r1
 800f7aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f7b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	015a      	lsls	r2, r3, #5
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	4413      	add	r3, r2
 800f7bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	68ba      	ldr	r2, [r7, #8]
 800f7c4:	0151      	lsls	r1, r2, #5
 800f7c6:	68fa      	ldr	r2, [r7, #12]
 800f7c8:	440a      	add	r2, r1
 800f7ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f7d2:	6013      	str	r3, [r2, #0]
 800f7d4:	e02b      	b.n	800f82e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	015a      	lsls	r2, r3, #5
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	4413      	add	r3, r2
 800f7de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	db12      	blt.n	800f80e <USB_EPSetStall+0xae>
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d00f      	beq.n	800f80e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	015a      	lsls	r2, r3, #5
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	4413      	add	r3, r2
 800f7f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	68ba      	ldr	r2, [r7, #8]
 800f7fe:	0151      	lsls	r1, r2, #5
 800f800:	68fa      	ldr	r2, [r7, #12]
 800f802:	440a      	add	r2, r1
 800f804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f808:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f80c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	015a      	lsls	r2, r3, #5
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	4413      	add	r3, r2
 800f816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	68ba      	ldr	r2, [r7, #8]
 800f81e:	0151      	lsls	r1, r2, #5
 800f820:	68fa      	ldr	r2, [r7, #12]
 800f822:	440a      	add	r2, r1
 800f824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f828:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f82c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f82e:	2300      	movs	r3, #0
}
 800f830:	4618      	mov	r0, r3
 800f832:	3714      	adds	r7, #20
 800f834:	46bd      	mov	sp, r7
 800f836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83a:	4770      	bx	lr

0800f83c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f83c:	b480      	push	{r7}
 800f83e:	b085      	sub	sp, #20
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	781b      	ldrb	r3, [r3, #0]
 800f84e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	785b      	ldrb	r3, [r3, #1]
 800f854:	2b01      	cmp	r3, #1
 800f856:	d128      	bne.n	800f8aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	015a      	lsls	r2, r3, #5
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	4413      	add	r3, r2
 800f860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	68ba      	ldr	r2, [r7, #8]
 800f868:	0151      	lsls	r1, r2, #5
 800f86a:	68fa      	ldr	r2, [r7, #12]
 800f86c:	440a      	add	r2, r1
 800f86e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f872:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f876:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	791b      	ldrb	r3, [r3, #4]
 800f87c:	2b03      	cmp	r3, #3
 800f87e:	d003      	beq.n	800f888 <USB_EPClearStall+0x4c>
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	791b      	ldrb	r3, [r3, #4]
 800f884:	2b02      	cmp	r3, #2
 800f886:	d138      	bne.n	800f8fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	015a      	lsls	r2, r3, #5
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	4413      	add	r3, r2
 800f890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	68ba      	ldr	r2, [r7, #8]
 800f898:	0151      	lsls	r1, r2, #5
 800f89a:	68fa      	ldr	r2, [r7, #12]
 800f89c:	440a      	add	r2, r1
 800f89e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f8a6:	6013      	str	r3, [r2, #0]
 800f8a8:	e027      	b.n	800f8fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	015a      	lsls	r2, r3, #5
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	4413      	add	r3, r2
 800f8b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	68ba      	ldr	r2, [r7, #8]
 800f8ba:	0151      	lsls	r1, r2, #5
 800f8bc:	68fa      	ldr	r2, [r7, #12]
 800f8be:	440a      	add	r2, r1
 800f8c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f8c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	791b      	ldrb	r3, [r3, #4]
 800f8ce:	2b03      	cmp	r3, #3
 800f8d0:	d003      	beq.n	800f8da <USB_EPClearStall+0x9e>
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	791b      	ldrb	r3, [r3, #4]
 800f8d6:	2b02      	cmp	r3, #2
 800f8d8:	d10f      	bne.n	800f8fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	015a      	lsls	r2, r3, #5
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	4413      	add	r3, r2
 800f8e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	68ba      	ldr	r2, [r7, #8]
 800f8ea:	0151      	lsls	r1, r2, #5
 800f8ec:	68fa      	ldr	r2, [r7, #12]
 800f8ee:	440a      	add	r2, r1
 800f8f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f8f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f8fa:	2300      	movs	r3, #0
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3714      	adds	r7, #20
 800f900:	46bd      	mov	sp, r7
 800f902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f906:	4770      	bx	lr

0800f908 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f908:	b480      	push	{r7}
 800f90a:	b085      	sub	sp, #20
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	460b      	mov	r3, r1
 800f912:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	68fa      	ldr	r2, [r7, #12]
 800f922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f926:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f92a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f932:	681a      	ldr	r2, [r3, #0]
 800f934:	78fb      	ldrb	r3, [r7, #3]
 800f936:	011b      	lsls	r3, r3, #4
 800f938:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f93c:	68f9      	ldr	r1, [r7, #12]
 800f93e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f942:	4313      	orrs	r3, r2
 800f944:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f946:	2300      	movs	r3, #0
}
 800f948:	4618      	mov	r0, r3
 800f94a:	3714      	adds	r7, #20
 800f94c:	46bd      	mov	sp, r7
 800f94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f952:	4770      	bx	lr

0800f954 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f954:	b480      	push	{r7}
 800f956:	b085      	sub	sp, #20
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	695b      	ldr	r3, [r3, #20]
 800f960:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	699b      	ldr	r3, [r3, #24]
 800f966:	68fa      	ldr	r2, [r7, #12]
 800f968:	4013      	ands	r3, r2
 800f96a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f96c:	68fb      	ldr	r3, [r7, #12]
}
 800f96e:	4618      	mov	r0, r3
 800f970:	3714      	adds	r7, #20
 800f972:	46bd      	mov	sp, r7
 800f974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f978:	4770      	bx	lr

0800f97a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f97a:	b480      	push	{r7}
 800f97c:	b085      	sub	sp, #20
 800f97e:	af00      	add	r7, sp, #0
 800f980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f98c:	699b      	ldr	r3, [r3, #24]
 800f98e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f996:	69db      	ldr	r3, [r3, #28]
 800f998:	68ba      	ldr	r2, [r7, #8]
 800f99a:	4013      	ands	r3, r2
 800f99c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	0c1b      	lsrs	r3, r3, #16
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3714      	adds	r7, #20
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ac:	4770      	bx	lr

0800f9ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f9ae:	b480      	push	{r7}
 800f9b0:	b085      	sub	sp, #20
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9c0:	699b      	ldr	r3, [r3, #24]
 800f9c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9ca:	69db      	ldr	r3, [r3, #28]
 800f9cc:	68ba      	ldr	r2, [r7, #8]
 800f9ce:	4013      	ands	r3, r2
 800f9d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	b29b      	uxth	r3, r3
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3714      	adds	r7, #20
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e0:	4770      	bx	lr

0800f9e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f9e2:	b480      	push	{r7}
 800f9e4:	b085      	sub	sp, #20
 800f9e6:	af00      	add	r7, sp, #0
 800f9e8:	6078      	str	r0, [r7, #4]
 800f9ea:	460b      	mov	r3, r1
 800f9ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f9f2:	78fb      	ldrb	r3, [r7, #3]
 800f9f4:	015a      	lsls	r2, r3, #5
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	4413      	add	r3, r2
 800f9fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9fe:	689b      	ldr	r3, [r3, #8]
 800fa00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa08:	695b      	ldr	r3, [r3, #20]
 800fa0a:	68ba      	ldr	r2, [r7, #8]
 800fa0c:	4013      	ands	r3, r2
 800fa0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fa10:	68bb      	ldr	r3, [r7, #8]
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3714      	adds	r7, #20
 800fa16:	46bd      	mov	sp, r7
 800fa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1c:	4770      	bx	lr

0800fa1e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fa1e:	b480      	push	{r7}
 800fa20:	b087      	sub	sp, #28
 800fa22:	af00      	add	r7, sp, #0
 800fa24:	6078      	str	r0, [r7, #4]
 800fa26:	460b      	mov	r3, r1
 800fa28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa34:	691b      	ldr	r3, [r3, #16]
 800fa36:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa40:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fa42:	78fb      	ldrb	r3, [r7, #3]
 800fa44:	f003 030f 	and.w	r3, r3, #15
 800fa48:	68fa      	ldr	r2, [r7, #12]
 800fa4a:	fa22 f303 	lsr.w	r3, r2, r3
 800fa4e:	01db      	lsls	r3, r3, #7
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	693a      	ldr	r2, [r7, #16]
 800fa54:	4313      	orrs	r3, r2
 800fa56:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fa58:	78fb      	ldrb	r3, [r7, #3]
 800fa5a:	015a      	lsls	r2, r3, #5
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	4413      	add	r3, r2
 800fa60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa64:	689b      	ldr	r3, [r3, #8]
 800fa66:	693a      	ldr	r2, [r7, #16]
 800fa68:	4013      	ands	r3, r2
 800fa6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fa6c:	68bb      	ldr	r3, [r7, #8]
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	371c      	adds	r7, #28
 800fa72:	46bd      	mov	sp, r7
 800fa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa78:	4770      	bx	lr

0800fa7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fa7a:	b480      	push	{r7}
 800fa7c:	b083      	sub	sp, #12
 800fa7e:	af00      	add	r7, sp, #0
 800fa80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	695b      	ldr	r3, [r3, #20]
 800fa86:	f003 0301 	and.w	r3, r3, #1
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	370c      	adds	r7, #12
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa94:	4770      	bx	lr

0800fa96 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800fa96:	b480      	push	{r7}
 800fa98:	b085      	sub	sp, #20
 800fa9a:	af00      	add	r7, sp, #0
 800fa9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	68fa      	ldr	r2, [r7, #12]
 800faac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fab0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800fab4:	f023 0307 	bic.w	r3, r3, #7
 800fab8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	68fa      	ldr	r2, [r7, #12]
 800fac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800facc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800face:	2300      	movs	r3, #0
}
 800fad0:	4618      	mov	r0, r3
 800fad2:	3714      	adds	r7, #20
 800fad4:	46bd      	mov	sp, r7
 800fad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fada:	4770      	bx	lr

0800fadc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800fadc:	b480      	push	{r7}
 800fade:	b087      	sub	sp, #28
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	460b      	mov	r3, r1
 800fae6:	607a      	str	r2, [r7, #4]
 800fae8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	333c      	adds	r3, #60	; 0x3c
 800faf2:	3304      	adds	r3, #4
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	4a26      	ldr	r2, [pc, #152]	; (800fb94 <USB_EP0_OutStart+0xb8>)
 800fafc:	4293      	cmp	r3, r2
 800fafe:	d90a      	bls.n	800fb16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fb0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fb10:	d101      	bne.n	800fb16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fb12:	2300      	movs	r3, #0
 800fb14:	e037      	b.n	800fb86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	2300      	movs	r3, #0
 800fb20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb28:	691b      	ldr	r3, [r3, #16]
 800fb2a:	697a      	ldr	r2, [r7, #20]
 800fb2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fb34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb3c:	691b      	ldr	r3, [r3, #16]
 800fb3e:	697a      	ldr	r2, [r7, #20]
 800fb40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb44:	f043 0318 	orr.w	r3, r3, #24
 800fb48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb50:	691b      	ldr	r3, [r3, #16]
 800fb52:	697a      	ldr	r2, [r7, #20]
 800fb54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800fb5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fb5e:	7afb      	ldrb	r3, [r7, #11]
 800fb60:	2b01      	cmp	r3, #1
 800fb62:	d10f      	bne.n	800fb84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb6a:	461a      	mov	r2, r3
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	697a      	ldr	r2, [r7, #20]
 800fb7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb7e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800fb82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fb84:	2300      	movs	r3, #0
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	371c      	adds	r7, #28
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb90:	4770      	bx	lr
 800fb92:	bf00      	nop
 800fb94:	4f54300a 	.word	0x4f54300a

0800fb98 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b083      	sub	sp, #12
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fba0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	370c      	adds	r7, #12
 800fba6:	46bd      	mov	sp, r7
 800fba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbac:	4770      	bx	lr

0800fbae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fbae:	b580      	push	{r7, lr}
 800fbb0:	b084      	sub	sp, #16
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	6078      	str	r0, [r7, #4]
 800fbb6:	460b      	mov	r3, r1
 800fbb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d009      	beq.n	800fbdc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	78fa      	ldrb	r2, [r7, #3]
 800fbd2:	4611      	mov	r1, r2
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	4798      	blx	r3
 800fbd8:	4603      	mov	r3, r0
 800fbda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fbdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3710      	adds	r7, #16
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}

0800fbe6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fbe6:	b580      	push	{r7, lr}
 800fbe8:	b084      	sub	sp, #16
 800fbea:	af00      	add	r7, sp, #0
 800fbec:	6078      	str	r0, [r7, #4]
 800fbee:	460b      	mov	r3, r1
 800fbf0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbfc:	685b      	ldr	r3, [r3, #4]
 800fbfe:	78fa      	ldrb	r2, [r7, #3]
 800fc00:	4611      	mov	r1, r2
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	4798      	blx	r3
 800fc06:	4603      	mov	r3, r0
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d001      	beq.n	800fc10 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800fc0c:	2303      	movs	r3, #3
 800fc0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fc10:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3710      	adds	r7, #16
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}

0800fc1a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fc1a:	b580      	push	{r7, lr}
 800fc1c:	b084      	sub	sp, #16
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
 800fc22:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fc2a:	6839      	ldr	r1, [r7, #0]
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f001 f8b2 	bl	8010d96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2201      	movs	r2, #1
 800fc36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800fc40:	461a      	mov	r2, r3
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fc4e:	f003 031f 	and.w	r3, r3, #31
 800fc52:	2b02      	cmp	r3, #2
 800fc54:	d01a      	beq.n	800fc8c <USBD_LL_SetupStage+0x72>
 800fc56:	2b02      	cmp	r3, #2
 800fc58:	d822      	bhi.n	800fca0 <USBD_LL_SetupStage+0x86>
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d002      	beq.n	800fc64 <USBD_LL_SetupStage+0x4a>
 800fc5e:	2b01      	cmp	r3, #1
 800fc60:	d00a      	beq.n	800fc78 <USBD_LL_SetupStage+0x5e>
 800fc62:	e01d      	b.n	800fca0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f000 fb09 	bl	8010284 <USBD_StdDevReq>
 800fc72:	4603      	mov	r3, r0
 800fc74:	73fb      	strb	r3, [r7, #15]
      break;
 800fc76:	e020      	b.n	800fcba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fc7e:	4619      	mov	r1, r3
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f000 fb71 	bl	8010368 <USBD_StdItfReq>
 800fc86:	4603      	mov	r3, r0
 800fc88:	73fb      	strb	r3, [r7, #15]
      break;
 800fc8a:	e016      	b.n	800fcba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fc92:	4619      	mov	r1, r3
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f000 fbd3 	bl	8010440 <USBD_StdEPReq>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	73fb      	strb	r3, [r7, #15]
      break;
 800fc9e:	e00c      	b.n	800fcba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fca6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fcaa:	b2db      	uxtb	r3, r3
 800fcac:	4619      	mov	r1, r3
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f002 fdd4 	bl	801285c <USBD_LL_StallEP>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	73fb      	strb	r3, [r7, #15]
      break;
 800fcb8:	bf00      	nop
  }

  return ret;
 800fcba:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3710      	adds	r7, #16
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b086      	sub	sp, #24
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	460b      	mov	r3, r1
 800fcce:	607a      	str	r2, [r7, #4]
 800fcd0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800fcd6:	7afb      	ldrb	r3, [r7, #11]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d16e      	bne.n	800fdba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800fce2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fcea:	2b03      	cmp	r3, #3
 800fcec:	f040 8098 	bne.w	800fe20 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	689a      	ldr	r2, [r3, #8]
 800fcf4:	693b      	ldr	r3, [r7, #16]
 800fcf6:	68db      	ldr	r3, [r3, #12]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d913      	bls.n	800fd24 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800fcfc:	693b      	ldr	r3, [r7, #16]
 800fcfe:	689a      	ldr	r2, [r3, #8]
 800fd00:	693b      	ldr	r3, [r7, #16]
 800fd02:	68db      	ldr	r3, [r3, #12]
 800fd04:	1ad2      	subs	r2, r2, r3
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fd0a:	693b      	ldr	r3, [r7, #16]
 800fd0c:	68da      	ldr	r2, [r3, #12]
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	689b      	ldr	r3, [r3, #8]
 800fd12:	4293      	cmp	r3, r2
 800fd14:	bf28      	it	cs
 800fd16:	4613      	movcs	r3, r2
 800fd18:	461a      	mov	r2, r3
 800fd1a:	6879      	ldr	r1, [r7, #4]
 800fd1c:	68f8      	ldr	r0, [r7, #12]
 800fd1e:	f001 f8b1 	bl	8010e84 <USBD_CtlContinueRx>
 800fd22:	e07d      	b.n	800fe20 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fd2a:	f003 031f 	and.w	r3, r3, #31
 800fd2e:	2b02      	cmp	r3, #2
 800fd30:	d014      	beq.n	800fd5c <USBD_LL_DataOutStage+0x98>
 800fd32:	2b02      	cmp	r3, #2
 800fd34:	d81d      	bhi.n	800fd72 <USBD_LL_DataOutStage+0xae>
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d002      	beq.n	800fd40 <USBD_LL_DataOutStage+0x7c>
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	d003      	beq.n	800fd46 <USBD_LL_DataOutStage+0x82>
 800fd3e:	e018      	b.n	800fd72 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800fd40:	2300      	movs	r3, #0
 800fd42:	75bb      	strb	r3, [r7, #22]
            break;
 800fd44:	e018      	b.n	800fd78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800fd4c:	b2db      	uxtb	r3, r3
 800fd4e:	4619      	mov	r1, r3
 800fd50:	68f8      	ldr	r0, [r7, #12]
 800fd52:	f000 fa5e 	bl	8010212 <USBD_CoreFindIF>
 800fd56:	4603      	mov	r3, r0
 800fd58:	75bb      	strb	r3, [r7, #22]
            break;
 800fd5a:	e00d      	b.n	800fd78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800fd62:	b2db      	uxtb	r3, r3
 800fd64:	4619      	mov	r1, r3
 800fd66:	68f8      	ldr	r0, [r7, #12]
 800fd68:	f000 fa60 	bl	801022c <USBD_CoreFindEP>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	75bb      	strb	r3, [r7, #22]
            break;
 800fd70:	e002      	b.n	800fd78 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800fd72:	2300      	movs	r3, #0
 800fd74:	75bb      	strb	r3, [r7, #22]
            break;
 800fd76:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800fd78:	7dbb      	ldrb	r3, [r7, #22]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d119      	bne.n	800fdb2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd84:	b2db      	uxtb	r3, r3
 800fd86:	2b03      	cmp	r3, #3
 800fd88:	d113      	bne.n	800fdb2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800fd8a:	7dba      	ldrb	r2, [r7, #22]
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	32ae      	adds	r2, #174	; 0xae
 800fd90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd94:	691b      	ldr	r3, [r3, #16]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d00b      	beq.n	800fdb2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800fd9a:	7dba      	ldrb	r2, [r7, #22]
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800fda2:	7dba      	ldrb	r2, [r7, #22]
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	32ae      	adds	r2, #174	; 0xae
 800fda8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdac:	691b      	ldr	r3, [r3, #16]
 800fdae:	68f8      	ldr	r0, [r7, #12]
 800fdb0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fdb2:	68f8      	ldr	r0, [r7, #12]
 800fdb4:	f001 f877 	bl	8010ea6 <USBD_CtlSendStatus>
 800fdb8:	e032      	b.n	800fe20 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800fdba:	7afb      	ldrb	r3, [r7, #11]
 800fdbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fdc0:	b2db      	uxtb	r3, r3
 800fdc2:	4619      	mov	r1, r3
 800fdc4:	68f8      	ldr	r0, [r7, #12]
 800fdc6:	f000 fa31 	bl	801022c <USBD_CoreFindEP>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fdce:	7dbb      	ldrb	r3, [r7, #22]
 800fdd0:	2bff      	cmp	r3, #255	; 0xff
 800fdd2:	d025      	beq.n	800fe20 <USBD_LL_DataOutStage+0x15c>
 800fdd4:	7dbb      	ldrb	r3, [r7, #22]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d122      	bne.n	800fe20 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fde0:	b2db      	uxtb	r3, r3
 800fde2:	2b03      	cmp	r3, #3
 800fde4:	d117      	bne.n	800fe16 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800fde6:	7dba      	ldrb	r2, [r7, #22]
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	32ae      	adds	r2, #174	; 0xae
 800fdec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdf0:	699b      	ldr	r3, [r3, #24]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d00f      	beq.n	800fe16 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800fdf6:	7dba      	ldrb	r2, [r7, #22]
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800fdfe:	7dba      	ldrb	r2, [r7, #22]
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	32ae      	adds	r2, #174	; 0xae
 800fe04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe08:	699b      	ldr	r3, [r3, #24]
 800fe0a:	7afa      	ldrb	r2, [r7, #11]
 800fe0c:	4611      	mov	r1, r2
 800fe0e:	68f8      	ldr	r0, [r7, #12]
 800fe10:	4798      	blx	r3
 800fe12:	4603      	mov	r3, r0
 800fe14:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800fe16:	7dfb      	ldrb	r3, [r7, #23]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d001      	beq.n	800fe20 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800fe1c:	7dfb      	ldrb	r3, [r7, #23]
 800fe1e:	e000      	b.n	800fe22 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800fe20:	2300      	movs	r3, #0
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	3718      	adds	r7, #24
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}

0800fe2a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fe2a:	b580      	push	{r7, lr}
 800fe2c:	b086      	sub	sp, #24
 800fe2e:	af00      	add	r7, sp, #0
 800fe30:	60f8      	str	r0, [r7, #12]
 800fe32:	460b      	mov	r3, r1
 800fe34:	607a      	str	r2, [r7, #4]
 800fe36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800fe38:	7afb      	ldrb	r3, [r7, #11]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d16f      	bne.n	800ff1e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	3314      	adds	r3, #20
 800fe42:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fe4a:	2b02      	cmp	r3, #2
 800fe4c:	d15a      	bne.n	800ff04 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	689a      	ldr	r2, [r3, #8]
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	68db      	ldr	r3, [r3, #12]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d914      	bls.n	800fe84 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fe5a:	693b      	ldr	r3, [r7, #16]
 800fe5c:	689a      	ldr	r2, [r3, #8]
 800fe5e:	693b      	ldr	r3, [r7, #16]
 800fe60:	68db      	ldr	r3, [r3, #12]
 800fe62:	1ad2      	subs	r2, r2, r3
 800fe64:	693b      	ldr	r3, [r7, #16]
 800fe66:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fe68:	693b      	ldr	r3, [r7, #16]
 800fe6a:	689b      	ldr	r3, [r3, #8]
 800fe6c:	461a      	mov	r2, r3
 800fe6e:	6879      	ldr	r1, [r7, #4]
 800fe70:	68f8      	ldr	r0, [r7, #12]
 800fe72:	f000 fff6 	bl	8010e62 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fe76:	2300      	movs	r3, #0
 800fe78:	2200      	movs	r2, #0
 800fe7a:	2100      	movs	r1, #0
 800fe7c:	68f8      	ldr	r0, [r7, #12]
 800fe7e:	f002 fd97 	bl	80129b0 <USBD_LL_PrepareReceive>
 800fe82:	e03f      	b.n	800ff04 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fe84:	693b      	ldr	r3, [r7, #16]
 800fe86:	68da      	ldr	r2, [r3, #12]
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	689b      	ldr	r3, [r3, #8]
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d11c      	bne.n	800feca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	685a      	ldr	r2, [r3, #4]
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d316      	bcc.n	800feca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	685a      	ldr	r2, [r3, #4]
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d20f      	bcs.n	800feca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800feaa:	2200      	movs	r2, #0
 800feac:	2100      	movs	r1, #0
 800feae:	68f8      	ldr	r0, [r7, #12]
 800feb0:	f000 ffd7 	bl	8010e62 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	2200      	movs	r2, #0
 800feb8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800febc:	2300      	movs	r3, #0
 800febe:	2200      	movs	r2, #0
 800fec0:	2100      	movs	r1, #0
 800fec2:	68f8      	ldr	r0, [r7, #12]
 800fec4:	f002 fd74 	bl	80129b0 <USBD_LL_PrepareReceive>
 800fec8:	e01c      	b.n	800ff04 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fed0:	b2db      	uxtb	r3, r3
 800fed2:	2b03      	cmp	r3, #3
 800fed4:	d10f      	bne.n	800fef6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fedc:	68db      	ldr	r3, [r3, #12]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d009      	beq.n	800fef6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2200      	movs	r2, #0
 800fee6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fef0:	68db      	ldr	r3, [r3, #12]
 800fef2:	68f8      	ldr	r0, [r7, #12]
 800fef4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fef6:	2180      	movs	r1, #128	; 0x80
 800fef8:	68f8      	ldr	r0, [r7, #12]
 800fefa:	f002 fcaf 	bl	801285c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fefe:	68f8      	ldr	r0, [r7, #12]
 800ff00:	f000 ffe4 	bl	8010ecc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d03a      	beq.n	800ff84 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ff0e:	68f8      	ldr	r0, [r7, #12]
 800ff10:	f7ff fe42 	bl	800fb98 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	2200      	movs	r2, #0
 800ff18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ff1c:	e032      	b.n	800ff84 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ff1e:	7afb      	ldrb	r3, [r7, #11]
 800ff20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ff24:	b2db      	uxtb	r3, r3
 800ff26:	4619      	mov	r1, r3
 800ff28:	68f8      	ldr	r0, [r7, #12]
 800ff2a:	f000 f97f 	bl	801022c <USBD_CoreFindEP>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ff32:	7dfb      	ldrb	r3, [r7, #23]
 800ff34:	2bff      	cmp	r3, #255	; 0xff
 800ff36:	d025      	beq.n	800ff84 <USBD_LL_DataInStage+0x15a>
 800ff38:	7dfb      	ldrb	r3, [r7, #23]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d122      	bne.n	800ff84 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff44:	b2db      	uxtb	r3, r3
 800ff46:	2b03      	cmp	r3, #3
 800ff48:	d11c      	bne.n	800ff84 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ff4a:	7dfa      	ldrb	r2, [r7, #23]
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	32ae      	adds	r2, #174	; 0xae
 800ff50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff54:	695b      	ldr	r3, [r3, #20]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d014      	beq.n	800ff84 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ff5a:	7dfa      	ldrb	r2, [r7, #23]
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ff62:	7dfa      	ldrb	r2, [r7, #23]
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	32ae      	adds	r2, #174	; 0xae
 800ff68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff6c:	695b      	ldr	r3, [r3, #20]
 800ff6e:	7afa      	ldrb	r2, [r7, #11]
 800ff70:	4611      	mov	r1, r2
 800ff72:	68f8      	ldr	r0, [r7, #12]
 800ff74:	4798      	blx	r3
 800ff76:	4603      	mov	r3, r0
 800ff78:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ff7a:	7dbb      	ldrb	r3, [r7, #22]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d001      	beq.n	800ff84 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ff80:	7dbb      	ldrb	r3, [r7, #22]
 800ff82:	e000      	b.n	800ff86 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ff84:	2300      	movs	r3, #0
}
 800ff86:	4618      	mov	r0, r3
 800ff88:	3718      	adds	r7, #24
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}

0800ff8e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ff8e:	b580      	push	{r7, lr}
 800ff90:	b084      	sub	sp, #16
 800ff92:	af00      	add	r7, sp, #0
 800ff94:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff96:	2300      	movs	r3, #0
 800ff98:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2201      	movs	r2, #1
 800ff9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2200      	movs	r2, #0
 800ffae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2200      	movs	r2, #0
 800ffbc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d014      	beq.n	800fff4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ffd0:	685b      	ldr	r3, [r3, #4]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d00e      	beq.n	800fff4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ffdc:	685b      	ldr	r3, [r3, #4]
 800ffde:	687a      	ldr	r2, [r7, #4]
 800ffe0:	6852      	ldr	r2, [r2, #4]
 800ffe2:	b2d2      	uxtb	r2, r2
 800ffe4:	4611      	mov	r1, r2
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	4798      	blx	r3
 800ffea:	4603      	mov	r3, r0
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d001      	beq.n	800fff4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800fff0:	2303      	movs	r3, #3
 800fff2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fff4:	2340      	movs	r3, #64	; 0x40
 800fff6:	2200      	movs	r2, #0
 800fff8:	2100      	movs	r1, #0
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f002 fc08 	bl	8012810 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2201      	movs	r2, #1
 8010004:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2240      	movs	r2, #64	; 0x40
 801000c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010010:	2340      	movs	r3, #64	; 0x40
 8010012:	2200      	movs	r2, #0
 8010014:	2180      	movs	r1, #128	; 0x80
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f002 fbfa 	bl	8012810 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2201      	movs	r2, #1
 8010020:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2240      	movs	r2, #64	; 0x40
 8010026:	621a      	str	r2, [r3, #32]

  return ret;
 8010028:	7bfb      	ldrb	r3, [r7, #15]
}
 801002a:	4618      	mov	r0, r3
 801002c:	3710      	adds	r7, #16
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}

08010032 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010032:	b480      	push	{r7}
 8010034:	b083      	sub	sp, #12
 8010036:	af00      	add	r7, sp, #0
 8010038:	6078      	str	r0, [r7, #4]
 801003a:	460b      	mov	r3, r1
 801003c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	78fa      	ldrb	r2, [r7, #3]
 8010042:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010044:	2300      	movs	r3, #0
}
 8010046:	4618      	mov	r0, r3
 8010048:	370c      	adds	r7, #12
 801004a:	46bd      	mov	sp, r7
 801004c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010050:	4770      	bx	lr

08010052 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010052:	b480      	push	{r7}
 8010054:	b083      	sub	sp, #12
 8010056:	af00      	add	r7, sp, #0
 8010058:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010060:	b2da      	uxtb	r2, r3
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2204      	movs	r2, #4
 801006c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010070:	2300      	movs	r3, #0
}
 8010072:	4618      	mov	r0, r3
 8010074:	370c      	adds	r7, #12
 8010076:	46bd      	mov	sp, r7
 8010078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007c:	4770      	bx	lr

0801007e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801007e:	b480      	push	{r7}
 8010080:	b083      	sub	sp, #12
 8010082:	af00      	add	r7, sp, #0
 8010084:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801008c:	b2db      	uxtb	r3, r3
 801008e:	2b04      	cmp	r3, #4
 8010090:	d106      	bne.n	80100a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010098:	b2da      	uxtb	r2, r3
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80100a0:	2300      	movs	r3, #0
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	370c      	adds	r7, #12
 80100a6:	46bd      	mov	sp, r7
 80100a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ac:	4770      	bx	lr

080100ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80100ae:	b580      	push	{r7, lr}
 80100b0:	b082      	sub	sp, #8
 80100b2:	af00      	add	r7, sp, #0
 80100b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100bc:	b2db      	uxtb	r3, r3
 80100be:	2b03      	cmp	r3, #3
 80100c0:	d110      	bne.n	80100e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d00b      	beq.n	80100e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80100d2:	69db      	ldr	r3, [r3, #28]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d005      	beq.n	80100e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80100de:	69db      	ldr	r3, [r3, #28]
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80100e4:	2300      	movs	r3, #0
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	3708      	adds	r7, #8
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd80      	pop	{r7, pc}

080100ee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80100ee:	b580      	push	{r7, lr}
 80100f0:	b082      	sub	sp, #8
 80100f2:	af00      	add	r7, sp, #0
 80100f4:	6078      	str	r0, [r7, #4]
 80100f6:	460b      	mov	r3, r1
 80100f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	32ae      	adds	r2, #174	; 0xae
 8010104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d101      	bne.n	8010110 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801010c:	2303      	movs	r3, #3
 801010e:	e01c      	b.n	801014a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010116:	b2db      	uxtb	r3, r3
 8010118:	2b03      	cmp	r3, #3
 801011a:	d115      	bne.n	8010148 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	32ae      	adds	r2, #174	; 0xae
 8010126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801012a:	6a1b      	ldr	r3, [r3, #32]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d00b      	beq.n	8010148 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	32ae      	adds	r2, #174	; 0xae
 801013a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801013e:	6a1b      	ldr	r3, [r3, #32]
 8010140:	78fa      	ldrb	r2, [r7, #3]
 8010142:	4611      	mov	r1, r2
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010148:	2300      	movs	r3, #0
}
 801014a:	4618      	mov	r0, r3
 801014c:	3708      	adds	r7, #8
 801014e:	46bd      	mov	sp, r7
 8010150:	bd80      	pop	{r7, pc}

08010152 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010152:	b580      	push	{r7, lr}
 8010154:	b082      	sub	sp, #8
 8010156:	af00      	add	r7, sp, #0
 8010158:	6078      	str	r0, [r7, #4]
 801015a:	460b      	mov	r3, r1
 801015c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	32ae      	adds	r2, #174	; 0xae
 8010168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d101      	bne.n	8010174 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8010170:	2303      	movs	r3, #3
 8010172:	e01c      	b.n	80101ae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801017a:	b2db      	uxtb	r3, r3
 801017c:	2b03      	cmp	r3, #3
 801017e:	d115      	bne.n	80101ac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	32ae      	adds	r2, #174	; 0xae
 801018a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801018e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010190:	2b00      	cmp	r3, #0
 8010192:	d00b      	beq.n	80101ac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	32ae      	adds	r2, #174	; 0xae
 801019e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101a4:	78fa      	ldrb	r2, [r7, #3]
 80101a6:	4611      	mov	r1, r2
 80101a8:	6878      	ldr	r0, [r7, #4]
 80101aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80101ac:	2300      	movs	r3, #0
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3708      	adds	r7, #8
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}

080101b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80101b6:	b480      	push	{r7}
 80101b8:	b083      	sub	sp, #12
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80101be:	2300      	movs	r3, #0
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	370c      	adds	r7, #12
 80101c4:	46bd      	mov	sp, r7
 80101c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ca:	4770      	bx	lr

080101cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b084      	sub	sp, #16
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80101d4:	2300      	movs	r3, #0
 80101d6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2201      	movs	r2, #1
 80101dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d00e      	beq.n	8010208 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	687a      	ldr	r2, [r7, #4]
 80101f4:	6852      	ldr	r2, [r2, #4]
 80101f6:	b2d2      	uxtb	r2, r2
 80101f8:	4611      	mov	r1, r2
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	4798      	blx	r3
 80101fe:	4603      	mov	r3, r0
 8010200:	2b00      	cmp	r3, #0
 8010202:	d001      	beq.n	8010208 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010204:	2303      	movs	r3, #3
 8010206:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010208:	7bfb      	ldrb	r3, [r7, #15]
}
 801020a:	4618      	mov	r0, r3
 801020c:	3710      	adds	r7, #16
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}

08010212 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010212:	b480      	push	{r7}
 8010214:	b083      	sub	sp, #12
 8010216:	af00      	add	r7, sp, #0
 8010218:	6078      	str	r0, [r7, #4]
 801021a:	460b      	mov	r3, r1
 801021c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801021e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010220:	4618      	mov	r0, r3
 8010222:	370c      	adds	r7, #12
 8010224:	46bd      	mov	sp, r7
 8010226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022a:	4770      	bx	lr

0801022c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801022c:	b480      	push	{r7}
 801022e:	b083      	sub	sp, #12
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	460b      	mov	r3, r1
 8010236:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010238:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801023a:	4618      	mov	r0, r3
 801023c:	370c      	adds	r7, #12
 801023e:	46bd      	mov	sp, r7
 8010240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010244:	4770      	bx	lr

08010246 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010246:	b480      	push	{r7}
 8010248:	b087      	sub	sp, #28
 801024a:	af00      	add	r7, sp, #0
 801024c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	3301      	adds	r3, #1
 801025c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	781b      	ldrb	r3, [r3, #0]
 8010262:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010264:	8a3b      	ldrh	r3, [r7, #16]
 8010266:	021b      	lsls	r3, r3, #8
 8010268:	b21a      	sxth	r2, r3
 801026a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801026e:	4313      	orrs	r3, r2
 8010270:	b21b      	sxth	r3, r3
 8010272:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010274:	89fb      	ldrh	r3, [r7, #14]
}
 8010276:	4618      	mov	r0, r3
 8010278:	371c      	adds	r7, #28
 801027a:	46bd      	mov	sp, r7
 801027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010280:	4770      	bx	lr
	...

08010284 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b084      	sub	sp, #16
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801028e:	2300      	movs	r3, #0
 8010290:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	781b      	ldrb	r3, [r3, #0]
 8010296:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801029a:	2b40      	cmp	r3, #64	; 0x40
 801029c:	d005      	beq.n	80102aa <USBD_StdDevReq+0x26>
 801029e:	2b40      	cmp	r3, #64	; 0x40
 80102a0:	d857      	bhi.n	8010352 <USBD_StdDevReq+0xce>
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d00f      	beq.n	80102c6 <USBD_StdDevReq+0x42>
 80102a6:	2b20      	cmp	r3, #32
 80102a8:	d153      	bne.n	8010352 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	32ae      	adds	r2, #174	; 0xae
 80102b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102b8:	689b      	ldr	r3, [r3, #8]
 80102ba:	6839      	ldr	r1, [r7, #0]
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	4798      	blx	r3
 80102c0:	4603      	mov	r3, r0
 80102c2:	73fb      	strb	r3, [r7, #15]
      break;
 80102c4:	e04a      	b.n	801035c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	785b      	ldrb	r3, [r3, #1]
 80102ca:	2b09      	cmp	r3, #9
 80102cc:	d83b      	bhi.n	8010346 <USBD_StdDevReq+0xc2>
 80102ce:	a201      	add	r2, pc, #4	; (adr r2, 80102d4 <USBD_StdDevReq+0x50>)
 80102d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102d4:	08010329 	.word	0x08010329
 80102d8:	0801033d 	.word	0x0801033d
 80102dc:	08010347 	.word	0x08010347
 80102e0:	08010333 	.word	0x08010333
 80102e4:	08010347 	.word	0x08010347
 80102e8:	08010307 	.word	0x08010307
 80102ec:	080102fd 	.word	0x080102fd
 80102f0:	08010347 	.word	0x08010347
 80102f4:	0801031f 	.word	0x0801031f
 80102f8:	08010311 	.word	0x08010311
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80102fc:	6839      	ldr	r1, [r7, #0]
 80102fe:	6878      	ldr	r0, [r7, #4]
 8010300:	f000 fa3c 	bl	801077c <USBD_GetDescriptor>
          break;
 8010304:	e024      	b.n	8010350 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010306:	6839      	ldr	r1, [r7, #0]
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f000 fba1 	bl	8010a50 <USBD_SetAddress>
          break;
 801030e:	e01f      	b.n	8010350 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010310:	6839      	ldr	r1, [r7, #0]
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f000 fbe0 	bl	8010ad8 <USBD_SetConfig>
 8010318:	4603      	mov	r3, r0
 801031a:	73fb      	strb	r3, [r7, #15]
          break;
 801031c:	e018      	b.n	8010350 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801031e:	6839      	ldr	r1, [r7, #0]
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f000 fc83 	bl	8010c2c <USBD_GetConfig>
          break;
 8010326:	e013      	b.n	8010350 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010328:	6839      	ldr	r1, [r7, #0]
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f000 fcb4 	bl	8010c98 <USBD_GetStatus>
          break;
 8010330:	e00e      	b.n	8010350 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010332:	6839      	ldr	r1, [r7, #0]
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f000 fce3 	bl	8010d00 <USBD_SetFeature>
          break;
 801033a:	e009      	b.n	8010350 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801033c:	6839      	ldr	r1, [r7, #0]
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f000 fd07 	bl	8010d52 <USBD_ClrFeature>
          break;
 8010344:	e004      	b.n	8010350 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010346:	6839      	ldr	r1, [r7, #0]
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f000 fd5e 	bl	8010e0a <USBD_CtlError>
          break;
 801034e:	bf00      	nop
      }
      break;
 8010350:	e004      	b.n	801035c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010352:	6839      	ldr	r1, [r7, #0]
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	f000 fd58 	bl	8010e0a <USBD_CtlError>
      break;
 801035a:	bf00      	nop
  }

  return ret;
 801035c:	7bfb      	ldrb	r3, [r7, #15]
}
 801035e:	4618      	mov	r0, r3
 8010360:	3710      	adds	r7, #16
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
 8010366:	bf00      	nop

08010368 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b084      	sub	sp, #16
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010372:	2300      	movs	r3, #0
 8010374:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801037e:	2b40      	cmp	r3, #64	; 0x40
 8010380:	d005      	beq.n	801038e <USBD_StdItfReq+0x26>
 8010382:	2b40      	cmp	r3, #64	; 0x40
 8010384:	d852      	bhi.n	801042c <USBD_StdItfReq+0xc4>
 8010386:	2b00      	cmp	r3, #0
 8010388:	d001      	beq.n	801038e <USBD_StdItfReq+0x26>
 801038a:	2b20      	cmp	r3, #32
 801038c:	d14e      	bne.n	801042c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010394:	b2db      	uxtb	r3, r3
 8010396:	3b01      	subs	r3, #1
 8010398:	2b02      	cmp	r3, #2
 801039a:	d840      	bhi.n	801041e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	889b      	ldrh	r3, [r3, #4]
 80103a0:	b2db      	uxtb	r3, r3
 80103a2:	2b01      	cmp	r3, #1
 80103a4:	d836      	bhi.n	8010414 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	889b      	ldrh	r3, [r3, #4]
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	4619      	mov	r1, r3
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f7ff ff2f 	bl	8010212 <USBD_CoreFindIF>
 80103b4:	4603      	mov	r3, r0
 80103b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80103b8:	7bbb      	ldrb	r3, [r7, #14]
 80103ba:	2bff      	cmp	r3, #255	; 0xff
 80103bc:	d01d      	beq.n	80103fa <USBD_StdItfReq+0x92>
 80103be:	7bbb      	ldrb	r3, [r7, #14]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d11a      	bne.n	80103fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80103c4:	7bba      	ldrb	r2, [r7, #14]
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	32ae      	adds	r2, #174	; 0xae
 80103ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103ce:	689b      	ldr	r3, [r3, #8]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d00f      	beq.n	80103f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80103d4:	7bba      	ldrb	r2, [r7, #14]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80103dc:	7bba      	ldrb	r2, [r7, #14]
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	32ae      	adds	r2, #174	; 0xae
 80103e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103e6:	689b      	ldr	r3, [r3, #8]
 80103e8:	6839      	ldr	r1, [r7, #0]
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	4798      	blx	r3
 80103ee:	4603      	mov	r3, r0
 80103f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80103f2:	e004      	b.n	80103fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80103f4:	2303      	movs	r3, #3
 80103f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80103f8:	e001      	b.n	80103fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80103fa:	2303      	movs	r3, #3
 80103fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	88db      	ldrh	r3, [r3, #6]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d110      	bne.n	8010428 <USBD_StdItfReq+0xc0>
 8010406:	7bfb      	ldrb	r3, [r7, #15]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d10d      	bne.n	8010428 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f000 fd4a 	bl	8010ea6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010412:	e009      	b.n	8010428 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010414:	6839      	ldr	r1, [r7, #0]
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	f000 fcf7 	bl	8010e0a <USBD_CtlError>
          break;
 801041c:	e004      	b.n	8010428 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801041e:	6839      	ldr	r1, [r7, #0]
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f000 fcf2 	bl	8010e0a <USBD_CtlError>
          break;
 8010426:	e000      	b.n	801042a <USBD_StdItfReq+0xc2>
          break;
 8010428:	bf00      	nop
      }
      break;
 801042a:	e004      	b.n	8010436 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801042c:	6839      	ldr	r1, [r7, #0]
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f000 fceb 	bl	8010e0a <USBD_CtlError>
      break;
 8010434:	bf00      	nop
  }

  return ret;
 8010436:	7bfb      	ldrb	r3, [r7, #15]
}
 8010438:	4618      	mov	r0, r3
 801043a:	3710      	adds	r7, #16
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}

08010440 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b084      	sub	sp, #16
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801044a:	2300      	movs	r3, #0
 801044c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	889b      	ldrh	r3, [r3, #4]
 8010452:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	781b      	ldrb	r3, [r3, #0]
 8010458:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801045c:	2b40      	cmp	r3, #64	; 0x40
 801045e:	d007      	beq.n	8010470 <USBD_StdEPReq+0x30>
 8010460:	2b40      	cmp	r3, #64	; 0x40
 8010462:	f200 817f 	bhi.w	8010764 <USBD_StdEPReq+0x324>
 8010466:	2b00      	cmp	r3, #0
 8010468:	d02a      	beq.n	80104c0 <USBD_StdEPReq+0x80>
 801046a:	2b20      	cmp	r3, #32
 801046c:	f040 817a 	bne.w	8010764 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010470:	7bbb      	ldrb	r3, [r7, #14]
 8010472:	4619      	mov	r1, r3
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f7ff fed9 	bl	801022c <USBD_CoreFindEP>
 801047a:	4603      	mov	r3, r0
 801047c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801047e:	7b7b      	ldrb	r3, [r7, #13]
 8010480:	2bff      	cmp	r3, #255	; 0xff
 8010482:	f000 8174 	beq.w	801076e <USBD_StdEPReq+0x32e>
 8010486:	7b7b      	ldrb	r3, [r7, #13]
 8010488:	2b00      	cmp	r3, #0
 801048a:	f040 8170 	bne.w	801076e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801048e:	7b7a      	ldrb	r2, [r7, #13]
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010496:	7b7a      	ldrb	r2, [r7, #13]
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	32ae      	adds	r2, #174	; 0xae
 801049c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104a0:	689b      	ldr	r3, [r3, #8]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	f000 8163 	beq.w	801076e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80104a8:	7b7a      	ldrb	r2, [r7, #13]
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	32ae      	adds	r2, #174	; 0xae
 80104ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104b2:	689b      	ldr	r3, [r3, #8]
 80104b4:	6839      	ldr	r1, [r7, #0]
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	4798      	blx	r3
 80104ba:	4603      	mov	r3, r0
 80104bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80104be:	e156      	b.n	801076e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	785b      	ldrb	r3, [r3, #1]
 80104c4:	2b03      	cmp	r3, #3
 80104c6:	d008      	beq.n	80104da <USBD_StdEPReq+0x9a>
 80104c8:	2b03      	cmp	r3, #3
 80104ca:	f300 8145 	bgt.w	8010758 <USBD_StdEPReq+0x318>
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	f000 809b 	beq.w	801060a <USBD_StdEPReq+0x1ca>
 80104d4:	2b01      	cmp	r3, #1
 80104d6:	d03c      	beq.n	8010552 <USBD_StdEPReq+0x112>
 80104d8:	e13e      	b.n	8010758 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80104e0:	b2db      	uxtb	r3, r3
 80104e2:	2b02      	cmp	r3, #2
 80104e4:	d002      	beq.n	80104ec <USBD_StdEPReq+0xac>
 80104e6:	2b03      	cmp	r3, #3
 80104e8:	d016      	beq.n	8010518 <USBD_StdEPReq+0xd8>
 80104ea:	e02c      	b.n	8010546 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80104ec:	7bbb      	ldrb	r3, [r7, #14]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d00d      	beq.n	801050e <USBD_StdEPReq+0xce>
 80104f2:	7bbb      	ldrb	r3, [r7, #14]
 80104f4:	2b80      	cmp	r3, #128	; 0x80
 80104f6:	d00a      	beq.n	801050e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80104f8:	7bbb      	ldrb	r3, [r7, #14]
 80104fa:	4619      	mov	r1, r3
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f002 f9ad 	bl	801285c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010502:	2180      	movs	r1, #128	; 0x80
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f002 f9a9 	bl	801285c <USBD_LL_StallEP>
 801050a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801050c:	e020      	b.n	8010550 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801050e:	6839      	ldr	r1, [r7, #0]
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f000 fc7a 	bl	8010e0a <USBD_CtlError>
              break;
 8010516:	e01b      	b.n	8010550 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	885b      	ldrh	r3, [r3, #2]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d10e      	bne.n	801053e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010520:	7bbb      	ldrb	r3, [r7, #14]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d00b      	beq.n	801053e <USBD_StdEPReq+0xfe>
 8010526:	7bbb      	ldrb	r3, [r7, #14]
 8010528:	2b80      	cmp	r3, #128	; 0x80
 801052a:	d008      	beq.n	801053e <USBD_StdEPReq+0xfe>
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	88db      	ldrh	r3, [r3, #6]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d104      	bne.n	801053e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010534:	7bbb      	ldrb	r3, [r7, #14]
 8010536:	4619      	mov	r1, r3
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f002 f98f 	bl	801285c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801053e:	6878      	ldr	r0, [r7, #4]
 8010540:	f000 fcb1 	bl	8010ea6 <USBD_CtlSendStatus>

              break;
 8010544:	e004      	b.n	8010550 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010546:	6839      	ldr	r1, [r7, #0]
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	f000 fc5e 	bl	8010e0a <USBD_CtlError>
              break;
 801054e:	bf00      	nop
          }
          break;
 8010550:	e107      	b.n	8010762 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010558:	b2db      	uxtb	r3, r3
 801055a:	2b02      	cmp	r3, #2
 801055c:	d002      	beq.n	8010564 <USBD_StdEPReq+0x124>
 801055e:	2b03      	cmp	r3, #3
 8010560:	d016      	beq.n	8010590 <USBD_StdEPReq+0x150>
 8010562:	e04b      	b.n	80105fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010564:	7bbb      	ldrb	r3, [r7, #14]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d00d      	beq.n	8010586 <USBD_StdEPReq+0x146>
 801056a:	7bbb      	ldrb	r3, [r7, #14]
 801056c:	2b80      	cmp	r3, #128	; 0x80
 801056e:	d00a      	beq.n	8010586 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010570:	7bbb      	ldrb	r3, [r7, #14]
 8010572:	4619      	mov	r1, r3
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f002 f971 	bl	801285c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801057a:	2180      	movs	r1, #128	; 0x80
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f002 f96d 	bl	801285c <USBD_LL_StallEP>
 8010582:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010584:	e040      	b.n	8010608 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010586:	6839      	ldr	r1, [r7, #0]
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f000 fc3e 	bl	8010e0a <USBD_CtlError>
              break;
 801058e:	e03b      	b.n	8010608 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	885b      	ldrh	r3, [r3, #2]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d136      	bne.n	8010606 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010598:	7bbb      	ldrb	r3, [r7, #14]
 801059a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d004      	beq.n	80105ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80105a2:	7bbb      	ldrb	r3, [r7, #14]
 80105a4:	4619      	mov	r1, r3
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f002 f977 	bl	801289a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f000 fc7a 	bl	8010ea6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80105b2:	7bbb      	ldrb	r3, [r7, #14]
 80105b4:	4619      	mov	r1, r3
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f7ff fe38 	bl	801022c <USBD_CoreFindEP>
 80105bc:	4603      	mov	r3, r0
 80105be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80105c0:	7b7b      	ldrb	r3, [r7, #13]
 80105c2:	2bff      	cmp	r3, #255	; 0xff
 80105c4:	d01f      	beq.n	8010606 <USBD_StdEPReq+0x1c6>
 80105c6:	7b7b      	ldrb	r3, [r7, #13]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d11c      	bne.n	8010606 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80105cc:	7b7a      	ldrb	r2, [r7, #13]
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80105d4:	7b7a      	ldrb	r2, [r7, #13]
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	32ae      	adds	r2, #174	; 0xae
 80105da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105de:	689b      	ldr	r3, [r3, #8]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d010      	beq.n	8010606 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80105e4:	7b7a      	ldrb	r2, [r7, #13]
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	32ae      	adds	r2, #174	; 0xae
 80105ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105ee:	689b      	ldr	r3, [r3, #8]
 80105f0:	6839      	ldr	r1, [r7, #0]
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	4798      	blx	r3
 80105f6:	4603      	mov	r3, r0
 80105f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80105fa:	e004      	b.n	8010606 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80105fc:	6839      	ldr	r1, [r7, #0]
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f000 fc03 	bl	8010e0a <USBD_CtlError>
              break;
 8010604:	e000      	b.n	8010608 <USBD_StdEPReq+0x1c8>
              break;
 8010606:	bf00      	nop
          }
          break;
 8010608:	e0ab      	b.n	8010762 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010610:	b2db      	uxtb	r3, r3
 8010612:	2b02      	cmp	r3, #2
 8010614:	d002      	beq.n	801061c <USBD_StdEPReq+0x1dc>
 8010616:	2b03      	cmp	r3, #3
 8010618:	d032      	beq.n	8010680 <USBD_StdEPReq+0x240>
 801061a:	e097      	b.n	801074c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801061c:	7bbb      	ldrb	r3, [r7, #14]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d007      	beq.n	8010632 <USBD_StdEPReq+0x1f2>
 8010622:	7bbb      	ldrb	r3, [r7, #14]
 8010624:	2b80      	cmp	r3, #128	; 0x80
 8010626:	d004      	beq.n	8010632 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010628:	6839      	ldr	r1, [r7, #0]
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f000 fbed 	bl	8010e0a <USBD_CtlError>
                break;
 8010630:	e091      	b.n	8010756 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010632:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010636:	2b00      	cmp	r3, #0
 8010638:	da0b      	bge.n	8010652 <USBD_StdEPReq+0x212>
 801063a:	7bbb      	ldrb	r3, [r7, #14]
 801063c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010640:	4613      	mov	r3, r2
 8010642:	009b      	lsls	r3, r3, #2
 8010644:	4413      	add	r3, r2
 8010646:	009b      	lsls	r3, r3, #2
 8010648:	3310      	adds	r3, #16
 801064a:	687a      	ldr	r2, [r7, #4]
 801064c:	4413      	add	r3, r2
 801064e:	3304      	adds	r3, #4
 8010650:	e00b      	b.n	801066a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010652:	7bbb      	ldrb	r3, [r7, #14]
 8010654:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010658:	4613      	mov	r3, r2
 801065a:	009b      	lsls	r3, r3, #2
 801065c:	4413      	add	r3, r2
 801065e:	009b      	lsls	r3, r3, #2
 8010660:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010664:	687a      	ldr	r2, [r7, #4]
 8010666:	4413      	add	r3, r2
 8010668:	3304      	adds	r3, #4
 801066a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	2200      	movs	r2, #0
 8010670:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	2202      	movs	r2, #2
 8010676:	4619      	mov	r1, r3
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f000 fbd7 	bl	8010e2c <USBD_CtlSendData>
              break;
 801067e:	e06a      	b.n	8010756 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010680:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010684:	2b00      	cmp	r3, #0
 8010686:	da11      	bge.n	80106ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010688:	7bbb      	ldrb	r3, [r7, #14]
 801068a:	f003 020f 	and.w	r2, r3, #15
 801068e:	6879      	ldr	r1, [r7, #4]
 8010690:	4613      	mov	r3, r2
 8010692:	009b      	lsls	r3, r3, #2
 8010694:	4413      	add	r3, r2
 8010696:	009b      	lsls	r3, r3, #2
 8010698:	440b      	add	r3, r1
 801069a:	3324      	adds	r3, #36	; 0x24
 801069c:	881b      	ldrh	r3, [r3, #0]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d117      	bne.n	80106d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80106a2:	6839      	ldr	r1, [r7, #0]
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f000 fbb0 	bl	8010e0a <USBD_CtlError>
                  break;
 80106aa:	e054      	b.n	8010756 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80106ac:	7bbb      	ldrb	r3, [r7, #14]
 80106ae:	f003 020f 	and.w	r2, r3, #15
 80106b2:	6879      	ldr	r1, [r7, #4]
 80106b4:	4613      	mov	r3, r2
 80106b6:	009b      	lsls	r3, r3, #2
 80106b8:	4413      	add	r3, r2
 80106ba:	009b      	lsls	r3, r3, #2
 80106bc:	440b      	add	r3, r1
 80106be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80106c2:	881b      	ldrh	r3, [r3, #0]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d104      	bne.n	80106d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80106c8:	6839      	ldr	r1, [r7, #0]
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f000 fb9d 	bl	8010e0a <USBD_CtlError>
                  break;
 80106d0:	e041      	b.n	8010756 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80106d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	da0b      	bge.n	80106f2 <USBD_StdEPReq+0x2b2>
 80106da:	7bbb      	ldrb	r3, [r7, #14]
 80106dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80106e0:	4613      	mov	r3, r2
 80106e2:	009b      	lsls	r3, r3, #2
 80106e4:	4413      	add	r3, r2
 80106e6:	009b      	lsls	r3, r3, #2
 80106e8:	3310      	adds	r3, #16
 80106ea:	687a      	ldr	r2, [r7, #4]
 80106ec:	4413      	add	r3, r2
 80106ee:	3304      	adds	r3, #4
 80106f0:	e00b      	b.n	801070a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80106f2:	7bbb      	ldrb	r3, [r7, #14]
 80106f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80106f8:	4613      	mov	r3, r2
 80106fa:	009b      	lsls	r3, r3, #2
 80106fc:	4413      	add	r3, r2
 80106fe:	009b      	lsls	r3, r3, #2
 8010700:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010704:	687a      	ldr	r2, [r7, #4]
 8010706:	4413      	add	r3, r2
 8010708:	3304      	adds	r3, #4
 801070a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801070c:	7bbb      	ldrb	r3, [r7, #14]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d002      	beq.n	8010718 <USBD_StdEPReq+0x2d8>
 8010712:	7bbb      	ldrb	r3, [r7, #14]
 8010714:	2b80      	cmp	r3, #128	; 0x80
 8010716:	d103      	bne.n	8010720 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	2200      	movs	r2, #0
 801071c:	601a      	str	r2, [r3, #0]
 801071e:	e00e      	b.n	801073e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010720:	7bbb      	ldrb	r3, [r7, #14]
 8010722:	4619      	mov	r1, r3
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f002 f8d7 	bl	80128d8 <USBD_LL_IsStallEP>
 801072a:	4603      	mov	r3, r0
 801072c:	2b00      	cmp	r3, #0
 801072e:	d003      	beq.n	8010738 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	2201      	movs	r2, #1
 8010734:	601a      	str	r2, [r3, #0]
 8010736:	e002      	b.n	801073e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	2200      	movs	r2, #0
 801073c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	2202      	movs	r2, #2
 8010742:	4619      	mov	r1, r3
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f000 fb71 	bl	8010e2c <USBD_CtlSendData>
              break;
 801074a:	e004      	b.n	8010756 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801074c:	6839      	ldr	r1, [r7, #0]
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f000 fb5b 	bl	8010e0a <USBD_CtlError>
              break;
 8010754:	bf00      	nop
          }
          break;
 8010756:	e004      	b.n	8010762 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010758:	6839      	ldr	r1, [r7, #0]
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f000 fb55 	bl	8010e0a <USBD_CtlError>
          break;
 8010760:	bf00      	nop
      }
      break;
 8010762:	e005      	b.n	8010770 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010764:	6839      	ldr	r1, [r7, #0]
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f000 fb4f 	bl	8010e0a <USBD_CtlError>
      break;
 801076c:	e000      	b.n	8010770 <USBD_StdEPReq+0x330>
      break;
 801076e:	bf00      	nop
  }

  return ret;
 8010770:	7bfb      	ldrb	r3, [r7, #15]
}
 8010772:	4618      	mov	r0, r3
 8010774:	3710      	adds	r7, #16
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
	...

0801077c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b084      	sub	sp, #16
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010786:	2300      	movs	r3, #0
 8010788:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801078a:	2300      	movs	r3, #0
 801078c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801078e:	2300      	movs	r3, #0
 8010790:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	885b      	ldrh	r3, [r3, #2]
 8010796:	0a1b      	lsrs	r3, r3, #8
 8010798:	b29b      	uxth	r3, r3
 801079a:	3b01      	subs	r3, #1
 801079c:	2b06      	cmp	r3, #6
 801079e:	f200 8128 	bhi.w	80109f2 <USBD_GetDescriptor+0x276>
 80107a2:	a201      	add	r2, pc, #4	; (adr r2, 80107a8 <USBD_GetDescriptor+0x2c>)
 80107a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107a8:	080107c5 	.word	0x080107c5
 80107ac:	080107dd 	.word	0x080107dd
 80107b0:	0801081d 	.word	0x0801081d
 80107b4:	080109f3 	.word	0x080109f3
 80107b8:	080109f3 	.word	0x080109f3
 80107bc:	08010993 	.word	0x08010993
 80107c0:	080109bf 	.word	0x080109bf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	7c12      	ldrb	r2, [r2, #16]
 80107d0:	f107 0108 	add.w	r1, r7, #8
 80107d4:	4610      	mov	r0, r2
 80107d6:	4798      	blx	r3
 80107d8:	60f8      	str	r0, [r7, #12]
      break;
 80107da:	e112      	b.n	8010a02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	7c1b      	ldrb	r3, [r3, #16]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d10d      	bne.n	8010800 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107ec:	f107 0208 	add.w	r2, r7, #8
 80107f0:	4610      	mov	r0, r2
 80107f2:	4798      	blx	r3
 80107f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	3301      	adds	r3, #1
 80107fa:	2202      	movs	r2, #2
 80107fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80107fe:	e100      	b.n	8010a02 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010808:	f107 0208 	add.w	r2, r7, #8
 801080c:	4610      	mov	r0, r2
 801080e:	4798      	blx	r3
 8010810:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	3301      	adds	r3, #1
 8010816:	2202      	movs	r2, #2
 8010818:	701a      	strb	r2, [r3, #0]
      break;
 801081a:	e0f2      	b.n	8010a02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	885b      	ldrh	r3, [r3, #2]
 8010820:	b2db      	uxtb	r3, r3
 8010822:	2b05      	cmp	r3, #5
 8010824:	f200 80ac 	bhi.w	8010980 <USBD_GetDescriptor+0x204>
 8010828:	a201      	add	r2, pc, #4	; (adr r2, 8010830 <USBD_GetDescriptor+0xb4>)
 801082a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801082e:	bf00      	nop
 8010830:	08010849 	.word	0x08010849
 8010834:	0801087d 	.word	0x0801087d
 8010838:	080108b1 	.word	0x080108b1
 801083c:	080108e5 	.word	0x080108e5
 8010840:	08010919 	.word	0x08010919
 8010844:	0801094d 	.word	0x0801094d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801084e:	685b      	ldr	r3, [r3, #4]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d00b      	beq.n	801086c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801085a:	685b      	ldr	r3, [r3, #4]
 801085c:	687a      	ldr	r2, [r7, #4]
 801085e:	7c12      	ldrb	r2, [r2, #16]
 8010860:	f107 0108 	add.w	r1, r7, #8
 8010864:	4610      	mov	r0, r2
 8010866:	4798      	blx	r3
 8010868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801086a:	e091      	b.n	8010990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801086c:	6839      	ldr	r1, [r7, #0]
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f000 facb 	bl	8010e0a <USBD_CtlError>
            err++;
 8010874:	7afb      	ldrb	r3, [r7, #11]
 8010876:	3301      	adds	r3, #1
 8010878:	72fb      	strb	r3, [r7, #11]
          break;
 801087a:	e089      	b.n	8010990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010882:	689b      	ldr	r3, [r3, #8]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d00b      	beq.n	80108a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801088e:	689b      	ldr	r3, [r3, #8]
 8010890:	687a      	ldr	r2, [r7, #4]
 8010892:	7c12      	ldrb	r2, [r2, #16]
 8010894:	f107 0108 	add.w	r1, r7, #8
 8010898:	4610      	mov	r0, r2
 801089a:	4798      	blx	r3
 801089c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801089e:	e077      	b.n	8010990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80108a0:	6839      	ldr	r1, [r7, #0]
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f000 fab1 	bl	8010e0a <USBD_CtlError>
            err++;
 80108a8:	7afb      	ldrb	r3, [r7, #11]
 80108aa:	3301      	adds	r3, #1
 80108ac:	72fb      	strb	r3, [r7, #11]
          break;
 80108ae:	e06f      	b.n	8010990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80108b6:	68db      	ldr	r3, [r3, #12]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d00b      	beq.n	80108d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80108c2:	68db      	ldr	r3, [r3, #12]
 80108c4:	687a      	ldr	r2, [r7, #4]
 80108c6:	7c12      	ldrb	r2, [r2, #16]
 80108c8:	f107 0108 	add.w	r1, r7, #8
 80108cc:	4610      	mov	r0, r2
 80108ce:	4798      	blx	r3
 80108d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80108d2:	e05d      	b.n	8010990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80108d4:	6839      	ldr	r1, [r7, #0]
 80108d6:	6878      	ldr	r0, [r7, #4]
 80108d8:	f000 fa97 	bl	8010e0a <USBD_CtlError>
            err++;
 80108dc:	7afb      	ldrb	r3, [r7, #11]
 80108de:	3301      	adds	r3, #1
 80108e0:	72fb      	strb	r3, [r7, #11]
          break;
 80108e2:	e055      	b.n	8010990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80108ea:	691b      	ldr	r3, [r3, #16]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d00b      	beq.n	8010908 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80108f6:	691b      	ldr	r3, [r3, #16]
 80108f8:	687a      	ldr	r2, [r7, #4]
 80108fa:	7c12      	ldrb	r2, [r2, #16]
 80108fc:	f107 0108 	add.w	r1, r7, #8
 8010900:	4610      	mov	r0, r2
 8010902:	4798      	blx	r3
 8010904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010906:	e043      	b.n	8010990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010908:	6839      	ldr	r1, [r7, #0]
 801090a:	6878      	ldr	r0, [r7, #4]
 801090c:	f000 fa7d 	bl	8010e0a <USBD_CtlError>
            err++;
 8010910:	7afb      	ldrb	r3, [r7, #11]
 8010912:	3301      	adds	r3, #1
 8010914:	72fb      	strb	r3, [r7, #11]
          break;
 8010916:	e03b      	b.n	8010990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801091e:	695b      	ldr	r3, [r3, #20]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d00b      	beq.n	801093c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801092a:	695b      	ldr	r3, [r3, #20]
 801092c:	687a      	ldr	r2, [r7, #4]
 801092e:	7c12      	ldrb	r2, [r2, #16]
 8010930:	f107 0108 	add.w	r1, r7, #8
 8010934:	4610      	mov	r0, r2
 8010936:	4798      	blx	r3
 8010938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801093a:	e029      	b.n	8010990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801093c:	6839      	ldr	r1, [r7, #0]
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f000 fa63 	bl	8010e0a <USBD_CtlError>
            err++;
 8010944:	7afb      	ldrb	r3, [r7, #11]
 8010946:	3301      	adds	r3, #1
 8010948:	72fb      	strb	r3, [r7, #11]
          break;
 801094a:	e021      	b.n	8010990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010952:	699b      	ldr	r3, [r3, #24]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d00b      	beq.n	8010970 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801095e:	699b      	ldr	r3, [r3, #24]
 8010960:	687a      	ldr	r2, [r7, #4]
 8010962:	7c12      	ldrb	r2, [r2, #16]
 8010964:	f107 0108 	add.w	r1, r7, #8
 8010968:	4610      	mov	r0, r2
 801096a:	4798      	blx	r3
 801096c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801096e:	e00f      	b.n	8010990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010970:	6839      	ldr	r1, [r7, #0]
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f000 fa49 	bl	8010e0a <USBD_CtlError>
            err++;
 8010978:	7afb      	ldrb	r3, [r7, #11]
 801097a:	3301      	adds	r3, #1
 801097c:	72fb      	strb	r3, [r7, #11]
          break;
 801097e:	e007      	b.n	8010990 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010980:	6839      	ldr	r1, [r7, #0]
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f000 fa41 	bl	8010e0a <USBD_CtlError>
          err++;
 8010988:	7afb      	ldrb	r3, [r7, #11]
 801098a:	3301      	adds	r3, #1
 801098c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801098e:	bf00      	nop
      }
      break;
 8010990:	e037      	b.n	8010a02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	7c1b      	ldrb	r3, [r3, #16]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d109      	bne.n	80109ae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109a2:	f107 0208 	add.w	r2, r7, #8
 80109a6:	4610      	mov	r0, r2
 80109a8:	4798      	blx	r3
 80109aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80109ac:	e029      	b.n	8010a02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80109ae:	6839      	ldr	r1, [r7, #0]
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f000 fa2a 	bl	8010e0a <USBD_CtlError>
        err++;
 80109b6:	7afb      	ldrb	r3, [r7, #11]
 80109b8:	3301      	adds	r3, #1
 80109ba:	72fb      	strb	r3, [r7, #11]
      break;
 80109bc:	e021      	b.n	8010a02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	7c1b      	ldrb	r3, [r3, #16]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d10d      	bne.n	80109e2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109ce:	f107 0208 	add.w	r2, r7, #8
 80109d2:	4610      	mov	r0, r2
 80109d4:	4798      	blx	r3
 80109d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	3301      	adds	r3, #1
 80109dc:	2207      	movs	r2, #7
 80109de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80109e0:	e00f      	b.n	8010a02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80109e2:	6839      	ldr	r1, [r7, #0]
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f000 fa10 	bl	8010e0a <USBD_CtlError>
        err++;
 80109ea:	7afb      	ldrb	r3, [r7, #11]
 80109ec:	3301      	adds	r3, #1
 80109ee:	72fb      	strb	r3, [r7, #11]
      break;
 80109f0:	e007      	b.n	8010a02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80109f2:	6839      	ldr	r1, [r7, #0]
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f000 fa08 	bl	8010e0a <USBD_CtlError>
      err++;
 80109fa:	7afb      	ldrb	r3, [r7, #11]
 80109fc:	3301      	adds	r3, #1
 80109fe:	72fb      	strb	r3, [r7, #11]
      break;
 8010a00:	bf00      	nop
  }

  if (err != 0U)
 8010a02:	7afb      	ldrb	r3, [r7, #11]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d11e      	bne.n	8010a46 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010a08:	683b      	ldr	r3, [r7, #0]
 8010a0a:	88db      	ldrh	r3, [r3, #6]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d016      	beq.n	8010a3e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8010a10:	893b      	ldrh	r3, [r7, #8]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d00e      	beq.n	8010a34 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	88da      	ldrh	r2, [r3, #6]
 8010a1a:	893b      	ldrh	r3, [r7, #8]
 8010a1c:	4293      	cmp	r3, r2
 8010a1e:	bf28      	it	cs
 8010a20:	4613      	movcs	r3, r2
 8010a22:	b29b      	uxth	r3, r3
 8010a24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010a26:	893b      	ldrh	r3, [r7, #8]
 8010a28:	461a      	mov	r2, r3
 8010a2a:	68f9      	ldr	r1, [r7, #12]
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	f000 f9fd 	bl	8010e2c <USBD_CtlSendData>
 8010a32:	e009      	b.n	8010a48 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010a34:	6839      	ldr	r1, [r7, #0]
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f000 f9e7 	bl	8010e0a <USBD_CtlError>
 8010a3c:	e004      	b.n	8010a48 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f000 fa31 	bl	8010ea6 <USBD_CtlSendStatus>
 8010a44:	e000      	b.n	8010a48 <USBD_GetDescriptor+0x2cc>
    return;
 8010a46:	bf00      	nop
  }
}
 8010a48:	3710      	adds	r7, #16
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}
 8010a4e:	bf00      	nop

08010a50 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b084      	sub	sp, #16
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
 8010a58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	889b      	ldrh	r3, [r3, #4]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d131      	bne.n	8010ac6 <USBD_SetAddress+0x76>
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	88db      	ldrh	r3, [r3, #6]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d12d      	bne.n	8010ac6 <USBD_SetAddress+0x76>
 8010a6a:	683b      	ldr	r3, [r7, #0]
 8010a6c:	885b      	ldrh	r3, [r3, #2]
 8010a6e:	2b7f      	cmp	r3, #127	; 0x7f
 8010a70:	d829      	bhi.n	8010ac6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	885b      	ldrh	r3, [r3, #2]
 8010a76:	b2db      	uxtb	r3, r3
 8010a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a84:	b2db      	uxtb	r3, r3
 8010a86:	2b03      	cmp	r3, #3
 8010a88:	d104      	bne.n	8010a94 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010a8a:	6839      	ldr	r1, [r7, #0]
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f000 f9bc 	bl	8010e0a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a92:	e01d      	b.n	8010ad0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	7bfa      	ldrb	r2, [r7, #15]
 8010a98:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010a9c:	7bfb      	ldrb	r3, [r7, #15]
 8010a9e:	4619      	mov	r1, r3
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f001 ff45 	bl	8012930 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f000 f9fd 	bl	8010ea6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010aac:	7bfb      	ldrb	r3, [r7, #15]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d004      	beq.n	8010abc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2202      	movs	r2, #2
 8010ab6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010aba:	e009      	b.n	8010ad0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2201      	movs	r2, #1
 8010ac0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ac4:	e004      	b.n	8010ad0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010ac6:	6839      	ldr	r1, [r7, #0]
 8010ac8:	6878      	ldr	r0, [r7, #4]
 8010aca:	f000 f99e 	bl	8010e0a <USBD_CtlError>
  }
}
 8010ace:	bf00      	nop
 8010ad0:	bf00      	nop
 8010ad2:	3710      	adds	r7, #16
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd80      	pop	{r7, pc}

08010ad8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b084      	sub	sp, #16
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	885b      	ldrh	r3, [r3, #2]
 8010aea:	b2da      	uxtb	r2, r3
 8010aec:	4b4e      	ldr	r3, [pc, #312]	; (8010c28 <USBD_SetConfig+0x150>)
 8010aee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010af0:	4b4d      	ldr	r3, [pc, #308]	; (8010c28 <USBD_SetConfig+0x150>)
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	2b01      	cmp	r3, #1
 8010af6:	d905      	bls.n	8010b04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010af8:	6839      	ldr	r1, [r7, #0]
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f000 f985 	bl	8010e0a <USBD_CtlError>
    return USBD_FAIL;
 8010b00:	2303      	movs	r3, #3
 8010b02:	e08c      	b.n	8010c1e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b0a:	b2db      	uxtb	r3, r3
 8010b0c:	2b02      	cmp	r3, #2
 8010b0e:	d002      	beq.n	8010b16 <USBD_SetConfig+0x3e>
 8010b10:	2b03      	cmp	r3, #3
 8010b12:	d029      	beq.n	8010b68 <USBD_SetConfig+0x90>
 8010b14:	e075      	b.n	8010c02 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010b16:	4b44      	ldr	r3, [pc, #272]	; (8010c28 <USBD_SetConfig+0x150>)
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d020      	beq.n	8010b60 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010b1e:	4b42      	ldr	r3, [pc, #264]	; (8010c28 <USBD_SetConfig+0x150>)
 8010b20:	781b      	ldrb	r3, [r3, #0]
 8010b22:	461a      	mov	r2, r3
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010b28:	4b3f      	ldr	r3, [pc, #252]	; (8010c28 <USBD_SetConfig+0x150>)
 8010b2a:	781b      	ldrb	r3, [r3, #0]
 8010b2c:	4619      	mov	r1, r3
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f7ff f83d 	bl	800fbae <USBD_SetClassConfig>
 8010b34:	4603      	mov	r3, r0
 8010b36:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010b38:	7bfb      	ldrb	r3, [r7, #15]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d008      	beq.n	8010b50 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010b3e:	6839      	ldr	r1, [r7, #0]
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f000 f962 	bl	8010e0a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2202      	movs	r2, #2
 8010b4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010b4e:	e065      	b.n	8010c1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	f000 f9a8 	bl	8010ea6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2203      	movs	r2, #3
 8010b5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010b5e:	e05d      	b.n	8010c1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f000 f9a0 	bl	8010ea6 <USBD_CtlSendStatus>
      break;
 8010b66:	e059      	b.n	8010c1c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010b68:	4b2f      	ldr	r3, [pc, #188]	; (8010c28 <USBD_SetConfig+0x150>)
 8010b6a:	781b      	ldrb	r3, [r3, #0]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d112      	bne.n	8010b96 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2202      	movs	r2, #2
 8010b74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8010b78:	4b2b      	ldr	r3, [pc, #172]	; (8010c28 <USBD_SetConfig+0x150>)
 8010b7a:	781b      	ldrb	r3, [r3, #0]
 8010b7c:	461a      	mov	r2, r3
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010b82:	4b29      	ldr	r3, [pc, #164]	; (8010c28 <USBD_SetConfig+0x150>)
 8010b84:	781b      	ldrb	r3, [r3, #0]
 8010b86:	4619      	mov	r1, r3
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	f7ff f82c 	bl	800fbe6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f000 f989 	bl	8010ea6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010b94:	e042      	b.n	8010c1c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010b96:	4b24      	ldr	r3, [pc, #144]	; (8010c28 <USBD_SetConfig+0x150>)
 8010b98:	781b      	ldrb	r3, [r3, #0]
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	685b      	ldr	r3, [r3, #4]
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d02a      	beq.n	8010bfa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	685b      	ldr	r3, [r3, #4]
 8010ba8:	b2db      	uxtb	r3, r3
 8010baa:	4619      	mov	r1, r3
 8010bac:	6878      	ldr	r0, [r7, #4]
 8010bae:	f7ff f81a 	bl	800fbe6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010bb2:	4b1d      	ldr	r3, [pc, #116]	; (8010c28 <USBD_SetConfig+0x150>)
 8010bb4:	781b      	ldrb	r3, [r3, #0]
 8010bb6:	461a      	mov	r2, r3
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010bbc:	4b1a      	ldr	r3, [pc, #104]	; (8010c28 <USBD_SetConfig+0x150>)
 8010bbe:	781b      	ldrb	r3, [r3, #0]
 8010bc0:	4619      	mov	r1, r3
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f7fe fff3 	bl	800fbae <USBD_SetClassConfig>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010bcc:	7bfb      	ldrb	r3, [r7, #15]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d00f      	beq.n	8010bf2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010bd2:	6839      	ldr	r1, [r7, #0]
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f000 f918 	bl	8010e0a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	685b      	ldr	r3, [r3, #4]
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	4619      	mov	r1, r3
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f7fe ffff 	bl	800fbe6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2202      	movs	r2, #2
 8010bec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010bf0:	e014      	b.n	8010c1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f000 f957 	bl	8010ea6 <USBD_CtlSendStatus>
      break;
 8010bf8:	e010      	b.n	8010c1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f000 f953 	bl	8010ea6 <USBD_CtlSendStatus>
      break;
 8010c00:	e00c      	b.n	8010c1c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010c02:	6839      	ldr	r1, [r7, #0]
 8010c04:	6878      	ldr	r0, [r7, #4]
 8010c06:	f000 f900 	bl	8010e0a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010c0a:	4b07      	ldr	r3, [pc, #28]	; (8010c28 <USBD_SetConfig+0x150>)
 8010c0c:	781b      	ldrb	r3, [r3, #0]
 8010c0e:	4619      	mov	r1, r3
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f7fe ffe8 	bl	800fbe6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010c16:	2303      	movs	r3, #3
 8010c18:	73fb      	strb	r3, [r7, #15]
      break;
 8010c1a:	bf00      	nop
  }

  return ret;
 8010c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c1e:	4618      	mov	r0, r3
 8010c20:	3710      	adds	r7, #16
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}
 8010c26:	bf00      	nop
 8010c28:	20000ea8 	.word	0x20000ea8

08010c2c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b082      	sub	sp, #8
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
 8010c34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	88db      	ldrh	r3, [r3, #6]
 8010c3a:	2b01      	cmp	r3, #1
 8010c3c:	d004      	beq.n	8010c48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010c3e:	6839      	ldr	r1, [r7, #0]
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f000 f8e2 	bl	8010e0a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010c46:	e023      	b.n	8010c90 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c4e:	b2db      	uxtb	r3, r3
 8010c50:	2b02      	cmp	r3, #2
 8010c52:	dc02      	bgt.n	8010c5a <USBD_GetConfig+0x2e>
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	dc03      	bgt.n	8010c60 <USBD_GetConfig+0x34>
 8010c58:	e015      	b.n	8010c86 <USBD_GetConfig+0x5a>
 8010c5a:	2b03      	cmp	r3, #3
 8010c5c:	d00b      	beq.n	8010c76 <USBD_GetConfig+0x4a>
 8010c5e:	e012      	b.n	8010c86 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2200      	movs	r2, #0
 8010c64:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	3308      	adds	r3, #8
 8010c6a:	2201      	movs	r2, #1
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f000 f8dc 	bl	8010e2c <USBD_CtlSendData>
        break;
 8010c74:	e00c      	b.n	8010c90 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	3304      	adds	r3, #4
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	4619      	mov	r1, r3
 8010c7e:	6878      	ldr	r0, [r7, #4]
 8010c80:	f000 f8d4 	bl	8010e2c <USBD_CtlSendData>
        break;
 8010c84:	e004      	b.n	8010c90 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010c86:	6839      	ldr	r1, [r7, #0]
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f000 f8be 	bl	8010e0a <USBD_CtlError>
        break;
 8010c8e:	bf00      	nop
}
 8010c90:	bf00      	nop
 8010c92:	3708      	adds	r7, #8
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}

08010c98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ca8:	b2db      	uxtb	r3, r3
 8010caa:	3b01      	subs	r3, #1
 8010cac:	2b02      	cmp	r3, #2
 8010cae:	d81e      	bhi.n	8010cee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	88db      	ldrh	r3, [r3, #6]
 8010cb4:	2b02      	cmp	r3, #2
 8010cb6:	d004      	beq.n	8010cc2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010cb8:	6839      	ldr	r1, [r7, #0]
 8010cba:	6878      	ldr	r0, [r7, #4]
 8010cbc:	f000 f8a5 	bl	8010e0a <USBD_CtlError>
        break;
 8010cc0:	e01a      	b.n	8010cf8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	2201      	movs	r2, #1
 8010cc6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d005      	beq.n	8010cde <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	68db      	ldr	r3, [r3, #12]
 8010cd6:	f043 0202 	orr.w	r2, r3, #2
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	330c      	adds	r3, #12
 8010ce2:	2202      	movs	r2, #2
 8010ce4:	4619      	mov	r1, r3
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f000 f8a0 	bl	8010e2c <USBD_CtlSendData>
      break;
 8010cec:	e004      	b.n	8010cf8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010cee:	6839      	ldr	r1, [r7, #0]
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f000 f88a 	bl	8010e0a <USBD_CtlError>
      break;
 8010cf6:	bf00      	nop
  }
}
 8010cf8:	bf00      	nop
 8010cfa:	3708      	adds	r7, #8
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}

08010d00 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b082      	sub	sp, #8
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010d0a:	683b      	ldr	r3, [r7, #0]
 8010d0c:	885b      	ldrh	r3, [r3, #2]
 8010d0e:	2b01      	cmp	r3, #1
 8010d10:	d107      	bne.n	8010d22 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	2201      	movs	r2, #1
 8010d16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010d1a:	6878      	ldr	r0, [r7, #4]
 8010d1c:	f000 f8c3 	bl	8010ea6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010d20:	e013      	b.n	8010d4a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	885b      	ldrh	r3, [r3, #2]
 8010d26:	2b02      	cmp	r3, #2
 8010d28:	d10b      	bne.n	8010d42 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	889b      	ldrh	r3, [r3, #4]
 8010d2e:	0a1b      	lsrs	r3, r3, #8
 8010d30:	b29b      	uxth	r3, r3
 8010d32:	b2da      	uxtb	r2, r3
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f000 f8b3 	bl	8010ea6 <USBD_CtlSendStatus>
}
 8010d40:	e003      	b.n	8010d4a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010d42:	6839      	ldr	r1, [r7, #0]
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f000 f860 	bl	8010e0a <USBD_CtlError>
}
 8010d4a:	bf00      	nop
 8010d4c:	3708      	adds	r7, #8
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}

08010d52 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d52:	b580      	push	{r7, lr}
 8010d54:	b082      	sub	sp, #8
 8010d56:	af00      	add	r7, sp, #0
 8010d58:	6078      	str	r0, [r7, #4]
 8010d5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d62:	b2db      	uxtb	r3, r3
 8010d64:	3b01      	subs	r3, #1
 8010d66:	2b02      	cmp	r3, #2
 8010d68:	d80b      	bhi.n	8010d82 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	885b      	ldrh	r3, [r3, #2]
 8010d6e:	2b01      	cmp	r3, #1
 8010d70:	d10c      	bne.n	8010d8c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	2200      	movs	r2, #0
 8010d76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f000 f893 	bl	8010ea6 <USBD_CtlSendStatus>
      }
      break;
 8010d80:	e004      	b.n	8010d8c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010d82:	6839      	ldr	r1, [r7, #0]
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f000 f840 	bl	8010e0a <USBD_CtlError>
      break;
 8010d8a:	e000      	b.n	8010d8e <USBD_ClrFeature+0x3c>
      break;
 8010d8c:	bf00      	nop
  }
}
 8010d8e:	bf00      	nop
 8010d90:	3708      	adds	r7, #8
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}

08010d96 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010d96:	b580      	push	{r7, lr}
 8010d98:	b084      	sub	sp, #16
 8010d9a:	af00      	add	r7, sp, #0
 8010d9c:	6078      	str	r0, [r7, #4]
 8010d9e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	781a      	ldrb	r2, [r3, #0]
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	3301      	adds	r3, #1
 8010db0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	781a      	ldrb	r2, [r3, #0]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	3301      	adds	r3, #1
 8010dbe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010dc0:	68f8      	ldr	r0, [r7, #12]
 8010dc2:	f7ff fa40 	bl	8010246 <SWAPBYTE>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	461a      	mov	r2, r3
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	3301      	adds	r3, #1
 8010dd2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010dda:	68f8      	ldr	r0, [r7, #12]
 8010ddc:	f7ff fa33 	bl	8010246 <SWAPBYTE>
 8010de0:	4603      	mov	r3, r0
 8010de2:	461a      	mov	r2, r3
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	3301      	adds	r3, #1
 8010dec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	3301      	adds	r3, #1
 8010df2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010df4:	68f8      	ldr	r0, [r7, #12]
 8010df6:	f7ff fa26 	bl	8010246 <SWAPBYTE>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	461a      	mov	r2, r3
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	80da      	strh	r2, [r3, #6]
}
 8010e02:	bf00      	nop
 8010e04:	3710      	adds	r7, #16
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}

08010e0a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e0a:	b580      	push	{r7, lr}
 8010e0c:	b082      	sub	sp, #8
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
 8010e12:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010e14:	2180      	movs	r1, #128	; 0x80
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f001 fd20 	bl	801285c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010e1c:	2100      	movs	r1, #0
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	f001 fd1c 	bl	801285c <USBD_LL_StallEP>
}
 8010e24:	bf00      	nop
 8010e26:	3708      	adds	r7, #8
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}

08010e2c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b084      	sub	sp, #16
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	60f8      	str	r0, [r7, #12]
 8010e34:	60b9      	str	r1, [r7, #8]
 8010e36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	2202      	movs	r2, #2
 8010e3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	687a      	ldr	r2, [r7, #4]
 8010e44:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	687a      	ldr	r2, [r7, #4]
 8010e4a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	68ba      	ldr	r2, [r7, #8]
 8010e50:	2100      	movs	r1, #0
 8010e52:	68f8      	ldr	r0, [r7, #12]
 8010e54:	f001 fd8b 	bl	801296e <USBD_LL_Transmit>

  return USBD_OK;
 8010e58:	2300      	movs	r3, #0
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3710      	adds	r7, #16
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}

08010e62 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010e62:	b580      	push	{r7, lr}
 8010e64:	b084      	sub	sp, #16
 8010e66:	af00      	add	r7, sp, #0
 8010e68:	60f8      	str	r0, [r7, #12]
 8010e6a:	60b9      	str	r1, [r7, #8]
 8010e6c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	68ba      	ldr	r2, [r7, #8]
 8010e72:	2100      	movs	r1, #0
 8010e74:	68f8      	ldr	r0, [r7, #12]
 8010e76:	f001 fd7a 	bl	801296e <USBD_LL_Transmit>

  return USBD_OK;
 8010e7a:	2300      	movs	r3, #0
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3710      	adds	r7, #16
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}

08010e84 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	60f8      	str	r0, [r7, #12]
 8010e8c:	60b9      	str	r1, [r7, #8]
 8010e8e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	68ba      	ldr	r2, [r7, #8]
 8010e94:	2100      	movs	r1, #0
 8010e96:	68f8      	ldr	r0, [r7, #12]
 8010e98:	f001 fd8a 	bl	80129b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010e9c:	2300      	movs	r3, #0
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	3710      	adds	r7, #16
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}

08010ea6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010ea6:	b580      	push	{r7, lr}
 8010ea8:	b082      	sub	sp, #8
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2204      	movs	r2, #4
 8010eb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	2200      	movs	r2, #0
 8010eba:	2100      	movs	r1, #0
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f001 fd56 	bl	801296e <USBD_LL_Transmit>

  return USBD_OK;
 8010ec2:	2300      	movs	r3, #0
}
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	3708      	adds	r7, #8
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}

08010ecc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	2205      	movs	r2, #5
 8010ed8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010edc:	2300      	movs	r3, #0
 8010ede:	2200      	movs	r2, #0
 8010ee0:	2100      	movs	r1, #0
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f001 fd64 	bl	80129b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010ee8:	2300      	movs	r3, #0
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3708      	adds	r7, #8
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}

08010ef2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010ef2:	b480      	push	{r7}
 8010ef4:	b083      	sub	sp, #12
 8010ef6:	af00      	add	r7, sp, #0
 8010ef8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	f103 0208 	add.w	r2, r3, #8
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f04f 32ff 	mov.w	r2, #4294967295
 8010f0a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	f103 0208 	add.w	r2, r3, #8
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f103 0208 	add.w	r2, r3, #8
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2200      	movs	r2, #0
 8010f24:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010f26:	bf00      	nop
 8010f28:	370c      	adds	r7, #12
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f30:	4770      	bx	lr

08010f32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010f32:	b480      	push	{r7}
 8010f34:	b083      	sub	sp, #12
 8010f36:	af00      	add	r7, sp, #0
 8010f38:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010f40:	bf00      	nop
 8010f42:	370c      	adds	r7, #12
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr

08010f4c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010f4c:	b480      	push	{r7}
 8010f4e:	b085      	sub	sp, #20
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	68fa      	ldr	r2, [r7, #12]
 8010f60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	689a      	ldr	r2, [r3, #8]
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	689b      	ldr	r3, [r3, #8]
 8010f6e:	683a      	ldr	r2, [r7, #0]
 8010f70:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	683a      	ldr	r2, [r7, #0]
 8010f76:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	687a      	ldr	r2, [r7, #4]
 8010f7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	1c5a      	adds	r2, r3, #1
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	601a      	str	r2, [r3, #0]
}
 8010f88:	bf00      	nop
 8010f8a:	3714      	adds	r7, #20
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f92:	4770      	bx	lr

08010f94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010f94:	b480      	push	{r7}
 8010f96:	b085      	sub	sp, #20
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010fa4:	68bb      	ldr	r3, [r7, #8]
 8010fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010faa:	d103      	bne.n	8010fb4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	691b      	ldr	r3, [r3, #16]
 8010fb0:	60fb      	str	r3, [r7, #12]
 8010fb2:	e00c      	b.n	8010fce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	3308      	adds	r3, #8
 8010fb8:	60fb      	str	r3, [r7, #12]
 8010fba:	e002      	b.n	8010fc2 <vListInsert+0x2e>
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	685b      	ldr	r3, [r3, #4]
 8010fc0:	60fb      	str	r3, [r7, #12]
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	685b      	ldr	r3, [r3, #4]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	68ba      	ldr	r2, [r7, #8]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d2f6      	bcs.n	8010fbc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	685a      	ldr	r2, [r3, #4]
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	685b      	ldr	r3, [r3, #4]
 8010fda:	683a      	ldr	r2, [r7, #0]
 8010fdc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	68fa      	ldr	r2, [r7, #12]
 8010fe2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	683a      	ldr	r2, [r7, #0]
 8010fe8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	687a      	ldr	r2, [r7, #4]
 8010fee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	1c5a      	adds	r2, r3, #1
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	601a      	str	r2, [r3, #0]
}
 8010ffa:	bf00      	nop
 8010ffc:	3714      	adds	r7, #20
 8010ffe:	46bd      	mov	sp, r7
 8011000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011004:	4770      	bx	lr

08011006 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011006:	b480      	push	{r7}
 8011008:	b085      	sub	sp, #20
 801100a:	af00      	add	r7, sp, #0
 801100c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	691b      	ldr	r3, [r3, #16]
 8011012:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	685b      	ldr	r3, [r3, #4]
 8011018:	687a      	ldr	r2, [r7, #4]
 801101a:	6892      	ldr	r2, [r2, #8]
 801101c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	689b      	ldr	r3, [r3, #8]
 8011022:	687a      	ldr	r2, [r7, #4]
 8011024:	6852      	ldr	r2, [r2, #4]
 8011026:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	685b      	ldr	r3, [r3, #4]
 801102c:	687a      	ldr	r2, [r7, #4]
 801102e:	429a      	cmp	r2, r3
 8011030:	d103      	bne.n	801103a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	689a      	ldr	r2, [r3, #8]
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	2200      	movs	r2, #0
 801103e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	1e5a      	subs	r2, r3, #1
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	681b      	ldr	r3, [r3, #0]
}
 801104e:	4618      	mov	r0, r3
 8011050:	3714      	adds	r7, #20
 8011052:	46bd      	mov	sp, r7
 8011054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011058:	4770      	bx	lr

0801105a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801105a:	b580      	push	{r7, lr}
 801105c:	b08e      	sub	sp, #56	; 0x38
 801105e:	af04      	add	r7, sp, #16
 8011060:	60f8      	str	r0, [r7, #12]
 8011062:	60b9      	str	r1, [r7, #8]
 8011064:	607a      	str	r2, [r7, #4]
 8011066:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801106a:	2b00      	cmp	r3, #0
 801106c:	d10a      	bne.n	8011084 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801106e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011072:	f383 8811 	msr	BASEPRI, r3
 8011076:	f3bf 8f6f 	isb	sy
 801107a:	f3bf 8f4f 	dsb	sy
 801107e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011080:	bf00      	nop
 8011082:	e7fe      	b.n	8011082 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011086:	2b00      	cmp	r3, #0
 8011088:	d10a      	bne.n	80110a0 <xTaskCreateStatic+0x46>
	__asm volatile
 801108a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801108e:	f383 8811 	msr	BASEPRI, r3
 8011092:	f3bf 8f6f 	isb	sy
 8011096:	f3bf 8f4f 	dsb	sy
 801109a:	61fb      	str	r3, [r7, #28]
}
 801109c:	bf00      	nop
 801109e:	e7fe      	b.n	801109e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80110a0:	2354      	movs	r3, #84	; 0x54
 80110a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	2b54      	cmp	r3, #84	; 0x54
 80110a8:	d00a      	beq.n	80110c0 <xTaskCreateStatic+0x66>
	__asm volatile
 80110aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ae:	f383 8811 	msr	BASEPRI, r3
 80110b2:	f3bf 8f6f 	isb	sy
 80110b6:	f3bf 8f4f 	dsb	sy
 80110ba:	61bb      	str	r3, [r7, #24]
}
 80110bc:	bf00      	nop
 80110be:	e7fe      	b.n	80110be <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80110c0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80110c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d01e      	beq.n	8011106 <xTaskCreateStatic+0xac>
 80110c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d01b      	beq.n	8011106 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80110ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110d0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80110d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110d6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80110d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110da:	2202      	movs	r2, #2
 80110dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80110e0:	2300      	movs	r3, #0
 80110e2:	9303      	str	r3, [sp, #12]
 80110e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e6:	9302      	str	r3, [sp, #8]
 80110e8:	f107 0314 	add.w	r3, r7, #20
 80110ec:	9301      	str	r3, [sp, #4]
 80110ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110f0:	9300      	str	r3, [sp, #0]
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	687a      	ldr	r2, [r7, #4]
 80110f6:	68b9      	ldr	r1, [r7, #8]
 80110f8:	68f8      	ldr	r0, [r7, #12]
 80110fa:	f000 f850 	bl	801119e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80110fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011100:	f000 f8d4 	bl	80112ac <prvAddNewTaskToReadyList>
 8011104:	e001      	b.n	801110a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011106:	2300      	movs	r3, #0
 8011108:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801110a:	697b      	ldr	r3, [r7, #20]
	}
 801110c:	4618      	mov	r0, r3
 801110e:	3728      	adds	r7, #40	; 0x28
 8011110:	46bd      	mov	sp, r7
 8011112:	bd80      	pop	{r7, pc}

08011114 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011114:	b580      	push	{r7, lr}
 8011116:	b08c      	sub	sp, #48	; 0x30
 8011118:	af04      	add	r7, sp, #16
 801111a:	60f8      	str	r0, [r7, #12]
 801111c:	60b9      	str	r1, [r7, #8]
 801111e:	603b      	str	r3, [r7, #0]
 8011120:	4613      	mov	r3, r2
 8011122:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011124:	88fb      	ldrh	r3, [r7, #6]
 8011126:	009b      	lsls	r3, r3, #2
 8011128:	4618      	mov	r0, r3
 801112a:	f001 f895 	bl	8012258 <pvPortMalloc>
 801112e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011130:	697b      	ldr	r3, [r7, #20]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d00e      	beq.n	8011154 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011136:	2054      	movs	r0, #84	; 0x54
 8011138:	f001 f88e 	bl	8012258 <pvPortMalloc>
 801113c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801113e:	69fb      	ldr	r3, [r7, #28]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d003      	beq.n	801114c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011144:	69fb      	ldr	r3, [r7, #28]
 8011146:	697a      	ldr	r2, [r7, #20]
 8011148:	631a      	str	r2, [r3, #48]	; 0x30
 801114a:	e005      	b.n	8011158 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801114c:	6978      	ldr	r0, [r7, #20]
 801114e:	f001 f94f 	bl	80123f0 <vPortFree>
 8011152:	e001      	b.n	8011158 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011154:	2300      	movs	r3, #0
 8011156:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011158:	69fb      	ldr	r3, [r7, #28]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d017      	beq.n	801118e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801115e:	69fb      	ldr	r3, [r7, #28]
 8011160:	2200      	movs	r2, #0
 8011162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011166:	88fa      	ldrh	r2, [r7, #6]
 8011168:	2300      	movs	r3, #0
 801116a:	9303      	str	r3, [sp, #12]
 801116c:	69fb      	ldr	r3, [r7, #28]
 801116e:	9302      	str	r3, [sp, #8]
 8011170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011172:	9301      	str	r3, [sp, #4]
 8011174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011176:	9300      	str	r3, [sp, #0]
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	68b9      	ldr	r1, [r7, #8]
 801117c:	68f8      	ldr	r0, [r7, #12]
 801117e:	f000 f80e 	bl	801119e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011182:	69f8      	ldr	r0, [r7, #28]
 8011184:	f000 f892 	bl	80112ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011188:	2301      	movs	r3, #1
 801118a:	61bb      	str	r3, [r7, #24]
 801118c:	e002      	b.n	8011194 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801118e:	f04f 33ff 	mov.w	r3, #4294967295
 8011192:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011194:	69bb      	ldr	r3, [r7, #24]
	}
 8011196:	4618      	mov	r0, r3
 8011198:	3720      	adds	r7, #32
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}

0801119e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801119e:	b580      	push	{r7, lr}
 80111a0:	b088      	sub	sp, #32
 80111a2:	af00      	add	r7, sp, #0
 80111a4:	60f8      	str	r0, [r7, #12]
 80111a6:	60b9      	str	r1, [r7, #8]
 80111a8:	607a      	str	r2, [r7, #4]
 80111aa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80111ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80111b6:	3b01      	subs	r3, #1
 80111b8:	009b      	lsls	r3, r3, #2
 80111ba:	4413      	add	r3, r2
 80111bc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80111be:	69bb      	ldr	r3, [r7, #24]
 80111c0:	f023 0307 	bic.w	r3, r3, #7
 80111c4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80111c6:	69bb      	ldr	r3, [r7, #24]
 80111c8:	f003 0307 	and.w	r3, r3, #7
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d00a      	beq.n	80111e6 <prvInitialiseNewTask+0x48>
	__asm volatile
 80111d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111d4:	f383 8811 	msr	BASEPRI, r3
 80111d8:	f3bf 8f6f 	isb	sy
 80111dc:	f3bf 8f4f 	dsb	sy
 80111e0:	617b      	str	r3, [r7, #20]
}
 80111e2:	bf00      	nop
 80111e4:	e7fe      	b.n	80111e4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d01f      	beq.n	801122c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80111ec:	2300      	movs	r3, #0
 80111ee:	61fb      	str	r3, [r7, #28]
 80111f0:	e012      	b.n	8011218 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80111f2:	68ba      	ldr	r2, [r7, #8]
 80111f4:	69fb      	ldr	r3, [r7, #28]
 80111f6:	4413      	add	r3, r2
 80111f8:	7819      	ldrb	r1, [r3, #0]
 80111fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111fc:	69fb      	ldr	r3, [r7, #28]
 80111fe:	4413      	add	r3, r2
 8011200:	3334      	adds	r3, #52	; 0x34
 8011202:	460a      	mov	r2, r1
 8011204:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011206:	68ba      	ldr	r2, [r7, #8]
 8011208:	69fb      	ldr	r3, [r7, #28]
 801120a:	4413      	add	r3, r2
 801120c:	781b      	ldrb	r3, [r3, #0]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d006      	beq.n	8011220 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011212:	69fb      	ldr	r3, [r7, #28]
 8011214:	3301      	adds	r3, #1
 8011216:	61fb      	str	r3, [r7, #28]
 8011218:	69fb      	ldr	r3, [r7, #28]
 801121a:	2b0f      	cmp	r3, #15
 801121c:	d9e9      	bls.n	80111f2 <prvInitialiseNewTask+0x54>
 801121e:	e000      	b.n	8011222 <prvInitialiseNewTask+0x84>
			{
				break;
 8011220:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011224:	2200      	movs	r2, #0
 8011226:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801122a:	e003      	b.n	8011234 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801122c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801122e:	2200      	movs	r2, #0
 8011230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011236:	2b06      	cmp	r3, #6
 8011238:	d901      	bls.n	801123e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801123a:	2306      	movs	r3, #6
 801123c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801123e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011242:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011248:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801124a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801124c:	2200      	movs	r2, #0
 801124e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011252:	3304      	adds	r3, #4
 8011254:	4618      	mov	r0, r3
 8011256:	f7ff fe6c 	bl	8010f32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801125a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801125c:	3318      	adds	r3, #24
 801125e:	4618      	mov	r0, r3
 8011260:	f7ff fe67 	bl	8010f32 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011268:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801126a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801126c:	f1c3 0207 	rsb	r2, r3, #7
 8011270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011272:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011278:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801127a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801127c:	2200      	movs	r2, #0
 801127e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011282:	2200      	movs	r2, #0
 8011284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011288:	683a      	ldr	r2, [r7, #0]
 801128a:	68f9      	ldr	r1, [r7, #12]
 801128c:	69b8      	ldr	r0, [r7, #24]
 801128e:	f000 fd93 	bl	8011db8 <pxPortInitialiseStack>
 8011292:	4602      	mov	r2, r0
 8011294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011296:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801129a:	2b00      	cmp	r3, #0
 801129c:	d002      	beq.n	80112a4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801129e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80112a4:	bf00      	nop
 80112a6:	3720      	adds	r7, #32
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}

080112ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b082      	sub	sp, #8
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80112b4:	f000 feae 	bl	8012014 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80112b8:	4b2a      	ldr	r3, [pc, #168]	; (8011364 <prvAddNewTaskToReadyList+0xb8>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	3301      	adds	r3, #1
 80112be:	4a29      	ldr	r2, [pc, #164]	; (8011364 <prvAddNewTaskToReadyList+0xb8>)
 80112c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80112c2:	4b29      	ldr	r3, [pc, #164]	; (8011368 <prvAddNewTaskToReadyList+0xbc>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d109      	bne.n	80112de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80112ca:	4a27      	ldr	r2, [pc, #156]	; (8011368 <prvAddNewTaskToReadyList+0xbc>)
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80112d0:	4b24      	ldr	r3, [pc, #144]	; (8011364 <prvAddNewTaskToReadyList+0xb8>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	2b01      	cmp	r3, #1
 80112d6:	d110      	bne.n	80112fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80112d8:	f000 fb16 	bl	8011908 <prvInitialiseTaskLists>
 80112dc:	e00d      	b.n	80112fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80112de:	4b23      	ldr	r3, [pc, #140]	; (801136c <prvAddNewTaskToReadyList+0xc0>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d109      	bne.n	80112fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80112e6:	4b20      	ldr	r3, [pc, #128]	; (8011368 <prvAddNewTaskToReadyList+0xbc>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112f0:	429a      	cmp	r2, r3
 80112f2:	d802      	bhi.n	80112fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80112f4:	4a1c      	ldr	r2, [pc, #112]	; (8011368 <prvAddNewTaskToReadyList+0xbc>)
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80112fa:	4b1d      	ldr	r3, [pc, #116]	; (8011370 <prvAddNewTaskToReadyList+0xc4>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	3301      	adds	r3, #1
 8011300:	4a1b      	ldr	r2, [pc, #108]	; (8011370 <prvAddNewTaskToReadyList+0xc4>)
 8011302:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011308:	2201      	movs	r2, #1
 801130a:	409a      	lsls	r2, r3
 801130c:	4b19      	ldr	r3, [pc, #100]	; (8011374 <prvAddNewTaskToReadyList+0xc8>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	4313      	orrs	r3, r2
 8011312:	4a18      	ldr	r2, [pc, #96]	; (8011374 <prvAddNewTaskToReadyList+0xc8>)
 8011314:	6013      	str	r3, [r2, #0]
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801131a:	4613      	mov	r3, r2
 801131c:	009b      	lsls	r3, r3, #2
 801131e:	4413      	add	r3, r2
 8011320:	009b      	lsls	r3, r3, #2
 8011322:	4a15      	ldr	r2, [pc, #84]	; (8011378 <prvAddNewTaskToReadyList+0xcc>)
 8011324:	441a      	add	r2, r3
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	3304      	adds	r3, #4
 801132a:	4619      	mov	r1, r3
 801132c:	4610      	mov	r0, r2
 801132e:	f7ff fe0d 	bl	8010f4c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011332:	f000 fe9f 	bl	8012074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011336:	4b0d      	ldr	r3, [pc, #52]	; (801136c <prvAddNewTaskToReadyList+0xc0>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d00e      	beq.n	801135c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801133e:	4b0a      	ldr	r3, [pc, #40]	; (8011368 <prvAddNewTaskToReadyList+0xbc>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011348:	429a      	cmp	r2, r3
 801134a:	d207      	bcs.n	801135c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801134c:	4b0b      	ldr	r3, [pc, #44]	; (801137c <prvAddNewTaskToReadyList+0xd0>)
 801134e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011352:	601a      	str	r2, [r3, #0]
 8011354:	f3bf 8f4f 	dsb	sy
 8011358:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801135c:	bf00      	nop
 801135e:	3708      	adds	r7, #8
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}
 8011364:	20000fac 	.word	0x20000fac
 8011368:	20000eac 	.word	0x20000eac
 801136c:	20000fb8 	.word	0x20000fb8
 8011370:	20000fc8 	.word	0x20000fc8
 8011374:	20000fb4 	.word	0x20000fb4
 8011378:	20000eb0 	.word	0x20000eb0
 801137c:	e000ed04 	.word	0xe000ed04

08011380 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8011380:	b580      	push	{r7, lr}
 8011382:	b08a      	sub	sp, #40	; 0x28
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801138a:	2300      	movs	r3, #0
 801138c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d10a      	bne.n	80113aa <vTaskDelayUntil+0x2a>
	__asm volatile
 8011394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011398:	f383 8811 	msr	BASEPRI, r3
 801139c:	f3bf 8f6f 	isb	sy
 80113a0:	f3bf 8f4f 	dsb	sy
 80113a4:	617b      	str	r3, [r7, #20]
}
 80113a6:	bf00      	nop
 80113a8:	e7fe      	b.n	80113a8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d10a      	bne.n	80113c6 <vTaskDelayUntil+0x46>
	__asm volatile
 80113b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b4:	f383 8811 	msr	BASEPRI, r3
 80113b8:	f3bf 8f6f 	isb	sy
 80113bc:	f3bf 8f4f 	dsb	sy
 80113c0:	613b      	str	r3, [r7, #16]
}
 80113c2:	bf00      	nop
 80113c4:	e7fe      	b.n	80113c4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80113c6:	4b2a      	ldr	r3, [pc, #168]	; (8011470 <vTaskDelayUntil+0xf0>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d00a      	beq.n	80113e4 <vTaskDelayUntil+0x64>
	__asm volatile
 80113ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113d2:	f383 8811 	msr	BASEPRI, r3
 80113d6:	f3bf 8f6f 	isb	sy
 80113da:	f3bf 8f4f 	dsb	sy
 80113de:	60fb      	str	r3, [r7, #12]
}
 80113e0:	bf00      	nop
 80113e2:	e7fe      	b.n	80113e2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80113e4:	f000 f8aa 	bl	801153c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80113e8:	4b22      	ldr	r3, [pc, #136]	; (8011474 <vTaskDelayUntil+0xf4>)
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	683a      	ldr	r2, [r7, #0]
 80113f4:	4413      	add	r3, r2
 80113f6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	6a3a      	ldr	r2, [r7, #32]
 80113fe:	429a      	cmp	r2, r3
 8011400:	d20b      	bcs.n	801141a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	69fa      	ldr	r2, [r7, #28]
 8011408:	429a      	cmp	r2, r3
 801140a:	d211      	bcs.n	8011430 <vTaskDelayUntil+0xb0>
 801140c:	69fa      	ldr	r2, [r7, #28]
 801140e:	6a3b      	ldr	r3, [r7, #32]
 8011410:	429a      	cmp	r2, r3
 8011412:	d90d      	bls.n	8011430 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8011414:	2301      	movs	r3, #1
 8011416:	627b      	str	r3, [r7, #36]	; 0x24
 8011418:	e00a      	b.n	8011430 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	69fa      	ldr	r2, [r7, #28]
 8011420:	429a      	cmp	r2, r3
 8011422:	d303      	bcc.n	801142c <vTaskDelayUntil+0xac>
 8011424:	69fa      	ldr	r2, [r7, #28]
 8011426:	6a3b      	ldr	r3, [r7, #32]
 8011428:	429a      	cmp	r2, r3
 801142a:	d901      	bls.n	8011430 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 801142c:	2301      	movs	r3, #1
 801142e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	69fa      	ldr	r2, [r7, #28]
 8011434:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8011436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011438:	2b00      	cmp	r3, #0
 801143a:	d006      	beq.n	801144a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801143c:	69fa      	ldr	r2, [r7, #28]
 801143e:	6a3b      	ldr	r3, [r7, #32]
 8011440:	1ad3      	subs	r3, r2, r3
 8011442:	2100      	movs	r1, #0
 8011444:	4618      	mov	r0, r3
 8011446:	f000 fc51 	bl	8011cec <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801144a:	f000 f885 	bl	8011558 <xTaskResumeAll>
 801144e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011450:	69bb      	ldr	r3, [r7, #24]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d107      	bne.n	8011466 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8011456:	4b08      	ldr	r3, [pc, #32]	; (8011478 <vTaskDelayUntil+0xf8>)
 8011458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801145c:	601a      	str	r2, [r3, #0]
 801145e:	f3bf 8f4f 	dsb	sy
 8011462:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011466:	bf00      	nop
 8011468:	3728      	adds	r7, #40	; 0x28
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}
 801146e:	bf00      	nop
 8011470:	20000fd4 	.word	0x20000fd4
 8011474:	20000fb0 	.word	0x20000fb0
 8011478:	e000ed04 	.word	0xe000ed04

0801147c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b08a      	sub	sp, #40	; 0x28
 8011480:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011482:	2300      	movs	r3, #0
 8011484:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011486:	2300      	movs	r3, #0
 8011488:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801148a:	463a      	mov	r2, r7
 801148c:	1d39      	adds	r1, r7, #4
 801148e:	f107 0308 	add.w	r3, r7, #8
 8011492:	4618      	mov	r0, r3
 8011494:	f7ef fd0a 	bl	8000eac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011498:	6839      	ldr	r1, [r7, #0]
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	68ba      	ldr	r2, [r7, #8]
 801149e:	9202      	str	r2, [sp, #8]
 80114a0:	9301      	str	r3, [sp, #4]
 80114a2:	2300      	movs	r3, #0
 80114a4:	9300      	str	r3, [sp, #0]
 80114a6:	2300      	movs	r3, #0
 80114a8:	460a      	mov	r2, r1
 80114aa:	491e      	ldr	r1, [pc, #120]	; (8011524 <vTaskStartScheduler+0xa8>)
 80114ac:	481e      	ldr	r0, [pc, #120]	; (8011528 <vTaskStartScheduler+0xac>)
 80114ae:	f7ff fdd4 	bl	801105a <xTaskCreateStatic>
 80114b2:	4603      	mov	r3, r0
 80114b4:	4a1d      	ldr	r2, [pc, #116]	; (801152c <vTaskStartScheduler+0xb0>)
 80114b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80114b8:	4b1c      	ldr	r3, [pc, #112]	; (801152c <vTaskStartScheduler+0xb0>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d002      	beq.n	80114c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80114c0:	2301      	movs	r3, #1
 80114c2:	617b      	str	r3, [r7, #20]
 80114c4:	e001      	b.n	80114ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80114c6:	2300      	movs	r3, #0
 80114c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	2b01      	cmp	r3, #1
 80114ce:	d116      	bne.n	80114fe <vTaskStartScheduler+0x82>
	__asm volatile
 80114d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114d4:	f383 8811 	msr	BASEPRI, r3
 80114d8:	f3bf 8f6f 	isb	sy
 80114dc:	f3bf 8f4f 	dsb	sy
 80114e0:	613b      	str	r3, [r7, #16]
}
 80114e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80114e4:	4b12      	ldr	r3, [pc, #72]	; (8011530 <vTaskStartScheduler+0xb4>)
 80114e6:	f04f 32ff 	mov.w	r2, #4294967295
 80114ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80114ec:	4b11      	ldr	r3, [pc, #68]	; (8011534 <vTaskStartScheduler+0xb8>)
 80114ee:	2201      	movs	r2, #1
 80114f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80114f2:	4b11      	ldr	r3, [pc, #68]	; (8011538 <vTaskStartScheduler+0xbc>)
 80114f4:	2200      	movs	r2, #0
 80114f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80114f8:	f000 fcea 	bl	8011ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80114fc:	e00e      	b.n	801151c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80114fe:	697b      	ldr	r3, [r7, #20]
 8011500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011504:	d10a      	bne.n	801151c <vTaskStartScheduler+0xa0>
	__asm volatile
 8011506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801150a:	f383 8811 	msr	BASEPRI, r3
 801150e:	f3bf 8f6f 	isb	sy
 8011512:	f3bf 8f4f 	dsb	sy
 8011516:	60fb      	str	r3, [r7, #12]
}
 8011518:	bf00      	nop
 801151a:	e7fe      	b.n	801151a <vTaskStartScheduler+0x9e>
}
 801151c:	bf00      	nop
 801151e:	3718      	adds	r7, #24
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}
 8011524:	08014e3c 	.word	0x08014e3c
 8011528:	080118d9 	.word	0x080118d9
 801152c:	20000fd0 	.word	0x20000fd0
 8011530:	20000fcc 	.word	0x20000fcc
 8011534:	20000fb8 	.word	0x20000fb8
 8011538:	20000fb0 	.word	0x20000fb0

0801153c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801153c:	b480      	push	{r7}
 801153e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011540:	4b04      	ldr	r3, [pc, #16]	; (8011554 <vTaskSuspendAll+0x18>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	3301      	adds	r3, #1
 8011546:	4a03      	ldr	r2, [pc, #12]	; (8011554 <vTaskSuspendAll+0x18>)
 8011548:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801154a:	bf00      	nop
 801154c:	46bd      	mov	sp, r7
 801154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011552:	4770      	bx	lr
 8011554:	20000fd4 	.word	0x20000fd4

08011558 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b084      	sub	sp, #16
 801155c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801155e:	2300      	movs	r3, #0
 8011560:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011562:	2300      	movs	r3, #0
 8011564:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011566:	4b41      	ldr	r3, [pc, #260]	; (801166c <xTaskResumeAll+0x114>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d10a      	bne.n	8011584 <xTaskResumeAll+0x2c>
	__asm volatile
 801156e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011572:	f383 8811 	msr	BASEPRI, r3
 8011576:	f3bf 8f6f 	isb	sy
 801157a:	f3bf 8f4f 	dsb	sy
 801157e:	603b      	str	r3, [r7, #0]
}
 8011580:	bf00      	nop
 8011582:	e7fe      	b.n	8011582 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011584:	f000 fd46 	bl	8012014 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011588:	4b38      	ldr	r3, [pc, #224]	; (801166c <xTaskResumeAll+0x114>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	3b01      	subs	r3, #1
 801158e:	4a37      	ldr	r2, [pc, #220]	; (801166c <xTaskResumeAll+0x114>)
 8011590:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011592:	4b36      	ldr	r3, [pc, #216]	; (801166c <xTaskResumeAll+0x114>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d161      	bne.n	801165e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801159a:	4b35      	ldr	r3, [pc, #212]	; (8011670 <xTaskResumeAll+0x118>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d05d      	beq.n	801165e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80115a2:	e02e      	b.n	8011602 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115a4:	4b33      	ldr	r3, [pc, #204]	; (8011674 <xTaskResumeAll+0x11c>)
 80115a6:	68db      	ldr	r3, [r3, #12]
 80115a8:	68db      	ldr	r3, [r3, #12]
 80115aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	3318      	adds	r3, #24
 80115b0:	4618      	mov	r0, r3
 80115b2:	f7ff fd28 	bl	8011006 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	3304      	adds	r3, #4
 80115ba:	4618      	mov	r0, r3
 80115bc:	f7ff fd23 	bl	8011006 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115c4:	2201      	movs	r2, #1
 80115c6:	409a      	lsls	r2, r3
 80115c8:	4b2b      	ldr	r3, [pc, #172]	; (8011678 <xTaskResumeAll+0x120>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	4313      	orrs	r3, r2
 80115ce:	4a2a      	ldr	r2, [pc, #168]	; (8011678 <xTaskResumeAll+0x120>)
 80115d0:	6013      	str	r3, [r2, #0]
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115d6:	4613      	mov	r3, r2
 80115d8:	009b      	lsls	r3, r3, #2
 80115da:	4413      	add	r3, r2
 80115dc:	009b      	lsls	r3, r3, #2
 80115de:	4a27      	ldr	r2, [pc, #156]	; (801167c <xTaskResumeAll+0x124>)
 80115e0:	441a      	add	r2, r3
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	3304      	adds	r3, #4
 80115e6:	4619      	mov	r1, r3
 80115e8:	4610      	mov	r0, r2
 80115ea:	f7ff fcaf 	bl	8010f4c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115f2:	4b23      	ldr	r3, [pc, #140]	; (8011680 <xTaskResumeAll+0x128>)
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d302      	bcc.n	8011602 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80115fc:	4b21      	ldr	r3, [pc, #132]	; (8011684 <xTaskResumeAll+0x12c>)
 80115fe:	2201      	movs	r2, #1
 8011600:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011602:	4b1c      	ldr	r3, [pc, #112]	; (8011674 <xTaskResumeAll+0x11c>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d1cc      	bne.n	80115a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d001      	beq.n	8011614 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011610:	f000 fa18 	bl	8011a44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011614:	4b1c      	ldr	r3, [pc, #112]	; (8011688 <xTaskResumeAll+0x130>)
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d010      	beq.n	8011642 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011620:	f000 f846 	bl	80116b0 <xTaskIncrementTick>
 8011624:	4603      	mov	r3, r0
 8011626:	2b00      	cmp	r3, #0
 8011628:	d002      	beq.n	8011630 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801162a:	4b16      	ldr	r3, [pc, #88]	; (8011684 <xTaskResumeAll+0x12c>)
 801162c:	2201      	movs	r2, #1
 801162e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	3b01      	subs	r3, #1
 8011634:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d1f1      	bne.n	8011620 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 801163c:	4b12      	ldr	r3, [pc, #72]	; (8011688 <xTaskResumeAll+0x130>)
 801163e:	2200      	movs	r2, #0
 8011640:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011642:	4b10      	ldr	r3, [pc, #64]	; (8011684 <xTaskResumeAll+0x12c>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d009      	beq.n	801165e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801164a:	2301      	movs	r3, #1
 801164c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801164e:	4b0f      	ldr	r3, [pc, #60]	; (801168c <xTaskResumeAll+0x134>)
 8011650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011654:	601a      	str	r2, [r3, #0]
 8011656:	f3bf 8f4f 	dsb	sy
 801165a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801165e:	f000 fd09 	bl	8012074 <vPortExitCritical>

	return xAlreadyYielded;
 8011662:	68bb      	ldr	r3, [r7, #8]
}
 8011664:	4618      	mov	r0, r3
 8011666:	3710      	adds	r7, #16
 8011668:	46bd      	mov	sp, r7
 801166a:	bd80      	pop	{r7, pc}
 801166c:	20000fd4 	.word	0x20000fd4
 8011670:	20000fac 	.word	0x20000fac
 8011674:	20000f6c 	.word	0x20000f6c
 8011678:	20000fb4 	.word	0x20000fb4
 801167c:	20000eb0 	.word	0x20000eb0
 8011680:	20000eac 	.word	0x20000eac
 8011684:	20000fc0 	.word	0x20000fc0
 8011688:	20000fbc 	.word	0x20000fbc
 801168c:	e000ed04 	.word	0xe000ed04

08011690 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011690:	b480      	push	{r7}
 8011692:	b083      	sub	sp, #12
 8011694:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011696:	4b05      	ldr	r3, [pc, #20]	; (80116ac <xTaskGetTickCount+0x1c>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801169c:	687b      	ldr	r3, [r7, #4]
}
 801169e:	4618      	mov	r0, r3
 80116a0:	370c      	adds	r7, #12
 80116a2:	46bd      	mov	sp, r7
 80116a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a8:	4770      	bx	lr
 80116aa:	bf00      	nop
 80116ac:	20000fb0 	.word	0x20000fb0

080116b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b086      	sub	sp, #24
 80116b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80116b6:	2300      	movs	r3, #0
 80116b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80116ba:	4b4e      	ldr	r3, [pc, #312]	; (80117f4 <xTaskIncrementTick+0x144>)
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	f040 808e 	bne.w	80117e0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80116c4:	4b4c      	ldr	r3, [pc, #304]	; (80117f8 <xTaskIncrementTick+0x148>)
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	3301      	adds	r3, #1
 80116ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80116cc:	4a4a      	ldr	r2, [pc, #296]	; (80117f8 <xTaskIncrementTick+0x148>)
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80116d2:	693b      	ldr	r3, [r7, #16]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d120      	bne.n	801171a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80116d8:	4b48      	ldr	r3, [pc, #288]	; (80117fc <xTaskIncrementTick+0x14c>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d00a      	beq.n	80116f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80116e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116e6:	f383 8811 	msr	BASEPRI, r3
 80116ea:	f3bf 8f6f 	isb	sy
 80116ee:	f3bf 8f4f 	dsb	sy
 80116f2:	603b      	str	r3, [r7, #0]
}
 80116f4:	bf00      	nop
 80116f6:	e7fe      	b.n	80116f6 <xTaskIncrementTick+0x46>
 80116f8:	4b40      	ldr	r3, [pc, #256]	; (80117fc <xTaskIncrementTick+0x14c>)
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	60fb      	str	r3, [r7, #12]
 80116fe:	4b40      	ldr	r3, [pc, #256]	; (8011800 <xTaskIncrementTick+0x150>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	4a3e      	ldr	r2, [pc, #248]	; (80117fc <xTaskIncrementTick+0x14c>)
 8011704:	6013      	str	r3, [r2, #0]
 8011706:	4a3e      	ldr	r2, [pc, #248]	; (8011800 <xTaskIncrementTick+0x150>)
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	6013      	str	r3, [r2, #0]
 801170c:	4b3d      	ldr	r3, [pc, #244]	; (8011804 <xTaskIncrementTick+0x154>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	3301      	adds	r3, #1
 8011712:	4a3c      	ldr	r2, [pc, #240]	; (8011804 <xTaskIncrementTick+0x154>)
 8011714:	6013      	str	r3, [r2, #0]
 8011716:	f000 f995 	bl	8011a44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801171a:	4b3b      	ldr	r3, [pc, #236]	; (8011808 <xTaskIncrementTick+0x158>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	693a      	ldr	r2, [r7, #16]
 8011720:	429a      	cmp	r2, r3
 8011722:	d348      	bcc.n	80117b6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011724:	4b35      	ldr	r3, [pc, #212]	; (80117fc <xTaskIncrementTick+0x14c>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d104      	bne.n	8011738 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801172e:	4b36      	ldr	r3, [pc, #216]	; (8011808 <xTaskIncrementTick+0x158>)
 8011730:	f04f 32ff 	mov.w	r2, #4294967295
 8011734:	601a      	str	r2, [r3, #0]
					break;
 8011736:	e03e      	b.n	80117b6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011738:	4b30      	ldr	r3, [pc, #192]	; (80117fc <xTaskIncrementTick+0x14c>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	68db      	ldr	r3, [r3, #12]
 801173e:	68db      	ldr	r3, [r3, #12]
 8011740:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	685b      	ldr	r3, [r3, #4]
 8011746:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011748:	693a      	ldr	r2, [r7, #16]
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	429a      	cmp	r2, r3
 801174e:	d203      	bcs.n	8011758 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011750:	4a2d      	ldr	r2, [pc, #180]	; (8011808 <xTaskIncrementTick+0x158>)
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011756:	e02e      	b.n	80117b6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011758:	68bb      	ldr	r3, [r7, #8]
 801175a:	3304      	adds	r3, #4
 801175c:	4618      	mov	r0, r3
 801175e:	f7ff fc52 	bl	8011006 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011766:	2b00      	cmp	r3, #0
 8011768:	d004      	beq.n	8011774 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	3318      	adds	r3, #24
 801176e:	4618      	mov	r0, r3
 8011770:	f7ff fc49 	bl	8011006 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011778:	2201      	movs	r2, #1
 801177a:	409a      	lsls	r2, r3
 801177c:	4b23      	ldr	r3, [pc, #140]	; (801180c <xTaskIncrementTick+0x15c>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	4313      	orrs	r3, r2
 8011782:	4a22      	ldr	r2, [pc, #136]	; (801180c <xTaskIncrementTick+0x15c>)
 8011784:	6013      	str	r3, [r2, #0]
 8011786:	68bb      	ldr	r3, [r7, #8]
 8011788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801178a:	4613      	mov	r3, r2
 801178c:	009b      	lsls	r3, r3, #2
 801178e:	4413      	add	r3, r2
 8011790:	009b      	lsls	r3, r3, #2
 8011792:	4a1f      	ldr	r2, [pc, #124]	; (8011810 <xTaskIncrementTick+0x160>)
 8011794:	441a      	add	r2, r3
 8011796:	68bb      	ldr	r3, [r7, #8]
 8011798:	3304      	adds	r3, #4
 801179a:	4619      	mov	r1, r3
 801179c:	4610      	mov	r0, r2
 801179e:	f7ff fbd5 	bl	8010f4c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80117a2:	68bb      	ldr	r3, [r7, #8]
 80117a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117a6:	4b1b      	ldr	r3, [pc, #108]	; (8011814 <xTaskIncrementTick+0x164>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117ac:	429a      	cmp	r2, r3
 80117ae:	d3b9      	bcc.n	8011724 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80117b0:	2301      	movs	r3, #1
 80117b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80117b4:	e7b6      	b.n	8011724 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80117b6:	4b17      	ldr	r3, [pc, #92]	; (8011814 <xTaskIncrementTick+0x164>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117bc:	4914      	ldr	r1, [pc, #80]	; (8011810 <xTaskIncrementTick+0x160>)
 80117be:	4613      	mov	r3, r2
 80117c0:	009b      	lsls	r3, r3, #2
 80117c2:	4413      	add	r3, r2
 80117c4:	009b      	lsls	r3, r3, #2
 80117c6:	440b      	add	r3, r1
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	2b01      	cmp	r3, #1
 80117cc:	d901      	bls.n	80117d2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80117ce:	2301      	movs	r3, #1
 80117d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80117d2:	4b11      	ldr	r3, [pc, #68]	; (8011818 <xTaskIncrementTick+0x168>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d007      	beq.n	80117ea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80117da:	2301      	movs	r3, #1
 80117dc:	617b      	str	r3, [r7, #20]
 80117de:	e004      	b.n	80117ea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80117e0:	4b0e      	ldr	r3, [pc, #56]	; (801181c <xTaskIncrementTick+0x16c>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	3301      	adds	r3, #1
 80117e6:	4a0d      	ldr	r2, [pc, #52]	; (801181c <xTaskIncrementTick+0x16c>)
 80117e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80117ea:	697b      	ldr	r3, [r7, #20]
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3718      	adds	r7, #24
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}
 80117f4:	20000fd4 	.word	0x20000fd4
 80117f8:	20000fb0 	.word	0x20000fb0
 80117fc:	20000f64 	.word	0x20000f64
 8011800:	20000f68 	.word	0x20000f68
 8011804:	20000fc4 	.word	0x20000fc4
 8011808:	20000fcc 	.word	0x20000fcc
 801180c:	20000fb4 	.word	0x20000fb4
 8011810:	20000eb0 	.word	0x20000eb0
 8011814:	20000eac 	.word	0x20000eac
 8011818:	20000fc0 	.word	0x20000fc0
 801181c:	20000fbc 	.word	0x20000fbc

08011820 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011820:	b480      	push	{r7}
 8011822:	b087      	sub	sp, #28
 8011824:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011826:	4b27      	ldr	r3, [pc, #156]	; (80118c4 <vTaskSwitchContext+0xa4>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d003      	beq.n	8011836 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801182e:	4b26      	ldr	r3, [pc, #152]	; (80118c8 <vTaskSwitchContext+0xa8>)
 8011830:	2201      	movs	r2, #1
 8011832:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011834:	e03f      	b.n	80118b6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8011836:	4b24      	ldr	r3, [pc, #144]	; (80118c8 <vTaskSwitchContext+0xa8>)
 8011838:	2200      	movs	r2, #0
 801183a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801183c:	4b23      	ldr	r3, [pc, #140]	; (80118cc <vTaskSwitchContext+0xac>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	fab3 f383 	clz	r3, r3
 8011848:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801184a:	7afb      	ldrb	r3, [r7, #11]
 801184c:	f1c3 031f 	rsb	r3, r3, #31
 8011850:	617b      	str	r3, [r7, #20]
 8011852:	491f      	ldr	r1, [pc, #124]	; (80118d0 <vTaskSwitchContext+0xb0>)
 8011854:	697a      	ldr	r2, [r7, #20]
 8011856:	4613      	mov	r3, r2
 8011858:	009b      	lsls	r3, r3, #2
 801185a:	4413      	add	r3, r2
 801185c:	009b      	lsls	r3, r3, #2
 801185e:	440b      	add	r3, r1
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d10a      	bne.n	801187c <vTaskSwitchContext+0x5c>
	__asm volatile
 8011866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801186a:	f383 8811 	msr	BASEPRI, r3
 801186e:	f3bf 8f6f 	isb	sy
 8011872:	f3bf 8f4f 	dsb	sy
 8011876:	607b      	str	r3, [r7, #4]
}
 8011878:	bf00      	nop
 801187a:	e7fe      	b.n	801187a <vTaskSwitchContext+0x5a>
 801187c:	697a      	ldr	r2, [r7, #20]
 801187e:	4613      	mov	r3, r2
 8011880:	009b      	lsls	r3, r3, #2
 8011882:	4413      	add	r3, r2
 8011884:	009b      	lsls	r3, r3, #2
 8011886:	4a12      	ldr	r2, [pc, #72]	; (80118d0 <vTaskSwitchContext+0xb0>)
 8011888:	4413      	add	r3, r2
 801188a:	613b      	str	r3, [r7, #16]
 801188c:	693b      	ldr	r3, [r7, #16]
 801188e:	685b      	ldr	r3, [r3, #4]
 8011890:	685a      	ldr	r2, [r3, #4]
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	605a      	str	r2, [r3, #4]
 8011896:	693b      	ldr	r3, [r7, #16]
 8011898:	685a      	ldr	r2, [r3, #4]
 801189a:	693b      	ldr	r3, [r7, #16]
 801189c:	3308      	adds	r3, #8
 801189e:	429a      	cmp	r2, r3
 80118a0:	d104      	bne.n	80118ac <vTaskSwitchContext+0x8c>
 80118a2:	693b      	ldr	r3, [r7, #16]
 80118a4:	685b      	ldr	r3, [r3, #4]
 80118a6:	685a      	ldr	r2, [r3, #4]
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	605a      	str	r2, [r3, #4]
 80118ac:	693b      	ldr	r3, [r7, #16]
 80118ae:	685b      	ldr	r3, [r3, #4]
 80118b0:	68db      	ldr	r3, [r3, #12]
 80118b2:	4a08      	ldr	r2, [pc, #32]	; (80118d4 <vTaskSwitchContext+0xb4>)
 80118b4:	6013      	str	r3, [r2, #0]
}
 80118b6:	bf00      	nop
 80118b8:	371c      	adds	r7, #28
 80118ba:	46bd      	mov	sp, r7
 80118bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c0:	4770      	bx	lr
 80118c2:	bf00      	nop
 80118c4:	20000fd4 	.word	0x20000fd4
 80118c8:	20000fc0 	.word	0x20000fc0
 80118cc:	20000fb4 	.word	0x20000fb4
 80118d0:	20000eb0 	.word	0x20000eb0
 80118d4:	20000eac 	.word	0x20000eac

080118d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b082      	sub	sp, #8
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80118e0:	f000 f852 	bl	8011988 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80118e4:	4b06      	ldr	r3, [pc, #24]	; (8011900 <prvIdleTask+0x28>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	2b01      	cmp	r3, #1
 80118ea:	d9f9      	bls.n	80118e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80118ec:	4b05      	ldr	r3, [pc, #20]	; (8011904 <prvIdleTask+0x2c>)
 80118ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118f2:	601a      	str	r2, [r3, #0]
 80118f4:	f3bf 8f4f 	dsb	sy
 80118f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80118fc:	e7f0      	b.n	80118e0 <prvIdleTask+0x8>
 80118fe:	bf00      	nop
 8011900:	20000eb0 	.word	0x20000eb0
 8011904:	e000ed04 	.word	0xe000ed04

08011908 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801190e:	2300      	movs	r3, #0
 8011910:	607b      	str	r3, [r7, #4]
 8011912:	e00c      	b.n	801192e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011914:	687a      	ldr	r2, [r7, #4]
 8011916:	4613      	mov	r3, r2
 8011918:	009b      	lsls	r3, r3, #2
 801191a:	4413      	add	r3, r2
 801191c:	009b      	lsls	r3, r3, #2
 801191e:	4a12      	ldr	r2, [pc, #72]	; (8011968 <prvInitialiseTaskLists+0x60>)
 8011920:	4413      	add	r3, r2
 8011922:	4618      	mov	r0, r3
 8011924:	f7ff fae5 	bl	8010ef2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	3301      	adds	r3, #1
 801192c:	607b      	str	r3, [r7, #4]
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	2b06      	cmp	r3, #6
 8011932:	d9ef      	bls.n	8011914 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011934:	480d      	ldr	r0, [pc, #52]	; (801196c <prvInitialiseTaskLists+0x64>)
 8011936:	f7ff fadc 	bl	8010ef2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801193a:	480d      	ldr	r0, [pc, #52]	; (8011970 <prvInitialiseTaskLists+0x68>)
 801193c:	f7ff fad9 	bl	8010ef2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011940:	480c      	ldr	r0, [pc, #48]	; (8011974 <prvInitialiseTaskLists+0x6c>)
 8011942:	f7ff fad6 	bl	8010ef2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011946:	480c      	ldr	r0, [pc, #48]	; (8011978 <prvInitialiseTaskLists+0x70>)
 8011948:	f7ff fad3 	bl	8010ef2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801194c:	480b      	ldr	r0, [pc, #44]	; (801197c <prvInitialiseTaskLists+0x74>)
 801194e:	f7ff fad0 	bl	8010ef2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011952:	4b0b      	ldr	r3, [pc, #44]	; (8011980 <prvInitialiseTaskLists+0x78>)
 8011954:	4a05      	ldr	r2, [pc, #20]	; (801196c <prvInitialiseTaskLists+0x64>)
 8011956:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011958:	4b0a      	ldr	r3, [pc, #40]	; (8011984 <prvInitialiseTaskLists+0x7c>)
 801195a:	4a05      	ldr	r2, [pc, #20]	; (8011970 <prvInitialiseTaskLists+0x68>)
 801195c:	601a      	str	r2, [r3, #0]
}
 801195e:	bf00      	nop
 8011960:	3708      	adds	r7, #8
 8011962:	46bd      	mov	sp, r7
 8011964:	bd80      	pop	{r7, pc}
 8011966:	bf00      	nop
 8011968:	20000eb0 	.word	0x20000eb0
 801196c:	20000f3c 	.word	0x20000f3c
 8011970:	20000f50 	.word	0x20000f50
 8011974:	20000f6c 	.word	0x20000f6c
 8011978:	20000f80 	.word	0x20000f80
 801197c:	20000f98 	.word	0x20000f98
 8011980:	20000f64 	.word	0x20000f64
 8011984:	20000f68 	.word	0x20000f68

08011988 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b082      	sub	sp, #8
 801198c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801198e:	e019      	b.n	80119c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011990:	f000 fb40 	bl	8012014 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011994:	4b10      	ldr	r3, [pc, #64]	; (80119d8 <prvCheckTasksWaitingTermination+0x50>)
 8011996:	68db      	ldr	r3, [r3, #12]
 8011998:	68db      	ldr	r3, [r3, #12]
 801199a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	3304      	adds	r3, #4
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7ff fb30 	bl	8011006 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80119a6:	4b0d      	ldr	r3, [pc, #52]	; (80119dc <prvCheckTasksWaitingTermination+0x54>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	3b01      	subs	r3, #1
 80119ac:	4a0b      	ldr	r2, [pc, #44]	; (80119dc <prvCheckTasksWaitingTermination+0x54>)
 80119ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80119b0:	4b0b      	ldr	r3, [pc, #44]	; (80119e0 <prvCheckTasksWaitingTermination+0x58>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	3b01      	subs	r3, #1
 80119b6:	4a0a      	ldr	r2, [pc, #40]	; (80119e0 <prvCheckTasksWaitingTermination+0x58>)
 80119b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80119ba:	f000 fb5b 	bl	8012074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f000 f810 	bl	80119e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80119c4:	4b06      	ldr	r3, [pc, #24]	; (80119e0 <prvCheckTasksWaitingTermination+0x58>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d1e1      	bne.n	8011990 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80119cc:	bf00      	nop
 80119ce:	bf00      	nop
 80119d0:	3708      	adds	r7, #8
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}
 80119d6:	bf00      	nop
 80119d8:	20000f80 	.word	0x20000f80
 80119dc:	20000fac 	.word	0x20000fac
 80119e0:	20000f94 	.word	0x20000f94

080119e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b084      	sub	sp, #16
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d108      	bne.n	8011a08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119fa:	4618      	mov	r0, r3
 80119fc:	f000 fcf8 	bl	80123f0 <vPortFree>
				vPortFree( pxTCB );
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f000 fcf5 	bl	80123f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011a06:	e018      	b.n	8011a3a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011a0e:	2b01      	cmp	r3, #1
 8011a10:	d103      	bne.n	8011a1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011a12:	6878      	ldr	r0, [r7, #4]
 8011a14:	f000 fcec 	bl	80123f0 <vPortFree>
	}
 8011a18:	e00f      	b.n	8011a3a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011a20:	2b02      	cmp	r3, #2
 8011a22:	d00a      	beq.n	8011a3a <prvDeleteTCB+0x56>
	__asm volatile
 8011a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a28:	f383 8811 	msr	BASEPRI, r3
 8011a2c:	f3bf 8f6f 	isb	sy
 8011a30:	f3bf 8f4f 	dsb	sy
 8011a34:	60fb      	str	r3, [r7, #12]
}
 8011a36:	bf00      	nop
 8011a38:	e7fe      	b.n	8011a38 <prvDeleteTCB+0x54>
	}
 8011a3a:	bf00      	nop
 8011a3c:	3710      	adds	r7, #16
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}
	...

08011a44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011a44:	b480      	push	{r7}
 8011a46:	b083      	sub	sp, #12
 8011a48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a4a:	4b0c      	ldr	r3, [pc, #48]	; (8011a7c <prvResetNextTaskUnblockTime+0x38>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d104      	bne.n	8011a5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011a54:	4b0a      	ldr	r3, [pc, #40]	; (8011a80 <prvResetNextTaskUnblockTime+0x3c>)
 8011a56:	f04f 32ff 	mov.w	r2, #4294967295
 8011a5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011a5c:	e008      	b.n	8011a70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a5e:	4b07      	ldr	r3, [pc, #28]	; (8011a7c <prvResetNextTaskUnblockTime+0x38>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	68db      	ldr	r3, [r3, #12]
 8011a64:	68db      	ldr	r3, [r3, #12]
 8011a66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	685b      	ldr	r3, [r3, #4]
 8011a6c:	4a04      	ldr	r2, [pc, #16]	; (8011a80 <prvResetNextTaskUnblockTime+0x3c>)
 8011a6e:	6013      	str	r3, [r2, #0]
}
 8011a70:	bf00      	nop
 8011a72:	370c      	adds	r7, #12
 8011a74:	46bd      	mov	sp, r7
 8011a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7a:	4770      	bx	lr
 8011a7c:	20000f64 	.word	0x20000f64
 8011a80:	20000fcc 	.word	0x20000fcc

08011a84 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b086      	sub	sp, #24
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	60f8      	str	r0, [r7, #12]
 8011a8c:	60b9      	str	r1, [r7, #8]
 8011a8e:	607a      	str	r2, [r7, #4]
 8011a90:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8011a92:	f000 fabf 	bl	8012014 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011a96:	4b26      	ldr	r3, [pc, #152]	; (8011b30 <xTaskNotifyWait+0xac>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011a9e:	b2db      	uxtb	r3, r3
 8011aa0:	2b02      	cmp	r3, #2
 8011aa2:	d01a      	beq.n	8011ada <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8011aa4:	4b22      	ldr	r3, [pc, #136]	; (8011b30 <xTaskNotifyWait+0xac>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8011aaa:	68fa      	ldr	r2, [r7, #12]
 8011aac:	43d2      	mvns	r2, r2
 8011aae:	400a      	ands	r2, r1
 8011ab0:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8011ab2:	4b1f      	ldr	r3, [pc, #124]	; (8011b30 <xTaskNotifyWait+0xac>)
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	2201      	movs	r2, #1
 8011ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d00b      	beq.n	8011ada <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011ac2:	2101      	movs	r1, #1
 8011ac4:	6838      	ldr	r0, [r7, #0]
 8011ac6:	f000 f911 	bl	8011cec <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011aca:	4b1a      	ldr	r3, [pc, #104]	; (8011b34 <xTaskNotifyWait+0xb0>)
 8011acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ad0:	601a      	str	r2, [r3, #0]
 8011ad2:	f3bf 8f4f 	dsb	sy
 8011ad6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011ada:	f000 facb 	bl	8012074 <vPortExitCritical>

		taskENTER_CRITICAL();
 8011ade:	f000 fa99 	bl	8012014 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d004      	beq.n	8011af2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8011ae8:	4b11      	ldr	r3, [pc, #68]	; (8011b30 <xTaskNotifyWait+0xac>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011af2:	4b0f      	ldr	r3, [pc, #60]	; (8011b30 <xTaskNotifyWait+0xac>)
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011afa:	b2db      	uxtb	r3, r3
 8011afc:	2b02      	cmp	r3, #2
 8011afe:	d002      	beq.n	8011b06 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8011b00:	2300      	movs	r3, #0
 8011b02:	617b      	str	r3, [r7, #20]
 8011b04:	e008      	b.n	8011b18 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8011b06:	4b0a      	ldr	r3, [pc, #40]	; (8011b30 <xTaskNotifyWait+0xac>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8011b0c:	68ba      	ldr	r2, [r7, #8]
 8011b0e:	43d2      	mvns	r2, r2
 8011b10:	400a      	ands	r2, r1
 8011b12:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8011b14:	2301      	movs	r3, #1
 8011b16:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011b18:	4b05      	ldr	r3, [pc, #20]	; (8011b30 <xTaskNotifyWait+0xac>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8011b22:	f000 faa7 	bl	8012074 <vPortExitCritical>

		return xReturn;
 8011b26:	697b      	ldr	r3, [r7, #20]
	}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3718      	adds	r7, #24
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}
 8011b30:	20000eac 	.word	0x20000eac
 8011b34:	e000ed04 	.word	0xe000ed04

08011b38 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b08e      	sub	sp, #56	; 0x38
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	60f8      	str	r0, [r7, #12]
 8011b40:	60b9      	str	r1, [r7, #8]
 8011b42:	603b      	str	r3, [r7, #0]
 8011b44:	4613      	mov	r3, r2
 8011b46:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8011b48:	2301      	movs	r3, #1
 8011b4a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d10a      	bne.n	8011b68 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8011b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b56:	f383 8811 	msr	BASEPRI, r3
 8011b5a:	f3bf 8f6f 	isb	sy
 8011b5e:	f3bf 8f4f 	dsb	sy
 8011b62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011b64:	bf00      	nop
 8011b66:	e7fe      	b.n	8011b66 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011b68:	f000 fb36 	bl	80121d8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011b70:	f3ef 8211 	mrs	r2, BASEPRI
 8011b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b78:	f383 8811 	msr	BASEPRI, r3
 8011b7c:	f3bf 8f6f 	isb	sy
 8011b80:	f3bf 8f4f 	dsb	sy
 8011b84:	623a      	str	r2, [r7, #32]
 8011b86:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011b88:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d003      	beq.n	8011b9a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011ba0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba6:	2202      	movs	r2, #2
 8011ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8011bac:	79fb      	ldrb	r3, [r7, #7]
 8011bae:	2b04      	cmp	r3, #4
 8011bb0:	d828      	bhi.n	8011c04 <xTaskGenericNotifyFromISR+0xcc>
 8011bb2:	a201      	add	r2, pc, #4	; (adr r2, 8011bb8 <xTaskGenericNotifyFromISR+0x80>)
 8011bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bb8:	08011c25 	.word	0x08011c25
 8011bbc:	08011bcd 	.word	0x08011bcd
 8011bc0:	08011bdb 	.word	0x08011bdb
 8011bc4:	08011be7 	.word	0x08011be7
 8011bc8:	08011bef 	.word	0x08011bef
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	431a      	orrs	r2, r3
 8011bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bd6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8011bd8:	e027      	b.n	8011c2a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011bde:	1c5a      	adds	r2, r3, #1
 8011be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8011be4:	e021      	b.n	8011c2a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be8:	68ba      	ldr	r2, [r7, #8]
 8011bea:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8011bec:	e01d      	b.n	8011c2a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011bee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011bf2:	2b02      	cmp	r3, #2
 8011bf4:	d003      	beq.n	8011bfe <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bf8:	68ba      	ldr	r2, [r7, #8]
 8011bfa:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011bfc:	e015      	b.n	8011c2a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8011c02:	e012      	b.n	8011c2a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c0c:	d00c      	beq.n	8011c28 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8011c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c12:	f383 8811 	msr	BASEPRI, r3
 8011c16:	f3bf 8f6f 	isb	sy
 8011c1a:	f3bf 8f4f 	dsb	sy
 8011c1e:	61bb      	str	r3, [r7, #24]
}
 8011c20:	bf00      	nop
 8011c22:	e7fe      	b.n	8011c22 <xTaskGenericNotifyFromISR+0xea>
					break;
 8011c24:	bf00      	nop
 8011c26:	e000      	b.n	8011c2a <xTaskGenericNotifyFromISR+0xf2>
					break;
 8011c28:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011c2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011c2e:	2b01      	cmp	r3, #1
 8011c30:	d145      	bne.n	8011cbe <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d00a      	beq.n	8011c50 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8011c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c3e:	f383 8811 	msr	BASEPRI, r3
 8011c42:	f3bf 8f6f 	isb	sy
 8011c46:	f3bf 8f4f 	dsb	sy
 8011c4a:	617b      	str	r3, [r7, #20]
}
 8011c4c:	bf00      	nop
 8011c4e:	e7fe      	b.n	8011c4e <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c50:	4b20      	ldr	r3, [pc, #128]	; (8011cd4 <xTaskGenericNotifyFromISR+0x19c>)
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d11c      	bne.n	8011c92 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c5a:	3304      	adds	r3, #4
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f7ff f9d2 	bl	8011006 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c66:	2201      	movs	r2, #1
 8011c68:	409a      	lsls	r2, r3
 8011c6a:	4b1b      	ldr	r3, [pc, #108]	; (8011cd8 <xTaskGenericNotifyFromISR+0x1a0>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	4313      	orrs	r3, r2
 8011c70:	4a19      	ldr	r2, [pc, #100]	; (8011cd8 <xTaskGenericNotifyFromISR+0x1a0>)
 8011c72:	6013      	str	r3, [r2, #0]
 8011c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c78:	4613      	mov	r3, r2
 8011c7a:	009b      	lsls	r3, r3, #2
 8011c7c:	4413      	add	r3, r2
 8011c7e:	009b      	lsls	r3, r3, #2
 8011c80:	4a16      	ldr	r2, [pc, #88]	; (8011cdc <xTaskGenericNotifyFromISR+0x1a4>)
 8011c82:	441a      	add	r2, r3
 8011c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c86:	3304      	adds	r3, #4
 8011c88:	4619      	mov	r1, r3
 8011c8a:	4610      	mov	r0, r2
 8011c8c:	f7ff f95e 	bl	8010f4c <vListInsertEnd>
 8011c90:	e005      	b.n	8011c9e <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8011c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c94:	3318      	adds	r3, #24
 8011c96:	4619      	mov	r1, r3
 8011c98:	4811      	ldr	r0, [pc, #68]	; (8011ce0 <xTaskGenericNotifyFromISR+0x1a8>)
 8011c9a:	f7ff f957 	bl	8010f4c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ca2:	4b10      	ldr	r3, [pc, #64]	; (8011ce4 <xTaskGenericNotifyFromISR+0x1ac>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ca8:	429a      	cmp	r2, r3
 8011caa:	d908      	bls.n	8011cbe <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8011cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d002      	beq.n	8011cb8 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8011cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cb4:	2201      	movs	r2, #1
 8011cb6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8011cb8:	4b0b      	ldr	r3, [pc, #44]	; (8011ce8 <xTaskGenericNotifyFromISR+0x1b0>)
 8011cba:	2201      	movs	r2, #1
 8011cbc:	601a      	str	r2, [r3, #0]
 8011cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cc0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011cc2:	693b      	ldr	r3, [r7, #16]
 8011cc4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011cc8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8011cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8011ccc:	4618      	mov	r0, r3
 8011cce:	3738      	adds	r7, #56	; 0x38
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}
 8011cd4:	20000fd4 	.word	0x20000fd4
 8011cd8:	20000fb4 	.word	0x20000fb4
 8011cdc:	20000eb0 	.word	0x20000eb0
 8011ce0:	20000f6c 	.word	0x20000f6c
 8011ce4:	20000eac 	.word	0x20000eac
 8011ce8:	20000fc0 	.word	0x20000fc0

08011cec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b084      	sub	sp, #16
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011cf6:	4b29      	ldr	r3, [pc, #164]	; (8011d9c <prvAddCurrentTaskToDelayedList+0xb0>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011cfc:	4b28      	ldr	r3, [pc, #160]	; (8011da0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	3304      	adds	r3, #4
 8011d02:	4618      	mov	r0, r3
 8011d04:	f7ff f97f 	bl	8011006 <uxListRemove>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d10b      	bne.n	8011d26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011d0e:	4b24      	ldr	r3, [pc, #144]	; (8011da0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d14:	2201      	movs	r2, #1
 8011d16:	fa02 f303 	lsl.w	r3, r2, r3
 8011d1a:	43da      	mvns	r2, r3
 8011d1c:	4b21      	ldr	r3, [pc, #132]	; (8011da4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	4013      	ands	r3, r2
 8011d22:	4a20      	ldr	r2, [pc, #128]	; (8011da4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011d24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d2c:	d10a      	bne.n	8011d44 <prvAddCurrentTaskToDelayedList+0x58>
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d007      	beq.n	8011d44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d34:	4b1a      	ldr	r3, [pc, #104]	; (8011da0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	3304      	adds	r3, #4
 8011d3a:	4619      	mov	r1, r3
 8011d3c:	481a      	ldr	r0, [pc, #104]	; (8011da8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011d3e:	f7ff f905 	bl	8010f4c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011d42:	e026      	b.n	8011d92 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011d44:	68fa      	ldr	r2, [r7, #12]
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	4413      	add	r3, r2
 8011d4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011d4c:	4b14      	ldr	r3, [pc, #80]	; (8011da0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	68ba      	ldr	r2, [r7, #8]
 8011d52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011d54:	68ba      	ldr	r2, [r7, #8]
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	429a      	cmp	r2, r3
 8011d5a:	d209      	bcs.n	8011d70 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d5c:	4b13      	ldr	r3, [pc, #76]	; (8011dac <prvAddCurrentTaskToDelayedList+0xc0>)
 8011d5e:	681a      	ldr	r2, [r3, #0]
 8011d60:	4b0f      	ldr	r3, [pc, #60]	; (8011da0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	3304      	adds	r3, #4
 8011d66:	4619      	mov	r1, r3
 8011d68:	4610      	mov	r0, r2
 8011d6a:	f7ff f913 	bl	8010f94 <vListInsert>
}
 8011d6e:	e010      	b.n	8011d92 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d70:	4b0f      	ldr	r3, [pc, #60]	; (8011db0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011d72:	681a      	ldr	r2, [r3, #0]
 8011d74:	4b0a      	ldr	r3, [pc, #40]	; (8011da0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	3304      	adds	r3, #4
 8011d7a:	4619      	mov	r1, r3
 8011d7c:	4610      	mov	r0, r2
 8011d7e:	f7ff f909 	bl	8010f94 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011d82:	4b0c      	ldr	r3, [pc, #48]	; (8011db4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	68ba      	ldr	r2, [r7, #8]
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	d202      	bcs.n	8011d92 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011d8c:	4a09      	ldr	r2, [pc, #36]	; (8011db4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	6013      	str	r3, [r2, #0]
}
 8011d92:	bf00      	nop
 8011d94:	3710      	adds	r7, #16
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}
 8011d9a:	bf00      	nop
 8011d9c:	20000fb0 	.word	0x20000fb0
 8011da0:	20000eac 	.word	0x20000eac
 8011da4:	20000fb4 	.word	0x20000fb4
 8011da8:	20000f98 	.word	0x20000f98
 8011dac:	20000f68 	.word	0x20000f68
 8011db0:	20000f64 	.word	0x20000f64
 8011db4:	20000fcc 	.word	0x20000fcc

08011db8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011db8:	b480      	push	{r7}
 8011dba:	b085      	sub	sp, #20
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	60f8      	str	r0, [r7, #12]
 8011dc0:	60b9      	str	r1, [r7, #8]
 8011dc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	3b04      	subs	r3, #4
 8011dc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011dd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	3b04      	subs	r3, #4
 8011dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011dd8:	68bb      	ldr	r3, [r7, #8]
 8011dda:	f023 0201 	bic.w	r2, r3, #1
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	3b04      	subs	r3, #4
 8011de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011de8:	4a0c      	ldr	r2, [pc, #48]	; (8011e1c <pxPortInitialiseStack+0x64>)
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	3b14      	subs	r3, #20
 8011df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011df4:	687a      	ldr	r2, [r7, #4]
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	3b04      	subs	r3, #4
 8011dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	f06f 0202 	mvn.w	r2, #2
 8011e06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	3b20      	subs	r3, #32
 8011e0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011e0e:	68fb      	ldr	r3, [r7, #12]
}
 8011e10:	4618      	mov	r0, r3
 8011e12:	3714      	adds	r7, #20
 8011e14:	46bd      	mov	sp, r7
 8011e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1a:	4770      	bx	lr
 8011e1c:	08011e21 	.word	0x08011e21

08011e20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011e20:	b480      	push	{r7}
 8011e22:	b085      	sub	sp, #20
 8011e24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011e26:	2300      	movs	r3, #0
 8011e28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011e2a:	4b12      	ldr	r3, [pc, #72]	; (8011e74 <prvTaskExitError+0x54>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e32:	d00a      	beq.n	8011e4a <prvTaskExitError+0x2a>
	__asm volatile
 8011e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e38:	f383 8811 	msr	BASEPRI, r3
 8011e3c:	f3bf 8f6f 	isb	sy
 8011e40:	f3bf 8f4f 	dsb	sy
 8011e44:	60fb      	str	r3, [r7, #12]
}
 8011e46:	bf00      	nop
 8011e48:	e7fe      	b.n	8011e48 <prvTaskExitError+0x28>
	__asm volatile
 8011e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e4e:	f383 8811 	msr	BASEPRI, r3
 8011e52:	f3bf 8f6f 	isb	sy
 8011e56:	f3bf 8f4f 	dsb	sy
 8011e5a:	60bb      	str	r3, [r7, #8]
}
 8011e5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011e5e:	bf00      	nop
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d0fc      	beq.n	8011e60 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011e66:	bf00      	nop
 8011e68:	bf00      	nop
 8011e6a:	3714      	adds	r7, #20
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e72:	4770      	bx	lr
 8011e74:	20000010 	.word	0x20000010
	...

08011e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011e80:	4b07      	ldr	r3, [pc, #28]	; (8011ea0 <pxCurrentTCBConst2>)
 8011e82:	6819      	ldr	r1, [r3, #0]
 8011e84:	6808      	ldr	r0, [r1, #0]
 8011e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e8a:	f380 8809 	msr	PSP, r0
 8011e8e:	f3bf 8f6f 	isb	sy
 8011e92:	f04f 0000 	mov.w	r0, #0
 8011e96:	f380 8811 	msr	BASEPRI, r0
 8011e9a:	4770      	bx	lr
 8011e9c:	f3af 8000 	nop.w

08011ea0 <pxCurrentTCBConst2>:
 8011ea0:	20000eac 	.word	0x20000eac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011ea4:	bf00      	nop
 8011ea6:	bf00      	nop

08011ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011ea8:	4808      	ldr	r0, [pc, #32]	; (8011ecc <prvPortStartFirstTask+0x24>)
 8011eaa:	6800      	ldr	r0, [r0, #0]
 8011eac:	6800      	ldr	r0, [r0, #0]
 8011eae:	f380 8808 	msr	MSP, r0
 8011eb2:	f04f 0000 	mov.w	r0, #0
 8011eb6:	f380 8814 	msr	CONTROL, r0
 8011eba:	b662      	cpsie	i
 8011ebc:	b661      	cpsie	f
 8011ebe:	f3bf 8f4f 	dsb	sy
 8011ec2:	f3bf 8f6f 	isb	sy
 8011ec6:	df00      	svc	0
 8011ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011eca:	bf00      	nop
 8011ecc:	e000ed08 	.word	0xe000ed08

08011ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b086      	sub	sp, #24
 8011ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011ed6:	4b46      	ldr	r3, [pc, #280]	; (8011ff0 <xPortStartScheduler+0x120>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	4a46      	ldr	r2, [pc, #280]	; (8011ff4 <xPortStartScheduler+0x124>)
 8011edc:	4293      	cmp	r3, r2
 8011ede:	d10a      	bne.n	8011ef6 <xPortStartScheduler+0x26>
	__asm volatile
 8011ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ee4:	f383 8811 	msr	BASEPRI, r3
 8011ee8:	f3bf 8f6f 	isb	sy
 8011eec:	f3bf 8f4f 	dsb	sy
 8011ef0:	613b      	str	r3, [r7, #16]
}
 8011ef2:	bf00      	nop
 8011ef4:	e7fe      	b.n	8011ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011ef6:	4b3e      	ldr	r3, [pc, #248]	; (8011ff0 <xPortStartScheduler+0x120>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	4a3f      	ldr	r2, [pc, #252]	; (8011ff8 <xPortStartScheduler+0x128>)
 8011efc:	4293      	cmp	r3, r2
 8011efe:	d10a      	bne.n	8011f16 <xPortStartScheduler+0x46>
	__asm volatile
 8011f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f04:	f383 8811 	msr	BASEPRI, r3
 8011f08:	f3bf 8f6f 	isb	sy
 8011f0c:	f3bf 8f4f 	dsb	sy
 8011f10:	60fb      	str	r3, [r7, #12]
}
 8011f12:	bf00      	nop
 8011f14:	e7fe      	b.n	8011f14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011f16:	4b39      	ldr	r3, [pc, #228]	; (8011ffc <xPortStartScheduler+0x12c>)
 8011f18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011f1a:	697b      	ldr	r3, [r7, #20]
 8011f1c:	781b      	ldrb	r3, [r3, #0]
 8011f1e:	b2db      	uxtb	r3, r3
 8011f20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011f22:	697b      	ldr	r3, [r7, #20]
 8011f24:	22ff      	movs	r2, #255	; 0xff
 8011f26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011f28:	697b      	ldr	r3, [r7, #20]
 8011f2a:	781b      	ldrb	r3, [r3, #0]
 8011f2c:	b2db      	uxtb	r3, r3
 8011f2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011f30:	78fb      	ldrb	r3, [r7, #3]
 8011f32:	b2db      	uxtb	r3, r3
 8011f34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011f38:	b2da      	uxtb	r2, r3
 8011f3a:	4b31      	ldr	r3, [pc, #196]	; (8012000 <xPortStartScheduler+0x130>)
 8011f3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011f3e:	4b31      	ldr	r3, [pc, #196]	; (8012004 <xPortStartScheduler+0x134>)
 8011f40:	2207      	movs	r2, #7
 8011f42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011f44:	e009      	b.n	8011f5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011f46:	4b2f      	ldr	r3, [pc, #188]	; (8012004 <xPortStartScheduler+0x134>)
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	3b01      	subs	r3, #1
 8011f4c:	4a2d      	ldr	r2, [pc, #180]	; (8012004 <xPortStartScheduler+0x134>)
 8011f4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011f50:	78fb      	ldrb	r3, [r7, #3]
 8011f52:	b2db      	uxtb	r3, r3
 8011f54:	005b      	lsls	r3, r3, #1
 8011f56:	b2db      	uxtb	r3, r3
 8011f58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011f5a:	78fb      	ldrb	r3, [r7, #3]
 8011f5c:	b2db      	uxtb	r3, r3
 8011f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f62:	2b80      	cmp	r3, #128	; 0x80
 8011f64:	d0ef      	beq.n	8011f46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011f66:	4b27      	ldr	r3, [pc, #156]	; (8012004 <xPortStartScheduler+0x134>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	f1c3 0307 	rsb	r3, r3, #7
 8011f6e:	2b04      	cmp	r3, #4
 8011f70:	d00a      	beq.n	8011f88 <xPortStartScheduler+0xb8>
	__asm volatile
 8011f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f76:	f383 8811 	msr	BASEPRI, r3
 8011f7a:	f3bf 8f6f 	isb	sy
 8011f7e:	f3bf 8f4f 	dsb	sy
 8011f82:	60bb      	str	r3, [r7, #8]
}
 8011f84:	bf00      	nop
 8011f86:	e7fe      	b.n	8011f86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011f88:	4b1e      	ldr	r3, [pc, #120]	; (8012004 <xPortStartScheduler+0x134>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	021b      	lsls	r3, r3, #8
 8011f8e:	4a1d      	ldr	r2, [pc, #116]	; (8012004 <xPortStartScheduler+0x134>)
 8011f90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011f92:	4b1c      	ldr	r3, [pc, #112]	; (8012004 <xPortStartScheduler+0x134>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011f9a:	4a1a      	ldr	r2, [pc, #104]	; (8012004 <xPortStartScheduler+0x134>)
 8011f9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	b2da      	uxtb	r2, r3
 8011fa2:	697b      	ldr	r3, [r7, #20]
 8011fa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011fa6:	4b18      	ldr	r3, [pc, #96]	; (8012008 <xPortStartScheduler+0x138>)
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	4a17      	ldr	r2, [pc, #92]	; (8012008 <xPortStartScheduler+0x138>)
 8011fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011fb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011fb2:	4b15      	ldr	r3, [pc, #84]	; (8012008 <xPortStartScheduler+0x138>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	4a14      	ldr	r2, [pc, #80]	; (8012008 <xPortStartScheduler+0x138>)
 8011fb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011fbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011fbe:	f000 f8dd 	bl	801217c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011fc2:	4b12      	ldr	r3, [pc, #72]	; (801200c <xPortStartScheduler+0x13c>)
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011fc8:	f000 f8fc 	bl	80121c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011fcc:	4b10      	ldr	r3, [pc, #64]	; (8012010 <xPortStartScheduler+0x140>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	4a0f      	ldr	r2, [pc, #60]	; (8012010 <xPortStartScheduler+0x140>)
 8011fd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011fd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011fd8:	f7ff ff66 	bl	8011ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011fdc:	f7ff fc20 	bl	8011820 <vTaskSwitchContext>
	prvTaskExitError();
 8011fe0:	f7ff ff1e 	bl	8011e20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011fe4:	2300      	movs	r3, #0
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3718      	adds	r7, #24
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd80      	pop	{r7, pc}
 8011fee:	bf00      	nop
 8011ff0:	e000ed00 	.word	0xe000ed00
 8011ff4:	410fc271 	.word	0x410fc271
 8011ff8:	410fc270 	.word	0x410fc270
 8011ffc:	e000e400 	.word	0xe000e400
 8012000:	20000fd8 	.word	0x20000fd8
 8012004:	20000fdc 	.word	0x20000fdc
 8012008:	e000ed20 	.word	0xe000ed20
 801200c:	20000010 	.word	0x20000010
 8012010:	e000ef34 	.word	0xe000ef34

08012014 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012014:	b480      	push	{r7}
 8012016:	b083      	sub	sp, #12
 8012018:	af00      	add	r7, sp, #0
	__asm volatile
 801201a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801201e:	f383 8811 	msr	BASEPRI, r3
 8012022:	f3bf 8f6f 	isb	sy
 8012026:	f3bf 8f4f 	dsb	sy
 801202a:	607b      	str	r3, [r7, #4]
}
 801202c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801202e:	4b0f      	ldr	r3, [pc, #60]	; (801206c <vPortEnterCritical+0x58>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	3301      	adds	r3, #1
 8012034:	4a0d      	ldr	r2, [pc, #52]	; (801206c <vPortEnterCritical+0x58>)
 8012036:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012038:	4b0c      	ldr	r3, [pc, #48]	; (801206c <vPortEnterCritical+0x58>)
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	2b01      	cmp	r3, #1
 801203e:	d10f      	bne.n	8012060 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012040:	4b0b      	ldr	r3, [pc, #44]	; (8012070 <vPortEnterCritical+0x5c>)
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	b2db      	uxtb	r3, r3
 8012046:	2b00      	cmp	r3, #0
 8012048:	d00a      	beq.n	8012060 <vPortEnterCritical+0x4c>
	__asm volatile
 801204a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801204e:	f383 8811 	msr	BASEPRI, r3
 8012052:	f3bf 8f6f 	isb	sy
 8012056:	f3bf 8f4f 	dsb	sy
 801205a:	603b      	str	r3, [r7, #0]
}
 801205c:	bf00      	nop
 801205e:	e7fe      	b.n	801205e <vPortEnterCritical+0x4a>
	}
}
 8012060:	bf00      	nop
 8012062:	370c      	adds	r7, #12
 8012064:	46bd      	mov	sp, r7
 8012066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206a:	4770      	bx	lr
 801206c:	20000010 	.word	0x20000010
 8012070:	e000ed04 	.word	0xe000ed04

08012074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012074:	b480      	push	{r7}
 8012076:	b083      	sub	sp, #12
 8012078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801207a:	4b12      	ldr	r3, [pc, #72]	; (80120c4 <vPortExitCritical+0x50>)
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d10a      	bne.n	8012098 <vPortExitCritical+0x24>
	__asm volatile
 8012082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012086:	f383 8811 	msr	BASEPRI, r3
 801208a:	f3bf 8f6f 	isb	sy
 801208e:	f3bf 8f4f 	dsb	sy
 8012092:	607b      	str	r3, [r7, #4]
}
 8012094:	bf00      	nop
 8012096:	e7fe      	b.n	8012096 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012098:	4b0a      	ldr	r3, [pc, #40]	; (80120c4 <vPortExitCritical+0x50>)
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	3b01      	subs	r3, #1
 801209e:	4a09      	ldr	r2, [pc, #36]	; (80120c4 <vPortExitCritical+0x50>)
 80120a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80120a2:	4b08      	ldr	r3, [pc, #32]	; (80120c4 <vPortExitCritical+0x50>)
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d105      	bne.n	80120b6 <vPortExitCritical+0x42>
 80120aa:	2300      	movs	r3, #0
 80120ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	f383 8811 	msr	BASEPRI, r3
}
 80120b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80120b6:	bf00      	nop
 80120b8:	370c      	adds	r7, #12
 80120ba:	46bd      	mov	sp, r7
 80120bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c0:	4770      	bx	lr
 80120c2:	bf00      	nop
 80120c4:	20000010 	.word	0x20000010
	...

080120d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80120d0:	f3ef 8009 	mrs	r0, PSP
 80120d4:	f3bf 8f6f 	isb	sy
 80120d8:	4b15      	ldr	r3, [pc, #84]	; (8012130 <pxCurrentTCBConst>)
 80120da:	681a      	ldr	r2, [r3, #0]
 80120dc:	f01e 0f10 	tst.w	lr, #16
 80120e0:	bf08      	it	eq
 80120e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80120e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120ea:	6010      	str	r0, [r2, #0]
 80120ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80120f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80120f4:	f380 8811 	msr	BASEPRI, r0
 80120f8:	f3bf 8f4f 	dsb	sy
 80120fc:	f3bf 8f6f 	isb	sy
 8012100:	f7ff fb8e 	bl	8011820 <vTaskSwitchContext>
 8012104:	f04f 0000 	mov.w	r0, #0
 8012108:	f380 8811 	msr	BASEPRI, r0
 801210c:	bc09      	pop	{r0, r3}
 801210e:	6819      	ldr	r1, [r3, #0]
 8012110:	6808      	ldr	r0, [r1, #0]
 8012112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012116:	f01e 0f10 	tst.w	lr, #16
 801211a:	bf08      	it	eq
 801211c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012120:	f380 8809 	msr	PSP, r0
 8012124:	f3bf 8f6f 	isb	sy
 8012128:	4770      	bx	lr
 801212a:	bf00      	nop
 801212c:	f3af 8000 	nop.w

08012130 <pxCurrentTCBConst>:
 8012130:	20000eac 	.word	0x20000eac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012134:	bf00      	nop
 8012136:	bf00      	nop

08012138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
	__asm volatile
 801213e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012142:	f383 8811 	msr	BASEPRI, r3
 8012146:	f3bf 8f6f 	isb	sy
 801214a:	f3bf 8f4f 	dsb	sy
 801214e:	607b      	str	r3, [r7, #4]
}
 8012150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012152:	f7ff faad 	bl	80116b0 <xTaskIncrementTick>
 8012156:	4603      	mov	r3, r0
 8012158:	2b00      	cmp	r3, #0
 801215a:	d003      	beq.n	8012164 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801215c:	4b06      	ldr	r3, [pc, #24]	; (8012178 <SysTick_Handler+0x40>)
 801215e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012162:	601a      	str	r2, [r3, #0]
 8012164:	2300      	movs	r3, #0
 8012166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	f383 8811 	msr	BASEPRI, r3
}
 801216e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012170:	bf00      	nop
 8012172:	3708      	adds	r7, #8
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}
 8012178:	e000ed04 	.word	0xe000ed04

0801217c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801217c:	b480      	push	{r7}
 801217e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012180:	4b0b      	ldr	r3, [pc, #44]	; (80121b0 <vPortSetupTimerInterrupt+0x34>)
 8012182:	2200      	movs	r2, #0
 8012184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012186:	4b0b      	ldr	r3, [pc, #44]	; (80121b4 <vPortSetupTimerInterrupt+0x38>)
 8012188:	2200      	movs	r2, #0
 801218a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801218c:	4b0a      	ldr	r3, [pc, #40]	; (80121b8 <vPortSetupTimerInterrupt+0x3c>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	4a0a      	ldr	r2, [pc, #40]	; (80121bc <vPortSetupTimerInterrupt+0x40>)
 8012192:	fba2 2303 	umull	r2, r3, r2, r3
 8012196:	099b      	lsrs	r3, r3, #6
 8012198:	4a09      	ldr	r2, [pc, #36]	; (80121c0 <vPortSetupTimerInterrupt+0x44>)
 801219a:	3b01      	subs	r3, #1
 801219c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801219e:	4b04      	ldr	r3, [pc, #16]	; (80121b0 <vPortSetupTimerInterrupt+0x34>)
 80121a0:	2207      	movs	r2, #7
 80121a2:	601a      	str	r2, [r3, #0]
}
 80121a4:	bf00      	nop
 80121a6:	46bd      	mov	sp, r7
 80121a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ac:	4770      	bx	lr
 80121ae:	bf00      	nop
 80121b0:	e000e010 	.word	0xe000e010
 80121b4:	e000e018 	.word	0xe000e018
 80121b8:	20000004 	.word	0x20000004
 80121bc:	10624dd3 	.word	0x10624dd3
 80121c0:	e000e014 	.word	0xe000e014

080121c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80121c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80121d4 <vPortEnableVFP+0x10>
 80121c8:	6801      	ldr	r1, [r0, #0]
 80121ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80121ce:	6001      	str	r1, [r0, #0]
 80121d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80121d2:	bf00      	nop
 80121d4:	e000ed88 	.word	0xe000ed88

080121d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80121d8:	b480      	push	{r7}
 80121da:	b085      	sub	sp, #20
 80121dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80121de:	f3ef 8305 	mrs	r3, IPSR
 80121e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	2b0f      	cmp	r3, #15
 80121e8:	d914      	bls.n	8012214 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80121ea:	4a17      	ldr	r2, [pc, #92]	; (8012248 <vPortValidateInterruptPriority+0x70>)
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	4413      	add	r3, r2
 80121f0:	781b      	ldrb	r3, [r3, #0]
 80121f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80121f4:	4b15      	ldr	r3, [pc, #84]	; (801224c <vPortValidateInterruptPriority+0x74>)
 80121f6:	781b      	ldrb	r3, [r3, #0]
 80121f8:	7afa      	ldrb	r2, [r7, #11]
 80121fa:	429a      	cmp	r2, r3
 80121fc:	d20a      	bcs.n	8012214 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80121fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012202:	f383 8811 	msr	BASEPRI, r3
 8012206:	f3bf 8f6f 	isb	sy
 801220a:	f3bf 8f4f 	dsb	sy
 801220e:	607b      	str	r3, [r7, #4]
}
 8012210:	bf00      	nop
 8012212:	e7fe      	b.n	8012212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012214:	4b0e      	ldr	r3, [pc, #56]	; (8012250 <vPortValidateInterruptPriority+0x78>)
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801221c:	4b0d      	ldr	r3, [pc, #52]	; (8012254 <vPortValidateInterruptPriority+0x7c>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	429a      	cmp	r2, r3
 8012222:	d90a      	bls.n	801223a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012228:	f383 8811 	msr	BASEPRI, r3
 801222c:	f3bf 8f6f 	isb	sy
 8012230:	f3bf 8f4f 	dsb	sy
 8012234:	603b      	str	r3, [r7, #0]
}
 8012236:	bf00      	nop
 8012238:	e7fe      	b.n	8012238 <vPortValidateInterruptPriority+0x60>
	}
 801223a:	bf00      	nop
 801223c:	3714      	adds	r7, #20
 801223e:	46bd      	mov	sp, r7
 8012240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012244:	4770      	bx	lr
 8012246:	bf00      	nop
 8012248:	e000e3f0 	.word	0xe000e3f0
 801224c:	20000fd8 	.word	0x20000fd8
 8012250:	e000ed0c 	.word	0xe000ed0c
 8012254:	20000fdc 	.word	0x20000fdc

08012258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b08a      	sub	sp, #40	; 0x28
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012260:	2300      	movs	r3, #0
 8012262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012264:	f7ff f96a 	bl	801153c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012268:	4b5b      	ldr	r3, [pc, #364]	; (80123d8 <pvPortMalloc+0x180>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d101      	bne.n	8012274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012270:	f000 f920 	bl	80124b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012274:	4b59      	ldr	r3, [pc, #356]	; (80123dc <pvPortMalloc+0x184>)
 8012276:	681a      	ldr	r2, [r3, #0]
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	4013      	ands	r3, r2
 801227c:	2b00      	cmp	r3, #0
 801227e:	f040 8093 	bne.w	80123a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d01d      	beq.n	80122c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012288:	2208      	movs	r2, #8
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	4413      	add	r3, r2
 801228e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f003 0307 	and.w	r3, r3, #7
 8012296:	2b00      	cmp	r3, #0
 8012298:	d014      	beq.n	80122c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f023 0307 	bic.w	r3, r3, #7
 80122a0:	3308      	adds	r3, #8
 80122a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f003 0307 	and.w	r3, r3, #7
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d00a      	beq.n	80122c4 <pvPortMalloc+0x6c>
	__asm volatile
 80122ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122b2:	f383 8811 	msr	BASEPRI, r3
 80122b6:	f3bf 8f6f 	isb	sy
 80122ba:	f3bf 8f4f 	dsb	sy
 80122be:	617b      	str	r3, [r7, #20]
}
 80122c0:	bf00      	nop
 80122c2:	e7fe      	b.n	80122c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d06e      	beq.n	80123a8 <pvPortMalloc+0x150>
 80122ca:	4b45      	ldr	r3, [pc, #276]	; (80123e0 <pvPortMalloc+0x188>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	687a      	ldr	r2, [r7, #4]
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d869      	bhi.n	80123a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80122d4:	4b43      	ldr	r3, [pc, #268]	; (80123e4 <pvPortMalloc+0x18c>)
 80122d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80122d8:	4b42      	ldr	r3, [pc, #264]	; (80123e4 <pvPortMalloc+0x18c>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80122de:	e004      	b.n	80122ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80122e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80122e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80122ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ec:	685b      	ldr	r3, [r3, #4]
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	429a      	cmp	r2, r3
 80122f2:	d903      	bls.n	80122fc <pvPortMalloc+0xa4>
 80122f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d1f1      	bne.n	80122e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80122fc:	4b36      	ldr	r3, [pc, #216]	; (80123d8 <pvPortMalloc+0x180>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012302:	429a      	cmp	r2, r3
 8012304:	d050      	beq.n	80123a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012306:	6a3b      	ldr	r3, [r7, #32]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	2208      	movs	r2, #8
 801230c:	4413      	add	r3, r2
 801230e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012312:	681a      	ldr	r2, [r3, #0]
 8012314:	6a3b      	ldr	r3, [r7, #32]
 8012316:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801231a:	685a      	ldr	r2, [r3, #4]
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	1ad2      	subs	r2, r2, r3
 8012320:	2308      	movs	r3, #8
 8012322:	005b      	lsls	r3, r3, #1
 8012324:	429a      	cmp	r2, r3
 8012326:	d91f      	bls.n	8012368 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	4413      	add	r3, r2
 801232e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012330:	69bb      	ldr	r3, [r7, #24]
 8012332:	f003 0307 	and.w	r3, r3, #7
 8012336:	2b00      	cmp	r3, #0
 8012338:	d00a      	beq.n	8012350 <pvPortMalloc+0xf8>
	__asm volatile
 801233a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801233e:	f383 8811 	msr	BASEPRI, r3
 8012342:	f3bf 8f6f 	isb	sy
 8012346:	f3bf 8f4f 	dsb	sy
 801234a:	613b      	str	r3, [r7, #16]
}
 801234c:	bf00      	nop
 801234e:	e7fe      	b.n	801234e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012352:	685a      	ldr	r2, [r3, #4]
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	1ad2      	subs	r2, r2, r3
 8012358:	69bb      	ldr	r3, [r7, #24]
 801235a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235e:	687a      	ldr	r2, [r7, #4]
 8012360:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012362:	69b8      	ldr	r0, [r7, #24]
 8012364:	f000 f908 	bl	8012578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012368:	4b1d      	ldr	r3, [pc, #116]	; (80123e0 <pvPortMalloc+0x188>)
 801236a:	681a      	ldr	r2, [r3, #0]
 801236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236e:	685b      	ldr	r3, [r3, #4]
 8012370:	1ad3      	subs	r3, r2, r3
 8012372:	4a1b      	ldr	r2, [pc, #108]	; (80123e0 <pvPortMalloc+0x188>)
 8012374:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012376:	4b1a      	ldr	r3, [pc, #104]	; (80123e0 <pvPortMalloc+0x188>)
 8012378:	681a      	ldr	r2, [r3, #0]
 801237a:	4b1b      	ldr	r3, [pc, #108]	; (80123e8 <pvPortMalloc+0x190>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	429a      	cmp	r2, r3
 8012380:	d203      	bcs.n	801238a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012382:	4b17      	ldr	r3, [pc, #92]	; (80123e0 <pvPortMalloc+0x188>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	4a18      	ldr	r2, [pc, #96]	; (80123e8 <pvPortMalloc+0x190>)
 8012388:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801238c:	685a      	ldr	r2, [r3, #4]
 801238e:	4b13      	ldr	r3, [pc, #76]	; (80123dc <pvPortMalloc+0x184>)
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	431a      	orrs	r2, r3
 8012394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012396:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801239a:	2200      	movs	r2, #0
 801239c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801239e:	4b13      	ldr	r3, [pc, #76]	; (80123ec <pvPortMalloc+0x194>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	3301      	adds	r3, #1
 80123a4:	4a11      	ldr	r2, [pc, #68]	; (80123ec <pvPortMalloc+0x194>)
 80123a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80123a8:	f7ff f8d6 	bl	8011558 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80123ac:	69fb      	ldr	r3, [r7, #28]
 80123ae:	f003 0307 	and.w	r3, r3, #7
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d00a      	beq.n	80123cc <pvPortMalloc+0x174>
	__asm volatile
 80123b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ba:	f383 8811 	msr	BASEPRI, r3
 80123be:	f3bf 8f6f 	isb	sy
 80123c2:	f3bf 8f4f 	dsb	sy
 80123c6:	60fb      	str	r3, [r7, #12]
}
 80123c8:	bf00      	nop
 80123ca:	e7fe      	b.n	80123ca <pvPortMalloc+0x172>
	return pvReturn;
 80123cc:	69fb      	ldr	r3, [r7, #28]
}
 80123ce:	4618      	mov	r0, r3
 80123d0:	3728      	adds	r7, #40	; 0x28
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}
 80123d6:	bf00      	nop
 80123d8:	20004be8 	.word	0x20004be8
 80123dc:	20004bfc 	.word	0x20004bfc
 80123e0:	20004bec 	.word	0x20004bec
 80123e4:	20004be0 	.word	0x20004be0
 80123e8:	20004bf0 	.word	0x20004bf0
 80123ec:	20004bf4 	.word	0x20004bf4

080123f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b086      	sub	sp, #24
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d04d      	beq.n	801249e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012402:	2308      	movs	r3, #8
 8012404:	425b      	negs	r3, r3
 8012406:	697a      	ldr	r2, [r7, #20]
 8012408:	4413      	add	r3, r2
 801240a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012410:	693b      	ldr	r3, [r7, #16]
 8012412:	685a      	ldr	r2, [r3, #4]
 8012414:	4b24      	ldr	r3, [pc, #144]	; (80124a8 <vPortFree+0xb8>)
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	4013      	ands	r3, r2
 801241a:	2b00      	cmp	r3, #0
 801241c:	d10a      	bne.n	8012434 <vPortFree+0x44>
	__asm volatile
 801241e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012422:	f383 8811 	msr	BASEPRI, r3
 8012426:	f3bf 8f6f 	isb	sy
 801242a:	f3bf 8f4f 	dsb	sy
 801242e:	60fb      	str	r3, [r7, #12]
}
 8012430:	bf00      	nop
 8012432:	e7fe      	b.n	8012432 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012434:	693b      	ldr	r3, [r7, #16]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d00a      	beq.n	8012452 <vPortFree+0x62>
	__asm volatile
 801243c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012440:	f383 8811 	msr	BASEPRI, r3
 8012444:	f3bf 8f6f 	isb	sy
 8012448:	f3bf 8f4f 	dsb	sy
 801244c:	60bb      	str	r3, [r7, #8]
}
 801244e:	bf00      	nop
 8012450:	e7fe      	b.n	8012450 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012452:	693b      	ldr	r3, [r7, #16]
 8012454:	685a      	ldr	r2, [r3, #4]
 8012456:	4b14      	ldr	r3, [pc, #80]	; (80124a8 <vPortFree+0xb8>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	4013      	ands	r3, r2
 801245c:	2b00      	cmp	r3, #0
 801245e:	d01e      	beq.n	801249e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012460:	693b      	ldr	r3, [r7, #16]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d11a      	bne.n	801249e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012468:	693b      	ldr	r3, [r7, #16]
 801246a:	685a      	ldr	r2, [r3, #4]
 801246c:	4b0e      	ldr	r3, [pc, #56]	; (80124a8 <vPortFree+0xb8>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	43db      	mvns	r3, r3
 8012472:	401a      	ands	r2, r3
 8012474:	693b      	ldr	r3, [r7, #16]
 8012476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012478:	f7ff f860 	bl	801153c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801247c:	693b      	ldr	r3, [r7, #16]
 801247e:	685a      	ldr	r2, [r3, #4]
 8012480:	4b0a      	ldr	r3, [pc, #40]	; (80124ac <vPortFree+0xbc>)
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	4413      	add	r3, r2
 8012486:	4a09      	ldr	r2, [pc, #36]	; (80124ac <vPortFree+0xbc>)
 8012488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801248a:	6938      	ldr	r0, [r7, #16]
 801248c:	f000 f874 	bl	8012578 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012490:	4b07      	ldr	r3, [pc, #28]	; (80124b0 <vPortFree+0xc0>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	3301      	adds	r3, #1
 8012496:	4a06      	ldr	r2, [pc, #24]	; (80124b0 <vPortFree+0xc0>)
 8012498:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801249a:	f7ff f85d 	bl	8011558 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801249e:	bf00      	nop
 80124a0:	3718      	adds	r7, #24
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}
 80124a6:	bf00      	nop
 80124a8:	20004bfc 	.word	0x20004bfc
 80124ac:	20004bec 	.word	0x20004bec
 80124b0:	20004bf8 	.word	0x20004bf8

080124b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80124b4:	b480      	push	{r7}
 80124b6:	b085      	sub	sp, #20
 80124b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80124ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80124be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80124c0:	4b27      	ldr	r3, [pc, #156]	; (8012560 <prvHeapInit+0xac>)
 80124c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	f003 0307 	and.w	r3, r3, #7
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d00c      	beq.n	80124e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	3307      	adds	r3, #7
 80124d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	f023 0307 	bic.w	r3, r3, #7
 80124da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80124dc:	68ba      	ldr	r2, [r7, #8]
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	1ad3      	subs	r3, r2, r3
 80124e2:	4a1f      	ldr	r2, [pc, #124]	; (8012560 <prvHeapInit+0xac>)
 80124e4:	4413      	add	r3, r2
 80124e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80124ec:	4a1d      	ldr	r2, [pc, #116]	; (8012564 <prvHeapInit+0xb0>)
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80124f2:	4b1c      	ldr	r3, [pc, #112]	; (8012564 <prvHeapInit+0xb0>)
 80124f4:	2200      	movs	r2, #0
 80124f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	68ba      	ldr	r2, [r7, #8]
 80124fc:	4413      	add	r3, r2
 80124fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012500:	2208      	movs	r2, #8
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	1a9b      	subs	r3, r3, r2
 8012506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	f023 0307 	bic.w	r3, r3, #7
 801250e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	4a15      	ldr	r2, [pc, #84]	; (8012568 <prvHeapInit+0xb4>)
 8012514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012516:	4b14      	ldr	r3, [pc, #80]	; (8012568 <prvHeapInit+0xb4>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	2200      	movs	r2, #0
 801251c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801251e:	4b12      	ldr	r3, [pc, #72]	; (8012568 <prvHeapInit+0xb4>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	2200      	movs	r2, #0
 8012524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	68fa      	ldr	r2, [r7, #12]
 801252e:	1ad2      	subs	r2, r2, r3
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012534:	4b0c      	ldr	r3, [pc, #48]	; (8012568 <prvHeapInit+0xb4>)
 8012536:	681a      	ldr	r2, [r3, #0]
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	685b      	ldr	r3, [r3, #4]
 8012540:	4a0a      	ldr	r2, [pc, #40]	; (801256c <prvHeapInit+0xb8>)
 8012542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012544:	683b      	ldr	r3, [r7, #0]
 8012546:	685b      	ldr	r3, [r3, #4]
 8012548:	4a09      	ldr	r2, [pc, #36]	; (8012570 <prvHeapInit+0xbc>)
 801254a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801254c:	4b09      	ldr	r3, [pc, #36]	; (8012574 <prvHeapInit+0xc0>)
 801254e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012552:	601a      	str	r2, [r3, #0]
}
 8012554:	bf00      	nop
 8012556:	3714      	adds	r7, #20
 8012558:	46bd      	mov	sp, r7
 801255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255e:	4770      	bx	lr
 8012560:	20000fe0 	.word	0x20000fe0
 8012564:	20004be0 	.word	0x20004be0
 8012568:	20004be8 	.word	0x20004be8
 801256c:	20004bf0 	.word	0x20004bf0
 8012570:	20004bec 	.word	0x20004bec
 8012574:	20004bfc 	.word	0x20004bfc

08012578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012578:	b480      	push	{r7}
 801257a:	b085      	sub	sp, #20
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012580:	4b28      	ldr	r3, [pc, #160]	; (8012624 <prvInsertBlockIntoFreeList+0xac>)
 8012582:	60fb      	str	r3, [r7, #12]
 8012584:	e002      	b.n	801258c <prvInsertBlockIntoFreeList+0x14>
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	60fb      	str	r3, [r7, #12]
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	687a      	ldr	r2, [r7, #4]
 8012592:	429a      	cmp	r2, r3
 8012594:	d8f7      	bhi.n	8012586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	685b      	ldr	r3, [r3, #4]
 801259e:	68ba      	ldr	r2, [r7, #8]
 80125a0:	4413      	add	r3, r2
 80125a2:	687a      	ldr	r2, [r7, #4]
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d108      	bne.n	80125ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	685a      	ldr	r2, [r3, #4]
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	685b      	ldr	r3, [r3, #4]
 80125b0:	441a      	add	r2, r3
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	685b      	ldr	r3, [r3, #4]
 80125c2:	68ba      	ldr	r2, [r7, #8]
 80125c4:	441a      	add	r2, r3
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	429a      	cmp	r2, r3
 80125cc:	d118      	bne.n	8012600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	681a      	ldr	r2, [r3, #0]
 80125d2:	4b15      	ldr	r3, [pc, #84]	; (8012628 <prvInsertBlockIntoFreeList+0xb0>)
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	429a      	cmp	r2, r3
 80125d8:	d00d      	beq.n	80125f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	685a      	ldr	r2, [r3, #4]
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	685b      	ldr	r3, [r3, #4]
 80125e4:	441a      	add	r2, r3
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	681a      	ldr	r2, [r3, #0]
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	601a      	str	r2, [r3, #0]
 80125f4:	e008      	b.n	8012608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80125f6:	4b0c      	ldr	r3, [pc, #48]	; (8012628 <prvInsertBlockIntoFreeList+0xb0>)
 80125f8:	681a      	ldr	r2, [r3, #0]
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	601a      	str	r2, [r3, #0]
 80125fe:	e003      	b.n	8012608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	681a      	ldr	r2, [r3, #0]
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012608:	68fa      	ldr	r2, [r7, #12]
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	429a      	cmp	r2, r3
 801260e:	d002      	beq.n	8012616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	687a      	ldr	r2, [r7, #4]
 8012614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012616:	bf00      	nop
 8012618:	3714      	adds	r7, #20
 801261a:	46bd      	mov	sp, r7
 801261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012620:	4770      	bx	lr
 8012622:	bf00      	nop
 8012624:	20004be0 	.word	0x20004be0
 8012628:	20004be8 	.word	0x20004be8

0801262c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801262c:	b580      	push	{r7, lr}
 801262e:	b082      	sub	sp, #8
 8012630:	af00      	add	r7, sp, #0
 8012632:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012640:	4619      	mov	r1, r3
 8012642:	4610      	mov	r0, r2
 8012644:	f7fd fae9 	bl	800fc1a <USBD_LL_SetupStage>
}
 8012648:	bf00      	nop
 801264a:	3708      	adds	r7, #8
 801264c:	46bd      	mov	sp, r7
 801264e:	bd80      	pop	{r7, pc}

08012650 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b082      	sub	sp, #8
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
 8012658:	460b      	mov	r3, r1
 801265a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012662:	78fa      	ldrb	r2, [r7, #3]
 8012664:	6879      	ldr	r1, [r7, #4]
 8012666:	4613      	mov	r3, r2
 8012668:	00db      	lsls	r3, r3, #3
 801266a:	4413      	add	r3, r2
 801266c:	009b      	lsls	r3, r3, #2
 801266e:	440b      	add	r3, r1
 8012670:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012674:	681a      	ldr	r2, [r3, #0]
 8012676:	78fb      	ldrb	r3, [r7, #3]
 8012678:	4619      	mov	r1, r3
 801267a:	f7fd fb23 	bl	800fcc4 <USBD_LL_DataOutStage>
}
 801267e:	bf00      	nop
 8012680:	3708      	adds	r7, #8
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}

08012686 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012686:	b580      	push	{r7, lr}
 8012688:	b082      	sub	sp, #8
 801268a:	af00      	add	r7, sp, #0
 801268c:	6078      	str	r0, [r7, #4]
 801268e:	460b      	mov	r3, r1
 8012690:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012698:	78fa      	ldrb	r2, [r7, #3]
 801269a:	6879      	ldr	r1, [r7, #4]
 801269c:	4613      	mov	r3, r2
 801269e:	00db      	lsls	r3, r3, #3
 80126a0:	4413      	add	r3, r2
 80126a2:	009b      	lsls	r3, r3, #2
 80126a4:	440b      	add	r3, r1
 80126a6:	334c      	adds	r3, #76	; 0x4c
 80126a8:	681a      	ldr	r2, [r3, #0]
 80126aa:	78fb      	ldrb	r3, [r7, #3]
 80126ac:	4619      	mov	r1, r3
 80126ae:	f7fd fbbc 	bl	800fe2a <USBD_LL_DataInStage>
}
 80126b2:	bf00      	nop
 80126b4:	3708      	adds	r7, #8
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}

080126ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126ba:	b580      	push	{r7, lr}
 80126bc:	b082      	sub	sp, #8
 80126be:	af00      	add	r7, sp, #0
 80126c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7fd fcf0 	bl	80100ae <USBD_LL_SOF>
}
 80126ce:	bf00      	nop
 80126d0:	3708      	adds	r7, #8
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bd80      	pop	{r7, pc}

080126d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126d6:	b580      	push	{r7, lr}
 80126d8:	b084      	sub	sp, #16
 80126da:	af00      	add	r7, sp, #0
 80126dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80126de:	2301      	movs	r3, #1
 80126e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	68db      	ldr	r3, [r3, #12]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d102      	bne.n	80126f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80126ea:	2300      	movs	r3, #0
 80126ec:	73fb      	strb	r3, [r7, #15]
 80126ee:	e008      	b.n	8012702 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	68db      	ldr	r3, [r3, #12]
 80126f4:	2b02      	cmp	r3, #2
 80126f6:	d102      	bne.n	80126fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80126f8:	2301      	movs	r3, #1
 80126fa:	73fb      	strb	r3, [r7, #15]
 80126fc:	e001      	b.n	8012702 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80126fe:	f7ef fd71 	bl	80021e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012708:	7bfa      	ldrb	r2, [r7, #15]
 801270a:	4611      	mov	r1, r2
 801270c:	4618      	mov	r0, r3
 801270e:	f7fd fc90 	bl	8010032 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012718:	4618      	mov	r0, r3
 801271a:	f7fd fc38 	bl	800ff8e <USBD_LL_Reset>
}
 801271e:	bf00      	nop
 8012720:	3710      	adds	r7, #16
 8012722:	46bd      	mov	sp, r7
 8012724:	bd80      	pop	{r7, pc}
	...

08012728 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b082      	sub	sp, #8
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012736:	4618      	mov	r0, r3
 8012738:	f7fd fc8b 	bl	8010052 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	687a      	ldr	r2, [r7, #4]
 8012748:	6812      	ldr	r2, [r2, #0]
 801274a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801274e:	f043 0301 	orr.w	r3, r3, #1
 8012752:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	6a1b      	ldr	r3, [r3, #32]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d005      	beq.n	8012768 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801275c:	4b04      	ldr	r3, [pc, #16]	; (8012770 <HAL_PCD_SuspendCallback+0x48>)
 801275e:	691b      	ldr	r3, [r3, #16]
 8012760:	4a03      	ldr	r2, [pc, #12]	; (8012770 <HAL_PCD_SuspendCallback+0x48>)
 8012762:	f043 0306 	orr.w	r3, r3, #6
 8012766:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012768:	bf00      	nop
 801276a:	3708      	adds	r7, #8
 801276c:	46bd      	mov	sp, r7
 801276e:	bd80      	pop	{r7, pc}
 8012770:	e000ed00 	.word	0xe000ed00

08012774 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b082      	sub	sp, #8
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012782:	4618      	mov	r0, r3
 8012784:	f7fd fc7b 	bl	801007e <USBD_LL_Resume>
}
 8012788:	bf00      	nop
 801278a:	3708      	adds	r7, #8
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}

08012790 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b082      	sub	sp, #8
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
 8012798:	460b      	mov	r3, r1
 801279a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80127a2:	78fa      	ldrb	r2, [r7, #3]
 80127a4:	4611      	mov	r1, r2
 80127a6:	4618      	mov	r0, r3
 80127a8:	f7fd fcd3 	bl	8010152 <USBD_LL_IsoOUTIncomplete>
}
 80127ac:	bf00      	nop
 80127ae:	3708      	adds	r7, #8
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}

080127b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b082      	sub	sp, #8
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	460b      	mov	r3, r1
 80127be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80127c6:	78fa      	ldrb	r2, [r7, #3]
 80127c8:	4611      	mov	r1, r2
 80127ca:	4618      	mov	r0, r3
 80127cc:	f7fd fc8f 	bl	80100ee <USBD_LL_IsoINIncomplete>
}
 80127d0:	bf00      	nop
 80127d2:	3708      	adds	r7, #8
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}

080127d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b082      	sub	sp, #8
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80127e6:	4618      	mov	r0, r3
 80127e8:	f7fd fce5 	bl	80101b6 <USBD_LL_DevConnected>
}
 80127ec:	bf00      	nop
 80127ee:	3708      	adds	r7, #8
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd80      	pop	{r7, pc}

080127f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b082      	sub	sp, #8
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012802:	4618      	mov	r0, r3
 8012804:	f7fd fce2 	bl	80101cc <USBD_LL_DevDisconnected>
}
 8012808:	bf00      	nop
 801280a:	3708      	adds	r7, #8
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}

08012810 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b084      	sub	sp, #16
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
 8012818:	4608      	mov	r0, r1
 801281a:	4611      	mov	r1, r2
 801281c:	461a      	mov	r2, r3
 801281e:	4603      	mov	r3, r0
 8012820:	70fb      	strb	r3, [r7, #3]
 8012822:	460b      	mov	r3, r1
 8012824:	70bb      	strb	r3, [r7, #2]
 8012826:	4613      	mov	r3, r2
 8012828:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801282a:	2300      	movs	r3, #0
 801282c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801282e:	2300      	movs	r3, #0
 8012830:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012838:	78bb      	ldrb	r3, [r7, #2]
 801283a:	883a      	ldrh	r2, [r7, #0]
 801283c:	78f9      	ldrb	r1, [r7, #3]
 801283e:	f7f6 fe35 	bl	80094ac <HAL_PCD_EP_Open>
 8012842:	4603      	mov	r3, r0
 8012844:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012846:	7bfb      	ldrb	r3, [r7, #15]
 8012848:	4618      	mov	r0, r3
 801284a:	f000 f8d3 	bl	80129f4 <USBD_Get_USB_Status>
 801284e:	4603      	mov	r3, r0
 8012850:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012852:	7bbb      	ldrb	r3, [r7, #14]
}
 8012854:	4618      	mov	r0, r3
 8012856:	3710      	adds	r7, #16
 8012858:	46bd      	mov	sp, r7
 801285a:	bd80      	pop	{r7, pc}

0801285c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b084      	sub	sp, #16
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
 8012864:	460b      	mov	r3, r1
 8012866:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012868:	2300      	movs	r3, #0
 801286a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801286c:	2300      	movs	r3, #0
 801286e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012876:	78fa      	ldrb	r2, [r7, #3]
 8012878:	4611      	mov	r1, r2
 801287a:	4618      	mov	r0, r3
 801287c:	f7f6 ff13 	bl	80096a6 <HAL_PCD_EP_SetStall>
 8012880:	4603      	mov	r3, r0
 8012882:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012884:	7bfb      	ldrb	r3, [r7, #15]
 8012886:	4618      	mov	r0, r3
 8012888:	f000 f8b4 	bl	80129f4 <USBD_Get_USB_Status>
 801288c:	4603      	mov	r3, r0
 801288e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012890:	7bbb      	ldrb	r3, [r7, #14]
}
 8012892:	4618      	mov	r0, r3
 8012894:	3710      	adds	r7, #16
 8012896:	46bd      	mov	sp, r7
 8012898:	bd80      	pop	{r7, pc}

0801289a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801289a:	b580      	push	{r7, lr}
 801289c:	b084      	sub	sp, #16
 801289e:	af00      	add	r7, sp, #0
 80128a0:	6078      	str	r0, [r7, #4]
 80128a2:	460b      	mov	r3, r1
 80128a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128a6:	2300      	movs	r3, #0
 80128a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128aa:	2300      	movs	r3, #0
 80128ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80128b4:	78fa      	ldrb	r2, [r7, #3]
 80128b6:	4611      	mov	r1, r2
 80128b8:	4618      	mov	r0, r3
 80128ba:	f7f6 ff58 	bl	800976e <HAL_PCD_EP_ClrStall>
 80128be:	4603      	mov	r3, r0
 80128c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128c2:	7bfb      	ldrb	r3, [r7, #15]
 80128c4:	4618      	mov	r0, r3
 80128c6:	f000 f895 	bl	80129f4 <USBD_Get_USB_Status>
 80128ca:	4603      	mov	r3, r0
 80128cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80128d0:	4618      	mov	r0, r3
 80128d2:	3710      	adds	r7, #16
 80128d4:	46bd      	mov	sp, r7
 80128d6:	bd80      	pop	{r7, pc}

080128d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80128d8:	b480      	push	{r7}
 80128da:	b085      	sub	sp, #20
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
 80128e0:	460b      	mov	r3, r1
 80128e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80128ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80128ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	da0b      	bge.n	801290c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80128f4:	78fb      	ldrb	r3, [r7, #3]
 80128f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80128fa:	68f9      	ldr	r1, [r7, #12]
 80128fc:	4613      	mov	r3, r2
 80128fe:	00db      	lsls	r3, r3, #3
 8012900:	4413      	add	r3, r2
 8012902:	009b      	lsls	r3, r3, #2
 8012904:	440b      	add	r3, r1
 8012906:	333e      	adds	r3, #62	; 0x3e
 8012908:	781b      	ldrb	r3, [r3, #0]
 801290a:	e00b      	b.n	8012924 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801290c:	78fb      	ldrb	r3, [r7, #3]
 801290e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012912:	68f9      	ldr	r1, [r7, #12]
 8012914:	4613      	mov	r3, r2
 8012916:	00db      	lsls	r3, r3, #3
 8012918:	4413      	add	r3, r2
 801291a:	009b      	lsls	r3, r3, #2
 801291c:	440b      	add	r3, r1
 801291e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8012922:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012924:	4618      	mov	r0, r3
 8012926:	3714      	adds	r7, #20
 8012928:	46bd      	mov	sp, r7
 801292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292e:	4770      	bx	lr

08012930 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b084      	sub	sp, #16
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
 8012938:	460b      	mov	r3, r1
 801293a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801293c:	2300      	movs	r3, #0
 801293e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012940:	2300      	movs	r3, #0
 8012942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801294a:	78fa      	ldrb	r2, [r7, #3]
 801294c:	4611      	mov	r1, r2
 801294e:	4618      	mov	r0, r3
 8012950:	f7f6 fd87 	bl	8009462 <HAL_PCD_SetAddress>
 8012954:	4603      	mov	r3, r0
 8012956:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012958:	7bfb      	ldrb	r3, [r7, #15]
 801295a:	4618      	mov	r0, r3
 801295c:	f000 f84a 	bl	80129f4 <USBD_Get_USB_Status>
 8012960:	4603      	mov	r3, r0
 8012962:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012964:	7bbb      	ldrb	r3, [r7, #14]
}
 8012966:	4618      	mov	r0, r3
 8012968:	3710      	adds	r7, #16
 801296a:	46bd      	mov	sp, r7
 801296c:	bd80      	pop	{r7, pc}

0801296e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801296e:	b580      	push	{r7, lr}
 8012970:	b086      	sub	sp, #24
 8012972:	af00      	add	r7, sp, #0
 8012974:	60f8      	str	r0, [r7, #12]
 8012976:	607a      	str	r2, [r7, #4]
 8012978:	603b      	str	r3, [r7, #0]
 801297a:	460b      	mov	r3, r1
 801297c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801297e:	2300      	movs	r3, #0
 8012980:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012982:	2300      	movs	r3, #0
 8012984:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801298c:	7af9      	ldrb	r1, [r7, #11]
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	687a      	ldr	r2, [r7, #4]
 8012992:	f7f6 fe3e 	bl	8009612 <HAL_PCD_EP_Transmit>
 8012996:	4603      	mov	r3, r0
 8012998:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801299a:	7dfb      	ldrb	r3, [r7, #23]
 801299c:	4618      	mov	r0, r3
 801299e:	f000 f829 	bl	80129f4 <USBD_Get_USB_Status>
 80129a2:	4603      	mov	r3, r0
 80129a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80129a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80129a8:	4618      	mov	r0, r3
 80129aa:	3718      	adds	r7, #24
 80129ac:	46bd      	mov	sp, r7
 80129ae:	bd80      	pop	{r7, pc}

080129b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b086      	sub	sp, #24
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	60f8      	str	r0, [r7, #12]
 80129b8:	607a      	str	r2, [r7, #4]
 80129ba:	603b      	str	r3, [r7, #0]
 80129bc:	460b      	mov	r3, r1
 80129be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129c0:	2300      	movs	r3, #0
 80129c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129c4:	2300      	movs	r3, #0
 80129c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80129ce:	7af9      	ldrb	r1, [r7, #11]
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	687a      	ldr	r2, [r7, #4]
 80129d4:	f7f6 fdd2 	bl	800957c <HAL_PCD_EP_Receive>
 80129d8:	4603      	mov	r3, r0
 80129da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80129dc:	7dfb      	ldrb	r3, [r7, #23]
 80129de:	4618      	mov	r0, r3
 80129e0:	f000 f808 	bl	80129f4 <USBD_Get_USB_Status>
 80129e4:	4603      	mov	r3, r0
 80129e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80129e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3718      	adds	r7, #24
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
	...

080129f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80129f4:	b480      	push	{r7}
 80129f6:	b085      	sub	sp, #20
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	4603      	mov	r3, r0
 80129fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129fe:	2300      	movs	r3, #0
 8012a00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012a02:	79fb      	ldrb	r3, [r7, #7]
 8012a04:	2b03      	cmp	r3, #3
 8012a06:	d817      	bhi.n	8012a38 <USBD_Get_USB_Status+0x44>
 8012a08:	a201      	add	r2, pc, #4	; (adr r2, 8012a10 <USBD_Get_USB_Status+0x1c>)
 8012a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a0e:	bf00      	nop
 8012a10:	08012a21 	.word	0x08012a21
 8012a14:	08012a27 	.word	0x08012a27
 8012a18:	08012a2d 	.word	0x08012a2d
 8012a1c:	08012a33 	.word	0x08012a33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012a20:	2300      	movs	r3, #0
 8012a22:	73fb      	strb	r3, [r7, #15]
    break;
 8012a24:	e00b      	b.n	8012a3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012a26:	2303      	movs	r3, #3
 8012a28:	73fb      	strb	r3, [r7, #15]
    break;
 8012a2a:	e008      	b.n	8012a3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012a2c:	2301      	movs	r3, #1
 8012a2e:	73fb      	strb	r3, [r7, #15]
    break;
 8012a30:	e005      	b.n	8012a3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012a32:	2303      	movs	r3, #3
 8012a34:	73fb      	strb	r3, [r7, #15]
    break;
 8012a36:	e002      	b.n	8012a3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012a38:	2303      	movs	r3, #3
 8012a3a:	73fb      	strb	r3, [r7, #15]
    break;
 8012a3c:	bf00      	nop
  }
  return usb_status;
 8012a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	3714      	adds	r7, #20
 8012a44:	46bd      	mov	sp, r7
 8012a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4a:	4770      	bx	lr

08012a4c <_ZdlPvj>:
 8012a4c:	f000 b923 	b.w	8012c96 <_ZdlPv>

08012a50 <_Znwj>:
 8012a50:	2801      	cmp	r0, #1
 8012a52:	bf38      	it	cc
 8012a54:	2001      	movcc	r0, #1
 8012a56:	b510      	push	{r4, lr}
 8012a58:	4604      	mov	r4, r0
 8012a5a:	4620      	mov	r0, r4
 8012a5c:	f001 ff9c 	bl	8014998 <malloc>
 8012a60:	b930      	cbnz	r0, 8012a70 <_Znwj+0x20>
 8012a62:	f000 f92d 	bl	8012cc0 <_ZSt15get_new_handlerv>
 8012a66:	b908      	cbnz	r0, 8012a6c <_Znwj+0x1c>
 8012a68:	f001 ff60 	bl	801492c <abort>
 8012a6c:	4780      	blx	r0
 8012a6e:	e7f4      	b.n	8012a5a <_Znwj+0xa>
 8012a70:	bd10      	pop	{r4, pc}

08012a72 <__cxa_pure_virtual>:
 8012a72:	b508      	push	{r3, lr}
 8012a74:	f000 f91e 	bl	8012cb4 <_ZSt9terminatev>

08012a78 <_ZNSaIcEC1Ev>:
 8012a78:	4770      	bx	lr

08012a7a <_ZNSaIcED1Ev>:
 8012a7a:	4770      	bx	lr

08012a7c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8012a7c:	68c3      	ldr	r3, [r0, #12]
 8012a7e:	689a      	ldr	r2, [r3, #8]
 8012a80:	60c2      	str	r2, [r0, #12]
 8012a82:	b510      	push	{r4, lr}
 8012a84:	b102      	cbz	r2, 8012a88 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8012a86:	6050      	str	r0, [r2, #4]
 8012a88:	6842      	ldr	r2, [r0, #4]
 8012a8a:	605a      	str	r2, [r3, #4]
 8012a8c:	680c      	ldr	r4, [r1, #0]
 8012a8e:	4284      	cmp	r4, r0
 8012a90:	d103      	bne.n	8012a9a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8012a92:	600b      	str	r3, [r1, #0]
 8012a94:	6098      	str	r0, [r3, #8]
 8012a96:	6043      	str	r3, [r0, #4]
 8012a98:	bd10      	pop	{r4, pc}
 8012a9a:	6891      	ldr	r1, [r2, #8]
 8012a9c:	4281      	cmp	r1, r0
 8012a9e:	bf0c      	ite	eq
 8012aa0:	6093      	streq	r3, [r2, #8]
 8012aa2:	60d3      	strne	r3, [r2, #12]
 8012aa4:	e7f6      	b.n	8012a94 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08012aa6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8012aa6:	6883      	ldr	r3, [r0, #8]
 8012aa8:	68da      	ldr	r2, [r3, #12]
 8012aaa:	6082      	str	r2, [r0, #8]
 8012aac:	b510      	push	{r4, lr}
 8012aae:	b102      	cbz	r2, 8012ab2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8012ab0:	6050      	str	r0, [r2, #4]
 8012ab2:	6842      	ldr	r2, [r0, #4]
 8012ab4:	605a      	str	r2, [r3, #4]
 8012ab6:	680c      	ldr	r4, [r1, #0]
 8012ab8:	4284      	cmp	r4, r0
 8012aba:	d103      	bne.n	8012ac4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8012abc:	600b      	str	r3, [r1, #0]
 8012abe:	60d8      	str	r0, [r3, #12]
 8012ac0:	6043      	str	r3, [r0, #4]
 8012ac2:	bd10      	pop	{r4, pc}
 8012ac4:	68d1      	ldr	r1, [r2, #12]
 8012ac6:	4281      	cmp	r1, r0
 8012ac8:	bf0c      	ite	eq
 8012aca:	60d3      	streq	r3, [r2, #12]
 8012acc:	6093      	strne	r3, [r2, #8]
 8012ace:	e7f6      	b.n	8012abe <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08012ad0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8012ad0:	7803      	ldrb	r3, [r0, #0]
 8012ad2:	b933      	cbnz	r3, 8012ae2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8012ad4:	6843      	ldr	r3, [r0, #4]
 8012ad6:	685b      	ldr	r3, [r3, #4]
 8012ad8:	4283      	cmp	r3, r0
 8012ada:	d102      	bne.n	8012ae2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8012adc:	68db      	ldr	r3, [r3, #12]
 8012ade:	4618      	mov	r0, r3
 8012ae0:	4770      	bx	lr
 8012ae2:	6882      	ldr	r2, [r0, #8]
 8012ae4:	b122      	cbz	r2, 8012af0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8012ae6:	4613      	mov	r3, r2
 8012ae8:	68d2      	ldr	r2, [r2, #12]
 8012aea:	2a00      	cmp	r2, #0
 8012aec:	d1fb      	bne.n	8012ae6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8012aee:	e7f6      	b.n	8012ade <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8012af0:	6843      	ldr	r3, [r0, #4]
 8012af2:	689a      	ldr	r2, [r3, #8]
 8012af4:	4282      	cmp	r2, r0
 8012af6:	d1f2      	bne.n	8012ade <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8012af8:	4618      	mov	r0, r3
 8012afa:	685b      	ldr	r3, [r3, #4]
 8012afc:	e7f9      	b.n	8012af2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08012afe <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8012afe:	f7ff bfe7 	b.w	8012ad0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08012b02 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8012b02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b06:	461e      	mov	r6, r3
 8012b08:	f103 0804 	add.w	r8, r3, #4
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8012b12:	460c      	mov	r4, r1
 8012b14:	604a      	str	r2, [r1, #4]
 8012b16:	700b      	strb	r3, [r1, #0]
 8012b18:	b300      	cbz	r0, 8012b5c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8012b1a:	4296      	cmp	r6, r2
 8012b1c:	6091      	str	r1, [r2, #8]
 8012b1e:	d118      	bne.n	8012b52 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8012b20:	6071      	str	r1, [r6, #4]
 8012b22:	60f4      	str	r4, [r6, #12]
 8012b24:	2701      	movs	r7, #1
 8012b26:	f04f 0900 	mov.w	r9, #0
 8012b2a:	6873      	ldr	r3, [r6, #4]
 8012b2c:	42a3      	cmp	r3, r4
 8012b2e:	d03f      	beq.n	8012bb0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8012b30:	6860      	ldr	r0, [r4, #4]
 8012b32:	7802      	ldrb	r2, [r0, #0]
 8012b34:	2a00      	cmp	r2, #0
 8012b36:	d13b      	bne.n	8012bb0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8012b38:	6845      	ldr	r5, [r0, #4]
 8012b3a:	68ab      	ldr	r3, [r5, #8]
 8012b3c:	4298      	cmp	r0, r3
 8012b3e:	d123      	bne.n	8012b88 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 8012b40:	68eb      	ldr	r3, [r5, #12]
 8012b42:	b183      	cbz	r3, 8012b66 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8012b44:	781a      	ldrb	r2, [r3, #0]
 8012b46:	b972      	cbnz	r2, 8012b66 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8012b48:	7007      	strb	r7, [r0, #0]
 8012b4a:	701f      	strb	r7, [r3, #0]
 8012b4c:	702a      	strb	r2, [r5, #0]
 8012b4e:	462c      	mov	r4, r5
 8012b50:	e7eb      	b.n	8012b2a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8012b52:	68b3      	ldr	r3, [r6, #8]
 8012b54:	4293      	cmp	r3, r2
 8012b56:	d1e5      	bne.n	8012b24 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8012b58:	60b1      	str	r1, [r6, #8]
 8012b5a:	e7e3      	b.n	8012b24 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8012b5c:	60d1      	str	r1, [r2, #12]
 8012b5e:	68f3      	ldr	r3, [r6, #12]
 8012b60:	4293      	cmp	r3, r2
 8012b62:	d1df      	bne.n	8012b24 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8012b64:	e7dd      	b.n	8012b22 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8012b66:	68c3      	ldr	r3, [r0, #12]
 8012b68:	42a3      	cmp	r3, r4
 8012b6a:	d103      	bne.n	8012b74 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 8012b6c:	4641      	mov	r1, r8
 8012b6e:	f7ff ff85 	bl	8012a7c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8012b72:	4604      	mov	r4, r0
 8012b74:	6863      	ldr	r3, [r4, #4]
 8012b76:	4641      	mov	r1, r8
 8012b78:	701f      	strb	r7, [r3, #0]
 8012b7a:	4628      	mov	r0, r5
 8012b7c:	f885 9000 	strb.w	r9, [r5]
 8012b80:	f7ff ff91 	bl	8012aa6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8012b84:	4625      	mov	r5, r4
 8012b86:	e7e2      	b.n	8012b4e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8012b88:	b113      	cbz	r3, 8012b90 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8012b8a:	781a      	ldrb	r2, [r3, #0]
 8012b8c:	2a00      	cmp	r2, #0
 8012b8e:	d0db      	beq.n	8012b48 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 8012b90:	6883      	ldr	r3, [r0, #8]
 8012b92:	42a3      	cmp	r3, r4
 8012b94:	d103      	bne.n	8012b9e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8012b96:	4641      	mov	r1, r8
 8012b98:	f7ff ff85 	bl	8012aa6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8012b9c:	4604      	mov	r4, r0
 8012b9e:	6863      	ldr	r3, [r4, #4]
 8012ba0:	4641      	mov	r1, r8
 8012ba2:	701f      	strb	r7, [r3, #0]
 8012ba4:	4628      	mov	r0, r5
 8012ba6:	f885 9000 	strb.w	r9, [r5]
 8012baa:	f7ff ff67 	bl	8012a7c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8012bae:	e7e9      	b.n	8012b84 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 8012bb0:	2201      	movs	r2, #1
 8012bb2:	701a      	strb	r2, [r3, #0]
 8012bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012bb8 <_ZSt17__throw_bad_allocv>:
 8012bb8:	b508      	push	{r3, lr}
 8012bba:	f001 feb7 	bl	801492c <abort>

08012bbe <_ZSt20__throw_length_errorPKc>:
 8012bbe:	b508      	push	{r3, lr}
 8012bc0:	f001 feb4 	bl	801492c <abort>

08012bc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8012bc4:	b508      	push	{r3, lr}
 8012bc6:	680b      	ldr	r3, [r1, #0]
 8012bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012bcc:	d302      	bcc.n	8012bd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8012bce:	480d      	ldr	r0, [pc, #52]	; (8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8012bd0:	f7ff fff5 	bl	8012bbe <_ZSt20__throw_length_errorPKc>
 8012bd4:	4293      	cmp	r3, r2
 8012bd6:	d90b      	bls.n	8012bf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8012bd8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8012bdc:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8012be0:	d206      	bcs.n	8012bf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8012be2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012be6:	bf2a      	itet	cs
 8012be8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8012bec:	6008      	strcc	r0, [r1, #0]
 8012bee:	600b      	strcs	r3, [r1, #0]
 8012bf0:	6808      	ldr	r0, [r1, #0]
 8012bf2:	3001      	adds	r0, #1
 8012bf4:	d501      	bpl.n	8012bfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8012bf6:	f7ff ffdf 	bl	8012bb8 <_ZSt17__throw_bad_allocv>
 8012bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012bfe:	f7ff bf27 	b.w	8012a50 <_Znwj>
 8012c02:	bf00      	nop
 8012c04:	08014fc4 	.word	0x08014fc4

08012c08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8012c08:	f850 3b08 	ldr.w	r3, [r0], #8
 8012c0c:	4283      	cmp	r3, r0
 8012c0e:	d002      	beq.n	8012c16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8012c10:	4618      	mov	r0, r3
 8012c12:	f000 b840 	b.w	8012c96 <_ZdlPv>
 8012c16:	4770      	bx	lr

08012c18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8012c18:	460b      	mov	r3, r1
 8012c1a:	2b01      	cmp	r3, #1
 8012c1c:	b410      	push	{r4}
 8012c1e:	4611      	mov	r1, r2
 8012c20:	4604      	mov	r4, r0
 8012c22:	d103      	bne.n	8012c2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8012c24:	7022      	strb	r2, [r4, #0]
 8012c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c2a:	4770      	bx	lr
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d0fa      	beq.n	8012c26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8012c30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c34:	461a      	mov	r2, r3
 8012c36:	f001 bed9 	b.w	80149ec <memset>

08012c3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 8012c3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c3c:	290f      	cmp	r1, #15
 8012c3e:	4604      	mov	r4, r0
 8012c40:	9101      	str	r1, [sp, #4]
 8012c42:	4615      	mov	r5, r2
 8012c44:	d906      	bls.n	8012c54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 8012c46:	2200      	movs	r2, #0
 8012c48:	a901      	add	r1, sp, #4
 8012c4a:	f7ff ffbb 	bl	8012bc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8012c4e:	9b01      	ldr	r3, [sp, #4]
 8012c50:	6020      	str	r0, [r4, #0]
 8012c52:	60a3      	str	r3, [r4, #8]
 8012c54:	9901      	ldr	r1, [sp, #4]
 8012c56:	b119      	cbz	r1, 8012c60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 8012c58:	6820      	ldr	r0, [r4, #0]
 8012c5a:	462a      	mov	r2, r5
 8012c5c:	f7ff ffdc 	bl	8012c18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8012c60:	9b01      	ldr	r3, [sp, #4]
 8012c62:	6822      	ldr	r2, [r4, #0]
 8012c64:	6063      	str	r3, [r4, #4]
 8012c66:	2100      	movs	r1, #0
 8012c68:	54d1      	strb	r1, [r2, r3]
 8012c6a:	b003      	add	sp, #12
 8012c6c:	bd30      	pop	{r4, r5, pc}

08012c6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 8012c6e:	b510      	push	{r4, lr}
 8012c70:	f100 0308 	add.w	r3, r0, #8
 8012c74:	4604      	mov	r4, r0
 8012c76:	6003      	str	r3, [r0, #0]
 8012c78:	f7ff ffdf 	bl	8012c3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 8012c7c:	4620      	mov	r0, r4
 8012c7e:	bd10      	pop	{r4, pc}

08012c80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8012c80:	b510      	push	{r4, lr}
 8012c82:	4604      	mov	r4, r0
 8012c84:	f7ff ffc0 	bl	8012c08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8012c88:	4620      	mov	r0, r4
 8012c8a:	bd10      	pop	{r4, pc}

08012c8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8012c8c:	6800      	ldr	r0, [r0, #0]
 8012c8e:	4408      	add	r0, r1
 8012c90:	4770      	bx	lr

08012c92 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8012c92:	6800      	ldr	r0, [r0, #0]
 8012c94:	4770      	bx	lr

08012c96 <_ZdlPv>:
 8012c96:	f001 be87 	b.w	80149a8 <free>

08012c9a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8012c9a:	b508      	push	{r3, lr}
 8012c9c:	4780      	blx	r0
 8012c9e:	f001 fe45 	bl	801492c <abort>
	...

08012ca4 <_ZSt13get_terminatev>:
 8012ca4:	4b02      	ldr	r3, [pc, #8]	; (8012cb0 <_ZSt13get_terminatev+0xc>)
 8012ca6:	6818      	ldr	r0, [r3, #0]
 8012ca8:	f3bf 8f5b 	dmb	ish
 8012cac:	4770      	bx	lr
 8012cae:	bf00      	nop
 8012cb0:	20000014 	.word	0x20000014

08012cb4 <_ZSt9terminatev>:
 8012cb4:	b508      	push	{r3, lr}
 8012cb6:	f7ff fff5 	bl	8012ca4 <_ZSt13get_terminatev>
 8012cba:	f7ff ffee 	bl	8012c9a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08012cc0 <_ZSt15get_new_handlerv>:
 8012cc0:	4b02      	ldr	r3, [pc, #8]	; (8012ccc <_ZSt15get_new_handlerv+0xc>)
 8012cc2:	6818      	ldr	r0, [r3, #0]
 8012cc4:	f3bf 8f5b 	dmb	ish
 8012cc8:	4770      	bx	lr
 8012cca:	bf00      	nop
 8012ccc:	2000510c 	.word	0x2000510c

08012cd0 <tanf>:
 8012cd0:	ee10 3a10 	vmov	r3, s0
 8012cd4:	b507      	push	{r0, r1, r2, lr}
 8012cd6:	4a12      	ldr	r2, [pc, #72]	; (8012d20 <tanf+0x50>)
 8012cd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012cdc:	4293      	cmp	r3, r2
 8012cde:	dc07      	bgt.n	8012cf0 <tanf+0x20>
 8012ce0:	eddf 0a10 	vldr	s1, [pc, #64]	; 8012d24 <tanf+0x54>
 8012ce4:	2001      	movs	r0, #1
 8012ce6:	b003      	add	sp, #12
 8012ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012cec:	f001 bae2 	b.w	80142b4 <__kernel_tanf>
 8012cf0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012cf4:	db04      	blt.n	8012d00 <tanf+0x30>
 8012cf6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012cfa:	b003      	add	sp, #12
 8012cfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d00:	4668      	mov	r0, sp
 8012d02:	f000 ff21 	bl	8013b48 <__ieee754_rem_pio2f>
 8012d06:	0040      	lsls	r0, r0, #1
 8012d08:	f000 0002 	and.w	r0, r0, #2
 8012d0c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012d10:	ed9d 0a00 	vldr	s0, [sp]
 8012d14:	f1c0 0001 	rsb	r0, r0, #1
 8012d18:	f001 facc 	bl	80142b4 <__kernel_tanf>
 8012d1c:	e7ed      	b.n	8012cfa <tanf+0x2a>
 8012d1e:	bf00      	nop
 8012d20:	3f490fda 	.word	0x3f490fda
 8012d24:	00000000 	.word	0x00000000

08012d28 <pow>:
 8012d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d2a:	ed2d 8b02 	vpush	{d8}
 8012d2e:	eeb0 8a40 	vmov.f32	s16, s0
 8012d32:	eef0 8a60 	vmov.f32	s17, s1
 8012d36:	ec55 4b11 	vmov	r4, r5, d1
 8012d3a:	f000 f885 	bl	8012e48 <__ieee754_pow>
 8012d3e:	4622      	mov	r2, r4
 8012d40:	462b      	mov	r3, r5
 8012d42:	4620      	mov	r0, r4
 8012d44:	4629      	mov	r1, r5
 8012d46:	ec57 6b10 	vmov	r6, r7, d0
 8012d4a:	f7ed fe9f 	bl	8000a8c <__aeabi_dcmpun>
 8012d4e:	2800      	cmp	r0, #0
 8012d50:	d13b      	bne.n	8012dca <pow+0xa2>
 8012d52:	ec51 0b18 	vmov	r0, r1, d8
 8012d56:	2200      	movs	r2, #0
 8012d58:	2300      	movs	r3, #0
 8012d5a:	f7ed fe65 	bl	8000a28 <__aeabi_dcmpeq>
 8012d5e:	b1b8      	cbz	r0, 8012d90 <pow+0x68>
 8012d60:	2200      	movs	r2, #0
 8012d62:	2300      	movs	r3, #0
 8012d64:	4620      	mov	r0, r4
 8012d66:	4629      	mov	r1, r5
 8012d68:	f7ed fe5e 	bl	8000a28 <__aeabi_dcmpeq>
 8012d6c:	2800      	cmp	r0, #0
 8012d6e:	d146      	bne.n	8012dfe <pow+0xd6>
 8012d70:	ec45 4b10 	vmov	d0, r4, r5
 8012d74:	f001 fbb7 	bl	80144e6 <finite>
 8012d78:	b338      	cbz	r0, 8012dca <pow+0xa2>
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	4620      	mov	r0, r4
 8012d80:	4629      	mov	r1, r5
 8012d82:	f7ed fe5b 	bl	8000a3c <__aeabi_dcmplt>
 8012d86:	b300      	cbz	r0, 8012dca <pow+0xa2>
 8012d88:	f001 fddc 	bl	8014944 <__errno>
 8012d8c:	2322      	movs	r3, #34	; 0x22
 8012d8e:	e01b      	b.n	8012dc8 <pow+0xa0>
 8012d90:	ec47 6b10 	vmov	d0, r6, r7
 8012d94:	f001 fba7 	bl	80144e6 <finite>
 8012d98:	b9e0      	cbnz	r0, 8012dd4 <pow+0xac>
 8012d9a:	eeb0 0a48 	vmov.f32	s0, s16
 8012d9e:	eef0 0a68 	vmov.f32	s1, s17
 8012da2:	f001 fba0 	bl	80144e6 <finite>
 8012da6:	b1a8      	cbz	r0, 8012dd4 <pow+0xac>
 8012da8:	ec45 4b10 	vmov	d0, r4, r5
 8012dac:	f001 fb9b 	bl	80144e6 <finite>
 8012db0:	b180      	cbz	r0, 8012dd4 <pow+0xac>
 8012db2:	4632      	mov	r2, r6
 8012db4:	463b      	mov	r3, r7
 8012db6:	4630      	mov	r0, r6
 8012db8:	4639      	mov	r1, r7
 8012dba:	f7ed fe67 	bl	8000a8c <__aeabi_dcmpun>
 8012dbe:	2800      	cmp	r0, #0
 8012dc0:	d0e2      	beq.n	8012d88 <pow+0x60>
 8012dc2:	f001 fdbf 	bl	8014944 <__errno>
 8012dc6:	2321      	movs	r3, #33	; 0x21
 8012dc8:	6003      	str	r3, [r0, #0]
 8012dca:	ecbd 8b02 	vpop	{d8}
 8012dce:	ec47 6b10 	vmov	d0, r6, r7
 8012dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	4630      	mov	r0, r6
 8012dda:	4639      	mov	r1, r7
 8012ddc:	f7ed fe24 	bl	8000a28 <__aeabi_dcmpeq>
 8012de0:	2800      	cmp	r0, #0
 8012de2:	d0f2      	beq.n	8012dca <pow+0xa2>
 8012de4:	eeb0 0a48 	vmov.f32	s0, s16
 8012de8:	eef0 0a68 	vmov.f32	s1, s17
 8012dec:	f001 fb7b 	bl	80144e6 <finite>
 8012df0:	2800      	cmp	r0, #0
 8012df2:	d0ea      	beq.n	8012dca <pow+0xa2>
 8012df4:	ec45 4b10 	vmov	d0, r4, r5
 8012df8:	f001 fb75 	bl	80144e6 <finite>
 8012dfc:	e7c3      	b.n	8012d86 <pow+0x5e>
 8012dfe:	4f01      	ldr	r7, [pc, #4]	; (8012e04 <pow+0xdc>)
 8012e00:	2600      	movs	r6, #0
 8012e02:	e7e2      	b.n	8012dca <pow+0xa2>
 8012e04:	3ff00000 	.word	0x3ff00000

08012e08 <atan2f>:
 8012e08:	f000 bdfe 	b.w	8013a08 <__ieee754_atan2f>

08012e0c <sqrtf>:
 8012e0c:	b508      	push	{r3, lr}
 8012e0e:	ed2d 8b02 	vpush	{d8}
 8012e12:	eeb0 8a40 	vmov.f32	s16, s0
 8012e16:	f000 ffd3 	bl	8013dc0 <__ieee754_sqrtf>
 8012e1a:	eeb4 8a48 	vcmp.f32	s16, s16
 8012e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e22:	d60c      	bvs.n	8012e3e <sqrtf+0x32>
 8012e24:	eddf 8a07 	vldr	s17, [pc, #28]	; 8012e44 <sqrtf+0x38>
 8012e28:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e30:	d505      	bpl.n	8012e3e <sqrtf+0x32>
 8012e32:	f001 fd87 	bl	8014944 <__errno>
 8012e36:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012e3a:	2321      	movs	r3, #33	; 0x21
 8012e3c:	6003      	str	r3, [r0, #0]
 8012e3e:	ecbd 8b02 	vpop	{d8}
 8012e42:	bd08      	pop	{r3, pc}
 8012e44:	00000000 	.word	0x00000000

08012e48 <__ieee754_pow>:
 8012e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e4c:	ed2d 8b06 	vpush	{d8-d10}
 8012e50:	b089      	sub	sp, #36	; 0x24
 8012e52:	ed8d 1b00 	vstr	d1, [sp]
 8012e56:	e9dd 2900 	ldrd	r2, r9, [sp]
 8012e5a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8012e5e:	ea58 0102 	orrs.w	r1, r8, r2
 8012e62:	ec57 6b10 	vmov	r6, r7, d0
 8012e66:	d115      	bne.n	8012e94 <__ieee754_pow+0x4c>
 8012e68:	19b3      	adds	r3, r6, r6
 8012e6a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8012e6e:	4152      	adcs	r2, r2
 8012e70:	4299      	cmp	r1, r3
 8012e72:	4b89      	ldr	r3, [pc, #548]	; (8013098 <__ieee754_pow+0x250>)
 8012e74:	4193      	sbcs	r3, r2
 8012e76:	f080 84d2 	bcs.w	801381e <__ieee754_pow+0x9d6>
 8012e7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e7e:	4630      	mov	r0, r6
 8012e80:	4639      	mov	r1, r7
 8012e82:	f7ed f9b3 	bl	80001ec <__adddf3>
 8012e86:	ec41 0b10 	vmov	d0, r0, r1
 8012e8a:	b009      	add	sp, #36	; 0x24
 8012e8c:	ecbd 8b06 	vpop	{d8-d10}
 8012e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e94:	4b81      	ldr	r3, [pc, #516]	; (801309c <__ieee754_pow+0x254>)
 8012e96:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8012e9a:	429c      	cmp	r4, r3
 8012e9c:	ee10 aa10 	vmov	sl, s0
 8012ea0:	463d      	mov	r5, r7
 8012ea2:	dc06      	bgt.n	8012eb2 <__ieee754_pow+0x6a>
 8012ea4:	d101      	bne.n	8012eaa <__ieee754_pow+0x62>
 8012ea6:	2e00      	cmp	r6, #0
 8012ea8:	d1e7      	bne.n	8012e7a <__ieee754_pow+0x32>
 8012eaa:	4598      	cmp	r8, r3
 8012eac:	dc01      	bgt.n	8012eb2 <__ieee754_pow+0x6a>
 8012eae:	d10f      	bne.n	8012ed0 <__ieee754_pow+0x88>
 8012eb0:	b172      	cbz	r2, 8012ed0 <__ieee754_pow+0x88>
 8012eb2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8012eb6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8012eba:	ea55 050a 	orrs.w	r5, r5, sl
 8012ebe:	d1dc      	bne.n	8012e7a <__ieee754_pow+0x32>
 8012ec0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012ec4:	18db      	adds	r3, r3, r3
 8012ec6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8012eca:	4152      	adcs	r2, r2
 8012ecc:	429d      	cmp	r5, r3
 8012ece:	e7d0      	b.n	8012e72 <__ieee754_pow+0x2a>
 8012ed0:	2d00      	cmp	r5, #0
 8012ed2:	da3b      	bge.n	8012f4c <__ieee754_pow+0x104>
 8012ed4:	4b72      	ldr	r3, [pc, #456]	; (80130a0 <__ieee754_pow+0x258>)
 8012ed6:	4598      	cmp	r8, r3
 8012ed8:	dc51      	bgt.n	8012f7e <__ieee754_pow+0x136>
 8012eda:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8012ede:	4598      	cmp	r8, r3
 8012ee0:	f340 84ac 	ble.w	801383c <__ieee754_pow+0x9f4>
 8012ee4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012ee8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012eec:	2b14      	cmp	r3, #20
 8012eee:	dd0f      	ble.n	8012f10 <__ieee754_pow+0xc8>
 8012ef0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012ef4:	fa22 f103 	lsr.w	r1, r2, r3
 8012ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8012efc:	4293      	cmp	r3, r2
 8012efe:	f040 849d 	bne.w	801383c <__ieee754_pow+0x9f4>
 8012f02:	f001 0101 	and.w	r1, r1, #1
 8012f06:	f1c1 0302 	rsb	r3, r1, #2
 8012f0a:	9304      	str	r3, [sp, #16]
 8012f0c:	b182      	cbz	r2, 8012f30 <__ieee754_pow+0xe8>
 8012f0e:	e05f      	b.n	8012fd0 <__ieee754_pow+0x188>
 8012f10:	2a00      	cmp	r2, #0
 8012f12:	d15b      	bne.n	8012fcc <__ieee754_pow+0x184>
 8012f14:	f1c3 0314 	rsb	r3, r3, #20
 8012f18:	fa48 f103 	asr.w	r1, r8, r3
 8012f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8012f20:	4543      	cmp	r3, r8
 8012f22:	f040 8488 	bne.w	8013836 <__ieee754_pow+0x9ee>
 8012f26:	f001 0101 	and.w	r1, r1, #1
 8012f2a:	f1c1 0302 	rsb	r3, r1, #2
 8012f2e:	9304      	str	r3, [sp, #16]
 8012f30:	4b5c      	ldr	r3, [pc, #368]	; (80130a4 <__ieee754_pow+0x25c>)
 8012f32:	4598      	cmp	r8, r3
 8012f34:	d132      	bne.n	8012f9c <__ieee754_pow+0x154>
 8012f36:	f1b9 0f00 	cmp.w	r9, #0
 8012f3a:	f280 8478 	bge.w	801382e <__ieee754_pow+0x9e6>
 8012f3e:	4959      	ldr	r1, [pc, #356]	; (80130a4 <__ieee754_pow+0x25c>)
 8012f40:	4632      	mov	r2, r6
 8012f42:	463b      	mov	r3, r7
 8012f44:	2000      	movs	r0, #0
 8012f46:	f7ed fc31 	bl	80007ac <__aeabi_ddiv>
 8012f4a:	e79c      	b.n	8012e86 <__ieee754_pow+0x3e>
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	9304      	str	r3, [sp, #16]
 8012f50:	2a00      	cmp	r2, #0
 8012f52:	d13d      	bne.n	8012fd0 <__ieee754_pow+0x188>
 8012f54:	4b51      	ldr	r3, [pc, #324]	; (801309c <__ieee754_pow+0x254>)
 8012f56:	4598      	cmp	r8, r3
 8012f58:	d1ea      	bne.n	8012f30 <__ieee754_pow+0xe8>
 8012f5a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8012f5e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012f62:	ea53 030a 	orrs.w	r3, r3, sl
 8012f66:	f000 845a 	beq.w	801381e <__ieee754_pow+0x9d6>
 8012f6a:	4b4f      	ldr	r3, [pc, #316]	; (80130a8 <__ieee754_pow+0x260>)
 8012f6c:	429c      	cmp	r4, r3
 8012f6e:	dd08      	ble.n	8012f82 <__ieee754_pow+0x13a>
 8012f70:	f1b9 0f00 	cmp.w	r9, #0
 8012f74:	f2c0 8457 	blt.w	8013826 <__ieee754_pow+0x9de>
 8012f78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f7c:	e783      	b.n	8012e86 <__ieee754_pow+0x3e>
 8012f7e:	2302      	movs	r3, #2
 8012f80:	e7e5      	b.n	8012f4e <__ieee754_pow+0x106>
 8012f82:	f1b9 0f00 	cmp.w	r9, #0
 8012f86:	f04f 0000 	mov.w	r0, #0
 8012f8a:	f04f 0100 	mov.w	r1, #0
 8012f8e:	f6bf af7a 	bge.w	8012e86 <__ieee754_pow+0x3e>
 8012f92:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012f96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012f9a:	e774      	b.n	8012e86 <__ieee754_pow+0x3e>
 8012f9c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012fa0:	d106      	bne.n	8012fb0 <__ieee754_pow+0x168>
 8012fa2:	4632      	mov	r2, r6
 8012fa4:	463b      	mov	r3, r7
 8012fa6:	4630      	mov	r0, r6
 8012fa8:	4639      	mov	r1, r7
 8012faa:	f7ed fad5 	bl	8000558 <__aeabi_dmul>
 8012fae:	e76a      	b.n	8012e86 <__ieee754_pow+0x3e>
 8012fb0:	4b3e      	ldr	r3, [pc, #248]	; (80130ac <__ieee754_pow+0x264>)
 8012fb2:	4599      	cmp	r9, r3
 8012fb4:	d10c      	bne.n	8012fd0 <__ieee754_pow+0x188>
 8012fb6:	2d00      	cmp	r5, #0
 8012fb8:	db0a      	blt.n	8012fd0 <__ieee754_pow+0x188>
 8012fba:	ec47 6b10 	vmov	d0, r6, r7
 8012fbe:	b009      	add	sp, #36	; 0x24
 8012fc0:	ecbd 8b06 	vpop	{d8-d10}
 8012fc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fc8:	f000 bc6c 	b.w	80138a4 <__ieee754_sqrt>
 8012fcc:	2300      	movs	r3, #0
 8012fce:	9304      	str	r3, [sp, #16]
 8012fd0:	ec47 6b10 	vmov	d0, r6, r7
 8012fd4:	f001 fa7e 	bl	80144d4 <fabs>
 8012fd8:	ec51 0b10 	vmov	r0, r1, d0
 8012fdc:	f1ba 0f00 	cmp.w	sl, #0
 8012fe0:	d129      	bne.n	8013036 <__ieee754_pow+0x1ee>
 8012fe2:	b124      	cbz	r4, 8012fee <__ieee754_pow+0x1a6>
 8012fe4:	4b2f      	ldr	r3, [pc, #188]	; (80130a4 <__ieee754_pow+0x25c>)
 8012fe6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8012fea:	429a      	cmp	r2, r3
 8012fec:	d123      	bne.n	8013036 <__ieee754_pow+0x1ee>
 8012fee:	f1b9 0f00 	cmp.w	r9, #0
 8012ff2:	da05      	bge.n	8013000 <__ieee754_pow+0x1b8>
 8012ff4:	4602      	mov	r2, r0
 8012ff6:	460b      	mov	r3, r1
 8012ff8:	2000      	movs	r0, #0
 8012ffa:	492a      	ldr	r1, [pc, #168]	; (80130a4 <__ieee754_pow+0x25c>)
 8012ffc:	f7ed fbd6 	bl	80007ac <__aeabi_ddiv>
 8013000:	2d00      	cmp	r5, #0
 8013002:	f6bf af40 	bge.w	8012e86 <__ieee754_pow+0x3e>
 8013006:	9b04      	ldr	r3, [sp, #16]
 8013008:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801300c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013010:	4323      	orrs	r3, r4
 8013012:	d108      	bne.n	8013026 <__ieee754_pow+0x1de>
 8013014:	4602      	mov	r2, r0
 8013016:	460b      	mov	r3, r1
 8013018:	4610      	mov	r0, r2
 801301a:	4619      	mov	r1, r3
 801301c:	f7ed f8e4 	bl	80001e8 <__aeabi_dsub>
 8013020:	4602      	mov	r2, r0
 8013022:	460b      	mov	r3, r1
 8013024:	e78f      	b.n	8012f46 <__ieee754_pow+0xfe>
 8013026:	9b04      	ldr	r3, [sp, #16]
 8013028:	2b01      	cmp	r3, #1
 801302a:	f47f af2c 	bne.w	8012e86 <__ieee754_pow+0x3e>
 801302e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013032:	4619      	mov	r1, r3
 8013034:	e727      	b.n	8012e86 <__ieee754_pow+0x3e>
 8013036:	0feb      	lsrs	r3, r5, #31
 8013038:	3b01      	subs	r3, #1
 801303a:	9306      	str	r3, [sp, #24]
 801303c:	9a06      	ldr	r2, [sp, #24]
 801303e:	9b04      	ldr	r3, [sp, #16]
 8013040:	4313      	orrs	r3, r2
 8013042:	d102      	bne.n	801304a <__ieee754_pow+0x202>
 8013044:	4632      	mov	r2, r6
 8013046:	463b      	mov	r3, r7
 8013048:	e7e6      	b.n	8013018 <__ieee754_pow+0x1d0>
 801304a:	4b19      	ldr	r3, [pc, #100]	; (80130b0 <__ieee754_pow+0x268>)
 801304c:	4598      	cmp	r8, r3
 801304e:	f340 80fb 	ble.w	8013248 <__ieee754_pow+0x400>
 8013052:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013056:	4598      	cmp	r8, r3
 8013058:	4b13      	ldr	r3, [pc, #76]	; (80130a8 <__ieee754_pow+0x260>)
 801305a:	dd0c      	ble.n	8013076 <__ieee754_pow+0x22e>
 801305c:	429c      	cmp	r4, r3
 801305e:	dc0f      	bgt.n	8013080 <__ieee754_pow+0x238>
 8013060:	f1b9 0f00 	cmp.w	r9, #0
 8013064:	da0f      	bge.n	8013086 <__ieee754_pow+0x23e>
 8013066:	2000      	movs	r0, #0
 8013068:	b009      	add	sp, #36	; 0x24
 801306a:	ecbd 8b06 	vpop	{d8-d10}
 801306e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013072:	f001 ba26 	b.w	80144c2 <__math_oflow>
 8013076:	429c      	cmp	r4, r3
 8013078:	dbf2      	blt.n	8013060 <__ieee754_pow+0x218>
 801307a:	4b0a      	ldr	r3, [pc, #40]	; (80130a4 <__ieee754_pow+0x25c>)
 801307c:	429c      	cmp	r4, r3
 801307e:	dd19      	ble.n	80130b4 <__ieee754_pow+0x26c>
 8013080:	f1b9 0f00 	cmp.w	r9, #0
 8013084:	dcef      	bgt.n	8013066 <__ieee754_pow+0x21e>
 8013086:	2000      	movs	r0, #0
 8013088:	b009      	add	sp, #36	; 0x24
 801308a:	ecbd 8b06 	vpop	{d8-d10}
 801308e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013092:	f001 ba0d 	b.w	80144b0 <__math_uflow>
 8013096:	bf00      	nop
 8013098:	fff00000 	.word	0xfff00000
 801309c:	7ff00000 	.word	0x7ff00000
 80130a0:	433fffff 	.word	0x433fffff
 80130a4:	3ff00000 	.word	0x3ff00000
 80130a8:	3fefffff 	.word	0x3fefffff
 80130ac:	3fe00000 	.word	0x3fe00000
 80130b0:	41e00000 	.word	0x41e00000
 80130b4:	4b60      	ldr	r3, [pc, #384]	; (8013238 <__ieee754_pow+0x3f0>)
 80130b6:	2200      	movs	r2, #0
 80130b8:	f7ed f896 	bl	80001e8 <__aeabi_dsub>
 80130bc:	a354      	add	r3, pc, #336	; (adr r3, 8013210 <__ieee754_pow+0x3c8>)
 80130be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130c2:	4604      	mov	r4, r0
 80130c4:	460d      	mov	r5, r1
 80130c6:	f7ed fa47 	bl	8000558 <__aeabi_dmul>
 80130ca:	a353      	add	r3, pc, #332	; (adr r3, 8013218 <__ieee754_pow+0x3d0>)
 80130cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130d0:	4606      	mov	r6, r0
 80130d2:	460f      	mov	r7, r1
 80130d4:	4620      	mov	r0, r4
 80130d6:	4629      	mov	r1, r5
 80130d8:	f7ed fa3e 	bl	8000558 <__aeabi_dmul>
 80130dc:	4b57      	ldr	r3, [pc, #348]	; (801323c <__ieee754_pow+0x3f4>)
 80130de:	4682      	mov	sl, r0
 80130e0:	468b      	mov	fp, r1
 80130e2:	2200      	movs	r2, #0
 80130e4:	4620      	mov	r0, r4
 80130e6:	4629      	mov	r1, r5
 80130e8:	f7ed fa36 	bl	8000558 <__aeabi_dmul>
 80130ec:	4602      	mov	r2, r0
 80130ee:	460b      	mov	r3, r1
 80130f0:	a14b      	add	r1, pc, #300	; (adr r1, 8013220 <__ieee754_pow+0x3d8>)
 80130f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130f6:	f7ed f877 	bl	80001e8 <__aeabi_dsub>
 80130fa:	4622      	mov	r2, r4
 80130fc:	462b      	mov	r3, r5
 80130fe:	f7ed fa2b 	bl	8000558 <__aeabi_dmul>
 8013102:	4602      	mov	r2, r0
 8013104:	460b      	mov	r3, r1
 8013106:	2000      	movs	r0, #0
 8013108:	494d      	ldr	r1, [pc, #308]	; (8013240 <__ieee754_pow+0x3f8>)
 801310a:	f7ed f86d 	bl	80001e8 <__aeabi_dsub>
 801310e:	4622      	mov	r2, r4
 8013110:	4680      	mov	r8, r0
 8013112:	4689      	mov	r9, r1
 8013114:	462b      	mov	r3, r5
 8013116:	4620      	mov	r0, r4
 8013118:	4629      	mov	r1, r5
 801311a:	f7ed fa1d 	bl	8000558 <__aeabi_dmul>
 801311e:	4602      	mov	r2, r0
 8013120:	460b      	mov	r3, r1
 8013122:	4640      	mov	r0, r8
 8013124:	4649      	mov	r1, r9
 8013126:	f7ed fa17 	bl	8000558 <__aeabi_dmul>
 801312a:	a33f      	add	r3, pc, #252	; (adr r3, 8013228 <__ieee754_pow+0x3e0>)
 801312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013130:	f7ed fa12 	bl	8000558 <__aeabi_dmul>
 8013134:	4602      	mov	r2, r0
 8013136:	460b      	mov	r3, r1
 8013138:	4650      	mov	r0, sl
 801313a:	4659      	mov	r1, fp
 801313c:	f7ed f854 	bl	80001e8 <__aeabi_dsub>
 8013140:	4602      	mov	r2, r0
 8013142:	460b      	mov	r3, r1
 8013144:	4680      	mov	r8, r0
 8013146:	4689      	mov	r9, r1
 8013148:	4630      	mov	r0, r6
 801314a:	4639      	mov	r1, r7
 801314c:	f7ed f84e 	bl	80001ec <__adddf3>
 8013150:	2000      	movs	r0, #0
 8013152:	4632      	mov	r2, r6
 8013154:	463b      	mov	r3, r7
 8013156:	4604      	mov	r4, r0
 8013158:	460d      	mov	r5, r1
 801315a:	f7ed f845 	bl	80001e8 <__aeabi_dsub>
 801315e:	4602      	mov	r2, r0
 8013160:	460b      	mov	r3, r1
 8013162:	4640      	mov	r0, r8
 8013164:	4649      	mov	r1, r9
 8013166:	f7ed f83f 	bl	80001e8 <__aeabi_dsub>
 801316a:	9b04      	ldr	r3, [sp, #16]
 801316c:	9a06      	ldr	r2, [sp, #24]
 801316e:	3b01      	subs	r3, #1
 8013170:	4313      	orrs	r3, r2
 8013172:	4682      	mov	sl, r0
 8013174:	468b      	mov	fp, r1
 8013176:	f040 81e7 	bne.w	8013548 <__ieee754_pow+0x700>
 801317a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8013230 <__ieee754_pow+0x3e8>
 801317e:	eeb0 8a47 	vmov.f32	s16, s14
 8013182:	eef0 8a67 	vmov.f32	s17, s15
 8013186:	e9dd 6700 	ldrd	r6, r7, [sp]
 801318a:	2600      	movs	r6, #0
 801318c:	4632      	mov	r2, r6
 801318e:	463b      	mov	r3, r7
 8013190:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013194:	f7ed f828 	bl	80001e8 <__aeabi_dsub>
 8013198:	4622      	mov	r2, r4
 801319a:	462b      	mov	r3, r5
 801319c:	f7ed f9dc 	bl	8000558 <__aeabi_dmul>
 80131a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131a4:	4680      	mov	r8, r0
 80131a6:	4689      	mov	r9, r1
 80131a8:	4650      	mov	r0, sl
 80131aa:	4659      	mov	r1, fp
 80131ac:	f7ed f9d4 	bl	8000558 <__aeabi_dmul>
 80131b0:	4602      	mov	r2, r0
 80131b2:	460b      	mov	r3, r1
 80131b4:	4640      	mov	r0, r8
 80131b6:	4649      	mov	r1, r9
 80131b8:	f7ed f818 	bl	80001ec <__adddf3>
 80131bc:	4632      	mov	r2, r6
 80131be:	463b      	mov	r3, r7
 80131c0:	4680      	mov	r8, r0
 80131c2:	4689      	mov	r9, r1
 80131c4:	4620      	mov	r0, r4
 80131c6:	4629      	mov	r1, r5
 80131c8:	f7ed f9c6 	bl	8000558 <__aeabi_dmul>
 80131cc:	460b      	mov	r3, r1
 80131ce:	4604      	mov	r4, r0
 80131d0:	460d      	mov	r5, r1
 80131d2:	4602      	mov	r2, r0
 80131d4:	4649      	mov	r1, r9
 80131d6:	4640      	mov	r0, r8
 80131d8:	f7ed f808 	bl	80001ec <__adddf3>
 80131dc:	4b19      	ldr	r3, [pc, #100]	; (8013244 <__ieee754_pow+0x3fc>)
 80131de:	4299      	cmp	r1, r3
 80131e0:	ec45 4b19 	vmov	d9, r4, r5
 80131e4:	4606      	mov	r6, r0
 80131e6:	460f      	mov	r7, r1
 80131e8:	468b      	mov	fp, r1
 80131ea:	f340 82f1 	ble.w	80137d0 <__ieee754_pow+0x988>
 80131ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80131f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80131f6:	4303      	orrs	r3, r0
 80131f8:	f000 81e4 	beq.w	80135c4 <__ieee754_pow+0x77c>
 80131fc:	ec51 0b18 	vmov	r0, r1, d8
 8013200:	2200      	movs	r2, #0
 8013202:	2300      	movs	r3, #0
 8013204:	f7ed fc1a 	bl	8000a3c <__aeabi_dcmplt>
 8013208:	3800      	subs	r0, #0
 801320a:	bf18      	it	ne
 801320c:	2001      	movne	r0, #1
 801320e:	e72b      	b.n	8013068 <__ieee754_pow+0x220>
 8013210:	60000000 	.word	0x60000000
 8013214:	3ff71547 	.word	0x3ff71547
 8013218:	f85ddf44 	.word	0xf85ddf44
 801321c:	3e54ae0b 	.word	0x3e54ae0b
 8013220:	55555555 	.word	0x55555555
 8013224:	3fd55555 	.word	0x3fd55555
 8013228:	652b82fe 	.word	0x652b82fe
 801322c:	3ff71547 	.word	0x3ff71547
 8013230:	00000000 	.word	0x00000000
 8013234:	bff00000 	.word	0xbff00000
 8013238:	3ff00000 	.word	0x3ff00000
 801323c:	3fd00000 	.word	0x3fd00000
 8013240:	3fe00000 	.word	0x3fe00000
 8013244:	408fffff 	.word	0x408fffff
 8013248:	4bd5      	ldr	r3, [pc, #852]	; (80135a0 <__ieee754_pow+0x758>)
 801324a:	402b      	ands	r3, r5
 801324c:	2200      	movs	r2, #0
 801324e:	b92b      	cbnz	r3, 801325c <__ieee754_pow+0x414>
 8013250:	4bd4      	ldr	r3, [pc, #848]	; (80135a4 <__ieee754_pow+0x75c>)
 8013252:	f7ed f981 	bl	8000558 <__aeabi_dmul>
 8013256:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801325a:	460c      	mov	r4, r1
 801325c:	1523      	asrs	r3, r4, #20
 801325e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013262:	4413      	add	r3, r2
 8013264:	9305      	str	r3, [sp, #20]
 8013266:	4bd0      	ldr	r3, [pc, #832]	; (80135a8 <__ieee754_pow+0x760>)
 8013268:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801326c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013270:	429c      	cmp	r4, r3
 8013272:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013276:	dd08      	ble.n	801328a <__ieee754_pow+0x442>
 8013278:	4bcc      	ldr	r3, [pc, #816]	; (80135ac <__ieee754_pow+0x764>)
 801327a:	429c      	cmp	r4, r3
 801327c:	f340 8162 	ble.w	8013544 <__ieee754_pow+0x6fc>
 8013280:	9b05      	ldr	r3, [sp, #20]
 8013282:	3301      	adds	r3, #1
 8013284:	9305      	str	r3, [sp, #20]
 8013286:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801328a:	2400      	movs	r4, #0
 801328c:	00e3      	lsls	r3, r4, #3
 801328e:	9307      	str	r3, [sp, #28]
 8013290:	4bc7      	ldr	r3, [pc, #796]	; (80135b0 <__ieee754_pow+0x768>)
 8013292:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013296:	ed93 7b00 	vldr	d7, [r3]
 801329a:	4629      	mov	r1, r5
 801329c:	ec53 2b17 	vmov	r2, r3, d7
 80132a0:	eeb0 9a47 	vmov.f32	s18, s14
 80132a4:	eef0 9a67 	vmov.f32	s19, s15
 80132a8:	4682      	mov	sl, r0
 80132aa:	f7ec ff9d 	bl	80001e8 <__aeabi_dsub>
 80132ae:	4652      	mov	r2, sl
 80132b0:	4606      	mov	r6, r0
 80132b2:	460f      	mov	r7, r1
 80132b4:	462b      	mov	r3, r5
 80132b6:	ec51 0b19 	vmov	r0, r1, d9
 80132ba:	f7ec ff97 	bl	80001ec <__adddf3>
 80132be:	4602      	mov	r2, r0
 80132c0:	460b      	mov	r3, r1
 80132c2:	2000      	movs	r0, #0
 80132c4:	49bb      	ldr	r1, [pc, #748]	; (80135b4 <__ieee754_pow+0x76c>)
 80132c6:	f7ed fa71 	bl	80007ac <__aeabi_ddiv>
 80132ca:	ec41 0b1a 	vmov	d10, r0, r1
 80132ce:	4602      	mov	r2, r0
 80132d0:	460b      	mov	r3, r1
 80132d2:	4630      	mov	r0, r6
 80132d4:	4639      	mov	r1, r7
 80132d6:	f7ed f93f 	bl	8000558 <__aeabi_dmul>
 80132da:	2300      	movs	r3, #0
 80132dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132e0:	9302      	str	r3, [sp, #8]
 80132e2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80132e6:	46ab      	mov	fp, r5
 80132e8:	106d      	asrs	r5, r5, #1
 80132ea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80132ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80132f2:	ec41 0b18 	vmov	d8, r0, r1
 80132f6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80132fa:	2200      	movs	r2, #0
 80132fc:	4640      	mov	r0, r8
 80132fe:	4649      	mov	r1, r9
 8013300:	4614      	mov	r4, r2
 8013302:	461d      	mov	r5, r3
 8013304:	f7ed f928 	bl	8000558 <__aeabi_dmul>
 8013308:	4602      	mov	r2, r0
 801330a:	460b      	mov	r3, r1
 801330c:	4630      	mov	r0, r6
 801330e:	4639      	mov	r1, r7
 8013310:	f7ec ff6a 	bl	80001e8 <__aeabi_dsub>
 8013314:	ec53 2b19 	vmov	r2, r3, d9
 8013318:	4606      	mov	r6, r0
 801331a:	460f      	mov	r7, r1
 801331c:	4620      	mov	r0, r4
 801331e:	4629      	mov	r1, r5
 8013320:	f7ec ff62 	bl	80001e8 <__aeabi_dsub>
 8013324:	4602      	mov	r2, r0
 8013326:	460b      	mov	r3, r1
 8013328:	4650      	mov	r0, sl
 801332a:	4659      	mov	r1, fp
 801332c:	f7ec ff5c 	bl	80001e8 <__aeabi_dsub>
 8013330:	4642      	mov	r2, r8
 8013332:	464b      	mov	r3, r9
 8013334:	f7ed f910 	bl	8000558 <__aeabi_dmul>
 8013338:	4602      	mov	r2, r0
 801333a:	460b      	mov	r3, r1
 801333c:	4630      	mov	r0, r6
 801333e:	4639      	mov	r1, r7
 8013340:	f7ec ff52 	bl	80001e8 <__aeabi_dsub>
 8013344:	ec53 2b1a 	vmov	r2, r3, d10
 8013348:	f7ed f906 	bl	8000558 <__aeabi_dmul>
 801334c:	ec53 2b18 	vmov	r2, r3, d8
 8013350:	ec41 0b19 	vmov	d9, r0, r1
 8013354:	ec51 0b18 	vmov	r0, r1, d8
 8013358:	f7ed f8fe 	bl	8000558 <__aeabi_dmul>
 801335c:	a37c      	add	r3, pc, #496	; (adr r3, 8013550 <__ieee754_pow+0x708>)
 801335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013362:	4604      	mov	r4, r0
 8013364:	460d      	mov	r5, r1
 8013366:	f7ed f8f7 	bl	8000558 <__aeabi_dmul>
 801336a:	a37b      	add	r3, pc, #492	; (adr r3, 8013558 <__ieee754_pow+0x710>)
 801336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013370:	f7ec ff3c 	bl	80001ec <__adddf3>
 8013374:	4622      	mov	r2, r4
 8013376:	462b      	mov	r3, r5
 8013378:	f7ed f8ee 	bl	8000558 <__aeabi_dmul>
 801337c:	a378      	add	r3, pc, #480	; (adr r3, 8013560 <__ieee754_pow+0x718>)
 801337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013382:	f7ec ff33 	bl	80001ec <__adddf3>
 8013386:	4622      	mov	r2, r4
 8013388:	462b      	mov	r3, r5
 801338a:	f7ed f8e5 	bl	8000558 <__aeabi_dmul>
 801338e:	a376      	add	r3, pc, #472	; (adr r3, 8013568 <__ieee754_pow+0x720>)
 8013390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013394:	f7ec ff2a 	bl	80001ec <__adddf3>
 8013398:	4622      	mov	r2, r4
 801339a:	462b      	mov	r3, r5
 801339c:	f7ed f8dc 	bl	8000558 <__aeabi_dmul>
 80133a0:	a373      	add	r3, pc, #460	; (adr r3, 8013570 <__ieee754_pow+0x728>)
 80133a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133a6:	f7ec ff21 	bl	80001ec <__adddf3>
 80133aa:	4622      	mov	r2, r4
 80133ac:	462b      	mov	r3, r5
 80133ae:	f7ed f8d3 	bl	8000558 <__aeabi_dmul>
 80133b2:	a371      	add	r3, pc, #452	; (adr r3, 8013578 <__ieee754_pow+0x730>)
 80133b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133b8:	f7ec ff18 	bl	80001ec <__adddf3>
 80133bc:	4622      	mov	r2, r4
 80133be:	4606      	mov	r6, r0
 80133c0:	460f      	mov	r7, r1
 80133c2:	462b      	mov	r3, r5
 80133c4:	4620      	mov	r0, r4
 80133c6:	4629      	mov	r1, r5
 80133c8:	f7ed f8c6 	bl	8000558 <__aeabi_dmul>
 80133cc:	4602      	mov	r2, r0
 80133ce:	460b      	mov	r3, r1
 80133d0:	4630      	mov	r0, r6
 80133d2:	4639      	mov	r1, r7
 80133d4:	f7ed f8c0 	bl	8000558 <__aeabi_dmul>
 80133d8:	4642      	mov	r2, r8
 80133da:	4604      	mov	r4, r0
 80133dc:	460d      	mov	r5, r1
 80133de:	464b      	mov	r3, r9
 80133e0:	ec51 0b18 	vmov	r0, r1, d8
 80133e4:	f7ec ff02 	bl	80001ec <__adddf3>
 80133e8:	ec53 2b19 	vmov	r2, r3, d9
 80133ec:	f7ed f8b4 	bl	8000558 <__aeabi_dmul>
 80133f0:	4622      	mov	r2, r4
 80133f2:	462b      	mov	r3, r5
 80133f4:	f7ec fefa 	bl	80001ec <__adddf3>
 80133f8:	4642      	mov	r2, r8
 80133fa:	4682      	mov	sl, r0
 80133fc:	468b      	mov	fp, r1
 80133fe:	464b      	mov	r3, r9
 8013400:	4640      	mov	r0, r8
 8013402:	4649      	mov	r1, r9
 8013404:	f7ed f8a8 	bl	8000558 <__aeabi_dmul>
 8013408:	4b6b      	ldr	r3, [pc, #428]	; (80135b8 <__ieee754_pow+0x770>)
 801340a:	2200      	movs	r2, #0
 801340c:	4606      	mov	r6, r0
 801340e:	460f      	mov	r7, r1
 8013410:	f7ec feec 	bl	80001ec <__adddf3>
 8013414:	4652      	mov	r2, sl
 8013416:	465b      	mov	r3, fp
 8013418:	f7ec fee8 	bl	80001ec <__adddf3>
 801341c:	2000      	movs	r0, #0
 801341e:	4604      	mov	r4, r0
 8013420:	460d      	mov	r5, r1
 8013422:	4602      	mov	r2, r0
 8013424:	460b      	mov	r3, r1
 8013426:	4640      	mov	r0, r8
 8013428:	4649      	mov	r1, r9
 801342a:	f7ed f895 	bl	8000558 <__aeabi_dmul>
 801342e:	4b62      	ldr	r3, [pc, #392]	; (80135b8 <__ieee754_pow+0x770>)
 8013430:	4680      	mov	r8, r0
 8013432:	4689      	mov	r9, r1
 8013434:	2200      	movs	r2, #0
 8013436:	4620      	mov	r0, r4
 8013438:	4629      	mov	r1, r5
 801343a:	f7ec fed5 	bl	80001e8 <__aeabi_dsub>
 801343e:	4632      	mov	r2, r6
 8013440:	463b      	mov	r3, r7
 8013442:	f7ec fed1 	bl	80001e8 <__aeabi_dsub>
 8013446:	4602      	mov	r2, r0
 8013448:	460b      	mov	r3, r1
 801344a:	4650      	mov	r0, sl
 801344c:	4659      	mov	r1, fp
 801344e:	f7ec fecb 	bl	80001e8 <__aeabi_dsub>
 8013452:	ec53 2b18 	vmov	r2, r3, d8
 8013456:	f7ed f87f 	bl	8000558 <__aeabi_dmul>
 801345a:	4622      	mov	r2, r4
 801345c:	4606      	mov	r6, r0
 801345e:	460f      	mov	r7, r1
 8013460:	462b      	mov	r3, r5
 8013462:	ec51 0b19 	vmov	r0, r1, d9
 8013466:	f7ed f877 	bl	8000558 <__aeabi_dmul>
 801346a:	4602      	mov	r2, r0
 801346c:	460b      	mov	r3, r1
 801346e:	4630      	mov	r0, r6
 8013470:	4639      	mov	r1, r7
 8013472:	f7ec febb 	bl	80001ec <__adddf3>
 8013476:	4606      	mov	r6, r0
 8013478:	460f      	mov	r7, r1
 801347a:	4602      	mov	r2, r0
 801347c:	460b      	mov	r3, r1
 801347e:	4640      	mov	r0, r8
 8013480:	4649      	mov	r1, r9
 8013482:	f7ec feb3 	bl	80001ec <__adddf3>
 8013486:	a33e      	add	r3, pc, #248	; (adr r3, 8013580 <__ieee754_pow+0x738>)
 8013488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801348c:	2000      	movs	r0, #0
 801348e:	4604      	mov	r4, r0
 8013490:	460d      	mov	r5, r1
 8013492:	f7ed f861 	bl	8000558 <__aeabi_dmul>
 8013496:	4642      	mov	r2, r8
 8013498:	ec41 0b18 	vmov	d8, r0, r1
 801349c:	464b      	mov	r3, r9
 801349e:	4620      	mov	r0, r4
 80134a0:	4629      	mov	r1, r5
 80134a2:	f7ec fea1 	bl	80001e8 <__aeabi_dsub>
 80134a6:	4602      	mov	r2, r0
 80134a8:	460b      	mov	r3, r1
 80134aa:	4630      	mov	r0, r6
 80134ac:	4639      	mov	r1, r7
 80134ae:	f7ec fe9b 	bl	80001e8 <__aeabi_dsub>
 80134b2:	a335      	add	r3, pc, #212	; (adr r3, 8013588 <__ieee754_pow+0x740>)
 80134b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134b8:	f7ed f84e 	bl	8000558 <__aeabi_dmul>
 80134bc:	a334      	add	r3, pc, #208	; (adr r3, 8013590 <__ieee754_pow+0x748>)
 80134be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134c2:	4606      	mov	r6, r0
 80134c4:	460f      	mov	r7, r1
 80134c6:	4620      	mov	r0, r4
 80134c8:	4629      	mov	r1, r5
 80134ca:	f7ed f845 	bl	8000558 <__aeabi_dmul>
 80134ce:	4602      	mov	r2, r0
 80134d0:	460b      	mov	r3, r1
 80134d2:	4630      	mov	r0, r6
 80134d4:	4639      	mov	r1, r7
 80134d6:	f7ec fe89 	bl	80001ec <__adddf3>
 80134da:	9a07      	ldr	r2, [sp, #28]
 80134dc:	4b37      	ldr	r3, [pc, #220]	; (80135bc <__ieee754_pow+0x774>)
 80134de:	4413      	add	r3, r2
 80134e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134e4:	f7ec fe82 	bl	80001ec <__adddf3>
 80134e8:	4682      	mov	sl, r0
 80134ea:	9805      	ldr	r0, [sp, #20]
 80134ec:	468b      	mov	fp, r1
 80134ee:	f7ec ffc9 	bl	8000484 <__aeabi_i2d>
 80134f2:	9a07      	ldr	r2, [sp, #28]
 80134f4:	4b32      	ldr	r3, [pc, #200]	; (80135c0 <__ieee754_pow+0x778>)
 80134f6:	4413      	add	r3, r2
 80134f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80134fc:	4606      	mov	r6, r0
 80134fe:	460f      	mov	r7, r1
 8013500:	4652      	mov	r2, sl
 8013502:	465b      	mov	r3, fp
 8013504:	ec51 0b18 	vmov	r0, r1, d8
 8013508:	f7ec fe70 	bl	80001ec <__adddf3>
 801350c:	4642      	mov	r2, r8
 801350e:	464b      	mov	r3, r9
 8013510:	f7ec fe6c 	bl	80001ec <__adddf3>
 8013514:	4632      	mov	r2, r6
 8013516:	463b      	mov	r3, r7
 8013518:	f7ec fe68 	bl	80001ec <__adddf3>
 801351c:	2000      	movs	r0, #0
 801351e:	4632      	mov	r2, r6
 8013520:	463b      	mov	r3, r7
 8013522:	4604      	mov	r4, r0
 8013524:	460d      	mov	r5, r1
 8013526:	f7ec fe5f 	bl	80001e8 <__aeabi_dsub>
 801352a:	4642      	mov	r2, r8
 801352c:	464b      	mov	r3, r9
 801352e:	f7ec fe5b 	bl	80001e8 <__aeabi_dsub>
 8013532:	ec53 2b18 	vmov	r2, r3, d8
 8013536:	f7ec fe57 	bl	80001e8 <__aeabi_dsub>
 801353a:	4602      	mov	r2, r0
 801353c:	460b      	mov	r3, r1
 801353e:	4650      	mov	r0, sl
 8013540:	4659      	mov	r1, fp
 8013542:	e610      	b.n	8013166 <__ieee754_pow+0x31e>
 8013544:	2401      	movs	r4, #1
 8013546:	e6a1      	b.n	801328c <__ieee754_pow+0x444>
 8013548:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8013598 <__ieee754_pow+0x750>
 801354c:	e617      	b.n	801317e <__ieee754_pow+0x336>
 801354e:	bf00      	nop
 8013550:	4a454eef 	.word	0x4a454eef
 8013554:	3fca7e28 	.word	0x3fca7e28
 8013558:	93c9db65 	.word	0x93c9db65
 801355c:	3fcd864a 	.word	0x3fcd864a
 8013560:	a91d4101 	.word	0xa91d4101
 8013564:	3fd17460 	.word	0x3fd17460
 8013568:	518f264d 	.word	0x518f264d
 801356c:	3fd55555 	.word	0x3fd55555
 8013570:	db6fabff 	.word	0xdb6fabff
 8013574:	3fdb6db6 	.word	0x3fdb6db6
 8013578:	33333303 	.word	0x33333303
 801357c:	3fe33333 	.word	0x3fe33333
 8013580:	e0000000 	.word	0xe0000000
 8013584:	3feec709 	.word	0x3feec709
 8013588:	dc3a03fd 	.word	0xdc3a03fd
 801358c:	3feec709 	.word	0x3feec709
 8013590:	145b01f5 	.word	0x145b01f5
 8013594:	be3e2fe0 	.word	0xbe3e2fe0
 8013598:	00000000 	.word	0x00000000
 801359c:	3ff00000 	.word	0x3ff00000
 80135a0:	7ff00000 	.word	0x7ff00000
 80135a4:	43400000 	.word	0x43400000
 80135a8:	0003988e 	.word	0x0003988e
 80135ac:	000bb679 	.word	0x000bb679
 80135b0:	08014fe0 	.word	0x08014fe0
 80135b4:	3ff00000 	.word	0x3ff00000
 80135b8:	40080000 	.word	0x40080000
 80135bc:	08015000 	.word	0x08015000
 80135c0:	08014ff0 	.word	0x08014ff0
 80135c4:	a3b5      	add	r3, pc, #724	; (adr r3, 801389c <__ieee754_pow+0xa54>)
 80135c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ca:	4640      	mov	r0, r8
 80135cc:	4649      	mov	r1, r9
 80135ce:	f7ec fe0d 	bl	80001ec <__adddf3>
 80135d2:	4622      	mov	r2, r4
 80135d4:	ec41 0b1a 	vmov	d10, r0, r1
 80135d8:	462b      	mov	r3, r5
 80135da:	4630      	mov	r0, r6
 80135dc:	4639      	mov	r1, r7
 80135de:	f7ec fe03 	bl	80001e8 <__aeabi_dsub>
 80135e2:	4602      	mov	r2, r0
 80135e4:	460b      	mov	r3, r1
 80135e6:	ec51 0b1a 	vmov	r0, r1, d10
 80135ea:	f7ed fa45 	bl	8000a78 <__aeabi_dcmpgt>
 80135ee:	2800      	cmp	r0, #0
 80135f0:	f47f ae04 	bne.w	80131fc <__ieee754_pow+0x3b4>
 80135f4:	4aa4      	ldr	r2, [pc, #656]	; (8013888 <__ieee754_pow+0xa40>)
 80135f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80135fa:	4293      	cmp	r3, r2
 80135fc:	f340 8108 	ble.w	8013810 <__ieee754_pow+0x9c8>
 8013600:	151b      	asrs	r3, r3, #20
 8013602:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013606:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801360a:	fa4a f303 	asr.w	r3, sl, r3
 801360e:	445b      	add	r3, fp
 8013610:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013614:	4e9d      	ldr	r6, [pc, #628]	; (801388c <__ieee754_pow+0xa44>)
 8013616:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801361a:	4116      	asrs	r6, r2
 801361c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013620:	2000      	movs	r0, #0
 8013622:	ea23 0106 	bic.w	r1, r3, r6
 8013626:	f1c2 0214 	rsb	r2, r2, #20
 801362a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801362e:	fa4a fa02 	asr.w	sl, sl, r2
 8013632:	f1bb 0f00 	cmp.w	fp, #0
 8013636:	4602      	mov	r2, r0
 8013638:	460b      	mov	r3, r1
 801363a:	4620      	mov	r0, r4
 801363c:	4629      	mov	r1, r5
 801363e:	bfb8      	it	lt
 8013640:	f1ca 0a00 	rsblt	sl, sl, #0
 8013644:	f7ec fdd0 	bl	80001e8 <__aeabi_dsub>
 8013648:	ec41 0b19 	vmov	d9, r0, r1
 801364c:	4642      	mov	r2, r8
 801364e:	464b      	mov	r3, r9
 8013650:	ec51 0b19 	vmov	r0, r1, d9
 8013654:	f7ec fdca 	bl	80001ec <__adddf3>
 8013658:	a37b      	add	r3, pc, #492	; (adr r3, 8013848 <__ieee754_pow+0xa00>)
 801365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801365e:	2000      	movs	r0, #0
 8013660:	4604      	mov	r4, r0
 8013662:	460d      	mov	r5, r1
 8013664:	f7ec ff78 	bl	8000558 <__aeabi_dmul>
 8013668:	ec53 2b19 	vmov	r2, r3, d9
 801366c:	4606      	mov	r6, r0
 801366e:	460f      	mov	r7, r1
 8013670:	4620      	mov	r0, r4
 8013672:	4629      	mov	r1, r5
 8013674:	f7ec fdb8 	bl	80001e8 <__aeabi_dsub>
 8013678:	4602      	mov	r2, r0
 801367a:	460b      	mov	r3, r1
 801367c:	4640      	mov	r0, r8
 801367e:	4649      	mov	r1, r9
 8013680:	f7ec fdb2 	bl	80001e8 <__aeabi_dsub>
 8013684:	a372      	add	r3, pc, #456	; (adr r3, 8013850 <__ieee754_pow+0xa08>)
 8013686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801368a:	f7ec ff65 	bl	8000558 <__aeabi_dmul>
 801368e:	a372      	add	r3, pc, #456	; (adr r3, 8013858 <__ieee754_pow+0xa10>)
 8013690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013694:	4680      	mov	r8, r0
 8013696:	4689      	mov	r9, r1
 8013698:	4620      	mov	r0, r4
 801369a:	4629      	mov	r1, r5
 801369c:	f7ec ff5c 	bl	8000558 <__aeabi_dmul>
 80136a0:	4602      	mov	r2, r0
 80136a2:	460b      	mov	r3, r1
 80136a4:	4640      	mov	r0, r8
 80136a6:	4649      	mov	r1, r9
 80136a8:	f7ec fda0 	bl	80001ec <__adddf3>
 80136ac:	4604      	mov	r4, r0
 80136ae:	460d      	mov	r5, r1
 80136b0:	4602      	mov	r2, r0
 80136b2:	460b      	mov	r3, r1
 80136b4:	4630      	mov	r0, r6
 80136b6:	4639      	mov	r1, r7
 80136b8:	f7ec fd98 	bl	80001ec <__adddf3>
 80136bc:	4632      	mov	r2, r6
 80136be:	463b      	mov	r3, r7
 80136c0:	4680      	mov	r8, r0
 80136c2:	4689      	mov	r9, r1
 80136c4:	f7ec fd90 	bl	80001e8 <__aeabi_dsub>
 80136c8:	4602      	mov	r2, r0
 80136ca:	460b      	mov	r3, r1
 80136cc:	4620      	mov	r0, r4
 80136ce:	4629      	mov	r1, r5
 80136d0:	f7ec fd8a 	bl	80001e8 <__aeabi_dsub>
 80136d4:	4642      	mov	r2, r8
 80136d6:	4606      	mov	r6, r0
 80136d8:	460f      	mov	r7, r1
 80136da:	464b      	mov	r3, r9
 80136dc:	4640      	mov	r0, r8
 80136de:	4649      	mov	r1, r9
 80136e0:	f7ec ff3a 	bl	8000558 <__aeabi_dmul>
 80136e4:	a35e      	add	r3, pc, #376	; (adr r3, 8013860 <__ieee754_pow+0xa18>)
 80136e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ea:	4604      	mov	r4, r0
 80136ec:	460d      	mov	r5, r1
 80136ee:	f7ec ff33 	bl	8000558 <__aeabi_dmul>
 80136f2:	a35d      	add	r3, pc, #372	; (adr r3, 8013868 <__ieee754_pow+0xa20>)
 80136f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136f8:	f7ec fd76 	bl	80001e8 <__aeabi_dsub>
 80136fc:	4622      	mov	r2, r4
 80136fe:	462b      	mov	r3, r5
 8013700:	f7ec ff2a 	bl	8000558 <__aeabi_dmul>
 8013704:	a35a      	add	r3, pc, #360	; (adr r3, 8013870 <__ieee754_pow+0xa28>)
 8013706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801370a:	f7ec fd6f 	bl	80001ec <__adddf3>
 801370e:	4622      	mov	r2, r4
 8013710:	462b      	mov	r3, r5
 8013712:	f7ec ff21 	bl	8000558 <__aeabi_dmul>
 8013716:	a358      	add	r3, pc, #352	; (adr r3, 8013878 <__ieee754_pow+0xa30>)
 8013718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801371c:	f7ec fd64 	bl	80001e8 <__aeabi_dsub>
 8013720:	4622      	mov	r2, r4
 8013722:	462b      	mov	r3, r5
 8013724:	f7ec ff18 	bl	8000558 <__aeabi_dmul>
 8013728:	a355      	add	r3, pc, #340	; (adr r3, 8013880 <__ieee754_pow+0xa38>)
 801372a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801372e:	f7ec fd5d 	bl	80001ec <__adddf3>
 8013732:	4622      	mov	r2, r4
 8013734:	462b      	mov	r3, r5
 8013736:	f7ec ff0f 	bl	8000558 <__aeabi_dmul>
 801373a:	4602      	mov	r2, r0
 801373c:	460b      	mov	r3, r1
 801373e:	4640      	mov	r0, r8
 8013740:	4649      	mov	r1, r9
 8013742:	f7ec fd51 	bl	80001e8 <__aeabi_dsub>
 8013746:	4604      	mov	r4, r0
 8013748:	460d      	mov	r5, r1
 801374a:	4602      	mov	r2, r0
 801374c:	460b      	mov	r3, r1
 801374e:	4640      	mov	r0, r8
 8013750:	4649      	mov	r1, r9
 8013752:	f7ec ff01 	bl	8000558 <__aeabi_dmul>
 8013756:	2200      	movs	r2, #0
 8013758:	ec41 0b19 	vmov	d9, r0, r1
 801375c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013760:	4620      	mov	r0, r4
 8013762:	4629      	mov	r1, r5
 8013764:	f7ec fd40 	bl	80001e8 <__aeabi_dsub>
 8013768:	4602      	mov	r2, r0
 801376a:	460b      	mov	r3, r1
 801376c:	ec51 0b19 	vmov	r0, r1, d9
 8013770:	f7ed f81c 	bl	80007ac <__aeabi_ddiv>
 8013774:	4632      	mov	r2, r6
 8013776:	4604      	mov	r4, r0
 8013778:	460d      	mov	r5, r1
 801377a:	463b      	mov	r3, r7
 801377c:	4640      	mov	r0, r8
 801377e:	4649      	mov	r1, r9
 8013780:	f7ec feea 	bl	8000558 <__aeabi_dmul>
 8013784:	4632      	mov	r2, r6
 8013786:	463b      	mov	r3, r7
 8013788:	f7ec fd30 	bl	80001ec <__adddf3>
 801378c:	4602      	mov	r2, r0
 801378e:	460b      	mov	r3, r1
 8013790:	4620      	mov	r0, r4
 8013792:	4629      	mov	r1, r5
 8013794:	f7ec fd28 	bl	80001e8 <__aeabi_dsub>
 8013798:	4642      	mov	r2, r8
 801379a:	464b      	mov	r3, r9
 801379c:	f7ec fd24 	bl	80001e8 <__aeabi_dsub>
 80137a0:	460b      	mov	r3, r1
 80137a2:	4602      	mov	r2, r0
 80137a4:	493a      	ldr	r1, [pc, #232]	; (8013890 <__ieee754_pow+0xa48>)
 80137a6:	2000      	movs	r0, #0
 80137a8:	f7ec fd1e 	bl	80001e8 <__aeabi_dsub>
 80137ac:	ec41 0b10 	vmov	d0, r0, r1
 80137b0:	ee10 3a90 	vmov	r3, s1
 80137b4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80137b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80137bc:	da2b      	bge.n	8013816 <__ieee754_pow+0x9ce>
 80137be:	4650      	mov	r0, sl
 80137c0:	f000 fe9e 	bl	8014500 <scalbn>
 80137c4:	ec51 0b10 	vmov	r0, r1, d0
 80137c8:	ec53 2b18 	vmov	r2, r3, d8
 80137cc:	f7ff bbed 	b.w	8012faa <__ieee754_pow+0x162>
 80137d0:	4b30      	ldr	r3, [pc, #192]	; (8013894 <__ieee754_pow+0xa4c>)
 80137d2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80137d6:	429e      	cmp	r6, r3
 80137d8:	f77f af0c 	ble.w	80135f4 <__ieee754_pow+0x7ac>
 80137dc:	4b2e      	ldr	r3, [pc, #184]	; (8013898 <__ieee754_pow+0xa50>)
 80137de:	440b      	add	r3, r1
 80137e0:	4303      	orrs	r3, r0
 80137e2:	d009      	beq.n	80137f8 <__ieee754_pow+0x9b0>
 80137e4:	ec51 0b18 	vmov	r0, r1, d8
 80137e8:	2200      	movs	r2, #0
 80137ea:	2300      	movs	r3, #0
 80137ec:	f7ed f926 	bl	8000a3c <__aeabi_dcmplt>
 80137f0:	3800      	subs	r0, #0
 80137f2:	bf18      	it	ne
 80137f4:	2001      	movne	r0, #1
 80137f6:	e447      	b.n	8013088 <__ieee754_pow+0x240>
 80137f8:	4622      	mov	r2, r4
 80137fa:	462b      	mov	r3, r5
 80137fc:	f7ec fcf4 	bl	80001e8 <__aeabi_dsub>
 8013800:	4642      	mov	r2, r8
 8013802:	464b      	mov	r3, r9
 8013804:	f7ed f92e 	bl	8000a64 <__aeabi_dcmpge>
 8013808:	2800      	cmp	r0, #0
 801380a:	f43f aef3 	beq.w	80135f4 <__ieee754_pow+0x7ac>
 801380e:	e7e9      	b.n	80137e4 <__ieee754_pow+0x99c>
 8013810:	f04f 0a00 	mov.w	sl, #0
 8013814:	e71a      	b.n	801364c <__ieee754_pow+0x804>
 8013816:	ec51 0b10 	vmov	r0, r1, d0
 801381a:	4619      	mov	r1, r3
 801381c:	e7d4      	b.n	80137c8 <__ieee754_pow+0x980>
 801381e:	491c      	ldr	r1, [pc, #112]	; (8013890 <__ieee754_pow+0xa48>)
 8013820:	2000      	movs	r0, #0
 8013822:	f7ff bb30 	b.w	8012e86 <__ieee754_pow+0x3e>
 8013826:	2000      	movs	r0, #0
 8013828:	2100      	movs	r1, #0
 801382a:	f7ff bb2c 	b.w	8012e86 <__ieee754_pow+0x3e>
 801382e:	4630      	mov	r0, r6
 8013830:	4639      	mov	r1, r7
 8013832:	f7ff bb28 	b.w	8012e86 <__ieee754_pow+0x3e>
 8013836:	9204      	str	r2, [sp, #16]
 8013838:	f7ff bb7a 	b.w	8012f30 <__ieee754_pow+0xe8>
 801383c:	2300      	movs	r3, #0
 801383e:	f7ff bb64 	b.w	8012f0a <__ieee754_pow+0xc2>
 8013842:	bf00      	nop
 8013844:	f3af 8000 	nop.w
 8013848:	00000000 	.word	0x00000000
 801384c:	3fe62e43 	.word	0x3fe62e43
 8013850:	fefa39ef 	.word	0xfefa39ef
 8013854:	3fe62e42 	.word	0x3fe62e42
 8013858:	0ca86c39 	.word	0x0ca86c39
 801385c:	be205c61 	.word	0xbe205c61
 8013860:	72bea4d0 	.word	0x72bea4d0
 8013864:	3e663769 	.word	0x3e663769
 8013868:	c5d26bf1 	.word	0xc5d26bf1
 801386c:	3ebbbd41 	.word	0x3ebbbd41
 8013870:	af25de2c 	.word	0xaf25de2c
 8013874:	3f11566a 	.word	0x3f11566a
 8013878:	16bebd93 	.word	0x16bebd93
 801387c:	3f66c16c 	.word	0x3f66c16c
 8013880:	5555553e 	.word	0x5555553e
 8013884:	3fc55555 	.word	0x3fc55555
 8013888:	3fe00000 	.word	0x3fe00000
 801388c:	000fffff 	.word	0x000fffff
 8013890:	3ff00000 	.word	0x3ff00000
 8013894:	4090cbff 	.word	0x4090cbff
 8013898:	3f6f3400 	.word	0x3f6f3400
 801389c:	652b82fe 	.word	0x652b82fe
 80138a0:	3c971547 	.word	0x3c971547

080138a4 <__ieee754_sqrt>:
 80138a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138a8:	ec55 4b10 	vmov	r4, r5, d0
 80138ac:	4e55      	ldr	r6, [pc, #340]	; (8013a04 <__ieee754_sqrt+0x160>)
 80138ae:	43ae      	bics	r6, r5
 80138b0:	ee10 0a10 	vmov	r0, s0
 80138b4:	ee10 3a10 	vmov	r3, s0
 80138b8:	462a      	mov	r2, r5
 80138ba:	4629      	mov	r1, r5
 80138bc:	d110      	bne.n	80138e0 <__ieee754_sqrt+0x3c>
 80138be:	ee10 2a10 	vmov	r2, s0
 80138c2:	462b      	mov	r3, r5
 80138c4:	f7ec fe48 	bl	8000558 <__aeabi_dmul>
 80138c8:	4602      	mov	r2, r0
 80138ca:	460b      	mov	r3, r1
 80138cc:	4620      	mov	r0, r4
 80138ce:	4629      	mov	r1, r5
 80138d0:	f7ec fc8c 	bl	80001ec <__adddf3>
 80138d4:	4604      	mov	r4, r0
 80138d6:	460d      	mov	r5, r1
 80138d8:	ec45 4b10 	vmov	d0, r4, r5
 80138dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138e0:	2d00      	cmp	r5, #0
 80138e2:	dc10      	bgt.n	8013906 <__ieee754_sqrt+0x62>
 80138e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80138e8:	4330      	orrs	r0, r6
 80138ea:	d0f5      	beq.n	80138d8 <__ieee754_sqrt+0x34>
 80138ec:	b15d      	cbz	r5, 8013906 <__ieee754_sqrt+0x62>
 80138ee:	ee10 2a10 	vmov	r2, s0
 80138f2:	462b      	mov	r3, r5
 80138f4:	ee10 0a10 	vmov	r0, s0
 80138f8:	f7ec fc76 	bl	80001e8 <__aeabi_dsub>
 80138fc:	4602      	mov	r2, r0
 80138fe:	460b      	mov	r3, r1
 8013900:	f7ec ff54 	bl	80007ac <__aeabi_ddiv>
 8013904:	e7e6      	b.n	80138d4 <__ieee754_sqrt+0x30>
 8013906:	1512      	asrs	r2, r2, #20
 8013908:	d074      	beq.n	80139f4 <__ieee754_sqrt+0x150>
 801390a:	07d4      	lsls	r4, r2, #31
 801390c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013910:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8013914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8013918:	bf5e      	ittt	pl
 801391a:	0fda      	lsrpl	r2, r3, #31
 801391c:	005b      	lslpl	r3, r3, #1
 801391e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8013922:	2400      	movs	r4, #0
 8013924:	0fda      	lsrs	r2, r3, #31
 8013926:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801392a:	107f      	asrs	r7, r7, #1
 801392c:	005b      	lsls	r3, r3, #1
 801392e:	2516      	movs	r5, #22
 8013930:	4620      	mov	r0, r4
 8013932:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8013936:	1886      	adds	r6, r0, r2
 8013938:	428e      	cmp	r6, r1
 801393a:	bfde      	ittt	le
 801393c:	1b89      	suble	r1, r1, r6
 801393e:	18b0      	addle	r0, r6, r2
 8013940:	18a4      	addle	r4, r4, r2
 8013942:	0049      	lsls	r1, r1, #1
 8013944:	3d01      	subs	r5, #1
 8013946:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801394a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801394e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013952:	d1f0      	bne.n	8013936 <__ieee754_sqrt+0x92>
 8013954:	462a      	mov	r2, r5
 8013956:	f04f 0e20 	mov.w	lr, #32
 801395a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801395e:	4281      	cmp	r1, r0
 8013960:	eb06 0c05 	add.w	ip, r6, r5
 8013964:	dc02      	bgt.n	801396c <__ieee754_sqrt+0xc8>
 8013966:	d113      	bne.n	8013990 <__ieee754_sqrt+0xec>
 8013968:	459c      	cmp	ip, r3
 801396a:	d811      	bhi.n	8013990 <__ieee754_sqrt+0xec>
 801396c:	f1bc 0f00 	cmp.w	ip, #0
 8013970:	eb0c 0506 	add.w	r5, ip, r6
 8013974:	da43      	bge.n	80139fe <__ieee754_sqrt+0x15a>
 8013976:	2d00      	cmp	r5, #0
 8013978:	db41      	blt.n	80139fe <__ieee754_sqrt+0x15a>
 801397a:	f100 0801 	add.w	r8, r0, #1
 801397e:	1a09      	subs	r1, r1, r0
 8013980:	459c      	cmp	ip, r3
 8013982:	bf88      	it	hi
 8013984:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8013988:	eba3 030c 	sub.w	r3, r3, ip
 801398c:	4432      	add	r2, r6
 801398e:	4640      	mov	r0, r8
 8013990:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8013994:	f1be 0e01 	subs.w	lr, lr, #1
 8013998:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801399c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80139a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80139a4:	d1db      	bne.n	801395e <__ieee754_sqrt+0xba>
 80139a6:	430b      	orrs	r3, r1
 80139a8:	d006      	beq.n	80139b8 <__ieee754_sqrt+0x114>
 80139aa:	1c50      	adds	r0, r2, #1
 80139ac:	bf13      	iteet	ne
 80139ae:	3201      	addne	r2, #1
 80139b0:	3401      	addeq	r4, #1
 80139b2:	4672      	moveq	r2, lr
 80139b4:	f022 0201 	bicne.w	r2, r2, #1
 80139b8:	1063      	asrs	r3, r4, #1
 80139ba:	0852      	lsrs	r2, r2, #1
 80139bc:	07e1      	lsls	r1, r4, #31
 80139be:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80139c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80139c6:	bf48      	it	mi
 80139c8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80139cc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80139d0:	4614      	mov	r4, r2
 80139d2:	e781      	b.n	80138d8 <__ieee754_sqrt+0x34>
 80139d4:	0ad9      	lsrs	r1, r3, #11
 80139d6:	3815      	subs	r0, #21
 80139d8:	055b      	lsls	r3, r3, #21
 80139da:	2900      	cmp	r1, #0
 80139dc:	d0fa      	beq.n	80139d4 <__ieee754_sqrt+0x130>
 80139de:	02cd      	lsls	r5, r1, #11
 80139e0:	d50a      	bpl.n	80139f8 <__ieee754_sqrt+0x154>
 80139e2:	f1c2 0420 	rsb	r4, r2, #32
 80139e6:	fa23 f404 	lsr.w	r4, r3, r4
 80139ea:	1e55      	subs	r5, r2, #1
 80139ec:	4093      	lsls	r3, r2
 80139ee:	4321      	orrs	r1, r4
 80139f0:	1b42      	subs	r2, r0, r5
 80139f2:	e78a      	b.n	801390a <__ieee754_sqrt+0x66>
 80139f4:	4610      	mov	r0, r2
 80139f6:	e7f0      	b.n	80139da <__ieee754_sqrt+0x136>
 80139f8:	0049      	lsls	r1, r1, #1
 80139fa:	3201      	adds	r2, #1
 80139fc:	e7ef      	b.n	80139de <__ieee754_sqrt+0x13a>
 80139fe:	4680      	mov	r8, r0
 8013a00:	e7bd      	b.n	801397e <__ieee754_sqrt+0xda>
 8013a02:	bf00      	nop
 8013a04:	7ff00000 	.word	0x7ff00000

08013a08 <__ieee754_atan2f>:
 8013a08:	ee10 2a90 	vmov	r2, s1
 8013a0c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8013a10:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013a14:	b510      	push	{r4, lr}
 8013a16:	eef0 7a40 	vmov.f32	s15, s0
 8013a1a:	dc06      	bgt.n	8013a2a <__ieee754_atan2f+0x22>
 8013a1c:	ee10 0a10 	vmov	r0, s0
 8013a20:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8013a24:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013a28:	dd04      	ble.n	8013a34 <__ieee754_atan2f+0x2c>
 8013a2a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8013a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8013a32:	bd10      	pop	{r4, pc}
 8013a34:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8013a38:	d103      	bne.n	8013a42 <__ieee754_atan2f+0x3a>
 8013a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a3e:	f000 bde5 	b.w	801460c <atanf>
 8013a42:	1794      	asrs	r4, r2, #30
 8013a44:	f004 0402 	and.w	r4, r4, #2
 8013a48:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8013a4c:	b943      	cbnz	r3, 8013a60 <__ieee754_atan2f+0x58>
 8013a4e:	2c02      	cmp	r4, #2
 8013a50:	d05e      	beq.n	8013b10 <__ieee754_atan2f+0x108>
 8013a52:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013b24 <__ieee754_atan2f+0x11c>
 8013a56:	2c03      	cmp	r4, #3
 8013a58:	bf08      	it	eq
 8013a5a:	eef0 7a47 	vmoveq.f32	s15, s14
 8013a5e:	e7e6      	b.n	8013a2e <__ieee754_atan2f+0x26>
 8013a60:	b941      	cbnz	r1, 8013a74 <__ieee754_atan2f+0x6c>
 8013a62:	eddf 7a31 	vldr	s15, [pc, #196]	; 8013b28 <__ieee754_atan2f+0x120>
 8013a66:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8013b2c <__ieee754_atan2f+0x124>
 8013a6a:	2800      	cmp	r0, #0
 8013a6c:	bfb8      	it	lt
 8013a6e:	eef0 7a40 	vmovlt.f32	s15, s0
 8013a72:	e7dc      	b.n	8013a2e <__ieee754_atan2f+0x26>
 8013a74:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013a78:	d110      	bne.n	8013a9c <__ieee754_atan2f+0x94>
 8013a7a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013a7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8013a82:	d107      	bne.n	8013a94 <__ieee754_atan2f+0x8c>
 8013a84:	2c02      	cmp	r4, #2
 8013a86:	d846      	bhi.n	8013b16 <__ieee754_atan2f+0x10e>
 8013a88:	4b29      	ldr	r3, [pc, #164]	; (8013b30 <__ieee754_atan2f+0x128>)
 8013a8a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013a8e:	edd4 7a00 	vldr	s15, [r4]
 8013a92:	e7cc      	b.n	8013a2e <__ieee754_atan2f+0x26>
 8013a94:	2c02      	cmp	r4, #2
 8013a96:	d841      	bhi.n	8013b1c <__ieee754_atan2f+0x114>
 8013a98:	4b26      	ldr	r3, [pc, #152]	; (8013b34 <__ieee754_atan2f+0x12c>)
 8013a9a:	e7f6      	b.n	8013a8a <__ieee754_atan2f+0x82>
 8013a9c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013aa0:	d0df      	beq.n	8013a62 <__ieee754_atan2f+0x5a>
 8013aa2:	1a5b      	subs	r3, r3, r1
 8013aa4:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8013aa8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8013aac:	da1a      	bge.n	8013ae4 <__ieee754_atan2f+0xdc>
 8013aae:	2a00      	cmp	r2, #0
 8013ab0:	da01      	bge.n	8013ab6 <__ieee754_atan2f+0xae>
 8013ab2:	313c      	adds	r1, #60	; 0x3c
 8013ab4:	db19      	blt.n	8013aea <__ieee754_atan2f+0xe2>
 8013ab6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8013aba:	f000 fe7b 	bl	80147b4 <fabsf>
 8013abe:	f000 fda5 	bl	801460c <atanf>
 8013ac2:	eef0 7a40 	vmov.f32	s15, s0
 8013ac6:	2c01      	cmp	r4, #1
 8013ac8:	d012      	beq.n	8013af0 <__ieee754_atan2f+0xe8>
 8013aca:	2c02      	cmp	r4, #2
 8013acc:	d017      	beq.n	8013afe <__ieee754_atan2f+0xf6>
 8013ace:	2c00      	cmp	r4, #0
 8013ad0:	d0ad      	beq.n	8013a2e <__ieee754_atan2f+0x26>
 8013ad2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8013b38 <__ieee754_atan2f+0x130>
 8013ad6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013ada:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8013b3c <__ieee754_atan2f+0x134>
 8013ade:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013ae2:	e7a4      	b.n	8013a2e <__ieee754_atan2f+0x26>
 8013ae4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8013b28 <__ieee754_atan2f+0x120>
 8013ae8:	e7ed      	b.n	8013ac6 <__ieee754_atan2f+0xbe>
 8013aea:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013b40 <__ieee754_atan2f+0x138>
 8013aee:	e7ea      	b.n	8013ac6 <__ieee754_atan2f+0xbe>
 8013af0:	ee17 3a90 	vmov	r3, s15
 8013af4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013af8:	ee07 3a90 	vmov	s15, r3
 8013afc:	e797      	b.n	8013a2e <__ieee754_atan2f+0x26>
 8013afe:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8013b38 <__ieee754_atan2f+0x130>
 8013b02:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013b06:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8013b3c <__ieee754_atan2f+0x134>
 8013b0a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013b0e:	e78e      	b.n	8013a2e <__ieee754_atan2f+0x26>
 8013b10:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8013b3c <__ieee754_atan2f+0x134>
 8013b14:	e78b      	b.n	8013a2e <__ieee754_atan2f+0x26>
 8013b16:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8013b44 <__ieee754_atan2f+0x13c>
 8013b1a:	e788      	b.n	8013a2e <__ieee754_atan2f+0x26>
 8013b1c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013b40 <__ieee754_atan2f+0x138>
 8013b20:	e785      	b.n	8013a2e <__ieee754_atan2f+0x26>
 8013b22:	bf00      	nop
 8013b24:	c0490fdb 	.word	0xc0490fdb
 8013b28:	3fc90fdb 	.word	0x3fc90fdb
 8013b2c:	bfc90fdb 	.word	0xbfc90fdb
 8013b30:	08015010 	.word	0x08015010
 8013b34:	0801501c 	.word	0x0801501c
 8013b38:	33bbbd2e 	.word	0x33bbbd2e
 8013b3c:	40490fdb 	.word	0x40490fdb
 8013b40:	00000000 	.word	0x00000000
 8013b44:	3f490fdb 	.word	0x3f490fdb

08013b48 <__ieee754_rem_pio2f>:
 8013b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b4a:	ee10 6a10 	vmov	r6, s0
 8013b4e:	4b8e      	ldr	r3, [pc, #568]	; (8013d88 <__ieee754_rem_pio2f+0x240>)
 8013b50:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8013b54:	429d      	cmp	r5, r3
 8013b56:	b087      	sub	sp, #28
 8013b58:	eef0 7a40 	vmov.f32	s15, s0
 8013b5c:	4604      	mov	r4, r0
 8013b5e:	dc05      	bgt.n	8013b6c <__ieee754_rem_pio2f+0x24>
 8013b60:	2300      	movs	r3, #0
 8013b62:	ed80 0a00 	vstr	s0, [r0]
 8013b66:	6043      	str	r3, [r0, #4]
 8013b68:	2000      	movs	r0, #0
 8013b6a:	e01a      	b.n	8013ba2 <__ieee754_rem_pio2f+0x5a>
 8013b6c:	4b87      	ldr	r3, [pc, #540]	; (8013d8c <__ieee754_rem_pio2f+0x244>)
 8013b6e:	429d      	cmp	r5, r3
 8013b70:	dc46      	bgt.n	8013c00 <__ieee754_rem_pio2f+0xb8>
 8013b72:	2e00      	cmp	r6, #0
 8013b74:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8013d90 <__ieee754_rem_pio2f+0x248>
 8013b78:	4b86      	ldr	r3, [pc, #536]	; (8013d94 <__ieee754_rem_pio2f+0x24c>)
 8013b7a:	f025 050f 	bic.w	r5, r5, #15
 8013b7e:	dd1f      	ble.n	8013bc0 <__ieee754_rem_pio2f+0x78>
 8013b80:	429d      	cmp	r5, r3
 8013b82:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013b86:	d00e      	beq.n	8013ba6 <__ieee754_rem_pio2f+0x5e>
 8013b88:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8013d98 <__ieee754_rem_pio2f+0x250>
 8013b8c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8013b90:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013b94:	ed80 0a00 	vstr	s0, [r0]
 8013b98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013b9c:	2001      	movs	r0, #1
 8013b9e:	edc4 7a01 	vstr	s15, [r4, #4]
 8013ba2:	b007      	add	sp, #28
 8013ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ba6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8013d9c <__ieee754_rem_pio2f+0x254>
 8013baa:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8013da0 <__ieee754_rem_pio2f+0x258>
 8013bae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013bb2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8013bb6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013bba:	edc0 6a00 	vstr	s13, [r0]
 8013bbe:	e7eb      	b.n	8013b98 <__ieee754_rem_pio2f+0x50>
 8013bc0:	429d      	cmp	r5, r3
 8013bc2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013bc6:	d00e      	beq.n	8013be6 <__ieee754_rem_pio2f+0x9e>
 8013bc8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8013d98 <__ieee754_rem_pio2f+0x250>
 8013bcc:	ee37 0a87 	vadd.f32	s0, s15, s14
 8013bd0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013bd4:	ed80 0a00 	vstr	s0, [r0]
 8013bd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8013be0:	edc4 7a01 	vstr	s15, [r4, #4]
 8013be4:	e7dd      	b.n	8013ba2 <__ieee754_rem_pio2f+0x5a>
 8013be6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8013d9c <__ieee754_rem_pio2f+0x254>
 8013bea:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8013da0 <__ieee754_rem_pio2f+0x258>
 8013bee:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013bf2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8013bf6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013bfa:	edc0 6a00 	vstr	s13, [r0]
 8013bfe:	e7eb      	b.n	8013bd8 <__ieee754_rem_pio2f+0x90>
 8013c00:	4b68      	ldr	r3, [pc, #416]	; (8013da4 <__ieee754_rem_pio2f+0x25c>)
 8013c02:	429d      	cmp	r5, r3
 8013c04:	dc72      	bgt.n	8013cec <__ieee754_rem_pio2f+0x1a4>
 8013c06:	f000 fdd5 	bl	80147b4 <fabsf>
 8013c0a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8013da8 <__ieee754_rem_pio2f+0x260>
 8013c0e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013c12:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013c16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013c1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013c1e:	ee17 0a90 	vmov	r0, s15
 8013c22:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8013d90 <__ieee754_rem_pio2f+0x248>
 8013c26:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013c2a:	281f      	cmp	r0, #31
 8013c2c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8013d98 <__ieee754_rem_pio2f+0x250>
 8013c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c34:	eeb1 6a47 	vneg.f32	s12, s14
 8013c38:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013c3c:	ee16 2a90 	vmov	r2, s13
 8013c40:	dc1c      	bgt.n	8013c7c <__ieee754_rem_pio2f+0x134>
 8013c42:	495a      	ldr	r1, [pc, #360]	; (8013dac <__ieee754_rem_pio2f+0x264>)
 8013c44:	1e47      	subs	r7, r0, #1
 8013c46:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8013c4a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8013c4e:	428b      	cmp	r3, r1
 8013c50:	d014      	beq.n	8013c7c <__ieee754_rem_pio2f+0x134>
 8013c52:	6022      	str	r2, [r4, #0]
 8013c54:	ed94 7a00 	vldr	s14, [r4]
 8013c58:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013c5c:	2e00      	cmp	r6, #0
 8013c5e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013c62:	ed84 0a01 	vstr	s0, [r4, #4]
 8013c66:	da9c      	bge.n	8013ba2 <__ieee754_rem_pio2f+0x5a>
 8013c68:	eeb1 7a47 	vneg.f32	s14, s14
 8013c6c:	eeb1 0a40 	vneg.f32	s0, s0
 8013c70:	ed84 7a00 	vstr	s14, [r4]
 8013c74:	ed84 0a01 	vstr	s0, [r4, #4]
 8013c78:	4240      	negs	r0, r0
 8013c7a:	e792      	b.n	8013ba2 <__ieee754_rem_pio2f+0x5a>
 8013c7c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013c80:	15eb      	asrs	r3, r5, #23
 8013c82:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8013c86:	2d08      	cmp	r5, #8
 8013c88:	dde3      	ble.n	8013c52 <__ieee754_rem_pio2f+0x10a>
 8013c8a:	eddf 7a44 	vldr	s15, [pc, #272]	; 8013d9c <__ieee754_rem_pio2f+0x254>
 8013c8e:	eddf 5a44 	vldr	s11, [pc, #272]	; 8013da0 <__ieee754_rem_pio2f+0x258>
 8013c92:	eef0 6a40 	vmov.f32	s13, s0
 8013c96:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013c9a:	ee30 0a66 	vsub.f32	s0, s0, s13
 8013c9e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8013ca2:	eef0 7a40 	vmov.f32	s15, s0
 8013ca6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013caa:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013cae:	ee15 2a90 	vmov	r2, s11
 8013cb2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013cb6:	1a5b      	subs	r3, r3, r1
 8013cb8:	2b19      	cmp	r3, #25
 8013cba:	dc04      	bgt.n	8013cc6 <__ieee754_rem_pio2f+0x17e>
 8013cbc:	edc4 5a00 	vstr	s11, [r4]
 8013cc0:	eeb0 0a66 	vmov.f32	s0, s13
 8013cc4:	e7c6      	b.n	8013c54 <__ieee754_rem_pio2f+0x10c>
 8013cc6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8013db0 <__ieee754_rem_pio2f+0x268>
 8013cca:	eeb0 0a66 	vmov.f32	s0, s13
 8013cce:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013cd2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013cd6:	eddf 6a37 	vldr	s13, [pc, #220]	; 8013db4 <__ieee754_rem_pio2f+0x26c>
 8013cda:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013cde:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013ce2:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013ce6:	ed84 7a00 	vstr	s14, [r4]
 8013cea:	e7b3      	b.n	8013c54 <__ieee754_rem_pio2f+0x10c>
 8013cec:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013cf0:	db06      	blt.n	8013d00 <__ieee754_rem_pio2f+0x1b8>
 8013cf2:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013cf6:	edc0 7a01 	vstr	s15, [r0, #4]
 8013cfa:	edc0 7a00 	vstr	s15, [r0]
 8013cfe:	e733      	b.n	8013b68 <__ieee754_rem_pio2f+0x20>
 8013d00:	15ea      	asrs	r2, r5, #23
 8013d02:	3a86      	subs	r2, #134	; 0x86
 8013d04:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013d08:	ee07 3a90 	vmov	s15, r3
 8013d0c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013d10:	eddf 6a29 	vldr	s13, [pc, #164]	; 8013db8 <__ieee754_rem_pio2f+0x270>
 8013d14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013d18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013d1c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013d20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013d24:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013d28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013d2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013d30:	ed8d 7a04 	vstr	s14, [sp, #16]
 8013d34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013d38:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d40:	edcd 7a05 	vstr	s15, [sp, #20]
 8013d44:	d11e      	bne.n	8013d84 <__ieee754_rem_pio2f+0x23c>
 8013d46:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d4e:	bf14      	ite	ne
 8013d50:	2302      	movne	r3, #2
 8013d52:	2301      	moveq	r3, #1
 8013d54:	4919      	ldr	r1, [pc, #100]	; (8013dbc <__ieee754_rem_pio2f+0x274>)
 8013d56:	9101      	str	r1, [sp, #4]
 8013d58:	2102      	movs	r1, #2
 8013d5a:	9100      	str	r1, [sp, #0]
 8013d5c:	a803      	add	r0, sp, #12
 8013d5e:	4621      	mov	r1, r4
 8013d60:	f000 f832 	bl	8013dc8 <__kernel_rem_pio2f>
 8013d64:	2e00      	cmp	r6, #0
 8013d66:	f6bf af1c 	bge.w	8013ba2 <__ieee754_rem_pio2f+0x5a>
 8013d6a:	edd4 7a00 	vldr	s15, [r4]
 8013d6e:	eef1 7a67 	vneg.f32	s15, s15
 8013d72:	edc4 7a00 	vstr	s15, [r4]
 8013d76:	edd4 7a01 	vldr	s15, [r4, #4]
 8013d7a:	eef1 7a67 	vneg.f32	s15, s15
 8013d7e:	edc4 7a01 	vstr	s15, [r4, #4]
 8013d82:	e779      	b.n	8013c78 <__ieee754_rem_pio2f+0x130>
 8013d84:	2303      	movs	r3, #3
 8013d86:	e7e5      	b.n	8013d54 <__ieee754_rem_pio2f+0x20c>
 8013d88:	3f490fd8 	.word	0x3f490fd8
 8013d8c:	4016cbe3 	.word	0x4016cbe3
 8013d90:	3fc90f80 	.word	0x3fc90f80
 8013d94:	3fc90fd0 	.word	0x3fc90fd0
 8013d98:	37354443 	.word	0x37354443
 8013d9c:	37354400 	.word	0x37354400
 8013da0:	2e85a308 	.word	0x2e85a308
 8013da4:	43490f80 	.word	0x43490f80
 8013da8:	3f22f984 	.word	0x3f22f984
 8013dac:	08015028 	.word	0x08015028
 8013db0:	2e85a300 	.word	0x2e85a300
 8013db4:	248d3132 	.word	0x248d3132
 8013db8:	43800000 	.word	0x43800000
 8013dbc:	080150a8 	.word	0x080150a8

08013dc0 <__ieee754_sqrtf>:
 8013dc0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013dc4:	4770      	bx	lr
	...

08013dc8 <__kernel_rem_pio2f>:
 8013dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dcc:	ed2d 8b04 	vpush	{d8-d9}
 8013dd0:	b0d9      	sub	sp, #356	; 0x164
 8013dd2:	4688      	mov	r8, r1
 8013dd4:	9002      	str	r0, [sp, #8]
 8013dd6:	49bb      	ldr	r1, [pc, #748]	; (80140c4 <__kernel_rem_pio2f+0x2fc>)
 8013dd8:	9866      	ldr	r0, [sp, #408]	; 0x198
 8013dda:	9301      	str	r3, [sp, #4]
 8013ddc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8013de0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8013de4:	1e59      	subs	r1, r3, #1
 8013de6:	1d13      	adds	r3, r2, #4
 8013de8:	db27      	blt.n	8013e3a <__kernel_rem_pio2f+0x72>
 8013dea:	f1b2 0b03 	subs.w	fp, r2, #3
 8013dee:	bf48      	it	mi
 8013df0:	f102 0b04 	addmi.w	fp, r2, #4
 8013df4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8013df8:	1c45      	adds	r5, r0, #1
 8013dfa:	00ec      	lsls	r4, r5, #3
 8013dfc:	1a47      	subs	r7, r0, r1
 8013dfe:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80140d4 <__kernel_rem_pio2f+0x30c>
 8013e02:	9403      	str	r4, [sp, #12]
 8013e04:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8013e08:	eb0a 0c01 	add.w	ip, sl, r1
 8013e0c:	ae1c      	add	r6, sp, #112	; 0x70
 8013e0e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8013e12:	2400      	movs	r4, #0
 8013e14:	4564      	cmp	r4, ip
 8013e16:	dd12      	ble.n	8013e3e <__kernel_rem_pio2f+0x76>
 8013e18:	9b01      	ldr	r3, [sp, #4]
 8013e1a:	ac1c      	add	r4, sp, #112	; 0x70
 8013e1c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8013e20:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8013e24:	f04f 0c00 	mov.w	ip, #0
 8013e28:	45d4      	cmp	ip, sl
 8013e2a:	dc27      	bgt.n	8013e7c <__kernel_rem_pio2f+0xb4>
 8013e2c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8013e30:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80140d4 <__kernel_rem_pio2f+0x30c>
 8013e34:	4627      	mov	r7, r4
 8013e36:	2600      	movs	r6, #0
 8013e38:	e016      	b.n	8013e68 <__kernel_rem_pio2f+0xa0>
 8013e3a:	2000      	movs	r0, #0
 8013e3c:	e7dc      	b.n	8013df8 <__kernel_rem_pio2f+0x30>
 8013e3e:	42e7      	cmn	r7, r4
 8013e40:	bf5d      	ittte	pl
 8013e42:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8013e46:	ee07 3a90 	vmovpl	s15, r3
 8013e4a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8013e4e:	eef0 7a47 	vmovmi.f32	s15, s14
 8013e52:	ece6 7a01 	vstmia	r6!, {s15}
 8013e56:	3401      	adds	r4, #1
 8013e58:	e7dc      	b.n	8013e14 <__kernel_rem_pio2f+0x4c>
 8013e5a:	ecf9 6a01 	vldmia	r9!, {s13}
 8013e5e:	ed97 7a00 	vldr	s14, [r7]
 8013e62:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013e66:	3601      	adds	r6, #1
 8013e68:	428e      	cmp	r6, r1
 8013e6a:	f1a7 0704 	sub.w	r7, r7, #4
 8013e6e:	ddf4      	ble.n	8013e5a <__kernel_rem_pio2f+0x92>
 8013e70:	eceb 7a01 	vstmia	fp!, {s15}
 8013e74:	f10c 0c01 	add.w	ip, ip, #1
 8013e78:	3404      	adds	r4, #4
 8013e7a:	e7d5      	b.n	8013e28 <__kernel_rem_pio2f+0x60>
 8013e7c:	ab08      	add	r3, sp, #32
 8013e7e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8013e82:	eddf 8a93 	vldr	s17, [pc, #588]	; 80140d0 <__kernel_rem_pio2f+0x308>
 8013e86:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80140cc <__kernel_rem_pio2f+0x304>
 8013e8a:	9304      	str	r3, [sp, #16]
 8013e8c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8013e90:	4656      	mov	r6, sl
 8013e92:	00b3      	lsls	r3, r6, #2
 8013e94:	9305      	str	r3, [sp, #20]
 8013e96:	ab58      	add	r3, sp, #352	; 0x160
 8013e98:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8013e9c:	ac08      	add	r4, sp, #32
 8013e9e:	ab44      	add	r3, sp, #272	; 0x110
 8013ea0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8013ea4:	46a4      	mov	ip, r4
 8013ea6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8013eaa:	4637      	mov	r7, r6
 8013eac:	2f00      	cmp	r7, #0
 8013eae:	f1a0 0004 	sub.w	r0, r0, #4
 8013eb2:	dc4f      	bgt.n	8013f54 <__kernel_rem_pio2f+0x18c>
 8013eb4:	4628      	mov	r0, r5
 8013eb6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8013eba:	f000 fcc5 	bl	8014848 <scalbnf>
 8013ebe:	eeb0 8a40 	vmov.f32	s16, s0
 8013ec2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8013ec6:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013eca:	f000 fc7b 	bl	80147c4 <floorf>
 8013ece:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8013ed2:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013ed6:	2d00      	cmp	r5, #0
 8013ed8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8013edc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013ee0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013ee4:	ee17 9a90 	vmov	r9, s15
 8013ee8:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013eec:	dd44      	ble.n	8013f78 <__kernel_rem_pio2f+0x1b0>
 8013eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8013ef2:	ab08      	add	r3, sp, #32
 8013ef4:	f1c5 0e08 	rsb	lr, r5, #8
 8013ef8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8013efc:	fa47 f00e 	asr.w	r0, r7, lr
 8013f00:	4481      	add	r9, r0
 8013f02:	fa00 f00e 	lsl.w	r0, r0, lr
 8013f06:	1a3f      	subs	r7, r7, r0
 8013f08:	f1c5 0007 	rsb	r0, r5, #7
 8013f0c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8013f10:	4107      	asrs	r7, r0
 8013f12:	2f00      	cmp	r7, #0
 8013f14:	dd3f      	ble.n	8013f96 <__kernel_rem_pio2f+0x1ce>
 8013f16:	f04f 0e00 	mov.w	lr, #0
 8013f1a:	f109 0901 	add.w	r9, r9, #1
 8013f1e:	4673      	mov	r3, lr
 8013f20:	4576      	cmp	r6, lr
 8013f22:	dc6b      	bgt.n	8013ffc <__kernel_rem_pio2f+0x234>
 8013f24:	2d00      	cmp	r5, #0
 8013f26:	dd04      	ble.n	8013f32 <__kernel_rem_pio2f+0x16a>
 8013f28:	2d01      	cmp	r5, #1
 8013f2a:	d078      	beq.n	801401e <__kernel_rem_pio2f+0x256>
 8013f2c:	2d02      	cmp	r5, #2
 8013f2e:	f000 8081 	beq.w	8014034 <__kernel_rem_pio2f+0x26c>
 8013f32:	2f02      	cmp	r7, #2
 8013f34:	d12f      	bne.n	8013f96 <__kernel_rem_pio2f+0x1ce>
 8013f36:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013f3a:	ee30 8a48 	vsub.f32	s16, s0, s16
 8013f3e:	b353      	cbz	r3, 8013f96 <__kernel_rem_pio2f+0x1ce>
 8013f40:	4628      	mov	r0, r5
 8013f42:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8013f46:	f000 fc7f 	bl	8014848 <scalbnf>
 8013f4a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8013f4e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013f52:	e020      	b.n	8013f96 <__kernel_rem_pio2f+0x1ce>
 8013f54:	ee60 7a28 	vmul.f32	s15, s0, s17
 8013f58:	3f01      	subs	r7, #1
 8013f5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f62:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8013f66:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013f6a:	ecac 0a01 	vstmia	ip!, {s0}
 8013f6e:	ed90 0a00 	vldr	s0, [r0]
 8013f72:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013f76:	e799      	b.n	8013eac <__kernel_rem_pio2f+0xe4>
 8013f78:	d105      	bne.n	8013f86 <__kernel_rem_pio2f+0x1be>
 8013f7a:	1e70      	subs	r0, r6, #1
 8013f7c:	ab08      	add	r3, sp, #32
 8013f7e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8013f82:	11ff      	asrs	r7, r7, #7
 8013f84:	e7c5      	b.n	8013f12 <__kernel_rem_pio2f+0x14a>
 8013f86:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013f8a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f92:	da31      	bge.n	8013ff8 <__kernel_rem_pio2f+0x230>
 8013f94:	2700      	movs	r7, #0
 8013f96:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f9e:	f040 809b 	bne.w	80140d8 <__kernel_rem_pio2f+0x310>
 8013fa2:	1e74      	subs	r4, r6, #1
 8013fa4:	46a4      	mov	ip, r4
 8013fa6:	2000      	movs	r0, #0
 8013fa8:	45d4      	cmp	ip, sl
 8013faa:	da4a      	bge.n	8014042 <__kernel_rem_pio2f+0x27a>
 8013fac:	2800      	cmp	r0, #0
 8013fae:	d07a      	beq.n	80140a6 <__kernel_rem_pio2f+0x2de>
 8013fb0:	ab08      	add	r3, sp, #32
 8013fb2:	3d08      	subs	r5, #8
 8013fb4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	f000 8081 	beq.w	80140c0 <__kernel_rem_pio2f+0x2f8>
 8013fbe:	4628      	mov	r0, r5
 8013fc0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013fc4:	00a5      	lsls	r5, r4, #2
 8013fc6:	f000 fc3f 	bl	8014848 <scalbnf>
 8013fca:	aa44      	add	r2, sp, #272	; 0x110
 8013fcc:	1d2b      	adds	r3, r5, #4
 8013fce:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80140d0 <__kernel_rem_pio2f+0x308>
 8013fd2:	18d1      	adds	r1, r2, r3
 8013fd4:	4622      	mov	r2, r4
 8013fd6:	2a00      	cmp	r2, #0
 8013fd8:	f280 80ae 	bge.w	8014138 <__kernel_rem_pio2f+0x370>
 8013fdc:	4622      	mov	r2, r4
 8013fde:	2a00      	cmp	r2, #0
 8013fe0:	f2c0 80cc 	blt.w	801417c <__kernel_rem_pio2f+0x3b4>
 8013fe4:	a944      	add	r1, sp, #272	; 0x110
 8013fe6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8013fea:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80140c8 <__kernel_rem_pio2f+0x300>
 8013fee:	eddf 7a39 	vldr	s15, [pc, #228]	; 80140d4 <__kernel_rem_pio2f+0x30c>
 8013ff2:	2000      	movs	r0, #0
 8013ff4:	1aa1      	subs	r1, r4, r2
 8013ff6:	e0b6      	b.n	8014166 <__kernel_rem_pio2f+0x39e>
 8013ff8:	2702      	movs	r7, #2
 8013ffa:	e78c      	b.n	8013f16 <__kernel_rem_pio2f+0x14e>
 8013ffc:	6820      	ldr	r0, [r4, #0]
 8013ffe:	b94b      	cbnz	r3, 8014014 <__kernel_rem_pio2f+0x24c>
 8014000:	b118      	cbz	r0, 801400a <__kernel_rem_pio2f+0x242>
 8014002:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8014006:	6020      	str	r0, [r4, #0]
 8014008:	2001      	movs	r0, #1
 801400a:	f10e 0e01 	add.w	lr, lr, #1
 801400e:	3404      	adds	r4, #4
 8014010:	4603      	mov	r3, r0
 8014012:	e785      	b.n	8013f20 <__kernel_rem_pio2f+0x158>
 8014014:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8014018:	6020      	str	r0, [r4, #0]
 801401a:	4618      	mov	r0, r3
 801401c:	e7f5      	b.n	801400a <__kernel_rem_pio2f+0x242>
 801401e:	1e74      	subs	r4, r6, #1
 8014020:	a808      	add	r0, sp, #32
 8014022:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8014026:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801402a:	f10d 0c20 	add.w	ip, sp, #32
 801402e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8014032:	e77e      	b.n	8013f32 <__kernel_rem_pio2f+0x16a>
 8014034:	1e74      	subs	r4, r6, #1
 8014036:	a808      	add	r0, sp, #32
 8014038:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801403c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8014040:	e7f3      	b.n	801402a <__kernel_rem_pio2f+0x262>
 8014042:	ab08      	add	r3, sp, #32
 8014044:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8014048:	f10c 3cff 	add.w	ip, ip, #4294967295
 801404c:	4318      	orrs	r0, r3
 801404e:	e7ab      	b.n	8013fa8 <__kernel_rem_pio2f+0x1e0>
 8014050:	f10c 0c01 	add.w	ip, ip, #1
 8014054:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8014058:	2c00      	cmp	r4, #0
 801405a:	d0f9      	beq.n	8014050 <__kernel_rem_pio2f+0x288>
 801405c:	9b05      	ldr	r3, [sp, #20]
 801405e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8014062:	eb0d 0003 	add.w	r0, sp, r3
 8014066:	9b01      	ldr	r3, [sp, #4]
 8014068:	18f4      	adds	r4, r6, r3
 801406a:	ab1c      	add	r3, sp, #112	; 0x70
 801406c:	1c77      	adds	r7, r6, #1
 801406e:	384c      	subs	r0, #76	; 0x4c
 8014070:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014074:	4466      	add	r6, ip
 8014076:	42be      	cmp	r6, r7
 8014078:	f6ff af0b 	blt.w	8013e92 <__kernel_rem_pio2f+0xca>
 801407c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8014080:	f8dd e008 	ldr.w	lr, [sp, #8]
 8014084:	ee07 3a90 	vmov	s15, r3
 8014088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801408c:	f04f 0c00 	mov.w	ip, #0
 8014090:	ece4 7a01 	vstmia	r4!, {s15}
 8014094:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80140d4 <__kernel_rem_pio2f+0x30c>
 8014098:	46a1      	mov	r9, r4
 801409a:	458c      	cmp	ip, r1
 801409c:	dd07      	ble.n	80140ae <__kernel_rem_pio2f+0x2e6>
 801409e:	ece0 7a01 	vstmia	r0!, {s15}
 80140a2:	3701      	adds	r7, #1
 80140a4:	e7e7      	b.n	8014076 <__kernel_rem_pio2f+0x2ae>
 80140a6:	9804      	ldr	r0, [sp, #16]
 80140a8:	f04f 0c01 	mov.w	ip, #1
 80140ac:	e7d2      	b.n	8014054 <__kernel_rem_pio2f+0x28c>
 80140ae:	ecfe 6a01 	vldmia	lr!, {s13}
 80140b2:	ed39 7a01 	vldmdb	r9!, {s14}
 80140b6:	f10c 0c01 	add.w	ip, ip, #1
 80140ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 80140be:	e7ec      	b.n	801409a <__kernel_rem_pio2f+0x2d2>
 80140c0:	3c01      	subs	r4, #1
 80140c2:	e775      	b.n	8013fb0 <__kernel_rem_pio2f+0x1e8>
 80140c4:	080153ec 	.word	0x080153ec
 80140c8:	080153c0 	.word	0x080153c0
 80140cc:	43800000 	.word	0x43800000
 80140d0:	3b800000 	.word	0x3b800000
 80140d4:	00000000 	.word	0x00000000
 80140d8:	9b03      	ldr	r3, [sp, #12]
 80140da:	eeb0 0a48 	vmov.f32	s0, s16
 80140de:	1a98      	subs	r0, r3, r2
 80140e0:	f000 fbb2 	bl	8014848 <scalbnf>
 80140e4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80140cc <__kernel_rem_pio2f+0x304>
 80140e8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80140ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140f0:	db19      	blt.n	8014126 <__kernel_rem_pio2f+0x35e>
 80140f2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80140d0 <__kernel_rem_pio2f+0x308>
 80140f6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80140fa:	aa08      	add	r2, sp, #32
 80140fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014100:	1c74      	adds	r4, r6, #1
 8014102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014106:	3508      	adds	r5, #8
 8014108:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801410c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014110:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014114:	ee10 3a10 	vmov	r3, s0
 8014118:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801411c:	ee17 3a90 	vmov	r3, s15
 8014120:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014124:	e74b      	b.n	8013fbe <__kernel_rem_pio2f+0x1f6>
 8014126:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801412a:	aa08      	add	r2, sp, #32
 801412c:	ee10 3a10 	vmov	r3, s0
 8014130:	4634      	mov	r4, r6
 8014132:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8014136:	e742      	b.n	8013fbe <__kernel_rem_pio2f+0x1f6>
 8014138:	a808      	add	r0, sp, #32
 801413a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801413e:	9001      	str	r0, [sp, #4]
 8014140:	ee07 0a90 	vmov	s15, r0
 8014144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014148:	3a01      	subs	r2, #1
 801414a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801414e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014152:	ed61 7a01 	vstmdb	r1!, {s15}
 8014156:	e73e      	b.n	8013fd6 <__kernel_rem_pio2f+0x20e>
 8014158:	ecfc 6a01 	vldmia	ip!, {s13}
 801415c:	ecb6 7a01 	vldmia	r6!, {s14}
 8014160:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014164:	3001      	adds	r0, #1
 8014166:	4550      	cmp	r0, sl
 8014168:	dc01      	bgt.n	801416e <__kernel_rem_pio2f+0x3a6>
 801416a:	4288      	cmp	r0, r1
 801416c:	ddf4      	ble.n	8014158 <__kernel_rem_pio2f+0x390>
 801416e:	a858      	add	r0, sp, #352	; 0x160
 8014170:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014174:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8014178:	3a01      	subs	r2, #1
 801417a:	e730      	b.n	8013fde <__kernel_rem_pio2f+0x216>
 801417c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 801417e:	2a02      	cmp	r2, #2
 8014180:	dc09      	bgt.n	8014196 <__kernel_rem_pio2f+0x3ce>
 8014182:	2a00      	cmp	r2, #0
 8014184:	dc2a      	bgt.n	80141dc <__kernel_rem_pio2f+0x414>
 8014186:	d043      	beq.n	8014210 <__kernel_rem_pio2f+0x448>
 8014188:	f009 0007 	and.w	r0, r9, #7
 801418c:	b059      	add	sp, #356	; 0x164
 801418e:	ecbd 8b04 	vpop	{d8-d9}
 8014192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014196:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8014198:	2b03      	cmp	r3, #3
 801419a:	d1f5      	bne.n	8014188 <__kernel_rem_pio2f+0x3c0>
 801419c:	ab30      	add	r3, sp, #192	; 0xc0
 801419e:	442b      	add	r3, r5
 80141a0:	461a      	mov	r2, r3
 80141a2:	4619      	mov	r1, r3
 80141a4:	4620      	mov	r0, r4
 80141a6:	2800      	cmp	r0, #0
 80141a8:	f1a1 0104 	sub.w	r1, r1, #4
 80141ac:	dc51      	bgt.n	8014252 <__kernel_rem_pio2f+0x48a>
 80141ae:	4621      	mov	r1, r4
 80141b0:	2901      	cmp	r1, #1
 80141b2:	f1a2 0204 	sub.w	r2, r2, #4
 80141b6:	dc5c      	bgt.n	8014272 <__kernel_rem_pio2f+0x4aa>
 80141b8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80140d4 <__kernel_rem_pio2f+0x30c>
 80141bc:	3304      	adds	r3, #4
 80141be:	2c01      	cmp	r4, #1
 80141c0:	dc67      	bgt.n	8014292 <__kernel_rem_pio2f+0x4ca>
 80141c2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80141c6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80141ca:	2f00      	cmp	r7, #0
 80141cc:	d167      	bne.n	801429e <__kernel_rem_pio2f+0x4d6>
 80141ce:	edc8 6a00 	vstr	s13, [r8]
 80141d2:	ed88 7a01 	vstr	s14, [r8, #4]
 80141d6:	edc8 7a02 	vstr	s15, [r8, #8]
 80141da:	e7d5      	b.n	8014188 <__kernel_rem_pio2f+0x3c0>
 80141dc:	aa30      	add	r2, sp, #192	; 0xc0
 80141de:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80140d4 <__kernel_rem_pio2f+0x30c>
 80141e2:	4413      	add	r3, r2
 80141e4:	4622      	mov	r2, r4
 80141e6:	2a00      	cmp	r2, #0
 80141e8:	da24      	bge.n	8014234 <__kernel_rem_pio2f+0x46c>
 80141ea:	b34f      	cbz	r7, 8014240 <__kernel_rem_pio2f+0x478>
 80141ec:	eef1 7a47 	vneg.f32	s15, s14
 80141f0:	edc8 7a00 	vstr	s15, [r8]
 80141f4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80141f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80141fc:	aa31      	add	r2, sp, #196	; 0xc4
 80141fe:	2301      	movs	r3, #1
 8014200:	429c      	cmp	r4, r3
 8014202:	da20      	bge.n	8014246 <__kernel_rem_pio2f+0x47e>
 8014204:	b10f      	cbz	r7, 801420a <__kernel_rem_pio2f+0x442>
 8014206:	eef1 7a67 	vneg.f32	s15, s15
 801420a:	edc8 7a01 	vstr	s15, [r8, #4]
 801420e:	e7bb      	b.n	8014188 <__kernel_rem_pio2f+0x3c0>
 8014210:	aa30      	add	r2, sp, #192	; 0xc0
 8014212:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80140d4 <__kernel_rem_pio2f+0x30c>
 8014216:	4413      	add	r3, r2
 8014218:	2c00      	cmp	r4, #0
 801421a:	da05      	bge.n	8014228 <__kernel_rem_pio2f+0x460>
 801421c:	b10f      	cbz	r7, 8014222 <__kernel_rem_pio2f+0x45a>
 801421e:	eef1 7a67 	vneg.f32	s15, s15
 8014222:	edc8 7a00 	vstr	s15, [r8]
 8014226:	e7af      	b.n	8014188 <__kernel_rem_pio2f+0x3c0>
 8014228:	ed33 7a01 	vldmdb	r3!, {s14}
 801422c:	3c01      	subs	r4, #1
 801422e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014232:	e7f1      	b.n	8014218 <__kernel_rem_pio2f+0x450>
 8014234:	ed73 7a01 	vldmdb	r3!, {s15}
 8014238:	3a01      	subs	r2, #1
 801423a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801423e:	e7d2      	b.n	80141e6 <__kernel_rem_pio2f+0x41e>
 8014240:	eef0 7a47 	vmov.f32	s15, s14
 8014244:	e7d4      	b.n	80141f0 <__kernel_rem_pio2f+0x428>
 8014246:	ecb2 7a01 	vldmia	r2!, {s14}
 801424a:	3301      	adds	r3, #1
 801424c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014250:	e7d6      	b.n	8014200 <__kernel_rem_pio2f+0x438>
 8014252:	edd1 7a00 	vldr	s15, [r1]
 8014256:	edd1 6a01 	vldr	s13, [r1, #4]
 801425a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801425e:	3801      	subs	r0, #1
 8014260:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014264:	ed81 7a00 	vstr	s14, [r1]
 8014268:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801426c:	edc1 7a01 	vstr	s15, [r1, #4]
 8014270:	e799      	b.n	80141a6 <__kernel_rem_pio2f+0x3de>
 8014272:	edd2 7a00 	vldr	s15, [r2]
 8014276:	edd2 6a01 	vldr	s13, [r2, #4]
 801427a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801427e:	3901      	subs	r1, #1
 8014280:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014284:	ed82 7a00 	vstr	s14, [r2]
 8014288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801428c:	edc2 7a01 	vstr	s15, [r2, #4]
 8014290:	e78e      	b.n	80141b0 <__kernel_rem_pio2f+0x3e8>
 8014292:	ed33 7a01 	vldmdb	r3!, {s14}
 8014296:	3c01      	subs	r4, #1
 8014298:	ee77 7a87 	vadd.f32	s15, s15, s14
 801429c:	e78f      	b.n	80141be <__kernel_rem_pio2f+0x3f6>
 801429e:	eef1 6a66 	vneg.f32	s13, s13
 80142a2:	eeb1 7a47 	vneg.f32	s14, s14
 80142a6:	edc8 6a00 	vstr	s13, [r8]
 80142aa:	ed88 7a01 	vstr	s14, [r8, #4]
 80142ae:	eef1 7a67 	vneg.f32	s15, s15
 80142b2:	e790      	b.n	80141d6 <__kernel_rem_pio2f+0x40e>

080142b4 <__kernel_tanf>:
 80142b4:	b508      	push	{r3, lr}
 80142b6:	ee10 3a10 	vmov	r3, s0
 80142ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80142be:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 80142c2:	eef0 7a40 	vmov.f32	s15, s0
 80142c6:	da17      	bge.n	80142f8 <__kernel_tanf+0x44>
 80142c8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80142cc:	ee17 1a10 	vmov	r1, s14
 80142d0:	bb41      	cbnz	r1, 8014324 <__kernel_tanf+0x70>
 80142d2:	1c43      	adds	r3, r0, #1
 80142d4:	4313      	orrs	r3, r2
 80142d6:	d108      	bne.n	80142ea <__kernel_tanf+0x36>
 80142d8:	f000 fa6c 	bl	80147b4 <fabsf>
 80142dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80142e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80142e4:	eeb0 0a67 	vmov.f32	s0, s15
 80142e8:	bd08      	pop	{r3, pc}
 80142ea:	2801      	cmp	r0, #1
 80142ec:	d0fa      	beq.n	80142e4 <__kernel_tanf+0x30>
 80142ee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80142f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80142f6:	e7f5      	b.n	80142e4 <__kernel_tanf+0x30>
 80142f8:	494c      	ldr	r1, [pc, #304]	; (801442c <__kernel_tanf+0x178>)
 80142fa:	428a      	cmp	r2, r1
 80142fc:	db12      	blt.n	8014324 <__kernel_tanf+0x70>
 80142fe:	2b00      	cmp	r3, #0
 8014300:	bfb8      	it	lt
 8014302:	eef1 7a40 	vneglt.f32	s15, s0
 8014306:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8014430 <__kernel_tanf+0x17c>
 801430a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801430e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8014434 <__kernel_tanf+0x180>
 8014312:	bfb8      	it	lt
 8014314:	eef1 0a60 	vneglt.f32	s1, s1
 8014318:	ee70 0a60 	vsub.f32	s1, s0, s1
 801431c:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8014320:	eddf 0a45 	vldr	s1, [pc, #276]	; 8014438 <__kernel_tanf+0x184>
 8014324:	eddf 5a45 	vldr	s11, [pc, #276]	; 801443c <__kernel_tanf+0x188>
 8014328:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8014440 <__kernel_tanf+0x18c>
 801432c:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8014444 <__kernel_tanf+0x190>
 8014330:	493e      	ldr	r1, [pc, #248]	; (801442c <__kernel_tanf+0x178>)
 8014332:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8014336:	428a      	cmp	r2, r1
 8014338:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801433c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8014340:	eddf 5a41 	vldr	s11, [pc, #260]	; 8014448 <__kernel_tanf+0x194>
 8014344:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014348:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801444c <__kernel_tanf+0x198>
 801434c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014350:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8014450 <__kernel_tanf+0x19c>
 8014354:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014358:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8014454 <__kernel_tanf+0x1a0>
 801435c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014360:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8014458 <__kernel_tanf+0x1a4>
 8014364:	eee7 5a05 	vfma.f32	s11, s14, s10
 8014368:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801445c <__kernel_tanf+0x1a8>
 801436c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8014370:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8014460 <__kernel_tanf+0x1ac>
 8014374:	eee5 5a07 	vfma.f32	s11, s10, s14
 8014378:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8014464 <__kernel_tanf+0x1b0>
 801437c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8014380:	eddf 5a39 	vldr	s11, [pc, #228]	; 8014468 <__kernel_tanf+0x1b4>
 8014384:	eee5 5a07 	vfma.f32	s11, s10, s14
 8014388:	eeb0 7a46 	vmov.f32	s14, s12
 801438c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014390:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8014394:	eeb0 6a60 	vmov.f32	s12, s1
 8014398:	eea7 6a05 	vfma.f32	s12, s14, s10
 801439c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801446c <__kernel_tanf+0x1b8>
 80143a0:	eee6 0a26 	vfma.f32	s1, s12, s13
 80143a4:	eee5 0a07 	vfma.f32	s1, s10, s14
 80143a8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80143ac:	db1d      	blt.n	80143ea <__kernel_tanf+0x136>
 80143ae:	ee06 0a90 	vmov	s13, r0
 80143b2:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 80143b6:	ee27 6a07 	vmul.f32	s12, s14, s14
 80143ba:	ee37 7a00 	vadd.f32	s14, s14, s0
 80143be:	179b      	asrs	r3, r3, #30
 80143c0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80143c4:	f003 0302 	and.w	r3, r3, #2
 80143c8:	f1c3 0301 	rsb	r3, r3, #1
 80143cc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80143d0:	ee76 0ae0 	vsub.f32	s1, s13, s1
 80143d4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80143d8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80143dc:	ee07 3a90 	vmov	s15, r3
 80143e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143e4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80143e8:	e77c      	b.n	80142e4 <__kernel_tanf+0x30>
 80143ea:	2801      	cmp	r0, #1
 80143ec:	d01b      	beq.n	8014426 <__kernel_tanf+0x172>
 80143ee:	4b20      	ldr	r3, [pc, #128]	; (8014470 <__kernel_tanf+0x1bc>)
 80143f0:	ee17 2a10 	vmov	r2, s14
 80143f4:	401a      	ands	r2, r3
 80143f6:	ee06 2a10 	vmov	s12, r2
 80143fa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80143fe:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014402:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8014406:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801440a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801440e:	ee16 2a90 	vmov	r2, s13
 8014412:	4013      	ands	r3, r2
 8014414:	ee07 3a90 	vmov	s15, r3
 8014418:	eea6 7a27 	vfma.f32	s14, s12, s15
 801441c:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8014420:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014424:	e75e      	b.n	80142e4 <__kernel_tanf+0x30>
 8014426:	eef0 7a47 	vmov.f32	s15, s14
 801442a:	e75b      	b.n	80142e4 <__kernel_tanf+0x30>
 801442c:	3f2ca140 	.word	0x3f2ca140
 8014430:	3f490fda 	.word	0x3f490fda
 8014434:	33222168 	.word	0x33222168
 8014438:	00000000 	.word	0x00000000
 801443c:	b79bae5f 	.word	0xb79bae5f
 8014440:	38a3f445 	.word	0x38a3f445
 8014444:	37d95384 	.word	0x37d95384
 8014448:	3a1a26c8 	.word	0x3a1a26c8
 801444c:	3b6b6916 	.word	0x3b6b6916
 8014450:	3cb327a4 	.word	0x3cb327a4
 8014454:	3e088889 	.word	0x3e088889
 8014458:	3895c07a 	.word	0x3895c07a
 801445c:	398137b9 	.word	0x398137b9
 8014460:	3abede48 	.word	0x3abede48
 8014464:	3c11371f 	.word	0x3c11371f
 8014468:	3d5d0dd1 	.word	0x3d5d0dd1
 801446c:	3eaaaaab 	.word	0x3eaaaaab
 8014470:	fffff000 	.word	0xfffff000

08014474 <with_errno>:
 8014474:	b570      	push	{r4, r5, r6, lr}
 8014476:	4604      	mov	r4, r0
 8014478:	460d      	mov	r5, r1
 801447a:	4616      	mov	r6, r2
 801447c:	f000 fa62 	bl	8014944 <__errno>
 8014480:	4629      	mov	r1, r5
 8014482:	6006      	str	r6, [r0, #0]
 8014484:	4620      	mov	r0, r4
 8014486:	bd70      	pop	{r4, r5, r6, pc}

08014488 <xflow>:
 8014488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801448a:	4614      	mov	r4, r2
 801448c:	461d      	mov	r5, r3
 801448e:	b108      	cbz	r0, 8014494 <xflow+0xc>
 8014490:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014494:	e9cd 2300 	strd	r2, r3, [sp]
 8014498:	e9dd 2300 	ldrd	r2, r3, [sp]
 801449c:	4620      	mov	r0, r4
 801449e:	4629      	mov	r1, r5
 80144a0:	f7ec f85a 	bl	8000558 <__aeabi_dmul>
 80144a4:	2222      	movs	r2, #34	; 0x22
 80144a6:	b003      	add	sp, #12
 80144a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80144ac:	f7ff bfe2 	b.w	8014474 <with_errno>

080144b0 <__math_uflow>:
 80144b0:	b508      	push	{r3, lr}
 80144b2:	2200      	movs	r2, #0
 80144b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80144b8:	f7ff ffe6 	bl	8014488 <xflow>
 80144bc:	ec41 0b10 	vmov	d0, r0, r1
 80144c0:	bd08      	pop	{r3, pc}

080144c2 <__math_oflow>:
 80144c2:	b508      	push	{r3, lr}
 80144c4:	2200      	movs	r2, #0
 80144c6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80144ca:	f7ff ffdd 	bl	8014488 <xflow>
 80144ce:	ec41 0b10 	vmov	d0, r0, r1
 80144d2:	bd08      	pop	{r3, pc}

080144d4 <fabs>:
 80144d4:	ec51 0b10 	vmov	r0, r1, d0
 80144d8:	ee10 2a10 	vmov	r2, s0
 80144dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80144e0:	ec43 2b10 	vmov	d0, r2, r3
 80144e4:	4770      	bx	lr

080144e6 <finite>:
 80144e6:	b082      	sub	sp, #8
 80144e8:	ed8d 0b00 	vstr	d0, [sp]
 80144ec:	9801      	ldr	r0, [sp, #4]
 80144ee:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80144f2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80144f6:	0fc0      	lsrs	r0, r0, #31
 80144f8:	b002      	add	sp, #8
 80144fa:	4770      	bx	lr
 80144fc:	0000      	movs	r0, r0
	...

08014500 <scalbn>:
 8014500:	b570      	push	{r4, r5, r6, lr}
 8014502:	ec55 4b10 	vmov	r4, r5, d0
 8014506:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801450a:	4606      	mov	r6, r0
 801450c:	462b      	mov	r3, r5
 801450e:	b99a      	cbnz	r2, 8014538 <scalbn+0x38>
 8014510:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014514:	4323      	orrs	r3, r4
 8014516:	d036      	beq.n	8014586 <scalbn+0x86>
 8014518:	4b39      	ldr	r3, [pc, #228]	; (8014600 <scalbn+0x100>)
 801451a:	4629      	mov	r1, r5
 801451c:	ee10 0a10 	vmov	r0, s0
 8014520:	2200      	movs	r2, #0
 8014522:	f7ec f819 	bl	8000558 <__aeabi_dmul>
 8014526:	4b37      	ldr	r3, [pc, #220]	; (8014604 <scalbn+0x104>)
 8014528:	429e      	cmp	r6, r3
 801452a:	4604      	mov	r4, r0
 801452c:	460d      	mov	r5, r1
 801452e:	da10      	bge.n	8014552 <scalbn+0x52>
 8014530:	a32b      	add	r3, pc, #172	; (adr r3, 80145e0 <scalbn+0xe0>)
 8014532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014536:	e03a      	b.n	80145ae <scalbn+0xae>
 8014538:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801453c:	428a      	cmp	r2, r1
 801453e:	d10c      	bne.n	801455a <scalbn+0x5a>
 8014540:	ee10 2a10 	vmov	r2, s0
 8014544:	4620      	mov	r0, r4
 8014546:	4629      	mov	r1, r5
 8014548:	f7eb fe50 	bl	80001ec <__adddf3>
 801454c:	4604      	mov	r4, r0
 801454e:	460d      	mov	r5, r1
 8014550:	e019      	b.n	8014586 <scalbn+0x86>
 8014552:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014556:	460b      	mov	r3, r1
 8014558:	3a36      	subs	r2, #54	; 0x36
 801455a:	4432      	add	r2, r6
 801455c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014560:	428a      	cmp	r2, r1
 8014562:	dd08      	ble.n	8014576 <scalbn+0x76>
 8014564:	2d00      	cmp	r5, #0
 8014566:	a120      	add	r1, pc, #128	; (adr r1, 80145e8 <scalbn+0xe8>)
 8014568:	e9d1 0100 	ldrd	r0, r1, [r1]
 801456c:	da1c      	bge.n	80145a8 <scalbn+0xa8>
 801456e:	a120      	add	r1, pc, #128	; (adr r1, 80145f0 <scalbn+0xf0>)
 8014570:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014574:	e018      	b.n	80145a8 <scalbn+0xa8>
 8014576:	2a00      	cmp	r2, #0
 8014578:	dd08      	ble.n	801458c <scalbn+0x8c>
 801457a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801457e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014582:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014586:	ec45 4b10 	vmov	d0, r4, r5
 801458a:	bd70      	pop	{r4, r5, r6, pc}
 801458c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014590:	da19      	bge.n	80145c6 <scalbn+0xc6>
 8014592:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014596:	429e      	cmp	r6, r3
 8014598:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801459c:	dd0a      	ble.n	80145b4 <scalbn+0xb4>
 801459e:	a112      	add	r1, pc, #72	; (adr r1, 80145e8 <scalbn+0xe8>)
 80145a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d1e2      	bne.n	801456e <scalbn+0x6e>
 80145a8:	a30f      	add	r3, pc, #60	; (adr r3, 80145e8 <scalbn+0xe8>)
 80145aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ae:	f7eb ffd3 	bl	8000558 <__aeabi_dmul>
 80145b2:	e7cb      	b.n	801454c <scalbn+0x4c>
 80145b4:	a10a      	add	r1, pc, #40	; (adr r1, 80145e0 <scalbn+0xe0>)
 80145b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d0b8      	beq.n	8014530 <scalbn+0x30>
 80145be:	a10e      	add	r1, pc, #56	; (adr r1, 80145f8 <scalbn+0xf8>)
 80145c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80145c4:	e7b4      	b.n	8014530 <scalbn+0x30>
 80145c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80145ca:	3236      	adds	r2, #54	; 0x36
 80145cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80145d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80145d4:	4620      	mov	r0, r4
 80145d6:	4b0c      	ldr	r3, [pc, #48]	; (8014608 <scalbn+0x108>)
 80145d8:	2200      	movs	r2, #0
 80145da:	e7e8      	b.n	80145ae <scalbn+0xae>
 80145dc:	f3af 8000 	nop.w
 80145e0:	c2f8f359 	.word	0xc2f8f359
 80145e4:	01a56e1f 	.word	0x01a56e1f
 80145e8:	8800759c 	.word	0x8800759c
 80145ec:	7e37e43c 	.word	0x7e37e43c
 80145f0:	8800759c 	.word	0x8800759c
 80145f4:	fe37e43c 	.word	0xfe37e43c
 80145f8:	c2f8f359 	.word	0xc2f8f359
 80145fc:	81a56e1f 	.word	0x81a56e1f
 8014600:	43500000 	.word	0x43500000
 8014604:	ffff3cb0 	.word	0xffff3cb0
 8014608:	3c900000 	.word	0x3c900000

0801460c <atanf>:
 801460c:	b538      	push	{r3, r4, r5, lr}
 801460e:	ee10 5a10 	vmov	r5, s0
 8014612:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014616:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801461a:	eef0 7a40 	vmov.f32	s15, s0
 801461e:	db10      	blt.n	8014642 <atanf+0x36>
 8014620:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014624:	dd04      	ble.n	8014630 <atanf+0x24>
 8014626:	ee70 7a00 	vadd.f32	s15, s0, s0
 801462a:	eeb0 0a67 	vmov.f32	s0, s15
 801462e:	bd38      	pop	{r3, r4, r5, pc}
 8014630:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8014768 <atanf+0x15c>
 8014634:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801476c <atanf+0x160>
 8014638:	2d00      	cmp	r5, #0
 801463a:	bfd8      	it	le
 801463c:	eef0 7a40 	vmovle.f32	s15, s0
 8014640:	e7f3      	b.n	801462a <atanf+0x1e>
 8014642:	4b4b      	ldr	r3, [pc, #300]	; (8014770 <atanf+0x164>)
 8014644:	429c      	cmp	r4, r3
 8014646:	dc10      	bgt.n	801466a <atanf+0x5e>
 8014648:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801464c:	da0a      	bge.n	8014664 <atanf+0x58>
 801464e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8014774 <atanf+0x168>
 8014652:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801465a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801465e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014662:	dce2      	bgt.n	801462a <atanf+0x1e>
 8014664:	f04f 33ff 	mov.w	r3, #4294967295
 8014668:	e013      	b.n	8014692 <atanf+0x86>
 801466a:	f000 f8a3 	bl	80147b4 <fabsf>
 801466e:	4b42      	ldr	r3, [pc, #264]	; (8014778 <atanf+0x16c>)
 8014670:	429c      	cmp	r4, r3
 8014672:	dc4f      	bgt.n	8014714 <atanf+0x108>
 8014674:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8014678:	429c      	cmp	r4, r3
 801467a:	dc41      	bgt.n	8014700 <atanf+0xf4>
 801467c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014680:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014684:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014688:	2300      	movs	r3, #0
 801468a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801468e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014692:	1c5a      	adds	r2, r3, #1
 8014694:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8014698:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801477c <atanf+0x170>
 801469c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8014780 <atanf+0x174>
 80146a0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8014784 <atanf+0x178>
 80146a4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80146a8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80146ac:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8014788 <atanf+0x17c>
 80146b0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80146b4:	eddf 5a35 	vldr	s11, [pc, #212]	; 801478c <atanf+0x180>
 80146b8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80146bc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8014790 <atanf+0x184>
 80146c0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80146c4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8014794 <atanf+0x188>
 80146c8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80146cc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8014798 <atanf+0x18c>
 80146d0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80146d4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801479c <atanf+0x190>
 80146d8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80146dc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80147a0 <atanf+0x194>
 80146e0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80146e4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80147a4 <atanf+0x198>
 80146e8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80146ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 80146f0:	eea5 7a86 	vfma.f32	s14, s11, s12
 80146f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80146f8:	d121      	bne.n	801473e <atanf+0x132>
 80146fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80146fe:	e794      	b.n	801462a <atanf+0x1e>
 8014700:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014704:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014708:	ee30 0a27 	vadd.f32	s0, s0, s15
 801470c:	2301      	movs	r3, #1
 801470e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014712:	e7be      	b.n	8014692 <atanf+0x86>
 8014714:	4b24      	ldr	r3, [pc, #144]	; (80147a8 <atanf+0x19c>)
 8014716:	429c      	cmp	r4, r3
 8014718:	dc0b      	bgt.n	8014732 <atanf+0x126>
 801471a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801471e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014722:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014726:	2302      	movs	r3, #2
 8014728:	ee70 6a67 	vsub.f32	s13, s0, s15
 801472c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014730:	e7af      	b.n	8014692 <atanf+0x86>
 8014732:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014736:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801473a:	2303      	movs	r3, #3
 801473c:	e7a9      	b.n	8014692 <atanf+0x86>
 801473e:	4a1b      	ldr	r2, [pc, #108]	; (80147ac <atanf+0x1a0>)
 8014740:	491b      	ldr	r1, [pc, #108]	; (80147b0 <atanf+0x1a4>)
 8014742:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014746:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801474a:	ed93 0a00 	vldr	s0, [r3]
 801474e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8014752:	ed92 0a00 	vldr	s0, [r2]
 8014756:	ee77 7a67 	vsub.f32	s15, s14, s15
 801475a:	2d00      	cmp	r5, #0
 801475c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014760:	bfb8      	it	lt
 8014762:	eef1 7a67 	vneglt.f32	s15, s15
 8014766:	e760      	b.n	801462a <atanf+0x1e>
 8014768:	3fc90fdb 	.word	0x3fc90fdb
 801476c:	bfc90fdb 	.word	0xbfc90fdb
 8014770:	3edfffff 	.word	0x3edfffff
 8014774:	7149f2ca 	.word	0x7149f2ca
 8014778:	3f97ffff 	.word	0x3f97ffff
 801477c:	3c8569d7 	.word	0x3c8569d7
 8014780:	3d4bda59 	.word	0x3d4bda59
 8014784:	bd6ef16b 	.word	0xbd6ef16b
 8014788:	3d886b35 	.word	0x3d886b35
 801478c:	3dba2e6e 	.word	0x3dba2e6e
 8014790:	3e124925 	.word	0x3e124925
 8014794:	3eaaaaab 	.word	0x3eaaaaab
 8014798:	bd15a221 	.word	0xbd15a221
 801479c:	bd9d8795 	.word	0xbd9d8795
 80147a0:	bde38e38 	.word	0xbde38e38
 80147a4:	be4ccccd 	.word	0xbe4ccccd
 80147a8:	401bffff 	.word	0x401bffff
 80147ac:	080153f8 	.word	0x080153f8
 80147b0:	08015408 	.word	0x08015408

080147b4 <fabsf>:
 80147b4:	ee10 3a10 	vmov	r3, s0
 80147b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80147bc:	ee00 3a10 	vmov	s0, r3
 80147c0:	4770      	bx	lr
	...

080147c4 <floorf>:
 80147c4:	ee10 3a10 	vmov	r3, s0
 80147c8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80147cc:	3a7f      	subs	r2, #127	; 0x7f
 80147ce:	2a16      	cmp	r2, #22
 80147d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80147d4:	dc2a      	bgt.n	801482c <floorf+0x68>
 80147d6:	2a00      	cmp	r2, #0
 80147d8:	da11      	bge.n	80147fe <floorf+0x3a>
 80147da:	eddf 7a18 	vldr	s15, [pc, #96]	; 801483c <floorf+0x78>
 80147de:	ee30 0a27 	vadd.f32	s0, s0, s15
 80147e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80147e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ea:	dd05      	ble.n	80147f8 <floorf+0x34>
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	da23      	bge.n	8014838 <floorf+0x74>
 80147f0:	4a13      	ldr	r2, [pc, #76]	; (8014840 <floorf+0x7c>)
 80147f2:	2900      	cmp	r1, #0
 80147f4:	bf18      	it	ne
 80147f6:	4613      	movne	r3, r2
 80147f8:	ee00 3a10 	vmov	s0, r3
 80147fc:	4770      	bx	lr
 80147fe:	4911      	ldr	r1, [pc, #68]	; (8014844 <floorf+0x80>)
 8014800:	4111      	asrs	r1, r2
 8014802:	420b      	tst	r3, r1
 8014804:	d0fa      	beq.n	80147fc <floorf+0x38>
 8014806:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801483c <floorf+0x78>
 801480a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801480e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014816:	ddef      	ble.n	80147f8 <floorf+0x34>
 8014818:	2b00      	cmp	r3, #0
 801481a:	bfbe      	ittt	lt
 801481c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8014820:	fa40 f202 	asrlt.w	r2, r0, r2
 8014824:	189b      	addlt	r3, r3, r2
 8014826:	ea23 0301 	bic.w	r3, r3, r1
 801482a:	e7e5      	b.n	80147f8 <floorf+0x34>
 801482c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014830:	d3e4      	bcc.n	80147fc <floorf+0x38>
 8014832:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014836:	4770      	bx	lr
 8014838:	2300      	movs	r3, #0
 801483a:	e7dd      	b.n	80147f8 <floorf+0x34>
 801483c:	7149f2ca 	.word	0x7149f2ca
 8014840:	bf800000 	.word	0xbf800000
 8014844:	007fffff 	.word	0x007fffff

08014848 <scalbnf>:
 8014848:	ee10 3a10 	vmov	r3, s0
 801484c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8014850:	d025      	beq.n	801489e <scalbnf+0x56>
 8014852:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8014856:	d302      	bcc.n	801485e <scalbnf+0x16>
 8014858:	ee30 0a00 	vadd.f32	s0, s0, s0
 801485c:	4770      	bx	lr
 801485e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8014862:	d122      	bne.n	80148aa <scalbnf+0x62>
 8014864:	4b2a      	ldr	r3, [pc, #168]	; (8014910 <scalbnf+0xc8>)
 8014866:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014914 <scalbnf+0xcc>
 801486a:	4298      	cmp	r0, r3
 801486c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014870:	db16      	blt.n	80148a0 <scalbnf+0x58>
 8014872:	ee10 3a10 	vmov	r3, s0
 8014876:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801487a:	3a19      	subs	r2, #25
 801487c:	4402      	add	r2, r0
 801487e:	2afe      	cmp	r2, #254	; 0xfe
 8014880:	dd15      	ble.n	80148ae <scalbnf+0x66>
 8014882:	ee10 3a10 	vmov	r3, s0
 8014886:	eddf 7a24 	vldr	s15, [pc, #144]	; 8014918 <scalbnf+0xd0>
 801488a:	eddf 6a24 	vldr	s13, [pc, #144]	; 801491c <scalbnf+0xd4>
 801488e:	2b00      	cmp	r3, #0
 8014890:	eeb0 7a67 	vmov.f32	s14, s15
 8014894:	bfb8      	it	lt
 8014896:	eef0 7a66 	vmovlt.f32	s15, s13
 801489a:	ee27 0a27 	vmul.f32	s0, s14, s15
 801489e:	4770      	bx	lr
 80148a0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014920 <scalbnf+0xd8>
 80148a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80148a8:	4770      	bx	lr
 80148aa:	0dd2      	lsrs	r2, r2, #23
 80148ac:	e7e6      	b.n	801487c <scalbnf+0x34>
 80148ae:	2a00      	cmp	r2, #0
 80148b0:	dd06      	ble.n	80148c0 <scalbnf+0x78>
 80148b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80148b6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80148ba:	ee00 3a10 	vmov	s0, r3
 80148be:	4770      	bx	lr
 80148c0:	f112 0f16 	cmn.w	r2, #22
 80148c4:	da1a      	bge.n	80148fc <scalbnf+0xb4>
 80148c6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80148ca:	4298      	cmp	r0, r3
 80148cc:	ee10 3a10 	vmov	r3, s0
 80148d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80148d4:	dd0a      	ble.n	80148ec <scalbnf+0xa4>
 80148d6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8014918 <scalbnf+0xd0>
 80148da:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801491c <scalbnf+0xd4>
 80148de:	eef0 7a40 	vmov.f32	s15, s0
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	bf18      	it	ne
 80148e6:	eeb0 0a47 	vmovne.f32	s0, s14
 80148ea:	e7db      	b.n	80148a4 <scalbnf+0x5c>
 80148ec:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8014920 <scalbnf+0xd8>
 80148f0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8014924 <scalbnf+0xdc>
 80148f4:	eef0 7a40 	vmov.f32	s15, s0
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	e7f3      	b.n	80148e4 <scalbnf+0x9c>
 80148fc:	3219      	adds	r2, #25
 80148fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014902:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014906:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014928 <scalbnf+0xe0>
 801490a:	ee07 3a10 	vmov	s14, r3
 801490e:	e7c4      	b.n	801489a <scalbnf+0x52>
 8014910:	ffff3cb0 	.word	0xffff3cb0
 8014914:	4c000000 	.word	0x4c000000
 8014918:	7149f2ca 	.word	0x7149f2ca
 801491c:	f149f2ca 	.word	0xf149f2ca
 8014920:	0da24260 	.word	0x0da24260
 8014924:	8da24260 	.word	0x8da24260
 8014928:	33000000 	.word	0x33000000

0801492c <abort>:
 801492c:	b508      	push	{r3, lr}
 801492e:	2006      	movs	r0, #6
 8014930:	f000 f97c 	bl	8014c2c <raise>
 8014934:	2001      	movs	r0, #1
 8014936:	f7ee fcb1 	bl	800329c <_exit>

0801493a <atoi>:
 801493a:	220a      	movs	r2, #10
 801493c:	2100      	movs	r1, #0
 801493e:	f000 ba23 	b.w	8014d88 <strtol>
	...

08014944 <__errno>:
 8014944:	4b01      	ldr	r3, [pc, #4]	; (801494c <__errno+0x8>)
 8014946:	6818      	ldr	r0, [r3, #0]
 8014948:	4770      	bx	lr
 801494a:	bf00      	nop
 801494c:	20000018 	.word	0x20000018

08014950 <__libc_init_array>:
 8014950:	b570      	push	{r4, r5, r6, lr}
 8014952:	4d0d      	ldr	r5, [pc, #52]	; (8014988 <__libc_init_array+0x38>)
 8014954:	4c0d      	ldr	r4, [pc, #52]	; (801498c <__libc_init_array+0x3c>)
 8014956:	1b64      	subs	r4, r4, r5
 8014958:	10a4      	asrs	r4, r4, #2
 801495a:	2600      	movs	r6, #0
 801495c:	42a6      	cmp	r6, r4
 801495e:	d109      	bne.n	8014974 <__libc_init_array+0x24>
 8014960:	4d0b      	ldr	r5, [pc, #44]	; (8014990 <__libc_init_array+0x40>)
 8014962:	4c0c      	ldr	r4, [pc, #48]	; (8014994 <__libc_init_array+0x44>)
 8014964:	f000 fa28 	bl	8014db8 <_init>
 8014968:	1b64      	subs	r4, r4, r5
 801496a:	10a4      	asrs	r4, r4, #2
 801496c:	2600      	movs	r6, #0
 801496e:	42a6      	cmp	r6, r4
 8014970:	d105      	bne.n	801497e <__libc_init_array+0x2e>
 8014972:	bd70      	pop	{r4, r5, r6, pc}
 8014974:	f855 3b04 	ldr.w	r3, [r5], #4
 8014978:	4798      	blx	r3
 801497a:	3601      	adds	r6, #1
 801497c:	e7ee      	b.n	801495c <__libc_init_array+0xc>
 801497e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014982:	4798      	blx	r3
 8014984:	3601      	adds	r6, #1
 8014986:	e7f2      	b.n	801496e <__libc_init_array+0x1e>
 8014988:	08015524 	.word	0x08015524
 801498c:	08015524 	.word	0x08015524
 8014990:	08015524 	.word	0x08015524
 8014994:	0801552c 	.word	0x0801552c

08014998 <malloc>:
 8014998:	4b02      	ldr	r3, [pc, #8]	; (80149a4 <malloc+0xc>)
 801499a:	4601      	mov	r1, r0
 801499c:	6818      	ldr	r0, [r3, #0]
 801499e:	f000 b899 	b.w	8014ad4 <_malloc_r>
 80149a2:	bf00      	nop
 80149a4:	20000018 	.word	0x20000018

080149a8 <free>:
 80149a8:	4b02      	ldr	r3, [pc, #8]	; (80149b4 <free+0xc>)
 80149aa:	4601      	mov	r1, r0
 80149ac:	6818      	ldr	r0, [r3, #0]
 80149ae:	f000 b825 	b.w	80149fc <_free_r>
 80149b2:	bf00      	nop
 80149b4:	20000018 	.word	0x20000018

080149b8 <memmove>:
 80149b8:	4288      	cmp	r0, r1
 80149ba:	b510      	push	{r4, lr}
 80149bc:	eb01 0402 	add.w	r4, r1, r2
 80149c0:	d902      	bls.n	80149c8 <memmove+0x10>
 80149c2:	4284      	cmp	r4, r0
 80149c4:	4623      	mov	r3, r4
 80149c6:	d807      	bhi.n	80149d8 <memmove+0x20>
 80149c8:	1e43      	subs	r3, r0, #1
 80149ca:	42a1      	cmp	r1, r4
 80149cc:	d008      	beq.n	80149e0 <memmove+0x28>
 80149ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80149d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80149d6:	e7f8      	b.n	80149ca <memmove+0x12>
 80149d8:	4402      	add	r2, r0
 80149da:	4601      	mov	r1, r0
 80149dc:	428a      	cmp	r2, r1
 80149de:	d100      	bne.n	80149e2 <memmove+0x2a>
 80149e0:	bd10      	pop	{r4, pc}
 80149e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80149e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80149ea:	e7f7      	b.n	80149dc <memmove+0x24>

080149ec <memset>:
 80149ec:	4402      	add	r2, r0
 80149ee:	4603      	mov	r3, r0
 80149f0:	4293      	cmp	r3, r2
 80149f2:	d100      	bne.n	80149f6 <memset+0xa>
 80149f4:	4770      	bx	lr
 80149f6:	f803 1b01 	strb.w	r1, [r3], #1
 80149fa:	e7f9      	b.n	80149f0 <memset+0x4>

080149fc <_free_r>:
 80149fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80149fe:	2900      	cmp	r1, #0
 8014a00:	d044      	beq.n	8014a8c <_free_r+0x90>
 8014a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a06:	9001      	str	r0, [sp, #4]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	f1a1 0404 	sub.w	r4, r1, #4
 8014a0e:	bfb8      	it	lt
 8014a10:	18e4      	addlt	r4, r4, r3
 8014a12:	f000 f9c3 	bl	8014d9c <__malloc_lock>
 8014a16:	4a1e      	ldr	r2, [pc, #120]	; (8014a90 <_free_r+0x94>)
 8014a18:	9801      	ldr	r0, [sp, #4]
 8014a1a:	6813      	ldr	r3, [r2, #0]
 8014a1c:	b933      	cbnz	r3, 8014a2c <_free_r+0x30>
 8014a1e:	6063      	str	r3, [r4, #4]
 8014a20:	6014      	str	r4, [r2, #0]
 8014a22:	b003      	add	sp, #12
 8014a24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014a28:	f000 b9be 	b.w	8014da8 <__malloc_unlock>
 8014a2c:	42a3      	cmp	r3, r4
 8014a2e:	d908      	bls.n	8014a42 <_free_r+0x46>
 8014a30:	6825      	ldr	r5, [r4, #0]
 8014a32:	1961      	adds	r1, r4, r5
 8014a34:	428b      	cmp	r3, r1
 8014a36:	bf01      	itttt	eq
 8014a38:	6819      	ldreq	r1, [r3, #0]
 8014a3a:	685b      	ldreq	r3, [r3, #4]
 8014a3c:	1949      	addeq	r1, r1, r5
 8014a3e:	6021      	streq	r1, [r4, #0]
 8014a40:	e7ed      	b.n	8014a1e <_free_r+0x22>
 8014a42:	461a      	mov	r2, r3
 8014a44:	685b      	ldr	r3, [r3, #4]
 8014a46:	b10b      	cbz	r3, 8014a4c <_free_r+0x50>
 8014a48:	42a3      	cmp	r3, r4
 8014a4a:	d9fa      	bls.n	8014a42 <_free_r+0x46>
 8014a4c:	6811      	ldr	r1, [r2, #0]
 8014a4e:	1855      	adds	r5, r2, r1
 8014a50:	42a5      	cmp	r5, r4
 8014a52:	d10b      	bne.n	8014a6c <_free_r+0x70>
 8014a54:	6824      	ldr	r4, [r4, #0]
 8014a56:	4421      	add	r1, r4
 8014a58:	1854      	adds	r4, r2, r1
 8014a5a:	42a3      	cmp	r3, r4
 8014a5c:	6011      	str	r1, [r2, #0]
 8014a5e:	d1e0      	bne.n	8014a22 <_free_r+0x26>
 8014a60:	681c      	ldr	r4, [r3, #0]
 8014a62:	685b      	ldr	r3, [r3, #4]
 8014a64:	6053      	str	r3, [r2, #4]
 8014a66:	4421      	add	r1, r4
 8014a68:	6011      	str	r1, [r2, #0]
 8014a6a:	e7da      	b.n	8014a22 <_free_r+0x26>
 8014a6c:	d902      	bls.n	8014a74 <_free_r+0x78>
 8014a6e:	230c      	movs	r3, #12
 8014a70:	6003      	str	r3, [r0, #0]
 8014a72:	e7d6      	b.n	8014a22 <_free_r+0x26>
 8014a74:	6825      	ldr	r5, [r4, #0]
 8014a76:	1961      	adds	r1, r4, r5
 8014a78:	428b      	cmp	r3, r1
 8014a7a:	bf04      	itt	eq
 8014a7c:	6819      	ldreq	r1, [r3, #0]
 8014a7e:	685b      	ldreq	r3, [r3, #4]
 8014a80:	6063      	str	r3, [r4, #4]
 8014a82:	bf04      	itt	eq
 8014a84:	1949      	addeq	r1, r1, r5
 8014a86:	6021      	streq	r1, [r4, #0]
 8014a88:	6054      	str	r4, [r2, #4]
 8014a8a:	e7ca      	b.n	8014a22 <_free_r+0x26>
 8014a8c:	b003      	add	sp, #12
 8014a8e:	bd30      	pop	{r4, r5, pc}
 8014a90:	20005110 	.word	0x20005110

08014a94 <sbrk_aligned>:
 8014a94:	b570      	push	{r4, r5, r6, lr}
 8014a96:	4e0e      	ldr	r6, [pc, #56]	; (8014ad0 <sbrk_aligned+0x3c>)
 8014a98:	460c      	mov	r4, r1
 8014a9a:	6831      	ldr	r1, [r6, #0]
 8014a9c:	4605      	mov	r5, r0
 8014a9e:	b911      	cbnz	r1, 8014aa6 <sbrk_aligned+0x12>
 8014aa0:	f000 f88c 	bl	8014bbc <_sbrk_r>
 8014aa4:	6030      	str	r0, [r6, #0]
 8014aa6:	4621      	mov	r1, r4
 8014aa8:	4628      	mov	r0, r5
 8014aaa:	f000 f887 	bl	8014bbc <_sbrk_r>
 8014aae:	1c43      	adds	r3, r0, #1
 8014ab0:	d00a      	beq.n	8014ac8 <sbrk_aligned+0x34>
 8014ab2:	1cc4      	adds	r4, r0, #3
 8014ab4:	f024 0403 	bic.w	r4, r4, #3
 8014ab8:	42a0      	cmp	r0, r4
 8014aba:	d007      	beq.n	8014acc <sbrk_aligned+0x38>
 8014abc:	1a21      	subs	r1, r4, r0
 8014abe:	4628      	mov	r0, r5
 8014ac0:	f000 f87c 	bl	8014bbc <_sbrk_r>
 8014ac4:	3001      	adds	r0, #1
 8014ac6:	d101      	bne.n	8014acc <sbrk_aligned+0x38>
 8014ac8:	f04f 34ff 	mov.w	r4, #4294967295
 8014acc:	4620      	mov	r0, r4
 8014ace:	bd70      	pop	{r4, r5, r6, pc}
 8014ad0:	20005114 	.word	0x20005114

08014ad4 <_malloc_r>:
 8014ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ad8:	1ccd      	adds	r5, r1, #3
 8014ada:	f025 0503 	bic.w	r5, r5, #3
 8014ade:	3508      	adds	r5, #8
 8014ae0:	2d0c      	cmp	r5, #12
 8014ae2:	bf38      	it	cc
 8014ae4:	250c      	movcc	r5, #12
 8014ae6:	2d00      	cmp	r5, #0
 8014ae8:	4607      	mov	r7, r0
 8014aea:	db01      	blt.n	8014af0 <_malloc_r+0x1c>
 8014aec:	42a9      	cmp	r1, r5
 8014aee:	d905      	bls.n	8014afc <_malloc_r+0x28>
 8014af0:	230c      	movs	r3, #12
 8014af2:	603b      	str	r3, [r7, #0]
 8014af4:	2600      	movs	r6, #0
 8014af6:	4630      	mov	r0, r6
 8014af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014afc:	4e2e      	ldr	r6, [pc, #184]	; (8014bb8 <_malloc_r+0xe4>)
 8014afe:	f000 f94d 	bl	8014d9c <__malloc_lock>
 8014b02:	6833      	ldr	r3, [r6, #0]
 8014b04:	461c      	mov	r4, r3
 8014b06:	bb34      	cbnz	r4, 8014b56 <_malloc_r+0x82>
 8014b08:	4629      	mov	r1, r5
 8014b0a:	4638      	mov	r0, r7
 8014b0c:	f7ff ffc2 	bl	8014a94 <sbrk_aligned>
 8014b10:	1c43      	adds	r3, r0, #1
 8014b12:	4604      	mov	r4, r0
 8014b14:	d14d      	bne.n	8014bb2 <_malloc_r+0xde>
 8014b16:	6834      	ldr	r4, [r6, #0]
 8014b18:	4626      	mov	r6, r4
 8014b1a:	2e00      	cmp	r6, #0
 8014b1c:	d140      	bne.n	8014ba0 <_malloc_r+0xcc>
 8014b1e:	6823      	ldr	r3, [r4, #0]
 8014b20:	4631      	mov	r1, r6
 8014b22:	4638      	mov	r0, r7
 8014b24:	eb04 0803 	add.w	r8, r4, r3
 8014b28:	f000 f848 	bl	8014bbc <_sbrk_r>
 8014b2c:	4580      	cmp	r8, r0
 8014b2e:	d13a      	bne.n	8014ba6 <_malloc_r+0xd2>
 8014b30:	6821      	ldr	r1, [r4, #0]
 8014b32:	3503      	adds	r5, #3
 8014b34:	1a6d      	subs	r5, r5, r1
 8014b36:	f025 0503 	bic.w	r5, r5, #3
 8014b3a:	3508      	adds	r5, #8
 8014b3c:	2d0c      	cmp	r5, #12
 8014b3e:	bf38      	it	cc
 8014b40:	250c      	movcc	r5, #12
 8014b42:	4629      	mov	r1, r5
 8014b44:	4638      	mov	r0, r7
 8014b46:	f7ff ffa5 	bl	8014a94 <sbrk_aligned>
 8014b4a:	3001      	adds	r0, #1
 8014b4c:	d02b      	beq.n	8014ba6 <_malloc_r+0xd2>
 8014b4e:	6823      	ldr	r3, [r4, #0]
 8014b50:	442b      	add	r3, r5
 8014b52:	6023      	str	r3, [r4, #0]
 8014b54:	e00e      	b.n	8014b74 <_malloc_r+0xa0>
 8014b56:	6822      	ldr	r2, [r4, #0]
 8014b58:	1b52      	subs	r2, r2, r5
 8014b5a:	d41e      	bmi.n	8014b9a <_malloc_r+0xc6>
 8014b5c:	2a0b      	cmp	r2, #11
 8014b5e:	d916      	bls.n	8014b8e <_malloc_r+0xba>
 8014b60:	1961      	adds	r1, r4, r5
 8014b62:	42a3      	cmp	r3, r4
 8014b64:	6025      	str	r5, [r4, #0]
 8014b66:	bf18      	it	ne
 8014b68:	6059      	strne	r1, [r3, #4]
 8014b6a:	6863      	ldr	r3, [r4, #4]
 8014b6c:	bf08      	it	eq
 8014b6e:	6031      	streq	r1, [r6, #0]
 8014b70:	5162      	str	r2, [r4, r5]
 8014b72:	604b      	str	r3, [r1, #4]
 8014b74:	4638      	mov	r0, r7
 8014b76:	f104 060b 	add.w	r6, r4, #11
 8014b7a:	f000 f915 	bl	8014da8 <__malloc_unlock>
 8014b7e:	f026 0607 	bic.w	r6, r6, #7
 8014b82:	1d23      	adds	r3, r4, #4
 8014b84:	1af2      	subs	r2, r6, r3
 8014b86:	d0b6      	beq.n	8014af6 <_malloc_r+0x22>
 8014b88:	1b9b      	subs	r3, r3, r6
 8014b8a:	50a3      	str	r3, [r4, r2]
 8014b8c:	e7b3      	b.n	8014af6 <_malloc_r+0x22>
 8014b8e:	6862      	ldr	r2, [r4, #4]
 8014b90:	42a3      	cmp	r3, r4
 8014b92:	bf0c      	ite	eq
 8014b94:	6032      	streq	r2, [r6, #0]
 8014b96:	605a      	strne	r2, [r3, #4]
 8014b98:	e7ec      	b.n	8014b74 <_malloc_r+0xa0>
 8014b9a:	4623      	mov	r3, r4
 8014b9c:	6864      	ldr	r4, [r4, #4]
 8014b9e:	e7b2      	b.n	8014b06 <_malloc_r+0x32>
 8014ba0:	4634      	mov	r4, r6
 8014ba2:	6876      	ldr	r6, [r6, #4]
 8014ba4:	e7b9      	b.n	8014b1a <_malloc_r+0x46>
 8014ba6:	230c      	movs	r3, #12
 8014ba8:	603b      	str	r3, [r7, #0]
 8014baa:	4638      	mov	r0, r7
 8014bac:	f000 f8fc 	bl	8014da8 <__malloc_unlock>
 8014bb0:	e7a1      	b.n	8014af6 <_malloc_r+0x22>
 8014bb2:	6025      	str	r5, [r4, #0]
 8014bb4:	e7de      	b.n	8014b74 <_malloc_r+0xa0>
 8014bb6:	bf00      	nop
 8014bb8:	20005110 	.word	0x20005110

08014bbc <_sbrk_r>:
 8014bbc:	b538      	push	{r3, r4, r5, lr}
 8014bbe:	4d06      	ldr	r5, [pc, #24]	; (8014bd8 <_sbrk_r+0x1c>)
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	4604      	mov	r4, r0
 8014bc4:	4608      	mov	r0, r1
 8014bc6:	602b      	str	r3, [r5, #0]
 8014bc8:	f7ee fb72 	bl	80032b0 <_sbrk>
 8014bcc:	1c43      	adds	r3, r0, #1
 8014bce:	d102      	bne.n	8014bd6 <_sbrk_r+0x1a>
 8014bd0:	682b      	ldr	r3, [r5, #0]
 8014bd2:	b103      	cbz	r3, 8014bd6 <_sbrk_r+0x1a>
 8014bd4:	6023      	str	r3, [r4, #0]
 8014bd6:	bd38      	pop	{r3, r4, r5, pc}
 8014bd8:	20005118 	.word	0x20005118

08014bdc <_raise_r>:
 8014bdc:	291f      	cmp	r1, #31
 8014bde:	b538      	push	{r3, r4, r5, lr}
 8014be0:	4604      	mov	r4, r0
 8014be2:	460d      	mov	r5, r1
 8014be4:	d904      	bls.n	8014bf0 <_raise_r+0x14>
 8014be6:	2316      	movs	r3, #22
 8014be8:	6003      	str	r3, [r0, #0]
 8014bea:	f04f 30ff 	mov.w	r0, #4294967295
 8014bee:	bd38      	pop	{r3, r4, r5, pc}
 8014bf0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014bf2:	b112      	cbz	r2, 8014bfa <_raise_r+0x1e>
 8014bf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014bf8:	b94b      	cbnz	r3, 8014c0e <_raise_r+0x32>
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	f000 f830 	bl	8014c60 <_getpid_r>
 8014c00:	462a      	mov	r2, r5
 8014c02:	4601      	mov	r1, r0
 8014c04:	4620      	mov	r0, r4
 8014c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c0a:	f000 b817 	b.w	8014c3c <_kill_r>
 8014c0e:	2b01      	cmp	r3, #1
 8014c10:	d00a      	beq.n	8014c28 <_raise_r+0x4c>
 8014c12:	1c59      	adds	r1, r3, #1
 8014c14:	d103      	bne.n	8014c1e <_raise_r+0x42>
 8014c16:	2316      	movs	r3, #22
 8014c18:	6003      	str	r3, [r0, #0]
 8014c1a:	2001      	movs	r0, #1
 8014c1c:	e7e7      	b.n	8014bee <_raise_r+0x12>
 8014c1e:	2400      	movs	r4, #0
 8014c20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014c24:	4628      	mov	r0, r5
 8014c26:	4798      	blx	r3
 8014c28:	2000      	movs	r0, #0
 8014c2a:	e7e0      	b.n	8014bee <_raise_r+0x12>

08014c2c <raise>:
 8014c2c:	4b02      	ldr	r3, [pc, #8]	; (8014c38 <raise+0xc>)
 8014c2e:	4601      	mov	r1, r0
 8014c30:	6818      	ldr	r0, [r3, #0]
 8014c32:	f7ff bfd3 	b.w	8014bdc <_raise_r>
 8014c36:	bf00      	nop
 8014c38:	20000018 	.word	0x20000018

08014c3c <_kill_r>:
 8014c3c:	b538      	push	{r3, r4, r5, lr}
 8014c3e:	4d07      	ldr	r5, [pc, #28]	; (8014c5c <_kill_r+0x20>)
 8014c40:	2300      	movs	r3, #0
 8014c42:	4604      	mov	r4, r0
 8014c44:	4608      	mov	r0, r1
 8014c46:	4611      	mov	r1, r2
 8014c48:	602b      	str	r3, [r5, #0]
 8014c4a:	f7ee fb17 	bl	800327c <_kill>
 8014c4e:	1c43      	adds	r3, r0, #1
 8014c50:	d102      	bne.n	8014c58 <_kill_r+0x1c>
 8014c52:	682b      	ldr	r3, [r5, #0]
 8014c54:	b103      	cbz	r3, 8014c58 <_kill_r+0x1c>
 8014c56:	6023      	str	r3, [r4, #0]
 8014c58:	bd38      	pop	{r3, r4, r5, pc}
 8014c5a:	bf00      	nop
 8014c5c:	20005118 	.word	0x20005118

08014c60 <_getpid_r>:
 8014c60:	f7ee bb04 	b.w	800326c <_getpid>

08014c64 <strcat>:
 8014c64:	b510      	push	{r4, lr}
 8014c66:	4602      	mov	r2, r0
 8014c68:	7814      	ldrb	r4, [r2, #0]
 8014c6a:	4613      	mov	r3, r2
 8014c6c:	3201      	adds	r2, #1
 8014c6e:	2c00      	cmp	r4, #0
 8014c70:	d1fa      	bne.n	8014c68 <strcat+0x4>
 8014c72:	3b01      	subs	r3, #1
 8014c74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014c78:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014c7c:	2a00      	cmp	r2, #0
 8014c7e:	d1f9      	bne.n	8014c74 <strcat+0x10>
 8014c80:	bd10      	pop	{r4, pc}
	...

08014c84 <_strtol_l.constprop.0>:
 8014c84:	2b01      	cmp	r3, #1
 8014c86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c8a:	d001      	beq.n	8014c90 <_strtol_l.constprop.0+0xc>
 8014c8c:	2b24      	cmp	r3, #36	; 0x24
 8014c8e:	d906      	bls.n	8014c9e <_strtol_l.constprop.0+0x1a>
 8014c90:	f7ff fe58 	bl	8014944 <__errno>
 8014c94:	2316      	movs	r3, #22
 8014c96:	6003      	str	r3, [r0, #0]
 8014c98:	2000      	movs	r0, #0
 8014c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c9e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014d84 <_strtol_l.constprop.0+0x100>
 8014ca2:	460d      	mov	r5, r1
 8014ca4:	462e      	mov	r6, r5
 8014ca6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014caa:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014cae:	f017 0708 	ands.w	r7, r7, #8
 8014cb2:	d1f7      	bne.n	8014ca4 <_strtol_l.constprop.0+0x20>
 8014cb4:	2c2d      	cmp	r4, #45	; 0x2d
 8014cb6:	d132      	bne.n	8014d1e <_strtol_l.constprop.0+0x9a>
 8014cb8:	782c      	ldrb	r4, [r5, #0]
 8014cba:	2701      	movs	r7, #1
 8014cbc:	1cb5      	adds	r5, r6, #2
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d05b      	beq.n	8014d7a <_strtol_l.constprop.0+0xf6>
 8014cc2:	2b10      	cmp	r3, #16
 8014cc4:	d109      	bne.n	8014cda <_strtol_l.constprop.0+0x56>
 8014cc6:	2c30      	cmp	r4, #48	; 0x30
 8014cc8:	d107      	bne.n	8014cda <_strtol_l.constprop.0+0x56>
 8014cca:	782c      	ldrb	r4, [r5, #0]
 8014ccc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014cd0:	2c58      	cmp	r4, #88	; 0x58
 8014cd2:	d14d      	bne.n	8014d70 <_strtol_l.constprop.0+0xec>
 8014cd4:	786c      	ldrb	r4, [r5, #1]
 8014cd6:	2310      	movs	r3, #16
 8014cd8:	3502      	adds	r5, #2
 8014cda:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014cde:	f108 38ff 	add.w	r8, r8, #4294967295
 8014ce2:	f04f 0c00 	mov.w	ip, #0
 8014ce6:	fbb8 f9f3 	udiv	r9, r8, r3
 8014cea:	4666      	mov	r6, ip
 8014cec:	fb03 8a19 	mls	sl, r3, r9, r8
 8014cf0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014cf4:	f1be 0f09 	cmp.w	lr, #9
 8014cf8:	d816      	bhi.n	8014d28 <_strtol_l.constprop.0+0xa4>
 8014cfa:	4674      	mov	r4, lr
 8014cfc:	42a3      	cmp	r3, r4
 8014cfe:	dd24      	ble.n	8014d4a <_strtol_l.constprop.0+0xc6>
 8014d00:	f1bc 0f00 	cmp.w	ip, #0
 8014d04:	db1e      	blt.n	8014d44 <_strtol_l.constprop.0+0xc0>
 8014d06:	45b1      	cmp	r9, r6
 8014d08:	d31c      	bcc.n	8014d44 <_strtol_l.constprop.0+0xc0>
 8014d0a:	d101      	bne.n	8014d10 <_strtol_l.constprop.0+0x8c>
 8014d0c:	45a2      	cmp	sl, r4
 8014d0e:	db19      	blt.n	8014d44 <_strtol_l.constprop.0+0xc0>
 8014d10:	fb06 4603 	mla	r6, r6, r3, r4
 8014d14:	f04f 0c01 	mov.w	ip, #1
 8014d18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014d1c:	e7e8      	b.n	8014cf0 <_strtol_l.constprop.0+0x6c>
 8014d1e:	2c2b      	cmp	r4, #43	; 0x2b
 8014d20:	bf04      	itt	eq
 8014d22:	782c      	ldrbeq	r4, [r5, #0]
 8014d24:	1cb5      	addeq	r5, r6, #2
 8014d26:	e7ca      	b.n	8014cbe <_strtol_l.constprop.0+0x3a>
 8014d28:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014d2c:	f1be 0f19 	cmp.w	lr, #25
 8014d30:	d801      	bhi.n	8014d36 <_strtol_l.constprop.0+0xb2>
 8014d32:	3c37      	subs	r4, #55	; 0x37
 8014d34:	e7e2      	b.n	8014cfc <_strtol_l.constprop.0+0x78>
 8014d36:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014d3a:	f1be 0f19 	cmp.w	lr, #25
 8014d3e:	d804      	bhi.n	8014d4a <_strtol_l.constprop.0+0xc6>
 8014d40:	3c57      	subs	r4, #87	; 0x57
 8014d42:	e7db      	b.n	8014cfc <_strtol_l.constprop.0+0x78>
 8014d44:	f04f 3cff 	mov.w	ip, #4294967295
 8014d48:	e7e6      	b.n	8014d18 <_strtol_l.constprop.0+0x94>
 8014d4a:	f1bc 0f00 	cmp.w	ip, #0
 8014d4e:	da05      	bge.n	8014d5c <_strtol_l.constprop.0+0xd8>
 8014d50:	2322      	movs	r3, #34	; 0x22
 8014d52:	6003      	str	r3, [r0, #0]
 8014d54:	4646      	mov	r6, r8
 8014d56:	b942      	cbnz	r2, 8014d6a <_strtol_l.constprop.0+0xe6>
 8014d58:	4630      	mov	r0, r6
 8014d5a:	e79e      	b.n	8014c9a <_strtol_l.constprop.0+0x16>
 8014d5c:	b107      	cbz	r7, 8014d60 <_strtol_l.constprop.0+0xdc>
 8014d5e:	4276      	negs	r6, r6
 8014d60:	2a00      	cmp	r2, #0
 8014d62:	d0f9      	beq.n	8014d58 <_strtol_l.constprop.0+0xd4>
 8014d64:	f1bc 0f00 	cmp.w	ip, #0
 8014d68:	d000      	beq.n	8014d6c <_strtol_l.constprop.0+0xe8>
 8014d6a:	1e69      	subs	r1, r5, #1
 8014d6c:	6011      	str	r1, [r2, #0]
 8014d6e:	e7f3      	b.n	8014d58 <_strtol_l.constprop.0+0xd4>
 8014d70:	2430      	movs	r4, #48	; 0x30
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d1b1      	bne.n	8014cda <_strtol_l.constprop.0+0x56>
 8014d76:	2308      	movs	r3, #8
 8014d78:	e7af      	b.n	8014cda <_strtol_l.constprop.0+0x56>
 8014d7a:	2c30      	cmp	r4, #48	; 0x30
 8014d7c:	d0a5      	beq.n	8014cca <_strtol_l.constprop.0+0x46>
 8014d7e:	230a      	movs	r3, #10
 8014d80:	e7ab      	b.n	8014cda <_strtol_l.constprop.0+0x56>
 8014d82:	bf00      	nop
 8014d84:	08015419 	.word	0x08015419

08014d88 <strtol>:
 8014d88:	4613      	mov	r3, r2
 8014d8a:	460a      	mov	r2, r1
 8014d8c:	4601      	mov	r1, r0
 8014d8e:	4802      	ldr	r0, [pc, #8]	; (8014d98 <strtol+0x10>)
 8014d90:	6800      	ldr	r0, [r0, #0]
 8014d92:	f7ff bf77 	b.w	8014c84 <_strtol_l.constprop.0>
 8014d96:	bf00      	nop
 8014d98:	20000018 	.word	0x20000018

08014d9c <__malloc_lock>:
 8014d9c:	4801      	ldr	r0, [pc, #4]	; (8014da4 <__malloc_lock+0x8>)
 8014d9e:	f000 b809 	b.w	8014db4 <__retarget_lock_acquire_recursive>
 8014da2:	bf00      	nop
 8014da4:	2000511c 	.word	0x2000511c

08014da8 <__malloc_unlock>:
 8014da8:	4801      	ldr	r0, [pc, #4]	; (8014db0 <__malloc_unlock+0x8>)
 8014daa:	f000 b804 	b.w	8014db6 <__retarget_lock_release_recursive>
 8014dae:	bf00      	nop
 8014db0:	2000511c 	.word	0x2000511c

08014db4 <__retarget_lock_acquire_recursive>:
 8014db4:	4770      	bx	lr

08014db6 <__retarget_lock_release_recursive>:
 8014db6:	4770      	bx	lr

08014db8 <_init>:
 8014db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dba:	bf00      	nop
 8014dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014dbe:	bc08      	pop	{r3}
 8014dc0:	469e      	mov	lr, r3
 8014dc2:	4770      	bx	lr

08014dc4 <_fini>:
 8014dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dc6:	bf00      	nop
 8014dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014dca:	bc08      	pop	{r3}
 8014dcc:	469e      	mov	lr, r3
 8014dce:	4770      	bx	lr
