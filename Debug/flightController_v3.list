
flightController_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ce24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001479c  0801cfb8  0801cfb8  0002cfb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08031754  08031754  0005031c  2**0
                  CONTENTS
  4 .ARM          00000008  08031754  08031754  00041754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803175c  0803175c  0005031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803175c  0803175c  0004175c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08031764  08031764  00041764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000031c  20000000  08031768  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0005031c  2**0
                  CONTENTS
 10 .bss          0000decc  2000031c  2000031c  0005031c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000e1e8  2000e1e8  0005031c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0005031c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000b9c8b  00000000  00000000  0005034c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000dec0  00000000  00000000  00109fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003290  00000000  00000000  00117e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002f40  00000000  00000000  0011b128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000332f4  00000000  00000000  0011e068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003f726  00000000  00000000  0015135c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001046c1  00000000  00000000  00190a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c0  00000000  00000000  00295143  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00010504  00000000  00000000  00295204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000070f  00000000  00000000  002a5708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000031c 	.word	0x2000031c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801cf9c 	.word	0x0801cf9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000320 	.word	0x20000320
 80001cc:	0801cf9c 	.word	0x0801cf9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_ZN30FlightControllorImplementation18getRollPidInstanceEv>:
{
	return this->nvmInstance;
}

PID_Control& FlightControllorImplementation::getRollPidInstance()
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	return this->roll_pid;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f603 3374 	addw	r3, r3, #2932	; 0xb74
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <_ZN30FlightControllorImplementation19getPitchPidInstanceEv>:

PID_Control& FlightControllorImplementation::getPitchPidInstance()
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
	return this->pitch_pid;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <_ZN30FlightControllorImplementation17getYawPidInstanceEv>:

PID_Control& FlightControllorImplementation::getYawPidInstance()
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	return this->yaw_pid;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f603 33cc 	addw	r3, r3, #3020	; 0xbcc
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <_ZN30FlightControllorImplementation23getXPositionPidInstanceEv>:

PID_Control& FlightControllorImplementation::getXPositionPidInstance()
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
	return this->xPosition_pid;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <_ZN30FlightControllorImplementation23getYPositionPidInstanceEv>:

PID_Control& FlightControllorImplementation::getYPositionPidInstance()
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	return this->yPosition_pid;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f603 4324 	addw	r3, r3, #3108	; 0xc24
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>:

LIS3MDLTR& FlightControllorImplementation::getLIS3MDLTRinstance()
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
	return this->lis;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	33a0      	adds	r3, #160	; 0xa0
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <_ZN30FlightControllorImplementation17getBuzzerinstanceEv>:

Buzzer& FlightControllorImplementation::getBuzzerinstance()
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
	return this->buzz;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3388      	adds	r3, #136	; 0x88
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <_ZN30FlightControllorImplementation17getBMP390instanceEv>:

BMP390& FlightControllorImplementation::getBMP390instance()
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
	return this->bmp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f503 7388 	add.w	r3, r3, #272	; 0x110
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>:

ICM42688P& FlightControllorImplementation::getICM42688Pinstance()
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	return this->icm;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <_ZN30FlightControllorImplementation15getHC05instanceEv>:

HC05& FlightControllorImplementation::getHC05instance()
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
	return this->bt;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f503 7304 	add.w	r3, r3, #528	; 0x210
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>:

PMW3901UY& FlightControllorImplementation::getPMW3901UYinstance()
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	return this->pmw;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f603 5348 	addw	r3, r3, #3400	; 0xd48
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>:

FrSkyRX& FlightControllorImplementation::getFrSkyRXinstance()
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
	return this->remote_rx;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <_ZN30FlightControllorImplementation17getMB1043instanceEv>:

MB1043& FlightControllorImplementation::getMB1043instance()
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	return this->sonar;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f503 735e 	add.w	r3, r3, #888	; 0x378
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>:

VL53L0X& FlightControllorImplementation::getVL53L0Xinstance()
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
	return this->vl53;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <_ZN30FlightControllorImplementation28getBatteryManagementinstanceEv>:

BatteryManagement& FlightControllorImplementation::getBatteryManagementinstance()
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	return this->battMgmt;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f603 3318 	addw	r3, r3, #2840	; 0xb18
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <_ZN30FlightControllorImplementation24getFaultsCheckHandlerPtrEv>:

TaskHandle_t* FlightControllorImplementation::getFaultsCheckHandlerPtr()
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
	return &this->_faultsCheckHandler;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f603 53f4 	addw	r3, r3, #3572	; 0xdf4
}
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>:

TaskHandle_t* FlightControllorImplementation::getSensorsDataReadHandlerPtr()
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	return &this->_sensorsDataReadHandler;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f603 53f8 	addw	r3, r3, #3576	; 0xdf8
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <_ZN30FlightControllorImplementation28getDynamicsProcessHandlerPtrEv>:

TaskHandle_t* FlightControllorImplementation::getDynamicsProcessHandlerPtr()
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
	return &this->_dynamicsProcessHandler;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f603 53fc 	addw	r3, r3, #3580	; 0xdfc
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>:

FaultsStatus FlightControllorImplementation::getCurrentFaultsStatus() const
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	return this->_currentFaultsStatus;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>:

void FlightControllorImplementation::setCurrentFaultsStatus(FaultsStatus faultsStatus)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
	this->_currentFaultsStatus = faultsStatus;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	f8c3 2df0 	str.w	r2, [r3, #3568]	; 0xdf0
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <_ZN6BuzzerC1Ev>:

	void Buzz_on();
	void Buzz_off();
	uint16_t msToTick(uint16_t ms);
public:
	Buzzer():
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
		freqTick {0U}
		,pauseTick {0U}
		,counterStart {0U}
		,counterEnd {0U}
		,repetitions {0U}
		,busy {false}
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2210      	movs	r2, #16
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <_ZN6BuzzerC1Ev+0x50>)
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	819a      	strh	r2, [r3, #12]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	81da      	strh	r2, [r3, #14]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	821a      	strh	r2, [r3, #16]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	825a      	strh	r2, [r3, #18]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	829a      	strh	r2, [r3, #20]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	759a      	strb	r2, [r3, #22]
	{
	}
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40020000 	.word	0x40020000

08001254 <_ZN11PID_ControlC1ERfS0_fff>:
	float pid_p = 0;
	float pid_i = 0;
	float pid_d = 0;
	float pid = 0;
public:
	PID_Control(float &signal, float &reference,float Kp,float Ki,float Kd):
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6178      	str	r0, [r7, #20]
 800125c:	6139      	str	r1, [r7, #16]
 800125e:	60fa      	str	r2, [r7, #12]
 8001260:	ed87 0a02 	vstr	s0, [r7, #8]
 8001264:	edc7 0a01 	vstr	s1, [r7, #4]
 8001268:	ed87 1a00 	vstr	s2, [r7]
	,error {0.0F}
	,last_signal {0.0F}
	,pid_p {0.0F}
	,pid_i {0.0F}
	,pid_d {0.0F}
	,pid {0.0F}
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	611a      	str	r2, [r3, #16]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	629a      	str	r2, [r3, #40]	; 0x28
	{
		last_signal = signal;
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	619a      	str	r2, [r3, #24]
	};
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	4618      	mov	r0, r3
 80012c6:	371c      	adds	r7, #28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <_ZN15PrintableSensorC1Ev>:
	void addSensor(PrintableSensor* sen);
	void printfSensorsValues();
	void addSensorParameter(SENSOR_DATA_PARAMETER sen);
};

class PrintableSensor
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <_ZN15PrintableSensorC1Ev+0x28>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2232      	movs	r2, #50	; 0x32
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f018 ffa4 	bl	801a234 <memset>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	0801d224 	.word	0x0801d224

080012fc <_ZN17BatteryManagementC1EP17ADC_HandleTypeDefP6Buzzert>:
	float batteryVoltage;

	uint16_t msToTick(uint16_t ms);
	void toPercentage();
public:
	BatteryManagement(ADC_HandleTypeDef *adc_port,Buzzer *buzz,uint16_t frequency_ms):
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	807b      	strh	r3, [r7, #2]
		,buzz(buzz)
		,frequency_tick{0}
		,tick_counter{0}
		,batteryVal{0}
		,batteryPercentage{0}
		,batteryVoltage{0}
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ffdf 	bl	80012d0 <_ZN15PrintableSensorC1Ev>
 8001312:	4a1d      	ldr	r2, [pc, #116]	; (8001388 <_ZN17BatteryManagementC1EP17ADC_HandleTypeDefP6Buzzert+0x8c>)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f640 3222 	movw	r2, #2850	; 0xb22
 800131e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8001326:	871a      	strh	r2, [r3, #56]	; 0x38
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800132e:	875a      	strh	r2, [r3, #58]	; 0x3a
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001336:	63da      	str	r2, [r3, #60]	; 0x3c
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	641a      	str	r2, [r3, #64]	; 0x40
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	645a      	str	r2, [r3, #68]	; 0x44
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2200      	movs	r2, #0
 8001350:	64da      	str	r2, [r3, #76]	; 0x4c
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2200      	movs	r2, #0
 8001356:	651a      	str	r2, [r3, #80]	; 0x50
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	655a      	str	r2, [r3, #84]	; 0x54
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	659a      	str	r2, [r3, #88]	; 0x58
	{
		frequency_tick = msToTick(frequency_ms);
 8001368:	887b      	ldrh	r3, [r7, #2]
 800136a:	4619      	mov	r1, r3
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f003 ff81 	bl	8005274 <_ZN17BatteryManagement8msToTickEt>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	}
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	0801d344 	.word	0x0801d344

0800138c <_ZN16FlashMemoryBlockC1Em>:
};

class FlashMemoryBlock
{
public:
	FlashMemoryBlock(uint32_t address):
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
		PID_PITCH_I{address},
		PID_PITCH_D{address},
		PID_YAW_P{address},
		PID_YAW_I{address},
		PID_YAW_D{address},
		address{address}
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	463a      	mov	r2, r7
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f000 faa5 	bl	80018ec <_ZN10memoryDataI6intObjEC1ERm>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3308      	adds	r3, #8
 80013a6:	463a      	mov	r2, r7
 80013a8:	4611      	mov	r1, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 fa9e 	bl	80018ec <_ZN10memoryDataI6intObjEC1ERm>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3310      	adds	r3, #16
 80013b4:	463a      	mov	r2, r7
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 faac 	bl	8001916 <_ZN10memoryDataI8floatObjEC1ERm>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3318      	adds	r3, #24
 80013c2:	463a      	mov	r2, r7
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 faa5 	bl	8001916 <_ZN10memoryDataI8floatObjEC1ERm>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3320      	adds	r3, #32
 80013d0:	463a      	mov	r2, r7
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fa9e 	bl	8001916 <_ZN10memoryDataI8floatObjEC1ERm>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3328      	adds	r3, #40	; 0x28
 80013de:	463a      	mov	r2, r7
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 fa97 	bl	8001916 <_ZN10memoryDataI8floatObjEC1ERm>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3330      	adds	r3, #48	; 0x30
 80013ec:	463a      	mov	r2, r7
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 fa90 	bl	8001916 <_ZN10memoryDataI8floatObjEC1ERm>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3338      	adds	r3, #56	; 0x38
 80013fa:	463a      	mov	r2, r7
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 fa89 	bl	8001916 <_ZN10memoryDataI8floatObjEC1ERm>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3340      	adds	r3, #64	; 0x40
 8001408:	463a      	mov	r2, r7
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f000 fa82 	bl	8001916 <_ZN10memoryDataI8floatObjEC1ERm>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3348      	adds	r3, #72	; 0x48
 8001416:	463a      	mov	r2, r7
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f000 fa7b 	bl	8001916 <_ZN10memoryDataI8floatObjEC1ERm>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3350      	adds	r3, #80	; 0x50
 8001424:	463a      	mov	r2, r7
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f000 fa74 	bl	8001916 <_ZN10memoryDataI8floatObjEC1ERm>
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	659a      	str	r2, [r3, #88]	; 0x58
	{

	}
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_ZN12IOManagement16writeMemoryBlockE16FlashMemoryBlock>:
};

class IOManagement
{
public:
	void writeMemoryBlock(FlashMemoryBlock memBlock)
 800143e:	b084      	sub	sp, #16
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	f107 0014 	add.w	r0, r7, #20
 800144c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	{
		//massEraseSector(memBlock.address);

		memBlock.firstBoot.updateToMemory();
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fa73 	bl	8001940 <_ZN10memoryDataI6intObjE14updateToMemoryEv>
		memBlock.flashReadWriteError.updateToMemory();
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	3308      	adds	r3, #8
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fa6d 	bl	8001940 <_ZN10memoryDataI6intObjE14updateToMemoryEv>
		memBlock.PID_ROLL_P.updateToMemory();
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	3310      	adds	r3, #16
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fa76 	bl	800195e <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_ROLL_I.updateToMemory();
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	3318      	adds	r3, #24
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fa70 	bl	800195e <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_ROLL_D.updateToMemory();
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	3320      	adds	r3, #32
 8001484:	4618      	mov	r0, r3
 8001486:	f000 fa6a 	bl	800195e <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_PITCH_P.updateToMemory();
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	3328      	adds	r3, #40	; 0x28
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fa64 	bl	800195e <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_PITCH_I.updateToMemory();
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	3330      	adds	r3, #48	; 0x30
 800149c:	4618      	mov	r0, r3
 800149e:	f000 fa5e 	bl	800195e <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_PITCH_D.updateToMemory();
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	3338      	adds	r3, #56	; 0x38
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 fa58 	bl	800195e <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_YAW_P.updateToMemory();
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	3340      	adds	r3, #64	; 0x40
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 fa52 	bl	800195e <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_YAW_I.updateToMemory();
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	3348      	adds	r3, #72	; 0x48
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 fa4c 	bl	800195e <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_YAW_D.updateToMemory();
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	3350      	adds	r3, #80	; 0x50
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 fa46 	bl	800195e <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
	}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014dc:	b004      	add	sp, #16
 80014de:	4770      	bx	lr

080014e0 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock>:
		to.PID_YAW_P.setValue(from.PID_YAW_P.getValue());
		to.PID_YAW_I.setValue(from.PID_YAW_I.getValue());
		to.PID_YAW_D.setValue(from.PID_YAW_D.getValue());
	}

	void resetMemoryBlock(FlashMemoryBlock& memBlock)
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
	{
		memBlock.firstBoot.setValue(1U);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 fa50 	bl	8001994 <_ZN10memoryDataI6intObjE8setValueEi>
		memBlock.flashReadWriteError.setValue(0U);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	3308      	adds	r3, #8
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 fa4a 	bl	8001994 <_ZN10memoryDataI6intObjE8setValueEi>
		memBlock.PID_ROLL_P.setValue(0U);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	3310      	adds	r3, #16
 8001504:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001588 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fa51 	bl	80019b0 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_ROLL_I.setValue(0U);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	3318      	adds	r3, #24
 8001512:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8001588 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fa4a 	bl	80019b0 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_ROLL_D.setValue(0U);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	3320      	adds	r3, #32
 8001520:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001588 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 8001524:	4618      	mov	r0, r3
 8001526:	f000 fa43 	bl	80019b0 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_PITCH_P.setValue(0U);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	3328      	adds	r3, #40	; 0x28
 800152e:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8001588 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fa3c 	bl	80019b0 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_PITCH_I.setValue(0U);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	3330      	adds	r3, #48	; 0x30
 800153c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001588 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fa35 	bl	80019b0 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_PITCH_D.setValue(0U);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	3338      	adds	r3, #56	; 0x38
 800154a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001588 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fa2e 	bl	80019b0 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_YAW_P.setValue(0U);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	3340      	adds	r3, #64	; 0x40
 8001558:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001588 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 800155c:	4618      	mov	r0, r3
 800155e:	f000 fa27 	bl	80019b0 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_YAW_I.setValue(0U);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	3348      	adds	r3, #72	; 0x48
 8001566:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001588 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 800156a:	4618      	mov	r0, r3
 800156c:	f000 fa20 	bl	80019b0 <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_YAW_D.setValue(0U);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	3350      	adds	r3, #80	; 0x50
 8001574:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001588 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 8001578:	4618      	mov	r0, r3
 800157a:	f000 fa19 	bl	80019b0 <_ZN10memoryDataI8floatObjE8setValueEf>
	}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	00000000 	.word	0x00000000

0800158c <_ZN12IOManagement17updateMemoryBlockER16FlashMemoryBlock>:

	void updateMemoryBlock(FlashMemoryBlock& memBlock)
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
	{
		memBlock.firstBoot.updateFromMemory();
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fa18 	bl	80019ce <_ZN10memoryDataI6intObjE16updateFromMemoryEv>
		memBlock.flashReadWriteError.updateFromMemory();
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	3308      	adds	r3, #8
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 fa13 	bl	80019ce <_ZN10memoryDataI6intObjE16updateFromMemoryEv>
		memBlock.PID_ROLL_P.updateFromMemory();
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	3310      	adds	r3, #16
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 fa1f 	bl	80019f0 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_ROLL_I.updateFromMemory();
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	3318      	adds	r3, #24
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 fa1a 	bl	80019f0 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_ROLL_D.updateFromMemory();
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	3320      	adds	r3, #32
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 fa15 	bl	80019f0 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_PITCH_P.updateFromMemory();
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	3328      	adds	r3, #40	; 0x28
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 fa10 	bl	80019f0 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_PITCH_I.updateFromMemory();
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	3330      	adds	r3, #48	; 0x30
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 fa0b 	bl	80019f0 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_PITCH_D.updateFromMemory();
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	3338      	adds	r3, #56	; 0x38
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fa06 	bl	80019f0 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_YAW_P.updateFromMemory();
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	3340      	adds	r3, #64	; 0x40
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 fa01 	bl	80019f0 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_YAW_I.updateFromMemory();
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	3348      	adds	r3, #72	; 0x48
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f9fc 	bl	80019f0 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_YAW_D.updateFromMemory();
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	3350      	adds	r3, #80	; 0x50
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 f9f7 	bl	80019f0 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
	}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_ZN16MemoryManagementC1Em>:
};

class MemoryManagement: public IOManagement
{
public:
	MemoryManagement(uint32_t mainMemoryAddress):
 800160a:	b590      	push	{r4, r7, lr}
 800160c:	b097      	sub	sp, #92	; 0x5c
 800160e:	af14      	add	r7, sp, #80	; 0x50
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
		mainMemoryBlock{mainMemoryAddress}
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6839      	ldr	r1, [r7, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff feb7 	bl	800138c <_ZN16FlashMemoryBlockC1Em>
	{
		this->updateMemoryBlock(this->mainMemoryBlock);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4619      	mov	r1, r3
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ffb2 	bl	800158c <_ZN12IOManagement17updateMemoryBlockER16FlashMemoryBlock>

		if (this->mainMemoryBlock.firstBoot.getValue()!=1U)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f9a6 	bl	800197c <_ZN10memoryDataI6intObjE8getValueEv>
 8001630:	4603      	mov	r3, r0
 8001632:	2b01      	cmp	r3, #1
 8001634:	bf14      	ite	ne
 8001636:	2301      	movne	r3, #1
 8001638:	2300      	moveq	r3, #0
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d011      	beq.n	8001664 <_ZN16MemoryManagementC1Em+0x5a>
		{
			resetMemoryBlock(this->mainMemoryBlock);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4619      	mov	r1, r3
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff4b 	bl	80014e0 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock>
			writeMemoryBlock(this->mainMemoryBlock);
 800164a:	687c      	ldr	r4, [r7, #4]
 800164c:	4668      	mov	r0, sp
 800164e:	f104 030c 	add.w	r3, r4, #12
 8001652:	2250      	movs	r2, #80	; 0x50
 8001654:	4619      	mov	r1, r3
 8001656:	f018 fdc5 	bl	801a1e4 <memcpy>
 800165a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff feed 	bl	800143e <_ZN12IOManagement16writeMemoryBlockE16FlashMemoryBlock>
		}
	}
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	bd90      	pop	{r4, r7, pc}
	...

08001670 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_>:
	TaskHandle_t _sensorsDataReadHandler = NULL;
	TaskHandle_t _dynamicsProcessHandler = NULL;
public:
	float zeroRef = 0.0F;

	FlightControllorImplementation (
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af04      	add	r7, sp, #16
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	603b      	str	r3, [r7, #0]
	  yaw_pid(icm.getEulerZref(),zeroRef,10,0,0),
	  xPosition_pid(pmw.getXpos(),remote_rx.target_roll,0.5F,0,100),
	  yPosition_pid(pmw.getYpos(),remote_rx.target_pitch,0.5F,0,100),
	  icm (hspi2,&buzz,roll_pid,pitch_pid,yaw_pid),
	  pmw (huart2, hdma_usart2_rx, 255U, icm, vl53,xPosition_pid,yPosition_pid),
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6a3a      	ldr	r2, [r7, #32]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169a:	611a      	str	r2, [r3, #16]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016a0:	615a      	str	r2, [r3, #20]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016a6:	619a      	str	r2, [r3, #24]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016ac:	61da      	str	r2, [r3, #28]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016b2:	621a      	str	r2, [r3, #32]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	332c      	adds	r3, #44	; 0x2c
 80016c4:	497f      	ldr	r1, [pc, #508]	; (80018c4 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x254>)
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff ff9f 	bl	800160a <_ZN16MemoryManagementC1Em>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	3388      	adds	r3, #136	; 0x88
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fd95 	bl	8001200 <_ZN6BuzzerC1Ev>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	33a0      	adds	r3, #160	; 0xa0
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	4618      	mov	r0, r3
 80016de:	f006 fd59 	bl	8008194 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 fc32 	bl	8003f54 <_ZN6BMP390C1EP19__SPI_HandleTypeDef>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80016f6:	6839      	ldr	r1, [r7, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f004 fbfa 	bl	8005ef2 <_ZN4HC05C1EP20__UART_HandleTypeDef>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	3388      	adds	r3, #136	; 0x88
 8001708:	2201      	movs	r2, #1
 800170a:	9200      	str	r2, [sp, #0]
 800170c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800170e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001710:	f003 fed4 	bl	80054bc <_ZN7FrSkyRXC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefP6Buzzerh>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f503 705e 	add.w	r0, r3, #888	; 0x378
 800171a:	23ff      	movs	r3, #255	; 0xff
 800171c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800171e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001720:	f006 ff88 	bl	8008634 <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f503 707e 	add.w	r0, r3, #1016	; 0x3f8
 800172a:	23ff      	movs	r3, #255	; 0xff
 800172c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800172e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001730:	f007 fd66 	bl	8009200 <_ZN7VL53L0XC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f603 3018 	addw	r0, r3, #2840	; 0xb18
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f103 0288 	add.w	r2, r3, #136	; 0x88
 8001740:	2364      	movs	r3, #100	; 0x64
 8001742:	68b9      	ldr	r1, [r7, #8]
 8001744:	f7ff fdda 	bl	80012fc <_ZN17BatteryManagementC1EP17ADC_HandleTypeDefP6Buzzert>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f603 3474 	addw	r4, r3, #2932	; 0xb74
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 8001754:	4618      	mov	r0, r3
 8001756:	f006 fcad 	bl	80080b4 <_ZN9ICM42688P12getEulerYrefEv>
 800175a:	4601      	mov	r1, r0
	  roll_pid(icm.getEulerYref(),zeroRef,6,0,5000),
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 8001762:	ed9f 1a59 	vldr	s2, [pc, #356]	; 80018c8 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x258>
 8001766:	eddf 0a59 	vldr	s1, [pc, #356]	; 80018cc <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 800176a:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800176e:	461a      	mov	r2, r3
 8001770:	4620      	mov	r0, r4
 8001772:	f7ff fd6f 	bl	8001254 <_ZN11PID_ControlC1ERfS0_fff>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f503 643a 	add.w	r4, r3, #2976	; 0xba0
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 8001782:	4618      	mov	r0, r3
 8001784:	f006 fc7a 	bl	800807c <_ZN9ICM42688P12getEulerXrefEv>
 8001788:	4601      	mov	r1, r0
	  pitch_pid(icm.getEulerXref(),zeroRef,6,0,5000),
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 8001790:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 80018c8 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x258>
 8001794:	eddf 0a4d 	vldr	s1, [pc, #308]	; 80018cc <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 8001798:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800179c:	461a      	mov	r2, r3
 800179e:	4620      	mov	r0, r4
 80017a0:	f7ff fd58 	bl	8001254 <_ZN11PID_ControlC1ERfS0_fff>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f603 34cc 	addw	r4, r3, #3020	; 0xbcc
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 80017b0:	4618      	mov	r0, r3
 80017b2:	f006 fc8b 	bl	80080cc <_ZN9ICM42688P12getEulerZrefEv>
 80017b6:	4601      	mov	r1, r0
	  yaw_pid(icm.getEulerZref(),zeroRef,10,0,0),
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 80017be:	ed9f 1a43 	vldr	s2, [pc, #268]	; 80018cc <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 80017c2:	eddf 0a42 	vldr	s1, [pc, #264]	; 80018cc <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 80017c6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80017ca:	461a      	mov	r2, r3
 80017cc:	4620      	mov	r0, r4
 80017ce:	f7ff fd41 	bl	8001254 <_ZN11PID_ControlC1ERfS0_fff>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f603 34f8 	addw	r4, r3, #3064	; 0xbf8
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f603 5348 	addw	r3, r3, #3400	; 0xd48
 80017de:	4618      	mov	r0, r3
 80017e0:	f007 fb18 	bl	8008e14 <_ZN9PMW3901UY7getXposEv>
 80017e4:	4601      	mov	r1, r0
	  xPosition_pid(pmw.getXpos(),remote_rx.target_roll,0.5F,0,100),
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f503 7357 	add.w	r3, r3, #860	; 0x35c
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 80017ec:	ed9f 1a38 	vldr	s2, [pc, #224]	; 80018d0 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x260>
 80017f0:	eddf 0a36 	vldr	s1, [pc, #216]	; 80018cc <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 80017f4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80017f8:	461a      	mov	r2, r3
 80017fa:	4620      	mov	r0, r4
 80017fc:	f7ff fd2a 	bl	8001254 <_ZN11PID_ControlC1ERfS0_fff>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f603 4424 	addw	r4, r3, #3108	; 0xc24
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f603 5348 	addw	r3, r3, #3400	; 0xd48
 800180c:	4618      	mov	r0, r3
 800180e:	f007 fb0d 	bl	8008e2c <_ZN9PMW3901UY7getYposEv>
 8001812:	4601      	mov	r1, r0
	  yPosition_pid(pmw.getYpos(),remote_rx.target_pitch,0.5F,0,100),
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f503 7358 	add.w	r3, r3, #864	; 0x360
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 800181a:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 80018d0 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x260>
 800181e:	eddf 0a2b 	vldr	s1, [pc, #172]	; 80018cc <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 8001822:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001826:	461a      	mov	r2, r3
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff fd13 	bl	8001254 <_ZN11PID_ControlC1ERfS0_fff>
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f503 6045 	add.w	r0, r3, #3152	; 0xc50
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f103 0188 	add.w	r1, r3, #136	; 0x88
	  icm (hspi2,&buzz,roll_pid,pitch_pid,yaw_pid),
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f603 3474 	addw	r4, r3, #2932	; 0xb74
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	f602 32cc 	addw	r2, r2, #3020	; 0xbcc
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 800184c:	9201      	str	r2, [sp, #4]
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	4623      	mov	r3, r4
 8001852:	460a      	mov	r2, r1
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	f005 fc55 	bl	8007104 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_>
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f603 5448 	addw	r4, r3, #3400	; 0xd48
	  pmw (huart2, hdma_usart2_rx, 255U, icm, vl53,xPosition_pid,yPosition_pid),
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	f502 727e 	add.w	r2, r2, #1016	; 0x3f8
 800186c:	68f9      	ldr	r1, [r7, #12]
 800186e:	f601 31f8 	addw	r1, r1, #3064	; 0xbf8
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f600 4024 	addw	r0, r0, #3108	; 0xc24
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 8001878:	9003      	str	r0, [sp, #12]
 800187a:	9102      	str	r1, [sp, #8]
 800187c:	9201      	str	r2, [sp, #4]
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	23ff      	movs	r3, #255	; 0xff
 8001882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001884:	6a39      	ldr	r1, [r7, #32]
 8001886:	4620      	mov	r0, r4
 8001888:	f007 f80c 	bl	80088a4 <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688PR7VL53L0XR11PID_ControlS9_>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2201      	movs	r2, #1
 8001890:	f8c3 2df0 	str.w	r2, [r3, #3568]	; 0xdf0
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f8c3 2df4 	str.w	r2, [r3, #3572]	; 0xdf4
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	f8c3 2df8 	str.w	r2, [r3, #3576]	; 0xdf8
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f8c3 2dfc 	str.w	r2, [r3, #3580]	; 0xdfc
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
	{

	}
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd90      	pop	{r4, r7, pc}
 80018c2:	bf00      	nop
 80018c4:	080e0000 	.word	0x080e0000
 80018c8:	459c4000 	.word	0x459c4000
 80018cc:	00000000 	.word	0x00000000
 80018d0:	42c80000 	.word	0x42c80000

080018d4 <_ZN30FlightControllorImplementation11getInstanceEv>:
		&hdma_usart3_rx,
		&hdma_uart4_rx,
		&hdma_usart6_rx);

FlightControllorImplementation *FlightControllorImplementation::getInstance()
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
	return globalflightController;
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <_ZN30FlightControllorImplementation11getInstanceEv+0x14>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000338 	.word	0x20000338

080018ec <_ZN10memoryDataI6intObjEC1ERm>:
	memoryData(uint32_t& addr)
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
		this->address = addr;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	605a      	str	r2, [r3, #4]
		addr+=dataSize;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	1d1a      	adds	r2, r3, #4
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	601a      	str	r2, [r3, #0]
	}
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <_ZN10memoryDataI8floatObjEC1ERm>:
	memoryData(uint32_t& addr)
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
		this->address = addr;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	605a      	str	r2, [r3, #4]
		addr+=dataSize;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	1d1a      	adds	r2, r3, #4
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	601a      	str	r2, [r3, #0]
	}
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <_ZN10memoryDataI6intObjE14updateToMemoryEv>:
	void updateToMemory()
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
		writeMemoryAddress<unionType>(this->address,this->data);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	4610      	mov	r0, r2
 8001952:	f000 f862 	bl	8001a1a <_Z18writeMemoryAddressI6intObjEmmT_>
	}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <_ZN10memoryDataI8floatObjE14updateToMemoryEv>:
	void updateToMemory()
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
		writeMemoryAddress<unionType>(this->address,this->data);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6819      	ldr	r1, [r3, #0]
 800196e:	4610      	mov	r0, r2
 8001970:	f000 f877 	bl	8001a62 <_Z18writeMemoryAddressI8floatObjEmmT_>
	}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <_ZN10memoryDataI6intObjE8getValueEv>:
	Type getValue()
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
		return this->data.value;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
	}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_ZN10memoryDataI6intObjE8setValueEi>:
	void setValue(Type value)
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
		this->data.value = value;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	601a      	str	r2, [r3, #0]
	}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_ZN10memoryDataI8floatObjE8setValueEf>:
	void setValue(Type value)
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	ed87 0a00 	vstr	s0, [r7]
		this->data.value = value;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	601a      	str	r2, [r3, #0]
	}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <_ZN10memoryDataI6intObjE16updateFromMemoryEv>:
	void updateFromMemory()
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
		this->data.bytes = readMemoryAddress<Type>(this->address);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f865 	bl	8001aaa <_Z17readMemoryAddressIiET_m>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	601a      	str	r2, [r3, #0]
	}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>:
	void updateFromMemory()
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
		this->data.bytes = readMemoryAddress<Type>(this->address);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f860 	bl	8001ac2 <_Z17readMemoryAddressIfET_m>
 8001a02:	eef0 7a40 	vmov.f32	s15, s0
 8001a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a0a:	ee17 2a90 	vmov	r2, s15
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	601a      	str	r2, [r3, #0]
	}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <_Z18writeMemoryAddressI6intObjEmmT_>:
{
	return static_cast<Type>(*(__IO uint32_t *)addr);
}

template <typename Type>
inline uint32_t writeMemoryAddress(uint32_t address,Type memoryData)
 8001a1a:	b5b0      	push	{r4, r5, r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
{
	HAL_FLASH_Unlock();
 8001a24:	f008 ff74 	bl	800a910 <HAL_FLASH_Unlock>

    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, memoryData.bytes) != HAL_OK)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	461c      	mov	r4, r3
 8001a2e:	4615      	mov	r5, r2
 8001a30:	4622      	mov	r2, r4
 8001a32:	462b      	mov	r3, r5
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	2002      	movs	r0, #2
 8001a38:	f008 ff16 	bl	800a868 <HAL_FLASH_Program>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	bf14      	ite	ne
 8001a42:	2301      	movne	r3, #1
 8001a44:	2300      	moveq	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <_Z18writeMemoryAddressI6intObjEmmT_+0x3a>
    {
    	return HAL_FLASH_GetError ();
 8001a4c:	f008 ff92 	bl	800a974 <HAL_FLASH_GetError>
 8001a50:	4603      	mov	r3, r0
 8001a52:	e002      	b.n	8001a5a <_Z18writeMemoryAddressI6intObjEmmT_+0x40>
    }

	HAL_FLASH_Lock();
 8001a54:	f008 ff7e 	bl	800a954 <HAL_FLASH_Lock>

	return 0;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bdb0      	pop	{r4, r5, r7, pc}

08001a62 <_Z18writeMemoryAddressI8floatObjEmmT_>:
inline uint32_t writeMemoryAddress(uint32_t address,Type memoryData)
 8001a62:	b5b0      	push	{r4, r5, r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8001a6c:	f008 ff50 	bl	800a910 <HAL_FLASH_Unlock>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, memoryData.bytes) != HAL_OK)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2200      	movs	r2, #0
 8001a74:	461c      	mov	r4, r3
 8001a76:	4615      	mov	r5, r2
 8001a78:	4622      	mov	r2, r4
 8001a7a:	462b      	mov	r3, r5
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	2002      	movs	r0, #2
 8001a80:	f008 fef2 	bl	800a868 <HAL_FLASH_Program>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	bf14      	ite	ne
 8001a8a:	2301      	movne	r3, #1
 8001a8c:	2300      	moveq	r3, #0
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <_Z18writeMemoryAddressI8floatObjEmmT_+0x3a>
    	return HAL_FLASH_GetError ();
 8001a94:	f008 ff6e 	bl	800a974 <HAL_FLASH_GetError>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	e002      	b.n	8001aa2 <_Z18writeMemoryAddressI8floatObjEmmT_+0x40>
	HAL_FLASH_Lock();
 8001a9c:	f008 ff5a 	bl	800a954 <HAL_FLASH_Lock>
	return 0;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bdb0      	pop	{r4, r5, r7, pc}

08001aaa <_Z17readMemoryAddressIiET_m>:
inline Type readMemoryAddress(const uint32_t addr)
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
	return static_cast<Type>(*(__IO uint32_t *)addr);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <_Z17readMemoryAddressIfET_m>:
inline Type readMemoryAddress(const uint32_t addr)
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
	return static_cast<Type>(*(__IO uint32_t *)addr);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8001ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <_Z41__static_initialization_and_destruction_0ii>:
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b08b      	sub	sp, #44	; 0x2c
 8001ae8:	af08      	add	r7, sp, #32
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d122      	bne.n	8001b3a <_Z41__static_initialization_and_destruction_0ii+0x56>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d11d      	bne.n	8001b3a <_Z41__static_initialization_and_destruction_0ii+0x56>
		&hdma_usart6_rx);
 8001afe:	f640 6008 	movw	r0, #3592	; 0xe08
 8001b02:	f017 f92f 	bl	8018d64 <_Znwj>
 8001b06:	4603      	mov	r3, r0
 8001b08:	461c      	mov	r4, r3
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001b0c:	9307      	str	r3, [sp, #28]
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001b10:	9306      	str	r3, [sp, #24]
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001b14:	9305      	str	r3, [sp, #20]
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001b18:	9304      	str	r3, [sp, #16]
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001b1c:	9303      	str	r3, [sp, #12]
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001b20:	9302      	str	r3, [sp, #8]
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001b2c:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8001b2e:	490f      	ldr	r1, [pc, #60]	; (8001b6c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001b30:	4620      	mov	r0, r4
 8001b32:	f7ff fd9d 	bl	8001670 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_>
static FlightControllorImplementation *globalflightController = new FlightControllorImplementation(
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001b38:	601c      	str	r4, [r3, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd90      	pop	{r4, r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000b48 	.word	0x20000b48
 8001b48:	200009c8 	.word	0x200009c8
 8001b4c:	20000ae8 	.word	0x20000ae8
 8001b50:	20000a88 	.word	0x20000a88
 8001b54:	20000984 	.word	0x20000984
 8001b58:	20000874 	.word	0x20000874
 8001b5c:	20000940 	.word	0x20000940
 8001b60:	200008fc 	.word	0x200008fc
 8001b64:	200008b8 	.word	0x200008b8
 8001b68:	200006cc 	.word	0x200006cc
 8001b6c:	200005a0 	.word	0x200005a0
 8001b70:	20000338 	.word	0x20000338

08001b74 <_GLOBAL__sub_I__ZN30FlightControllorImplementation11getInstanceEv>:
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f7ff ffb1 	bl	8001ae4 <_Z41__static_initialization_and_destruction_0ii>
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4a07      	ldr	r2, [pc, #28]	; (8001bb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <vApplicationGetIdleTaskMemory+0x30>)
 8001b9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	2000033c 	.word	0x2000033c
 8001bb4:	20000390 	.word	0x20000390

08001bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bea:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	60d3      	str	r3, [r2, #12]
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <_ZN12CallsCounter25incrementInterruptCounterEv>:
};

class CallsCounter
{
public:
	void incrementInterruptCounter()
 8001c00:	b4b0      	push	{r4, r5, r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	{
		this->interruptCounter++;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0e:	1c54      	adds	r4, r2, #1
 8001c10:	f143 0500 	adc.w	r5, r3, #0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	e9c3 4500 	strd	r4, r5, [r3]
	}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bcb0      	pop	{r4, r5, r7}
 8001c22:	4770      	bx	lr

08001c24 <_ZN12CallsCounter20incrementTaskCounterEv>:

	void incrementTaskCounter()
 8001c24:	b4b0      	push	{r4, r5, r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	{
		this->taskCounter++;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c32:	1c54      	adds	r4, r2, #1
 8001c34:	f143 0500 	adc.w	r5, r3, #0
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	e9c3 4502 	strd	r4, r5, [r3, #8]
	}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bcb0      	pop	{r4, r5, r7}
 8001c46:	4770      	bx	lr

08001c48 <_ZN7Timeout23incrementTimeoutCounterEv>:
	void resetTimeoutCounter()
	{
		timeout_counter=0;
	}

	void incrementTimeoutCounter()
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	{
		timeout_counter++;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	785b      	ldrb	r3, [r3, #1]
 8001c54:	3301      	adds	r3, #1
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	705a      	strb	r2, [r3, #1]

		if (timeout_counter>timeout_value)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	785a      	ldrb	r2, [r3, #1]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	789b      	ldrb	r3, [r3, #2]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d902      	bls.n	8001c6e <_ZN7Timeout23incrementTimeoutCounterEv+0x26>
			status = Status::Timeout;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
	}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation>:
namespace drone
{
	namespace failsafe
	{
		inline void slowlyLanding(FlightControllorImplementation& flightControllerInstance)
		{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
			static float failSafeDownStartingThrottleValue = constFailSafeDownStartingThrottleValue;

			flightControllerInstance.getFrSkyRXinstance().getThrottle() = failSafeDownStartingThrottleValue;
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff fa44 	bl	8001112 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f004 f8a7 	bl	8005de0 <_ZN7FrSkyRX11getThrottleEv>
 8001c92:	4602      	mov	r2, r0
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x80>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6013      	str	r3, [r2, #0]
			flightControllerInstance.getFrSkyRXinstance().getTargetRoll() = 0.0F;
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff fa39 	bl	8001112 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 f8a8 	bl	8005df8 <_ZN7FrSkyRX13getTargetRollEv>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
			flightControllerInstance.getFrSkyRXinstance().getTargetPitch() = 0.0F;
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff fa2e 	bl	8001112 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f004 f8a9 	bl	8005e10 <_ZN7FrSkyRX14getTargetPitchEv>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]

			failSafeDownStartingThrottleValue -= 0.1F;
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x80>)
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001d00 <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x84>
 8001cd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x80>)
 8001cd6:	edc3 7a00 	vstr	s15, [r3]

			if (failSafeDownStartingThrottleValue <= 0.0F)
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x80>)
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce8:	d900      	bls.n	8001cec <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x70>
			{
				flightControllerInstance.setCurrentFaultsStatus(FaultsStatus::CRITICAL);
			}
		}
 8001cea:	e003      	b.n	8001cf4 <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x78>
				flightControllerInstance.setCurrentFaultsStatus(FaultsStatus::CRITICAL);
 8001cec:	2103      	movs	r1, #3
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff fa77 	bl	80011e2 <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>
		}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	3dcccccd 	.word	0x3dcccccd

08001d04 <_ZN5drone8failsafe12quickLandingER30FlightControllorImplementation>:

		inline void quickLanding(FlightControllorImplementation& flightControllerInstance)
		{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
			flightControllerInstance.getFrSkyRXinstance().getThrottle() = 0.0F;
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff fa00 	bl	8001112 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f004 f863 	bl	8005de0 <_ZN7FrSkyRX11getThrottleEv>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
			flightControllerInstance.getFrSkyRXinstance().getTargetRoll() = 0.0F;
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff f9f5 	bl	8001112 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f004 f864 	bl	8005df8 <_ZN7FrSkyRX13getTargetRollEv>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
			flightControllerInstance.getFrSkyRXinstance().getTargetPitch() = 0.0F;
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff f9ea 	bl	8001112 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f004 f865 	bl	8005e10 <_ZN7FrSkyRX14getTargetPitchEv>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
		}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <_Z19DynamicsProcessTaskPv>:
#include "failsafe_functions.hpp"

float testttt = 0;

void DynamicsProcessTask(void *pvParameters)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b090      	sub	sp, #64	; 0x40
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8001d60:	f7ff fdb8 	bl	80018d4 <_ZN30FlightControllorImplementation11getInstanceEv>
 8001d64:	62f8      	str	r0, [r7, #44]	; 0x2c

	const TickType_t xFrequency = 1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001d6a:	f015 fa01 	bl	8017170 <xTaskGetTickCount>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	60bb      	str	r3, [r7, #8]

	for( ;; )
	{
		FaultsStatus currentFaultsStatus = flightControllerInstance->getCurrentFaultsStatus();
 8001d72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d74:	f7ff fa28 	bl	80011c8 <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>
 8001d78:	6278      	str	r0, [r7, #36]	; 0x24

		if (currentFaultsStatus != FaultsStatus::NOT_READY)
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	f000 80a0 	beq.w	8001ec2 <_Z19DynamicsProcessTaskPv+0x16a>
		{
			float rollPidOutput = flightControllerInstance->getRollPidInstance().getOut();
 8001d82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d84:	f7ff f938 	bl	8000ff8 <_ZN30FlightControllorImplementation18getRollPidInstanceEv>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f007 f8b2 	bl	8008ef4 <_ZN11PID_Control6getOutEv>
 8001d90:	ed87 0a08 	vstr	s0, [r7, #32]
			float pitchPidOutput = flightControllerInstance->getPitchPidInstance().getOut();
 8001d94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d96:	f7ff f93c 	bl	8001012 <_ZN30FlightControllorImplementation19getPitchPidInstanceEv>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f007 f8a9 	bl	8008ef4 <_ZN11PID_Control6getOutEv>
 8001da2:	ed87 0a07 	vstr	s0, [r7, #28]
			float yawPidOutput = flightControllerInstance->getYawPidInstance().getOut();
 8001da6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001da8:	f7ff f940 	bl	800102c <_ZN30FlightControllorImplementation17getYawPidInstanceEv>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f007 f8a0 	bl	8008ef4 <_ZN11PID_Control6getOutEv>
 8001db4:	ed87 0a06 	vstr	s0, [r7, #24]
			float xPositionPidOutput = flightControllerInstance->getXPositionPidInstance().getOut();
 8001db8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001dba:	f7ff f944 	bl	8001046 <_ZN30FlightControllorImplementation23getXPositionPidInstanceEv>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f007 f897 	bl	8008ef4 <_ZN11PID_Control6getOutEv>
 8001dc6:	ed87 0a05 	vstr	s0, [r7, #20]
			float yPositionPidOutput = flightControllerInstance->getYPositionPidInstance().getOut();
 8001dca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001dcc:	f7ff f948 	bl	8001060 <_ZN30FlightControllorImplementation23getYPositionPidInstanceEv>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f007 f88e 	bl	8008ef4 <_ZN11PID_Control6getOutEv>
 8001dd8:	ed87 0a04 	vstr	s0, [r7, #16]
			float altitudeMpcOutput = flightControllerInstance->getVL53L0Xinstance().getMPCout();
 8001ddc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001dde:	f7ff f9b2 	bl	8001146 <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f007 fb1f 	bl	8009428 <_ZN7VL53L0X9getMPCoutEv>
 8001dea:	ed87 0a03 	vstr	s0, [r7, #12]

			testttt = yPositionPidOutput;
 8001dee:	4a38      	ldr	r2, [pc, #224]	; (8001ed0 <_Z19DynamicsProcessTaskPv+0x178>)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	6013      	str	r3, [r2, #0]

			if (currentFaultsStatus == FaultsStatus::FAILURE)
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d102      	bne.n	8001e00 <_Z19DynamicsProcessTaskPv+0xa8>
			{
				drone::failsafe::slowlyLanding(*flightControllerInstance);
 8001dfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001dfc:	f7ff ff3e 	bl	8001c7c <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation>
			}

			if (currentFaultsStatus == FaultsStatus::CRITICAL)
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d102      	bne.n	8001e0c <_Z19DynamicsProcessTaskPv+0xb4>
			{
				drone::failsafe::quickLanding(*flightControllerInstance);
 8001e06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e08:	f7ff ff7c 	bl	8001d04 <_ZN5drone8failsafe12quickLandingER30FlightControllorImplementation>
			}

			float CCR1_value = 3000.0F + flightControllerInstance->getFrSkyRXinstance().throttle;
 8001e0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e0e:	f7ff f980 	bl	8001112 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001e12:	4603      	mov	r3, r0
 8001e14:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8001e18:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001ed4 <_Z19DynamicsProcessTaskPv+0x17c>
 8001e1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e20:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			float CCR2_value = 3000.0F + flightControllerInstance->getFrSkyRXinstance().throttle;
 8001e24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e26:	f7ff f974 	bl	8001112 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8001e30:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001ed4 <_Z19DynamicsProcessTaskPv+0x17c>
 8001e34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e38:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			float CCR3_value = 3000.0F + flightControllerInstance->getFrSkyRXinstance().throttle;
 8001e3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e3e:	f7ff f968 	bl	8001112 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001e42:	4603      	mov	r3, r0
 8001e44:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8001e48:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001ed4 <_Z19DynamicsProcessTaskPv+0x17c>
 8001e4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e50:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			float CCR4_value = 3000.0F + flightControllerInstance->getFrSkyRXinstance().throttle;
 8001e54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e56:	f7ff f95c 	bl	8001112 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8001e60:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001ed4 <_Z19DynamicsProcessTaskPv+0x17c>
 8001e64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e68:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			if (currentFaultsStatus == FaultsStatus::OKAY)
			{

			}

			if (currentFaultsStatus == FaultsStatus::CRITICAL)
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d107      	bne.n	8001e82 <_Z19DynamicsProcessTaskPv+0x12a>
			{
				CCR1_value = 3000.0F;
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <_Z19DynamicsProcessTaskPv+0x180>)
 8001e74:	63fb      	str	r3, [r7, #60]	; 0x3c
				CCR2_value = 3000.0F;
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <_Z19DynamicsProcessTaskPv+0x180>)
 8001e78:	63bb      	str	r3, [r7, #56]	; 0x38
				CCR3_value = 3000.0F;
 8001e7a:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <_Z19DynamicsProcessTaskPv+0x180>)
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
				CCR4_value = 3000.0F;
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <_Z19DynamicsProcessTaskPv+0x180>)
 8001e80:	633b      	str	r3, [r7, #48]	; 0x30
			}

			TIM3 -> CCR1 = static_cast<uint32_t>(CCR1_value);
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <_Z19DynamicsProcessTaskPv+0x184>)
 8001e84:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e8c:	ee17 2a90 	vmov	r2, s15
 8001e90:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3 -> CCR2 = static_cast<uint32_t>(CCR2_value);
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <_Z19DynamicsProcessTaskPv+0x184>)
 8001e94:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e9c:	ee17 2a90 	vmov	r2, s15
 8001ea0:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3 -> CCR3 = static_cast<uint32_t>(CCR3_value);
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <_Z19DynamicsProcessTaskPv+0x184>)
 8001ea4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eac:	ee17 2a90 	vmov	r2, s15
 8001eb0:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3 -> CCR4 = static_cast<uint32_t>(CCR4_value);
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <_Z19DynamicsProcessTaskPv+0x184>)
 8001eb4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ebc:	ee17 2a90 	vmov	r2, s15
 8001ec0:	641a      	str	r2, [r3, #64]	; 0x40
		}

		vTaskDelayUntil( &xLastWakeTime, xFrequency);
 8001ec2:	f107 0308 	add.w	r3, r7, #8
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f014 ffc9 	bl	8016e60 <vTaskDelayUntil>
	}
 8001ece:	e750      	b.n	8001d72 <_Z19DynamicsProcessTaskPv+0x1a>
 8001ed0:	20000590 	.word	0x20000590
 8001ed4:	453b8000 	.word	0x453b8000
 8001ed8:	453b8000 	.word	0x453b8000
 8001edc:	40000400 	.word	0x40000400

08001ee0 <_Z22isFailureFaultDetectedR30FlightControllorImplementation>:
#include "FlightControllerImplementation.hpp"
long int ttt = 0;
long int ttt2 = 0;
long int ttt3 = 0;
bool isFailureFaultDetected(FlightControllorImplementation& flightControllerInstance)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	const bool isRxDisconnected = flightControllerInstance.getFrSkyRXinstance().getCurrentState()==FrSkyRXState::TIMEOUT;
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff f912 	bl	8001112 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 fceb 	bl	80058cc <_ZNK7FrSkyRX15getCurrentStateEv>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	73fb      	strb	r3, [r7, #15]
	if (isRxDisconnected)
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <_Z22isFailureFaultDetectedR30FlightControllorImplementation+0x2c>
		return true;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <_Z22isFailureFaultDetectedR30FlightControllorImplementation+0x2e>

	return false;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <_Z23isCriticalFaultDetectedR30FlightControllorImplementation>:

bool isCriticalFaultDetected(FlightControllorImplementation& flightControllerInstance)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b084      	sub	sp, #16
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]

	const bool isCrashDetected = flightControllerInstance.getICM42688Pinstance().isCriticalStateDetected();
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff f8d0 	bl	80010c4 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 8001f24:	4603      	mov	r3, r0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f005 ff1c 	bl	8007d64 <_ZN9ICM42688P23isCriticalStateDetectedEv>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	73fb      	strb	r3, [r7, #15]
	if (isCrashDetected)
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <_Z23isCriticalFaultDetectedR30FlightControllorImplementation+0x24>
		return false;
 8001f36:	2300      	movs	r3, #0
 8001f38:	e000      	b.n	8001f3c <_Z23isCriticalFaultDetectedR30FlightControllorImplementation+0x26>

	return false;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <_Z15FaultsCheckTaskPv>:

void FaultsCheckTask(void *pvParameters)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8001f4c:	f7ff fcc2 	bl	80018d4 <_ZN30FlightControllorImplementation11getInstanceEv>
 8001f50:	6178      	str	r0, [r7, #20]

	const TickType_t xFrequency = 1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	613b      	str	r3, [r7, #16]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001f56:	f015 f90b 	bl	8017170 <xTaskGetTickCount>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	60bb      	str	r3, [r7, #8]

	for( ;; )
	{
		ttt++;
 8001f5e:	4b43      	ldr	r3, [pc, #268]	; (800206c <_Z15FaultsCheckTaskPv+0x128>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	3301      	adds	r3, #1
 8001f64:	4a41      	ldr	r2, [pc, #260]	; (800206c <_Z15FaultsCheckTaskPv+0x128>)
 8001f66:	6013      	str	r3, [r2, #0]
		ttt2++;
 8001f68:	4b41      	ldr	r3, [pc, #260]	; (8002070 <_Z15FaultsCheckTaskPv+0x12c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	4a40      	ldr	r2, [pc, #256]	; (8002070 <_Z15FaultsCheckTaskPv+0x12c>)
 8001f70:	6013      	str	r3, [r2, #0]
		ttt3++;
 8001f72:	4b40      	ldr	r3, [pc, #256]	; (8002074 <_Z15FaultsCheckTaskPv+0x130>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	4a3e      	ldr	r2, [pc, #248]	; (8002074 <_Z15FaultsCheckTaskPv+0x130>)
 8001f7a:	6013      	str	r3, [r2, #0]

		if (ttt3>=200)
 8001f7c:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <_Z15FaultsCheckTaskPv+0x130>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2bc7      	cmp	r3, #199	; 0xc7
 8001f82:	dd09      	ble.n	8001f98 <_Z15FaultsCheckTaskPv+0x54>
		{
	    	flightControllerInstance->getHC05instance().printfSensorsValues();
 8001f84:	6978      	ldr	r0, [r7, #20]
 8001f86:	f7ff f8aa 	bl	80010de <_ZN30FlightControllorImplementation15getHC05instanceEv>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f004 f801 	bl	8005f94 <_ZN4HC0519printfSensorsValuesEv>
	    	ttt3 = 0;
 8001f92:	4b38      	ldr	r3, [pc, #224]	; (8002074 <_Z15FaultsCheckTaskPv+0x130>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
		}

		FaultsStatus currentFaultsStatus = flightControllerInstance->getCurrentFaultsStatus();
 8001f98:	6978      	ldr	r0, [r7, #20]
 8001f9a:	f7ff f915 	bl	80011c8 <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>
 8001f9e:	60f8      	str	r0, [r7, #12]

		flightControllerInstance->getPMW3901UYinstance().incrementTimeoutCounter();
 8001fa0:	6978      	ldr	r0, [r7, #20]
 8001fa2:	f7ff f8a9 	bl	80010f8 <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	3336      	adds	r3, #54	; 0x36
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fe4c 	bl	8001c48 <_ZN7Timeout23incrementTimeoutCounterEv>
		flightControllerInstance->getFrSkyRXinstance().incrementTimeoutCounter();
 8001fb0:	6978      	ldr	r0, [r7, #20]
 8001fb2:	f7ff f8ae 	bl	8001112 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	3336      	adds	r3, #54	; 0x36
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fe44 	bl	8001c48 <_ZN7Timeout23incrementTimeoutCounterEv>
		flightControllerInstance->getMB1043instance().incrementTimeoutCounter();
 8001fc0:	6978      	ldr	r0, [r7, #20]
 8001fc2:	f7ff f8b3 	bl	800112c <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	3336      	adds	r3, #54	; 0x36
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fe3c 	bl	8001c48 <_ZN7Timeout23incrementTimeoutCounterEv>

		flightControllerInstance->getBuzzerinstance().run();
 8001fd0:	6978      	ldr	r0, [r7, #20]
 8001fd2:	f7ff f85e 	bl	8001092 <_ZN30FlightControllorImplementation17getBuzzerinstanceEv>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f003 f9c0 	bl	800535e <_ZN6Buzzer3runEv>
		flightControllerInstance->getBatteryManagementinstance().run();
 8001fde:	6978      	ldr	r0, [r7, #20]
 8001fe0:	f7ff f8be 	bl	8001160 <_ZN30FlightControllorImplementation28getBatteryManagementinstanceEv>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f003 f82c 	bl	8005044 <_ZN17BatteryManagement3runEv>

		if (isCriticalFaultDetected(*flightControllerInstance) || currentFaultsStatus==FaultsStatus::CRITICAL)
 8001fec:	6978      	ldr	r0, [r7, #20]
 8001fee:	f7ff ff92 	bl	8001f16 <_Z23isCriticalFaultDetectedR30FlightControllorImplementation>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d102      	bne.n	8001ffe <_Z15FaultsCheckTaskPv+0xba>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d101      	bne.n	8002002 <_Z15FaultsCheckTaskPv+0xbe>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <_Z15FaultsCheckTaskPv+0xc0>
 8002002:	2300      	movs	r3, #0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d004      	beq.n	8002012 <_Z15FaultsCheckTaskPv+0xce>
		{
			flightControllerInstance->setCurrentFaultsStatus(FaultsStatus::CRITICAL);
 8002008:	2103      	movs	r1, #3
 800200a:	6978      	ldr	r0, [r7, #20]
 800200c:	f7ff f8e9 	bl	80011e2 <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>
 8002010:	e025      	b.n	800205e <_Z15FaultsCheckTaskPv+0x11a>
		}
		else if (isFailureFaultDetected(*flightControllerInstance) || currentFaultsStatus==FaultsStatus::FAILURE)
 8002012:	6978      	ldr	r0, [r7, #20]
 8002014:	f7ff ff64 	bl	8001ee0 <_Z22isFailureFaultDetectedR30FlightControllorImplementation>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <_Z15FaultsCheckTaskPv+0xe0>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d101      	bne.n	8002028 <_Z15FaultsCheckTaskPv+0xe4>
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <_Z15FaultsCheckTaskPv+0xe6>
 8002028:	2300      	movs	r3, #0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d004      	beq.n	8002038 <_Z15FaultsCheckTaskPv+0xf4>
		{
			flightControllerInstance->setCurrentFaultsStatus(FaultsStatus::CRITICAL);
 800202e:	2103      	movs	r1, #3
 8002030:	6978      	ldr	r0, [r7, #20]
 8002032:	f7ff f8d6 	bl	80011e2 <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>
 8002036:	e012      	b.n	800205e <_Z15FaultsCheckTaskPv+0x11a>
		}
		else if (flightControllerInstance->getFrSkyRXinstance().getCurrentState() == FrSkyRXState::READY)
 8002038:	6978      	ldr	r0, [r7, #20]
 800203a:	f7ff f86a 	bl	8001112 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 800203e:	4603      	mov	r3, r0
 8002040:	4618      	mov	r0, r3
 8002042:	f003 fc43 	bl	80058cc <_ZNK7FrSkyRX15getCurrentStateEv>
 8002046:	4603      	mov	r3, r0
 8002048:	2b03      	cmp	r3, #3
 800204a:	bf0c      	ite	eq
 800204c:	2301      	moveq	r3, #1
 800204e:	2300      	movne	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <_Z15FaultsCheckTaskPv+0x11a>
		{
			flightControllerInstance->setCurrentFaultsStatus(FaultsStatus::OKAY);
 8002056:	2100      	movs	r1, #0
 8002058:	6978      	ldr	r0, [r7, #20]
 800205a:	f7ff f8c2 	bl	80011e2 <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>
		}

		vTaskDelayUntil( &xLastWakeTime, xFrequency);
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	2101      	movs	r1, #1
 8002064:	4618      	mov	r0, r3
 8002066:	f014 fefb 	bl	8016e60 <vTaskDelayUntil>
	}
 800206a:	e778      	b.n	8001f5e <_Z15FaultsCheckTaskPv+0x1a>
 800206c:	20000594 	.word	0x20000594
 8002070:	20000598 	.word	0x20000598
 8002074:	2000059c 	.word	0x2000059c

08002078 <_Z19sensorsDataReadTaskPv>:
extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart4;
extern UART_HandleTypeDef huart6;

void sensorsDataReadTask(void *pvParameters)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af02      	add	r7, sp, #8
 800207e:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8002080:	f7ff fc28 	bl	80018d4 <_ZN30FlightControllorImplementation11getInstanceEv>
 8002084:	6178      	str	r0, [r7, #20]

	HAL_TIM_Base_Start_IT(&htim4);
 8002086:	48a7      	ldr	r0, [pc, #668]	; (8002324 <_Z19sensorsDataReadTaskPv+0x2ac>)
 8002088:	f00c fe84 	bl	800ed94 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800208c:	2200      	movs	r2, #0
 800208e:	2105      	movs	r1, #5
 8002090:	2008      	movs	r0, #8
 8002092:	f007 ffbd 	bl	800a010 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002096:	2008      	movs	r0, #8
 8002098:	f007 ffd6 	bl	800a048 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800209c:	2200      	movs	r2, #0
 800209e:	2105      	movs	r1, #5
 80020a0:	200a      	movs	r0, #10
 80020a2:	f007 ffb5 	bl	800a010 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80020a6:	200a      	movs	r0, #10
 80020a8:	f007 ffce 	bl	800a048 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2105      	movs	r1, #5
 80020b0:	2017      	movs	r0, #23
 80020b2:	f007 ffad 	bl	800a010 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020b6:	2017      	movs	r0, #23
 80020b8:	f007 ffc6 	bl	800a048 <HAL_NVIC_EnableIRQ>
	NVIC_SetPriorityGrouping(0);
 80020bc:	2000      	movs	r0, #0
 80020be:	f7ff fd7b 	bl	8001bb8 <__NVIC_SetPriorityGrouping>

	bool startup;
	if(!flightControllerInstance->getLIS3MDLTRinstance().defaultInit())
 80020c2:	6978      	ldr	r0, [r7, #20]
 80020c4:	f7fe ffd9 	bl	800107a <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f006 f9ee 	bl	80084ac <_ZN9LIS3MDLTR11defaultInitEv>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f083 0301 	eor.w	r3, r3, #1
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <_Z19sensorsDataReadTaskPv+0x68>
	  startup = false;
 80020dc:	2300      	movs	r3, #0
 80020de:	74fb      	strb	r3, [r7, #19]
	flightControllerInstance->getLIS3MDLTRinstance().update();
 80020e0:	6978      	ldr	r0, [r7, #20]
 80020e2:	f7fe ffca 	bl	800107a <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f006 f8a9 	bl	8008240 <_ZN9LIS3MDLTR6updateEv>

	if (!flightControllerInstance->getICM42688Pinstance().defaultInit())
 80020ee:	6978      	ldr	r0, [r7, #20]
 80020f0:	f7fe ffe8 	bl	80010c4 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f005 f8fc 	bl	80072f4 <_ZN9ICM42688P11defaultInitEv>
 80020fc:	4603      	mov	r3, r0
 80020fe:	f083 0301 	eor.w	r3, r3, #1
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <_Z19sensorsDataReadTaskPv+0x94>
	  startup = false;
 8002108:	2300      	movs	r3, #0
 800210a:	74fb      	strb	r3, [r7, #19]
	flightControllerInstance->getICM42688Pinstance().update();
 800210c:	6978      	ldr	r0, [r7, #20]
 800210e:	f7fe ffd9 	bl	80010c4 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 8002112:	4603      	mov	r3, r0
 8002114:	4618      	mov	r0, r3
 8002116:	f005 fc11 	bl	800793c <_ZN9ICM42688P6updateEv>

	if (!flightControllerInstance->getBMP390instance().defaultInit())
 800211a:	6978      	ldr	r0, [r7, #20]
 800211c:	f7fe ffc5 	bl	80010aa <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 8002120:	4603      	mov	r3, r0
 8002122:	4618      	mov	r0, r3
 8002124:	f001 ff6c 	bl	8004000 <_ZN6BMP39011defaultInitEv>
 8002128:	4603      	mov	r3, r0
 800212a:	f083 0301 	eor.w	r3, r3, #1
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <_Z19sensorsDataReadTaskPv+0xc0>
	  startup = false;
 8002134:	2300      	movs	r3, #0
 8002136:	74fb      	strb	r3, [r7, #19]
	flightControllerInstance->getBMP390instance().update();
 8002138:	6978      	ldr	r0, [r7, #20]
 800213a:	f7fe ffb6 	bl	80010aa <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 800213e:	4603      	mov	r3, r0
 8002140:	4618      	mov	r0, r3
 8002142:	f002 f818 	bl	8004176 <_ZN6BMP3906updateEv>

	flightControllerInstance->getFrSkyRXinstance().begin();
 8002146:	6978      	ldr	r0, [r7, #20]
 8002148:	f7fe ffe3 	bl	8001112 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 800214c:	4603      	mov	r3, r0
 800214e:	4618      	mov	r0, r3
 8002150:	f003 fa36 	bl	80055c0 <_ZN7FrSkyRX5beginEv>
	flightControllerInstance->getMB1043instance().begin();
 8002154:	6978      	ldr	r0, [r7, #20]
 8002156:	f7fe ffe9 	bl	800112c <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 800215a:	4603      	mov	r3, r0
 800215c:	4618      	mov	r0, r3
 800215e:	f006 faaf 	bl	80086c0 <_ZN6MB10435beginEv>
	flightControllerInstance->getPMW3901UYinstance().begin();
 8002162:	6978      	ldr	r0, [r7, #20]
 8002164:	f7fe ffc8 	bl	80010f8 <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 8002168:	4603      	mov	r3, r0
 800216a:	4618      	mov	r0, r3
 800216c:	f006 fc1e 	bl	80089ac <_ZN9PMW3901UY5beginEv>
	flightControllerInstance->getVL53L0Xinstance().begin();
 8002170:	6978      	ldr	r0, [r7, #20]
 8002172:	f7fe ffe8 	bl	8001146 <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 8002176:	4603      	mov	r3, r0
 8002178:	4618      	mov	r0, r3
 800217a:	f007 f891 	bl	80092a0 <_ZN7VL53L0X5beginEv>

	uint32_t currentSensor = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
	xTaskCreate(DynamicsProcessTask,"DynamicsProcessTask",2048,NULL,tskIDLE_PRIORITY+2, flightControllerInstance->getDynamicsProcessHandlerPtr());
 8002182:	6978      	ldr	r0, [r7, #20]
 8002184:	f7ff f813 	bl	80011ae <_ZN30FlightControllorImplementation28getDynamicsProcessHandlerPtrEv>
 8002188:	4603      	mov	r3, r0
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	2302      	movs	r3, #2
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	2300      	movs	r3, #0
 8002192:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002196:	4964      	ldr	r1, [pc, #400]	; (8002328 <_Z19sensorsDataReadTaskPv+0x2b0>)
 8002198:	4864      	ldr	r0, [pc, #400]	; (800232c <_Z19sensorsDataReadTaskPv+0x2b4>)
 800219a:	f014 fd2b 	bl	8016bf4 <xTaskCreate>
	xTaskCreate(FaultsCheckTask,"FaultsCheckTask",1024,NULL,tskIDLE_PRIORITY+2, flightControllerInstance->getFaultsCheckHandlerPtr());
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f7fe ffeb 	bl	800117a <_ZN30FlightControllorImplementation24getFaultsCheckHandlerPtrEv>
 80021a4:	4603      	mov	r3, r0
 80021a6:	9301      	str	r3, [sp, #4]
 80021a8:	2302      	movs	r3, #2
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2300      	movs	r3, #0
 80021ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021b2:	495f      	ldr	r1, [pc, #380]	; (8002330 <_Z19sensorsDataReadTaskPv+0x2b8>)
 80021b4:	485f      	ldr	r0, [pc, #380]	; (8002334 <_Z19sensorsDataReadTaskPv+0x2bc>)
 80021b6:	f014 fd1d 	bl	8016bf4 <xTaskCreate>

	while (1)
	{
		if (xTaskNotifyWait(0x00, 0xFFFFFFFFUL, &currentSensor, portMAX_DELAY) == pdTRUE)
 80021ba:	f107 0208 	add.w	r2, r7, #8
 80021be:	f04f 33ff 	mov.w	r3, #4294967295
 80021c2:	f04f 31ff 	mov.w	r1, #4294967295
 80021c6:	2000      	movs	r0, #0
 80021c8:	f015 f9cc 	bl	8017564 <xTaskNotifyWait>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	bf0c      	ite	eq
 80021d2:	2301      	moveq	r3, #1
 80021d4:	2300      	movne	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0ee      	beq.n	80021ba <_Z19sensorsDataReadTaskPv+0x142>
		{
			if (currentSensor & EnumSensorsInterrupt::ICM42688P_t)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00e      	beq.n	8002204 <_Z19sensorsDataReadTaskPv+0x18c>
			{
				flightControllerInstance->getICM42688Pinstance().update();
 80021e6:	6978      	ldr	r0, [r7, #20]
 80021e8:	f7fe ff6c 	bl	80010c4 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80021ec:	4603      	mov	r3, r0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f005 fba4 	bl	800793c <_ZN9ICM42688P6updateEv>
				flightControllerInstance->getICM42688Pinstance().incrementTaskCounter();
 80021f4:	6978      	ldr	r0, [r7, #20]
 80021f6:	f7fe ff65 	bl	80010c4 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80021fa:	4603      	mov	r3, r0
 80021fc:	3340      	adds	r3, #64	; 0x40
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fd10 	bl	8001c24 <_ZN12CallsCounter20incrementTaskCounterEv>
				if (testt==duplicates)
					duplicatesCounter++;
				duplicates = testt;*/
			}

			if (currentSensor & EnumSensorsInterrupt::BMP390_t)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00e      	beq.n	800222c <_Z19sensorsDataReadTaskPv+0x1b4>
			{
				flightControllerInstance->getBMP390instance().update();
 800220e:	6978      	ldr	r0, [r7, #20]
 8002210:	f7fe ff4b 	bl	80010aa <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 8002214:	4603      	mov	r3, r0
 8002216:	4618      	mov	r0, r3
 8002218:	f001 ffad 	bl	8004176 <_ZN6BMP3906updateEv>
				flightControllerInstance->getBMP390instance().incrementTaskCounter();
 800221c:	6978      	ldr	r0, [r7, #20]
 800221e:	f7fe ff44 	bl	80010aa <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 8002222:	4603      	mov	r3, r0
 8002224:	3340      	adds	r3, #64	; 0x40
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fcfc 	bl	8001c24 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			if (currentSensor & EnumSensorsInterrupt::LIS3MDLTR_t)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00e      	beq.n	8002254 <_Z19sensorsDataReadTaskPv+0x1dc>
			{
				flightControllerInstance->getLIS3MDLTRinstance().update();
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f7fe ff1f 	bl	800107a <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 800223c:	4603      	mov	r3, r0
 800223e:	4618      	mov	r0, r3
 8002240:	f005 fffe 	bl	8008240 <_ZN9LIS3MDLTR6updateEv>
				flightControllerInstance->getLIS3MDLTRinstance().incrementTaskCounter();
 8002244:	6978      	ldr	r0, [r7, #20]
 8002246:	f7fe ff18 	bl	800107a <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 800224a:	4603      	mov	r3, r0
 800224c:	3340      	adds	r3, #64	; 0x40
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fce8 	bl	8001c24 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			if (currentSensor & EnumSensorsInterrupt::PMW_t)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d011      	beq.n	8002282 <_Z19sensorsDataReadTaskPv+0x20a>
			{
				__HAL_UART_FLUSH_DRREGISTER(&huart2);
 800225e:	4b36      	ldr	r3, [pc, #216]	; (8002338 <_Z19sensorsDataReadTaskPv+0x2c0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
				flightControllerInstance->getPMW3901UYinstance().update();
 8002264:	6978      	ldr	r0, [r7, #20]
 8002266:	f7fe ff47 	bl	80010f8 <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 800226a:	4603      	mov	r3, r0
 800226c:	4618      	mov	r0, r3
 800226e:	f006 fbad 	bl	80089cc <_ZN9PMW3901UY6updateEv>
				flightControllerInstance->getPMW3901UYinstance().incrementTaskCounter();
 8002272:	6978      	ldr	r0, [r7, #20]
 8002274:	f7fe ff40 	bl	80010f8 <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 8002278:	4603      	mov	r3, r0
 800227a:	3340      	adds	r3, #64	; 0x40
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fcd1 	bl	8001c24 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			if (currentSensor & EnumSensorsInterrupt::REMOTERX_t)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	d01b      	beq.n	80022c4 <_Z19sensorsDataReadTaskPv+0x24c>
			{
				FaultsStatus faultStatus = flightControllerInstance->getCurrentFaultsStatus();
 800228c:	6978      	ldr	r0, [r7, #20]
 800228e:	f7fe ff9b 	bl	80011c8 <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>
 8002292:	60f8      	str	r0, [r7, #12]

				if (faultStatus != FaultsStatus::FAILURE && faultStatus != FaultsStatus::CRITICAL)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d014      	beq.n	80022c4 <_Z19sensorsDataReadTaskPv+0x24c>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d011      	beq.n	80022c4 <_Z19sensorsDataReadTaskPv+0x24c>
				{
					__HAL_UART_FLUSH_DRREGISTER(&huart3);
 80022a0:	4b26      	ldr	r3, [pc, #152]	; (800233c <_Z19sensorsDataReadTaskPv+0x2c4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
					flightControllerInstance->getFrSkyRXinstance().update();
 80022a6:	6978      	ldr	r0, [r7, #20]
 80022a8:	f7fe ff33 	bl	8001112 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 80022ac:	4603      	mov	r3, r0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f003 f996 	bl	80055e0 <_ZN7FrSkyRX6updateEv>
					flightControllerInstance->getFrSkyRXinstance().incrementTaskCounter();
 80022b4:	6978      	ldr	r0, [r7, #20]
 80022b6:	f7fe ff2c 	bl	8001112 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 80022ba:	4603      	mov	r3, r0
 80022bc:	3340      	adds	r3, #64	; 0x40
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fcb0 	bl	8001c24 <_ZN12CallsCounter20incrementTaskCounterEv>
				}
			}

			if (currentSensor & EnumSensorsInterrupt::SONAR_t)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	f003 0320 	and.w	r3, r3, #32
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d011      	beq.n	80022f2 <_Z19sensorsDataReadTaskPv+0x27a>
			{
			   __HAL_UART_FLUSH_DRREGISTER(&huart4);
 80022ce:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <_Z19sensorsDataReadTaskPv+0x2c8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
			   flightControllerInstance->getMB1043instance().update();
 80022d4:	6978      	ldr	r0, [r7, #20]
 80022d6:	f7fe ff29 	bl	800112c <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 80022da:	4603      	mov	r3, r0
 80022dc:	4618      	mov	r0, r3
 80022de:	f006 f9ff 	bl	80086e0 <_ZN6MB10436updateEv>
			   flightControllerInstance->getMB1043instance().incrementTaskCounter();
 80022e2:	6978      	ldr	r0, [r7, #20]
 80022e4:	f7fe ff22 	bl	800112c <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 80022e8:	4603      	mov	r3, r0
 80022ea:	3340      	adds	r3, #64	; 0x40
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fc99 	bl	8001c24 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			if (currentSensor & EnumSensorsInterrupt::VL53L0X_t)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f43f af5e 	beq.w	80021ba <_Z19sensorsDataReadTaskPv+0x142>
			{
			   __HAL_UART_FLUSH_DRREGISTER(&huart6);
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <_Z19sensorsDataReadTaskPv+0x2cc>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
			   flightControllerInstance->getVL53L0Xinstance().update();
 8002304:	6978      	ldr	r0, [r7, #20]
 8002306:	f7fe ff1e 	bl	8001146 <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 800230a:	4603      	mov	r3, r0
 800230c:	4618      	mov	r0, r3
 800230e:	f006 ffd9 	bl	80092c4 <_ZN7VL53L0X6updateEv>
			   flightControllerInstance->getVL53L0Xinstance().incrementTaskCounter();
 8002312:	6978      	ldr	r0, [r7, #20]
 8002314:	f7fe ff17 	bl	8001146 <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 8002318:	4603      	mov	r3, r0
 800231a:	3340      	adds	r3, #64	; 0x40
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fc81 	bl	8001c24 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			//taskCounter++;
		}
	}
 8002322:	e74a      	b.n	80021ba <_Z19sensorsDataReadTaskPv+0x142>
 8002324:	2000082c 	.word	0x2000082c
 8002328:	0801cfb8 	.word	0x0801cfb8
 800232c:	08001d59 	.word	0x08001d59
 8002330:	0801cfcc 	.word	0x0801cfcc
 8002334:	08001f45 	.word	0x08001f45
 8002338:	200008fc 	.word	0x200008fc
 800233c:	20000940 	.word	0x20000940
 8002340:	20000874 	.word	0x20000874
 8002344:	20000984 	.word	0x20000984

08002348 <HAL_TIM_PeriodElapsedCallback>:
#include "stm32f4xx_hal.h"
#include "FlightControllerImplementation.hpp"

int timCounter2 = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800235a:	f007 f94b 	bl	80095f4 <HAL_IncTick>

  if (htim->Instance == TIM4)
  {
	  //timCounter2++;
  }
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40010000 	.word	0x40010000

0800236c <HAL_GPIO_EXTI_Callback>:

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af02      	add	r7, sp, #8
 8002372:	4603      	mov	r3, r0
 8002374:	80fb      	strh	r3, [r7, #6]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 800237a:	f7ff faab 	bl	80018d4 <_ZN30FlightControllorImplementation11getInstanceEv>
 800237e:	6178      	str	r0, [r7, #20]
	TaskHandle_t* sensorsDataReadHandler = flightControllerInstance->getSensorsDataReadHandlerPtr();
 8002380:	6978      	ldr	r0, [r7, #20]
 8002382:	f7fe ff07 	bl	8001194 <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>
 8002386:	6138      	str	r0, [r7, #16]

	switch (GPIO_Pin)
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800238e:	d024      	beq.n	80023da <HAL_GPIO_EXTI_Callback+0x6e>
 8002390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002394:	dc60      	bgt.n	8002458 <HAL_GPIO_EXTI_Callback+0xec>
 8002396:	2b04      	cmp	r3, #4
 8002398:	d040      	beq.n	800241c <HAL_GPIO_EXTI_Callback+0xb0>
 800239a:	2b10      	cmp	r3, #16
 800239c:	d15c      	bne.n	8002458 <HAL_GPIO_EXTI_Callback+0xec>
	{
	case (GPIO_PIN_4):
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::ICM42688P_t, eSetBits, &pxHigherPriorityTaskWoken);
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	2300      	movs	r3, #0
 80023aa:	2201      	movs	r2, #1
 80023ac:	2101      	movs	r1, #1
 80023ae:	f015 f933 	bl	8017618 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d007      	beq.n	80023c8 <HAL_GPIO_EXTI_Callback+0x5c>
 80023b8:	4b29      	ldr	r3, [pc, #164]	; (8002460 <HAL_GPIO_EXTI_Callback+0xf4>)
 80023ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getICM42688Pinstance().incrementInterruptCounter();
 80023c8:	6978      	ldr	r0, [r7, #20]
 80023ca:	f7fe fe7b 	bl	80010c4 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80023ce:	4603      	mov	r3, r0
 80023d0:	3340      	adds	r3, #64	; 0x40
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fc14 	bl	8001c00 <_ZN12CallsCounter25incrementInterruptCounterEv>
		break;
 80023d8:	e03e      	b.n	8002458 <HAL_GPIO_EXTI_Callback+0xec>

	case (GPIO_PIN_8):
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::BMP390_t, eSetBits, &pxHigherPriorityTaskWoken);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2300      	movs	r3, #0
 80023e6:	2201      	movs	r2, #1
 80023e8:	2102      	movs	r1, #2
 80023ea:	f015 f915 	bl	8017618 <xTaskGenericNotifyFromISR>
		if (pxHigherPriorityTaskWoken)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <HAL_GPIO_EXTI_Callback+0x9e>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <HAL_GPIO_EXTI_Callback+0x9e>
 80023fa:	4b19      	ldr	r3, [pc, #100]	; (8002460 <HAL_GPIO_EXTI_Callback+0xf4>)
 80023fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	f3bf 8f4f 	dsb	sy
 8002406:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getBMP390instance().incrementInterruptCounter();
 800240a:	6978      	ldr	r0, [r7, #20]
 800240c:	f7fe fe4d 	bl	80010aa <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 8002410:	4603      	mov	r3, r0
 8002412:	3340      	adds	r3, #64	; 0x40
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fbf3 	bl	8001c00 <_ZN12CallsCounter25incrementInterruptCounterEv>
		break;
 800241a:	e01d      	b.n	8002458 <HAL_GPIO_EXTI_Callback+0xec>

	case (GPIO_PIN_2):
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::LIS3MDLTR_t, eSetBits, &pxHigherPriorityTaskWoken);
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	f107 030c 	add.w	r3, r7, #12
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	2300      	movs	r3, #0
 8002428:	2201      	movs	r2, #1
 800242a:	2104      	movs	r1, #4
 800242c:	f015 f8f4 	bl	8017618 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d007      	beq.n	8002446 <HAL_GPIO_EXTI_Callback+0xda>
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	f3bf 8f4f 	dsb	sy
 8002442:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getLIS3MDLTRinstance().incrementInterruptCounter();
 8002446:	6978      	ldr	r0, [r7, #20]
 8002448:	f7fe fe17 	bl	800107a <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 800244c:	4603      	mov	r3, r0
 800244e:	3340      	adds	r3, #64	; 0x40
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fbd5 	bl	8001c00 <_ZN12CallsCounter25incrementInterruptCounterEv>
		break;
 8002456:	bf00      	nop
	}
}
 8002458:	bf00      	nop
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	e000ed04 	.word	0xe000ed04

08002464 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af02      	add	r7, sp, #8
 800246a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8002470:	f7ff fa30 	bl	80018d4 <_ZN30FlightControllorImplementation11getInstanceEv>
 8002474:	6178      	str	r0, [r7, #20]
	TaskHandle_t* sensorsDataReadHandler = flightControllerInstance->getSensorsDataReadHandlerPtr();
 8002476:	6978      	ldr	r0, [r7, #20]
 8002478:	f7fe fe8c 	bl	8001194 <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>
 800247c:	6138      	str	r0, [r7, #16]

	if (huart->Instance == USART2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a46      	ldr	r2, [pc, #280]	; (800259c <HAL_UART_RxCpltCallback+0x138>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d11d      	bne.n	80024c4 <HAL_UART_RxCpltCallback+0x60>
	{
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::PMW_t, eSetBits, &pxHigherPriorityTaskWoken);
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	2300      	movs	r3, #0
 8002494:	2201      	movs	r2, #1
 8002496:	2108      	movs	r1, #8
 8002498:	f015 f8be 	bl	8017618 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d007      	beq.n	80024b2 <HAL_UART_RxCpltCallback+0x4e>
 80024a2:	4b3f      	ldr	r3, [pc, #252]	; (80025a0 <HAL_UART_RxCpltCallback+0x13c>)
 80024a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	f3bf 8f4f 	dsb	sy
 80024ae:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getPMW3901UYinstance().incrementInterruptCounter();
 80024b2:	6978      	ldr	r0, [r7, #20]
 80024b4:	f7fe fe20 	bl	80010f8 <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 80024b8:	4603      	mov	r3, r0
 80024ba:	3340      	adds	r3, #64	; 0x40
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fb9f 	bl	8001c00 <_ZN12CallsCounter25incrementInterruptCounterEv>
	{
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::VL53L0X_t, eSetBits, &pxHigherPriorityTaskWoken);
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
		flightControllerInstance->getVL53L0Xinstance().incrementInterruptCounter();
	}
}
 80024c2:	e067      	b.n	8002594 <HAL_UART_RxCpltCallback+0x130>
	} else if (huart->Instance == USART3)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a36      	ldr	r2, [pc, #216]	; (80025a4 <HAL_UART_RxCpltCallback+0x140>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d11d      	bne.n	800250a <HAL_UART_RxCpltCallback+0xa6>
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::REMOTERX_t, eSetBits, &pxHigherPriorityTaskWoken);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	f107 030c 	add.w	r3, r7, #12
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	2300      	movs	r3, #0
 80024da:	2201      	movs	r2, #1
 80024dc:	2110      	movs	r1, #16
 80024de:	f015 f89b 	bl	8017618 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d007      	beq.n	80024f8 <HAL_UART_RxCpltCallback+0x94>
 80024e8:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HAL_UART_RxCpltCallback+0x13c>)
 80024ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	f3bf 8f4f 	dsb	sy
 80024f4:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getFrSkyRXinstance().incrementInterruptCounter();
 80024f8:	6978      	ldr	r0, [r7, #20]
 80024fa:	f7fe fe0a 	bl	8001112 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 80024fe:	4603      	mov	r3, r0
 8002500:	3340      	adds	r3, #64	; 0x40
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fb7c 	bl	8001c00 <_ZN12CallsCounter25incrementInterruptCounterEv>
}
 8002508:	e044      	b.n	8002594 <HAL_UART_RxCpltCallback+0x130>
	} else if (huart->Instance == UART4)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a26      	ldr	r2, [pc, #152]	; (80025a8 <HAL_UART_RxCpltCallback+0x144>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d11d      	bne.n	8002550 <HAL_UART_RxCpltCallback+0xec>
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::SONAR_t, eSetBits, &pxHigherPriorityTaskWoken);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	f107 030c 	add.w	r3, r7, #12
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	2300      	movs	r3, #0
 8002520:	2201      	movs	r2, #1
 8002522:	2120      	movs	r1, #32
 8002524:	f015 f878 	bl	8017618 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <HAL_UART_RxCpltCallback+0xda>
 800252e:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <HAL_UART_RxCpltCallback+0x13c>)
 8002530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getMB1043instance().incrementInterruptCounter();
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7fe fdf4 	bl	800112c <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 8002544:	4603      	mov	r3, r0
 8002546:	3340      	adds	r3, #64	; 0x40
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fb59 	bl	8001c00 <_ZN12CallsCounter25incrementInterruptCounterEv>
}
 800254e:	e021      	b.n	8002594 <HAL_UART_RxCpltCallback+0x130>
	}else if (huart->Instance == USART6)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a15      	ldr	r2, [pc, #84]	; (80025ac <HAL_UART_RxCpltCallback+0x148>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d11c      	bne.n	8002594 <HAL_UART_RxCpltCallback+0x130>
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::VL53L0X_t, eSetBits, &pxHigherPriorityTaskWoken);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	f107 030c 	add.w	r3, r7, #12
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	2300      	movs	r3, #0
 8002566:	2201      	movs	r2, #1
 8002568:	2140      	movs	r1, #64	; 0x40
 800256a:	f015 f855 	bl	8017618 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d007      	beq.n	8002584 <HAL_UART_RxCpltCallback+0x120>
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_UART_RxCpltCallback+0x13c>)
 8002576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	f3bf 8f4f 	dsb	sy
 8002580:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getVL53L0Xinstance().incrementInterruptCounter();
 8002584:	6978      	ldr	r0, [r7, #20]
 8002586:	f7fe fdde 	bl	8001146 <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 800258a:	4603      	mov	r3, r0
 800258c:	3340      	adds	r3, #64	; 0x40
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fb36 	bl	8001c00 <_ZN12CallsCounter25incrementInterruptCounterEv>
}
 8002594:	bf00      	nop
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40004400 	.word	0x40004400
 80025a0:	e000ed04 	.word	0xe000ed04
 80025a4:	40004800 	.word	0x40004800
 80025a8:	40004c00 	.word	0x40004c00
 80025ac:	40011400 	.word	0x40011400

080025b0 <main>:
static void MX_TIM4_Init(void);
static void MX_TIM3_Init();
static void MX_SDIO_SD_Init(void);

int main(void)
{
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af02      	add	r7, sp, #8
  HAL_Init();//1.19 17 0.38 37 88.20
 80025b6:	f006 fffb 	bl	80095b0 <HAL_Init>
  SystemClock_Config();
 80025ba:	f000 f88d 	bl	80026d8 <_Z18SystemClock_Configv>

  MX_GPIO_Init();
 80025be:	f000 fc3d 	bl	8002e3c <_ZL12MX_GPIO_Initv>
  MX_USB_DEVICE_Init();
 80025c2:	f015 fda3 	bl	801810c <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 80025c6:	f000 fbd3 	bl	8002d70 <_ZL11MX_DMA_Initv>
  MX_SPI2_Init();
 80025ca:	f000 f98f 	bl	80028ec <_ZL12MX_SPI2_Initv>
  MX_USART1_UART_Init();
 80025ce:	f000 fb13 	bl	8002bf8 <_ZL19MX_USART1_UART_Initv>
  MX_SDIO_SD_Init();
 80025d2:	f000 f951 	bl	8002878 <_ZL15MX_SDIO_SD_Initv>
  MX_USART3_UART_Init();
 80025d6:	f000 fb6b 	bl	8002cb0 <_ZL19MX_USART3_UART_Initv>
  MX_ADC1_Init();
 80025da:	f000 f8f1 	bl	80027c0 <_ZL12MX_ADC1_Initv>
  MX_UART4_Init();
 80025de:	f000 fadd 	bl	8002b9c <_ZL13MX_UART4_Initv>
  MX_USART2_UART_Init();
 80025e2:	f000 fb37 	bl	8002c54 <_ZL19MX_USART2_UART_Initv>
  MX_USART6_UART_Init();
 80025e6:	f000 fb95 	bl	8002d14 <_ZL19MX_USART6_UART_Initv>
  MX_TIM4_Init();
 80025ea:	f000 fa7b 	bl	8002ae4 <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 80025ee:	f000 f9b9 	bl	8002964 <_ZL12MX_TIM3_Initv>

  FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 80025f2:	f7ff f96f 	bl	80018d4 <_ZN30FlightControllorImplementation11getInstanceEv>
 80025f6:	6078      	str	r0, [r7, #4]

  flightControllerInstance->getHC05instance().addSensor(&flightControllerInstance->getBatteryManagementinstance());
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7fe fd70 	bl	80010de <_ZN30FlightControllorImplementation15getHC05instanceEv>
 80025fe:	4604      	mov	r4, r0
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7fe fdad 	bl	8001160 <_ZN30FlightControllorImplementation28getBatteryManagementinstanceEv>
 8002606:	4603      	mov	r3, r0
 8002608:	4619      	mov	r1, r3
 800260a:	4620      	mov	r0, r4
 800260c:	f003 fcb1 	bl	8005f72 <_ZN4HC059addSensorEP15PrintableSensor>
  flightControllerInstance->getHC05instance().addSensor(&flightControllerInstance->getMB1043instance());
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7fe fd64 	bl	80010de <_ZN30FlightControllorImplementation15getHC05instanceEv>
 8002616:	4604      	mov	r4, r0
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7fe fd87 	bl	800112c <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 800261e:	4603      	mov	r3, r0
 8002620:	4619      	mov	r1, r3
 8002622:	4620      	mov	r0, r4
 8002624:	f003 fca5 	bl	8005f72 <_ZN4HC059addSensorEP15PrintableSensor>
  flightControllerInstance->getHC05instance().addSensor(&flightControllerInstance->getFrSkyRXinstance());
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7fe fd58 	bl	80010de <_ZN30FlightControllorImplementation15getHC05instanceEv>
 800262e:	4604      	mov	r4, r0
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7fe fd6e 	bl	8001112 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8002636:	4603      	mov	r3, r0
 8002638:	4619      	mov	r1, r3
 800263a:	4620      	mov	r0, r4
 800263c:	f003 fc99 	bl	8005f72 <_ZN4HC059addSensorEP15PrintableSensor>

  flightControllerInstance->getHC05instance().addSensorParameter(HC05::SENSOR_DATA_PARAMETER::FRSKY_THROTTLE);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7fe fd4c 	bl	80010de <_ZN30FlightControllorImplementation15getHC05instanceEv>
 8002646:	4603      	mov	r3, r0
 8002648:	211a      	movs	r1, #26
 800264a:	4618      	mov	r0, r3
 800264c:	f003 fcec 	bl	8006028 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>
  flightControllerInstance->getHC05instance().addSensorParameter(HC05::SENSOR_DATA_PARAMETER::SONAR_DISTANCE);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7fe fd44 	bl	80010de <_ZN30FlightControllorImplementation15getHC05instanceEv>
 8002656:	4603      	mov	r3, r0
 8002658:	2113      	movs	r1, #19
 800265a:	4618      	mov	r0, r3
 800265c:	f003 fce4 	bl	8006028 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>
  flightControllerInstance->getHC05instance().printfSensorsValues();
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7fe fd3c 	bl	80010de <_ZN30FlightControllorImplementation15getHC05instanceEv>
 8002666:	4603      	mov	r3, r0
 8002668:	4618      	mov	r0, r3
 800266a:	f003 fc93 	bl	8005f94 <_ZN4HC0519printfSensorsValuesEv>

  TIM3 -> CCR1 = 0;
 800266e:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <main+0x118>)
 8002670:	2200      	movs	r2, #0
 8002672:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3 -> CCR2 = 0;
 8002674:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <main+0x118>)
 8002676:	2200      	movs	r2, #0
 8002678:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3 -> CCR3 = 0;
 800267a:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <main+0x118>)
 800267c:	2200      	movs	r2, #0
 800267e:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3 -> CCR4 = 0;
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <main+0x118>)
 8002682:	2200      	movs	r2, #0
 8002684:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8002686:	2100      	movs	r1, #0
 8002688:	4810      	ldr	r0, [pc, #64]	; (80026cc <main+0x11c>)
 800268a:	f00c fc4d 	bl	800ef28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800268e:	2104      	movs	r1, #4
 8002690:	480e      	ldr	r0, [pc, #56]	; (80026cc <main+0x11c>)
 8002692:	f00c fc49 	bl	800ef28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8002696:	2108      	movs	r1, #8
 8002698:	480c      	ldr	r0, [pc, #48]	; (80026cc <main+0x11c>)
 800269a:	f00c fc45 	bl	800ef28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 800269e:	210c      	movs	r1, #12
 80026a0:	480a      	ldr	r0, [pc, #40]	; (80026cc <main+0x11c>)
 80026a2:	f00c fc41 	bl	800ef28 <HAL_TIM_PWM_Start>

  xTaskCreate(sensorsDataReadTask,"SensorsDataReadTask",1024,NULL,tskIDLE_PRIORITY+3, flightControllerInstance->getSensorsDataReadHandlerPtr());
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fe fd74 	bl	8001194 <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>
 80026ac:	4603      	mov	r3, r0
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	2303      	movs	r3, #3
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	2300      	movs	r3, #0
 80026b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ba:	4905      	ldr	r1, [pc, #20]	; (80026d0 <main+0x120>)
 80026bc:	4805      	ldr	r0, [pc, #20]	; (80026d4 <main+0x124>)
 80026be:	f014 fa99 	bl	8016bf4 <xTaskCreate>
  vTaskStartScheduler();
 80026c2:	f014 fc4b 	bl	8016f5c <vTaskStartScheduler>

  while (1)
 80026c6:	e7fe      	b.n	80026c6 <main+0x116>
 80026c8:	40000400 	.word	0x40000400
 80026cc:	200007e4 	.word	0x200007e4
 80026d0:	0801cfdc 	.word	0x0801cfdc
 80026d4:	08002079 	.word	0x08002079

080026d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b094      	sub	sp, #80	; 0x50
 80026dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026de:	f107 0320 	add.w	r3, r7, #32
 80026e2:	2230      	movs	r2, #48	; 0x30
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f017 fda4 	bl	801a234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026ec:	f107 030c 	add.w	r3, r7, #12
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	4b2d      	ldr	r3, [pc, #180]	; (80027b8 <_Z18SystemClock_Configv+0xe0>)
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	4a2c      	ldr	r2, [pc, #176]	; (80027b8 <_Z18SystemClock_Configv+0xe0>)
 8002706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270a:	6413      	str	r3, [r2, #64]	; 0x40
 800270c:	4b2a      	ldr	r3, [pc, #168]	; (80027b8 <_Z18SystemClock_Configv+0xe0>)
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002718:	2300      	movs	r3, #0
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	4b27      	ldr	r3, [pc, #156]	; (80027bc <_Z18SystemClock_Configv+0xe4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a26      	ldr	r2, [pc, #152]	; (80027bc <_Z18SystemClock_Configv+0xe4>)
 8002722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b24      	ldr	r3, [pc, #144]	; (80027bc <_Z18SystemClock_Configv+0xe4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002730:	607b      	str	r3, [r7, #4]
 8002732:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002734:	2301      	movs	r3, #1
 8002736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002738:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800273e:	2302      	movs	r3, #2
 8002740:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002742:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002748:	2308      	movs	r3, #8
 800274a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800274c:	2390      	movs	r3, #144	; 0x90
 800274e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002750:	2302      	movs	r3, #2
 8002752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002754:	2306      	movs	r3, #6
 8002756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002758:	f107 0320 	add.w	r3, r7, #32
 800275c:	4618      	mov	r0, r3
 800275e:	f009 febd 	bl	800c4dc <HAL_RCC_OscConfig>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	bf14      	ite	ne
 8002768:	2301      	movne	r3, #1
 800276a:	2300      	moveq	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8002772:	f000 fc23 	bl	8002fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002776:	230f      	movs	r3, #15
 8002778:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800277a:	2302      	movs	r3, #2
 800277c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002782:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002786:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800278c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800278e:	f107 030c 	add.w	r3, r7, #12
 8002792:	2104      	movs	r1, #4
 8002794:	4618      	mov	r0, r3
 8002796:	f00a f919 	bl	800c9cc <HAL_RCC_ClockConfig>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf14      	ite	ne
 80027a0:	2301      	movne	r3, #1
 80027a2:	2300      	moveq	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80027aa:	f000 fc07 	bl	8002fbc <Error_Handler>
  }
}
 80027ae:	bf00      	nop
 80027b0:	3750      	adds	r7, #80	; 0x50
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40007000 	.word	0x40007000

080027c0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027c6:	463b      	mov	r3, r7
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80027d2:	4b26      	ldr	r3, [pc, #152]	; (800286c <_ZL12MX_ADC1_Initv+0xac>)
 80027d4:	4a26      	ldr	r2, [pc, #152]	; (8002870 <_ZL12MX_ADC1_Initv+0xb0>)
 80027d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80027d8:	4b24      	ldr	r3, [pc, #144]	; (800286c <_ZL12MX_ADC1_Initv+0xac>)
 80027da:	2200      	movs	r2, #0
 80027dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027de:	4b23      	ldr	r3, [pc, #140]	; (800286c <_ZL12MX_ADC1_Initv+0xac>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80027e4:	4b21      	ldr	r3, [pc, #132]	; (800286c <_ZL12MX_ADC1_Initv+0xac>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80027ea:	4b20      	ldr	r3, [pc, #128]	; (800286c <_ZL12MX_ADC1_Initv+0xac>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027f0:	4b1e      	ldr	r3, [pc, #120]	; (800286c <_ZL12MX_ADC1_Initv+0xac>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027f8:	4b1c      	ldr	r3, [pc, #112]	; (800286c <_ZL12MX_ADC1_Initv+0xac>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027fe:	4b1b      	ldr	r3, [pc, #108]	; (800286c <_ZL12MX_ADC1_Initv+0xac>)
 8002800:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <_ZL12MX_ADC1_Initv+0xb4>)
 8002802:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <_ZL12MX_ADC1_Initv+0xac>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800280a:	4b18      	ldr	r3, [pc, #96]	; (800286c <_ZL12MX_ADC1_Initv+0xac>)
 800280c:	2201      	movs	r2, #1
 800280e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002810:	4b16      	ldr	r3, [pc, #88]	; (800286c <_ZL12MX_ADC1_Initv+0xac>)
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002818:	4b14      	ldr	r3, [pc, #80]	; (800286c <_ZL12MX_ADC1_Initv+0xac>)
 800281a:	2201      	movs	r2, #1
 800281c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800281e:	4813      	ldr	r0, [pc, #76]	; (800286c <_ZL12MX_ADC1_Initv+0xac>)
 8002820:	f006 ff2c 	bl	800967c <HAL_ADC_Init>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	bf14      	ite	ne
 800282a:	2301      	movne	r3, #1
 800282c:	2300      	moveq	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8002834:	f000 fbc2 	bl	8002fbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002838:	230a      	movs	r3, #10
 800283a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800283c:	2301      	movs	r3, #1
 800283e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002840:	2300      	movs	r3, #0
 8002842:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002844:	463b      	mov	r3, r7
 8002846:	4619      	mov	r1, r3
 8002848:	4808      	ldr	r0, [pc, #32]	; (800286c <_ZL12MX_ADC1_Initv+0xac>)
 800284a:	f007 f889 	bl	8009960 <HAL_ADC_ConfigChannel>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf14      	ite	ne
 8002854:	2301      	movne	r3, #1
 8002856:	2300      	moveq	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 800285e:	f000 fbad 	bl	8002fbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	200005a0 	.word	0x200005a0
 8002870:	40012000 	.word	0x40012000
 8002874:	0f000001 	.word	0x0f000001

08002878 <_ZL15MX_SDIO_SD_Initv>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 800287e:	4a1a      	ldr	r2, [pc, #104]	; (80028e8 <_ZL15MX_SDIO_SD_Initv+0x70>)
 8002880:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002882:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002884:	2200      	movs	r2, #0
 8002886:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002888:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002890:	2200      	movs	r2, #0
 8002892:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002896:	2200      	movs	r2, #0
 8002898:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 800289c:	2200      	movs	r2, #0
 800289e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 80028a0:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 80028a2:	2208      	movs	r2, #8
 80028a4:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80028a6:	480f      	ldr	r0, [pc, #60]	; (80028e4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 80028a8:	f00a fae0 	bl	800ce6c <HAL_SD_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	bf14      	ite	ne
 80028b2:	2301      	movne	r3, #1
 80028b4:	2300      	moveq	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <_ZL15MX_SDIO_SD_Initv+0x48>
  {
    Error_Handler();
 80028bc:	f000 fb7e 	bl	8002fbc <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80028c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028c4:	4807      	ldr	r0, [pc, #28]	; (80028e4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 80028c6:	f00b f8b5 	bl	800da34 <HAL_SD_ConfigWideBusOperation>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf14      	ite	ne
 80028d0:	2301      	movne	r3, #1
 80028d2:	2300      	moveq	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <_ZL15MX_SDIO_SD_Initv+0x66>
  {
    Error_Handler();
 80028da:	f000 fb6f 	bl	8002fbc <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000648 	.word	0x20000648
 80028e8:	40012c00 	.word	0x40012c00

080028ec <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80028f0:	4b1a      	ldr	r3, [pc, #104]	; (800295c <_ZL12MX_SPI2_Initv+0x70>)
 80028f2:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <_ZL12MX_SPI2_Initv+0x74>)
 80028f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028f6:	4b19      	ldr	r3, [pc, #100]	; (800295c <_ZL12MX_SPI2_Initv+0x70>)
 80028f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028fe:	4b17      	ldr	r3, [pc, #92]	; (800295c <_ZL12MX_SPI2_Initv+0x70>)
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002904:	4b15      	ldr	r3, [pc, #84]	; (800295c <_ZL12MX_SPI2_Initv+0x70>)
 8002906:	2200      	movs	r2, #0
 8002908:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800290a:	4b14      	ldr	r3, [pc, #80]	; (800295c <_ZL12MX_SPI2_Initv+0x70>)
 800290c:	2200      	movs	r2, #0
 800290e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002910:	4b12      	ldr	r3, [pc, #72]	; (800295c <_ZL12MX_SPI2_Initv+0x70>)
 8002912:	2200      	movs	r2, #0
 8002914:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002916:	4b11      	ldr	r3, [pc, #68]	; (800295c <_ZL12MX_SPI2_Initv+0x70>)
 8002918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800291c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800291e:	4b0f      	ldr	r3, [pc, #60]	; (800295c <_ZL12MX_SPI2_Initv+0x70>)
 8002920:	2200      	movs	r2, #0
 8002922:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002924:	4b0d      	ldr	r3, [pc, #52]	; (800295c <_ZL12MX_SPI2_Initv+0x70>)
 8002926:	2200      	movs	r2, #0
 8002928:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800292a:	4b0c      	ldr	r3, [pc, #48]	; (800295c <_ZL12MX_SPI2_Initv+0x70>)
 800292c:	2200      	movs	r2, #0
 800292e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002930:	4b0a      	ldr	r3, [pc, #40]	; (800295c <_ZL12MX_SPI2_Initv+0x70>)
 8002932:	2200      	movs	r2, #0
 8002934:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <_ZL12MX_SPI2_Initv+0x70>)
 8002938:	220a      	movs	r2, #10
 800293a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800293c:	4807      	ldr	r0, [pc, #28]	; (800295c <_ZL12MX_SPI2_Initv+0x70>)
 800293e:	f00b fc20 	bl	800e182 <HAL_SPI_Init>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf14      	ite	ne
 8002948:	2301      	movne	r3, #1
 800294a:	2300      	moveq	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8002952:	f000 fb33 	bl	8002fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	200006cc 	.word	0x200006cc
 8002960:	40003800 	.word	0x40003800

08002964 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08e      	sub	sp, #56	; 0x38
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800296a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002978:	f107 0320 	add.w	r3, r7, #32
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002982:	1d3b      	adds	r3, r7, #4
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
 8002990:	615a      	str	r2, [r3, #20]
 8002992:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002994:	4b51      	ldr	r3, [pc, #324]	; (8002adc <_ZL12MX_TIM3_Initv+0x178>)
 8002996:	4a52      	ldr	r2, [pc, #328]	; (8002ae0 <_ZL12MX_TIM3_Initv+0x17c>)
 8002998:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3-1;
 800299a:	4b50      	ldr	r3, [pc, #320]	; (8002adc <_ZL12MX_TIM3_Initv+0x178>)
 800299c:	2202      	movs	r2, #2
 800299e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a0:	4b4e      	ldr	r3, [pc, #312]	; (8002adc <_ZL12MX_TIM3_Initv+0x178>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6000-1;
 80029a6:	4b4d      	ldr	r3, [pc, #308]	; (8002adc <_ZL12MX_TIM3_Initv+0x178>)
 80029a8:	f241 726f 	movw	r2, #5999	; 0x176f
 80029ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ae:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <_ZL12MX_TIM3_Initv+0x178>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b4:	4b49      	ldr	r3, [pc, #292]	; (8002adc <_ZL12MX_TIM3_Initv+0x178>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029ba:	4848      	ldr	r0, [pc, #288]	; (8002adc <_ZL12MX_TIM3_Initv+0x178>)
 80029bc:	f00c f99a 	bl	800ecf4 <HAL_TIM_Base_Init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	bf14      	ite	ne
 80029c6:	2301      	movne	r3, #1
 80029c8:	2300      	moveq	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 80029d0:	f000 faf4 	bl	8002fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029de:	4619      	mov	r1, r3
 80029e0:	483e      	ldr	r0, [pc, #248]	; (8002adc <_ZL12MX_TIM3_Initv+0x178>)
 80029e2:	f00c fd33 	bl	800f44c <HAL_TIM_ConfigClockSource>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf14      	ite	ne
 80029ec:	2301      	movne	r3, #1
 80029ee:	2300      	moveq	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 80029f6:	f000 fae1 	bl	8002fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029fa:	4838      	ldr	r0, [pc, #224]	; (8002adc <_ZL12MX_TIM3_Initv+0x178>)
 80029fc:	f00c fa3a 	bl	800ee74 <HAL_TIM_PWM_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	bf14      	ite	ne
 8002a06:	2301      	movne	r3, #1
 8002a08:	2300      	moveq	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8002a10:	f000 fad4 	bl	8002fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a14:	2300      	movs	r3, #0
 8002a16:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a1c:	f107 0320 	add.w	r3, r7, #32
 8002a20:	4619      	mov	r1, r3
 8002a22:	482e      	ldr	r0, [pc, #184]	; (8002adc <_ZL12MX_TIM3_Initv+0x178>)
 8002a24:	f00d f912 	bl	800fc4c <HAL_TIMEx_MasterConfigSynchronization>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	bf14      	ite	ne
 8002a2e:	2301      	movne	r3, #1
 8002a30:	2300      	moveq	r3, #0
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8002a38:	f000 fac0 	bl	8002fbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a3c:	2360      	movs	r3, #96	; 0x60
 8002a3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a4c:	1d3b      	adds	r3, r7, #4
 8002a4e:	2200      	movs	r2, #0
 8002a50:	4619      	mov	r1, r3
 8002a52:	4822      	ldr	r0, [pc, #136]	; (8002adc <_ZL12MX_TIM3_Initv+0x178>)
 8002a54:	f00c fc38 	bl	800f2c8 <HAL_TIM_PWM_ConfigChannel>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	bf14      	ite	ne
 8002a5e:	2301      	movne	r3, #1
 8002a60:	2300      	moveq	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8002a68:	f000 faa8 	bl	8002fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a6c:	1d3b      	adds	r3, r7, #4
 8002a6e:	2204      	movs	r2, #4
 8002a70:	4619      	mov	r1, r3
 8002a72:	481a      	ldr	r0, [pc, #104]	; (8002adc <_ZL12MX_TIM3_Initv+0x178>)
 8002a74:	f00c fc28 	bl	800f2c8 <HAL_TIM_PWM_ConfigChannel>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bf14      	ite	ne
 8002a7e:	2301      	movne	r3, #1
 8002a80:	2300      	moveq	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 8002a88:	f000 fa98 	bl	8002fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a8c:	1d3b      	adds	r3, r7, #4
 8002a8e:	2208      	movs	r2, #8
 8002a90:	4619      	mov	r1, r3
 8002a92:	4812      	ldr	r0, [pc, #72]	; (8002adc <_ZL12MX_TIM3_Initv+0x178>)
 8002a94:	f00c fc18 	bl	800f2c8 <HAL_TIM_PWM_ConfigChannel>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	bf14      	ite	ne
 8002a9e:	2301      	movne	r3, #1
 8002aa0:	2300      	moveq	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <_ZL12MX_TIM3_Initv+0x148>
  {
    Error_Handler();
 8002aa8:	f000 fa88 	bl	8002fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	220c      	movs	r2, #12
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	480a      	ldr	r0, [pc, #40]	; (8002adc <_ZL12MX_TIM3_Initv+0x178>)
 8002ab4:	f00c fc08 	bl	800f2c8 <HAL_TIM_PWM_ConfigChannel>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bf14      	ite	ne
 8002abe:	2301      	movne	r3, #1
 8002ac0:	2300      	moveq	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <_ZL12MX_TIM3_Initv+0x168>
  {
    Error_Handler();
 8002ac8:	f000 fa78 	bl	8002fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002acc:	4803      	ldr	r0, [pc, #12]	; (8002adc <_ZL12MX_TIM3_Initv+0x178>)
 8002ace:	f000 fc6f 	bl	80033b0 <HAL_TIM_MspPostInit>

}
 8002ad2:	bf00      	nop
 8002ad4:	3738      	adds	r7, #56	; 0x38
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200007e4 	.word	0x200007e4
 8002ae0:	40000400 	.word	0x40000400

08002ae4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aea:	f107 0308 	add.w	r3, r7, #8
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	609a      	str	r2, [r3, #8]
 8002af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002af8:	463b      	mov	r3, r7
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b00:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b02:	4a25      	ldr	r2, [pc, #148]	; (8002b98 <_ZL12MX_TIM4_Initv+0xb4>)
 8002b04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 144-1;
 8002b06:	4b23      	ldr	r3, [pc, #140]	; (8002b94 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b08:	228f      	movs	r2, #143	; 0x8f
 8002b0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b0c:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 8002b12:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b14:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002b18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b1a:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b20:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b26:	481b      	ldr	r0, [pc, #108]	; (8002b94 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b28:	f00c f8e4 	bl	800ecf4 <HAL_TIM_Base_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	bf14      	ite	ne
 8002b32:	2301      	movne	r3, #1
 8002b34:	2300      	moveq	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8002b3c:	f000 fa3e 	bl	8002fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b46:	f107 0308 	add.w	r3, r7, #8
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4811      	ldr	r0, [pc, #68]	; (8002b94 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b4e:	f00c fc7d 	bl	800f44c <HAL_TIM_ConfigClockSource>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf14      	ite	ne
 8002b58:	2301      	movne	r3, #1
 8002b5a:	2300      	moveq	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8002b62:	f000 fa2b 	bl	8002fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b66:	2300      	movs	r3, #0
 8002b68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b6e:	463b      	mov	r3, r7
 8002b70:	4619      	mov	r1, r3
 8002b72:	4808      	ldr	r0, [pc, #32]	; (8002b94 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b74:	f00d f86a 	bl	800fc4c <HAL_TIMEx_MasterConfigSynchronization>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	bf14      	ite	ne
 8002b7e:	2301      	movne	r3, #1
 8002b80:	2300      	moveq	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8002b88:	f000 fa18 	bl	8002fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b8c:	bf00      	nop
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	2000082c 	.word	0x2000082c
 8002b98:	40000800 	.word	0x40000800

08002b9c <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002ba0:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <_ZL13MX_UART4_Initv+0x54>)
 8002ba2:	4a14      	ldr	r2, [pc, #80]	; (8002bf4 <_ZL13MX_UART4_Initv+0x58>)
 8002ba4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002ba6:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <_ZL13MX_UART4_Initv+0x54>)
 8002ba8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002bac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <_ZL13MX_UART4_Initv+0x54>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002bb4:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <_ZL13MX_UART4_Initv+0x54>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <_ZL13MX_UART4_Initv+0x54>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <_ZL13MX_UART4_Initv+0x54>)
 8002bc2:	220c      	movs	r2, #12
 8002bc4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <_ZL13MX_UART4_Initv+0x54>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bcc:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <_ZL13MX_UART4_Initv+0x54>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002bd2:	4807      	ldr	r0, [pc, #28]	; (8002bf0 <_ZL13MX_UART4_Initv+0x54>)
 8002bd4:	f00d f8ca 	bl	800fd6c <HAL_UART_Init>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	bf14      	ite	ne
 8002bde:	2301      	movne	r3, #1
 8002be0:	2300      	moveq	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 8002be8:	f000 f9e8 	bl	8002fbc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002bec:	bf00      	nop
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000874 	.word	0x20000874
 8002bf4:	40004c00 	.word	0x40004c00

08002bf8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bfc:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002bfe:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002c00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002c02:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c0a:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c10:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c16:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c1e:	220c      	movs	r2, #12
 8002c20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c28:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c2e:	4807      	ldr	r0, [pc, #28]	; (8002c4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002c30:	f00d f89c 	bl	800fd6c <HAL_UART_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	bf14      	ite	ne
 8002c3a:	2301      	movne	r3, #1
 8002c3c:	2300      	moveq	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002c44:	f000 f9ba 	bl	8002fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c48:	bf00      	nop
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	200008b8 	.word	0x200008b8
 8002c50:	40011000 	.word	0x40011000

08002c54 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c58:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c5a:	4a14      	ldr	r2, [pc, #80]	; (8002cac <_ZL19MX_USART2_UART_Initv+0x58>)
 8002c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c60:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c66:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c7a:	220c      	movs	r2, #12
 8002c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c8a:	4807      	ldr	r0, [pc, #28]	; (8002ca8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c8c:	f00d f86e 	bl	800fd6c <HAL_UART_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	bf14      	ite	ne
 8002c96:	2301      	movne	r3, #1
 8002c98:	2300      	moveq	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002ca0:	f000 f98c 	bl	8002fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ca4:	bf00      	nop
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	200008fc 	.word	0x200008fc
 8002cac:	40004400 	.word	0x40004400

08002cb0 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002cb4:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cb6:	4a15      	ldr	r2, [pc, #84]	; (8002d0c <_ZL19MX_USART3_UART_Initv+0x5c>)
 8002cb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cbc:	4a14      	ldr	r2, [pc, #80]	; (8002d10 <_ZL19MX_USART3_UART_Initv+0x60>)
 8002cbe:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_2;
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ccc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8002cce:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cd4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cd8:	220c      	movs	r2, #12
 8002cda:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ce8:	4807      	ldr	r0, [pc, #28]	; (8002d08 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002cea:	f00d f83f 	bl	800fd6c <HAL_UART_Init>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf14      	ite	ne
 8002cf4:	2301      	movne	r3, #1
 8002cf6:	2300      	moveq	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <_ZL19MX_USART3_UART_Initv+0x52>
  {
    Error_Handler();
 8002cfe:	f000 f95d 	bl	8002fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000940 	.word	0x20000940
 8002d0c:	40004800 	.word	0x40004800
 8002d10:	000186a0 	.word	0x000186a0

08002d14 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002d18:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d1a:	4a14      	ldr	r2, [pc, #80]	; (8002d6c <_ZL19MX_USART6_UART_Initv+0x58>)
 8002d1c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002d1e:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d24:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002d2c:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002d32:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d3a:	220c      	movs	r2, #12
 8002d3c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002d4a:	4807      	ldr	r0, [pc, #28]	; (8002d68 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d4c:	f00d f80e 	bl	800fd6c <HAL_UART_Init>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	bf14      	ite	ne
 8002d56:	2301      	movne	r3, #1
 8002d58:	2300      	moveq	r3, #0
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8002d60:	f000 f92c 	bl	8002fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002d64:	bf00      	nop
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000984 	.word	0x20000984
 8002d6c:	40011400 	.word	0x40011400

08002d70 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	4b2f      	ldr	r3, [pc, #188]	; (8002e38 <_ZL11MX_DMA_Initv+0xc8>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	4a2e      	ldr	r2, [pc, #184]	; (8002e38 <_ZL11MX_DMA_Initv+0xc8>)
 8002d80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d84:	6313      	str	r3, [r2, #48]	; 0x30
 8002d86:	4b2c      	ldr	r3, [pc, #176]	; (8002e38 <_ZL11MX_DMA_Initv+0xc8>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	4b28      	ldr	r3, [pc, #160]	; (8002e38 <_ZL11MX_DMA_Initv+0xc8>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	4a27      	ldr	r2, [pc, #156]	; (8002e38 <_ZL11MX_DMA_Initv+0xc8>)
 8002d9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002da0:	6313      	str	r3, [r2, #48]	; 0x30
 8002da2:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <_ZL11MX_DMA_Initv+0xc8>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2105      	movs	r1, #5
 8002db2:	200c      	movs	r0, #12
 8002db4:	f007 f92c 	bl	800a010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002db8:	200c      	movs	r0, #12
 8002dba:	f007 f945 	bl	800a048 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2105      	movs	r1, #5
 8002dc2:	200d      	movs	r0, #13
 8002dc4:	f007 f924 	bl	800a010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002dc8:	200d      	movs	r0, #13
 8002dca:	f007 f93d 	bl	800a048 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2105      	movs	r1, #5
 8002dd2:	200e      	movs	r0, #14
 8002dd4:	f007 f91c 	bl	800a010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002dd8:	200e      	movs	r0, #14
 8002dda:	f007 f935 	bl	800a048 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2105      	movs	r1, #5
 8002de2:	200f      	movs	r0, #15
 8002de4:	f007 f914 	bl	800a010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002de8:	200f      	movs	r0, #15
 8002dea:	f007 f92d 	bl	800a048 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002dee:	2200      	movs	r2, #0
 8002df0:	2105      	movs	r1, #5
 8002df2:	2010      	movs	r0, #16
 8002df4:	f007 f90c 	bl	800a010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002df8:	2010      	movs	r0, #16
 8002dfa:	f007 f925 	bl	800a048 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2105      	movs	r1, #5
 8002e02:	2038      	movs	r0, #56	; 0x38
 8002e04:	f007 f904 	bl	800a010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002e08:	2038      	movs	r0, #56	; 0x38
 8002e0a:	f007 f91d 	bl	800a048 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2105      	movs	r1, #5
 8002e12:	2039      	movs	r0, #57	; 0x39
 8002e14:	f007 f8fc 	bl	800a010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002e18:	2039      	movs	r0, #57	; 0x39
 8002e1a:	f007 f915 	bl	800a048 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2105      	movs	r1, #5
 8002e22:	2046      	movs	r0, #70	; 0x46
 8002e24:	f007 f8f4 	bl	800a010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002e28:	2046      	movs	r0, #70	; 0x46
 8002e2a:	f007 f90d 	bl	800a048 <HAL_NVIC_EnableIRQ>

}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800

08002e3c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	; 0x28
 8002e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e42:	f107 0314 	add.w	r3, r7, #20
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	605a      	str	r2, [r3, #4]
 8002e4c:	609a      	str	r2, [r3, #8]
 8002e4e:	60da      	str	r2, [r3, #12]
 8002e50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	4b55      	ldr	r3, [pc, #340]	; (8002fac <_ZL12MX_GPIO_Initv+0x170>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a54      	ldr	r2, [pc, #336]	; (8002fac <_ZL12MX_GPIO_Initv+0x170>)
 8002e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
 8002e62:	4b52      	ldr	r3, [pc, #328]	; (8002fac <_ZL12MX_GPIO_Initv+0x170>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	4b4e      	ldr	r3, [pc, #312]	; (8002fac <_ZL12MX_GPIO_Initv+0x170>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a4d      	ldr	r2, [pc, #308]	; (8002fac <_ZL12MX_GPIO_Initv+0x170>)
 8002e78:	f043 0304 	orr.w	r3, r3, #4
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b4b      	ldr	r3, [pc, #300]	; (8002fac <_ZL12MX_GPIO_Initv+0x170>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	4b47      	ldr	r3, [pc, #284]	; (8002fac <_ZL12MX_GPIO_Initv+0x170>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	4a46      	ldr	r2, [pc, #280]	; (8002fac <_ZL12MX_GPIO_Initv+0x170>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9a:	4b44      	ldr	r3, [pc, #272]	; (8002fac <_ZL12MX_GPIO_Initv+0x170>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	607b      	str	r3, [r7, #4]
 8002eaa:	4b40      	ldr	r3, [pc, #256]	; (8002fac <_ZL12MX_GPIO_Initv+0x170>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4a3f      	ldr	r2, [pc, #252]	; (8002fac <_ZL12MX_GPIO_Initv+0x170>)
 8002eb0:	f043 0302 	orr.w	r3, r3, #2
 8002eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb6:	4b3d      	ldr	r3, [pc, #244]	; (8002fac <_ZL12MX_GPIO_Initv+0x170>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	603b      	str	r3, [r7, #0]
 8002ec6:	4b39      	ldr	r3, [pc, #228]	; (8002fac <_ZL12MX_GPIO_Initv+0x170>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	4a38      	ldr	r2, [pc, #224]	; (8002fac <_ZL12MX_GPIO_Initv+0x170>)
 8002ecc:	f043 0308 	orr.w	r3, r3, #8
 8002ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed2:	4b36      	ldr	r3, [pc, #216]	; (8002fac <_ZL12MX_GPIO_Initv+0x170>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2130      	movs	r1, #48	; 0x30
 8002ee2:	4833      	ldr	r0, [pc, #204]	; (8002fb0 <_ZL12MX_GPIO_Initv+0x174>)
 8002ee4:	f008 f81e 	bl	800af24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2120      	movs	r1, #32
 8002eec:	4831      	ldr	r0, [pc, #196]	; (8002fb4 <_ZL12MX_GPIO_Initv+0x178>)
 8002eee:	f008 f819 	bl	800af24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ef8:	482f      	ldr	r0, [pc, #188]	; (8002fb8 <_ZL12MX_GPIO_Initv+0x17c>)
 8002efa:	f008 f813 	bl	800af24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002efe:	2330      	movs	r3, #48	; 0x30
 8002f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f02:	2301      	movs	r3, #1
 8002f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0e:	f107 0314 	add.w	r3, r7, #20
 8002f12:	4619      	mov	r1, r3
 8002f14:	4826      	ldr	r0, [pc, #152]	; (8002fb0 <_ZL12MX_GPIO_Initv+0x174>)
 8002f16:	f007 fe69 	bl	800abec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f1a:	2310      	movs	r3, #16
 8002f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f1e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4821      	ldr	r0, [pc, #132]	; (8002fb4 <_ZL12MX_GPIO_Initv+0x178>)
 8002f30:	f007 fe5c 	bl	800abec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f34:	2320      	movs	r3, #32
 8002f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f40:	2300      	movs	r3, #0
 8002f42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f44:	f107 0314 	add.w	r3, r7, #20
 8002f48:	4619      	mov	r1, r3
 8002f4a:	481a      	ldr	r0, [pc, #104]	; (8002fb4 <_ZL12MX_GPIO_Initv+0x178>)
 8002f4c:	f007 fe4e 	bl	800abec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f50:	2304      	movs	r3, #4
 8002f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f54:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5e:	f107 0314 	add.w	r3, r7, #20
 8002f62:	4619      	mov	r1, r3
 8002f64:	4814      	ldr	r0, [pc, #80]	; (8002fb8 <_ZL12MX_GPIO_Initv+0x17c>)
 8002f66:	f007 fe41 	bl	800abec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f70:	2301      	movs	r3, #1
 8002f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	4619      	mov	r1, r3
 8002f82:	480d      	ldr	r0, [pc, #52]	; (8002fb8 <_ZL12MX_GPIO_Initv+0x17c>)
 8002f84:	f007 fe32 	bl	800abec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f98:	f107 0314 	add.w	r3, r7, #20
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4804      	ldr	r0, [pc, #16]	; (8002fb0 <_ZL12MX_GPIO_Initv+0x174>)
 8002fa0:	f007 fe24 	bl	800abec <HAL_GPIO_Init>
}
 8002fa4:	bf00      	nop
 8002fa6:	3728      	adds	r7, #40	; 0x28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40020000 	.word	0x40020000
 8002fb4:	40020800 	.word	0x40020800
 8002fb8:	40020400 	.word	0x40020400

08002fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fc0:	b672      	cpsid	i
}
 8002fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fc4:	e7fe      	b.n	8002fc4 <Error_Handler+0x8>
	...

08002fc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_MspInit+0x54>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	4a11      	ldr	r2, [pc, #68]	; (800301c <HAL_MspInit+0x54>)
 8002fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fde:	4b0f      	ldr	r3, [pc, #60]	; (800301c <HAL_MspInit+0x54>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe6:	607b      	str	r3, [r7, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_MspInit+0x54>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	; (800301c <HAL_MspInit+0x54>)
 8002ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffa:	4b08      	ldr	r3, [pc, #32]	; (800301c <HAL_MspInit+0x54>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003006:	2200      	movs	r2, #0
 8003008:	210f      	movs	r1, #15
 800300a:	f06f 0001 	mvn.w	r0, #1
 800300e:	f006 ffff 	bl	800a010 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800

08003020 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	; 0x28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003028:	f107 0314 	add.w	r3, r7, #20
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a2e      	ldr	r2, [pc, #184]	; (80030f8 <HAL_ADC_MspInit+0xd8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d156      	bne.n	80030f0 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	4b2d      	ldr	r3, [pc, #180]	; (80030fc <HAL_ADC_MspInit+0xdc>)
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	4a2c      	ldr	r2, [pc, #176]	; (80030fc <HAL_ADC_MspInit+0xdc>)
 800304c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003050:	6453      	str	r3, [r2, #68]	; 0x44
 8003052:	4b2a      	ldr	r3, [pc, #168]	; (80030fc <HAL_ADC_MspInit+0xdc>)
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	4b26      	ldr	r3, [pc, #152]	; (80030fc <HAL_ADC_MspInit+0xdc>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	4a25      	ldr	r2, [pc, #148]	; (80030fc <HAL_ADC_MspInit+0xdc>)
 8003068:	f043 0304 	orr.w	r3, r3, #4
 800306c:	6313      	str	r3, [r2, #48]	; 0x30
 800306e:	4b23      	ldr	r3, [pc, #140]	; (80030fc <HAL_ADC_MspInit+0xdc>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800307a:	2301      	movs	r3, #1
 800307c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800307e:	2303      	movs	r3, #3
 8003080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003086:	f107 0314 	add.w	r3, r7, #20
 800308a:	4619      	mov	r1, r3
 800308c:	481c      	ldr	r0, [pc, #112]	; (8003100 <HAL_ADC_MspInit+0xe0>)
 800308e:	f007 fdad 	bl	800abec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003092:	4b1c      	ldr	r3, [pc, #112]	; (8003104 <HAL_ADC_MspInit+0xe4>)
 8003094:	4a1c      	ldr	r2, [pc, #112]	; (8003108 <HAL_ADC_MspInit+0xe8>)
 8003096:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003098:	4b1a      	ldr	r3, [pc, #104]	; (8003104 <HAL_ADC_MspInit+0xe4>)
 800309a:	2200      	movs	r2, #0
 800309c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800309e:	4b19      	ldr	r3, [pc, #100]	; (8003104 <HAL_ADC_MspInit+0xe4>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030a4:	4b17      	ldr	r3, [pc, #92]	; (8003104 <HAL_ADC_MspInit+0xe4>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80030aa:	4b16      	ldr	r3, [pc, #88]	; (8003104 <HAL_ADC_MspInit+0xe4>)
 80030ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030b2:	4b14      	ldr	r3, [pc, #80]	; (8003104 <HAL_ADC_MspInit+0xe4>)
 80030b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030ba:	4b12      	ldr	r3, [pc, #72]	; (8003104 <HAL_ADC_MspInit+0xe4>)
 80030bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80030c2:	4b10      	ldr	r3, [pc, #64]	; (8003104 <HAL_ADC_MspInit+0xe4>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80030c8:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <HAL_ADC_MspInit+0xe4>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030ce:	4b0d      	ldr	r3, [pc, #52]	; (8003104 <HAL_ADC_MspInit+0xe4>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030d4:	480b      	ldr	r0, [pc, #44]	; (8003104 <HAL_ADC_MspInit+0xe4>)
 80030d6:	f006 ffc5 	bl	800a064 <HAL_DMA_Init>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80030e0:	f7ff ff6c 	bl	8002fbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a07      	ldr	r2, [pc, #28]	; (8003104 <HAL_ADC_MspInit+0xe4>)
 80030e8:	639a      	str	r2, [r3, #56]	; 0x38
 80030ea:	4a06      	ldr	r2, [pc, #24]	; (8003104 <HAL_ADC_MspInit+0xe4>)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030f0:	bf00      	nop
 80030f2:	3728      	adds	r7, #40	; 0x28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40012000 	.word	0x40012000
 80030fc:	40023800 	.word	0x40023800
 8003100:	40020800 	.word	0x40020800
 8003104:	200005e8 	.word	0x200005e8
 8003108:	40026410 	.word	0x40026410

0800310c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	; 0x28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003114:	f107 0314 	add.w	r3, r7, #20
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a28      	ldr	r2, [pc, #160]	; (80031cc <HAL_SD_MspInit+0xc0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d14a      	bne.n	80031c4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	4b27      	ldr	r3, [pc, #156]	; (80031d0 <HAL_SD_MspInit+0xc4>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	4a26      	ldr	r2, [pc, #152]	; (80031d0 <HAL_SD_MspInit+0xc4>)
 8003138:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800313c:	6453      	str	r3, [r2, #68]	; 0x44
 800313e:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <HAL_SD_MspInit+0xc4>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <HAL_SD_MspInit+0xc4>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a1f      	ldr	r2, [pc, #124]	; (80031d0 <HAL_SD_MspInit+0xc4>)
 8003154:	f043 0304 	orr.w	r3, r3, #4
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <HAL_SD_MspInit+0xc4>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_SD_MspInit+0xc4>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	4a18      	ldr	r2, [pc, #96]	; (80031d0 <HAL_SD_MspInit+0xc4>)
 8003170:	f043 0308 	orr.w	r3, r3, #8
 8003174:	6313      	str	r3, [r2, #48]	; 0x30
 8003176:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <HAL_SD_MspInit+0xc4>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003182:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003186:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003188:	2302      	movs	r3, #2
 800318a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318c:	2300      	movs	r3, #0
 800318e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003190:	2303      	movs	r3, #3
 8003192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003194:	230c      	movs	r3, #12
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003198:	f107 0314 	add.w	r3, r7, #20
 800319c:	4619      	mov	r1, r3
 800319e:	480d      	ldr	r0, [pc, #52]	; (80031d4 <HAL_SD_MspInit+0xc8>)
 80031a0:	f007 fd24 	bl	800abec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031a4:	2304      	movs	r3, #4
 80031a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a8:	2302      	movs	r3, #2
 80031aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b0:	2303      	movs	r3, #3
 80031b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80031b4:	230c      	movs	r3, #12
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	4619      	mov	r1, r3
 80031be:	4806      	ldr	r0, [pc, #24]	; (80031d8 <HAL_SD_MspInit+0xcc>)
 80031c0:	f007 fd14 	bl	800abec <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80031c4:	bf00      	nop
 80031c6:	3728      	adds	r7, #40	; 0x28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40012c00 	.word	0x40012c00
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40020800 	.word	0x40020800
 80031d8:	40020c00 	.word	0x40020c00

080031dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08a      	sub	sp, #40	; 0x28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]
 80031f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a47      	ldr	r2, [pc, #284]	; (8003318 <HAL_SPI_MspInit+0x13c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	f040 8087 	bne.w	800330e <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003200:	2300      	movs	r3, #0
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	4b45      	ldr	r3, [pc, #276]	; (800331c <HAL_SPI_MspInit+0x140>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	4a44      	ldr	r2, [pc, #272]	; (800331c <HAL_SPI_MspInit+0x140>)
 800320a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800320e:	6413      	str	r3, [r2, #64]	; 0x40
 8003210:	4b42      	ldr	r3, [pc, #264]	; (800331c <HAL_SPI_MspInit+0x140>)
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	4b3e      	ldr	r3, [pc, #248]	; (800331c <HAL_SPI_MspInit+0x140>)
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	4a3d      	ldr	r2, [pc, #244]	; (800331c <HAL_SPI_MspInit+0x140>)
 8003226:	f043 0302 	orr.w	r3, r3, #2
 800322a:	6313      	str	r3, [r2, #48]	; 0x30
 800322c:	4b3b      	ldr	r3, [pc, #236]	; (800331c <HAL_SPI_MspInit+0x140>)
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003238:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800323c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323e:	2302      	movs	r3, #2
 8003240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003242:	2300      	movs	r3, #0
 8003244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003246:	2303      	movs	r3, #3
 8003248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800324a:	2305      	movs	r3, #5
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324e:	f107 0314 	add.w	r3, r7, #20
 8003252:	4619      	mov	r1, r3
 8003254:	4832      	ldr	r0, [pc, #200]	; (8003320 <HAL_SPI_MspInit+0x144>)
 8003256:	f007 fcc9 	bl	800abec <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800325a:	4b32      	ldr	r3, [pc, #200]	; (8003324 <HAL_SPI_MspInit+0x148>)
 800325c:	4a32      	ldr	r2, [pc, #200]	; (8003328 <HAL_SPI_MspInit+0x14c>)
 800325e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003260:	4b30      	ldr	r3, [pc, #192]	; (8003324 <HAL_SPI_MspInit+0x148>)
 8003262:	2200      	movs	r2, #0
 8003264:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003266:	4b2f      	ldr	r3, [pc, #188]	; (8003324 <HAL_SPI_MspInit+0x148>)
 8003268:	2200      	movs	r2, #0
 800326a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800326c:	4b2d      	ldr	r3, [pc, #180]	; (8003324 <HAL_SPI_MspInit+0x148>)
 800326e:	2200      	movs	r2, #0
 8003270:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003272:	4b2c      	ldr	r3, [pc, #176]	; (8003324 <HAL_SPI_MspInit+0x148>)
 8003274:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003278:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800327a:	4b2a      	ldr	r3, [pc, #168]	; (8003324 <HAL_SPI_MspInit+0x148>)
 800327c:	2200      	movs	r2, #0
 800327e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003280:	4b28      	ldr	r3, [pc, #160]	; (8003324 <HAL_SPI_MspInit+0x148>)
 8003282:	2200      	movs	r2, #0
 8003284:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003286:	4b27      	ldr	r3, [pc, #156]	; (8003324 <HAL_SPI_MspInit+0x148>)
 8003288:	2200      	movs	r2, #0
 800328a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800328c:	4b25      	ldr	r3, [pc, #148]	; (8003324 <HAL_SPI_MspInit+0x148>)
 800328e:	2200      	movs	r2, #0
 8003290:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003292:	4b24      	ldr	r3, [pc, #144]	; (8003324 <HAL_SPI_MspInit+0x148>)
 8003294:	2200      	movs	r2, #0
 8003296:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003298:	4822      	ldr	r0, [pc, #136]	; (8003324 <HAL_SPI_MspInit+0x148>)
 800329a:	f006 fee3 	bl	800a064 <HAL_DMA_Init>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80032a4:	f7ff fe8a 	bl	8002fbc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a1e      	ldr	r2, [pc, #120]	; (8003324 <HAL_SPI_MspInit+0x148>)
 80032ac:	64da      	str	r2, [r3, #76]	; 0x4c
 80032ae:	4a1d      	ldr	r2, [pc, #116]	; (8003324 <HAL_SPI_MspInit+0x148>)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80032b4:	4b1d      	ldr	r3, [pc, #116]	; (800332c <HAL_SPI_MspInit+0x150>)
 80032b6:	4a1e      	ldr	r2, [pc, #120]	; (8003330 <HAL_SPI_MspInit+0x154>)
 80032b8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80032ba:	4b1c      	ldr	r3, [pc, #112]	; (800332c <HAL_SPI_MspInit+0x150>)
 80032bc:	2200      	movs	r2, #0
 80032be:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032c0:	4b1a      	ldr	r3, [pc, #104]	; (800332c <HAL_SPI_MspInit+0x150>)
 80032c2:	2240      	movs	r2, #64	; 0x40
 80032c4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032c6:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_SPI_MspInit+0x150>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032cc:	4b17      	ldr	r3, [pc, #92]	; (800332c <HAL_SPI_MspInit+0x150>)
 80032ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032d2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032d4:	4b15      	ldr	r3, [pc, #84]	; (800332c <HAL_SPI_MspInit+0x150>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032da:	4b14      	ldr	r3, [pc, #80]	; (800332c <HAL_SPI_MspInit+0x150>)
 80032dc:	2200      	movs	r2, #0
 80032de:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80032e0:	4b12      	ldr	r3, [pc, #72]	; (800332c <HAL_SPI_MspInit+0x150>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032e6:	4b11      	ldr	r3, [pc, #68]	; (800332c <HAL_SPI_MspInit+0x150>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032ec:	4b0f      	ldr	r3, [pc, #60]	; (800332c <HAL_SPI_MspInit+0x150>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80032f2:	480e      	ldr	r0, [pc, #56]	; (800332c <HAL_SPI_MspInit+0x150>)
 80032f4:	f006 feb6 	bl	800a064 <HAL_DMA_Init>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 80032fe:	f7ff fe5d 	bl	8002fbc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a09      	ldr	r2, [pc, #36]	; (800332c <HAL_SPI_MspInit+0x150>)
 8003306:	649a      	str	r2, [r3, #72]	; 0x48
 8003308:	4a08      	ldr	r2, [pc, #32]	; (800332c <HAL_SPI_MspInit+0x150>)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800330e:	bf00      	nop
 8003310:	3728      	adds	r7, #40	; 0x28
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40003800 	.word	0x40003800
 800331c:	40023800 	.word	0x40023800
 8003320:	40020400 	.word	0x40020400
 8003324:	20000724 	.word	0x20000724
 8003328:	40026058 	.word	0x40026058
 800332c:	20000784 	.word	0x20000784
 8003330:	40026070 	.word	0x40026070

08003334 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <HAL_TIM_Base_MspInit+0x70>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d10e      	bne.n	8003364 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <HAL_TIM_Base_MspInit+0x74>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	4a16      	ldr	r2, [pc, #88]	; (80033a8 <HAL_TIM_Base_MspInit+0x74>)
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	6413      	str	r3, [r2, #64]	; 0x40
 8003356:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <HAL_TIM_Base_MspInit+0x74>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003362:	e01a      	b.n	800339a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a10      	ldr	r2, [pc, #64]	; (80033ac <HAL_TIM_Base_MspInit+0x78>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d115      	bne.n	800339a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <HAL_TIM_Base_MspInit+0x74>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	4a0c      	ldr	r2, [pc, #48]	; (80033a8 <HAL_TIM_Base_MspInit+0x74>)
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	6413      	str	r3, [r2, #64]	; 0x40
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <HAL_TIM_Base_MspInit+0x74>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800338a:	2200      	movs	r2, #0
 800338c:	2105      	movs	r1, #5
 800338e:	201e      	movs	r0, #30
 8003390:	f006 fe3e 	bl	800a010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003394:	201e      	movs	r0, #30
 8003396:	f006 fe57 	bl	800a048 <HAL_NVIC_EnableIRQ>
}
 800339a:	bf00      	nop
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40000400 	.word	0x40000400
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40000800 	.word	0x40000800

080033b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08a      	sub	sp, #40	; 0x28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b8:	f107 0314 	add.w	r3, r7, #20
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	60da      	str	r2, [r3, #12]
 80033c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a21      	ldr	r2, [pc, #132]	; (8003454 <HAL_TIM_MspPostInit+0xa4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d13b      	bne.n	800344a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	4b20      	ldr	r3, [pc, #128]	; (8003458 <HAL_TIM_MspPostInit+0xa8>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	4a1f      	ldr	r2, [pc, #124]	; (8003458 <HAL_TIM_MspPostInit+0xa8>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6313      	str	r3, [r2, #48]	; 0x30
 80033e2:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <HAL_TIM_MspPostInit+0xa8>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	4b19      	ldr	r3, [pc, #100]	; (8003458 <HAL_TIM_MspPostInit+0xa8>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	4a18      	ldr	r2, [pc, #96]	; (8003458 <HAL_TIM_MspPostInit+0xa8>)
 80033f8:	f043 0302 	orr.w	r3, r3, #2
 80033fc:	6313      	str	r3, [r2, #48]	; 0x30
 80033fe:	4b16      	ldr	r3, [pc, #88]	; (8003458 <HAL_TIM_MspPostInit+0xa8>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800340a:	23c0      	movs	r3, #192	; 0xc0
 800340c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340e:	2302      	movs	r3, #2
 8003410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003416:	2300      	movs	r3, #0
 8003418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800341a:	2302      	movs	r3, #2
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341e:	f107 0314 	add.w	r3, r7, #20
 8003422:	4619      	mov	r1, r3
 8003424:	480d      	ldr	r0, [pc, #52]	; (800345c <HAL_TIM_MspPostInit+0xac>)
 8003426:	f007 fbe1 	bl	800abec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800342a:	2303      	movs	r3, #3
 800342c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342e:	2302      	movs	r3, #2
 8003430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003432:	2300      	movs	r3, #0
 8003434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003436:	2300      	movs	r3, #0
 8003438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800343a:	2302      	movs	r3, #2
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343e:	f107 0314 	add.w	r3, r7, #20
 8003442:	4619      	mov	r1, r3
 8003444:	4806      	ldr	r0, [pc, #24]	; (8003460 <HAL_TIM_MspPostInit+0xb0>)
 8003446:	f007 fbd1 	bl	800abec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800344a:	bf00      	nop
 800344c:	3728      	adds	r7, #40	; 0x28
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40000400 	.word	0x40000400
 8003458:	40023800 	.word	0x40023800
 800345c:	40020000 	.word	0x40020000
 8003460:	40020400 	.word	0x40020400

08003464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b092      	sub	sp, #72	; 0x48
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800346c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	60da      	str	r2, [r3, #12]
 800347a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a93      	ldr	r2, [pc, #588]	; (80036d0 <HAL_UART_MspInit+0x26c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d15a      	bne.n	800353c <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	633b      	str	r3, [r7, #48]	; 0x30
 800348a:	4b92      	ldr	r3, [pc, #584]	; (80036d4 <HAL_UART_MspInit+0x270>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	4a91      	ldr	r2, [pc, #580]	; (80036d4 <HAL_UART_MspInit+0x270>)
 8003490:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003494:	6413      	str	r3, [r2, #64]	; 0x40
 8003496:	4b8f      	ldr	r3, [pc, #572]	; (80036d4 <HAL_UART_MspInit+0x270>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800349e:	633b      	str	r3, [r7, #48]	; 0x30
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a6:	4b8b      	ldr	r3, [pc, #556]	; (80036d4 <HAL_UART_MspInit+0x270>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	4a8a      	ldr	r2, [pc, #552]	; (80036d4 <HAL_UART_MspInit+0x270>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6313      	str	r3, [r2, #48]	; 0x30
 80034b2:	4b88      	ldr	r3, [pc, #544]	; (80036d4 <HAL_UART_MspInit+0x270>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80034be:	2303      	movs	r3, #3
 80034c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c2:	2302      	movs	r3, #2
 80034c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ca:	2303      	movs	r3, #3
 80034cc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80034ce:	2308      	movs	r3, #8
 80034d0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034d6:	4619      	mov	r1, r3
 80034d8:	487f      	ldr	r0, [pc, #508]	; (80036d8 <HAL_UART_MspInit+0x274>)
 80034da:	f007 fb87 	bl	800abec <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80034de:	4b7f      	ldr	r3, [pc, #508]	; (80036dc <HAL_UART_MspInit+0x278>)
 80034e0:	4a7f      	ldr	r2, [pc, #508]	; (80036e0 <HAL_UART_MspInit+0x27c>)
 80034e2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80034e4:	4b7d      	ldr	r3, [pc, #500]	; (80036dc <HAL_UART_MspInit+0x278>)
 80034e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034ea:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034ec:	4b7b      	ldr	r3, [pc, #492]	; (80036dc <HAL_UART_MspInit+0x278>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034f2:	4b7a      	ldr	r3, [pc, #488]	; (80036dc <HAL_UART_MspInit+0x278>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034f8:	4b78      	ldr	r3, [pc, #480]	; (80036dc <HAL_UART_MspInit+0x278>)
 80034fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034fe:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003500:	4b76      	ldr	r3, [pc, #472]	; (80036dc <HAL_UART_MspInit+0x278>)
 8003502:	2200      	movs	r2, #0
 8003504:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003506:	4b75      	ldr	r3, [pc, #468]	; (80036dc <HAL_UART_MspInit+0x278>)
 8003508:	2200      	movs	r2, #0
 800350a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800350c:	4b73      	ldr	r3, [pc, #460]	; (80036dc <HAL_UART_MspInit+0x278>)
 800350e:	2200      	movs	r2, #0
 8003510:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003512:	4b72      	ldr	r3, [pc, #456]	; (80036dc <HAL_UART_MspInit+0x278>)
 8003514:	2200      	movs	r2, #0
 8003516:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003518:	4b70      	ldr	r3, [pc, #448]	; (80036dc <HAL_UART_MspInit+0x278>)
 800351a:	2200      	movs	r2, #0
 800351c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800351e:	486f      	ldr	r0, [pc, #444]	; (80036dc <HAL_UART_MspInit+0x278>)
 8003520:	f006 fda0 	bl	800a064 <HAL_DMA_Init>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800352a:	f7ff fd47 	bl	8002fbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a6a      	ldr	r2, [pc, #424]	; (80036dc <HAL_UART_MspInit+0x278>)
 8003532:	639a      	str	r2, [r3, #56]	; 0x38
 8003534:	4a69      	ldr	r2, [pc, #420]	; (80036dc <HAL_UART_MspInit+0x278>)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800353a:	e19f      	b.n	800387c <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a68      	ldr	r2, [pc, #416]	; (80036e4 <HAL_UART_MspInit+0x280>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d163      	bne.n	800360e <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
 800354a:	4b62      	ldr	r3, [pc, #392]	; (80036d4 <HAL_UART_MspInit+0x270>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	4a61      	ldr	r2, [pc, #388]	; (80036d4 <HAL_UART_MspInit+0x270>)
 8003550:	f043 0310 	orr.w	r3, r3, #16
 8003554:	6453      	str	r3, [r2, #68]	; 0x44
 8003556:	4b5f      	ldr	r3, [pc, #380]	; (80036d4 <HAL_UART_MspInit+0x270>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003560:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
 8003566:	4b5b      	ldr	r3, [pc, #364]	; (80036d4 <HAL_UART_MspInit+0x270>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	4a5a      	ldr	r2, [pc, #360]	; (80036d4 <HAL_UART_MspInit+0x270>)
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	6313      	str	r3, [r2, #48]	; 0x30
 8003572:	4b58      	ldr	r3, [pc, #352]	; (80036d4 <HAL_UART_MspInit+0x270>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800357e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003582:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003584:	2302      	movs	r3, #2
 8003586:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358c:	2303      	movs	r3, #3
 800358e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003590:	2307      	movs	r3, #7
 8003592:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003594:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003598:	4619      	mov	r1, r3
 800359a:	484f      	ldr	r0, [pc, #316]	; (80036d8 <HAL_UART_MspInit+0x274>)
 800359c:	f007 fb26 	bl	800abec <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80035a0:	4b51      	ldr	r3, [pc, #324]	; (80036e8 <HAL_UART_MspInit+0x284>)
 80035a2:	4a52      	ldr	r2, [pc, #328]	; (80036ec <HAL_UART_MspInit+0x288>)
 80035a4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80035a6:	4b50      	ldr	r3, [pc, #320]	; (80036e8 <HAL_UART_MspInit+0x284>)
 80035a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035ac:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035ae:	4b4e      	ldr	r3, [pc, #312]	; (80036e8 <HAL_UART_MspInit+0x284>)
 80035b0:	2240      	movs	r2, #64	; 0x40
 80035b2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035b4:	4b4c      	ldr	r3, [pc, #304]	; (80036e8 <HAL_UART_MspInit+0x284>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035ba:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <HAL_UART_MspInit+0x284>)
 80035bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035c2:	4b49      	ldr	r3, [pc, #292]	; (80036e8 <HAL_UART_MspInit+0x284>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035c8:	4b47      	ldr	r3, [pc, #284]	; (80036e8 <HAL_UART_MspInit+0x284>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80035ce:	4b46      	ldr	r3, [pc, #280]	; (80036e8 <HAL_UART_MspInit+0x284>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80035d4:	4b44      	ldr	r3, [pc, #272]	; (80036e8 <HAL_UART_MspInit+0x284>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035da:	4b43      	ldr	r3, [pc, #268]	; (80036e8 <HAL_UART_MspInit+0x284>)
 80035dc:	2200      	movs	r2, #0
 80035de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80035e0:	4841      	ldr	r0, [pc, #260]	; (80036e8 <HAL_UART_MspInit+0x284>)
 80035e2:	f006 fd3f 	bl	800a064 <HAL_DMA_Init>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80035ec:	f7ff fce6 	bl	8002fbc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a3d      	ldr	r2, [pc, #244]	; (80036e8 <HAL_UART_MspInit+0x284>)
 80035f4:	635a      	str	r2, [r3, #52]	; 0x34
 80035f6:	4a3c      	ldr	r2, [pc, #240]	; (80036e8 <HAL_UART_MspInit+0x284>)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80035fc:	2200      	movs	r2, #0
 80035fe:	2105      	movs	r1, #5
 8003600:	2025      	movs	r0, #37	; 0x25
 8003602:	f006 fd05 	bl	800a010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003606:	2025      	movs	r0, #37	; 0x25
 8003608:	f006 fd1e 	bl	800a048 <HAL_NVIC_EnableIRQ>
}
 800360c:	e136      	b.n	800387c <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART2)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a37      	ldr	r2, [pc, #220]	; (80036f0 <HAL_UART_MspInit+0x28c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d171      	bne.n	80036fc <HAL_UART_MspInit+0x298>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003618:	2300      	movs	r3, #0
 800361a:	623b      	str	r3, [r7, #32]
 800361c:	4b2d      	ldr	r3, [pc, #180]	; (80036d4 <HAL_UART_MspInit+0x270>)
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	4a2c      	ldr	r2, [pc, #176]	; (80036d4 <HAL_UART_MspInit+0x270>)
 8003622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003626:	6413      	str	r3, [r2, #64]	; 0x40
 8003628:	4b2a      	ldr	r3, [pc, #168]	; (80036d4 <HAL_UART_MspInit+0x270>)
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003630:	623b      	str	r3, [r7, #32]
 8003632:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003634:	2300      	movs	r3, #0
 8003636:	61fb      	str	r3, [r7, #28]
 8003638:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <HAL_UART_MspInit+0x270>)
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	4a25      	ldr	r2, [pc, #148]	; (80036d4 <HAL_UART_MspInit+0x270>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6313      	str	r3, [r2, #48]	; 0x30
 8003644:	4b23      	ldr	r3, [pc, #140]	; (80036d4 <HAL_UART_MspInit+0x270>)
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003650:	230c      	movs	r3, #12
 8003652:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003654:	2302      	movs	r3, #2
 8003656:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	2300      	movs	r3, #0
 800365a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800365c:	2303      	movs	r3, #3
 800365e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003660:	2307      	movs	r3, #7
 8003662:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003664:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003668:	4619      	mov	r1, r3
 800366a:	481b      	ldr	r0, [pc, #108]	; (80036d8 <HAL_UART_MspInit+0x274>)
 800366c:	f007 fabe 	bl	800abec <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003670:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <HAL_UART_MspInit+0x290>)
 8003672:	4a21      	ldr	r2, [pc, #132]	; (80036f8 <HAL_UART_MspInit+0x294>)
 8003674:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003676:	4b1f      	ldr	r3, [pc, #124]	; (80036f4 <HAL_UART_MspInit+0x290>)
 8003678:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800367c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800367e:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <HAL_UART_MspInit+0x290>)
 8003680:	2200      	movs	r2, #0
 8003682:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003684:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <HAL_UART_MspInit+0x290>)
 8003686:	2200      	movs	r2, #0
 8003688:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800368a:	4b1a      	ldr	r3, [pc, #104]	; (80036f4 <HAL_UART_MspInit+0x290>)
 800368c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003690:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003692:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <HAL_UART_MspInit+0x290>)
 8003694:	2200      	movs	r2, #0
 8003696:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003698:	4b16      	ldr	r3, [pc, #88]	; (80036f4 <HAL_UART_MspInit+0x290>)
 800369a:	2200      	movs	r2, #0
 800369c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800369e:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <HAL_UART_MspInit+0x290>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036a4:	4b13      	ldr	r3, [pc, #76]	; (80036f4 <HAL_UART_MspInit+0x290>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036aa:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <HAL_UART_MspInit+0x290>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80036b0:	4810      	ldr	r0, [pc, #64]	; (80036f4 <HAL_UART_MspInit+0x290>)
 80036b2:	f006 fcd7 	bl	800a064 <HAL_DMA_Init>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 80036bc:	f7ff fc7e 	bl	8002fbc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a0c      	ldr	r2, [pc, #48]	; (80036f4 <HAL_UART_MspInit+0x290>)
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38
 80036c6:	4a0b      	ldr	r2, [pc, #44]	; (80036f4 <HAL_UART_MspInit+0x290>)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6393      	str	r3, [r2, #56]	; 0x38
}
 80036cc:	e0d6      	b.n	800387c <HAL_UART_MspInit+0x418>
 80036ce:	bf00      	nop
 80036d0:	40004c00 	.word	0x40004c00
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40020000 	.word	0x40020000
 80036dc:	200009c8 	.word	0x200009c8
 80036e0:	40026040 	.word	0x40026040
 80036e4:	40011000 	.word	0x40011000
 80036e8:	20000a28 	.word	0x20000a28
 80036ec:	400264b8 	.word	0x400264b8
 80036f0:	40004400 	.word	0x40004400
 80036f4:	20000a88 	.word	0x20000a88
 80036f8:	40026088 	.word	0x40026088
  else if(huart->Instance==USART3)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a60      	ldr	r2, [pc, #384]	; (8003884 <HAL_UART_MspInit+0x420>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d15b      	bne.n	80037be <HAL_UART_MspInit+0x35a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	4b5f      	ldr	r3, [pc, #380]	; (8003888 <HAL_UART_MspInit+0x424>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	4a5e      	ldr	r2, [pc, #376]	; (8003888 <HAL_UART_MspInit+0x424>)
 8003710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003714:	6413      	str	r3, [r2, #64]	; 0x40
 8003716:	4b5c      	ldr	r3, [pc, #368]	; (8003888 <HAL_UART_MspInit+0x424>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371e:	61bb      	str	r3, [r7, #24]
 8003720:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	4b58      	ldr	r3, [pc, #352]	; (8003888 <HAL_UART_MspInit+0x424>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	4a57      	ldr	r2, [pc, #348]	; (8003888 <HAL_UART_MspInit+0x424>)
 800372c:	f043 0302 	orr.w	r3, r3, #2
 8003730:	6313      	str	r3, [r2, #48]	; 0x30
 8003732:	4b55      	ldr	r3, [pc, #340]	; (8003888 <HAL_UART_MspInit+0x424>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800373e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003742:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003744:	2302      	movs	r3, #2
 8003746:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374c:	2303      	movs	r3, #3
 800374e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003750:	2307      	movs	r3, #7
 8003752:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003754:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003758:	4619      	mov	r1, r3
 800375a:	484c      	ldr	r0, [pc, #304]	; (800388c <HAL_UART_MspInit+0x428>)
 800375c:	f007 fa46 	bl	800abec <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003760:	4b4b      	ldr	r3, [pc, #300]	; (8003890 <HAL_UART_MspInit+0x42c>)
 8003762:	4a4c      	ldr	r2, [pc, #304]	; (8003894 <HAL_UART_MspInit+0x430>)
 8003764:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003766:	4b4a      	ldr	r3, [pc, #296]	; (8003890 <HAL_UART_MspInit+0x42c>)
 8003768:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800376c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800376e:	4b48      	ldr	r3, [pc, #288]	; (8003890 <HAL_UART_MspInit+0x42c>)
 8003770:	2200      	movs	r2, #0
 8003772:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003774:	4b46      	ldr	r3, [pc, #280]	; (8003890 <HAL_UART_MspInit+0x42c>)
 8003776:	2200      	movs	r2, #0
 8003778:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800377a:	4b45      	ldr	r3, [pc, #276]	; (8003890 <HAL_UART_MspInit+0x42c>)
 800377c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003780:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003782:	4b43      	ldr	r3, [pc, #268]	; (8003890 <HAL_UART_MspInit+0x42c>)
 8003784:	2200      	movs	r2, #0
 8003786:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003788:	4b41      	ldr	r3, [pc, #260]	; (8003890 <HAL_UART_MspInit+0x42c>)
 800378a:	2200      	movs	r2, #0
 800378c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800378e:	4b40      	ldr	r3, [pc, #256]	; (8003890 <HAL_UART_MspInit+0x42c>)
 8003790:	2200      	movs	r2, #0
 8003792:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003794:	4b3e      	ldr	r3, [pc, #248]	; (8003890 <HAL_UART_MspInit+0x42c>)
 8003796:	2200      	movs	r2, #0
 8003798:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800379a:	4b3d      	ldr	r3, [pc, #244]	; (8003890 <HAL_UART_MspInit+0x42c>)
 800379c:	2200      	movs	r2, #0
 800379e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80037a0:	483b      	ldr	r0, [pc, #236]	; (8003890 <HAL_UART_MspInit+0x42c>)
 80037a2:	f006 fc5f 	bl	800a064 <HAL_DMA_Init>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_UART_MspInit+0x34c>
      Error_Handler();
 80037ac:	f7ff fc06 	bl	8002fbc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a37      	ldr	r2, [pc, #220]	; (8003890 <HAL_UART_MspInit+0x42c>)
 80037b4:	639a      	str	r2, [r3, #56]	; 0x38
 80037b6:	4a36      	ldr	r2, [pc, #216]	; (8003890 <HAL_UART_MspInit+0x42c>)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6393      	str	r3, [r2, #56]	; 0x38
}
 80037bc:	e05e      	b.n	800387c <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART6)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a35      	ldr	r2, [pc, #212]	; (8003898 <HAL_UART_MspInit+0x434>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d159      	bne.n	800387c <HAL_UART_MspInit+0x418>
    __HAL_RCC_USART6_CLK_ENABLE();
 80037c8:	2300      	movs	r3, #0
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	4b2e      	ldr	r3, [pc, #184]	; (8003888 <HAL_UART_MspInit+0x424>)
 80037ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d0:	4a2d      	ldr	r2, [pc, #180]	; (8003888 <HAL_UART_MspInit+0x424>)
 80037d2:	f043 0320 	orr.w	r3, r3, #32
 80037d6:	6453      	str	r3, [r2, #68]	; 0x44
 80037d8:	4b2b      	ldr	r3, [pc, #172]	; (8003888 <HAL_UART_MspInit+0x424>)
 80037da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	4b27      	ldr	r3, [pc, #156]	; (8003888 <HAL_UART_MspInit+0x424>)
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	4a26      	ldr	r2, [pc, #152]	; (8003888 <HAL_UART_MspInit+0x424>)
 80037ee:	f043 0304 	orr.w	r3, r3, #4
 80037f2:	6313      	str	r3, [r2, #48]	; 0x30
 80037f4:	4b24      	ldr	r3, [pc, #144]	; (8003888 <HAL_UART_MspInit+0x424>)
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003800:	23c0      	movs	r3, #192	; 0xc0
 8003802:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003804:	2302      	movs	r3, #2
 8003806:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003808:	2300      	movs	r3, #0
 800380a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800380c:	2303      	movs	r3, #3
 800380e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003810:	2308      	movs	r3, #8
 8003812:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003814:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003818:	4619      	mov	r1, r3
 800381a:	4820      	ldr	r0, [pc, #128]	; (800389c <HAL_UART_MspInit+0x438>)
 800381c:	f007 f9e6 	bl	800abec <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003820:	4b1f      	ldr	r3, [pc, #124]	; (80038a0 <HAL_UART_MspInit+0x43c>)
 8003822:	4a20      	ldr	r2, [pc, #128]	; (80038a4 <HAL_UART_MspInit+0x440>)
 8003824:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003826:	4b1e      	ldr	r3, [pc, #120]	; (80038a0 <HAL_UART_MspInit+0x43c>)
 8003828:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800382c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800382e:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <HAL_UART_MspInit+0x43c>)
 8003830:	2200      	movs	r2, #0
 8003832:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003834:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <HAL_UART_MspInit+0x43c>)
 8003836:	2200      	movs	r2, #0
 8003838:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800383a:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_UART_MspInit+0x43c>)
 800383c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003840:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003842:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <HAL_UART_MspInit+0x43c>)
 8003844:	2200      	movs	r2, #0
 8003846:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003848:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <HAL_UART_MspInit+0x43c>)
 800384a:	2200      	movs	r2, #0
 800384c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800384e:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <HAL_UART_MspInit+0x43c>)
 8003850:	2200      	movs	r2, #0
 8003852:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003854:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <HAL_UART_MspInit+0x43c>)
 8003856:	2200      	movs	r2, #0
 8003858:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800385a:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <HAL_UART_MspInit+0x43c>)
 800385c:	2200      	movs	r2, #0
 800385e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003860:	480f      	ldr	r0, [pc, #60]	; (80038a0 <HAL_UART_MspInit+0x43c>)
 8003862:	f006 fbff 	bl	800a064 <HAL_DMA_Init>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_UART_MspInit+0x40c>
      Error_Handler();
 800386c:	f7ff fba6 	bl	8002fbc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a0b      	ldr	r2, [pc, #44]	; (80038a0 <HAL_UART_MspInit+0x43c>)
 8003874:	639a      	str	r2, [r3, #56]	; 0x38
 8003876:	4a0a      	ldr	r2, [pc, #40]	; (80038a0 <HAL_UART_MspInit+0x43c>)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800387c:	bf00      	nop
 800387e:	3748      	adds	r7, #72	; 0x48
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40004800 	.word	0x40004800
 8003888:	40023800 	.word	0x40023800
 800388c:	40020400 	.word	0x40020400
 8003890:	20000ae8 	.word	0x20000ae8
 8003894:	40026028 	.word	0x40026028
 8003898:	40011400 	.word	0x40011400
 800389c:	40020800 	.word	0x40020800
 80038a0:	20000b48 	.word	0x20000b48
 80038a4:	40026428 	.word	0x40026428

080038a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08c      	sub	sp, #48	; 0x30
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80038b8:	2300      	movs	r3, #0
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	4b2f      	ldr	r3, [pc, #188]	; (800397c <HAL_InitTick+0xd4>)
 80038be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c0:	4a2e      	ldr	r2, [pc, #184]	; (800397c <HAL_InitTick+0xd4>)
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	6453      	str	r3, [r2, #68]	; 0x44
 80038c8:	4b2c      	ldr	r3, [pc, #176]	; (800397c <HAL_InitTick+0xd4>)
 80038ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038d4:	f107 020c 	add.w	r2, r7, #12
 80038d8:	f107 0310 	add.w	r3, r7, #16
 80038dc:	4611      	mov	r1, r2
 80038de:	4618      	mov	r0, r3
 80038e0:	f009 fa92 	bl	800ce08 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80038e4:	f009 fa7c 	bl	800cde0 <HAL_RCC_GetPCLK2Freq>
 80038e8:	4603      	mov	r3, r0
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f0:	4a23      	ldr	r2, [pc, #140]	; (8003980 <HAL_InitTick+0xd8>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	0c9b      	lsrs	r3, r3, #18
 80038f8:	3b01      	subs	r3, #1
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80038fc:	4b21      	ldr	r3, [pc, #132]	; (8003984 <HAL_InitTick+0xdc>)
 80038fe:	4a22      	ldr	r2, [pc, #136]	; (8003988 <HAL_InitTick+0xe0>)
 8003900:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003902:	4b20      	ldr	r3, [pc, #128]	; (8003984 <HAL_InitTick+0xdc>)
 8003904:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003908:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800390a:	4a1e      	ldr	r2, [pc, #120]	; (8003984 <HAL_InitTick+0xdc>)
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003910:	4b1c      	ldr	r3, [pc, #112]	; (8003984 <HAL_InitTick+0xdc>)
 8003912:	2200      	movs	r2, #0
 8003914:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003916:	4b1b      	ldr	r3, [pc, #108]	; (8003984 <HAL_InitTick+0xdc>)
 8003918:	2200      	movs	r2, #0
 800391a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800391c:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_InitTick+0xdc>)
 800391e:	2200      	movs	r2, #0
 8003920:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003922:	4818      	ldr	r0, [pc, #96]	; (8003984 <HAL_InitTick+0xdc>)
 8003924:	f00b f9e6 	bl	800ecf4 <HAL_TIM_Base_Init>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800392e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003932:	2b00      	cmp	r3, #0
 8003934:	d11b      	bne.n	800396e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003936:	4813      	ldr	r0, [pc, #76]	; (8003984 <HAL_InitTick+0xdc>)
 8003938:	f00b fa2c 	bl	800ed94 <HAL_TIM_Base_Start_IT>
 800393c:	4603      	mov	r3, r0
 800393e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003942:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003946:	2b00      	cmp	r3, #0
 8003948:	d111      	bne.n	800396e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800394a:	2019      	movs	r0, #25
 800394c:	f006 fb7c 	bl	800a048 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b0f      	cmp	r3, #15
 8003954:	d808      	bhi.n	8003968 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003956:	2200      	movs	r2, #0
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	2019      	movs	r0, #25
 800395c:	f006 fb58 	bl	800a010 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003960:	4a0a      	ldr	r2, [pc, #40]	; (800398c <HAL_InitTick+0xe4>)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e002      	b.n	800396e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800396e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003972:	4618      	mov	r0, r3
 8003974:	3730      	adds	r7, #48	; 0x30
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40023800 	.word	0x40023800
 8003980:	431bde83 	.word	0x431bde83
 8003984:	20000ba8 	.word	0x20000ba8
 8003988:	40010000 	.word	0x40010000
 800398c:	20000020 	.word	0x20000020

08003990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003994:	e7fe      	b.n	8003994 <NMI_Handler+0x4>

08003996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003996:	b480      	push	{r7}
 8003998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800399a:	e7fe      	b.n	800399a <HardFault_Handler+0x4>

0800399c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039a0:	e7fe      	b.n	80039a0 <MemManage_Handler+0x4>

080039a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039a2:	b480      	push	{r7}
 80039a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039a6:	e7fe      	b.n	80039a6 <BusFault_Handler+0x4>

080039a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039ac:	e7fe      	b.n	80039ac <UsageFault_Handler+0x4>

080039ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039ae:	b480      	push	{r7}
 80039b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80039c0:	2004      	movs	r0, #4
 80039c2:	f007 fac9 	bl	800af58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}

080039ca <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80039ce:	2010      	movs	r0, #16
 80039d0:	f007 fac2 	bl	800af58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80039d4:	bf00      	nop
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80039dc:	4802      	ldr	r0, [pc, #8]	; (80039e8 <DMA1_Stream1_IRQHandler+0x10>)
 80039de:	f006 fcd9 	bl	800a394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000ae8 	.word	0x20000ae8

080039ec <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80039f0:	4802      	ldr	r0, [pc, #8]	; (80039fc <DMA1_Stream2_IRQHandler+0x10>)
 80039f2:	f006 fccf 	bl	800a394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	200009c8 	.word	0x200009c8

08003a00 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003a04:	4802      	ldr	r0, [pc, #8]	; (8003a10 <DMA1_Stream3_IRQHandler+0x10>)
 8003a06:	f006 fcc5 	bl	800a394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000724 	.word	0x20000724

08003a14 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003a18:	4802      	ldr	r0, [pc, #8]	; (8003a24 <DMA1_Stream4_IRQHandler+0x10>)
 8003a1a:	f006 fcbb 	bl	800a394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000784 	.word	0x20000784

08003a28 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003a2c:	4802      	ldr	r0, [pc, #8]	; (8003a38 <DMA1_Stream5_IRQHandler+0x10>)
 8003a2e:	f006 fcb1 	bl	800a394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000a88 	.word	0x20000a88

08003a3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003a40:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003a44:	f007 fa88 	bl	800af58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003a48:	bf00      	nop
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a50:	4802      	ldr	r0, [pc, #8]	; (8003a5c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003a52:	f00b fb31 	bl	800f0b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000ba8 	.word	0x20000ba8

08003a60 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a64:	4802      	ldr	r0, [pc, #8]	; (8003a70 <TIM4_IRQHandler+0x10>)
 8003a66:	f00b fb27 	bl	800f0b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	2000082c 	.word	0x2000082c

08003a74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a78:	4802      	ldr	r0, [pc, #8]	; (8003a84 <USART1_IRQHandler+0x10>)
 8003a7a:	f00c fa73 	bl	800ff64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	200008b8 	.word	0x200008b8

08003a88 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a8c:	4802      	ldr	r0, [pc, #8]	; (8003a98 <DMA2_Stream0_IRQHandler+0x10>)
 8003a8e:	f006 fc81 	bl	800a394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	200005e8 	.word	0x200005e8

08003a9c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003aa0:	4802      	ldr	r0, [pc, #8]	; (8003aac <DMA2_Stream1_IRQHandler+0x10>)
 8003aa2:	f006 fc77 	bl	800a394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000b48 	.word	0x20000b48

08003ab0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003ab4:	4802      	ldr	r0, [pc, #8]	; (8003ac0 <OTG_FS_IRQHandler+0x10>)
 8003ab6:	f007 fbb7 	bl	800b228 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	2000da50 	.word	0x2000da50

08003ac4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003ac8:	4802      	ldr	r0, [pc, #8]	; (8003ad4 <DMA2_Stream7_IRQHandler+0x10>)
 8003aca:	f006 fc63 	bl	800a394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000a28 	.word	0x20000a28

08003ad8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
	return 1;
 8003adc:	2301      	movs	r3, #1
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <_kill>:

int _kill(int pid, int sig)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003af2:	f016 fb3d 	bl	801a170 <__errno>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2216      	movs	r2, #22
 8003afa:	601a      	str	r2, [r3, #0]
	return -1;
 8003afc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <_exit>:

void _exit (int status)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b10:	f04f 31ff 	mov.w	r1, #4294967295
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff ffe7 	bl	8003ae8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b1a:	e7fe      	b.n	8003b1a <_exit+0x12>

08003b1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	e00a      	b.n	8003b44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b2e:	f3af 8000 	nop.w
 8003b32:	4601      	mov	r1, r0
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	60ba      	str	r2, [r7, #8]
 8003b3a:	b2ca      	uxtb	r2, r1
 8003b3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	3301      	adds	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	dbf0      	blt.n	8003b2e <_read+0x12>
	}

return len;
 8003b4c:	687b      	ldr	r3, [r7, #4]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b086      	sub	sp, #24
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	e009      	b.n	8003b7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	60ba      	str	r2, [r7, #8]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	dbf1      	blt.n	8003b68 <_write+0x12>
	}
	return len;
 8003b84:	687b      	ldr	r3, [r7, #4]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <_close>:

int _close(int file)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
	return -1;
 8003b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bb6:	605a      	str	r2, [r3, #4]
	return 0;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <_isatty>:

int _isatty(int file)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
	return 1;
 8003bce:	2301      	movs	r3, #1
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
	return 0;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c00:	4a14      	ldr	r2, [pc, #80]	; (8003c54 <_sbrk+0x5c>)
 8003c02:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <_sbrk+0x60>)
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c0c:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <_sbrk+0x64>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d102      	bne.n	8003c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c14:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <_sbrk+0x64>)
 8003c16:	4a12      	ldr	r2, [pc, #72]	; (8003c60 <_sbrk+0x68>)
 8003c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c1a:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <_sbrk+0x64>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4413      	add	r3, r2
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d207      	bcs.n	8003c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c28:	f016 faa2 	bl	801a170 <__errno>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	220c      	movs	r2, #12
 8003c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c32:	f04f 33ff 	mov.w	r3, #4294967295
 8003c36:	e009      	b.n	8003c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c38:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <_sbrk+0x64>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c3e:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <_sbrk+0x64>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	4a05      	ldr	r2, [pc, #20]	; (8003c5c <_sbrk+0x64>)
 8003c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	20020000 	.word	0x20020000
 8003c58:	00000400 	.word	0x00000400
 8003c5c:	20000bf0 	.word	0x20000bf0
 8003c60:	2000e1e8 	.word	0x2000e1e8

08003c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c68:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <SystemInit+0x20>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	4a05      	ldr	r2, [pc, #20]	; (8003c84 <SystemInit+0x20>)
 8003c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c78:	bf00      	nop
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	e000ed00 	.word	0xe000ed00

08003c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c8c:	480d      	ldr	r0, [pc, #52]	; (8003cc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c8e:	490e      	ldr	r1, [pc, #56]	; (8003cc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c90:	4a0e      	ldr	r2, [pc, #56]	; (8003ccc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c94:	e002      	b.n	8003c9c <LoopCopyDataInit>

08003c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c9a:	3304      	adds	r3, #4

08003c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ca0:	d3f9      	bcc.n	8003c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ca2:	4a0b      	ldr	r2, [pc, #44]	; (8003cd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ca4:	4c0b      	ldr	r4, [pc, #44]	; (8003cd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ca8:	e001      	b.n	8003cae <LoopFillZerobss>

08003caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cac:	3204      	adds	r2, #4

08003cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cb0:	d3fb      	bcc.n	8003caa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003cb2:	f7ff ffd7 	bl	8003c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cb6:	f016 fa61 	bl	801a17c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cba:	f7fe fc79 	bl	80025b0 <main>
  bx  lr    
 8003cbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003cc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cc8:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 8003ccc:	08031768 	.word	0x08031768
  ldr r2, =_sbss
 8003cd0:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 8003cd4:	2000e1e8 	.word	0x2000e1e8

08003cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cd8:	e7fe      	b.n	8003cd8 <ADC_IRQHandler>

08003cda <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 8003cda:	b590      	push	{r4, r7, lr}
 8003cdc:	b087      	sub	sp, #28
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	0fdb      	lsrs	r3, r3, #31
 8003ce8:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <_ZNSt7__cxx119to_stringEi+0x1c>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	425b      	negs	r3, r3
 8003cf4:	e000      	b.n	8003cf8 <_ZNSt7__cxx119to_stringEi+0x1e>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 8003cfa:	210a      	movs	r1, #10
 8003cfc:	6938      	ldr	r0, [r7, #16]
 8003cfe:	f000 ff6b 	bl	8004bd8 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 8003d02:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 8003d04:	7dfa      	ldrb	r2, [r7, #23]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	18d4      	adds	r4, r2, r3
 8003d0a:	f107 0308 	add.w	r3, r7, #8
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f015 f83c 	bl	8018d8c <_ZNSaIcEC1Ev>
 8003d14:	f107 0308 	add.w	r3, r7, #8
 8003d18:	222d      	movs	r2, #45	; 0x2d
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f015 f930 	bl	8018f82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 8003d22:	f107 0308 	add.w	r3, r7, #8
 8003d26:	4618      	mov	r0, r3
 8003d28:	f015 f831 	bl	8018d8e <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 8003d2c:	7dfb      	ldrb	r3, [r7, #23]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f015 f935 	bl	8018fa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8003d36:	4603      	mov	r3, r0
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	68f9      	ldr	r1, [r7, #12]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 ff8b 	bl	8004c58 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 8003d42:	bf00      	nop
  }
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	371c      	adds	r7, #28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd90      	pop	{r4, r7, pc}

08003d4c <_ZN15PrintableSensor11toCharArrayEi>:
	char packet[50]={};

public:
	virtual const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList) = 0;

	const char* toCharArray(int value)
 8003d4c:	b590      	push	{r4, r7, lr}
 8003d4e:	b089      	sub	sp, #36	; 0x24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
	{
		return std::to_string(value).c_str();
 8003d56:	f107 0308 	add.w	r3, r7, #8
 8003d5a:	6839      	ldr	r1, [r7, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff ffbc 	bl	8003cda <_ZNSt7__cxx119to_stringEi>
 8003d62:	f107 0308 	add.w	r3, r7, #8
 8003d66:	4618      	mov	r0, r3
 8003d68:	f015 f91d 	bl	8018fa6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8003d6c:	4604      	mov	r4, r0
 8003d6e:	bf00      	nop
 8003d70:	f107 0308 	add.w	r3, r7, #8
 8003d74:	4618      	mov	r0, r3
 8003d76:	f015 f90d 	bl	8018f94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d7a:	4623      	mov	r3, r4
	}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3724      	adds	r7, #36	; 0x24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd90      	pop	{r4, r7, pc}

08003d84 <_ZN5drone5utils9functionsL11concatBytesEhh>:
	}*/

	namespace functions
	{
		static int16_t concatBytes(uint8_t msb, uint8_t lsb)
		{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	460a      	mov	r2, r1
 8003d8e:	71fb      	strb	r3, [r7, #7]
 8003d90:	4613      	mov	r3, r2
 8003d92:	71bb      	strb	r3, [r7, #6]
			return (((int16_t)msb << 8) | (int16_t)lsb);
 8003d94:	79fb      	ldrb	r3, [r7, #7]
 8003d96:	021b      	lsls	r3, r3, #8
 8003d98:	b21a      	sxth	r2, r3
 8003d9a:	79bb      	ldrb	r3, [r7, #6]
 8003d9c:	b21b      	sxth	r3, r3
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	b21b      	sxth	r3, r3
		}
 8003da2:	4618      	mov	r0, r3
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
	...

08003db0 <_ZN8SPI_ConnC1Ev>:
class SPI_Conn
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <_ZN8SPI_ConnC1Ev+0x1c>)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	0801d334 	.word	0x0801d334

08003dd0 <_ZN12CallsCounterC1Ev>:
	uint64_t getTaskCounterValue()
	{
		return this->interruptCounter;
	}
protected:
	CallsCounter() = default;
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	e9c1 2300 	strd	r2, r3, [r1]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	f04f 0300 	mov.w	r3, #0
 8003df0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <_ZN6BMP39010calib_coefC1Ev>:
#include "utils_functions.hpp"

class BMP390: SPI_Conn,public PrintableSensor, public CallsCounter
{
private:
	struct calib_coef
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	801a      	strh	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	805a      	strh	r2, [r3, #2]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	711a      	strb	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	80da      	strh	r2, [r3, #6]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	811a      	strh	r2, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	729a      	strb	r2, [r3, #10]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	72da      	strb	r2, [r3, #11]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	819a      	strh	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	81da      	strh	r2, [r3, #14]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	741a      	strb	r2, [r3, #16]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	745a      	strb	r2, [r3, #17]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	825a      	strh	r2, [r3, #18]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	751a      	strb	r2, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	755a      	strb	r2, [r3, #21]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <_ZN6BMP39020quantized_calib_dataC1Ev>:
		int16_t par_p9 {0};
		int8_t par_p10 {0};
		int8_t par_p11 {0};
	} calibCoef;

	struct quantized_calib_data
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	e9c1 2300 	strd	r2, r3, [r1]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <_ZN6BMP390C1EP19__SPI_HandleTypeDef>:
 *      Author: Asus
 */

#include "BMP390.hpp"

BMP390::BMP390(SPI_HandleTypeDef *spi_port):
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
	,spiTxBuff {0U,0U}
	,spiRxBuff {0U,0U}
	,pressure {0.0}
	,temp {0.0}
	,raw_pressure {0U}
	,raw_temp {0U}
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff25 	bl	8003db0 <_ZN8SPI_ConnC1Ev>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fd f9b0 	bl	80012d0 <_ZN15PrintableSensorC1Ev>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3340      	adds	r3, #64	; 0x40
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff2b 	bl	8003dd0 <_ZN12CallsCounterC1Ev>
 8003f7a:	4a1f      	ldr	r2, [pc, #124]	; (8003ff8 <_ZN6BMP390C1EP19__SPI_HandleTypeDef+0xa4>)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	4a1e      	ldr	r2, [pc, #120]	; (8003ffc <_ZN6BMP390C1EP19__SPI_HandleTypeDef+0xa8>)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	605a      	str	r2, [r3, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3350      	adds	r3, #80	; 0x50
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff ff39 	bl	8003e02 <_ZN6BMP39010calib_coefC1Ev>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3368      	adds	r3, #104	; 0x68
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff ff69 	bl	8003e6c <_ZN6BMP39020quantized_calib_dataC1Ev>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
{
}
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	0801d314 	.word	0x0801d314
 8003ffc:	0801d328 	.word	0x0801d328

08004000 <_ZN6BMP39011defaultInitEv>:

bool BMP390::defaultInit()
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af02      	add	r7, sp, #8
 8004006:	6078      	str	r0, [r7, #4]
	this->SPI_write(CMD,CMD_SOFTRESET);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	22b6      	movs	r2, #182	; 0xb6
 8004010:	217e      	movs	r1, #126	; 0x7e
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	4798      	blx	r3
	HAL_Delay(20);
 8004016:	2014      	movs	r0, #20
 8004018:	f005 fb0c 	bl	8009634 <HAL_Delay>

	int debug = SPI_read(STATUS);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3304      	adds	r3, #4
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2103      	movs	r1, #3
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	4798      	blx	r3
 800402a:	4603      	mov	r3, r0
 800402c:	60fb      	str	r3, [r7, #12]
	while ((debug= SPI_read(STATUS))==0)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3304      	adds	r3, #4
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2103      	movs	r1, #3
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	4798      	blx	r3
 800403c:	4603      	mov	r3, r0
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	bf0c      	ite	eq
 8004046:	2301      	moveq	r3, #1
 8004048:	2300      	movne	r3, #0
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <_ZN6BMP39011defaultInitEv+0x58>
		HAL_Delay(50);
 8004050:	2032      	movs	r0, #50	; 0x32
 8004052:	f005 faef 	bl	8009634 <HAL_Delay>
	while ((debug= SPI_read(STATUS))==0)
 8004056:	e7ea      	b.n	800402e <_ZN6BMP39011defaultInitEv+0x2e>

	if (!this->initAndCheck(OSR,OSR_OSR_P_X16|OSR_OSR_T_X2,10))
 8004058:	2300      	movs	r3, #0
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	230a      	movs	r3, #10
 800405e:	220c      	movs	r2, #12
 8004060:	211c      	movs	r1, #28
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f84d 	bl	8004102 <_ZN6BMP39012initAndCheckEhhhb>
 8004068:	4603      	mov	r3, r0
 800406a:	f083 0301 	eor.w	r3, r3, #1
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <_ZN6BMP39011defaultInitEv+0x78>
		return false;
 8004074:	2300      	movs	r3, #0
 8004076:	e040      	b.n	80040fa <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(CONFIG,CONFIG_COEF_3,10))
 8004078:	2300      	movs	r3, #0
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	230a      	movs	r3, #10
 800407e:	2202      	movs	r2, #2
 8004080:	211f      	movs	r1, #31
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f83d 	bl	8004102 <_ZN6BMP39012initAndCheckEhhhb>
 8004088:	4603      	mov	r3, r0
 800408a:	f083 0301 	eor.w	r3, r3, #1
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <_ZN6BMP39011defaultInitEv+0x98>
		return false;
 8004094:	2300      	movs	r3, #0
 8004096:	e030      	b.n	80040fa <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(ODR,ODR_ODR_25,10))
 8004098:	2300      	movs	r3, #0
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	230a      	movs	r3, #10
 800409e:	2203      	movs	r2, #3
 80040a0:	211d      	movs	r1, #29
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f82d 	bl	8004102 <_ZN6BMP39012initAndCheckEhhhb>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f083 0301 	eor.w	r3, r3, #1
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <_ZN6BMP39011defaultInitEv+0xb8>
		return false;
 80040b4:	2300      	movs	r3, #0
 80040b6:	e020      	b.n	80040fa <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(INT_CTRL,INT_CTRL_DRDY_EN|INT_CTRL_INT_LEVEL,10))
 80040b8:	2300      	movs	r3, #0
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	230a      	movs	r3, #10
 80040be:	2242      	movs	r2, #66	; 0x42
 80040c0:	2119      	movs	r1, #25
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f81d 	bl	8004102 <_ZN6BMP39012initAndCheckEhhhb>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f083 0301 	eor.w	r3, r3, #1
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <_ZN6BMP39011defaultInitEv+0xd8>
		return false;
 80040d4:	2300      	movs	r3, #0
 80040d6:	e010      	b.n	80040fa <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(PWR_CTRL,PWR_CTRL_PRESS_EN|PWR_CTRL_TEMP_EN|PWR_CTRL_MODE_NORMAL,10))
 80040d8:	2300      	movs	r3, #0
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	230a      	movs	r3, #10
 80040de:	2233      	movs	r2, #51	; 0x33
 80040e0:	211b      	movs	r1, #27
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f80d 	bl	8004102 <_ZN6BMP39012initAndCheckEhhhb>
 80040e8:	4603      	mov	r3, r0
 80040ea:	f083 0301 	eor.w	r3, r3, #1
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <_ZN6BMP39011defaultInitEv+0xf8>
		return false;
 80040f4:	2300      	movs	r3, #0
 80040f6:	e000      	b.n	80040fa <_ZN6BMP39011defaultInitEv+0xfa>

	return true;
 80040f8:	2301      	movs	r3, #1
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <_ZN6BMP39012initAndCheckEhhhb>:

bool BMP390::initAndCheck(uint8_t addr,uint8_t val,uint8_t numberOfTries,bool read_only)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	4608      	mov	r0, r1
 800410c:	4611      	mov	r1, r2
 800410e:	461a      	mov	r2, r3
 8004110:	4603      	mov	r3, r0
 8004112:	70fb      	strb	r3, [r7, #3]
 8004114:	460b      	mov	r3, r1
 8004116:	70bb      	strb	r3, [r7, #2]
 8004118:	4613      	mov	r3, r2
 800411a:	707b      	strb	r3, [r7, #1]
	for (int i=0;i<numberOfTries;i++)
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	787b      	ldrb	r3, [r7, #1]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	429a      	cmp	r2, r3
 8004126:	da21      	bge.n	800416c <_ZN6BMP39012initAndCheckEhhhb+0x6a>
	{
		if (read_only==false)
 8004128:	7e3b      	ldrb	r3, [r7, #24]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <_ZN6BMP39012initAndCheckEhhhb+0x3a>
			SPI_write(addr,val);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	78ba      	ldrb	r2, [r7, #2]
 8004136:	78f9      	ldrb	r1, [r7, #3]
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	4798      	blx	r3

		if (SPI_read(addr)==val)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3304      	adds	r3, #4
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	78fa      	ldrb	r2, [r7, #3]
 8004146:	4611      	mov	r1, r2
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	4798      	blx	r3
 800414c:	4603      	mov	r3, r0
 800414e:	461a      	mov	r2, r3
 8004150:	78bb      	ldrb	r3, [r7, #2]
 8004152:	4293      	cmp	r3, r2
 8004154:	bf0c      	ite	eq
 8004156:	2301      	moveq	r3, #1
 8004158:	2300      	movne	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <_ZN6BMP39012initAndCheckEhhhb+0x62>
			return true;
 8004160:	2301      	movs	r3, #1
 8004162:	e004      	b.n	800416e <_ZN6BMP39012initAndCheckEhhhb+0x6c>
	for (int i=0;i<numberOfTries;i++)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	3301      	adds	r3, #1
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	e7d9      	b.n	8004120 <_ZN6BMP39012initAndCheckEhhhb+0x1e>
	}
	return false;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <_ZN6BMP3906updateEv>:

void BMP390::update()
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
	uint8_t DATA0=SPI_read(DATA_0);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3304      	adds	r3, #4
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2104      	movs	r1, #4
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	4798      	blx	r3
 800418c:	4603      	mov	r3, r0
 800418e:	73fb      	strb	r3, [r7, #15]
	uint8_t DATA1=SPI_read(DATA_1);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3304      	adds	r3, #4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2105      	movs	r1, #5
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	4798      	blx	r3
 800419e:	4603      	mov	r3, r0
 80041a0:	73bb      	strb	r3, [r7, #14]
	uint8_t DATA2=SPI_read(DATA_2);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3304      	adds	r3, #4
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2106      	movs	r1, #6
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	4798      	blx	r3
 80041b0:	4603      	mov	r3, r0
 80041b2:	737b      	strb	r3, [r7, #13]

	uint8_t TEMP0=SPI_read(DATA_3);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3304      	adds	r3, #4
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2107      	movs	r1, #7
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	4798      	blx	r3
 80041c2:	4603      	mov	r3, r0
 80041c4:	733b      	strb	r3, [r7, #12]
	uint8_t TEMP1=SPI_read(DATA_4);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3304      	adds	r3, #4
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2108      	movs	r1, #8
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	4798      	blx	r3
 80041d4:	4603      	mov	r3, r0
 80041d6:	72fb      	strb	r3, [r7, #11]
	uint8_t TEMP2=SPI_read(DATA_5);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3304      	adds	r3, #4
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2109      	movs	r1, #9
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	4798      	blx	r3
 80041e6:	4603      	mov	r3, r0
 80041e8:	72bb      	strb	r3, [r7, #10]

	this->raw_pressure = ((uint32_t)DATA2<<16)|((uint16_t)DATA1<<8)|DATA0;
 80041ea:	7b7b      	ldrb	r3, [r7, #13]
 80041ec:	041b      	lsls	r3, r3, #16
 80041ee:	7bba      	ldrb	r2, [r7, #14]
 80041f0:	0212      	lsls	r2, r2, #8
 80041f2:	431a      	orrs	r2, r3
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	this->raw_temp = ((uint32_t)TEMP2<<16)|((uint16_t)TEMP1<<8)|TEMP0;
 80041fe:	7abb      	ldrb	r3, [r7, #10]
 8004200:	041b      	lsls	r3, r3, #16
 8004202:	7afa      	ldrb	r2, [r7, #11]
 8004204:	0212      	lsls	r2, r2, #8
 8004206:	431a      	orrs	r2, r3
 8004208:	7b3b      	ldrb	r3, [r7, #12]
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	this->read_calib_data();
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fa72 	bl	80046fc <_ZN6BMP39015read_calib_dataEv>
	this->compensate_data();
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f804 	bl	8004226 <_ZN6BMP39015compensate_dataEv>
}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <_ZN6BMP39015compensate_dataEv>:

void BMP390::compensate_data()
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
	this->read_calib_data();
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fa64 	bl	80046fc <_ZN6BMP39015read_calib_dataEv>
	this->compensate_temperature();
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f807 	bl	8004248 <_ZN6BMP39022compensate_temperatureEv>
	this->compensate_pressure();
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f854 	bl	80042e8 <_ZN6BMP39019compensate_pressureEv>
}
 8004240:	bf00      	nop
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <_ZN6BMP39022compensate_temperatureEv>:

void BMP390::compensate_temperature()
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
    double partial_data1 = 0;
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double partial_data2 = 0;
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	e9c7 2302 	strd	r2, r3, [r7, #8]

    partial_data1 = static_cast<double>(this->raw_temp) - quantizedCalibCoef.par_t1;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800426e:	4618      	mov	r0, r3
 8004270:	f7fc f948 	bl	8000504 <__aeabi_ui2d>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800427a:	f7fc f805 	bl	8000288 <__aeabi_dsub>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	e9c7 2304 	strd	r2, r3, [r7, #16]
    partial_data2 = partial_data1 * quantizedCalibCoef.par_t2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800428c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004290:	f7fc f9b2 	bl	80005f8 <__aeabi_dmul>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	e9c7 2302 	strd	r2, r3, [r7, #8]

    this->quantizedCalibCoef.t_lin = partial_data2 + (partial_data1 * partial_data1) * quantizedCalibCoef.par_t3;
 800429c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80042a4:	f7fc f9a8 	bl	80005f8 <__aeabi_dmul>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4610      	mov	r0, r2
 80042ae:	4619      	mov	r1, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80042b6:	f7fc f99f 	bl	80005f8 <__aeabi_dmul>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4610      	mov	r0, r2
 80042c0:	4619      	mov	r1, r3
 80042c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042c6:	f7fb ffe1 	bl	800028c <__adddf3>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8

    this->temp = static_cast<double>(quantizedCalibCoef.t_lin);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
}
 80042e0:	bf00      	nop
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <_ZN6BMP39019compensate_pressureEv>:

void BMP390::compensate_pressure()
{
 80042e8:	b5b0      	push	{r4, r5, r7, lr}
 80042ea:	b08e      	sub	sp, #56	; 0x38
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = this->quantizedCalibCoef.par_p6 * this->quantizedCalibCoef.t_lin;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80042fc:	f7fc f97c 	bl	80005f8 <__aeabi_dmul>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data2 = this->quantizedCalibCoef.par_p7 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 800431a:	f7fc f96d 	bl	80005f8 <__aeabi_dmul>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4620      	mov	r0, r4
 8004324:	4629      	mov	r1, r5
 8004326:	f7fc f967 	bl	80005f8 <__aeabi_dmul>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data3 = this->quantizedCalibCoef.par_p8 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8004344:	f7fc f958 	bl	80005f8 <__aeabi_dmul>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4610      	mov	r0, r2
 800434e:	4619      	mov	r1, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8004356:	f7fc f94f 	bl	80005f8 <__aeabi_dmul>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4620      	mov	r0, r4
 8004360:	4629      	mov	r1, r5
 8004362:	f7fc f949 	bl	80005f8 <__aeabi_dmul>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_out1 = this->quantizedCalibCoef.par_p5 + partial_data1 + partial_data2 + partial_data3;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8004374:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004378:	f7fb ff88 	bl	800028c <__adddf3>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4610      	mov	r0, r2
 8004382:	4619      	mov	r1, r3
 8004384:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004388:	f7fb ff80 	bl	800028c <__adddf3>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004394:	f7fb ff7a 	bl	800028c <__adddf3>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    partial_data1 = this->quantizedCalibCoef.par_p2 * this->quantizedCalibCoef.t_lin;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80043ac:	f7fc f924 	bl	80005f8 <__aeabi_dmul>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data2 = this->quantizedCalibCoef.par_p3 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80043ca:	f7fc f915 	bl	80005f8 <__aeabi_dmul>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4620      	mov	r0, r4
 80043d4:	4629      	mov	r1, r5
 80043d6:	f7fc f90f 	bl	80005f8 <__aeabi_dmul>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data3 = this->quantizedCalibCoef.par_p4 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80043f4:	f7fc f900 	bl	80005f8 <__aeabi_dmul>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4610      	mov	r0, r2
 80043fe:	4619      	mov	r1, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8004406:	f7fc f8f7 	bl	80005f8 <__aeabi_dmul>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4620      	mov	r0, r4
 8004410:	4629      	mov	r1, r5
 8004412:	f7fc f8f1 	bl	80005f8 <__aeabi_dmul>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_out2 = static_cast<double>(this->raw_pressure) * (this->quantizedCalibCoef.par_p1 + partial_data1 + partial_data2 + partial_data3);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004424:	4618      	mov	r0, r3
 8004426:	f7fc f86d 	bl	8000504 <__aeabi_ui2d>
 800442a:	4604      	mov	r4, r0
 800442c:	460d      	mov	r5, r1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8004434:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004438:	f7fb ff28 	bl	800028c <__adddf3>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4610      	mov	r0, r2
 8004442:	4619      	mov	r1, r3
 8004444:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004448:	f7fb ff20 	bl	800028c <__adddf3>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4610      	mov	r0, r2
 8004452:	4619      	mov	r1, r3
 8004454:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004458:	f7fb ff18 	bl	800028c <__adddf3>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4620      	mov	r0, r4
 8004462:	4629      	mov	r1, r5
 8004464:	f7fc f8c8 	bl	80005f8 <__aeabi_dmul>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    partial_data1 = static_cast<double>(this->raw_pressure) * static_cast<double>(this->raw_pressure);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004476:	4618      	mov	r0, r3
 8004478:	f7fc f844 	bl	8000504 <__aeabi_ui2d>
 800447c:	4604      	mov	r4, r0
 800447e:	460d      	mov	r5, r1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004486:	4618      	mov	r0, r3
 8004488:	f7fc f83c 	bl	8000504 <__aeabi_ui2d>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4620      	mov	r0, r4
 8004492:	4629      	mov	r1, r5
 8004494:	f7fc f8b0 	bl	80005f8 <__aeabi_dmul>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data2 = this->quantizedCalibCoef.par_p9 + this->quantizedCalibCoef.par_p10 * this->quantizedCalibCoef.t_lin;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80044b2:	f7fc f8a1 	bl	80005f8 <__aeabi_dmul>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4620      	mov	r0, r4
 80044bc:	4629      	mov	r1, r5
 80044be:	f7fb fee5 	bl	800028c <__adddf3>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data3 = partial_data1 * partial_data2;
 80044ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044ce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80044d2:	f7fc f891 	bl	80005f8 <__aeabi_dmul>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data4 = partial_data3 + (static_cast<double>(this->raw_pressure) * static_cast<double>(this->raw_pressure) * static_cast<double>(this->raw_pressure)) * this->quantizedCalibCoef.par_p11;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fc f80d 	bl	8000504 <__aeabi_ui2d>
 80044ea:	4604      	mov	r4, r0
 80044ec:	460d      	mov	r5, r1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fc f805 	bl	8000504 <__aeabi_ui2d>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4620      	mov	r0, r4
 8004500:	4629      	mov	r1, r5
 8004502:	f7fc f879 	bl	80005f8 <__aeabi_dmul>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4614      	mov	r4, r2
 800450c:	461d      	mov	r5, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004514:	4618      	mov	r0, r3
 8004516:	f7fb fff5 	bl	8000504 <__aeabi_ui2d>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4620      	mov	r0, r4
 8004520:	4629      	mov	r1, r5
 8004522:	f7fc f869 	bl	80005f8 <__aeabi_dmul>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	4610      	mov	r0, r2
 800452c:	4619      	mov	r1, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8004534:	f7fc f860 	bl	80005f8 <__aeabi_dmul>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004540:	f7fb fea4 	bl	800028c <__adddf3>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	e9c7 2302 	strd	r2, r3, [r7, #8]

    this->pressure = (partial_out1 + partial_out2 + partial_data4) / 100.0f;
 800454c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004550:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004554:	f7fb fe9a 	bl	800028c <__adddf3>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004564:	f7fb fe92 	bl	800028c <__adddf3>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	4610      	mov	r0, r2
 800456e:	4619      	mov	r1, r3
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	4b05      	ldr	r3, [pc, #20]	; (800458c <_ZN6BMP39019compensate_pressureEv+0x2a4>)
 8004576:	f7fc f969 	bl	800084c <__aeabi_ddiv>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
}
 8004584:	bf00      	nop
 8004586:	3738      	adds	r7, #56	; 0x38
 8004588:	46bd      	mov	sp, r7
 800458a:	bdb0      	pop	{r4, r5, r7, pc}
 800458c:	40590000 	.word	0x40590000

08004590 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* BMP390::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8004590:	b5b0      	push	{r4, r5, r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3308      	adds	r3, #8
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::BMP_RAW_PRESS)!=senorsList.end())
 80045a2:	230f      	movs	r3, #15
 80045a4:	613b      	str	r3, [r7, #16]
 80045a6:	f107 0310 	add.w	r3, r7, #16
 80045aa:	4619      	mov	r1, r3
 80045ac:	6838      	ldr	r0, [r7, #0]
 80045ae:	f000 fba9 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80045b2:	4603      	mov	r3, r0
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	6838      	ldr	r0, [r7, #0]
 80045b8:	f000 fbbd 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80045bc:	4603      	mov	r3, r0
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	f107 0214 	add.w	r2, r7, #20
 80045c4:	f107 030c 	add.w	r3, r7, #12
 80045c8:	4611      	mov	r1, r2
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fbc0 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d022      	beq.n	800461c <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x8c>
	{
		strcat(packet,toCharArray(pressure));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f103 0408 	add.w	r4, r3, #8
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	1d1d      	adds	r5, r3, #4
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80045e6:	4610      	mov	r0, r2
 80045e8:	4619      	mov	r1, r3
 80045ea:	f7fc fab5 	bl	8000b58 <__aeabi_d2iz>
 80045ee:	4603      	mov	r3, r0
 80045f0:	4619      	mov	r1, r3
 80045f2:	4628      	mov	r0, r5
 80045f4:	f7ff fbaa 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 80045f8:	4603      	mov	r3, r0
 80045fa:	4619      	mov	r1, r3
 80045fc:	4620      	mov	r0, r4
 80045fe:	f015 ff55 	bl	801a4ac <strcat>
		strcat(packet,",");
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f103 0408 	add.w	r4, r3, #8
 8004608:	4620      	mov	r0, r4
 800460a:	f7fb fe31 	bl	8000270 <strlen>
 800460e:	4603      	mov	r3, r0
 8004610:	4423      	add	r3, r4
 8004612:	4905      	ldr	r1, [pc, #20]	; (8004628 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x98>)
 8004614:	461a      	mov	r2, r3
 8004616:	460b      	mov	r3, r1
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3308      	adds	r3, #8
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bdb0      	pop	{r4, r5, r7, pc}
 8004628:	0801cff0 	.word	0x0801cff0

0800462c <_ZThn4_N6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	bool defaultInit();
	void update();
	int32_t getPressure();
	int32_t getTemp();
	uint8_t getChipID();
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 800462c:	f1a0 0004 	sub.w	r0, r0, #4
 8004630:	f7ff bfae 	b.w	8004590 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>

08004634 <_ZN6BMP3909SPI_writeEhh>:
{
	return this->SPI_read(CHIP_ID);
}

void BMP390::SPI_write(uint8_t reg,uint8_t data)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	70fb      	strb	r3, [r7, #3]
 8004640:	4613      	mov	r3, r2
 8004642:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(BMP_CS_PORT,BMP_CS_PIN,GPIO_PIN_RESET);
 8004644:	2200      	movs	r2, #0
 8004646:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800464a:	480f      	ldr	r0, [pc, #60]	; (8004688 <_ZN6BMP3909SPI_writeEhh+0x54>)
 800464c:	f006 fc6a 	bl	800af24 <HAL_GPIO_WritePin>
	this->spiTxBuff[0] = reg;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	78fa      	ldrb	r2, [r7, #3]
 8004654:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	this->spiTxBuff[1] = data;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	78ba      	ldrb	r2, [r7, #2]
 800465c:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	33e4      	adds	r3, #228	; 0xe4
 800466a:	2202      	movs	r2, #2
 800466c:	4619      	mov	r1, r3
 800466e:	f009 fe11 	bl	800e294 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(BMP_CS_PORT,BMP_CS_PIN,GPIO_PIN_SET);
 8004672:	2201      	movs	r2, #1
 8004674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004678:	4803      	ldr	r0, [pc, #12]	; (8004688 <_ZN6BMP3909SPI_writeEhh+0x54>)
 800467a:	f006 fc53 	bl	800af24 <HAL_GPIO_WritePin>
}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40020400 	.word	0x40020400

0800468c <_ZN6BMP3908SPI_readEh>:

uint8_t BMP390::SPI_read(uint8_t reg)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BMP_CS_PORT, BMP_CS_PIN, GPIO_PIN_RESET);
 8004698:	2200      	movs	r2, #0
 800469a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800469e:	4816      	ldr	r0, [pc, #88]	; (80046f8 <_ZN6BMP3908SPI_readEh+0x6c>)
 80046a0:	f006 fc40 	bl	800af24 <HAL_GPIO_WritePin>
	this->spiTxBuff[0]=reg|0x80;
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	this->spiTxBuff[1]=0x00;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff, 2);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	33e4      	adds	r3, #228	; 0xe4
 80046c4:	2202      	movs	r2, #2
 80046c6:	4619      	mov	r1, r3
 80046c8:	f009 fde4 	bl	800e294 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(spi_port, (uint8_t*)spiRxBuff, 1);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	33e6      	adds	r3, #230	; 0xe6
 80046d6:	2201      	movs	r2, #1
 80046d8:	4619      	mov	r1, r3
 80046da:	f009 fe91 	bl	800e400 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(BMP_CS_PORT, BMP_CS_PIN, GPIO_PIN_SET);
 80046de:	2201      	movs	r2, #1
 80046e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046e4:	4804      	ldr	r0, [pc, #16]	; (80046f8 <_ZN6BMP3908SPI_readEh+0x6c>)
 80046e6:	f006 fc1d 	bl	800af24 <HAL_GPIO_WritePin>

	return this->spiRxBuff[0];
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40020400 	.word	0x40020400

080046fc <_ZN6BMP39015read_calib_dataEv>:

void BMP390::read_calib_data()
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08a      	sub	sp, #40	; 0x28
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
	double temp_var = 0;
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uint8_t NVM_PAR_T1_1_value = this->SPI_read(NVM_PAR_T1_1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3304      	adds	r3, #4
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2131      	movs	r1, #49	; 0x31
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	4798      	blx	r3
 800471e:	4603      	mov	r3, r0
 8004720:	77fb      	strb	r3, [r7, #31]
	uint8_t NVM_PAR_T1_2_value = this->SPI_read(NVM_PAR_T1_2);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3304      	adds	r3, #4
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2132      	movs	r1, #50	; 0x32
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	4798      	blx	r3
 8004730:	4603      	mov	r3, r0
 8004732:	77bb      	strb	r3, [r7, #30]
	uint8_t NVM_PAR_T2_1_value = this->SPI_read(NVM_PAR_T2_1);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3304      	adds	r3, #4
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2133      	movs	r1, #51	; 0x33
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	4798      	blx	r3
 8004742:	4603      	mov	r3, r0
 8004744:	777b      	strb	r3, [r7, #29]
	uint8_t NVM_PAR_T2_2_value = this->SPI_read(NVM_PAR_T2_2);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3304      	adds	r3, #4
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2134      	movs	r1, #52	; 0x34
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	4798      	blx	r3
 8004754:	4603      	mov	r3, r0
 8004756:	773b      	strb	r3, [r7, #28]
	uint8_t NVM_PAR_T3_value = this->SPI_read(NVM_PAR_T3);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3304      	adds	r3, #4
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2135      	movs	r1, #53	; 0x35
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	4798      	blx	r3
 8004766:	4603      	mov	r3, r0
 8004768:	76fb      	strb	r3, [r7, #27]
	uint8_t NVM_PAR_P1_1_value = this->SPI_read(NVM_PAR_P1_1);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3304      	adds	r3, #4
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2136      	movs	r1, #54	; 0x36
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	4798      	blx	r3
 8004778:	4603      	mov	r3, r0
 800477a:	76bb      	strb	r3, [r7, #26]
	uint8_t NVM_PAR_P1_2_value = this->SPI_read(NVM_PAR_P1_2);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3304      	adds	r3, #4
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2137      	movs	r1, #55	; 0x37
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	4798      	blx	r3
 800478a:	4603      	mov	r3, r0
 800478c:	767b      	strb	r3, [r7, #25]
	uint8_t NVM_PAR_P2_1_value = this->SPI_read(NVM_PAR_P2_1);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3304      	adds	r3, #4
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2138      	movs	r1, #56	; 0x38
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	4798      	blx	r3
 800479c:	4603      	mov	r3, r0
 800479e:	763b      	strb	r3, [r7, #24]
	uint8_t NVM_PAR_P2_2_value = this->SPI_read(NVM_PAR_P2_2);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3304      	adds	r3, #4
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2139      	movs	r1, #57	; 0x39
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	4798      	blx	r3
 80047ae:	4603      	mov	r3, r0
 80047b0:	75fb      	strb	r3, [r7, #23]
	uint8_t NVM_PAR_P3_value = this->SPI_read(NVM_PAR_P3);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3304      	adds	r3, #4
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	213a      	movs	r1, #58	; 0x3a
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	4798      	blx	r3
 80047c0:	4603      	mov	r3, r0
 80047c2:	75bb      	strb	r3, [r7, #22]
	uint8_t NVM_PAR_P4_value = this->SPI_read(NVM_PAR_P4);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3304      	adds	r3, #4
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	213b      	movs	r1, #59	; 0x3b
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	4798      	blx	r3
 80047d2:	4603      	mov	r3, r0
 80047d4:	757b      	strb	r3, [r7, #21]
	uint8_t NVM_PAR_P5_1_value = this->SPI_read(NVM_PAR_P5_1);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3304      	adds	r3, #4
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	213c      	movs	r1, #60	; 0x3c
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	4798      	blx	r3
 80047e4:	4603      	mov	r3, r0
 80047e6:	753b      	strb	r3, [r7, #20]
	uint8_t NVM_PAR_P5_2_value = this->SPI_read(NVM_PAR_P5_2);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3304      	adds	r3, #4
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	213d      	movs	r1, #61	; 0x3d
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	4798      	blx	r3
 80047f6:	4603      	mov	r3, r0
 80047f8:	74fb      	strb	r3, [r7, #19]
	uint8_t NVM_PAR_P6_1_value = this->SPI_read(NVM_PAR_P6_1);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3304      	adds	r3, #4
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	213e      	movs	r1, #62	; 0x3e
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	4798      	blx	r3
 8004808:	4603      	mov	r3, r0
 800480a:	74bb      	strb	r3, [r7, #18]
	uint8_t NVM_PAR_P6_2_value = this->SPI_read(NVM_PAR_P6_2);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3304      	adds	r3, #4
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	213f      	movs	r1, #63	; 0x3f
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	4798      	blx	r3
 800481a:	4603      	mov	r3, r0
 800481c:	747b      	strb	r3, [r7, #17]
	uint8_t NVM_PAR_P7_value = this->SPI_read(NVM_PAR_P7);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3304      	adds	r3, #4
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2140      	movs	r1, #64	; 0x40
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	4798      	blx	r3
 800482c:	4603      	mov	r3, r0
 800482e:	743b      	strb	r3, [r7, #16]
	uint8_t NVM_PAR_P8_value = this->SPI_read(NVM_PAR_P8);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3304      	adds	r3, #4
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2141      	movs	r1, #65	; 0x41
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	4798      	blx	r3
 800483e:	4603      	mov	r3, r0
 8004840:	73fb      	strb	r3, [r7, #15]
	uint8_t NVM_PAR_P9_1_value = this->SPI_read(NVM_PAR_P9_1);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3304      	adds	r3, #4
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2142      	movs	r1, #66	; 0x42
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	4798      	blx	r3
 8004850:	4603      	mov	r3, r0
 8004852:	73bb      	strb	r3, [r7, #14]
	uint8_t NVM_PAR_P9_2_value = this->SPI_read(NVM_PAR_P9_2);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3304      	adds	r3, #4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2143      	movs	r1, #67	; 0x43
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	4798      	blx	r3
 8004862:	4603      	mov	r3, r0
 8004864:	737b      	strb	r3, [r7, #13]
	uint8_t NVM_PAR_P10_value = this->SPI_read(NVM_PAR_P10);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3304      	adds	r3, #4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2144      	movs	r1, #68	; 0x44
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	4798      	blx	r3
 8004874:	4603      	mov	r3, r0
 8004876:	733b      	strb	r3, [r7, #12]
	uint8_t NVM_PAR_P11_value = this->SPI_read(NVM_PAR_P11);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3304      	adds	r3, #4
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2145      	movs	r1, #69	; 0x45
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	4798      	blx	r3
 8004886:	4603      	mov	r3, r0
 8004888:	72fb      	strb	r3, [r7, #11]

    this->calibCoef.par_t1 = drone::utils::functions::concatBytes(NVM_PAR_T1_2_value, NVM_PAR_T1_1_value);
 800488a:	7ffa      	ldrb	r2, [r7, #31]
 800488c:	7fbb      	ldrb	r3, [r7, #30]
 800488e:	4611      	mov	r1, r2
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff fa77 	bl	8003d84 <_ZN5drone5utils9functionsL11concatBytesEhh>
 8004896:	4603      	mov	r3, r0
 8004898:	b29a      	uxth	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    this->calibCoef.par_t2 = drone::utils::functions::concatBytes(NVM_PAR_T2_2_value, NVM_PAR_T2_1_value);
 80048a0:	7f7a      	ldrb	r2, [r7, #29]
 80048a2:	7f3b      	ldrb	r3, [r7, #28]
 80048a4:	4611      	mov	r1, r2
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fa6c 	bl	8003d84 <_ZN5drone5utils9functionsL11concatBytesEhh>
 80048ac:	4603      	mov	r3, r0
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    this->calibCoef.par_t3 = static_cast<int8_t>(NVM_PAR_T3_value);
 80048b6:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    this->calibCoef.par_p1 = drone::utils::functions::concatBytes(NVM_PAR_P1_2_value, NVM_PAR_P1_1_value);
 80048c0:	7eba      	ldrb	r2, [r7, #26]
 80048c2:	7e7b      	ldrb	r3, [r7, #25]
 80048c4:	4611      	mov	r1, r2
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff fa5c 	bl	8003d84 <_ZN5drone5utils9functionsL11concatBytesEhh>
 80048cc:	4603      	mov	r3, r0
 80048ce:	461a      	mov	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    this->calibCoef.par_p2 = drone::utils::functions::concatBytes(NVM_PAR_P2_2_value, NVM_PAR_P2_1_value);
 80048d6:	7e3a      	ldrb	r2, [r7, #24]
 80048d8:	7dfb      	ldrb	r3, [r7, #23]
 80048da:	4611      	mov	r1, r2
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff fa51 	bl	8003d84 <_ZN5drone5utils9functionsL11concatBytesEhh>
 80048e2:	4603      	mov	r3, r0
 80048e4:	461a      	mov	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    this->calibCoef.par_p3 = static_cast<int8_t>(NVM_PAR_P3_value);
 80048ec:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    this->calibCoef.par_p4 = static_cast<int8_t>(NVM_PAR_P4_value);
 80048f6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    this->calibCoef.par_p5 = drone::utils::functions::concatBytes(NVM_PAR_P5_2_value, NVM_PAR_P5_1_value);
 8004900:	7d3a      	ldrb	r2, [r7, #20]
 8004902:	7cfb      	ldrb	r3, [r7, #19]
 8004904:	4611      	mov	r1, r2
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff fa3c 	bl	8003d84 <_ZN5drone5utils9functionsL11concatBytesEhh>
 800490c:	4603      	mov	r3, r0
 800490e:	b29a      	uxth	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    this->calibCoef.par_p6 = drone::utils::functions::concatBytes(NVM_PAR_P6_2_value, NVM_PAR_P6_1_value);
 8004916:	7cba      	ldrb	r2, [r7, #18]
 8004918:	7c7b      	ldrb	r3, [r7, #17]
 800491a:	4611      	mov	r1, r2
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff fa31 	bl	8003d84 <_ZN5drone5utils9functionsL11concatBytesEhh>
 8004922:	4603      	mov	r3, r0
 8004924:	b29a      	uxth	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    this->calibCoef.par_p7 = static_cast<int8_t>(NVM_PAR_P7_value);
 800492c:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    this->calibCoef.par_p8 = static_cast<int8_t>(NVM_PAR_P8_value);
 8004936:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    this->calibCoef.par_p9 = drone::utils::functions::concatBytes(NVM_PAR_P9_2_value, NVM_PAR_P9_1_value);
 8004940:	7bba      	ldrb	r2, [r7, #14]
 8004942:	7b7b      	ldrb	r3, [r7, #13]
 8004944:	4611      	mov	r1, r2
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff fa1c 	bl	8003d84 <_ZN5drone5utils9functionsL11concatBytesEhh>
 800494c:	4603      	mov	r3, r0
 800494e:	461a      	mov	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    this->calibCoef.par_p10 = static_cast<int8_t>(NVM_PAR_P10_value);
 8004956:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    this->calibCoef.par_p11 = static_cast<int8_t>(NVM_PAR_P11_value);
 8004960:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

    temp_var = 0.00390625f;
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	4b90      	ldr	r3, [pc, #576]	; (8004bb0 <_ZN6BMP39015read_calib_dataEv+0x4b4>)
 8004970:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_t1 = static_cast<double>(this->calibCoef.par_t1) / temp_var;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800497a:	4618      	mov	r0, r3
 800497c:	f7fb fdc2 	bl	8000504 <__aeabi_ui2d>
 8004980:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004984:	f7fb ff62 	bl	800084c <__aeabi_ddiv>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
    temp_var = 1073741824.0f;
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	4b87      	ldr	r3, [pc, #540]	; (8004bb4 <_ZN6BMP39015read_calib_dataEv+0x4b8>)
 8004998:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_t2 = static_cast<double>(this->calibCoef.par_t2) / temp_var;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fb fdae 	bl	8000504 <__aeabi_ui2d>
 80049a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049ac:	f7fb ff4e 	bl	800084c <__aeabi_ddiv>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
    temp_var = 281474976710656.0f;
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	4b7e      	ldr	r3, [pc, #504]	; (8004bb8 <_ZN6BMP39015read_calib_dataEv+0x4bc>)
 80049c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_t3 = static_cast<double>(this->calibCoef.par_t3) / temp_var;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fb fdaa 	bl	8000524 <__aeabi_i2d>
 80049d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049d4:	f7fb ff3a 	bl	800084c <__aeabi_ddiv>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
    temp_var = 1048576.0f;
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	4b75      	ldr	r3, [pc, #468]	; (8004bbc <_ZN6BMP39015read_calib_dataEv+0x4c0>)
 80049e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p1 = static_cast<double>(this->calibCoef.par_p1 - 16384) / temp_var;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 80049f2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fb fd94 	bl	8000524 <__aeabi_i2d>
 80049fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a00:	f7fb ff24 	bl	800084c <__aeabi_ddiv>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    temp_var = 536870912.0f;
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	4b6b      	ldr	r3, [pc, #428]	; (8004bc0 <_ZN6BMP39015read_calib_dataEv+0x4c4>)
 8004a14:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p2 = static_cast<double>(this->calibCoef.par_p2 - 16384) / temp_var;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8004a1e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fb fd7e 	bl	8000524 <__aeabi_i2d>
 8004a28:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a2c:	f7fb ff0e 	bl	800084c <__aeabi_ddiv>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    temp_var = 4294967296.0f;
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	4b61      	ldr	r3, [pc, #388]	; (8004bc4 <_ZN6BMP39015read_calib_dataEv+0x4c8>)
 8004a40:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p3 = static_cast<double>(this->calibCoef.par_p3) / temp_var;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f993 305a 	ldrsb.w	r3, [r3, #90]	; 0x5a
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fb fd6a 	bl	8000524 <__aeabi_i2d>
 8004a50:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a54:	f7fb fefa 	bl	800084c <__aeabi_ddiv>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    temp_var = 137438953472.0f;
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	4b58      	ldr	r3, [pc, #352]	; (8004bc8 <_ZN6BMP39015read_calib_dataEv+0x4cc>)
 8004a68:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p4 = static_cast<double>(this->calibCoef.par_p4) / temp_var;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f993 305b 	ldrsb.w	r3, [r3, #91]	; 0x5b
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fb fd56 	bl	8000524 <__aeabi_i2d>
 8004a78:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a7c:	f7fb fee6 	bl	800084c <__aeabi_ddiv>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

    temp_var = 0.125f;
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004a92:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p5 = static_cast<double>(this->calibCoef.par_p5) / temp_var;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fb fd31 	bl	8000504 <__aeabi_ui2d>
 8004aa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aa6:	f7fb fed1 	bl	800084c <__aeabi_ddiv>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    temp_var = 64.0f;
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	4b44      	ldr	r3, [pc, #272]	; (8004bcc <_ZN6BMP39015read_calib_dataEv+0x4d0>)
 8004aba:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p6 = static_cast<double>(this->calibCoef.par_p6) / temp_var;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fb fd1d 	bl	8000504 <__aeabi_ui2d>
 8004aca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ace:	f7fb febd 	bl	800084c <__aeabi_ddiv>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    temp_var = 256.0f;
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	4b3b      	ldr	r3, [pc, #236]	; (8004bd0 <_ZN6BMP39015read_calib_dataEv+0x4d4>)
 8004ae2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p7 = static_cast<double>(this->calibCoef.par_p7) / temp_var;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f993 3060 	ldrsb.w	r3, [r3, #96]	; 0x60
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fb fd19 	bl	8000524 <__aeabi_i2d>
 8004af2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004af6:	f7fb fea9 	bl	800084c <__aeabi_ddiv>
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    temp_var = 32768.0f;
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	4b32      	ldr	r3, [pc, #200]	; (8004bd4 <_ZN6BMP39015read_calib_dataEv+0x4d8>)
 8004b0a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p8 = static_cast<double>(this->calibCoef.par_p8) / temp_var;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f993 3061 	ldrsb.w	r3, [r3, #97]	; 0x61
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fb fd05 	bl	8000524 <__aeabi_i2d>
 8004b1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b1e:	f7fb fe95 	bl	800084c <__aeabi_ddiv>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
    temp_var = 281474976710656.0f;
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	4b21      	ldr	r3, [pc, #132]	; (8004bb8 <_ZN6BMP39015read_calib_dataEv+0x4bc>)
 8004b32:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p9 = static_cast<double>(this->calibCoef.par_p9) / temp_var;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fb fcf1 	bl	8000524 <__aeabi_i2d>
 8004b42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b46:	f7fb fe81 	bl	800084c <__aeabi_ddiv>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
    temp_var = 281474976710656.0f;
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	4b17      	ldr	r3, [pc, #92]	; (8004bb8 <_ZN6BMP39015read_calib_dataEv+0x4bc>)
 8004b5a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p10 = static_cast<double>(this->calibCoef.par_p10) / temp_var;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f993 3064 	ldrsb.w	r3, [r3, #100]	; 0x64
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7fb fcdd 	bl	8000524 <__aeabi_i2d>
 8004b6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b6e:	f7fb fe6d 	bl	800084c <__aeabi_ddiv>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    temp_var = 36893488147419103232.0f;
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 8004b84:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p11 = static_cast<double>(this->calibCoef.par_p11) / temp_var;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fb fcc8 	bl	8000524 <__aeabi_i2d>
 8004b94:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b98:	f7fb fe58 	bl	800084c <__aeabi_ddiv>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
}
 8004ba6:	bf00      	nop
 8004ba8:	3728      	adds	r7, #40	; 0x28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	3f700000 	.word	0x3f700000
 8004bb4:	41d00000 	.word	0x41d00000
 8004bb8:	42f00000 	.word	0x42f00000
 8004bbc:	41300000 	.word	0x41300000
 8004bc0:	41c00000 	.word	0x41c00000
 8004bc4:	41f00000 	.word	0x41f00000
 8004bc8:	42400000 	.word	0x42400000
 8004bcc:	40500000 	.word	0x40500000
 8004bd0:	40700000 	.word	0x40700000
 8004bd4:	40e00000 	.word	0x40e00000

08004bd8 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 8004be2:	2301      	movs	r3, #1
 8004be4:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	fb03 f303 	mul.w	r3, r3, r3
 8004bec:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	fb02 f303 	mul.w	r3, r2, r3
 8004bf6:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	fb02 f303 	mul.w	r3, r2, r3
 8004c00:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d201      	bcs.n	8004c0e <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	e01d      	b.n	8004c4a <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d202      	bcs.n	8004c1c <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	e016      	b.n	8004c4a <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d202      	bcs.n	8004c2a <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	3302      	adds	r3, #2
 8004c28:	e00f      	b.n	8004c4a <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d202      	bcs.n	8004c38 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	3303      	adds	r3, #3
 8004c36:	e008      	b.n	8004c4a <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c40:	607b      	str	r3, [r7, #4]
	  __n += 4;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	3304      	adds	r3, #4
 8004c46:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8004c48:	e7db      	b.n	8004c02 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
	...

08004c58 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8004c58:	b480      	push	{r7}
 8004c5a:	b089      	sub	sp, #36	; 0x24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b63      	cmp	r3, #99	; 0x63
 8004c6e:	d925      	bls.n	8004cbc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x64>
	{
	  auto const __num = (__val % 100) * 2;
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	4b22      	ldr	r3, [pc, #136]	; (8004cfc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8004c74:	fba3 1302 	umull	r1, r3, r3, r2
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	2164      	movs	r1, #100	; 0x64
 8004c7c:	fb01 f303 	mul.w	r3, r1, r3
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	61bb      	str	r3, [r7, #24]
	  __val /= 100;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a1c      	ldr	r2, [pc, #112]	; (8004cfc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	68f9      	ldr	r1, [r7, #12]
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	440b      	add	r3, r1
 8004c9c:	4918      	ldr	r1, [pc, #96]	; (8004d00 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8004c9e:	5c8a      	ldrb	r2, [r1, r2]
 8004ca0:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4413      	add	r3, r2
 8004caa:	4915      	ldr	r1, [pc, #84]	; (8004d00 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	440a      	add	r2, r1
 8004cb0:	7812      	ldrb	r2, [r2, #0]
 8004cb2:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	3b02      	subs	r3, #2
 8004cb8:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8004cba:	e7d6      	b.n	8004c6a <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x12>
	}
      if (__val >= 10)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b09      	cmp	r3, #9
 8004cc0:	d910      	bls.n	8004ce4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	617b      	str	r3, [r7, #20]
	  __first[1] = __digits[__num + 1];
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	490b      	ldr	r1, [pc, #44]	; (8004d00 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8004cd2:	5c8a      	ldrb	r2, [r1, r2]
 8004cd4:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 8004cd6:	4a0a      	ldr	r2, [pc, #40]	; (8004d00 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	4413      	add	r3, r2
 8004cdc:	781a      	ldrb	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 8004ce2:	e005      	b.n	8004cf0 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	3330      	adds	r3, #48	; 0x30
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	701a      	strb	r2, [r3, #0]
    }
 8004cf0:	bf00      	nop
 8004cf2:	3724      	adds	r7, #36	; 0x24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	51eb851f 	.word	0x51eb851f
 8004d00:	0801d240 	.word	0x0801d240

08004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>:
       *  the key matches.  If successful the function returns an iterator
       *  pointing to the sought after element.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */
      iterator
      find(const key_type& __x)
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6839      	ldr	r1, [r7, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 f830 	bl	8004d78 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	f107 020c 	add.w	r2, r7, #12
 8004d20:	f107 0308 	add.w	r3, r7, #8
 8004d24:	4611      	mov	r1, r2
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 f862 	bl	8004df0 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b082      	sub	sp, #8
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 f865 	bl	8004e10 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 8004d46:	4603      	mov	r3, r0
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      { return __x._M_node == __y._M_node; }

#if ! __cpp_lib_three_way_comparison
      friend bool
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	bf14      	ite	ne
 8004d66:	2301      	movne	r3, #1
 8004d68:	2300      	moveq	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004d78:	b590      	push	{r4, r7, lr}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f855 	bl	8004e32 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>
 8004d88:	4604      	mov	r4, r0
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f85d 	bl	8004e4a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 8004d90:	4602      	mov	r2, r0
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	4621      	mov	r1, r4
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f863 	bl	8004e62 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f88f 	bl	8004ec4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 8004da6:	4603      	mov	r3, r0
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	f107 020c 	add.w	r2, r7, #12
 8004dae:	f107 0308 	add.w	r3, r7, #8
 8004db2:	4611      	mov	r1, r2
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 f896 	bl	8004ee6 <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8004dba:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10d      	bne.n	8004ddc <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 8004dc0:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 f8a2 	bl	8004f0e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	461a      	mov	r2, r3
 8004dce:	6839      	ldr	r1, [r7, #0]
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f000 f8a8 	bl	8004f26 <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d004      	beq.n	8004de6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f871 	bl	8004ec4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 8004de2:	4603      	mov	r3, r0
 8004de4:	e000      	b.n	8004de8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x70>
 8004de6:	68bb      	ldr	r3, [r7, #8]
    }
 8004de8:	4618      	mov	r0, r3
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd90      	pop	{r4, r7, pc}

08004df0 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4618      	mov	r0, r3
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	1d1a      	adds	r2, r3, #4
 8004e1c:	f107 030c 	add.w	r3, r7, #12
 8004e20:	4611      	mov	r1, r2
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 f894 	bl	8004f50 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPKSt18_Rb_tree_node_base>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3304      	adds	r3, #4
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004e62:	b590      	push	{r4, r7, lr}
 8004e64:	b087      	sub	sp, #28
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	607a      	str	r2, [r7, #4]
 8004e6e:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d01b      	beq.n	8004eae <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8004e76:	68fc      	ldr	r4, [r7, #12]
 8004e78:	68b8      	ldr	r0, [r7, #8]
 8004e7a:	f000 f878 	bl	8004f6e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	4619      	mov	r1, r3
 8004e84:	4620      	mov	r0, r4
 8004e86:	f000 f84e 	bl	8004f26 <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	f083 0301 	eor.w	r3, r3, #1
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d006      	beq.n	8004ea4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	607b      	str	r3, [r7, #4]
 8004e9a:	68b8      	ldr	r0, [r7, #8]
 8004e9c:	f000 f87a 	bl	8004f94 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004ea0:	60b8      	str	r0, [r7, #8]
 8004ea2:	e7e5      	b.n	8004e70 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0xe>
	  __x = _S_right(__x);
 8004ea4:	68b8      	ldr	r0, [r7, #8]
 8004ea6:	f000 f881 	bl	8004fac <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004eaa:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8004eac:	e7e0      	b.n	8004e70 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0xe>
      return iterator(__y);
 8004eae:	f107 0314 	add.w	r3, r7, #20
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 f885 	bl	8004fc4 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8004eba:	697b      	ldr	r3, [r7, #20]
    }
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd90      	pop	{r4, r7, pc}

08004ec4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	1d1a      	adds	r2, r3, #4
 8004ed0:	f107 030c 	add.w	r3, r7, #12
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 f874 	bl	8004fc4 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	bf0c      	ite	eq
 8004efc:	2301      	moveq	r3, #1
 8004efe:	2300      	movne	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	4618      	mov	r0, r3
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f829 	bl	8004f6e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8004f26:	b480      	push	{r7}
 8004f28:	b085      	sub	sp, #20
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	bfb4      	ite	lt
 8004f3e:	2301      	movlt	r3, #1
 8004f40:	2300      	movge	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4618      	mov	r0, r3
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>:
      _S_key(_Const_Link_type __x)
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f833 	bl	8004fe2 <_ZNKSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	f107 030c 	add.w	r3, r7, #12
 8004f82:	4611      	mov	r1, r2
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 f83a 	bl	8004ffe <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 8004f8a:	4603      	mov	r3, r0
      }
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <_ZNKSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>:
      _M_valptr() const
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b082      	sub	sp, #8
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	3310      	adds	r3, #16
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 f811 	bl	8005016 <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>:
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	6039      	str	r1, [r7, #0]
      { return __x; }
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>:
      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f805 	bl	800502e <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>
 8005024:	4603      	mov	r3, r0
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>:
      _M_addr() const noexcept
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <_ZN17BatteryManagement3runEv>:
//#include "../BatteryManagement_lib/BaterryManagement.hpp"

#include "BatteryManagement.hpp"

void BatteryManagement::run()
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
	tick_counter++;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	64da      	str	r2, [r3, #76]	; 0x4c
	toPercentage();
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f82a 	bl	80050b0 <_ZN17BatteryManagement12toPercentageEv>

	if (tick_counter>=frequency_tick)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 8005066:	4293      	cmp	r3, r2
 8005068:	d31e      	bcc.n	80050a8 <_ZN17BatteryManagement3runEv+0x64>
	{
		HAL_ADC_Start_DMA(adc_port, &batteryVal,1);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3350      	adds	r3, #80	; 0x50
 8005072:	2201      	movs	r2, #1
 8005074:	4619      	mov	r1, r3
 8005076:	f004 fb45 	bl	8009704 <HAL_ADC_Start_DMA>

		if (batteryVal<=BATERRY_MIN_3V2 && batteryVal > BATTERY_CONNECTED_THRESHOLD)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8005082:	4293      	cmp	r3, r2
 8005084:	d80d      	bhi.n	80050a2 <_ZN17BatteryManagement3runEv+0x5e>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 800508e:	4293      	cmp	r3, r2
 8005090:	d907      	bls.n	80050a2 <_ZN17BatteryManagement3runEv+0x5e>
		{
			buzz->beep(2000U,200U,1U);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8005096:	2301      	movs	r3, #1
 8005098:	22c8      	movs	r2, #200	; 0xc8
 800509a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800509e:	f000 f920 	bl	80052e2 <_ZN6Buzzer4beepEiii>
		}

		tick_counter = 0;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
}
 80050a8:	bf00      	nop
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <_ZN17BatteryManagement12toPercentageEv>:

void BatteryManagement::toPercentage()
{
 80050b0:	b5b0      	push	{r4, r5, r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
		//batteryPercentage = 0;
		//batteryVoltage = 3.2;
	//}
	//else
	{
		batteryVoltage = 3.2+(450.0-(BATERRY_MAX_4V2-batteryVal))/(BATERRY_MAX_4V2-BATERRY_MIN_3V2);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050bc:	461a      	mov	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fb fa1d 	bl	8000504 <__aeabi_ui2d>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	a13b      	add	r1, pc, #236	; (adr r1, 80051bc <_ZN17BatteryManagement12toPercentageEv+0x10c>)
 80050d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050d4:	f7fb f8d8 	bl	8000288 <__aeabi_dsub>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4614      	mov	r4, r2
 80050de:	461d      	mov	r5, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050e4:	461a      	mov	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fb fa19 	bl	8000524 <__aeabi_i2d>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	4620      	mov	r0, r4
 80050f8:	4629      	mov	r1, r5
 80050fa:	f7fb fba7 	bl	800084c <__aeabi_ddiv>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	4610      	mov	r0, r2
 8005104:	4619      	mov	r1, r3
 8005106:	a32f      	add	r3, pc, #188	; (adr r3, 80051c4 <_ZN17BatteryManagement12toPercentageEv+0x114>)
 8005108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510c:	f7fb f8be 	bl	800028c <__adddf3>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4610      	mov	r0, r2
 8005116:	4619      	mov	r1, r3
 8005118:	f7fb fd66 	bl	8000be8 <__aeabi_d2f>
 800511c:	4602      	mov	r2, r0
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	659a      	str	r2, [r3, #88]	; 0x58
		batteryPercentage = 123.0 - 123.0/pow((1.0 + pow(batteryVoltage/3.7,80)),0.165);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005126:	4618      	mov	r0, r3
 8005128:	f7fb fa0e 	bl	8000548 <__aeabi_f2d>
 800512c:	a327      	add	r3, pc, #156	; (adr r3, 80051cc <_ZN17BatteryManagement12toPercentageEv+0x11c>)
 800512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005132:	f7fb fb8b 	bl	800084c <__aeabi_ddiv>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	ec43 2b17 	vmov	d7, r2, r3
 800513e:	2050      	movs	r0, #80	; 0x50
 8005140:	eeb0 0a47 	vmov.f32	s0, s14
 8005144:	eef0 0a67 	vmov.f32	s1, s15
 8005148:	f000 f8af 	bl	80052aa <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800514c:	ec51 0b10 	vmov	r0, r1, d0
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	4b18      	ldr	r3, [pc, #96]	; (80051b8 <_ZN17BatteryManagement12toPercentageEv+0x108>)
 8005156:	f7fb f899 	bl	800028c <__adddf3>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	ec43 2b17 	vmov	d7, r2, r3
 8005162:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80051a8 <_ZN17BatteryManagement12toPercentageEv+0xf8>
 8005166:	eeb0 0a47 	vmov.f32	s0, s14
 800516a:	eef0 0a67 	vmov.f32	s1, s15
 800516e:	f013 ff39 	bl	8018fe4 <pow>
 8005172:	ec53 2b10 	vmov	r2, r3, d0
 8005176:	a10e      	add	r1, pc, #56	; (adr r1, 80051b0 <_ZN17BatteryManagement12toPercentageEv+0x100>)
 8005178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800517c:	f7fb fb66 	bl	800084c <__aeabi_ddiv>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	a10a      	add	r1, pc, #40	; (adr r1, 80051b0 <_ZN17BatteryManagement12toPercentageEv+0x100>)
 8005186:	e9d1 0100 	ldrd	r0, r1, [r1]
 800518a:	f7fb f87d 	bl	8000288 <__aeabi_dsub>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4610      	mov	r0, r2
 8005194:	4619      	mov	r1, r3
 8005196:	f7fb fd27 	bl	8000be8 <__aeabi_d2f>
 800519a:	4602      	mov	r2, r0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	655a      	str	r2, [r3, #84]	; 0x54
	}
}
 80051a0:	bf00      	nop
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bdb0      	pop	{r4, r5, r7, pc}
 80051a8:	51eb851f 	.word	0x51eb851f
 80051ac:	3fc51eb8 	.word	0x3fc51eb8
 80051b0:	00000000 	.word	0x00000000
 80051b4:	405ec000 	.word	0x405ec000
 80051b8:	3ff00000 	.word	0x3ff00000
 80051bc:	00000000 	.word	0x00000000
 80051c0:	407c2000 	.word	0x407c2000
 80051c4:	9999999a 	.word	0x9999999a
 80051c8:	40099999 	.word	0x40099999
 80051cc:	9999999a 	.word	0x9999999a
 80051d0:	400d9999 	.word	0x400d9999

080051d4 <_ZN17BatteryManagement19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* BatteryManagement::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 80051d4:	b590      	push	{r4, r7, lr}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3304      	adds	r3, #4
 80051e2:	2200      	movs	r2, #0
 80051e4:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::SONAR_DISTANCE)!=senorsList.end())
 80051e6:	2313      	movs	r3, #19
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	f107 0310 	add.w	r3, r7, #16
 80051ee:	4619      	mov	r1, r3
 80051f0:	6838      	ldr	r0, [r7, #0]
 80051f2:	f7ff fd87 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80051f6:	4603      	mov	r3, r0
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	6838      	ldr	r0, [r7, #0]
 80051fc:	f7ff fd9b 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8005200:	4603      	mov	r3, r0
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	f107 0214 	add.w	r2, r7, #20
 8005208:	f107 030c 	add.w	r3, r7, #12
 800520c:	4611      	mov	r1, r2
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff fd9e 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d021      	beq.n	800525e <_ZN17BatteryManagement19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x8a>
	{
		strcat(packet,toCharArray(static_cast<int>(batteryVoltage*10000)));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	1d1c      	adds	r4, r3, #4
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8005226:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800526c <_ZN17BatteryManagement19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x98>
 800522a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800522e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005232:	ee17 1a90 	vmov	r1, s15
 8005236:	4610      	mov	r0, r2
 8005238:	f7fe fd88 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 800523c:	4603      	mov	r3, r0
 800523e:	4619      	mov	r1, r3
 8005240:	4620      	mov	r0, r4
 8005242:	f015 f933 	bl	801a4ac <strcat>
		strcat(packet,",");
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	1d1c      	adds	r4, r3, #4
 800524a:	4620      	mov	r0, r4
 800524c:	f7fb f810 	bl	8000270 <strlen>
 8005250:	4603      	mov	r3, r0
 8005252:	4423      	add	r3, r4
 8005254:	4906      	ldr	r1, [pc, #24]	; (8005270 <_ZN17BatteryManagement19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x9c>)
 8005256:	461a      	mov	r2, r3
 8005258:	460b      	mov	r3, r1
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3304      	adds	r3, #4
}
 8005262:	4618      	mov	r0, r3
 8005264:	371c      	adds	r7, #28
 8005266:	46bd      	mov	sp, r7
 8005268:	bd90      	pop	{r4, r7, pc}
 800526a:	bf00      	nop
 800526c:	461c4000 	.word	0x461c4000
 8005270:	0801cff4 	.word	0x0801cff4

08005274 <_ZN17BatteryManagement8msToTickEt>:
{
	return batteryPercentage;
}

uint16_t BatteryManagement::msToTick(uint16_t ms)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	807b      	strh	r3, [r7, #2]
	return ms/TIM_FREQ;
 8005280:	887b      	ldrh	r3, [r7, #2]
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8005290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005298:	ee17 3a90 	vmov	r3, s15
 800529c:	b29b      	uxth	r3, r3
}
 800529e:	4618      	mov	r0, r3
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	ed87 0b02 	vstr	d0, [r7, #8]
 80052b4:	6078      	str	r0, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fb f934 	bl	8000524 <__aeabi_i2d>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	ec43 2b11 	vmov	d1, r2, r3
 80052c4:	ed97 0b02 	vldr	d0, [r7, #8]
 80052c8:	f013 fe8c 	bl	8018fe4 <pow>
 80052cc:	eeb0 7a40 	vmov.f32	s14, s0
 80052d0:	eef0 7a60 	vmov.f32	s15, s1
    }
 80052d4:	eeb0 0a47 	vmov.f32	s0, s14
 80052d8:	eef0 0a67 	vmov.f32	s1, s15
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <_ZN6Buzzer4beepEiii>:
 */

#include "Buzzer.hpp"

bool Buzzer::beep(int duration_ms,int freq_ms,int repetition_count)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	607a      	str	r2, [r7, #4]
 80052ee:	603b      	str	r3, [r7, #0]
	if (!this->busy)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	7d9b      	ldrb	r3, [r3, #22]
 80052f4:	f083 0301 	eor.w	r3, r3, #1
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d029      	beq.n	8005352 <_ZN6Buzzer4beepEiii+0x70>
	{
		this->busy = true;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2201      	movs	r2, #1
 8005302:	759a      	strb	r2, [r3, #22]

		this->counterEnd = this->msToTick(duration_ms);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	b29b      	uxth	r3, r3
 8005308:	4619      	mov	r1, r3
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 f877 	bl	80053fe <_ZN6Buzzer8msToTickEt>
 8005310:	4603      	mov	r3, r0
 8005312:	461a      	mov	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	825a      	strh	r2, [r3, #18]
		this->freqTick = this->msToTick(freq_ms);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	b29b      	uxth	r3, r3
 800531c:	4619      	mov	r1, r3
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f86d 	bl	80053fe <_ZN6Buzzer8msToTickEt>
 8005324:	4603      	mov	r3, r0
 8005326:	461a      	mov	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	819a      	strh	r2, [r3, #12]
		this->repetitions = this->freqTick * repetition_count * 2U - 1U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	899a      	ldrh	r2, [r3, #12]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	fb12 f303 	smulbb	r3, r2, r3
 8005338:	b29b      	uxth	r3, r3
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	829a      	strh	r2, [r3, #20]

		Buzz_on();
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f874 	bl	8005434 <_ZN6Buzzer7Buzz_onEv>

		return busy;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	7d9b      	ldrb	r3, [r3, #22]
 8005350:	e001      	b.n	8005356 <_ZN6Buzzer4beepEiii+0x74>
	}

	return busy;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	7d9b      	ldrb	r3, [r3, #22]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <_ZN6Buzzer3runEv>:

void Buzzer::run()
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
	if (this->busy)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	7d9b      	ldrb	r3, [r3, #22]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d032      	beq.n	80053d4 <_ZN6Buzzer3runEv+0x76>
	{
		this->counterStart++;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	8a1b      	ldrh	r3, [r3, #16]
 8005372:	3301      	adds	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	821a      	strh	r2, [r3, #16]

		if ((this->repetitions > 0U) && (this->freqTick!=0U))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	8a9b      	ldrh	r3, [r3, #20]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d01c      	beq.n	80053bc <_ZN6Buzzer3runEv+0x5e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	899b      	ldrh	r3, [r3, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d018      	beq.n	80053bc <_ZN6Buzzer3runEv+0x5e>
		{
			if (!((this->counterStart/this->freqTick) % 2U))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	8a1a      	ldrh	r2, [r3, #16]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	899b      	ldrh	r3, [r3, #12]
 8005392:	fbb2 f3f3 	udiv	r3, r2, r3
 8005396:	b29b      	uxth	r3, r3
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d103      	bne.n	80053a8 <_ZN6Buzzer3runEv+0x4a>
			{
				this->Buzz_on();
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f847 	bl	8005434 <_ZN6Buzzer7Buzz_onEv>
 80053a6:	e002      	b.n	80053ae <_ZN6Buzzer3runEv+0x50>
			}
			else
			{
				this->Buzz_off();
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f853 	bl	8005454 <_ZN6Buzzer8Buzz_offEv>
			}
			this->repetitions--;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	8a9b      	ldrh	r3, [r3, #20]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	829a      	strh	r2, [r3, #20]
 80053ba:	e002      	b.n	80053c2 <_ZN6Buzzer3runEv+0x64>
		} else
		{
			this->Buzz_off();
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f849 	bl	8005454 <_ZN6Buzzer8Buzz_offEv>
		}

		if (this->counterStart >= this->counterEnd)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	8a1a      	ldrh	r2, [r3, #16]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	8a5b      	ldrh	r3, [r3, #18]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d302      	bcc.n	80053d4 <_ZN6Buzzer3runEv+0x76>
		{
			this->stop();
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f804 	bl	80053dc <_ZN6Buzzer4stopEv>
		}
	}
}
 80053d4:	bf00      	nop
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <_ZN6Buzzer4stopEv>:

void Buzzer::stop()
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
	this->busy = false;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	759a      	strb	r2, [r3, #22]
	this->counterStart = 0U;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	821a      	strh	r2, [r3, #16]
	this->Buzz_off();
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f82f 	bl	8005454 <_ZN6Buzzer8Buzz_offEv>
}
 80053f6:	bf00      	nop
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <_ZN6Buzzer8msToTickEt>:
{
	return busy;
}

uint16_t Buzzer::msToTick(uint16_t ms)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	460b      	mov	r3, r1
 8005408:	807b      	strh	r3, [r7, #2]
	return ms/TIM_FREQ;
 800540a:	887b      	ldrh	r3, [r7, #2]
 800540c:	ee07 3a90 	vmov	s15, r3
 8005410:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	ed93 7a02 	vldr	s14, [r3, #8]
 800541a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800541e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005422:	ee17 3a90 	vmov	r3, s15
 8005426:	b29b      	uxth	r3, r3
}
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <_ZN6Buzzer7Buzz_onEv>:

void Buzzer::Buzz_on()
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
//#if DISABLE_ALL_BEEPS == 5
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 800543c:	2201      	movs	r2, #1
 800543e:	2110      	movs	r1, #16
 8005440:	4803      	ldr	r0, [pc, #12]	; (8005450 <_ZN6Buzzer7Buzz_onEv+0x1c>)
 8005442:	f005 fd6f 	bl	800af24 <HAL_GPIO_WritePin>
//#endif
}
 8005446:	bf00      	nop
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	40020000 	.word	0x40020000

08005454 <_ZN6Buzzer8Buzz_offEv>:

void Buzzer::Buzz_off()
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 800545c:	2200      	movs	r2, #0
 800545e:	2110      	movs	r1, #16
 8005460:	4803      	ldr	r0, [pc, #12]	; (8005470 <_ZN6Buzzer8Buzz_offEv+0x1c>)
 8005462:	f005 fd5f 	bl	800af24 <HAL_GPIO_WritePin>
}
 8005466:	bf00      	nop
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40020000 	.word	0x40020000

08005474 <_ZN7Timeout15setTimeoutValueEh>:
	uint8_t* getTimeoutCounter()
	{
		return &timeout_counter;
	}

	void setTimeoutValue(uint8_t value)
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	70fb      	strb	r3, [r7, #3]
	{
		timeout_value = value;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	78fa      	ldrb	r2, [r7, #3]
 8005484:	709a      	strb	r2, [r3, #2]
	}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <_ZN7TimeoutC1Ev>:
class Timeout
 8005492:	b480      	push	{r7}
 8005494:	b083      	sub	sp, #12
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	701a      	strb	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	705a      	strb	r2, [r3, #1]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	709a      	strb	r2, [r3, #2]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4618      	mov	r0, r3
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
	...

080054bc <_ZN7FrSkyRXC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefP6Buzzerh>:
 *      Author: DragosDarie
 */

#include "FrSkyRX.hpp"

FrSkyRX::FrSkyRX(
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
 80054c8:	603b      	str	r3, [r7, #0]
	,raw_pitch {0U}
	,raw_yaw {0U}
	,lb {0U}
	,lu {0U}
	,rb {0U}
	,ru {0U}
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	3336      	adds	r3, #54	; 0x36
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff ffdf 	bl	8005492 <_ZN7TimeoutC1Ev>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	3340      	adds	r3, #64	; 0x40
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fe fc79 	bl	8003dd0 <_ZN12CallsCounterC1Ev>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7fb fef5 	bl	80012d0 <_ZN15PrintableSensorC1Ev>
 80054e6:	4a35      	ldr	r2, [pc, #212]	; (80055bc <_ZN7FrSkyRXC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefP6Buzzerh+0x100>)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	220f      	movs	r2, #15
 80054f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	655a      	str	r2, [r3, #84]	; 0x54
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	659a      	str	r2, [r3, #88]	; 0x58
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	65da      	str	r2, [r3, #92]	; 0x5c
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3360      	adds	r3, #96	; 0x60
 8005512:	2232      	movs	r2, #50	; 0x32
 8005514:	2100      	movs	r1, #0
 8005516:	4618      	mov	r0, r3
 8005518:	f014 fe8c 	bl	801a234 <memset>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3394      	adds	r3, #148	; 0x94
 8005528:	2220      	movs	r2, #32
 800552a:	2100      	movs	r1, #0
 800552c:	4618      	mov	r0, r3
 800552e:	f014 fe81 	bl	801a234 <memset>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
{
	setTimeoutValue(timeout);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3336      	adds	r3, #54	; 0x36
 80055a6:	7e3a      	ldrb	r2, [r7, #24]
 80055a8:	4611      	mov	r1, r2
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff ff62 	bl	8005474 <_ZN7Timeout15setTimeoutValueEh>
}
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	0801d350 	.word	0x0801d350

080055c0 <_ZN7FrSkyRX5beginEv>:

void FrSkyRX::begin()
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3360      	adds	r3, #96	; 0x60
 80055d0:	2219      	movs	r2, #25
 80055d2:	4619      	mov	r1, r3
 80055d4:	f00a fc96 	bl	800ff04 <HAL_UART_Receive_DMA>
}
 80055d8:	bf00      	nop
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <_ZN7FrSkyRX6updateEv>:

void FrSkyRX::update()
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->rx_buff[0] == this->BEGIN_BIT) && (this->rx_buff[24]==this->END_BIT);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d109      	bne.n	800560c <_ZN7FrSkyRX6updateEv+0x2c>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005604:	429a      	cmp	r2, r3
 8005606:	d101      	bne.n	800560c <_ZN7FrSkyRX6updateEv+0x2c>
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <_ZN7FrSkyRX6updateEv+0x2e>
 800560c:	2300      	movs	r3, #0
 800560e:	73bb      	strb	r3, [r7, #14]

	if(isPacketOk)
 8005610:	7bbb      	ldrb	r3, [r7, #14]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d01a      	beq.n	800564c <_ZN7FrSkyRX6updateEv+0x6c>
	{
		this->updateValues();
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f966 	bl	80058e8 <_ZN7FrSkyRX12updateValuesEv>
		this->processStateMachine();
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f867 	bl	80056f0 <_ZN7FrSkyRX19processStateMachineEv>

		if (this->isDisconnected() || this->rb == 0U)
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fb50 	bl	8005cc8 <_ZNK7FrSkyRX14isDisconnectedEv>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d104      	bne.n	8005638 <_ZN7FrSkyRX6updateEv+0x58>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <_ZN7FrSkyRX6updateEv+0x5c>
 8005638:	2301      	movs	r3, #1
 800563a:	e000      	b.n	800563e <_ZN7FrSkyRX6updateEv+0x5e>
 800563c:	2300      	movs	r3, #0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d038      	beq.n	80056b4 <_ZN7FrSkyRX6updateEv+0xd4>
			this->currentState = FrSkyRXState::TIMEOUT;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2204      	movs	r2, #4
 8005646:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 800564a:	e033      	b.n	80056b4 <_ZN7FrSkyRX6updateEv+0xd4>
	}
	else if (this->wrongDataReceived==false)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005652:	2b00      	cmp	r3, #0
 8005654:	d12e      	bne.n	80056b4 <_ZN7FrSkyRX6updateEv+0xd4>
	{
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 8005656:	2300      	movs	r3, #0
 8005658:	73fb      	strb	r3, [r7, #15]
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	2b17      	cmp	r3, #23
 800565e:	d829      	bhi.n	80056b4 <_ZN7FrSkyRX6updateEv+0xd4>
		{
			if ((this->rx_buff[iter]==this->END_BIT) && (this->rx_buff[iter+1U]==this->BEGIN_BIT))
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	4413      	add	r3, r2
 8005666:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005670:	429a      	cmp	r2, r3
 8005672:	d11b      	bne.n	80056ac <_ZN7FrSkyRX6updateEv+0xcc>
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	3301      	adds	r3, #1
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	4413      	add	r3, r2
 800567c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005686:	429a      	cmp	r2, r3
 8005688:	d110      	bne.n	80056ac <_ZN7FrSkyRX6updateEv+0xcc>
			{
				HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length+iter+1);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	b29b      	uxth	r3, r3
 8005698:	331a      	adds	r3, #26
 800569a:	b29b      	uxth	r3, r3
 800569c:	461a      	mov	r2, r3
 800569e:	f00a fc31 	bl	800ff04 <HAL_UART_Receive_DMA>
				this->wrongDataReceived = true;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
				return;
 80056aa:	e01e      	b.n	80056ea <_ZN7FrSkyRX6updateEv+0x10a>
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	3301      	adds	r3, #1
 80056b0:	73fb      	strb	r3, [r7, #15]
 80056b2:	e7d2      	b.n	800565a <_ZN7FrSkyRX6updateEv+0x7a>
			}
		}
	}

	if (this->wrongDataReceived == true)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d103      	bne.n	80056c6 <_ZN7FrSkyRX6updateEv+0xe6>
		this->wrongDataReceived = false;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3360      	adds	r3, #96	; 0x60
 80056ce:	2219      	movs	r2, #25
 80056d0:	4619      	mov	r1, r3
 80056d2:	f00a fc17 	bl	800ff04 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->uart_port_dma, DMA_IT_HT);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0208 	bic.w	r2, r2, #8
 80056e8:	601a      	str	r2, [r3, #0]
}
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <_ZN7FrSkyRX19processStateMachineEv>:

void FrSkyRX::processStateMachine()
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
	switch (this->currentState)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 80056fe:	2b04      	cmp	r3, #4
 8005700:	f200 80d7 	bhi.w	80058b2 <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
 8005704:	a201      	add	r2, pc, #4	; (adr r2, 800570c <_ZN7FrSkyRX19processStateMachineEv+0x1c>)
 8005706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570a:	bf00      	nop
 800570c:	08005721 	.word	0x08005721
 8005710:	0800577f 	.word	0x0800577f
 8005714:	080057b5 	.word	0x080057b5
 8005718:	080057f7 	.word	0x080057f7
 800571c:	080058a5 	.word	0x080058a5
	{
	case FrSkyRXState::NOT_CONNECTED:
		if ((this->lu == 0U) && (this->throttle < 3001U) && (this->rb == 1U))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 8005726:	2b00      	cmp	r3, #0
 8005728:	d120      	bne.n	800576c <_ZN7FrSkyRX19processStateMachineEv+0x7c>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8005730:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80058bc <_ZN7FrSkyRX19processStateMachineEv+0x1cc>
 8005734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573c:	d516      	bpl.n	800576c <_ZN7FrSkyRX19processStateMachineEv+0x7c>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8005744:	2b01      	cmp	r3, #1
 8005746:	d111      	bne.n	800576c <_ZN7FrSkyRX19processStateMachineEv+0x7c>
		{
			this->currentState = FrSkyRXState::CONNECTED;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			buzz->stop();
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff fe41 	bl	80053dc <_ZN6Buzzer4stopEv>
			buzz->beep(600U,100U,3U);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800575e:	2303      	movs	r3, #3
 8005760:	2264      	movs	r2, #100	; 0x64
 8005762:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005766:	f7ff fdbc 	bl	80052e2 <_ZN6Buzzer4beepEiii>
		}
		else
		{
			buzz->beep(3000U,100U,2U);
		}
		break;
 800576a:	e0a2      	b.n	80058b2 <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
			buzz->beep(3000U,100U,2U);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8005770:	2302      	movs	r3, #2
 8005772:	2264      	movs	r2, #100	; 0x64
 8005774:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8005778:	f7ff fdb3 	bl	80052e2 <_ZN6Buzzer4beepEiii>
		break;
 800577c:	e099      	b.n	80058b2 <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
	case FrSkyRXState::CONNECTED:
		if (this->lu == 1U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 8005784:	2b01      	cmp	r3, #1
 8005786:	f040 808f 	bne.w	80058a8 <_ZN7FrSkyRX19processStateMachineEv+0x1b8>
		{
			TIM3 -> CCR1 = 3000;
 800578a:	4b4d      	ldr	r3, [pc, #308]	; (80058c0 <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 800578c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005790:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3 -> CCR2 = 3000;
 8005792:	4b4b      	ldr	r3, [pc, #300]	; (80058c0 <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 8005794:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005798:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3 -> CCR3 = 3000;
 800579a:	4b49      	ldr	r3, [pc, #292]	; (80058c0 <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 800579c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80057a0:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3 -> CCR4 = 3000;
 80057a2:	4b47      	ldr	r3, [pc, #284]	; (80058c0 <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 80057a4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80057a8:	641a      	str	r2, [r3, #64]	; 0x40
			this->currentState = FrSkyRXState::ARMED;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2202      	movs	r2, #2
 80057ae:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
		}
		break;
 80057b2:	e079      	b.n	80058a8 <_ZN7FrSkyRX19processStateMachineEv+0x1b8>
	case FrSkyRXState::ARMED:
		if (this->lu == 2U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d176      	bne.n	80058ac <_ZN7FrSkyRX19processStateMachineEv+0x1bc>
		{
			TIM3 -> CCR1 = 3300;
 80057be:	4b40      	ldr	r3, [pc, #256]	; (80058c0 <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 80057c0:	f640 42e4 	movw	r2, #3300	; 0xce4
 80057c4:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3 -> CCR2 = 3300;
 80057c6:	4b3e      	ldr	r3, [pc, #248]	; (80058c0 <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 80057c8:	f640 42e4 	movw	r2, #3300	; 0xce4
 80057cc:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3 -> CCR3 = 3300;
 80057ce:	4b3c      	ldr	r3, [pc, #240]	; (80058c0 <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 80057d0:	f640 42e4 	movw	r2, #3300	; 0xce4
 80057d4:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3 -> CCR4 = 3300;
 80057d6:	4b3a      	ldr	r3, [pc, #232]	; (80058c0 <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 80057d8:	f640 42e4 	movw	r2, #3300	; 0xce4
 80057dc:	641a      	str	r2, [r3, #64]	; 0x40
			buzz->beep(200U,100U,1U);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80057e2:	2301      	movs	r3, #1
 80057e4:	2264      	movs	r2, #100	; 0x64
 80057e6:	21c8      	movs	r1, #200	; 0xc8
 80057e8:	f7ff fd7b 	bl	80052e2 <_ZN6Buzzer4beepEiii>
			this->currentState = FrSkyRXState::READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2203      	movs	r2, #3
 80057f0:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
		}
		break;
 80057f4:	e05a      	b.n	80058ac <_ZN7FrSkyRX19processStateMachineEv+0x1bc>
	case FrSkyRXState::READY:
		if (raw_roll > 1150 || raw_roll < 800 || raw_pitch > 1150 || raw_pitch < 800)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80057fc:	f240 427e 	movw	r2, #1150	; 0x47e
 8005800:	4293      	cmp	r3, r2
 8005802:	d812      	bhi.n	800582a <_ZN7FrSkyRX19processStateMachineEv+0x13a>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 800580a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800580e:	d30c      	bcc.n	800582a <_ZN7FrSkyRX19processStateMachineEv+0x13a>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 8005816:	f240 427e 	movw	r2, #1150	; 0x47e
 800581a:	4293      	cmp	r3, r2
 800581c:	d805      	bhi.n	800582a <_ZN7FrSkyRX19processStateMachineEv+0x13a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 8005824:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005828:	d242      	bcs.n	80058b0 <_ZN7FrSkyRX19processStateMachineEv+0x1c0>
		{
			target_roll += -static_cast<float>(mid_position - raw_roll) * roll_scaleFactor;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8005836:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005842:	eef1 7a67 	vneg.f32	s15, s15
 8005846:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80058c4 <_ZN7FrSkyRX19processStateMachineEv+0x1d4>
 800584a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800584e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
			target_pitch += static_cast<float>(mid_position - raw_pitch) * pitch_scaleFactor;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 8005864:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 8005868:	ee07 3a90 	vmov	s15, r3
 800586c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005870:	eddf 6a14 	vldr	s13, [pc, #80]	; 80058c4 <_ZN7FrSkyRX19processStateMachineEv+0x1d4>
 8005874:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
			target_yaw = static_cast<float>(mid_position - raw_yaw) * yaw_scaleFactor;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8005888:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 800588c:	ee07 3a90 	vmov	s15, r3
 8005890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005894:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80058c8 <_ZN7FrSkyRX19processStateMachineEv+0x1d8>
 8005898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

			//target_roll = ((target_roll > 2.0F) || (target_roll < -2.0F)) ? target_roll : 0.0F;
			//target_pitch = ((target_pitch > 2.0F) || (target_pitch < -2.0F)) ? target_pitch : 0.0F;
		}
		break;
 80058a2:	e005      	b.n	80058b0 <_ZN7FrSkyRX19processStateMachineEv+0x1c0>
	case FrSkyRXState::TIMEOUT:

		break;
 80058a4:	bf00      	nop
 80058a6:	e004      	b.n	80058b2 <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
		break;
 80058a8:	bf00      	nop
 80058aa:	e002      	b.n	80058b2 <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
		break;
 80058ac:	bf00      	nop
 80058ae:	e000      	b.n	80058b2 <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
		break;
 80058b0:	bf00      	nop
	}
}
 80058b2:	bf00      	nop
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	453b9000 	.word	0x453b9000
 80058c0:	40000400 	.word	0x40000400
 80058c4:	3851b717 	.word	0x3851b717
 80058c8:	3a83126f 	.word	0x3a83126f

080058cc <_ZNK7FrSkyRX15getCurrentStateEv>:

FrSkyRXState FrSkyRX::getCurrentState() const
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
	return this->currentState;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
}
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
	...

080058e8 <_ZN7FrSkyRX12updateValuesEv>:
extern long ttt;
extern long ttt2;
int th[6] {500,600,700,800,900,1000};//{500,1000,1500,2000};
int thIndex = 0;
void FrSkyRX::updateValues()
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	this->channels[0]  = static_cast<int16_t>(rx_buff[1] | (rx_buff[2] << 8 & 0x07FF));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80058f6:	b21a      	sxth	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80058fe:	021b      	lsls	r3, r3, #8
 8005900:	b21b      	sxth	r3, r3
 8005902:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005906:	b21b      	sxth	r3, r3
 8005908:	4313      	orrs	r3, r2
 800590a:	b21b      	sxth	r3, r3
 800590c:	b29a      	uxth	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	this->channels[1]  = static_cast<int16_t>(rx_buff[2] >> 3 | (rx_buff[3] << 5 & 0x07FF));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800591a:	08db      	lsrs	r3, r3, #3
 800591c:	b2db      	uxtb	r3, r3
 800591e:	b21a      	sxth	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8005926:	015b      	lsls	r3, r3, #5
 8005928:	b21b      	sxth	r3, r3
 800592a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800592e:	b21b      	sxth	r3, r3
 8005930:	4313      	orrs	r3, r2
 8005932:	b21b      	sxth	r3, r3
 8005934:	b29a      	uxth	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	this->channels[2]  = static_cast<int16_t>(rx_buff[3] >> 6 | (rx_buff[4] << 2 | (rx_buff[5] << 10 & 0x07FF)));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8005942:	099b      	lsrs	r3, r3, #6
 8005944:	b2db      	uxtb	r3, r3
 8005946:	b21a      	sxth	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	b219      	sxth	r1, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8005958:	029b      	lsls	r3, r3, #10
 800595a:	b21b      	sxth	r3, r3
 800595c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005960:	b21b      	sxth	r3, r3
 8005962:	430b      	orrs	r3, r1
 8005964:	b21b      	sxth	r3, r3
 8005966:	4313      	orrs	r3, r2
 8005968:	b21b      	sxth	r3, r3
 800596a:	b29a      	uxth	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	this->channels[3]  = static_cast<int16_t>(rx_buff[5] >> 1 | (rx_buff[6] << 7 & 0x07FF));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8005978:	085b      	lsrs	r3, r3, #1
 800597a:	b2db      	uxtb	r3, r3
 800597c:	b21a      	sxth	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005984:	01db      	lsls	r3, r3, #7
 8005986:	b21b      	sxth	r3, r3
 8005988:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800598c:	b21b      	sxth	r3, r3
 800598e:	4313      	orrs	r3, r2
 8005990:	b21b      	sxth	r3, r3
 8005992:	b29a      	uxth	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	this->channels[4]  = static_cast<int16_t>(rx_buff[6] >> 4 | (rx_buff[7] << 4 & 0x07FF));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80059a0:	091b      	lsrs	r3, r3, #4
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	b21a      	sxth	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	b21b      	sxth	r3, r3
 80059b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059b4:	b21b      	sxth	r3, r3
 80059b6:	4313      	orrs	r3, r2
 80059b8:	b21b      	sxth	r3, r3
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	this->channels[5]  = static_cast<int16_t>(rx_buff[7] >> 7 | (rx_buff[8] << 1 | (rx_buff[9] << 9 & 0x07FF)));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80059c8:	09db      	lsrs	r3, r3, #7
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	b21a      	sxth	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	b219      	sxth	r1, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80059de:	025b      	lsls	r3, r3, #9
 80059e0:	b21b      	sxth	r3, r3
 80059e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059e6:	b21b      	sxth	r3, r3
 80059e8:	430b      	orrs	r3, r1
 80059ea:	b21b      	sxth	r3, r3
 80059ec:	4313      	orrs	r3, r2
 80059ee:	b21b      	sxth	r3, r3
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
	this->channels[6]  = static_cast<int16_t>(rx_buff[9] >> 2 | (rx_buff[10] << 6 & 0x07FF));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80059fe:	089b      	lsrs	r3, r3, #2
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	b21a      	sxth	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8005a0a:	019b      	lsls	r3, r3, #6
 8005a0c:	b21b      	sxth	r3, r3
 8005a0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a12:	b21b      	sxth	r3, r3
 8005a14:	4313      	orrs	r3, r2
 8005a16:	b21b      	sxth	r3, r3
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	this->channels[7]  = static_cast<int16_t>(rx_buff[10] >> 5 | (rx_buff[11] << 3 & 0x07FF));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8005a26:	095b      	lsrs	r3, r3, #5
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	b21a      	sxth	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	b21b      	sxth	r3, r3
 8005a36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a3a:	b21b      	sxth	r3, r3
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	b21b      	sxth	r3, r3
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2

	this->channels[8]  = static_cast<int16_t>(rx_buff[12] | (rx_buff[13] << 8 & 0x07FF));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8005a4e:	b21a      	sxth	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8005a56:	021b      	lsls	r3, r3, #8
 8005a58:	b21b      	sxth	r3, r3
 8005a5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a5e:	b21b      	sxth	r3, r3
 8005a60:	4313      	orrs	r3, r2
 8005a62:	b21b      	sxth	r3, r3
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	this->channels[9]  = static_cast<int16_t>(rx_buff[13] >> 3 | (rx_buff[14] << 5 & 0x07FF));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8005a72:	08db      	lsrs	r3, r3, #3
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	b21a      	sxth	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8005a7e:	015b      	lsls	r3, r3, #5
 8005a80:	b21b      	sxth	r3, r3
 8005a82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a86:	b21b      	sxth	r3, r3
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	b21b      	sxth	r3, r3
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	this->channels[10] = static_cast<int16_t>(rx_buff[14] >> 6 | (rx_buff[15] << 2 | (rx_buff[16] << 10 & 0x07FF)));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8005a9a:	099b      	lsrs	r3, r3, #6
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	b21a      	sxth	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	b219      	sxth	r1, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005ab0:	029b      	lsls	r3, r3, #10
 8005ab2:	b21b      	sxth	r3, r3
 8005ab4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ab8:	b21b      	sxth	r3, r3
 8005aba:	430b      	orrs	r3, r1
 8005abc:	b21b      	sxth	r3, r3
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	b21b      	sxth	r3, r3
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	this->channels[11] = static_cast<int16_t>(rx_buff[16] >> 1 | (rx_buff[17] << 7 & 0x07FF));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005ad0:	085b      	lsrs	r3, r3, #1
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	b21a      	sxth	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8005adc:	01db      	lsls	r3, r3, #7
 8005ade:	b21b      	sxth	r3, r3
 8005ae0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ae4:	b21b      	sxth	r3, r3
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	b21b      	sxth	r3, r3
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
	this->channels[12] = static_cast<int16_t>(rx_buff[17] >> 4 | (rx_buff[18] << 4 & 0x07FF));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8005af8:	091b      	lsrs	r3, r3, #4
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	b21a      	sxth	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	b21b      	sxth	r3, r3
 8005b08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b0c:	b21b      	sxth	r3, r3
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	b21b      	sxth	r3, r3
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	this->channels[13] = static_cast<int16_t>(rx_buff[18] >> 7 | (rx_buff[19] << 1 | (rx_buff[20] << 9 & 0x07FF)));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8005b20:	09db      	lsrs	r3, r3, #7
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	b21a      	sxth	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	b219      	sxth	r1, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b36:	025b      	lsls	r3, r3, #9
 8005b38:	b21b      	sxth	r3, r3
 8005b3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b3e:	b21b      	sxth	r3, r3
 8005b40:	430b      	orrs	r3, r1
 8005b42:	b21b      	sxth	r3, r3
 8005b44:	4313      	orrs	r3, r2
 8005b46:	b21b      	sxth	r3, r3
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	this->channels[14] = static_cast<int16_t>(rx_buff[20] >> 2 | (rx_buff[21] << 6 & 0x07FF));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b56:	089b      	lsrs	r3, r3, #2
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	b21a      	sxth	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8005b62:	019b      	lsls	r3, r3, #6
 8005b64:	b21b      	sxth	r3, r3
 8005b66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b6a:	b21b      	sxth	r3, r3
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	b21b      	sxth	r3, r3
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	this->channels[15] = static_cast<int16_t>(rx_buff[21] >> 5 | (rx_buff[22] << 3 & 0x07FF));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	b21a      	sxth	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	b21b      	sxth	r3, r3
 8005b8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b92:	b21b      	sxth	r3, r3
 8005b94:	4313      	orrs	r3, r2
 8005b96:	b21b      	sxth	r3, r3
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2


	this->throttle = th[thIndex];
 8005ba0:	4b46      	ldr	r3, [pc, #280]	; (8005cbc <_ZN7FrSkyRX12updateValuesEv+0x3d4>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a46      	ldr	r2, [pc, #280]	; (8005cc0 <_ZN7FrSkyRX12updateValuesEv+0x3d8>)
 8005ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8

	if (ttt2>5000)
 8005bb8:	4b42      	ldr	r3, [pc, #264]	; (8005cc4 <_ZN7FrSkyRX12updateValuesEv+0x3dc>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	dd0e      	ble.n	8005be2 <_ZN7FrSkyRX12updateValuesEv+0x2fa>
	{
		ttt2=0;
 8005bc4:	4b3f      	ldr	r3, [pc, #252]	; (8005cc4 <_ZN7FrSkyRX12updateValuesEv+0x3dc>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	601a      	str	r2, [r3, #0]
		thIndex++;
 8005bca:	4b3c      	ldr	r3, [pc, #240]	; (8005cbc <_ZN7FrSkyRX12updateValuesEv+0x3d4>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	4a3a      	ldr	r2, [pc, #232]	; (8005cbc <_ZN7FrSkyRX12updateValuesEv+0x3d4>)
 8005bd2:	6013      	str	r3, [r2, #0]

		if (thIndex==6)
 8005bd4:	4b39      	ldr	r3, [pc, #228]	; (8005cbc <_ZN7FrSkyRX12updateValuesEv+0x3d4>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b06      	cmp	r3, #6
 8005bda:	d102      	bne.n	8005be2 <_ZN7FrSkyRX12updateValuesEv+0x2fa>
			thIndex = 0;
 8005bdc:	4b37      	ldr	r3, [pc, #220]	; (8005cbc <_ZN7FrSkyRX12updateValuesEv+0x3d4>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]
	}

	this->raw_roll = this->channels[0];
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	this->raw_pitch = this->channels[1];
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	this->raw_yaw = this->channels[3];
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc

	if (this->channels[4]<1000)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8005c0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c10:	d204      	bcs.n	8005c1c <_ZN7FrSkyRX12updateValuesEv+0x334>
		this->lb=0;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
 8005c1a:	e003      	b.n	8005c24 <_ZN7FrSkyRX12updateValuesEv+0x33c>
	else
		this->lb=1;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce

	if (this->channels[7]<1000)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8005c2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c2e:	d204      	bcs.n	8005c3a <_ZN7FrSkyRX12updateValuesEv+0x352>
		this->rb=0;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8005c38:	e003      	b.n	8005c42 <_ZN7FrSkyRX12updateValuesEv+0x35a>
	else
		this->rb=1;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0

	if (this->channels[5]<500)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8005c48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005c4c:	d204      	bcs.n	8005c58 <_ZN7FrSkyRX12updateValuesEv+0x370>
		this->lu = 0;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
 8005c56:	e00f      	b.n	8005c78 <_ZN7FrSkyRX12updateValuesEv+0x390>
	else if(this->channels[5]<1500)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8005c5e:	f240 52db 	movw	r2, #1499	; 0x5db
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d804      	bhi.n	8005c70 <_ZN7FrSkyRX12updateValuesEv+0x388>
		this->lu = 1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
 8005c6e:	e003      	b.n	8005c78 <_ZN7FrSkyRX12updateValuesEv+0x390>
	else
		this->lu = 2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf

	if (this->channels[6]<500)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8005c7e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005c82:	d204      	bcs.n	8005c8e <_ZN7FrSkyRX12updateValuesEv+0x3a6>
		this->ru = 0;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	else if(this->channels[6]<1500)
		this->ru = 1;
	else
		this->ru = 2;
}
 8005c8c:	e00f      	b.n	8005cae <_ZN7FrSkyRX12updateValuesEv+0x3c6>
	else if(this->channels[6]<1500)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8005c94:	f240 52db 	movw	r2, #1499	; 0x5db
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d804      	bhi.n	8005ca6 <_ZN7FrSkyRX12updateValuesEv+0x3be>
		this->ru = 1;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
}
 8005ca4:	e003      	b.n	8005cae <_ZN7FrSkyRX12updateValuesEv+0x3c6>
		this->ru = 2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2202      	movs	r2, #2
 8005caa:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	20000bf4 	.word	0x20000bf4
 8005cc0:	20000008 	.word	0x20000008
 8005cc4:	20000598 	.word	0x20000598

08005cc8 <_ZNK7FrSkyRX14isDisconnectedEv>:

bool FrSkyRX::isDisconnected() const
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
	const bool failsafe =
			(this->rb == 0) &&
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
			(this->ru == 0) &&
			(this->lb == 0) &&
			(this->lu == 0) &&
			(this->throttle > 1800) &&
			(this->raw_roll > 1800) &&
			(this->raw_pitch > 1800) &&
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d12c      	bne.n	8005d34 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->ru == 0) &&
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
			(this->rb == 0) &&
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d127      	bne.n	8005d34 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->lb == 0) &&
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
			(this->ru == 0) &&
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d122      	bne.n	8005d34 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->lu == 0) &&
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
			(this->lb == 0) &&
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d11d      	bne.n	8005d34 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->throttle > 1800) &&
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
			(this->lu == 0) &&
 8005cfe:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005d48 <_ZNK7FrSkyRX14isDisconnectedEv+0x80>
 8005d02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d0a:	dd13      	ble.n	8005d34 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->raw_roll > 1800) &&
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
			(this->throttle > 1800) &&
 8005d12:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8005d16:	d90d      	bls.n	8005d34 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->raw_pitch > 1800) &&
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
			(this->raw_roll > 1800) &&
 8005d1e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8005d22:	d907      	bls.n	8005d34 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->raw_yaw > 1800);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
			(this->raw_pitch > 1800) &&
 8005d2a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8005d2e:	d901      	bls.n	8005d34 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
 8005d30:	2301      	movs	r3, #1
 8005d32:	e000      	b.n	8005d36 <_ZNK7FrSkyRX14isDisconnectedEv+0x6e>
 8005d34:	2300      	movs	r3, #0
	const bool failsafe =
 8005d36:	73fb      	strb	r3, [r7, #15]

	return failsafe;
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	44e10000 	.word	0x44e10000

08005d4c <_ZN7FrSkyRX19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* FrSkyRX::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8005d4c:	b590      	push	{r4, r7, lr}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::FRSKY_THROTTLE)!=senorsList.end())
 8005d5e:	231a      	movs	r3, #26
 8005d60:	613b      	str	r3, [r7, #16]
 8005d62:	f107 0310 	add.w	r3, r7, #16
 8005d66:	4619      	mov	r1, r3
 8005d68:	6838      	ldr	r0, [r7, #0]
 8005d6a:	f7fe ffcb 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	6838      	ldr	r0, [r7, #0]
 8005d74:	f7fe ffdf 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	f107 0214 	add.w	r2, r7, #20
 8005d80:	f107 030c 	add.w	r3, r7, #12
 8005d84:	4611      	mov	r1, r2
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fe ffe2 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d01d      	beq.n	8005dce <_ZN7FrSkyRX19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x82>
	{
		strcat(packet,toCharArray(this->throttle));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	1d1c      	adds	r4, r3, #4
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8005d9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005da2:	ee17 1a90 	vmov	r1, s15
 8005da6:	4610      	mov	r0, r2
 8005da8:	f7fd ffd0 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 8005dac:	4603      	mov	r3, r0
 8005dae:	4619      	mov	r1, r3
 8005db0:	4620      	mov	r0, r4
 8005db2:	f014 fb7b 	bl	801a4ac <strcat>
		strcat(packet,",");
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	1d1c      	adds	r4, r3, #4
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f7fa fa58 	bl	8000270 <strlen>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	4423      	add	r3, r4
 8005dc4:	4905      	ldr	r1, [pc, #20]	; (8005ddc <_ZN7FrSkyRX19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x90>)
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	460b      	mov	r3, r1
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	3304      	adds	r3, #4
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd90      	pop	{r4, r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	0801cff8 	.word	0x0801cff8

08005de0 <_ZN7FrSkyRX11getThrottleEv>:

float& FrSkyRX::getThrottle()
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
	return this->throttle;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	33b8      	adds	r3, #184	; 0xb8
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <_ZN7FrSkyRX13getTargetRollEv>:

float& FrSkyRX::getTargetRoll()
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
	return this->target_roll;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	33bc      	adds	r3, #188	; 0xbc
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <_ZN7FrSkyRX14getTargetPitchEv>:

float& FrSkyRX::getTargetPitch()
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
	return this->target_pitch;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	33c0      	adds	r3, #192	; 0xc0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <_ZNSt15_Rb_tree_headerC1Ev>:
    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
      _M_header._M_color = _S_red;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f805 	bl	8005e5e <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <_ZNSt15_Rb_tree_header8_M_resetEv>:
    _M_reset()
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
      _M_header._M_parent = 0;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	611a      	str	r2, [r3, #16]
    }
 8005e7e:	bf00      	nop
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 f8d9 	bl	800604c <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE12_Vector_implC1Ev>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7ff ffeb 	bl	8005e8a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EEC1Ev>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EEC1Ev>:
      _Rb_tree() = default;
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b082      	sub	sp, #8
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 f8cf 	bl	800606c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EEC1Ev>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EEC1Ev>:
      set() = default;
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff ffeb 	bl	8005ebe <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EEC1Ev>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <_ZN4HC05C1EP20__UART_HandleTypeDef>:
 *      Author: DragosDarie
 */

#include "HC05.hpp"

HC05::HC05(UART_HandleTypeDef *uart_port):
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	6039      	str	r1, [r7, #0]
	uart_port {uart_port}
	,senorsList {}
	,USART1_TxBuffer {}
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	3304      	adds	r3, #4
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff ffcc 	bl	8005ea4 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEC1Ev>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3310      	adds	r3, #16
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	605a      	str	r2, [r3, #4]
 8005f16:	609a      	str	r2, [r3, #8]
 8005f18:	60da      	str	r2, [r3, #12]
 8005f1a:	611a      	str	r2, [r3, #16]
 8005f1c:	615a      	str	r2, [r3, #20]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	3310      	adds	r3, #16
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff ffd8 	bl	8005ed8 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EEC1Ev>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3328      	adds	r3, #40	; 0x28
 8005f2c:	2264      	movs	r2, #100	; 0x64
 8005f2e:	2100      	movs	r1, #0
 8005f30:	4618      	mov	r0, r3
 8005f32:	f014 f97f 	bl	801a234 <memset>
{
}
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <_ZN4HC054sendEv>:

void HC05::send()
{
 8005f40:	b5b0      	push	{r4, r5, r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(uart_port, (uint8_t*)USART1_TxBuffer, strlen(USART1_TxBuffer));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681c      	ldr	r4, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	3328      	adds	r3, #40	; 0x28
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fa f98a 	bl	8000270 <strlen>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	461a      	mov	r2, r3
 8005f62:	4629      	mov	r1, r5
 8005f64:	4620      	mov	r0, r4
 8005f66:	f009 ff4f 	bl	800fe08 <HAL_UART_Transmit_DMA>
}
 8005f6a:	bf00      	nop
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bdb0      	pop	{r4, r5, r7, pc}

08005f72 <_ZN4HC059addSensorEP15PrintableSensor>:
{
	HAL_UART_Transmit_DMA(uart_port, (uint8_t*)data, len);
}

void HC05::addSensor(PrintableSensor* sen)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b082      	sub	sp, #8
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	6039      	str	r1, [r7, #0]
	senList.push_back(sen);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	463a      	mov	r2, r7
 8005f82:	4611      	mov	r1, r2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 f886 	bl	8006096 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_>
}
 8005f8a:	bf00      	nop
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <_ZN4HC0519printfSensorsValuesEv>:

void HC05::printfSensorsValues()
{
 8005f94:	b590      	push	{r4, r7, lr}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
	strcpy(USART1_TxBuffer,"");
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3328      	adds	r3, #40	; 0x28
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	701a      	strb	r2, [r3, #0]

	for (int i=0;i<(int)senList.size();i++)
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3304      	adds	r3, #4
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 f897 	bl	80060e0 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	bfb4      	ite	lt
 8005fbc:	2301      	movlt	r3, #1
 8005fbe:	2300      	movge	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d01a      	beq.n	8005ffc <_ZN4HC0519printfSensorsValuesEv+0x68>
	{
		strcat(USART1_TxBuffer,senList[i]->getSensorValues_str(senorsList));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 f893 	bl	8006100 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEixEj>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	6812      	ldr	r2, [r2, #0]
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	3110      	adds	r1, #16
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	4790      	blx	r2
 8005fea:	4603      	mov	r3, r0
 8005fec:	4619      	mov	r1, r3
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f014 fa5c 	bl	801a4ac <strcat>
	for (int i=0;i<(int)senList.size();i++)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	e7d5      	b.n	8005fa8 <_ZN4HC0519printfSensorsValuesEv+0x14>
	}

	strcat(USART1_TxBuffer,"\n\r");
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8006002:	4620      	mov	r0, r4
 8006004:	f7fa f934 	bl	8000270 <strlen>
 8006008:	4603      	mov	r3, r0
 800600a:	4423      	add	r3, r4
 800600c:	4a05      	ldr	r2, [pc, #20]	; (8006024 <_ZN4HC0519printfSensorsValuesEv+0x90>)
 800600e:	8811      	ldrh	r1, [r2, #0]
 8006010:	7892      	ldrb	r2, [r2, #2]
 8006012:	8019      	strh	r1, [r3, #0]
 8006014:	709a      	strb	r2, [r3, #2]

	send();
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff ff92 	bl	8005f40 <_ZN4HC054sendEv>
}
 800601c:	bf00      	nop
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	bd90      	pop	{r4, r7, pc}
 8006024:	0801cffc 	.word	0x0801cffc

08006028 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>:

void HC05::addSensorParameter(HC05::SENSOR_DATA_PARAMETER sen)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
 	this->senorsList.insert(sen);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f103 0110 	add.w	r1, r3, #16
 8006038:	f107 0308 	add.w	r3, r7, #8
 800603c:	463a      	mov	r2, r7
 800603e:	4618      	mov	r0, r3
 8006040:	f000 f86e 	bl	8006120 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE6insertERKS1_>
}
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f87d 	bl	8006154 <_ZNSaIP15PrintableSensorEC1Ev>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4618      	mov	r0, r3
 800605e:	f000 f885 	bl	800616c <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4618      	mov	r0, r3
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f8b9 	bl	80061ec <_ZNSaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4618      	mov	r0, r3
 800607e:	f000 f8c1 	bl	8006204 <_ZNSt20_Rb_tree_key_compareISt4lessIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3304      	adds	r3, #4
 8006086:	4618      	mov	r0, r3
 8006088:	f7ff feda 	bl	8005e40 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8006096:	b580      	push	{r7, lr}
 8006098:	b082      	sub	sp, #8
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d00c      	beq.n	80060c6 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	4619      	mov	r1, r3
 80060b6:	f000 f8b0 	bl	800621a <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	1d1a      	adds	r2, r3, #4
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 80060c4:	e008      	b.n	80060d8 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f8ba 	bl	8006240 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE3endEv>
 80060cc:	4603      	mov	r3, r0
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	4619      	mov	r1, r3
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f8dc 	bl	8006290 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80060d8:	bf00      	nop
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	109b      	asrs	r3, r3, #2
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
      }
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE6insertERKS1_>:
      insert(const value_type& __x)
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
	  _M_t._M_insert_unique(__x);
 800612c:	68b9      	ldr	r1, [r7, #8]
 800612e:	f107 0310 	add.w	r3, r7, #16
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	4618      	mov	r0, r3
 8006136:	f000 f967 	bl	8006408 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_>
	return std::pair<iterator, bool>(__p.first, __p.second);
 800613a:	f107 0310 	add.w	r3, r7, #16
 800613e:	1d1a      	adds	r2, r3, #4
 8006140:	f107 0310 	add.w	r3, r7, #16
 8006144:	4619      	mov	r1, r3
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 f9ad 	bl	80064a6 <_ZNSt4pairISt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IRSt17_Rb_tree_iteratorIS2_ERbLb1EEEOT_OT0_>
      }
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <_ZNSaIP15PrintableSensorEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f9bd 	bl	80064dc <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorEC1Ev>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4618      	mov	r0, r3
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	605a      	str	r2, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	609a      	str	r2, [r3, #8]
	{ }
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4618      	mov	r0, r3
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
	if (__p)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d005      	beq.n	80061b2 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	68b9      	ldr	r1, [r7, #8]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 f9a0 	bl	80064f2 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE10deallocateERS2_PS1_j>
      }
 80061b2:	bf00      	nop
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4618      	mov	r0, r3
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <_ZSt8_DestroyIPP15PrintableSensorS1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 f996 	bl	8006510 <_ZSt8_DestroyIPP15PrintableSensorEvT_S3_>
    }
 80061e4:	bf00      	nop
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <_ZNSaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f998 	bl	800652a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <_ZNSt20_Rb_tree_key_compareISt4lessIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
      _Rb_tree_key_compare()
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
      { }
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4618      	mov	r0, r3
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800621a:	b580      	push	{r7, lr}
 800621c:	b084      	sub	sp, #16
 800621e:	af00      	add	r7, sp, #0
 8006220:	60f8      	str	r0, [r7, #12]
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f98a 	bl	8006540 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 800622c:	4603      	mov	r3, r0
 800622e:	461a      	mov	r2, r3
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 f98f 	bl	8006556 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 8006238:	bf00      	nop
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	1d1a      	adds	r2, r3, #4
 800624c:	f107 030c 	add.w	r3, r7, #12
 8006250:	4611      	mov	r1, r2
 8006252:	4618      	mov	r0, r3
 8006254:	f000 f995 	bl	8006582 <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8006262:	b580      	push	{r7, lr}
 8006264:	b082      	sub	sp, #8
 8006266:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8006268:	4618      	mov	r0, r3
 800626a:	f000 f805 	bl	8006278 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800626e:	4603      	mov	r3, r0
      }
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8006280:	2301      	movs	r3, #1
      }
 8006282:	4618      	mov	r0, r3
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
	...

08006290 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8006290:	b5b0      	push	{r4, r5, r7, lr}
 8006292:	b08c      	sub	sp, #48	; 0x30
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800629c:	4a59      	ldr	r2, [pc, #356]	; (8006404 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 800629e:	2101      	movs	r1, #1
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f97e 	bl	80065a2 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc>
 80062a6:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 f9bb 	bl	8006630 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE5beginEv>
 80062ba:	4603      	mov	r3, r0
 80062bc:	617b      	str	r3, [r7, #20]
 80062be:	f107 0214 	add.w	r2, r7, #20
 80062c2:	f107 0308 	add.w	r3, r7, #8
 80062c6:	4611      	mov	r1, r2
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 f9c1 	bl	8006650 <_ZN9__gnu_cxxmiIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80062ce:	4603      	mov	r3, r0
 80062d0:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 f9cf 	bl	800667a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj>
 80062dc:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80062e2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	18d5      	adds	r5, r2, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f927 	bl	8006540 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 80062f2:	4603      	mov	r3, r0
 80062f4:	461a      	mov	r2, r3
 80062f6:	4629      	mov	r1, r5
 80062f8:	4620      	mov	r0, r4
 80062fa:	f7ff ff8e 	bl	800621a <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80062fe:	2300      	movs	r3, #0
 8006300:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8006302:	f7ff ffae 	bl	8006262 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d027      	beq.n	800635c <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800630c:	f107 0308 	add.w	r3, r7, #8
 8006310:	4618      	mov	r0, r3
 8006312:	f000 f9da 	bl	80066ca <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8006316:	4603      	mov	r3, r0
 8006318:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff ff4c 	bl	80061ba <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8006322:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	4621      	mov	r1, r4
 8006328:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800632a:	f000 f9ba 	bl	80066a2 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800632e:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8006330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006332:	3304      	adds	r3, #4
 8006334:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006336:	f107 0308 	add.w	r3, r7, #8
 800633a:	4618      	mov	r0, r3
 800633c:	f000 f9c5 	bl	80066ca <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8006340:	4603      	mov	r3, r0
 8006342:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4618      	mov	r0, r3
 8006348:	f7ff ff37 	bl	80061ba <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 800634c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800634e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006350:	6a39      	ldr	r1, [r7, #32]
 8006352:	4620      	mov	r0, r4
 8006354:	f000 f9a5 	bl	80066a2 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8006358:	62f8      	str	r0, [r7, #44]	; 0x2c
 800635a:	e026      	b.n	80063aa <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 800635c:	f107 0308 	add.w	r3, r7, #8
 8006360:	4618      	mov	r0, r3
 8006362:	f000 f9b2 	bl	80066ca <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8006366:	4603      	mov	r3, r0
 8006368:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff ff24 	bl	80061ba <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8006372:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	4621      	mov	r1, r4
 8006378:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800637a:	f000 f9b1 	bl	80066e0 <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 800637e:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006382:	3304      	adds	r3, #4
 8006384:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8006386:	f107 0308 	add.w	r3, r7, #8
 800638a:	4618      	mov	r0, r3
 800638c:	f000 f99d 	bl	80066ca <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8006390:	4603      	mov	r3, r0
 8006392:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff ff0f 	bl	80061ba <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 800639c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800639e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063a0:	6a39      	ldr	r1, [r7, #32]
 80063a2:	4620      	mov	r0, r4
 80063a4:	f000 f99c 	bl	80066e0 <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 80063a8:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80063aa:	f7ff ff5a 	bl	8006262 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>
 80063ae:	4603      	mov	r3, r0
 80063b0:	f083 0301 	eor.w	r3, r3, #1
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d009      	beq.n	80063ce <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff fefc 	bl	80061ba <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80063c2:	4603      	mov	r3, r0
 80063c4:	461a      	mov	r2, r3
 80063c6:	6a39      	ldr	r1, [r7, #32]
 80063c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063ca:	f7ff ff01 	bl	80061d0 <_ZSt8_DestroyIPP15PrintableSensorS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80063ce:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80063da:	461a      	mov	r2, r3
 80063dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063de:	f7ff fed9 	bl	8006194 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063ec:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	441a      	add	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	609a      	str	r2, [r3, #8]
    }
 80063fa:	bf00      	nop
 80063fc:	3730      	adds	r7, #48	; 0x30
 80063fe:	46bd      	mov	sp, r7
 8006400:	bdb0      	pop	{r4, r5, r7, pc}
 8006402:	bf00      	nop
 8006404:	0801d000 	.word	0x0801d000

08006408 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006408:	b5b0      	push	{r4, r5, r7, lr}
 800640a:	b08e      	sub	sp, #56	; 0x38
 800640c:	af02      	add	r7, sp, #8
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
 8006414:	f107 031c 	add.w	r3, r7, #28
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	4618      	mov	r0, r3
 800641c:	f7fe fdef 	bl	8004ffe <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 8006420:	4602      	mov	r2, r0
 8006422:	f107 0314 	add.w	r3, r7, #20
 8006426:	68b9      	ldr	r1, [r7, #8]
 8006428:	4618      	mov	r0, r3
 800642a:	f000 f972 	bl	8006712 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_>
      if (__res.second)
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d022      	beq.n	800647a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_+0x72>
	  _Alloc_node __an(*this);
 8006434:	f107 0310 	add.w	r3, r7, #16
 8006438:	68b9      	ldr	r1, [r7, #8]
 800643a:	4618      	mov	r0, r3
 800643c:	f000 f9ee 	bl	800681c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeC1ERS7_>
	  return _Res(_M_insert_(__res.first, __res.second,
 8006440:	697c      	ldr	r4, [r7, #20]
 8006442:	69bd      	ldr	r5, [r7, #24]
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f9f8 	bl	800683a <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 800644a:	4602      	mov	r2, r0
 800644c:	f107 0310 	add.w	r3, r7, #16
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	4613      	mov	r3, r2
 8006454:	462a      	mov	r2, r5
 8006456:	4621      	mov	r1, r4
 8006458:	68b8      	ldr	r0, [r7, #8]
 800645a:	f000 f9f9 	bl	8006850 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_>
 800645e:	4603      	mov	r3, r0
 8006460:	623b      	str	r3, [r7, #32]
		      true);
 8006462:	2301      	movs	r3, #1
 8006464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006468:	f107 0227 	add.w	r2, r7, #39	; 0x27
 800646c:	f107 0320 	add.w	r3, r7, #32
 8006470:	4619      	mov	r1, r3
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 fa35 	bl	80068e2 <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>
    }
 8006478:	e011      	b.n	800649e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_+0x96>
      return _Res(iterator(__res.first), false);
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006480:	4611      	mov	r1, r2
 8006482:	4618      	mov	r0, r3
 8006484:	f7fe fd9e 	bl	8004fc4 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8006488:	2300      	movs	r3, #0
 800648a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800648e:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8006492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006496:	4619      	mov	r1, r3
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 fa22 	bl	80068e2 <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>
    }
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	3730      	adds	r7, #48	; 0x30
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bdb0      	pop	{r4, r5, r7, pc}

080064a6 <_ZNSt4pairISt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IRSt17_Rb_tree_iteratorIS2_ERbLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 80064a6:	b590      	push	{r4, r7, lr}
 80064a8:	b085      	sub	sp, #20
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80064b2:	68fc      	ldr	r4, [r7, #12]
 80064b4:	68b8      	ldr	r0, [r7, #8]
 80064b6:	f000 fa2d 	bl	8006914 <_ZSt7forwardIRSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS5_E4typeE>
 80064ba:	4603      	mov	r3, r0
 80064bc:	4619      	mov	r1, r3
 80064be:	4620      	mov	r0, r4
 80064c0:	f7fe fc96 	bl	8004df0 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fa30 	bl	800692a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80064ca:	4603      	mov	r3, r0
 80064cc:	781a      	ldrb	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	711a      	strb	r2, [r3, #4]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4618      	mov	r0, r3
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd90      	pop	{r4, r7, pc}

080064dc <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4618      	mov	r0, r3
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	60f8      	str	r0, [r7, #12]
 80064fa:	60b9      	str	r1, [r7, #8]
 80064fc:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	68b9      	ldr	r1, [r7, #8]
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 fa1c 	bl	8006940 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE10deallocateEPS2_j>
 8006508:	bf00      	nop
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <_ZSt8_DestroyIPP15PrintableSensorEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fa1f 	bl	8006960 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP15PrintableSensorEEvT_S5_>
    }
 8006522:	bf00      	nop
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
 800652a:	b480      	push	{r7}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4618      	mov	r0, r3
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4618      	mov	r0, r3
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8006556:	b590      	push	{r4, r7, lr}
 8006558:	b085      	sub	sp, #20
 800655a:	af00      	add	r7, sp, #0
 800655c:	60f8      	str	r0, [r7, #12]
 800655e:	60b9      	str	r1, [r7, #8]
 8006560:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7ff ffec 	bl	8006540 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 8006568:	4603      	mov	r3, r0
 800656a:	681c      	ldr	r4, [r3, #0]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4619      	mov	r1, r3
 8006570:	2004      	movs	r0, #4
 8006572:	f7ff fc59 	bl	8005e28 <_ZnwjPv>
 8006576:	4603      	mov	r3, r0
 8006578:	601c      	str	r4, [r3, #0]
 800657a:	bf00      	nop
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	bd90      	pop	{r4, r7, pc}

08006582 <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4618      	mov	r0, r3
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80065a2:	b590      	push	{r4, r7, lr}
 80065a4:	b087      	sub	sp, #28
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	60f8      	str	r0, [r7, #12]
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 f9e1 	bl	8006976 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 80065b4:	4604      	mov	r4, r0
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f7ff fd92 	bl	80060e0 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 80065bc:	4603      	mov	r3, r0
 80065be:	1ae2      	subs	r2, r4, r3
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	bf34      	ite	cc
 80065c6:	2301      	movcc	r3, #1
 80065c8:	2300      	movcs	r3, #0
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f012 fc7e 	bl	8018ed2 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f7ff fd82 	bl	80060e0 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 80065dc:	4604      	mov	r4, r0
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f7ff fd7e 	bl	80060e0 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 80065e4:	4603      	mov	r3, r0
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	f107 0208 	add.w	r2, r7, #8
 80065ec:	f107 0310 	add.w	r3, r7, #16
 80065f0:	4611      	mov	r1, r2
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 f9d0 	bl	8006998 <_ZSt3maxIjERKT_S2_S2_>
 80065f8:	4603      	mov	r3, r0
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4423      	add	r3, r4
 80065fe:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f7ff fd6d 	bl	80060e0 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 8006606:	4602      	mov	r2, r0
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	4293      	cmp	r3, r2
 800660c:	d306      	bcc.n	800661c <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 f9b1 	bl	8006976 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 8006614:	4602      	mov	r2, r0
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	4293      	cmp	r3, r2
 800661a:	d904      	bls.n	8006626 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x84>
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 f9aa 	bl	8006976 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 8006622:	4603      	mov	r3, r0
 8006624:	e000      	b.n	8006628 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x86>
 8006626:	697b      	ldr	r3, [r7, #20]
      }
 8006628:	4618      	mov	r0, r3
 800662a:	371c      	adds	r7, #28
 800662c:	46bd      	mov	sp, r7
 800662e:	bd90      	pop	{r4, r7, pc}

08006630 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	f107 030c 	add.w	r3, r7, #12
 800663e:	4611      	mov	r1, r2
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff ff9e 	bl	8006582 <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <_ZN9__gnu_cxxmiIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006650:	b590      	push	{r4, r7, lr}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f835 	bl	80066ca <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8006660:	4603      	mov	r3, r0
 8006662:	681c      	ldr	r4, [r3, #0]
 8006664:	6838      	ldr	r0, [r7, #0]
 8006666:	f000 f830 	bl	80066ca <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 800666a:	4603      	mov	r3, r0
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	1ae3      	subs	r3, r4, r3
 8006670:	109b      	asrs	r3, r3, #2
 8006672:	4618      	mov	r0, r3
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	bd90      	pop	{r4, r7, pc}

0800667a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800667a:	b580      	push	{r7, lr}
 800667c:	b082      	sub	sp, #8
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d006      	beq.n	8006698 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj+0x1e>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6839      	ldr	r1, [r7, #0]
 800668e:	4618      	mov	r0, r3
 8006690:	f000 f996 	bl	80069c0 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8allocateERS2_j>
 8006694:	4603      	mov	r3, r0
 8006696:	e000      	b.n	800669a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj+0x20>
 8006698:	2300      	movs	r3, #0
      }
 800669a:	4618      	mov	r0, r3
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80066a2:	b590      	push	{r4, r7, lr}
 80066a4:	b087      	sub	sp, #28
 80066a6:	af02      	add	r7, sp, #8
 80066a8:	60f8      	str	r0, [r7, #12]
 80066aa:	60b9      	str	r1, [r7, #8]
 80066ac:	607a      	str	r2, [r7, #4]
 80066ae:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80066b0:	f88d 4000 	strb.w	r4, [sp]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 f98f 	bl	80069de <_ZNSt6vectorIP15PrintableSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80066c0:	4603      	mov	r3, r0
      }
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd90      	pop	{r4, r7, pc}

080066ca <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4618      	mov	r0, r3
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80066e0:	b590      	push	{r4, r7, lr}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 f987 	bl	8006a02 <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>
 80066f4:	4604      	mov	r4, r0
 80066f6:	68b8      	ldr	r0, [r7, #8]
 80066f8:	f000 f983 	bl	8006a02 <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>
 80066fc:	4601      	mov	r1, r0
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	4620      	mov	r0, r4
 8006704:	f000 f98c 	bl	8006a20 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP15PrintableSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8006708:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	bd90      	pop	{r4, r7, pc}

08006712 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006712:	b590      	push	{r4, r7, lr}
 8006714:	b08b      	sub	sp, #44	; 0x2c
 8006716:	af00      	add	r7, sp, #0
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	60b9      	str	r1, [r7, #8]
 800671c:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800671e:	68b8      	ldr	r0, [r7, #8]
 8006720:	f7fe fb87 	bl	8004e32 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>
 8006724:	4603      	mov	r3, r0
 8006726:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8006728:	68b8      	ldr	r0, [r7, #8]
 800672a:	f7fe fb8e 	bl	8004e4a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 800672e:	4603      	mov	r3, r0
 8006730:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8006732:	2301      	movs	r3, #1
 8006734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d020      	beq.n	8006780 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x6e>
	  __y = __x;
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8006742:	68bc      	ldr	r4, [r7, #8]
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	4618      	mov	r0, r3
 8006748:	f7fe fc11 	bl	8004f6e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 800674c:	4603      	mov	r3, r0
 800674e:	461a      	mov	r2, r3
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	4620      	mov	r0, r4
 8006754:	f7fe fbe7 	bl	8004f26 <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8006758:	4603      	mov	r3, r0
 800675a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800675e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006762:	2b00      	cmp	r3, #0
 8006764:	d005      	beq.n	8006772 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x60>
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	4618      	mov	r0, r3
 800676a:	f7fe fc13 	bl	8004f94 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>
 800676e:	4603      	mov	r3, r0
 8006770:	e004      	b.n	800677c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x6a>
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	4618      	mov	r0, r3
 8006776:	f7fe fc19 	bl	8004fac <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>
 800677a:	4603      	mov	r3, r0
 800677c:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800677e:	e7db      	b.n	8006738 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x26>
      iterator __j = iterator(__y);
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	f107 0310 	add.w	r3, r7, #16
 8006786:	4611      	mov	r1, r2
 8006788:	4618      	mov	r0, r3
 800678a:	f7fe fc1b 	bl	8004fc4 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800678e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006792:	2b00      	cmp	r3, #0
 8006794:	d01d      	beq.n	80067d2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xc0>
	  if (__j == begin())
 8006796:	68b8      	ldr	r0, [r7, #8]
 8006798:	f000 f953 	bl	8006a42 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE5beginEv>
 800679c:	4603      	mov	r3, r0
 800679e:	61fb      	str	r3, [r7, #28]
 80067a0:	f107 021c 	add.w	r2, r7, #28
 80067a4:	f107 0310 	add.w	r3, r7, #16
 80067a8:	4611      	mov	r1, r2
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fe fb9b 	bl	8004ee6 <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d008      	beq.n	80067c8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xb6>
	    return _Res(__x, __y);
 80067b6:	f107 0214 	add.w	r2, r7, #20
 80067ba:	f107 0318 	add.w	r3, r7, #24
 80067be:	4619      	mov	r1, r3
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 f94f 	bl	8006a64 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>
 80067c6:	e025      	b.n	8006814 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x102>
	    --__j;
 80067c8:	f107 0310 	add.w	r3, r7, #16
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 f962 	bl	8006a96 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80067d2:	68bc      	ldr	r4, [r7, #8]
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fe fb99 	bl	8004f0e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80067dc:	4603      	mov	r3, r0
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	4619      	mov	r1, r3
 80067e2:	4620      	mov	r0, r4
 80067e4:	f7fe fb9f 	bl	8004f26 <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d008      	beq.n	8006800 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xee>
	return _Res(__x, __y);
 80067ee:	f107 0214 	add.w	r2, r7, #20
 80067f2:	f107 0318 	add.w	r3, r7, #24
 80067f6:	4619      	mov	r1, r3
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 f933 	bl	8006a64 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>
 80067fe:	e009      	b.n	8006814 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x102>
      return _Res(__j._M_node, 0);
 8006800:	2300      	movs	r3, #0
 8006802:	623b      	str	r3, [r7, #32]
 8006804:	f107 0220 	add.w	r2, r7, #32
 8006808:	f107 0310 	add.w	r3, r7, #16
 800680c:	4619      	mov	r1, r3
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f000 f952 	bl	8006ab8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	372c      	adds	r7, #44	; 0x2c
 8006818:	46bd      	mov	sp, r7
 800681a:	bd90      	pop	{r4, r7, pc}

0800681c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeC1ERS7_>:
	_Alloc_node(_Rb_tree& __t)
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4618      	mov	r0, r3
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006850:	b5b0      	push	{r4, r5, r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
 800685c:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d11a      	bne.n	800689a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f7fe faf0 	bl	8004e4a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 800686a:	4602      	mov	r2, r0
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4293      	cmp	r3, r2
 8006870:	d013      	beq.n	800689a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8006872:	68fc      	ldr	r4, [r7, #12]
 8006874:	f107 0310 	add.w	r3, r7, #16
 8006878:	6839      	ldr	r1, [r7, #0]
 800687a:	4618      	mov	r0, r3
 800687c:	f7fe fbbf 	bl	8004ffe <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 8006880:	4605      	mov	r5, r0
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fe fb43 	bl	8004f0e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006888:	4603      	mov	r3, r0
 800688a:	461a      	mov	r2, r3
 800688c:	4629      	mov	r1, r5
 800688e:	4620      	mov	r0, r4
 8006890:	f7fe fb49 	bl	8004f26 <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4e>
 800689a:	2301      	movs	r3, #1
 800689c:	e000      	b.n	80068a0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x50>
 800689e:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 80068a0:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 80068a2:	6838      	ldr	r0, [r7, #0]
 80068a4:	f7ff ffc9 	bl	800683a <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 80068a8:	4603      	mov	r3, r0
 80068aa:	4619      	mov	r1, r3
 80068ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068ae:	f000 f919 	bl	8006ae4 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeclIRKS1_EEPSt13_Rb_tree_nodeIS1_EOT_>
 80068b2:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80068b8:	7ff8      	ldrb	r0, [r7, #31]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	69b9      	ldr	r1, [r7, #24]
 80068be:	f012 faaa 	bl	8018e16 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 80068cc:	f107 0314 	add.w	r3, r7, #20
 80068d0:	69b9      	ldr	r1, [r7, #24]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fe fb76 	bl	8004fc4 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 80068d8:	697b      	ldr	r3, [r7, #20]
      }
 80068da:	4618      	mov	r0, r3
 80068dc:	3720      	adds	r7, #32
 80068de:	46bd      	mov	sp, r7
 80068e0:	bdb0      	pop	{r4, r5, r7, pc}

080068e2 <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	60f8      	str	r0, [r7, #12]
 80068ea:	60b9      	str	r1, [r7, #8]
 80068ec:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80068ee:	68b8      	ldr	r0, [r7, #8]
 80068f0:	f000 f90c 	bl	8006b0c <_ZSt7forwardISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS4_E4typeE>
 80068f4:	4602      	mov	r2, r0
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6812      	ldr	r2, [r2, #0]
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f910 	bl	8006b22 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8006902:	4603      	mov	r3, r0
 8006904:	781a      	ldrb	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	711a      	strb	r2, [r3, #4]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <_ZSt7forwardIRSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4618      	mov	r0, r3
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800692a:	b480      	push	{r7}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4619      	mov	r1, r3
 8006952:	68b8      	ldr	r0, [r7, #8]
 8006954:	f012 fa04 	bl	8018d60 <_ZdlPvj>
      }
 8006958:	bf00      	nop
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP15PrintableSensorEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8006976:	b580      	push	{r7, lr}
 8006978:	b082      	sub	sp, #8
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4618      	mov	r0, r3
 8006982:	f000 f90c 	bl	8006b9e <_ZNKSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8006986:	4603      	mov	r3, r0
 8006988:	4618      	mov	r0, r3
 800698a:	f000 f8ee 	bl	8006b6a <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_max_sizeERKS2_>
 800698e:	4603      	mov	r3, r0
 8006990:	4618      	mov	r0, r3
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d201      	bcs.n	80069b2 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	e000      	b.n	80069b4 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80069b2:	687b      	ldr	r3, [r7, #4]
    }
 80069b4:	4618      	mov	r0, r3
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80069ca:	2200      	movs	r2, #0
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f8f0 	bl	8006bb4 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv>
 80069d4:	4603      	mov	r3, r0
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <_ZNSt6vectorIP15PrintableSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	60f8      	str	r0, [r7, #12]
 80069e6:	60b9      	str	r1, [r7, #8]
 80069e8:	607a      	str	r2, [r7, #4]
 80069ea:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	68b9      	ldr	r1, [r7, #8]
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f000 f8fc 	bl	8006bf0 <_ZSt12__relocate_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 80069f8:	4603      	mov	r3, r0
      }
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b084      	sub	sp, #16
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8006a0a:	f107 030c 	add.w	r3, r7, #12
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 f90a 	bl	8006c2a <_ZNSt13move_iteratorIPP15PrintableSensorEC1ES2_>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP15PrintableSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	68b9      	ldr	r1, [r7, #8]
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 f90b 	bl	8006c4e <_ZSt18uninitialized_copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	f107 030c 	add.w	r3, r7, #12
 8006a52:	4611      	mov	r1, r2
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fe fab5 	bl	8004fc4 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8006a70:	68b8      	ldr	r0, [r7, #8]
 8006a72:	f000 f8fe 	bl	8006c72 <_ZSt7forwardIRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006a76:	4603      	mov	r3, r0
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f902 	bl	8006c88 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8006a84:	4603      	mov	r3, r0
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	605a      	str	r2, [r3, #4]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b082      	sub	sp, #8
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f012 f9b5 	bl	8018e12 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	601a      	str	r2, [r3, #0]
	return *this;
 8006aae:	687b      	ldr	r3, [r7, #4]
      }
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8006ac4:	68b8      	ldr	r0, [r7, #8]
 8006ac6:	f000 f8df 	bl	8006c88 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8006aca:	4603      	mov	r3, r0
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	605a      	str	r2, [r3, #4]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeclIRKS1_EEPSt13_Rb_tree_nodeIS1_EOT_>:
	  operator()(_Arg&& __arg) const
 8006ae4:	b590      	push	{r4, r7, lr}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681c      	ldr	r4, [r3, #0]
 8006af2:	6838      	ldr	r0, [r7, #0]
 8006af4:	f7ff fea1 	bl	800683a <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8006af8:	4603      	mov	r3, r0
 8006afa:	4619      	mov	r1, r3
 8006afc:	4620      	mov	r0, r4
 8006afe:	f000 f8ce 	bl	8006c9e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_create_nodeIJRKS1_EEEPSt13_Rb_tree_nodeIS1_EDpOT_>
 8006b02:	4603      	mov	r3, r0
 8006b04:	4618      	mov	r0, r3
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd90      	pop	{r4, r7, pc}

08006b0c <_ZSt7forwardISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4618      	mov	r0, r3
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4618      	mov	r0, r3
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <_ZNSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>:
      _M_valptr()
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b082      	sub	sp, #8
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	3310      	adds	r3, #16
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 f8b6 	bl	8006ccc <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>
 8006b60:	4603      	mov	r3, r0
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8006b72:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006b76:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f8b3 	bl	8006ce4 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8max_sizeERKS2_>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006b82:	f107 0208 	add.w	r2, r7, #8
 8006b86:	f107 030c 	add.w	r3, r7, #12
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 f8b5 	bl	8006cfc <_ZSt3minIjERKT_S2_S2_>
 8006b92:	4603      	mov	r3, r0
 8006b94:	681b      	ldr	r3, [r3, #0]
      }
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <_ZNKSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 f8af 	bl	8006d24 <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	bf8c      	ite	hi
 8006bce:	2301      	movhi	r3, #1
 8006bd0:	2300      	movls	r3, #0
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006bd8:	f012 f978 	bl	8018ecc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4618      	mov	r0, r3
 8006be2:	f012 f8bf 	bl	8018d64 <_Znwj>
 8006be6:	4603      	mov	r3, r0
      }
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <_ZSt12__relocate_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8006bf0:	b5b0      	push	{r4, r5, r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
 8006bfc:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f000 f89c 	bl	8006d3c <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006c04:	4604      	mov	r4, r0
 8006c06:	68b8      	ldr	r0, [r7, #8]
 8006c08:	f000 f898 	bl	8006d3c <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f894 	bl	8006d3c <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006c14:	4602      	mov	r2, r0
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	4629      	mov	r1, r5
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f000 f899 	bl	8006d52 <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8006c20:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bdb0      	pop	{r4, r5, r7, pc}

08006c2a <_ZNSt13move_iteratorIPP15PrintableSensorEC1ES2_>:
      move_iterator(iterator_type __i)
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b082      	sub	sp, #8
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8006c34:	463b      	mov	r3, r7
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 f8a9 	bl	8006d8e <_ZSt4moveIRPP15PrintableSensorEONSt16remove_referenceIT_E4typeEOS5_>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4618      	mov	r0, r3
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <_ZSt18uninitialized_copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b086      	sub	sp, #24
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	68b9      	ldr	r1, [r7, #8]
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f000 f89e 	bl	8006da4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP15PrintableSensorES5_EET0_T_S8_S7_>
 8006c68:	4603      	mov	r3, r0
    }
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <_ZSt7forwardIRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006c72:	b480      	push	{r7}
 8006c74:	b083      	sub	sp, #12
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4618      	mov	r0, r3
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_create_nodeIJRKS1_EEEPSt13_Rb_tree_nodeIS1_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f88b 	bl	8006dc4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_get_nodeEv>
 8006cae:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8006cb0:	6838      	ldr	r0, [r7, #0]
 8006cb2:	f7ff fdc2 	bl	800683a <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	461a      	mov	r2, r3
 8006cba:	68f9      	ldr	r1, [r7, #12]
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f892 	bl	8006de6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE17_M_construct_nodeIJRKS1_EEEvPSt13_Rb_tree_nodeIS1_EDpOT_>
	  return __tmp;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
	}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>:
      _M_ptr() noexcept
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f8a6 	bl	8006e26 <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f8a5 	bl	8006e3c <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE8max_sizeEv>
 8006cf2:	4603      	mov	r3, r0
      }
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d201      	bcs.n	8006d16 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	e000      	b.n	8006d18 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8006d16:	687b      	ldr	r3, [r7, #4]
    }
 8006d18:	4618      	mov	r0, r3
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006d2c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8006d30:	4618      	mov	r0, r3
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4618      	mov	r0, r3
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b086      	sub	sp, #24
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	607a      	str	r2, [r7, #4]
 8006d5e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	109b      	asrs	r3, r3, #2
 8006d68:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	dd06      	ble.n	8006d7e <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	461a      	mov	r2, r3
 8006d76:	68f9      	ldr	r1, [r7, #12]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f013 fa41 	bl	801a200 <memmove>
      return __result + __count;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	4413      	add	r3, r2
    }
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <_ZSt4moveIRPP15PrintableSensorEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP15PrintableSensorES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	68b9      	ldr	r1, [r7, #8]
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f000 f84d 	bl	8006e54 <_ZSt4copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_get_nodeEv>:
      _M_get_node()
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7ff feb3 	bl	8006b38 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 f854 	bl	8006e84 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE8allocateERS4_j>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE17_M_construct_nodeIJRKS1_EEEvPSt13_Rb_tree_nodeIS1_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8006de6:	b5b0      	push	{r4, r5, r7, lr}
 8006de8:	b084      	sub	sp, #16
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	4619      	mov	r1, r3
 8006df6:	2014      	movs	r0, #20
 8006df8:	f7ff f816 	bl	8005e28 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f7ff fe9b 	bl	8006b38 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 8006e02:	4604      	mov	r4, r0
 8006e04:	68b8      	ldr	r0, [r7, #8]
 8006e06:	f7ff fea2 	bl	8006b4e <_ZNSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>
 8006e0a:	4605      	mov	r5, r0
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7ff fd14 	bl	800683a <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8006e12:	4603      	mov	r3, r0
 8006e14:	461a      	mov	r2, r3
 8006e16:	4629      	mov	r1, r5
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f000 f842 	bl	8006ea2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>
	}
 8006e1e:	bf00      	nop
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bdb0      	pop	{r4, r5, r7, pc}

08006e26 <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>:
      _M_addr() noexcept
 8006e26:	b480      	push	{r7}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7ff ff6d 	bl	8006d24 <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <_ZSt4copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8006e54:	b590      	push	{r4, r7, lr}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 f831 	bl	8006ec8 <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006e66:	4604      	mov	r4, r0
 8006e68:	68b8      	ldr	r0, [r7, #8]
 8006e6a:	f000 f82d 	bl	8006ec8 <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	4619      	mov	r1, r3
 8006e74:	4620      	mov	r0, r4
 8006e76:	f000 f838 	bl	8006eea <_ZSt13__copy_move_aILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 8006e7a:	4603      	mov	r3, r0
    }
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd90      	pop	{r4, r7, pc}

08006e84 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006e8e:	2200      	movs	r2, #0
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f84c 	bl	8006f30 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7ff fcc3 	bl	800683a <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	68b9      	ldr	r1, [r7, #8]
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 f859 	bl	8006f72 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
	}
 8006ec0:	bf00      	nop
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8006ed0:	1d3b      	adds	r3, r7, #4
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 f863 	bl	8006f9e <_ZNKSt13move_iteratorIPP15PrintableSensorE4baseEv>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 f86b 	bl	8006fb6 <_ZSt12__miter_baseIPP15PrintableSensorET_S3_>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <_ZSt13__copy_move_aILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006eea:	b5b0      	push	{r4, r5, r7, lr}
 8006eec:	b084      	sub	sp, #16
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	60f8      	str	r0, [r7, #12]
 8006ef2:	60b9      	str	r1, [r7, #8]
 8006ef4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f7ff ff20 	bl	8006d3c <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006efc:	4604      	mov	r4, r0
 8006efe:	68b8      	ldr	r0, [r7, #8]
 8006f00:	f7ff ff1c 	bl	8006d3c <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006f04:	4605      	mov	r5, r0
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff ff17 	bl	8006d3c <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	461a      	mov	r2, r3
 8006f12:	4629      	mov	r1, r5
 8006f14:	4620      	mov	r0, r4
 8006f16:	f000 f859 	bl	8006fcc <_ZSt14__copy_move_a1ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	1d3b      	adds	r3, r7, #4
 8006f1e:	4611      	mov	r1, r2
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 f863 	bl	8006fec <_ZSt12__niter_wrapIPP15PrintableSensorET_RKS3_S3_>
 8006f26:	4603      	mov	r3, r0
    }
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bdb0      	pop	{r4, r5, r7, pc}

08006f30 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 f861 	bl	8007004 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv>
 8006f42:	4602      	mov	r2, r0
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	4293      	cmp	r3, r2
 8006f48:	bf8c      	ite	hi
 8006f4a:	2301      	movhi	r3, #1
 8006f4c:	2300      	movls	r3, #0
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006f54:	f011 ffba 	bl	8018ecc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4618      	mov	r0, r3
 8006f64:	f011 fefe 	bl	8018d64 <_Znwj>
 8006f68:	4603      	mov	r3, r0
      }
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8006f72:	b590      	push	{r4, r7, lr}
 8006f74:	b085      	sub	sp, #20
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7ff fc5b 	bl	800683a <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8006f84:	4603      	mov	r3, r0
 8006f86:	681c      	ldr	r4, [r3, #0]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	2004      	movs	r0, #4
 8006f8e:	f7fe ff4b 	bl	8005e28 <_ZnwjPv>
 8006f92:	4603      	mov	r3, r0
 8006f94:	601c      	str	r4, [r3, #0]
 8006f96:	bf00      	nop
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd90      	pop	{r4, r7, pc}

08006f9e <_ZNKSt13move_iteratorIPP15PrintableSensorE4baseEv>:
      base() const
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <_ZSt12__miter_baseIPP15PrintableSensorET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8006fb6:	b480      	push	{r7}
 8006fb8:	b083      	sub	sp, #12
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <_ZSt14__copy_move_a1ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	68b9      	ldr	r1, [r7, #8]
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 f81f 	bl	8007020 <_ZSt14__copy_move_a2ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <_ZSt12__niter_wrapIPP15PrintableSensorET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800700c:	4b03      	ldr	r3, [pc, #12]	; (800701c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv+0x18>)
      }
 800700e:	4618      	mov	r0, r3
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	06666666 	.word	0x06666666

08007020 <_ZSt14__copy_move_a2ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	68b9      	ldr	r1, [r7, #8]
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 f805 	bl	8007040 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_>
 8007036:	4603      	mov	r3, r0
    }
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	109b      	asrs	r3, r3, #2
 8007054:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d006      	beq.n	800706a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	461a      	mov	r2, r3
 8007062:	68f9      	ldr	r1, [r7, #12]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f013 f8cb 	bl	801a200 <memmove>
	  return __result + _Num;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	4413      	add	r3, r2
	}
 8007072:	4618      	mov	r0, r3
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	ed87 0a01 	vstr	s0, [r7, #4]
 8007084:	edd7 7a01 	vldr	s15, [r7, #4]
 8007088:	eef0 7ae7 	vabs.f32	s15, s15
 800708c:	eeb0 0a67 	vmov.f32	s0, s15
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 800709a:	b580      	push	{r7, lr}
 800709c:	b082      	sub	sp, #8
 800709e:	af00      	add	r7, sp, #0
 80070a0:	ed87 0a01 	vstr	s0, [r7, #4]
 80070a4:	edc7 0a00 	vstr	s1, [r7]
 80070a8:	edd7 0a00 	vldr	s1, [r7]
 80070ac:	ed97 0a01 	vldr	s0, [r7, #4]
 80070b0:	f012 f808 	bl	80190c4 <atan2f>
 80070b4:	eef0 7a40 	vmov.f32	s15, s0
 80070b8:	eeb0 0a67 	vmov.f32	s0, s15
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 80070c2:	b480      	push	{r7}
 80070c4:	b083      	sub	sp, #12
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	ed87 0a01 	vstr	s0, [r7, #4]
 80070cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80070d0:	eef0 7ae7 	vabs.f32	s15, s15
 80070d4:	eeb0 0a67 	vmov.f32	s0, s15
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b082      	sub	sp, #8
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	ed87 0a01 	vstr	s0, [r7, #4]
 80070ec:	ed97 0a01 	vldr	s0, [r7, #4]
 80070f0:	f011 ffea 	bl	80190c8 <sqrtf>
 80070f4:	eef0 7a40 	vmov.f32	s15, s0
 80070f8:	eeb0 0a67 	vmov.f32	s0, s15
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_>:
 */

#include "ICM42688P.hpp"
#include "Constants.hpp"

ICM42688P::ICM42688P(
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
 8007110:	603b      	str	r3, [r7, #0]
	,prev_raw_az {0.0F}
	,max_ax_dt {0.0F}
	,max_ay_dt {0.0F}
	,max_az_dt {0.0F}
	,crashState {false}
	,criticalState {false}
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4618      	mov	r0, r3
 8007116:	f7fc fe4b 	bl	8003db0 <_ZN8SPI_ConnC1Ev>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	3304      	adds	r3, #4
 800711e:	4618      	mov	r0, r3
 8007120:	f7fa f8d6 	bl	80012d0 <_ZN15PrintableSensorC1Ev>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	3340      	adds	r3, #64	; 0x40
 8007128:	4618      	mov	r0, r3
 800712a:	f7fc fe51 	bl	8003dd0 <_ZN12CallsCounterC1Ev>
 800712e:	4a66      	ldr	r2, [pc, #408]	; (80072c8 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1c4>)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	4a65      	ldr	r2, [pc, #404]	; (80072cc <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1c8>)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	605a      	str	r2, [r3, #4]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4a64      	ldr	r2, [pc, #400]	; (80072d0 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1cc>)
 800713e:	651a      	str	r2, [r3, #80]	; 0x50
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	4a64      	ldr	r2, [pc, #400]	; (80072d4 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1d0>)
 8007144:	655a      	str	r2, [r3, #84]	; 0x54
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4a63      	ldr	r2, [pc, #396]	; (80072d8 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1d4>)
 800714a:	659a      	str	r2, [r3, #88]	; 0x58
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	65da      	str	r2, [r3, #92]	; 0x5c
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	661a      	str	r2, [r3, #96]	; 0x60
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	665a      	str	r2, [r3, #100]	; 0x64
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	669a      	str	r2, [r3, #104]	; 0x68
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	69fa      	ldr	r2, [r7, #28]
 8007168:	66da      	str	r2, [r3, #108]	; 0x6c
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f04f 0200 	mov.w	r2, #0
 8007190:	675a      	str	r2, [r3, #116]	; 0x74
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f04f 0200 	mov.w	r2, #0
 8007198:	679a      	str	r2, [r3, #120]	; 0x78
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f04f 0200 	mov.w	r2, #0
 80071a0:	67da      	str	r2, [r3, #124]	; 0x7c
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f04f 0200 	mov.w	r2, #0
 80071a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f04f 0200 	mov.w	r2, #0
 80071b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f04f 0200 	mov.w	r2, #0
 80071bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f04f 0200 	mov.w	r2, #0
 80071c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f04f 0200 	mov.w	r2, #0
 80071d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f04f 0200 	mov.w	r2, #0
 80071da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f04f 0200 	mov.w	r2, #0
 80071ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f04f 0200 	mov.w	r2, #0
 80071f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f04f 0200 	mov.w	r2, #0
 8007202:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f04f 0200 	mov.w	r2, #0
 800720c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f04f 0200 	mov.w	r2, #0
 8007216:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f04f 0200 	mov.w	r2, #0
 8007220:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4a2d      	ldr	r2, [pc, #180]	; (80072dc <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1d8>)
 8007228:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4a2c      	ldr	r2, [pc, #176]	; (80072e0 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1dc>)
 8007230:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4a2b      	ldr	r2, [pc, #172]	; (80072e4 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1e0>)
 8007238:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4a2a      	ldr	r2, [pc, #168]	; (80072e8 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1e4>)
 8007240:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4a29      	ldr	r2, [pc, #164]	; (80072ec <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1e8>)
 8007248:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4a28      	ldr	r2, [pc, #160]	; (80072f0 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1ec>)
 8007250:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800725a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007264:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800726e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f04f 0200 	mov.w	r2, #0
 8007278:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f04f 0200 	mov.w	r2, #0
 8007282:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f04f 0200 	mov.w	r2, #0
 8007296:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f04f 0200 	mov.w	r2, #0
 80072aa:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
{
}
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	0801d35c 	.word	0x0801d35c
 80072cc:	0801d370 	.word	0x0801d370
 80072d0:	42652ee1 	.word	0x42652ee1
 80072d4:	4183126f 	.word	0x4183126f
 80072d8:	3a83126f 	.word	0x3a83126f
 80072dc:	c1400000 	.word	0xc1400000
 80072e0:	c1500000 	.word	0xc1500000
 80072e4:	40e00000 	.word	0x40e00000
 80072e8:	45057000 	.word	0x45057000
 80072ec:	c3d48000 	.word	0xc3d48000
 80072f0:	44a0a000 	.word	0x44a0a000

080072f4 <_ZN9ICM42688P11defaultInitEv>:

bool ICM42688P::defaultInit()
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	6078      	str	r0, [r7, #4]
	if (!initAndCheck(INTF_CONFIG1,0x00,10))
 80072fc:	2300      	movs	r3, #0
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	230a      	movs	r3, #10
 8007302:	2200      	movs	r2, #0
 8007304:	214d      	movs	r1, #77	; 0x4d
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f8af 	bl	800746a <_ZN9ICM42688P12initAndCheckEhhhb>
 800730c:	4603      	mov	r3, r0
 800730e:	f083 0301 	eor.w	r3, r3, #1
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <_ZN9ICM42688P11defaultInitEv+0x28>
		return false;
 8007318:	2300      	movs	r3, #0
 800731a:	e0a2      	b.n	8007462 <_ZN9ICM42688P11defaultInitEv+0x16e>

	SPI_write(DEVICE_CONFIG,DEVICE_CONFIG_SOFT_RESET_CONFIG);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2201      	movs	r2, #1
 8007324:	2111      	movs	r1, #17
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	4798      	blx	r3
	HAL_Delay(20);
 800732a:	2014      	movs	r0, #20
 800732c:	f002 f982 	bl	8009634 <HAL_Delay>

	if (!initAndCheck(INTF_CONFIG1,0x00,10))
 8007330:	2300      	movs	r3, #0
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	230a      	movs	r3, #10
 8007336:	2200      	movs	r2, #0
 8007338:	214d      	movs	r1, #77	; 0x4d
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f895 	bl	800746a <_ZN9ICM42688P12initAndCheckEhhhb>
 8007340:	4603      	mov	r3, r0
 8007342:	f083 0301 	eor.w	r3, r3, #1
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <_ZN9ICM42688P11defaultInitEv+0x5c>
		return false;
 800734c:	2300      	movs	r3, #0
 800734e:	e088      	b.n	8007462 <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(INT_CONFIG0,INT_CONFIG0_UI_DRDY_INT_CLEAR_ONSENSORREGREAD,10))
 8007350:	2300      	movs	r3, #0
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	230a      	movs	r3, #10
 8007356:	2220      	movs	r2, #32
 8007358:	2163      	movs	r1, #99	; 0x63
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f885 	bl	800746a <_ZN9ICM42688P12initAndCheckEhhhb>
 8007360:	4603      	mov	r3, r0
 8007362:	f083 0301 	eor.w	r3, r3, #1
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <_ZN9ICM42688P11defaultInitEv+0x7c>
		return false;
 800736c:	2300      	movs	r3, #0
 800736e:	e078      	b.n	8007462 <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(INT_CONFIG,INT_CONFIG_INT1_POLARITY_ACTIVE_HIGH|INT_CONFIG_INT1_DRIVE_CIRCUIT_PUSH_PULL,10))
 8007370:	2300      	movs	r3, #0
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	230a      	movs	r3, #10
 8007376:	2203      	movs	r2, #3
 8007378:	2114      	movs	r1, #20
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f875 	bl	800746a <_ZN9ICM42688P12initAndCheckEhhhb>
 8007380:	4603      	mov	r3, r0
 8007382:	f083 0301 	eor.w	r3, r3, #1
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <_ZN9ICM42688P11defaultInitEv+0x9c>
		return false;
 800738c:	2300      	movs	r3, #0
 800738e:	e068      	b.n	8007462 <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(INT_SOURCE0,INT_SOURCE0_UI_DRDY_INT1_EN,10))
 8007390:	2300      	movs	r3, #0
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	230a      	movs	r3, #10
 8007396:	2208      	movs	r2, #8
 8007398:	2165      	movs	r1, #101	; 0x65
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f865 	bl	800746a <_ZN9ICM42688P12initAndCheckEhhhb>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f083 0301 	eor.w	r3, r3, #1
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <_ZN9ICM42688P11defaultInitEv+0xbc>
		return false;
 80073ac:	2300      	movs	r3, #0
 80073ae:	e058      	b.n	8007462 <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(GYRO_CONFIG_STATIC2,0b11,10))
 80073b0:	2300      	movs	r3, #0
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	230a      	movs	r3, #10
 80073b6:	2203      	movs	r2, #3
 80073b8:	210b      	movs	r1, #11
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f855 	bl	800746a <_ZN9ICM42688P12initAndCheckEhhhb>
 80073c0:	4603      	mov	r3, r0
 80073c2:	f083 0301 	eor.w	r3, r3, #1
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <_ZN9ICM42688P11defaultInitEv+0xdc>
		return false;
 80073cc:	2300      	movs	r3, #0
 80073ce:	e048      	b.n	8007462 <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(GYRO_CONFIG0,GYRO_CONFIG0_GYRO_ODR_1KHZ|GYRO_CONFIG0_GYRO_FS_SEL_2000DPS,10))
 80073d0:	2300      	movs	r3, #0
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	230a      	movs	r3, #10
 80073d6:	2206      	movs	r2, #6
 80073d8:	214f      	movs	r1, #79	; 0x4f
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f845 	bl	800746a <_ZN9ICM42688P12initAndCheckEhhhb>
 80073e0:	4603      	mov	r3, r0
 80073e2:	f083 0301 	eor.w	r3, r3, #1
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <_ZN9ICM42688P11defaultInitEv+0xfc>
		return false;
 80073ec:	2300      	movs	r3, #0
 80073ee:	e038      	b.n	8007462 <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(ACCEL_CONFIG0,ACCEL_CONFIG0_ACCEL_ODR_1KHZ|ACCEL_CONFIG0_ACCEL_FS_SEL_4G,10))
 80073f0:	2300      	movs	r3, #0
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	230a      	movs	r3, #10
 80073f6:	2246      	movs	r2, #70	; 0x46
 80073f8:	2150      	movs	r1, #80	; 0x50
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f835 	bl	800746a <_ZN9ICM42688P12initAndCheckEhhhb>
 8007400:	4603      	mov	r3, r0
 8007402:	f083 0301 	eor.w	r3, r3, #1
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <_ZN9ICM42688P11defaultInitEv+0x11c>
		return false;
 800740c:	2300      	movs	r3, #0
 800740e:	e028      	b.n	8007462 <_ZN9ICM42688P11defaultInitEv+0x16e>

	if (!initAndCheck(PWR_MGMT0,0x0F,10))
 8007410:	2300      	movs	r3, #0
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	230a      	movs	r3, #10
 8007416:	220f      	movs	r2, #15
 8007418:	214e      	movs	r1, #78	; 0x4e
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f825 	bl	800746a <_ZN9ICM42688P12initAndCheckEhhhb>
 8007420:	4603      	mov	r3, r0
 8007422:	f083 0301 	eor.w	r3, r3, #1
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <_ZN9ICM42688P11defaultInitEv+0x13c>
		return false;
 800742c:	2300      	movs	r3, #0
 800742e:	e018      	b.n	8007462 <_ZN9ICM42688P11defaultInitEv+0x16e>

	HAL_Delay(50);
 8007430:	2032      	movs	r0, #50	; 0x32
 8007432:	f002 f8ff 	bl	8009634 <HAL_Delay>

	this->update();
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fa80 	bl	800793c <_ZN9ICM42688P6updateEv>
	this->euler_x = this->ay;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	this->euler_y = this->ax;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	this->euler_z = this->az;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	return true;
 8007460:	2301      	movs	r3, #1
}
 8007462:	4618      	mov	r0, r3
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <_ZN9ICM42688P12initAndCheckEhhhb>:

bool ICM42688P::initAndCheck(uint8_t addr,uint8_t val,uint8_t numberOfTries,bool read_only)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b084      	sub	sp, #16
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	4608      	mov	r0, r1
 8007474:	4611      	mov	r1, r2
 8007476:	461a      	mov	r2, r3
 8007478:	4603      	mov	r3, r0
 800747a:	70fb      	strb	r3, [r7, #3]
 800747c:	460b      	mov	r3, r1
 800747e:	70bb      	strb	r3, [r7, #2]
 8007480:	4613      	mov	r3, r2
 8007482:	707b      	strb	r3, [r7, #1]
	for (int i=0;i<numberOfTries;i++)
 8007484:	2300      	movs	r3, #0
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	787b      	ldrb	r3, [r7, #1]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	429a      	cmp	r2, r3
 800748e:	da21      	bge.n	80074d4 <_ZN9ICM42688P12initAndCheckEhhhb+0x6a>
	{
		if (read_only==false)
 8007490:	7e3b      	ldrb	r3, [r7, #24]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d106      	bne.n	80074a4 <_ZN9ICM42688P12initAndCheckEhhhb+0x3a>
			SPI_write(addr,val);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	78ba      	ldrb	r2, [r7, #2]
 800749e:	78f9      	ldrb	r1, [r7, #3]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	4798      	blx	r3
		if (SPI_read(addr)==val)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3304      	adds	r3, #4
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	78fa      	ldrb	r2, [r7, #3]
 80074ae:	4611      	mov	r1, r2
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	4798      	blx	r3
 80074b4:	4603      	mov	r3, r0
 80074b6:	461a      	mov	r2, r3
 80074b8:	78bb      	ldrb	r3, [r7, #2]
 80074ba:	4293      	cmp	r3, r2
 80074bc:	bf0c      	ite	eq
 80074be:	2301      	moveq	r3, #1
 80074c0:	2300      	movne	r3, #0
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <_ZN9ICM42688P12initAndCheckEhhhb+0x62>
			return true;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e004      	b.n	80074d6 <_ZN9ICM42688P12initAndCheckEhhhb+0x6c>
	for (int i=0;i<numberOfTries;i++)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	3301      	adds	r3, #1
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	e7d9      	b.n	8007488 <_ZN9ICM42688P12initAndCheckEhhhb+0x1e>
	}
	return false;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
	...

080074e0 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* ICM42688P::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 80074e0:	b590      	push	{r4, r7, lr}
 80074e2:	b09f      	sub	sp, #124	; 0x7c
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3308      	adds	r3, #8
 80074ee:	2200      	movs	r2, #0
 80074f0:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GX)!=senorsList.end())
 80074f2:	2300      	movs	r3, #0
 80074f4:	613b      	str	r3, [r7, #16]
 80074f6:	f107 0310 	add.w	r3, r7, #16
 80074fa:	4619      	mov	r1, r3
 80074fc:	6838      	ldr	r0, [r7, #0]
 80074fe:	f7fd fc01 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8007502:	4603      	mov	r3, r0
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	6838      	ldr	r0, [r7, #0]
 8007508:	f7fd fc15 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 800750c:	4603      	mov	r3, r0
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	f107 0214 	add.w	r2, r7, #20
 8007514:	f107 030c 	add.w	r3, r7, #12
 8007518:	4611      	mov	r1, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f7fd fc18 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d020      	beq.n	8007568 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x88>
	{
		strcat(packet,toCharArray(euler_x));
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f103 0408 	add.w	r4, r3, #8
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	1d1a      	adds	r2, r3, #4
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8007536:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800753a:	ee17 1a90 	vmov	r1, s15
 800753e:	4610      	mov	r0, r2
 8007540:	f7fc fc04 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 8007544:	4603      	mov	r3, r0
 8007546:	4619      	mov	r1, r3
 8007548:	4620      	mov	r0, r4
 800754a:	f012 ffaf 	bl	801a4ac <strcat>
		strcat(packet,",");
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f103 0408 	add.w	r4, r3, #8
 8007554:	4620      	mov	r0, r4
 8007556:	f7f8 fe8b 	bl	8000270 <strlen>
 800755a:	4603      	mov	r3, r0
 800755c:	4423      	add	r3, r4
 800755e:	49d2      	ldr	r1, [pc, #840]	; (80078a8 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 8007560:	461a      	mov	r2, r3
 8007562:	460b      	mov	r3, r1
 8007564:	881b      	ldrh	r3, [r3, #0]
 8007566:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GY)!=senorsList.end())
 8007568:	2301      	movs	r3, #1
 800756a:	61fb      	str	r3, [r7, #28]
 800756c:	f107 031c 	add.w	r3, r7, #28
 8007570:	4619      	mov	r1, r3
 8007572:	6838      	ldr	r0, [r7, #0]
 8007574:	f7fd fbc6 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8007578:	4603      	mov	r3, r0
 800757a:	61bb      	str	r3, [r7, #24]
 800757c:	6838      	ldr	r0, [r7, #0]
 800757e:	f7fd fbda 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8007582:	4603      	mov	r3, r0
 8007584:	623b      	str	r3, [r7, #32]
 8007586:	f107 0220 	add.w	r2, r7, #32
 800758a:	f107 0318 	add.w	r3, r7, #24
 800758e:	4611      	mov	r1, r2
 8007590:	4618      	mov	r0, r3
 8007592:	f7fd fbdd 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d020      	beq.n	80075de <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0xfe>
	{
		strcat(packet,toCharArray(euler_y));
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f103 0408 	add.w	r4, r3, #8
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	1d1a      	adds	r2, r3, #4
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 80075ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075b0:	ee17 1a90 	vmov	r1, s15
 80075b4:	4610      	mov	r0, r2
 80075b6:	f7fc fbc9 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 80075ba:	4603      	mov	r3, r0
 80075bc:	4619      	mov	r1, r3
 80075be:	4620      	mov	r0, r4
 80075c0:	f012 ff74 	bl	801a4ac <strcat>
		strcat(packet,",");
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f103 0408 	add.w	r4, r3, #8
 80075ca:	4620      	mov	r0, r4
 80075cc:	f7f8 fe50 	bl	8000270 <strlen>
 80075d0:	4603      	mov	r3, r0
 80075d2:	4423      	add	r3, r4
 80075d4:	49b4      	ldr	r1, [pc, #720]	; (80078a8 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 80075d6:	461a      	mov	r2, r3
 80075d8:	460b      	mov	r3, r1
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GZ)!=senorsList.end())
 80075de:	2302      	movs	r3, #2
 80075e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80075e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80075e6:	4619      	mov	r1, r3
 80075e8:	6838      	ldr	r0, [r7, #0]
 80075ea:	f7fd fb8b 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80075ee:	4603      	mov	r3, r0
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
 80075f2:	6838      	ldr	r0, [r7, #0]
 80075f4:	f7fd fb9f 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80075f8:	4603      	mov	r3, r0
 80075fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075fc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007604:	4611      	mov	r1, r2
 8007606:	4618      	mov	r0, r3
 8007608:	f7fd fba2 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d020      	beq.n	8007654 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x174>
	{
		strcat(packet,toCharArray(euler_z));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f103 0408 	add.w	r4, r3, #8
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	1d1a      	adds	r2, r3, #4
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8007622:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007626:	ee17 1a90 	vmov	r1, s15
 800762a:	4610      	mov	r0, r2
 800762c:	f7fc fb8e 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 8007630:	4603      	mov	r3, r0
 8007632:	4619      	mov	r1, r3
 8007634:	4620      	mov	r0, r4
 8007636:	f012 ff39 	bl	801a4ac <strcat>
		strcat(packet,",");
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f103 0408 	add.w	r4, r3, #8
 8007640:	4620      	mov	r0, r4
 8007642:	f7f8 fe15 	bl	8000270 <strlen>
 8007646:	4603      	mov	r3, r0
 8007648:	4423      	add	r3, r4
 800764a:	4997      	ldr	r1, [pc, #604]	; (80078a8 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 800764c:	461a      	mov	r2, r3
 800764e:	460b      	mov	r3, r1
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AX)!=senorsList.end())
 8007654:	2306      	movs	r3, #6
 8007656:	637b      	str	r3, [r7, #52]	; 0x34
 8007658:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800765c:	4619      	mov	r1, r3
 800765e:	6838      	ldr	r0, [r7, #0]
 8007660:	f7fd fb50 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8007664:	4603      	mov	r3, r0
 8007666:	633b      	str	r3, [r7, #48]	; 0x30
 8007668:	6838      	ldr	r0, [r7, #0]
 800766a:	f7fd fb64 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 800766e:	4603      	mov	r3, r0
 8007670:	63bb      	str	r3, [r7, #56]	; 0x38
 8007672:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007676:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800767a:	4611      	mov	r1, r2
 800767c:	4618      	mov	r0, r3
 800767e:	f7fd fb67 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d022      	beq.n	80076ce <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1ee>
	{
		strcat(packet,toCharArray(-ax));
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f103 0408 	add.w	r4, r3, #8
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	1d1a      	adds	r2, r3, #4
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8007698:	eef1 7a67 	vneg.f32	s15, s15
 800769c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076a0:	ee17 1a90 	vmov	r1, s15
 80076a4:	4610      	mov	r0, r2
 80076a6:	f7fc fb51 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 80076aa:	4603      	mov	r3, r0
 80076ac:	4619      	mov	r1, r3
 80076ae:	4620      	mov	r0, r4
 80076b0:	f012 fefc 	bl	801a4ac <strcat>
		strcat(packet,",");
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f103 0408 	add.w	r4, r3, #8
 80076ba:	4620      	mov	r0, r4
 80076bc:	f7f8 fdd8 	bl	8000270 <strlen>
 80076c0:	4603      	mov	r3, r0
 80076c2:	4423      	add	r3, r4
 80076c4:	4978      	ldr	r1, [pc, #480]	; (80078a8 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 80076c6:	461a      	mov	r2, r3
 80076c8:	460b      	mov	r3, r1
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AY)!=senorsList.end())
 80076ce:	2307      	movs	r3, #7
 80076d0:	643b      	str	r3, [r7, #64]	; 0x40
 80076d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80076d6:	4619      	mov	r1, r3
 80076d8:	6838      	ldr	r0, [r7, #0]
 80076da:	f7fd fb13 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80076de:	4603      	mov	r3, r0
 80076e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076e2:	6838      	ldr	r0, [r7, #0]
 80076e4:	f7fd fb27 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80076e8:	4603      	mov	r3, r0
 80076ea:	647b      	str	r3, [r7, #68]	; 0x44
 80076ec:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80076f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80076f4:	4611      	mov	r1, r2
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7fd fb2a 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d020      	beq.n	8007744 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x264>
	{
		strcat(packet,toCharArray(ay));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f103 0408 	add.w	r4, r3, #8
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	1d1a      	adds	r2, r3, #4
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8007712:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007716:	ee17 1a90 	vmov	r1, s15
 800771a:	4610      	mov	r0, r2
 800771c:	f7fc fb16 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 8007720:	4603      	mov	r3, r0
 8007722:	4619      	mov	r1, r3
 8007724:	4620      	mov	r0, r4
 8007726:	f012 fec1 	bl	801a4ac <strcat>
		strcat(packet,",");
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f103 0408 	add.w	r4, r3, #8
 8007730:	4620      	mov	r0, r4
 8007732:	f7f8 fd9d 	bl	8000270 <strlen>
 8007736:	4603      	mov	r3, r0
 8007738:	4423      	add	r3, r4
 800773a:	495b      	ldr	r1, [pc, #364]	; (80078a8 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 800773c:	461a      	mov	r2, r3
 800773e:	460b      	mov	r3, r1
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AZ)!=senorsList.end())
 8007744:	2308      	movs	r3, #8
 8007746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007748:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800774c:	4619      	mov	r1, r3
 800774e:	6838      	ldr	r0, [r7, #0]
 8007750:	f7fd fad8 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8007754:	4603      	mov	r3, r0
 8007756:	64bb      	str	r3, [r7, #72]	; 0x48
 8007758:	6838      	ldr	r0, [r7, #0]
 800775a:	f7fd faec 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 800775e:	4603      	mov	r3, r0
 8007760:	653b      	str	r3, [r7, #80]	; 0x50
 8007762:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007766:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800776a:	4611      	mov	r1, r2
 800776c:	4618      	mov	r0, r3
 800776e:	f7fd faef 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d020      	beq.n	80077ba <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2da>
	{
		strcat(packet,toCharArray(az));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f103 0408 	add.w	r4, r3, #8
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	1d1a      	adds	r2, r3, #4
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8007788:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800778c:	ee17 1a90 	vmov	r1, s15
 8007790:	4610      	mov	r0, r2
 8007792:	f7fc fadb 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 8007796:	4603      	mov	r3, r0
 8007798:	4619      	mov	r1, r3
 800779a:	4620      	mov	r0, r4
 800779c:	f012 fe86 	bl	801a4ac <strcat>
		strcat(packet,",");
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f103 0408 	add.w	r4, r3, #8
 80077a6:	4620      	mov	r0, r4
 80077a8:	f7f8 fd62 	bl	8000270 <strlen>
 80077ac:	4603      	mov	r3, r0
 80077ae:	4423      	add	r3, r4
 80077b0:	493d      	ldr	r1, [pc, #244]	; (80078a8 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 80077b2:	461a      	mov	r2, r3
 80077b4:	460b      	mov	r3, r1
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_AX)!=senorsList.end())
 80077ba:	2309      	movs	r3, #9
 80077bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80077be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80077c2:	4619      	mov	r1, r3
 80077c4:	6838      	ldr	r0, [r7, #0]
 80077c6:	f7fd fa9d 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80077ca:	4603      	mov	r3, r0
 80077cc:	657b      	str	r3, [r7, #84]	; 0x54
 80077ce:	6838      	ldr	r0, [r7, #0]
 80077d0:	f7fd fab1 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80077d4:	4603      	mov	r3, r0
 80077d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077d8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80077dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80077e0:	4611      	mov	r1, r2
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fd fab4 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d020      	beq.n	8007830 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x350>
	{
		strcat(packet,toCharArray(max_ax_dt));
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f103 0408 	add.w	r4, r3, #8
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	1d1a      	adds	r2, r3, #4
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 80077fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007802:	ee17 1a90 	vmov	r1, s15
 8007806:	4610      	mov	r0, r2
 8007808:	f7fc faa0 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 800780c:	4603      	mov	r3, r0
 800780e:	4619      	mov	r1, r3
 8007810:	4620      	mov	r0, r4
 8007812:	f012 fe4b 	bl	801a4ac <strcat>
		strcat(packet,",");
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f103 0408 	add.w	r4, r3, #8
 800781c:	4620      	mov	r0, r4
 800781e:	f7f8 fd27 	bl	8000270 <strlen>
 8007822:	4603      	mov	r3, r0
 8007824:	4423      	add	r3, r4
 8007826:	4920      	ldr	r1, [pc, #128]	; (80078a8 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 8007828:	461a      	mov	r2, r3
 800782a:	460b      	mov	r3, r1
 800782c:	881b      	ldrh	r3, [r3, #0]
 800782e:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_AY)!=senorsList.end())
 8007830:	230a      	movs	r3, #10
 8007832:	667b      	str	r3, [r7, #100]	; 0x64
 8007834:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007838:	4619      	mov	r1, r3
 800783a:	6838      	ldr	r0, [r7, #0]
 800783c:	f7fd fa62 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8007840:	4603      	mov	r3, r0
 8007842:	663b      	str	r3, [r7, #96]	; 0x60
 8007844:	6838      	ldr	r0, [r7, #0]
 8007846:	f7fd fa76 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 800784a:	4603      	mov	r3, r0
 800784c:	66bb      	str	r3, [r7, #104]	; 0x68
 800784e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007852:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007856:	4611      	mov	r1, r2
 8007858:	4618      	mov	r0, r3
 800785a:	f7fd fa79 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d023      	beq.n	80078ac <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3cc>
	{
		strcat(packet,toCharArray(max_ay_dt));
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f103 0408 	add.w	r4, r3, #8
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	1d1a      	adds	r2, r3, #4
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8007874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007878:	ee17 1a90 	vmov	r1, s15
 800787c:	4610      	mov	r0, r2
 800787e:	f7fc fa65 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 8007882:	4603      	mov	r3, r0
 8007884:	4619      	mov	r1, r3
 8007886:	4620      	mov	r0, r4
 8007888:	f012 fe10 	bl	801a4ac <strcat>
		strcat(packet,",");
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f103 0408 	add.w	r4, r3, #8
 8007892:	4620      	mov	r0, r4
 8007894:	f7f8 fcec 	bl	8000270 <strlen>
 8007898:	4603      	mov	r3, r0
 800789a:	4423      	add	r3, r4
 800789c:	4902      	ldr	r1, [pc, #8]	; (80078a8 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3c8>)
 800789e:	461a      	mov	r2, r3
 80078a0:	460b      	mov	r3, r1
 80078a2:	881b      	ldrh	r3, [r3, #0]
 80078a4:	8013      	strh	r3, [r2, #0]
 80078a6:	e001      	b.n	80078ac <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x3cc>
 80078a8:	0801d01c 	.word	0x0801d01c
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_AZ)!=senorsList.end())
 80078ac:	230b      	movs	r3, #11
 80078ae:	673b      	str	r3, [r7, #112]	; 0x70
 80078b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80078b4:	4619      	mov	r1, r3
 80078b6:	6838      	ldr	r0, [r7, #0]
 80078b8:	f7fd fa24 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80078bc:	4603      	mov	r3, r0
 80078be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078c0:	6838      	ldr	r0, [r7, #0]
 80078c2:	f7fd fa38 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80078c6:	4603      	mov	r3, r0
 80078c8:	677b      	str	r3, [r7, #116]	; 0x74
 80078ca:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80078ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80078d2:	4611      	mov	r1, r2
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fd fa3b 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d020      	beq.n	8007922 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x442>
	{
		strcat(packet,toCharArray(max_az_dt));
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f103 0408 	add.w	r4, r3, #8
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	1d1a      	adds	r2, r3, #4
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 80078f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078f4:	ee17 1a90 	vmov	r1, s15
 80078f8:	4610      	mov	r0, r2
 80078fa:	f7fc fa27 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 80078fe:	4603      	mov	r3, r0
 8007900:	4619      	mov	r1, r3
 8007902:	4620      	mov	r0, r4
 8007904:	f012 fdd2 	bl	801a4ac <strcat>
		strcat(packet,",");
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f103 0408 	add.w	r4, r3, #8
 800790e:	4620      	mov	r0, r4
 8007910:	f7f8 fcae 	bl	8000270 <strlen>
 8007914:	4603      	mov	r3, r0
 8007916:	4423      	add	r3, r4
 8007918:	4905      	ldr	r1, [pc, #20]	; (8007930 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x450>)
 800791a:	461a      	mov	r2, r3
 800791c:	460b      	mov	r3, r1
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	3308      	adds	r3, #8
}
 8007926:	4618      	mov	r0, r3
 8007928:	377c      	adds	r7, #124	; 0x7c
 800792a:	46bd      	mov	sp, r7
 800792c:	bd90      	pop	{r4, r7, pc}
 800792e:	bf00      	nop
 8007930:	0801d01c 	.word	0x0801d01c

08007934 <_ZThn4_N9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	void checkCriticalState();
	void checkCrashState();
public:

	void SPI_write(uint8_t reg,uint8_t data);
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 8007934:	f1a0 0004 	sub.w	r0, r0, #4
 8007938:	f7ff bdd2 	b.w	80074e0 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>

0800793c <_ZN9ICM42688P6updateEv>:

void ICM42688P::update()
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b086      	sub	sp, #24
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
	uint8_t axL = SPI_read(ACCEL_DATA_X0);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3304      	adds	r3, #4
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2120      	movs	r1, #32
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	4798      	blx	r3
 8007952:	4603      	mov	r3, r0
 8007954:	75fb      	strb	r3, [r7, #23]
	uint8_t axH = SPI_read(ACCEL_DATA_X1);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3304      	adds	r3, #4
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	211f      	movs	r1, #31
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	4798      	blx	r3
 8007964:	4603      	mov	r3, r0
 8007966:	75bb      	strb	r3, [r7, #22]
	uint8_t ayL = SPI_read(ACCEL_DATA_Y0);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3304      	adds	r3, #4
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2122      	movs	r1, #34	; 0x22
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	4798      	blx	r3
 8007976:	4603      	mov	r3, r0
 8007978:	757b      	strb	r3, [r7, #21]
	uint8_t ayH = SPI_read(ACCEL_DATA_Y1);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3304      	adds	r3, #4
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2121      	movs	r1, #33	; 0x21
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	4798      	blx	r3
 8007988:	4603      	mov	r3, r0
 800798a:	753b      	strb	r3, [r7, #20]
	uint8_t azL = SPI_read(ACCEL_DATA_Z0);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3304      	adds	r3, #4
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2124      	movs	r1, #36	; 0x24
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	4798      	blx	r3
 800799a:	4603      	mov	r3, r0
 800799c:	74fb      	strb	r3, [r7, #19]
	uint8_t azH = SPI_read(ACCEL_DATA_Z1);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3304      	adds	r3, #4
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2123      	movs	r1, #35	; 0x23
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	4798      	blx	r3
 80079ac:	4603      	mov	r3, r0
 80079ae:	74bb      	strb	r3, [r7, #18]

	uint8_t gxL = SPI_read(GYRO_DATA_X0);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3304      	adds	r3, #4
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2126      	movs	r1, #38	; 0x26
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	4798      	blx	r3
 80079be:	4603      	mov	r3, r0
 80079c0:	747b      	strb	r3, [r7, #17]
	uint8_t gxH = SPI_read(GYRO_DATA_X1);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3304      	adds	r3, #4
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2125      	movs	r1, #37	; 0x25
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	4798      	blx	r3
 80079d0:	4603      	mov	r3, r0
 80079d2:	743b      	strb	r3, [r7, #16]
	uint8_t gyL = SPI_read(GYRO_DATA_Y0);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3304      	adds	r3, #4
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2128      	movs	r1, #40	; 0x28
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	4798      	blx	r3
 80079e2:	4603      	mov	r3, r0
 80079e4:	73fb      	strb	r3, [r7, #15]
	uint8_t gyH = SPI_read(GYRO_DATA_Y1);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3304      	adds	r3, #4
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2127      	movs	r1, #39	; 0x27
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	4798      	blx	r3
 80079f4:	4603      	mov	r3, r0
 80079f6:	73bb      	strb	r3, [r7, #14]
	uint8_t gzL = SPI_read(GYRO_DATA_Z0);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3304      	adds	r3, #4
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	212a      	movs	r1, #42	; 0x2a
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3
 8007a06:	4603      	mov	r3, r0
 8007a08:	737b      	strb	r3, [r7, #13]
	uint8_t gzH = SPI_read(GYRO_DATA_Z1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2129      	movs	r1, #41	; 0x29
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	4798      	blx	r3
 8007a18:	4603      	mov	r3, r0
 8007a1a:	733b      	strb	r3, [r7, #12]

	uint8_t tempL = SPI_read(TEMP_DATA0);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3304      	adds	r3, #4
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	211e      	movs	r1, #30
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	4798      	blx	r3
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	72fb      	strb	r3, [r7, #11]
	uint8_t tempH = SPI_read(TEMP_DATA1);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3304      	adds	r3, #4
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	211d      	movs	r1, #29
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	4798      	blx	r3
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	72bb      	strb	r3, [r7, #10]

	this->raw_ax = (static_cast<float>(((int16_t)(((int16_t)axH<<8) | axL))) - this->axOffset);// * this->axScale;
 8007a40:	7dbb      	ldrb	r3, [r7, #22]
 8007a42:	021b      	lsls	r3, r3, #8
 8007a44:	b21a      	sxth	r2, r3
 8007a46:	7dfb      	ldrb	r3, [r7, #23]
 8007a48:	b21b      	sxth	r3, r3
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	b21b      	sxth	r3, r3
 8007a4e:	ee07 3a90 	vmov	s15, r3
 8007a52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8007a5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	this->raw_ay = (static_cast<float>(((int16_t)(((int16_t)ayH<<8) | ayL))) - this->ayOffset);// * this->ayScale;
 8007a66:	7d3b      	ldrb	r3, [r7, #20]
 8007a68:	021b      	lsls	r3, r3, #8
 8007a6a:	b21a      	sxth	r2, r3
 8007a6c:	7d7b      	ldrb	r3, [r7, #21]
 8007a6e:	b21b      	sxth	r3, r3
 8007a70:	4313      	orrs	r3, r2
 8007a72:	b21b      	sxth	r3, r3
 8007a74:	ee07 3a90 	vmov	s15, r3
 8007a78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8007a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	this->raw_az = (static_cast<float>(((int16_t)(((int16_t)azH<<8) | azL))) - this->azOffset);// * this->azScale;
 8007a8c:	7cbb      	ldrb	r3, [r7, #18]
 8007a8e:	021b      	lsls	r3, r3, #8
 8007a90:	b21a      	sxth	r2, r3
 8007a92:	7cfb      	ldrb	r3, [r7, #19]
 8007a94:	b21b      	sxth	r3, r3
 8007a96:	4313      	orrs	r3, r2
 8007a98:	b21b      	sxth	r3, r3
 8007a9a:	ee07 3a90 	vmov	s15, r3
 8007a9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8007aa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->raw_gx = static_cast<float>((int16_t)(((int16_t)gxH<<8) | gxL)) - this->gxDrift;
 8007ab2:	7c3b      	ldrb	r3, [r7, #16]
 8007ab4:	021b      	lsls	r3, r3, #8
 8007ab6:	b21a      	sxth	r2, r3
 8007ab8:	7c7b      	ldrb	r3, [r7, #17]
 8007aba:	b21b      	sxth	r3, r3
 8007abc:	4313      	orrs	r3, r2
 8007abe:	b21b      	sxth	r3, r3
 8007ac0:	ee07 3a90 	vmov	s15, r3
 8007ac4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8007ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	this->raw_gy = static_cast<float>((int16_t)(((int16_t)gyH<<8) | gyL)) - this->gyDrift;
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	021b      	lsls	r3, r3, #8
 8007adc:	b21a      	sxth	r2, r3
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
 8007ae0:	b21b      	sxth	r3, r3
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	b21b      	sxth	r3, r3
 8007ae6:	ee07 3a90 	vmov	s15, r3
 8007aea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8007af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	this->raw_gz = static_cast<float>((int16_t)(((int16_t)gzH<<8) | gzL)) - this->gzDrift;
 8007afe:	7b3b      	ldrb	r3, [r7, #12]
 8007b00:	021b      	lsls	r3, r3, #8
 8007b02:	b21a      	sxth	r2, r3
 8007b04:	7b7b      	ldrb	r3, [r7, #13]
 8007b06:	b21b      	sxth	r3, r3
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	b21b      	sxth	r3, r3
 8007b0c:	ee07 3a90 	vmov	s15, r3
 8007b10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8007b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	this->temp = static_cast<float>((int16_t)(((int16_t)tempH<<8) | tempL)) / 132.48F + 25.0F;
 8007b24:	7abb      	ldrb	r3, [r7, #10]
 8007b26:	021b      	lsls	r3, r3, #8
 8007b28:	b21a      	sxth	r2, r3
 8007b2a:	7afb      	ldrb	r3, [r7, #11]
 8007b2c:	b21b      	sxth	r3, r3
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	b21b      	sxth	r3, r3
 8007b32:	ee07 3a90 	vmov	s15, r3
 8007b36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b3a:	eddf 6a13 	vldr	s13, [pc, #76]	; 8007b88 <_ZN9ICM42688P6updateEv+0x24c>
 8007b3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007b42:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8007b46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

	this->toEuler();
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f915 	bl	8007d80 <_ZN9ICM42688P7toEulerEv>

	this->checkCrashState();
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f84a 	bl	8007bf0 <_ZN9ICM42688P15checkCrashStateEv>
	this->checkCriticalState();
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f815 	bl	8007b8c <_ZN9ICM42688P18checkCriticalStateEv>

	this->_rollPID.update();
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b66:	4618      	mov	r0, r3
 8007b68:	f001 f96c 	bl	8008e44 <_ZN11PID_Control6updateEv>
	this->_pitchPID.update();
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b70:	4618      	mov	r0, r3
 8007b72:	f001 f967 	bl	8008e44 <_ZN11PID_Control6updateEv>
	this->_yawPID.update();
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f001 f962 	bl	8008e44 <_ZN11PID_Control6updateEv>
}
 8007b80:	bf00      	nop
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	43047ae1 	.word	0x43047ae1

08007b8c <_ZN9ICM42688P18checkCriticalStateEv>:

void ICM42688P::checkCriticalState()
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
	if (abs(this->euler_x) >=criticalStateAngleThreshold || abs(this->euler_y) >=criticalStateAngleThreshold)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8007b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8007b9e:	f7ff fa6c 	bl	800707a <_ZSt3absf>
 8007ba2:	eef0 7a40 	vmov.f32	s15, s0
 8007ba6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb2:	da0f      	bge.n	8007bd4 <_ZN9ICM42688P18checkCriticalStateEv+0x48>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8007bba:	eeb0 0a67 	vmov.f32	s0, s15
 8007bbe:	f7ff fa5c 	bl	800707a <_ZSt3absf>
 8007bc2:	eef0 7a40 	vmov.f32	s15, s0
 8007bc6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007bca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd2:	db01      	blt.n	8007bd8 <_ZN9ICM42688P18checkCriticalStateEv+0x4c>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e000      	b.n	8007bda <_ZN9ICM42688P18checkCriticalStateEv+0x4e>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <_ZN9ICM42688P18checkCriticalStateEv+0x5a>
	{
		this->criticalState = true;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
	}
}
 8007be6:	bf00      	nop
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
	...

08007bf0 <_ZN9ICM42688P15checkCrashStateEv>:

void ICM42688P::checkCrashState()
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
	if (this->prev_raw_ax == 0.0F)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8007bfe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c06:	d105      	bne.n	8007c14 <_ZN9ICM42688P15checkCrashStateEv+0x24>
		this->prev_raw_ax = this->raw_ax;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	if (this->prev_raw_ay == 0.0F)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8007c1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c22:	d105      	bne.n	8007c30 <_ZN9ICM42688P15checkCrashStateEv+0x40>
		this->prev_raw_ay = this->raw_ay;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	if (this->prev_raw_az == 0.0F)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8007c36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c3e:	d105      	bne.n	8007c4c <_ZN9ICM42688P15checkCrashStateEv+0x5c>
		this->prev_raw_az = this->raw_az;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	float ax_dt = fabs(this->raw_ax-this->prev_raw_ax);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8007c58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8007c60:	f7ff fa2f 	bl	80070c2 <_ZSt4fabsf>
 8007c64:	ed87 0a05 	vstr	s0, [r7, #20]
	float ay_dt = fabs(this->raw_ay-this->prev_raw_ay);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8007c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c78:	eeb0 0a67 	vmov.f32	s0, s15
 8007c7c:	f7ff fa21 	bl	80070c2 <_ZSt4fabsf>
 8007c80:	ed87 0a04 	vstr	s0, [r7, #16]
	float az_dt = fabs(this->raw_az-this->prev_raw_az);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8007c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c94:	eeb0 0a67 	vmov.f32	s0, s15
 8007c98:	f7ff fa13 	bl	80070c2 <_ZSt4fabsf>
 8007c9c:	ed87 0a03 	vstr	s0, [r7, #12]

	if (ax_dt > constCrashAccDtThreshold ||
 8007ca0:	edd7 7a05 	vldr	s15, [r7, #20]
 8007ca4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8007d60 <_ZN9ICM42688P15checkCrashStateEv+0x170>
 8007ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cb0:	dc11      	bgt.n	8007cd6 <_ZN9ICM42688P15checkCrashStateEv+0xe6>
 8007cb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8007cb6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8007d60 <_ZN9ICM42688P15checkCrashStateEv+0x170>
 8007cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cc2:	dc08      	bgt.n	8007cd6 <_ZN9ICM42688P15checkCrashStateEv+0xe6>
			ay_dt > constCrashAccDtThreshold ||
 8007cc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8007cc8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8007d60 <_ZN9ICM42688P15checkCrashStateEv+0x170>
 8007ccc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cd4:	dd03      	ble.n	8007cde <_ZN9ICM42688P15checkCrashStateEv+0xee>
			az_dt > constCrashAccDtThreshold)
	{
		this->crashState = true;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	}

	if (ax_dt > max_ax_dt)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8007ce4:	ed97 7a05 	vldr	s14, [r7, #20]
 8007ce8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf0:	dd03      	ble.n	8007cfa <_ZN9ICM42688P15checkCrashStateEv+0x10a>
		max_ax_dt = ax_dt;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	if (ay_dt > max_ay_dt)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8007d00:	ed97 7a04 	vldr	s14, [r7, #16]
 8007d04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d0c:	dd03      	ble.n	8007d16 <_ZN9ICM42688P15checkCrashStateEv+0x126>
		max_ay_dt = ay_dt;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	if (az_dt > max_az_dt)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8007d1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8007d20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d28:	dd03      	ble.n	8007d32 <_ZN9ICM42688P15checkCrashStateEv+0x142>
		max_az_dt = az_dt;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	this->prev_raw_ax=this->raw_ax;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	this->prev_raw_ay=this->raw_ay;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	this->prev_raw_az=this->raw_az;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
}
 8007d56:	bf00      	nop
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	471c4000 	.word	0x471c4000

08007d64 <_ZN9ICM42688P23isCriticalStateDetectedEv>:

bool ICM42688P::isCriticalStateDetected()
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
	return this->criticalState;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
	...

08007d80 <_ZN9ICM42688P7toEulerEv>:
	return this->crashState;
}


void ICM42688P::toEuler()
{
 8007d80:	b5b0      	push	{r4, r5, r7, lr}
 8007d82:	ed2d 8b02 	vpush	{d8}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
	this->gx = this->gx + this->raw_gx*(DT/GYRO_FULLSCALE);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	edd3 5a16 	vldr	s11, [r3, #88]	; 0x58
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8007da4:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007da8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	this->gy = this->gy + this->raw_gy*(DT/GYRO_FULLSCALE);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	edd3 5a16 	vldr	s11, [r3, #88]	; 0x58
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8007dce:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007dd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	this->gz = this->gz + this->raw_gz*(DT/GYRO_FULLSCALE);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	edd3 5a16 	vldr	s11, [r3, #88]	; 0x58
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8007df8:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

	this->euler_x = this->euler_x + this->raw_gx*(DT/GYRO_FULLSCALE);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	edd3 5a16 	vldr	s11, [r3, #88]	; 0x58
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8007e22:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007e26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->euler_y = this->euler_y + this->raw_gy*(DT/GYRO_FULLSCALE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	edd3 5a16 	vldr	s11, [r3, #88]	; 0x58
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8007e4c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007e50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->euler_z = this->euler_z + this->raw_gz*(DT/GYRO_FULLSCALE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	edd3 5a16 	vldr	s11, [r3, #88]	; 0x58
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8007e76:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0

	this->ax = atan2(this->raw_ax,sqrt(this->raw_ay*this->raw_ay + this->raw_az*this->raw_az))*RADIANS_TO_DEGREES;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	ed93 8a26 	vldr	s16, [r3, #152]	; 0x98
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8007e9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8007eaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8007eb6:	f7ff f914 	bl	80070e2 <_ZSt4sqrtf>
 8007eba:	eef0 7a40 	vmov.f32	s15, s0
 8007ebe:	eef0 0a67 	vmov.f32	s1, s15
 8007ec2:	eeb0 0a48 	vmov.f32	s0, s16
 8007ec6:	f7ff f8e8 	bl	800709a <_ZSt5atan2ff>
 8007eca:	eeb0 7a40 	vmov.f32	s14, s0
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	this->ay = atan2(this->raw_ay,sqrt(this->raw_ax*this->raw_ax + this->raw_az*this->raw_az))*RADIANS_TO_DEGREES;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	ed93 8a27 	vldr	s16, [r3, #156]	; 0x9c
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8007ef0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8007f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f08:	eeb0 0a67 	vmov.f32	s0, s15
 8007f0c:	f7ff f8e9 	bl	80070e2 <_ZSt4sqrtf>
 8007f10:	eef0 7a40 	vmov.f32	s15, s0
 8007f14:	eef0 0a67 	vmov.f32	s1, s15
 8007f18:	eeb0 0a48 	vmov.f32	s0, s16
 8007f1c:	f7ff f8bd 	bl	800709a <_ZSt5atan2ff>
 8007f20:	eeb0 7a40 	vmov.f32	s14, s0
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	this->az = atan2(this->raw_az,sqrt(this->raw_ax*this->raw_ax + this->raw_ay*this->raw_ay))*RADIANS_TO_DEGREES -90.0F;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	ed93 8a28 	vldr	s16, [r3, #160]	; 0xa0
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8007f46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8007f56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8007f62:	f7ff f8be 	bl	80070e2 <_ZSt4sqrtf>
 8007f66:	eef0 7a40 	vmov.f32	s15, s0
 8007f6a:	eef0 0a67 	vmov.f32	s1, s15
 8007f6e:	eeb0 0a48 	vmov.f32	s0, s16
 8007f72:	f7ff f892 	bl	800709a <_ZSt5atan2ff>
 8007f76:	eeb0 7a40 	vmov.f32	s14, s0
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f84:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008058 <_ZN9ICM42688P7toEulerEv+0x2d8>
 8007f88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

	this->euler_x = this->euler_x*0.9999+this->ay*0.0001;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7f8 fad5 	bl	8000548 <__aeabi_f2d>
 8007f9e:	a32a      	add	r3, pc, #168	; (adr r3, 8008048 <_ZN9ICM42688P7toEulerEv+0x2c8>)
 8007fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa4:	f7f8 fb28 	bl	80005f8 <__aeabi_dmul>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4614      	mov	r4, r2
 8007fae:	461d      	mov	r5, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7f8 fac6 	bl	8000548 <__aeabi_f2d>
 8007fbc:	a324      	add	r3, pc, #144	; (adr r3, 8008050 <_ZN9ICM42688P7toEulerEv+0x2d0>)
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	f7f8 fb19 	bl	80005f8 <__aeabi_dmul>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4620      	mov	r0, r4
 8007fcc:	4629      	mov	r1, r5
 8007fce:	f7f8 f95d 	bl	800028c <__adddf3>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	4619      	mov	r1, r3
 8007fda:	f7f8 fe05 	bl	8000be8 <__aeabi_d2f>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	this->euler_y = this->euler_y*0.9999-this->ax*0.0001;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7f8 faab 	bl	8000548 <__aeabi_f2d>
 8007ff2:	a315      	add	r3, pc, #84	; (adr r3, 8008048 <_ZN9ICM42688P7toEulerEv+0x2c8>)
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	f7f8 fafe 	bl	80005f8 <__aeabi_dmul>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	4614      	mov	r4, r2
 8008002:	461d      	mov	r5, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800800a:	4618      	mov	r0, r3
 800800c:	f7f8 fa9c 	bl	8000548 <__aeabi_f2d>
 8008010:	a30f      	add	r3, pc, #60	; (adr r3, 8008050 <_ZN9ICM42688P7toEulerEv+0x2d0>)
 8008012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008016:	f7f8 faef 	bl	80005f8 <__aeabi_dmul>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	4620      	mov	r0, r4
 8008020:	4629      	mov	r1, r5
 8008022:	f7f8 f931 	bl	8000288 <__aeabi_dsub>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	4610      	mov	r0, r2
 800802c:	4619      	mov	r1, r3
 800802e:	f7f8 fddb 	bl	8000be8 <__aeabi_d2f>
 8008032:	4602      	mov	r2, r0
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 800803a:	bf00      	nop
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	ecbd 8b02 	vpop	{d8}
 8008044:	bdb0      	pop	{r4, r5, r7, pc}
 8008046:	bf00      	nop
 8008048:	48e8a71e 	.word	0x48e8a71e
 800804c:	3fefff2e 	.word	0x3fefff2e
 8008050:	eb1c432d 	.word	0xeb1c432d
 8008054:	3f1a36e2 	.word	0x3f1a36e2
 8008058:	42b40000 	.word	0x42b40000

0800805c <_ZN9ICM42688P9getEulerXEv>:
	this->computeAccOffset(count);
	this->buzz->beep(200U,100U,1U);
}

float ICM42688P::getEulerX()
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
	return this->euler_x;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800806a:	ee07 3a90 	vmov	s15, r3
}
 800806e:	eeb0 0a67 	vmov.f32	s0, s15
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <_ZN9ICM42688P12getEulerXrefEv>:

float& ICM42688P::getEulerXref()
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
	return this->euler_x;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	33a8      	adds	r3, #168	; 0xa8
}
 8008088:	4618      	mov	r0, r3
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <_ZN9ICM42688P9getEulerYEv>:

float ICM42688P::getEulerY()
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
	return this->euler_y;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80080a2:	ee07 3a90 	vmov	s15, r3
}
 80080a6:	eeb0 0a67 	vmov.f32	s0, s15
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <_ZN9ICM42688P12getEulerYrefEv>:

float& ICM42688P::getEulerYref()
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
	return this->euler_y;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	33ac      	adds	r3, #172	; 0xac
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <_ZN9ICM42688P12getEulerZrefEv>:
{
	return this->euler_z;
}

float& ICM42688P::getEulerZref()
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
	return this->euler_z;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	33b0      	adds	r3, #176	; 0xb0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <_ZN9ICM42688P9SPI_writeEhh>:
{
	return this->SPI_read(INT_STATUS);
}

void ICM42688P::SPI_write(uint8_t reg,uint8_t data)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	460b      	mov	r3, r1
 80080ee:	70fb      	strb	r3, [r7, #3]
 80080f0:	4613      	mov	r3, r2
 80080f2:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(ICM_CS_PORT,ICM_CS_PIN,GPIO_PIN_RESET);
 80080f4:	2200      	movs	r2, #0
 80080f6:	2120      	movs	r1, #32
 80080f8:	480d      	ldr	r0, [pc, #52]	; (8008130 <_ZN9ICM42688P9SPI_writeEhh+0x4c>)
 80080fa:	f002 ff13 	bl	800af24 <HAL_GPIO_WritePin>
	this->spiTxBuff[0] = reg;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	78fa      	ldrb	r2, [r7, #3]
 8008102:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	this->spiTxBuff[1] = data;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	78ba      	ldrb	r2, [r7, #2]
 800810a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	3370      	adds	r3, #112	; 0x70
 8008116:	2202      	movs	r2, #2
 8008118:	4619      	mov	r1, r3
 800811a:	f006 f8bb 	bl	800e294 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(ICM_CS_PORT,ICM_CS_PIN,GPIO_PIN_SET);
 800811e:	2201      	movs	r2, #1
 8008120:	2120      	movs	r1, #32
 8008122:	4803      	ldr	r0, [pc, #12]	; (8008130 <_ZN9ICM42688P9SPI_writeEhh+0x4c>)
 8008124:	f002 fefe 	bl	800af24 <HAL_GPIO_WritePin>
}
 8008128:	bf00      	nop
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	40020800 	.word	0x40020800

08008134 <_ZN9ICM42688P8SPI_readEh>:

uint8_t ICM42688P::SPI_read(uint8_t reg)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	460b      	mov	r3, r1
 800813e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(ICM_CS_PORT, ICM_CS_PIN, GPIO_PIN_RESET);
 8008140:	2200      	movs	r2, #0
 8008142:	2120      	movs	r1, #32
 8008144:	4812      	ldr	r0, [pc, #72]	; (8008190 <_ZN9ICM42688P8SPI_readEh+0x5c>)
 8008146:	f002 feed 	bl	800af24 <HAL_GPIO_WritePin>
	this->spiTxBuff[0]=reg|0x80;
 800814a:	78fb      	ldrb	r3, [r7, #3]
 800814c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008150:	b2da      	uxtb	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

	HAL_SPI_Transmit_DMA(this->spi_port, (uint8_t*)spiTxBuff, 1);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	3370      	adds	r3, #112	; 0x70
 8008160:	2201      	movs	r2, #1
 8008162:	4619      	mov	r1, r3
 8008164:	f006 f896 	bl	800e294 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(this->spi_port, (uint8_t*)spiRxBuff, 1);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3372      	adds	r3, #114	; 0x72
 8008170:	2201      	movs	r2, #1
 8008172:	4619      	mov	r1, r3
 8008174:	f006 f944 	bl	800e400 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(ICM_CS_PORT, ICM_CS_PIN, GPIO_PIN_SET);
 8008178:	2201      	movs	r2, #1
 800817a:	2120      	movs	r1, #32
 800817c:	4804      	ldr	r0, [pc, #16]	; (8008190 <_ZN9ICM42688P8SPI_readEh+0x5c>)
 800817e:	f002 fed1 	bl	800af24 <HAL_GPIO_WritePin>

	return this->spiRxBuff[0];
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
}
 8008188:	4618      	mov	r0, r3
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	40020800 	.word	0x40020800

08008194 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef>:
 *      Author: Asus
 */

#include "LIS3MDLTR.hpp"

LIS3MDLTR::LIS3MDLTR(SPI_HandleTypeDef *spi_port):
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
	,z_mag {0}
	,z_angle {0}
	,x_raw {0}
	,y_raw {0}
	,z_raw {0}
	,TEMP_val {0}
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fb fe05 	bl	8003db0 <_ZN8SPI_ConnC1Ev>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3304      	adds	r3, #4
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7f9 f890 	bl	80012d0 <_ZN15PrintableSensorC1Ev>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	3340      	adds	r3, #64	; 0x40
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7fb fe0b 	bl	8003dd0 <_ZN12CallsCounterC1Ev>
 80081ba:	4a1f      	ldr	r2, [pc, #124]	; (8008238 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef+0xa4>)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	601a      	str	r2, [r3, #0]
 80081c0:	4a1e      	ldr	r2, [pc, #120]	; (800823c <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef+0xa8>)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	605a      	str	r2, [r3, #4]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	651a      	str	r2, [r3, #80]	; 0x50
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f04f 0200 	mov.w	r2, #0
 80081f2:	659a      	str	r2, [r3, #88]	; 0x58
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f04f 0200 	mov.w	r2, #0
 80081fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f04f 0200 	mov.w	r2, #0
 8008202:	661a      	str	r2, [r3, #96]	; 0x60
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f04f 0200 	mov.w	r2, #0
 800820a:	665a      	str	r2, [r3, #100]	; 0x64
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
{
}
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4618      	mov	r0, r3
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	0801d37c 	.word	0x0801d37c
 800823c:	0801d390 	.word	0x0801d390

08008240 <_ZN9LIS3MDLTR6updateEv>:
{
	return SPI_read(LIS_WHO_AM_I);
}

void LIS3MDLTR::update()
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
	uint8_t x_high=SPI_read(OUT_X_H);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	3304      	adds	r3, #4
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2129      	movs	r1, #41	; 0x29
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	4798      	blx	r3
 8008256:	4603      	mov	r3, r0
 8008258:	73fb      	strb	r3, [r7, #15]
	uint8_t x_low=SPI_read(OUT_X_L);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3304      	adds	r3, #4
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2128      	movs	r1, #40	; 0x28
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	4798      	blx	r3
 8008268:	4603      	mov	r3, r0
 800826a:	73bb      	strb	r3, [r7, #14]
	uint8_t y_high=SPI_read(OUT_Y_H);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3304      	adds	r3, #4
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	212b      	movs	r1, #43	; 0x2b
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	4798      	blx	r3
 800827a:	4603      	mov	r3, r0
 800827c:	737b      	strb	r3, [r7, #13]
	uint8_t y_low=SPI_read(OUT_Y_L);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3304      	adds	r3, #4
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	212a      	movs	r1, #42	; 0x2a
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	4798      	blx	r3
 800828c:	4603      	mov	r3, r0
 800828e:	733b      	strb	r3, [r7, #12]
	uint8_t z_high=SPI_read(OUT_Z_H);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3304      	adds	r3, #4
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	212d      	movs	r1, #45	; 0x2d
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	4798      	blx	r3
 800829e:	4603      	mov	r3, r0
 80082a0:	72fb      	strb	r3, [r7, #11]
	uint8_t z_low=SPI_read(OUT_Z_L);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3304      	adds	r3, #4
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	212c      	movs	r1, #44	; 0x2c
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	4798      	blx	r3
 80082b0:	4603      	mov	r3, r0
 80082b2:	72bb      	strb	r3, [r7, #10]
	uint8_t temp_high=SPI_read(TEMP_OUT_H);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3304      	adds	r3, #4
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	212f      	movs	r1, #47	; 0x2f
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	4798      	blx	r3
 80082c2:	4603      	mov	r3, r0
 80082c4:	727b      	strb	r3, [r7, #9]
	uint8_t temp_low=SPI_read(TEMP_OUT_L);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3304      	adds	r3, #4
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	212e      	movs	r1, #46	; 0x2e
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	4798      	blx	r3
 80082d4:	4603      	mov	r3, r0
 80082d6:	723b      	strb	r3, [r7, #8]

	x_raw = ((int16_t)x_high)<<8 | x_low;
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
 80082da:	021b      	lsls	r3, r3, #8
 80082dc:	b21a      	sxth	r2, r3
 80082de:	7bbb      	ldrb	r3, [r7, #14]
 80082e0:	b21b      	sxth	r3, r3
 80082e2:	4313      	orrs	r3, r2
 80082e4:	b21a      	sxth	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	y_raw = ((int16_t)y_high)<<8 | y_low;
 80082ec:	7b7b      	ldrb	r3, [r7, #13]
 80082ee:	021b      	lsls	r3, r3, #8
 80082f0:	b21a      	sxth	r2, r3
 80082f2:	7b3b      	ldrb	r3, [r7, #12]
 80082f4:	b21b      	sxth	r3, r3
 80082f6:	4313      	orrs	r3, r2
 80082f8:	b21a      	sxth	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	z_raw = ((int16_t)z_high)<<8 | z_low;
 8008300:	7afb      	ldrb	r3, [r7, #11]
 8008302:	021b      	lsls	r3, r3, #8
 8008304:	b21a      	sxth	r2, r3
 8008306:	7abb      	ldrb	r3, [r7, #10]
 8008308:	b21b      	sxth	r3, r3
 800830a:	4313      	orrs	r3, r2
 800830c:	b21a      	sxth	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	TEMP_val = ((int16_t)temp_high)<<8 | temp_low;
 8008314:	7a7b      	ldrb	r3, [r7, #9]
 8008316:	021b      	lsls	r3, r3, #8
 8008318:	b21a      	sxth	r2, r3
 800831a:	7a3b      	ldrb	r3, [r7, #8]
 800831c:	b21b      	sxth	r3, r3
 800831e:	4313      	orrs	r3, r2
 8008320:	b21a      	sxth	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
 8008328:	bf00      	nop
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* LIS3MDLTR::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8008330:	b590      	push	{r4, r7, lr}
 8008332:	b08d      	sub	sp, #52	; 0x34
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	3308      	adds	r3, #8
 800833e:	2200      	movs	r2, #0
 8008340:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_X)!=senorsList.end())
 8008342:	2310      	movs	r3, #16
 8008344:	613b      	str	r3, [r7, #16]
 8008346:	f107 0310 	add.w	r3, r7, #16
 800834a:	4619      	mov	r1, r3
 800834c:	6838      	ldr	r0, [r7, #0]
 800834e:	f7fc fcd9 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008352:	4603      	mov	r3, r0
 8008354:	60fb      	str	r3, [r7, #12]
 8008356:	6838      	ldr	r0, [r7, #0]
 8008358:	f7fc fced 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 800835c:	4603      	mov	r3, r0
 800835e:	617b      	str	r3, [r7, #20]
 8008360:	f107 0214 	add.w	r2, r7, #20
 8008364:	f107 030c 	add.w	r3, r7, #12
 8008368:	4611      	mov	r1, r2
 800836a:	4618      	mov	r0, r3
 800836c:	f7fc fcf0 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d01d      	beq.n	80083b2 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x82>
	{
		strcat(packet,toCharArray(x_raw));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f103 0408 	add.w	r4, r3, #8
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	1d1a      	adds	r2, r3, #4
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8008386:	4619      	mov	r1, r3
 8008388:	4610      	mov	r0, r2
 800838a:	f7fb fcdf 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 800838e:	4603      	mov	r3, r0
 8008390:	4619      	mov	r1, r3
 8008392:	4620      	mov	r0, r4
 8008394:	f012 f88a 	bl	801a4ac <strcat>
		strcat(packet,",");
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f103 0408 	add.w	r4, r3, #8
 800839e:	4620      	mov	r0, r4
 80083a0:	f7f7 ff66 	bl	8000270 <strlen>
 80083a4:	4603      	mov	r3, r0
 80083a6:	4423      	add	r3, r4
 80083a8:	493d      	ldr	r1, [pc, #244]	; (80084a0 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 80083aa:	461a      	mov	r2, r3
 80083ac:	460b      	mov	r3, r1
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_Y)!=senorsList.end())
 80083b2:	2311      	movs	r3, #17
 80083b4:	61fb      	str	r3, [r7, #28]
 80083b6:	f107 031c 	add.w	r3, r7, #28
 80083ba:	4619      	mov	r1, r3
 80083bc:	6838      	ldr	r0, [r7, #0]
 80083be:	f7fc fca1 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80083c2:	4603      	mov	r3, r0
 80083c4:	61bb      	str	r3, [r7, #24]
 80083c6:	6838      	ldr	r0, [r7, #0]
 80083c8:	f7fc fcb5 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80083cc:	4603      	mov	r3, r0
 80083ce:	623b      	str	r3, [r7, #32]
 80083d0:	f107 0220 	add.w	r2, r7, #32
 80083d4:	f107 0318 	add.w	r3, r7, #24
 80083d8:	4611      	mov	r1, r2
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fc fcb8 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d01d      	beq.n	8008422 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0xf2>
	{
		strcat(packet,toCharArray(y_raw));
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f103 0408 	add.w	r4, r3, #8
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	1d1a      	adds	r2, r3, #4
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 80083f6:	4619      	mov	r1, r3
 80083f8:	4610      	mov	r0, r2
 80083fa:	f7fb fca7 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 80083fe:	4603      	mov	r3, r0
 8008400:	4619      	mov	r1, r3
 8008402:	4620      	mov	r0, r4
 8008404:	f012 f852 	bl	801a4ac <strcat>
		strcat(packet,",");
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f103 0408 	add.w	r4, r3, #8
 800840e:	4620      	mov	r0, r4
 8008410:	f7f7 ff2e 	bl	8000270 <strlen>
 8008414:	4603      	mov	r3, r0
 8008416:	4423      	add	r3, r4
 8008418:	4921      	ldr	r1, [pc, #132]	; (80084a0 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 800841a:	461a      	mov	r2, r3
 800841c:	460b      	mov	r3, r1
 800841e:	881b      	ldrh	r3, [r3, #0]
 8008420:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_Z)!=senorsList.end())
 8008422:	2312      	movs	r3, #18
 8008424:	62bb      	str	r3, [r7, #40]	; 0x28
 8008426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800842a:	4619      	mov	r1, r3
 800842c:	6838      	ldr	r0, [r7, #0]
 800842e:	f7fc fc69 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008432:	4603      	mov	r3, r0
 8008434:	627b      	str	r3, [r7, #36]	; 0x24
 8008436:	6838      	ldr	r0, [r7, #0]
 8008438:	f7fc fc7d 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 800843c:	4603      	mov	r3, r0
 800843e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008440:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008448:	4611      	mov	r1, r2
 800844a:	4618      	mov	r0, r3
 800844c:	f7fc fc80 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d01d      	beq.n	8008492 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x162>
	{
		strcat(packet,toCharArray(z_raw));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f103 0408 	add.w	r4, r3, #8
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	1d1a      	adds	r2, r3, #4
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8008466:	4619      	mov	r1, r3
 8008468:	4610      	mov	r0, r2
 800846a:	f7fb fc6f 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 800846e:	4603      	mov	r3, r0
 8008470:	4619      	mov	r1, r3
 8008472:	4620      	mov	r0, r4
 8008474:	f012 f81a 	bl	801a4ac <strcat>
		strcat(packet,",");
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f103 0408 	add.w	r4, r3, #8
 800847e:	4620      	mov	r0, r4
 8008480:	f7f7 fef6 	bl	8000270 <strlen>
 8008484:	4603      	mov	r3, r0
 8008486:	4423      	add	r3, r4
 8008488:	4905      	ldr	r1, [pc, #20]	; (80084a0 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 800848a:	461a      	mov	r2, r3
 800848c:	460b      	mov	r3, r1
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	8013      	strh	r3, [r2, #0]
	}


	return packet;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	3308      	adds	r3, #8
}
 8008496:	4618      	mov	r0, r3
 8008498:	3734      	adds	r7, #52	; 0x34
 800849a:	46bd      	mov	sp, r7
 800849c:	bd90      	pop	{r4, r7, pc}
 800849e:	bf00      	nop
 80084a0:	0801d020 	.word	0x0801d020

080084a4 <_ZThn4_N9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	void update();
	int16_t getX();
	int16_t getY();
	int16_t getZ();
	int16_t getTEMP();
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 80084a4:	f1a0 0004 	sub.w	r0, r0, #4
 80084a8:	f7ff bf42 	b.w	8008330 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>

080084ac <_ZN9LIS3MDLTR11defaultInitEv>:

bool LIS3MDLTR::defaultInit()
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
	  this->SPI_write(CTRL_REG1,0b11111100);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	22fc      	movs	r2, #252	; 0xfc
 80084bc:	2120      	movs	r1, #32
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	4798      	blx	r3
	  uint8_t ctrl1 = this->SPI_read(CTRL_REG1);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3304      	adds	r3, #4
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2120      	movs	r1, #32
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	4798      	blx	r3
 80084d0:	4603      	mov	r3, r0
 80084d2:	73fb      	strb	r3, [r7, #15]

	  SPI_write(CTRL_REG2,0b01100000);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2260      	movs	r2, #96	; 0x60
 80084dc:	2121      	movs	r1, #33	; 0x21
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	4798      	blx	r3
	  uint8_t ctrl2 = SPI_read(CTRL_REG2);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3304      	adds	r3, #4
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2121      	movs	r1, #33	; 0x21
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	4798      	blx	r3
 80084f0:	4603      	mov	r3, r0
 80084f2:	73bb      	strb	r3, [r7, #14]

	  SPI_write(CTRL_REG3,0b00000000);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2200      	movs	r2, #0
 80084fc:	2122      	movs	r1, #34	; 0x22
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	4798      	blx	r3
	  uint8_t ctrl3 = SPI_read(CTRL_REG3);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	3304      	adds	r3, #4
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2122      	movs	r1, #34	; 0x22
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	4798      	blx	r3
 8008510:	4603      	mov	r3, r0
 8008512:	737b      	strb	r3, [r7, #13]

	  SPI_write(CTRL_REG4,0b00001100);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	220c      	movs	r2, #12
 800851c:	2123      	movs	r1, #35	; 0x23
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	4798      	blx	r3
	  uint8_t ctrl4 = SPI_read(CTRL_REG4);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3304      	adds	r3, #4
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2123      	movs	r1, #35	; 0x23
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	4798      	blx	r3
 8008530:	4603      	mov	r3, r0
 8008532:	733b      	strb	r3, [r7, #12]

	  SPI_write(CTRL_REG5,0b00000000);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2200      	movs	r2, #0
 800853c:	2124      	movs	r1, #36	; 0x24
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	4798      	blx	r3
	  uint8_t ctrl5 = SPI_read(CTRL_REG5);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3304      	adds	r3, #4
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2124      	movs	r1, #36	; 0x24
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	4798      	blx	r3
 8008550:	4603      	mov	r3, r0
 8008552:	72fb      	strb	r3, [r7, #11]
		return false;

	if (!initAndCheck(CTRL_REG5,0b00000000,10))
		return false;*/

	return true;
 8008554:	2301      	movs	r3, #1
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <_ZN9LIS3MDLTR9SPI_writeEhh>:
	}
	return false;
}

void LIS3MDLTR::SPI_write(uint8_t reg,uint8_t data)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	460b      	mov	r3, r1
 800856a:	70fb      	strb	r3, [r7, #3]
 800856c:	4613      	mov	r3, r2
 800856e:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(LIS_CS_PORT,LIS_CS_PIN,GPIO_PIN_RESET);
 8008570:	2200      	movs	r2, #0
 8008572:	2120      	movs	r1, #32
 8008574:	480f      	ldr	r0, [pc, #60]	; (80085b4 <_ZN9LIS3MDLTR9SPI_writeEhh+0x54>)
 8008576:	f002 fcd5 	bl	800af24 <HAL_GPIO_WritePin>
	spiTxBuff[0] = reg & 0x7f;
 800857a:	78fb      	ldrb	r3, [r7, #3]
 800857c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008580:	b2da      	uxtb	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	spiTxBuff[1] = data;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	78ba      	ldrb	r2, [r7, #2]
 800858c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	3354      	adds	r3, #84	; 0x54
 8008598:	2202      	movs	r2, #2
 800859a:	4619      	mov	r1, r3
 800859c:	f005 fe7a 	bl	800e294 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(LIS_CS_PORT,LIS_CS_PIN,GPIO_PIN_SET);
 80085a0:	2201      	movs	r2, #1
 80085a2:	2120      	movs	r1, #32
 80085a4:	4803      	ldr	r0, [pc, #12]	; (80085b4 <_ZN9LIS3MDLTR9SPI_writeEhh+0x54>)
 80085a6:	f002 fcbd 	bl	800af24 <HAL_GPIO_WritePin>
}
 80085aa:	bf00      	nop
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	40020000 	.word	0x40020000

080085b8 <_ZN9LIS3MDLTR8SPI_readEh>:

uint8_t LIS3MDLTR::SPI_read(uint8_t reg)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	460b      	mov	r3, r1
 80085c2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(LIS_CS_PORT, LIS_CS_PIN, GPIO_PIN_RESET);
 80085c4:	2200      	movs	r2, #0
 80085c6:	2120      	movs	r1, #32
 80085c8:	4812      	ldr	r0, [pc, #72]	; (8008614 <_ZN9LIS3MDLTR8SPI_readEh+0x5c>)
 80085ca:	f002 fcab 	bl	800af24 <HAL_GPIO_WritePin>
	spiTxBuff[0]=(reg & 0x3f)|0x80|0x40;
 80085ce:	78fb      	ldrb	r3, [r7, #3]
 80085d0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff, 1);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	3354      	adds	r3, #84	; 0x54
 80085e4:	2201      	movs	r2, #1
 80085e6:	4619      	mov	r1, r3
 80085e8:	f005 fe54 	bl	800e294 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(spi_port, (uint8_t*)spiRxBuff, 1);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3356      	adds	r3, #86	; 0x56
 80085f4:	2201      	movs	r2, #1
 80085f6:	4619      	mov	r1, r3
 80085f8:	f005 ff02 	bl	800e400 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(LIS_CS_PORT, LIS_CS_PIN, GPIO_PIN_SET);
 80085fc:	2201      	movs	r2, #1
 80085fe:	2120      	movs	r1, #32
 8008600:	4804      	ldr	r0, [pc, #16]	; (8008614 <_ZN9LIS3MDLTR8SPI_readEh+0x5c>)
 8008602:	f002 fc8f 	bl	800af24 <HAL_GPIO_WritePin>

	return spiRxBuff[0];
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
}
 800860c:	4618      	mov	r0, r3
 800860e:	3708      	adds	r7, #8
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	40020000 	.word	0x40020000

08008618 <_ZN7Timeout19resetTimeoutCounterEv>:
	void resetTimeoutCounter()
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
		timeout_counter=0;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	705a      	strb	r2, [r3, #1]
	}
 8008626:	bf00      	nop
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
	...

08008634 <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>:
 */

#include "MB1043.hpp"
#include <stdlib.h>

MB1043::MB1043(
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
 8008640:	70fb      	strb	r3, [r7, #3]
	uart_port {uart_port}
	,uart_port_dma {uart_port_dma}
	,wrongDataReceived {false}
	,rx_buff {}
	,distance_str {}
	,distance {}
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	3336      	adds	r3, #54	; 0x36
 8008646:	4618      	mov	r0, r3
 8008648:	f7fc ff23 	bl	8005492 <_ZN7TimeoutC1Ev>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	4618      	mov	r0, r3
 8008650:	f7f8 fe3e 	bl	80012d0 <_ZN15PrintableSensorC1Ev>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	3340      	adds	r3, #64	; 0x40
 8008658:	4618      	mov	r0, r3
 800865a:	f7fb fbb9 	bl	8003dd0 <_ZN12CallsCounterC1Ev>
 800865e:	4a17      	ldr	r2, [pc, #92]	; (80086bc <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh+0x88>)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	220a      	movs	r2, #10
 8008668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	655a      	str	r2, [r3, #84]	; 0x54
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	659a      	str	r2, [r3, #88]	; 0x58
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	335d      	adds	r3, #93	; 0x5d
 8008684:	2200      	movs	r2, #0
 8008686:	601a      	str	r2, [r3, #0]
 8008688:	605a      	str	r2, [r3, #4]
 800868a:	609a      	str	r2, [r3, #8]
 800868c:	60da      	str	r2, [r3, #12]
 800868e:	821a      	strh	r2, [r3, #16]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	336f      	adds	r3, #111	; 0x6f
 8008694:	2200      	movs	r2, #0
 8008696:	601a      	str	r2, [r3, #0]
 8008698:	f8c3 2003 	str.w	r2, [r3, #3]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f04f 0200 	mov.w	r2, #0
 80086a2:	679a      	str	r2, [r3, #120]	; 0x78
{
	setTimeoutValue(timeout);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	3336      	adds	r3, #54	; 0x36
 80086a8:	78fa      	ldrb	r2, [r7, #3]
 80086aa:	4611      	mov	r1, r2
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fc fee1 	bl	8005474 <_ZN7Timeout15setTimeoutValueEh>
}
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	0801d39c 	.word	0x0801d39c

080086c0 <_ZN6MB10435beginEv>:

void MB1043::begin()
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	335d      	adds	r3, #93	; 0x5d
 80086d0:	2209      	movs	r2, #9
 80086d2:	4619      	mov	r1, r3
 80086d4:	f007 fc16 	bl	800ff04 <HAL_UART_Receive_DMA>
}
 80086d8:	bf00      	nop
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <_ZN6MB10436updateEv>:

void MB1043::update()
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->rx_buff[8]==this->END_BIT);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80086f4:	429a      	cmp	r2, r3
 80086f6:	bf0c      	ite	eq
 80086f8:	2301      	moveq	r3, #1
 80086fa:	2300      	movne	r3, #0
 80086fc:	73bb      	strb	r3, [r7, #14]

	if (isPacketOk)
 80086fe:	7bbb      	ldrb	r3, [r7, #14]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d03d      	beq.n	8008780 <_ZN6MB10436updateEv+0xa0>
	{
		distance_str[0]=rx_buff[0];
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
		distance_str[1]=rx_buff[1],
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		distance_str[2]=rx_buff[2],
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 205f 	ldrb.w	r2, [r3, #95]	; 0x5f
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		distance_str[3]=rx_buff[3];
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		distance_str[4]=rx_buff[4];
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		distance_str[5]=rx_buff[5];
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		distance_str[6]=rx_buff[6];
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75

		distance = atof(distance_str);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	336f      	adds	r3, #111	; 0x6f
 800875c:	4618      	mov	r0, r3
 800875e:	f011 fd03 	bl	801a168 <atof>
 8008762:	ec53 2b10 	vmov	r2, r3, d0
 8008766:	4610      	mov	r0, r2
 8008768:	4619      	mov	r1, r3
 800876a:	f7f8 fa3d 	bl	8000be8 <__aeabi_d2f>
 800876e:	4602      	mov	r2, r0
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	679a      	str	r2, [r3, #120]	; 0x78

		resetTimeoutCounter();
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	3336      	adds	r3, #54	; 0x36
 8008778:	4618      	mov	r0, r3
 800877a:	f7ff ff4d 	bl	8008618 <_ZN7Timeout19resetTimeoutCounterEv>
 800877e:	e028      	b.n	80087d2 <_ZN6MB10436updateEv+0xf2>
	}
	else if (this->wrongDataReceived==false)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008786:	2b00      	cmp	r3, #0
 8008788:	d123      	bne.n	80087d2 <_ZN6MB10436updateEv+0xf2>
	{
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 800878a:	2300      	movs	r3, #0
 800878c:	73fb      	strb	r3, [r7, #15]
 800878e:	7bfb      	ldrb	r3, [r7, #15]
 8008790:	2b07      	cmp	r3, #7
 8008792:	d81e      	bhi.n	80087d2 <_ZN6MB10436updateEv+0xf2>
		{
			if ((this->rx_buff[iter]==this->END_BIT))
 8008794:	7bfb      	ldrb	r3, [r7, #15]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	4413      	add	r3, r2
 800879a:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d110      	bne.n	80087ca <_ZN6MB10436updateEv+0xea>
			{
				HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length+iter+1);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f103 015d 	add.w	r1, r3, #93	; 0x5d
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	330a      	adds	r3, #10
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	461a      	mov	r2, r3
 80087bc:	f007 fba2 	bl	800ff04 <HAL_UART_Receive_DMA>
				this->wrongDataReceived = true;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				return;
 80087c8:	e01e      	b.n	8008808 <_ZN6MB10436updateEv+0x128>
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
 80087cc:	3301      	adds	r3, #1
 80087ce:	73fb      	strb	r3, [r7, #15]
 80087d0:	e7dd      	b.n	800878e <_ZN6MB10436updateEv+0xae>
			}
		}
	}

	if (this->wrongDataReceived == true)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d103      	bne.n	80087e4 <_ZN6MB10436updateEv+0x104>
		this->wrongDataReceived = false;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	335d      	adds	r3, #93	; 0x5d
 80087ec:	2209      	movs	r2, #9
 80087ee:	4619      	mov	r1, r3
 80087f0:	f007 fb88 	bl	800ff04 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->uart_port_dma, DMA_IT_HT);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f022 0208 	bic.w	r2, r2, #8
 8008806:	601a      	str	r2, [r3, #0]
}
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
	...

08008810 <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* MB1043::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8008810:	b590      	push	{r4, r7, lr}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	3304      	adds	r3, #4
 800881e:	2200      	movs	r2, #0
 8008820:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::SONAR_DISTANCE)!=senorsList.end())
 8008822:	2313      	movs	r3, #19
 8008824:	613b      	str	r3, [r7, #16]
 8008826:	f107 0310 	add.w	r3, r7, #16
 800882a:	4619      	mov	r1, r3
 800882c:	6838      	ldr	r0, [r7, #0]
 800882e:	f7fc fa69 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008832:	4603      	mov	r3, r0
 8008834:	60fb      	str	r3, [r7, #12]
 8008836:	6838      	ldr	r0, [r7, #0]
 8008838:	f7fc fa7d 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 800883c:	4603      	mov	r3, r0
 800883e:	617b      	str	r3, [r7, #20]
 8008840:	f107 0214 	add.w	r2, r7, #20
 8008844:	f107 030c 	add.w	r3, r7, #12
 8008848:	4611      	mov	r1, r2
 800884a:	4618      	mov	r0, r3
 800884c:	f7fc fa80 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d01d      	beq.n	8008892 <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x82>
	{
		strcat(packet,toCharArray(distance));
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	1d1c      	adds	r4, r3, #4
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8008862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008866:	ee17 1a90 	vmov	r1, s15
 800886a:	4610      	mov	r0, r2
 800886c:	f7fb fa6e 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 8008870:	4603      	mov	r3, r0
 8008872:	4619      	mov	r1, r3
 8008874:	4620      	mov	r0, r4
 8008876:	f011 fe19 	bl	801a4ac <strcat>
		strcat(packet,",");
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	1d1c      	adds	r4, r3, #4
 800887e:	4620      	mov	r0, r4
 8008880:	f7f7 fcf6 	bl	8000270 <strlen>
 8008884:	4603      	mov	r3, r0
 8008886:	4423      	add	r3, r4
 8008888:	4905      	ldr	r1, [pc, #20]	; (80088a0 <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x90>)
 800888a:	461a      	mov	r2, r3
 800888c:	460b      	mov	r3, r1
 800888e:	881b      	ldrh	r3, [r3, #0]
 8008890:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	3304      	adds	r3, #4
}
 8008896:	4618      	mov	r0, r3
 8008898:	371c      	adds	r7, #28
 800889a:	46bd      	mov	sp, r7
 800889c:	bd90      	pop	{r4, r7, pc}
 800889e:	bf00      	nop
 80088a0:	0801d024 	.word	0x0801d024

080088a4 <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688PR7VL53L0XR11PID_ControlS9_>:
 *      Author: Asus
 */

#include "PMW3901UY.hpp"

PMW3901UY::PMW3901UY(
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
 80088b0:	70fb      	strb	r3, [r7, #3]
	,x_cm_pos {0}
	,y_cm_pos {0}
	,target_x {0}
	,target_y {0}
	,lastAngleX {0}
	,lastAngleY {0}
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3336      	adds	r3, #54	; 0x36
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fc fdeb 	bl	8005492 <_ZN7TimeoutC1Ev>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	4618      	mov	r0, r3
 80088c0:	f7f8 fd06 	bl	80012d0 <_ZN15PrintableSensorC1Ev>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	3340      	adds	r3, #64	; 0x40
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7fb fa81 	bl	8003dd0 <_ZN12CallsCounterC1Ev>
 80088ce:	4a36      	ldr	r2, [pc, #216]	; (80089a8 <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688PR7VL53L0XR11PID_ControlS9_+0x104>)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	22fe      	movs	r2, #254	; 0xfe
 80088d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2204      	movs	r2, #4
 80088e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	22aa      	movs	r2, #170	; 0xaa
 80088e8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	655a      	str	r2, [r3, #84]	; 0x54
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	659a      	str	r2, [r3, #88]	; 0x58
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	69ba      	ldr	r2, [r7, #24]
 80088fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	69fa      	ldr	r2, [r7, #28]
 8008902:	661a      	str	r2, [r3, #96]	; 0x60
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6a3a      	ldr	r2, [r7, #32]
 8008908:	665a      	str	r2, [r3, #100]	; 0x64
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800890e:	669a      	str	r2, [r3, #104]	; 0x68
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	336c      	adds	r3, #108	; 0x6c
 8008914:	2200      	movs	r2, #0
 8008916:	601a      	str	r2, [r3, #0]
 8008918:	605a      	str	r2, [r3, #4]
 800891a:	609a      	str	r2, [r3, #8]
 800891c:	60da      	str	r2, [r3, #12]
 800891e:	821a      	strh	r2, [r3, #16]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f04f 0200 	mov.w	r2, #0
 8008946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f04f 0200 	mov.w	r2, #0
 8008950:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f04f 0200 	mov.w	r2, #0
 800895a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f04f 0200 	mov.w	r2, #0
 8008964:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f04f 0200 	mov.w	r2, #0
 800896e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f04f 0200 	mov.w	r2, #0
 8008978:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f04f 0200 	mov.w	r2, #0
 8008982:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f04f 0200 	mov.w	r2, #0
 800898c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
{
	setTimeoutValue(timeout);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	3336      	adds	r3, #54	; 0x36
 8008994:	78fa      	ldrb	r2, [r7, #3]
 8008996:	4611      	mov	r1, r2
 8008998:	4618      	mov	r0, r3
 800899a:	f7fc fd6b 	bl	8005474 <_ZN7Timeout15setTimeoutValueEh>
}
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	0801d3a8 	.word	0x0801d3a8

080089ac <_ZN9PMW3901UY5beginEv>:

void PMW3901UY::begin()
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (uart_port, rx_buff, packet_length);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	336c      	adds	r3, #108	; 0x6c
 80089bc:	2209      	movs	r2, #9
 80089be:	4619      	mov	r1, r3
 80089c0:	f007 faa0 	bl	800ff04 <HAL_UART_Receive_DMA>
}
 80089c4:	bf00      	nop
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <_ZN9PMW3901UY6updateEv>:

void PMW3901UY::update()
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->rx_buff[6]==this->END_BIT);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80089e0:	429a      	cmp	r2, r3
 80089e2:	bf0c      	ite	eq
 80089e4:	2301      	moveq	r3, #1
 80089e6:	2300      	movne	r3, #0
 80089e8:	73bb      	strb	r3, [r7, #14]

	if(isPacketOk)
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d052      	beq.n	8008a96 <_ZN9PMW3901UY6updateEv+0xca>
	{
		this->flow_x = (int16_t)(this->rx_buff[3]<<8 | this->rx_buff[2]);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80089f6:	021b      	lsls	r3, r3, #8
 80089f8:	b21a      	sxth	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8008a00:	b21b      	sxth	r3, r3
 8008a02:	4313      	orrs	r3, r2
 8008a04:	b21a      	sxth	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		this->flow_y = (int16_t)(this->rx_buff[5]<<8 | this->rx_buff[4]);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8008a12:	021b      	lsls	r3, r3, #8
 8008a14:	b21a      	sxth	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008a1c:	b21b      	sxth	r3, r3
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	b21a      	sxth	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		this->quality = this->rx_buff[7];
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

		this->x_pos += this->flow_x;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8008a40:	ee07 3a90 	vmov	s15, r3
 8008a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		this->y_pos += this->flow_y;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8008a5e:	ee07 3a90 	vmov	s15, r3
 8008a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		this->process();
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f857 	bl	8008b24 <_ZN9PMW3901UY7processEv>

		this->_pidX.update();
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 f9e2 	bl	8008e44 <_ZN11PID_Control6updateEv>
		this->_pidY.update();
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 f9dd 	bl	8008e44 <_ZN11PID_Control6updateEv>

		this->resetTimeoutCounter();
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3336      	adds	r3, #54	; 0x36
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7ff fdc2 	bl	8008618 <_ZN7Timeout19resetTimeoutCounterEv>
 8008a94:	e028      	b.n	8008ae8 <_ZN9PMW3901UY6updateEv+0x11c>
	}
	else if (this->wrongDataReceived==false)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d123      	bne.n	8008ae8 <_ZN9PMW3901UY6updateEv+0x11c>
	{
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73fb      	strb	r3, [r7, #15]
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
 8008aa6:	2b07      	cmp	r3, #7
 8008aa8:	d81e      	bhi.n	8008ae8 <_ZN9PMW3901UY6updateEv+0x11c>
		{
			if ((this->rx_buff[iter]==this->END_BIT))
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d110      	bne.n	8008ae0 <_ZN9PMW3901UY6updateEv+0x114>
			{
				HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length+iter+1);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	330a      	adds	r3, #10
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	f007 fa17 	bl	800ff04 <HAL_UART_Receive_DMA>
				this->wrongDataReceived = true;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
				return;
 8008ade:	e01e      	b.n	8008b1e <_ZN9PMW3901UY6updateEv+0x152>
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	73fb      	strb	r3, [r7, #15]
 8008ae6:	e7dd      	b.n	8008aa4 <_ZN9PMW3901UY6updateEv+0xd8>
			}
		}
	}

	if (this->wrongDataReceived == true)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d103      	bne.n	8008afa <_ZN9PMW3901UY6updateEv+0x12e>
		this->wrongDataReceived = false;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	336c      	adds	r3, #108	; 0x6c
 8008b02:	2209      	movs	r2, #9
 8008b04:	4619      	mov	r1, r3
 8008b06:	f007 f9fd 	bl	800ff04 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->uart_port_dma, DMA_IT_HT);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f022 0208 	bic.w	r2, r2, #8
 8008b1c:	601a      	str	r2, [r3, #0]
}
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <_ZN9PMW3901UY7processEv>:

void PMW3901UY::process()
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
	float cpi = (this->_vl53.getAltitudeM() / 11.914F) * 2.54F;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 fc5f 	bl	80093f4 <_ZN7VL53L0X12getAltitudeMEv>
 8008b36:	eeb0 7a40 	vmov.f32	s14, s0
 8008b3a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008bcc <_ZN9PMW3901UY7processEv+0xa8>
 8008b3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008b42:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8008bd0 <_ZN9PMW3901UY7processEv+0xac>
 8008b46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b4a:	edc7 7a03 	vstr	s15, [r7, #12]
	this->x_cm_pos = this->x_cm_pos + static_cast<float>(this->flow_x)*cpi;// - this->lastAngleY * cpi * 10.0F;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8008b5a:	ee07 3a90 	vmov	s15, r3
 8008b5e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008b62:	edd7 7a03 	vldr	s15, [r7, #12]
 8008b66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	this->y_cm_pos = this->y_cm_pos + static_cast<float>(this->flow_y)*cpi;// - this->lastAngleX * cpi * 10.0F;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8008b80:	ee07 3a90 	vmov	s15, r3
 8008b84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008b88:	edd7 7a03 	vldr	s15, [r7, #12]
 8008b8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

	lastAngleX = this->_icm.getEulerX();
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7ff fa5c 	bl	800805c <_ZN9ICM42688P9getEulerXEv>
 8008ba4:	eef0 7a40 	vmov.f32	s15, s0
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	lastAngleY = this->_icm.getEulerY();
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7ff fa6e 	bl	8008094 <_ZN9ICM42688P9getEulerYEv>
 8008bb8:	eef0 7a40 	vmov.f32	s15, s0
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
}
 8008bc2:	bf00      	nop
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	413e9fbe 	.word	0x413e9fbe
 8008bd0:	40228f5c 	.word	0x40228f5c

08008bd4 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* PMW3901UY::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8008bd4:	b590      	push	{r4, r7, lr}
 8008bd6:	b093      	sub	sp, #76	; 0x4c
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	3304      	adds	r3, #4
 8008be2:	2200      	movs	r2, #0
 8008be4:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_POS_X)!=senorsList.end())
 8008be6:	2315      	movs	r3, #21
 8008be8:	613b      	str	r3, [r7, #16]
 8008bea:	f107 0310 	add.w	r3, r7, #16
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6838      	ldr	r0, [r7, #0]
 8008bf2:	f7fc f887 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	60fb      	str	r3, [r7, #12]
 8008bfa:	6838      	ldr	r0, [r7, #0]
 8008bfc:	f7fc f89b 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008c00:	4603      	mov	r3, r0
 8008c02:	617b      	str	r3, [r7, #20]
 8008c04:	f107 0214 	add.w	r2, r7, #20
 8008c08:	f107 030c 	add.w	r3, r7, #12
 8008c0c:	4611      	mov	r1, r2
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fc f89e 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d01d      	beq.n	8008c56 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x82>
	{
		strcat(packet,toCharArray(x_cm_pos));
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	1d1c      	adds	r4, r3, #4
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8008c26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c2a:	ee17 1a90 	vmov	r1, s15
 8008c2e:	4610      	mov	r0, r2
 8008c30:	f7fb f88c 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 8008c34:	4603      	mov	r3, r0
 8008c36:	4619      	mov	r1, r3
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f011 fc37 	bl	801a4ac <strcat>
		strcat(packet,",");
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	1d1c      	adds	r4, r3, #4
 8008c42:	4620      	mov	r0, r4
 8008c44:	f7f7 fb14 	bl	8000270 <strlen>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	4423      	add	r3, r4
 8008c4c:	4970      	ldr	r1, [pc, #448]	; (8008e10 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x23c>)
 8008c4e:	461a      	mov	r2, r3
 8008c50:	460b      	mov	r3, r1
 8008c52:	881b      	ldrh	r3, [r3, #0]
 8008c54:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_POS_Y)!=senorsList.end())
 8008c56:	2316      	movs	r3, #22
 8008c58:	61fb      	str	r3, [r7, #28]
 8008c5a:	f107 031c 	add.w	r3, r7, #28
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6838      	ldr	r0, [r7, #0]
 8008c62:	f7fc f84f 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008c66:	4603      	mov	r3, r0
 8008c68:	61bb      	str	r3, [r7, #24]
 8008c6a:	6838      	ldr	r0, [r7, #0]
 8008c6c:	f7fc f863 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008c70:	4603      	mov	r3, r0
 8008c72:	623b      	str	r3, [r7, #32]
 8008c74:	f107 0220 	add.w	r2, r7, #32
 8008c78:	f107 0318 	add.w	r3, r7, #24
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fc f866 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d01d      	beq.n	8008cc6 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0xf2>
	{
		strcat(packet,toCharArray(y_cm_pos));
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	1d1c      	adds	r4, r3, #4
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8008c96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c9a:	ee17 1a90 	vmov	r1, s15
 8008c9e:	4610      	mov	r0, r2
 8008ca0:	f7fb f854 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f011 fbff 	bl	801a4ac <strcat>
		strcat(packet,",");
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	1d1c      	adds	r4, r3, #4
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f7f7 fadc 	bl	8000270 <strlen>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	4423      	add	r3, r4
 8008cbc:	4954      	ldr	r1, [pc, #336]	; (8008e10 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x23c>)
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	881b      	ldrh	r3, [r3, #0]
 8008cc4:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_FLOW_X)!=senorsList.end())
 8008cc6:	2317      	movs	r3, #23
 8008cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6838      	ldr	r0, [r7, #0]
 8008cd2:	f7fc f817 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8008cda:	6838      	ldr	r0, [r7, #0]
 8008cdc:	f7fc f82b 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ce4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cec:	4611      	mov	r1, r2
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fc f82e 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d01a      	beq.n	8008d30 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x15c>
	{
		strcat(packet,toCharArray(flow_x));
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	1d1c      	adds	r4, r3, #4
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8008d06:	4619      	mov	r1, r3
 8008d08:	4610      	mov	r0, r2
 8008d0a:	f7fb f81f 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	4619      	mov	r1, r3
 8008d12:	4620      	mov	r0, r4
 8008d14:	f011 fbca 	bl	801a4ac <strcat>
		strcat(packet,",");
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	1d1c      	adds	r4, r3, #4
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f7f7 faa7 	bl	8000270 <strlen>
 8008d22:	4603      	mov	r3, r0
 8008d24:	4423      	add	r3, r4
 8008d26:	493a      	ldr	r1, [pc, #232]	; (8008e10 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x23c>)
 8008d28:	461a      	mov	r2, r3
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	881b      	ldrh	r3, [r3, #0]
 8008d2e:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_FLOW_Y)!=senorsList.end())
 8008d30:	2318      	movs	r3, #24
 8008d32:	637b      	str	r3, [r7, #52]	; 0x34
 8008d34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6838      	ldr	r0, [r7, #0]
 8008d3c:	f7fb ffe2 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008d40:	4603      	mov	r3, r0
 8008d42:	633b      	str	r3, [r7, #48]	; 0x30
 8008d44:	6838      	ldr	r0, [r7, #0]
 8008d46:	f7fb fff6 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d4e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008d52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d56:	4611      	mov	r1, r2
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fb fff9 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d01a      	beq.n	8008d9a <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1c6>
	{
		strcat(packet,toCharArray(flow_y));
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	1d1c      	adds	r4, r3, #4
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8008d70:	4619      	mov	r1, r3
 8008d72:	4610      	mov	r0, r2
 8008d74:	f7fa ffea 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	f011 fb95 	bl	801a4ac <strcat>
		strcat(packet,",");
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	1d1c      	adds	r4, r3, #4
 8008d86:	4620      	mov	r0, r4
 8008d88:	f7f7 fa72 	bl	8000270 <strlen>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	4423      	add	r3, r4
 8008d90:	491f      	ldr	r1, [pc, #124]	; (8008e10 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x23c>)
 8008d92:	461a      	mov	r2, r3
 8008d94:	460b      	mov	r3, r1
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_QUALITY)!=senorsList.end())
 8008d9a:	2319      	movs	r3, #25
 8008d9c:	643b      	str	r3, [r7, #64]	; 0x40
 8008d9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008da2:	4619      	mov	r1, r3
 8008da4:	6838      	ldr	r0, [r7, #0]
 8008da6:	f7fb ffad 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008daa:	4603      	mov	r3, r0
 8008dac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dae:	6838      	ldr	r0, [r7, #0]
 8008db0:	f7fb ffc1 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008db4:	4603      	mov	r3, r0
 8008db6:	647b      	str	r3, [r7, #68]	; 0x44
 8008db8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008dbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fb ffc4 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d01a      	beq.n	8008e04 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x230>
	{
		strcat(packet,toCharArray(quality));
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	1d1c      	adds	r4, r3, #4
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008dda:	4619      	mov	r1, r3
 8008ddc:	4610      	mov	r0, r2
 8008dde:	f7fa ffb5 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 8008de2:	4603      	mov	r3, r0
 8008de4:	4619      	mov	r1, r3
 8008de6:	4620      	mov	r0, r4
 8008de8:	f011 fb60 	bl	801a4ac <strcat>
		strcat(packet,",");
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	1d1c      	adds	r4, r3, #4
 8008df0:	4620      	mov	r0, r4
 8008df2:	f7f7 fa3d 	bl	8000270 <strlen>
 8008df6:	4603      	mov	r3, r0
 8008df8:	4423      	add	r3, r4
 8008dfa:	4905      	ldr	r1, [pc, #20]	; (8008e10 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x23c>)
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	460b      	mov	r3, r1
 8008e00:	881b      	ldrh	r3, [r3, #0]
 8008e02:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3304      	adds	r3, #4
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	374c      	adds	r7, #76	; 0x4c
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd90      	pop	{r4, r7, pc}
 8008e10:	0801d028 	.word	0x0801d028

08008e14 <_ZN9PMW3901UY7getXposEv>:
{
	return quality;
}

float& PMW3901UY::getXpos()
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
	return x_cm_pos;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	3390      	adds	r3, #144	; 0x90
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <_ZN9PMW3901UY7getYposEv>:

float& PMW3901UY::getYpos()
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
	return y_cm_pos;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	3394      	adds	r3, #148	; 0x94
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <_ZN11PID_Control6updateEv>:
 */

#include "PID_Control.hpp"

void PID_Control::update()
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
	this->error = this->reference - this->signal;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	ed93 7a00 	vldr	s14, [r3]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	edd3 7a00 	vldr	s15, [r3]
 8008e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	edc3 7a05 	vstr	s15, [r3, #20]

	this->pid_p = this->error;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	695a      	ldr	r2, [r3, #20]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	61da      	str	r2, [r3, #28]
	this->pid_i = this->pid_i + this->error;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	ed93 7a08 	vldr	s14, [r3, #32]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	edd3 7a05 	vldr	s15, [r3, #20]
 8008e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	edc3 7a08 	vstr	s15, [r3, #32]
	this->pid_d = -(this->signal-this->last_signal);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	ed93 7a00 	vldr	s14, [r3]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8008e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e96:	eef1 7a67 	vneg.f32	s15, s15
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	this->last_signal = this->signal;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	619a      	str	r2, [r3, #24]

	this->pid =  this->Kp * this->pid_p + this->Ki * this->pid_i + this->Kd * this->pid_d;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	ed93 7a02 	vldr	s14, [r3, #8]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	edd3 7a07 	vldr	s15, [r3, #28]
 8008eb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	edd3 6a03 	vldr	s13, [r3, #12]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	edd3 7a08 	vldr	s15, [r3, #32]
 8008ec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008eca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	edd3 6a04 	vldr	s13, [r3, #16]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <_ZN11PID_Control6getOutEv>:

float PID_Control::getOut()
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
	return this->pid;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f00:	ee07 3a90 	vmov	s15, r3
}
 8008f04:	eeb0 0a67 	vmov.f32	s0, s15
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr

08008f12 <_ZSt17__size_to_integeri>:
      std::__fill_a(__first, __last, __value);
    }

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
 8008f12:	b480      	push	{r7}
 8008f14:	b083      	sub	sp, #12
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <_ZN14MPC_ControllerC1Ev>:
};

class MPC_Controller
{
public:
	MPC_Controller()
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
	{
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f04f 0200 	mov.w	r2, #0
 8008f36:	601a      	str	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f04f 0200 	mov.w	r2, #0
 8008f3e:	605a      	str	r2, [r3, #4]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f04f 0200 	mov.w	r2, #0
 8008f46:	609a      	str	r2, [r3, #8]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f04f 0200 	mov.w	r2, #0
 8008f4e:	60da      	str	r2, [r3, #12]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f04f 0200 	mov.w	r2, #0
 8008f56:	611a      	str	r2, [r3, #16]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f04f 0200 	mov.w	r2, #0
 8008f5e:	615a      	str	r2, [r3, #20]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f04f 0200 	mov.w	r2, #0
 8008f66:	619a      	str	r2, [r3, #24]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008f6e:	61da      	str	r2, [r3, #28]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a31      	ldr	r2, [pc, #196]	; (8009038 <_ZN14MPC_ControllerC1Ev+0x110>)
 8008f74:	621a      	str	r2, [r3, #32]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a30      	ldr	r2, [pc, #192]	; (800903c <_ZN14MPC_ControllerC1Ev+0x114>)
 8008f7a:	3354      	adds	r3, #84	; 0x54
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8008f82:	4618      	mov	r0, r3
 8008f84:	f011 f92e 	bl	801a1e4 <memcpy>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008f8e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008f92:	2100      	movs	r1, #0
 8008f94:	4618      	mov	r0, r3
 8008f96:	f011 f94d 	bl	801a234 <memset>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8008fa0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f011 f944 	bl	801a234 <memset>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8008fb2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f011 f93b 	bl	801a234 <memset>
		arm_mat_init_f32(&ft, 1, 100, (float32_t *)ft_data);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008fca:	2264      	movs	r2, #100	; 0x64
 8008fcc:	2101      	movs	r1, #1
 8008fce:	f00f fec3 	bl	8018d58 <arm_mat_init_f32>
		arm_mat_init_f32(&ft_t, 100, 1, (float32_t *)ft_t_data);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8008fde:	2201      	movs	r2, #1
 8008fe0:	2164      	movs	r1, #100	; 0x64
 8008fe2:	f00f feb9 	bl	8018d58 <arm_mat_init_f32>
		arm_mat_init_f32(&du, 100, 1, (float32_t *)du_data);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	2164      	movs	r1, #100	; 0x64
 8008ff6:	f00f feaf 	bl	8018d58 <arm_mat_init_f32>

		arm_mat_init_f32(&Fdbt, 104, 100, (float32_t *)Fdbt_data);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009000:	4b0f      	ldr	r3, [pc, #60]	; (8009040 <_ZN14MPC_ControllerC1Ev+0x118>)
 8009002:	2264      	movs	r2, #100	; 0x64
 8009004:	2168      	movs	r1, #104	; 0x68
 8009006:	f00f fea7 	bl	8018d58 <arm_mat_init_f32>
		arm_mat_init_f32(&HdbInv, 100, 100, (float32_t *)HdbInv_data);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8009010:	4b0c      	ldr	r3, [pc, #48]	; (8009044 <_ZN14MPC_ControllerC1Ev+0x11c>)
 8009012:	2264      	movs	r2, #100	; 0x64
 8009014:	2164      	movs	r1, #100	; 0x64
 8009016:	f00f fe9f 	bl	8018d58 <arm_mat_init_f32>
		arm_mat_init_f32(&xr, 1, 104, (float32_t *)xr_data);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3354      	adds	r3, #84	; 0x54
 8009024:	2268      	movs	r2, #104	; 0x68
 8009026:	2101      	movs	r1, #1
 8009028:	f00f fe96 	bl	8018d58 <arm_mat_init_f32>
	}
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4618      	mov	r0, r3
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	3dcccccd 	.word	0x3dcccccd
 800903c:	0801d02c 	.word	0x0801d02c
 8009040:	0801d3ac 	.word	0x0801d3ac
 8009044:	0802762c 	.word	0x0802762c

08009048 <_ZN14MPC_Controller7predictEff>:

	float32_t predict(float32_t x1,float32_t ref)
 8009048:	b5b0      	push	{r4, r5, r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	ed87 0a02 	vstr	s0, [r7, #8]
 8009054:	edc7 0a01 	vstr	s1, [r7, #4]
	{
		arm_status status1 = arm_mat_mult_f32(&xr, &Fdbt, &ft);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	333c      	adds	r3, #60	; 0x3c
 8009068:	461a      	mov	r2, r3
 800906a:	f00f fdd1 	bl	8018c10 <arm_mat_mult_f32>
 800906e:	4603      	mov	r3, r0
 8009070:	75fb      	strb	r3, [r7, #23]
		arm_status status2 = arm_mat_trans_f32(&ft, &ft_t);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	3344      	adds	r3, #68	; 0x44
 800907c:	4619      	mov	r1, r3
 800907e:	4610      	mov	r0, r2
 8009080:	f00f fd54 	bl	8018b2c <arm_mat_trans_f32>
 8009084:	4603      	mov	r3, r0
 8009086:	75bb      	strb	r3, [r7, #22]
		arm_status status3 = arm_mat_mult_f32(&HdbInv, &ft_t, &du);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	334c      	adds	r3, #76	; 0x4c
 8009098:	461a      	mov	r2, r3
 800909a:	f00f fdb9 	bl	8018c10 <arm_mat_mult_f32>
 800909e:	4603      	mov	r3, r0
 80090a0:	757b      	strb	r3, [r7, #21]

		this->du0 = *(du.pData+0);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	601a      	str	r2, [r3, #0]
		this->x_aug = this->x_aug + this->du0;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	edd3 7a00 	vldr	s15, [r3]
 80090b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	edc3 7a01 	vstr	s15, [r3, #4]

		if (x1<0.05)
 80090c2:	68b8      	ldr	r0, [r7, #8]
 80090c4:	f7f7 fa40 	bl	8000548 <__aeabi_f2d>
 80090c8:	a347      	add	r3, pc, #284	; (adr r3, 80091e8 <_ZN14MPC_Controller7predictEff+0x1a0>)
 80090ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ce:	f7f7 fd05 	bl	8000adc <__aeabi_dcmplt>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d013      	beq.n	8009100 <_ZN14MPC_Controller7predictEff+0xb8>
		{
			err = err + (ref-x1)*Ki;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	ed93 7a04 	vldr	s14, [r3, #16]
 80090de:	edd7 6a01 	vldr	s13, [r7, #4]
 80090e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80090e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	edd3 7a07 	vldr	s15, [r3, #28]
 80090f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80090f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	edc3 7a04 	vstr	s15, [r3, #16]
 80090fe:	e012      	b.n	8009126 <_ZN14MPC_Controller7predictEff+0xde>
		} else
		{
			err = err + (ref-x1)*Ki_s;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	ed93 7a04 	vldr	s14, [r3, #16]
 8009106:	edd7 6a01 	vldr	s13, [r7, #4]
 800910a:	edd7 7a02 	vldr	s15, [r7, #8]
 800910e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	edd3 7a08 	vldr	s15, [r3, #32]
 8009118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800911c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	edc3 7a04 	vstr	s15, [r3, #16]
		}

		this->x3 = this->x_aug*0.8 - prev_x3*0.666666666666667;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	4618      	mov	r0, r3
 800912c:	f7f7 fa0c 	bl	8000548 <__aeabi_f2d>
 8009130:	a32f      	add	r3, pc, #188	; (adr r3, 80091f0 <_ZN14MPC_Controller7predictEff+0x1a8>)
 8009132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009136:	f7f7 fa5f 	bl	80005f8 <__aeabi_dmul>
 800913a:	4602      	mov	r2, r0
 800913c:	460b      	mov	r3, r1
 800913e:	4614      	mov	r4, r2
 8009140:	461d      	mov	r5, r3
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	4618      	mov	r0, r3
 8009148:	f7f7 f9fe 	bl	8000548 <__aeabi_f2d>
 800914c:	a32a      	add	r3, pc, #168	; (adr r3, 80091f8 <_ZN14MPC_Controller7predictEff+0x1b0>)
 800914e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009152:	f7f7 fa51 	bl	80005f8 <__aeabi_dmul>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	4620      	mov	r0, r4
 800915c:	4629      	mov	r1, r5
 800915e:	f7f7 f893 	bl	8000288 <__aeabi_dsub>
 8009162:	4602      	mov	r2, r0
 8009164:	460b      	mov	r3, r1
 8009166:	4610      	mov	r0, r2
 8009168:	4619      	mov	r1, r3
 800916a:	f7f7 fd3d 	bl	8000be8 <__aeabi_d2f>
 800916e:	4602      	mov	r2, r0
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	609a      	str	r2, [r3, #8]
		this->x1_dt = x1 - this->prev_x1;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	edd3 7a05 	vldr	s15, [r3, #20]
 800917a:	ed97 7a02 	vldr	s14, [r7, #8]
 800917e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	edc3 7a06 	vstr	s15, [r3, #24]

		std::fill_n(xr_data, 104, err);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	3310      	adds	r3, #16
 8009192:	461a      	mov	r2, r3
 8009194:	2168      	movs	r1, #104	; 0x68
 8009196:	f000 f99f 	bl	80094d8 <_ZSt6fill_nIPfifET_S1_T0_RKT1_>

		xr_data[0] = x1;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	655a      	str	r2, [r3, #84]	; 0x54
		xr_data[1] = x1_dt * 5.0F;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80091a6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80091aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		xr_data[2] = x3;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	689a      	ldr	r2, [r3, #8]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	65da      	str	r2, [r3, #92]	; 0x5c
		xr_data[3] = x_aug;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	661a      	str	r2, [r3, #96]	; 0x60

		this->prev_x1 = x1;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	615a      	str	r2, [r3, #20]
		this->prev_x3 = this->x3;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	689a      	ldr	r2, [r3, #8]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	60da      	str	r2, [r3, #12]

		return x_aug;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	ee07 3a90 	vmov	s15, r3
	}
 80091da:	eeb0 0a67 	vmov.f32	s0, s15
 80091de:	3718      	adds	r7, #24
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bdb0      	pop	{r4, r5, r7, pc}
 80091e4:	f3af 8000 	nop.w
 80091e8:	9999999a 	.word	0x9999999a
 80091ec:	3fa99999 	.word	0x3fa99999
 80091f0:	9999999a 	.word	0x9999999a
 80091f4:	3fe99999 	.word	0x3fe99999
 80091f8:	55555558 	.word	0x55555558
 80091fc:	3fe55555 	.word	0x3fe55555

08009200 <_ZN7VL53L0XC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>:
 *      Author: Dragos
 */

#include "VL53L0X.hpp"

VL53L0X::VL53L0X(
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
 800920c:	70fb      	strb	r3, [r7, #3]
	,uart_port_dma {uart_port_dma}
	,mpc {}
	,mpc_out {0}
	,rx_buff {}
	,wrongDataReceived {false}
	,distance {0}
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3336      	adds	r3, #54	; 0x36
 8009212:	4618      	mov	r0, r3
 8009214:	f7fc f93d 	bl	8005492 <_ZN7TimeoutC1Ev>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	4618      	mov	r0, r3
 800921c:	f7f8 f858 	bl	80012d0 <_ZN15PrintableSensorC1Ev>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	3340      	adds	r3, #64	; 0x40
 8009224:	4618      	mov	r0, r3
 8009226:	f7fa fdd3 	bl	8003dd0 <_ZN12CallsCounterC1Ev>
 800922a:	4a1c      	ldr	r2, [pc, #112]	; (800929c <_ZN7VL53L0XC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh+0x9c>)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	601a      	str	r2, [r3, #0]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	225a      	movs	r2, #90	; 0x5a
 8009234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	225a      	movs	r2, #90	; 0x5a
 800923c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	68ba      	ldr	r2, [r7, #8]
 8009244:	655a      	str	r2, [r3, #84]	; 0x54
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	659a      	str	r2, [r3, #88]	; 0x58
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	335c      	adds	r3, #92	; 0x5c
 8009250:	4618      	mov	r0, r3
 8009252:	f7ff fe69 	bl	8008f28 <_ZN14MPC_ControllerC1Ev>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 800925c:	f04f 0200 	mov.w	r2, #0
 8009260:	601a      	str	r2, [r3, #0]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8009268:	2200      	movs	r2, #0
 800926a:	601a      	str	r2, [r3, #0]
 800926c:	605a      	str	r2, [r3, #4]
 800926e:	609a      	str	r2, [r3, #8]
 8009270:	60da      	str	r2, [r3, #12]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
{
	setTimeoutValue(timeout);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	3336      	adds	r3, #54	; 0x36
 8009286:	78fa      	ldrb	r2, [r7, #3]
 8009288:	4611      	mov	r1, r2
 800928a:	4618      	mov	r0, r3
 800928c:	f7fc f8f2 	bl	8005474 <_ZN7Timeout15setTimeoutValueEh>
}
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	08031274 	.word	0x08031274

080092a0 <_ZN7VL53L0X5beginEv>:

void VL53L0X::begin()
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (uart_port, rx_buff, packet_length);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f203 7304 	addw	r3, r3, #1796	; 0x704
 80092b2:	2208      	movs	r2, #8
 80092b4:	4619      	mov	r1, r3
 80092b6:	f006 fe25 	bl	800ff04 <HAL_UART_Receive_DMA>
}
 80092ba:	bf00      	nop
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
	...

080092c4 <_ZN7VL53L0X6updateEv>:

void VL53L0X::update()
{
 80092c4:	b590      	push	{r4, r7, lr}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->rx_buff[0]==this->FIRST_BIT && this->rx_buff[1]==this->SECOND_BIT);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 2704 	ldrb.w	r2, [r3, #1796]	; 0x704
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80092d8:	429a      	cmp	r2, r3
 80092da:	d109      	bne.n	80092f0 <_ZN7VL53L0X6updateEv+0x2c>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 2705 	ldrb.w	r2, [r3, #1797]	; 0x705
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d101      	bne.n	80092f0 <_ZN7VL53L0X6updateEv+0x2c>
 80092ec:	2301      	movs	r3, #1
 80092ee:	e000      	b.n	80092f2 <_ZN7VL53L0X6updateEv+0x2e>
 80092f0:	2300      	movs	r3, #0
 80092f2:	73bb      	strb	r3, [r7, #14]

	if(isPacketOk)
 80092f4:	7bbb      	ldrb	r3, [r7, #14]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d027      	beq.n	800934a <_ZN7VL53L0X6updateEv+0x86>
	{
	    this->distance = rx_buff[4] << 8 | rx_buff[5];
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 3708 	ldrb.w	r3, [r3, #1800]	; 0x708
 8009300:	021b      	lsls	r3, r3, #8
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	f892 2709 	ldrb.w	r2, [r2, #1801]	; 0x709
 8009308:	4313      	orrs	r3, r2
 800930a:	461a      	mov	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
		this->resetTimeoutCounter();
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	3336      	adds	r3, #54	; 0x36
 8009316:	4618      	mov	r0, r3
 8009318:	f7ff f97e 	bl	8008618 <_ZN7Timeout19resetTimeoutCounterEv>

		this->mpc_out = this->mpc.predict(this->getAltitudeM(),0.15F);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f866 	bl	80093f4 <_ZN7VL53L0X12getAltitudeMEv>
 8009328:	eef0 7a40 	vmov.f32	s15, s0
 800932c:	eddf 0a30 	vldr	s1, [pc, #192]	; 80093f0 <_ZN7VL53L0X6updateEv+0x12c>
 8009330:	eeb0 0a67 	vmov.f32	s0, s15
 8009334:	4620      	mov	r0, r4
 8009336:	f7ff fe87 	bl	8009048 <_ZN14MPC_Controller7predictEff>
 800933a:	eef0 7a40 	vmov.f32	s15, s0
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8009344:	edc3 7a00 	vstr	s15, [r3]
 8009348:	e033      	b.n	80093b2 <_ZN7VL53L0X6updateEv+0xee>
	}
	else if (this->wrongDataReceived==false)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 3714 	ldrb.w	r3, [r3, #1812]	; 0x714
 8009350:	2b00      	cmp	r3, #0
 8009352:	d12e      	bne.n	80093b2 <_ZN7VL53L0X6updateEv+0xee>
	{
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 8009354:	2300      	movs	r3, #0
 8009356:	73fb      	strb	r3, [r7, #15]
 8009358:	7bfb      	ldrb	r3, [r7, #15]
 800935a:	2b06      	cmp	r3, #6
 800935c:	d829      	bhi.n	80093b2 <_ZN7VL53L0X6updateEv+0xee>
		{
			if ((this->rx_buff[iter]==this->FIRST_BIT) && (this->rx_buff[iter+1U]==this->SECOND_BIT))
 800935e:	7bfb      	ldrb	r3, [r7, #15]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	4413      	add	r3, r2
 8009364:	f893 2704 	ldrb.w	r2, [r3, #1796]	; 0x704
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800936e:	429a      	cmp	r2, r3
 8009370:	d11b      	bne.n	80093aa <_ZN7VL53L0X6updateEv+0xe6>
 8009372:	7bfb      	ldrb	r3, [r7, #15]
 8009374:	3301      	adds	r3, #1
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	4413      	add	r3, r2
 800937a:	f893 2704 	ldrb.w	r2, [r3, #1796]	; 0x704
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009384:	429a      	cmp	r2, r3
 8009386:	d110      	bne.n	80093aa <_ZN7VL53L0X6updateEv+0xe6>
			{
				HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length+iter);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f203 7104 	addw	r1, r3, #1796	; 0x704
 8009392:	7bfb      	ldrb	r3, [r7, #15]
 8009394:	b29b      	uxth	r3, r3
 8009396:	3308      	adds	r3, #8
 8009398:	b29b      	uxth	r3, r3
 800939a:	461a      	mov	r2, r3
 800939c:	f006 fdb2 	bl	800ff04 <HAL_UART_Receive_DMA>
				this->wrongDataReceived = true;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
				return;
 80093a8:	e01f      	b.n	80093ea <_ZN7VL53L0X6updateEv+0x126>
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 80093aa:	7bfb      	ldrb	r3, [r7, #15]
 80093ac:	3301      	adds	r3, #1
 80093ae:	73fb      	strb	r3, [r7, #15]
 80093b0:	e7d2      	b.n	8009358 <_ZN7VL53L0X6updateEv+0x94>
			}
		}
	}

	if (this->wrongDataReceived == true)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 3714 	ldrb.w	r3, [r3, #1812]	; 0x714
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d103      	bne.n	80093c4 <_ZN7VL53L0X6updateEv+0x100>
		this->wrongDataReceived = false;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714

	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f203 7304 	addw	r3, r3, #1796	; 0x704
 80093ce:	2208      	movs	r2, #8
 80093d0:	4619      	mov	r1, r3
 80093d2:	f006 fd97 	bl	800ff04 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->uart_port_dma, DMA_IT_HT);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f022 0208 	bic.w	r2, r2, #8
 80093e8:	601a      	str	r2, [r3, #0]
}
 80093ea:	3714      	adds	r7, #20
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd90      	pop	{r4, r7, pc}
 80093f0:	3e19999a 	.word	0x3e19999a

080093f4 <_ZN7VL53L0X12getAltitudeMEv>:

float VL53L0X::getAltitudeM(void)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
	return static_cast<float>(this->distance)/1000.0F;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3718 	ldr.w	r3, [r3, #1816]	; 0x718
 8009402:	ee07 3a90 	vmov	s15, r3
 8009406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8009424 <_ZN7VL53L0X12getAltitudeMEv+0x30>
 800940e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009412:	eef0 7a66 	vmov.f32	s15, s13
}
 8009416:	eeb0 0a67 	vmov.f32	s0, s15
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr
 8009424:	447a0000 	.word	0x447a0000

08009428 <_ZN7VL53L0X9getMPCoutEv>:

float VL53L0X::getMPCout(void)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
	return this->mpc_out;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	ee07 3a90 	vmov	s15, r3
}
 800943c:	eeb0 0a67 	vmov.f32	s0, s15
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
	...

0800944c <_ZN7VL53L0X19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
{
	return this->distance;
}

const char* VL53L0X::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 800944c:	b590      	push	{r4, r7, lr}
 800944e:	b087      	sub	sp, #28
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	3304      	adds	r3, #4
 800945a:	2200      	movs	r2, #0
 800945c:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::VL53_DISTANCE)!=senorsList.end())
 800945e:	2314      	movs	r3, #20
 8009460:	613b      	str	r3, [r7, #16]
 8009462:	f107 0310 	add.w	r3, r7, #16
 8009466:	4619      	mov	r1, r3
 8009468:	6838      	ldr	r0, [r7, #0]
 800946a:	f7fb fc4b 	bl	8004d04 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 800946e:	4603      	mov	r3, r0
 8009470:	60fb      	str	r3, [r7, #12]
 8009472:	6838      	ldr	r0, [r7, #0]
 8009474:	f7fb fc5f 	bl	8004d36 <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8009478:	4603      	mov	r3, r0
 800947a:	617b      	str	r3, [r7, #20]
 800947c:	f107 0214 	add.w	r2, r7, #20
 8009480:	f107 030c 	add.w	r3, r7, #12
 8009484:	4611      	mov	r1, r2
 8009486:	4618      	mov	r0, r3
 8009488:	f7fb fc62 	bl	8004d50 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d01a      	beq.n	80094c8 <_ZN7VL53L0X19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x7c>
	{
		strcat(packet,toCharArray(distance));
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	1d1c      	adds	r4, r3, #4
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 3718 	ldr.w	r3, [r3, #1816]	; 0x718
 800949e:	4619      	mov	r1, r3
 80094a0:	4610      	mov	r0, r2
 80094a2:	f7fa fc53 	bl	8003d4c <_ZN15PrintableSensor11toCharArrayEi>
 80094a6:	4603      	mov	r3, r0
 80094a8:	4619      	mov	r1, r3
 80094aa:	4620      	mov	r0, r4
 80094ac:	f010 fffe 	bl	801a4ac <strcat>
		strcat(packet,",");
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	1d1c      	adds	r4, r3, #4
 80094b4:	4620      	mov	r0, r4
 80094b6:	f7f6 fedb 	bl	8000270 <strlen>
 80094ba:	4603      	mov	r3, r0
 80094bc:	4423      	add	r3, r4
 80094be:	4905      	ldr	r1, [pc, #20]	; (80094d4 <_ZN7VL53L0X19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x88>)
 80094c0:	461a      	mov	r2, r3
 80094c2:	460b      	mov	r3, r1
 80094c4:	881b      	ldrh	r3, [r3, #0]
 80094c6:	8013      	strh	r3, [r2, #0]
	}
	return packet;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	3304      	adds	r3, #4
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	371c      	adds	r7, #28
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd90      	pop	{r4, r7, pc}
 80094d4:	0801d1cc 	.word	0x0801d1cc

080094d8 <_ZSt6fill_nIPfifET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 80094d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80094e4:	68fc      	ldr	r4, [r7, #12]
 80094e6:	68b8      	ldr	r0, [r7, #8]
 80094e8:	f7ff fd13 	bl	8008f12 <_ZSt17__size_to_integeri>
 80094ec:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 80094ee:	f107 030c 	add.w	r3, r7, #12
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 f80b 	bl	800950e <_ZSt19__iterator_categoryIPfENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80094f8:	4633      	mov	r3, r6
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	4629      	mov	r1, r5
 80094fe:	4620      	mov	r0, r4
 8009500:	f000 f810 	bl	8009524 <_ZSt10__fill_n_aIPfifET_S1_T0_RKT1_St26random_access_iterator_tag>
 8009504:	4603      	mov	r3, r0
    }
 8009506:	4618      	mov	r0, r3
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800950e <_ZSt19__iterator_categoryIPfENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800950e:	b480      	push	{r7}
 8009510:	b083      	sub	sp, #12
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8009516:	bf00      	nop
 8009518:	4618      	mov	r0, r3
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <_ZSt10__fill_n_aIPfifET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
 8009530:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	2b00      	cmp	r3, #0
 8009536:	dc01      	bgt.n	800953c <_ZSt10__fill_n_aIPfifET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	e00c      	b.n	8009556 <_ZSt10__fill_n_aIPfifET_S1_T0_RKT1_St26random_access_iterator_tag+0x32>
      std::__fill_a(__first, __first + __n, __value);
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	4413      	add	r3, r2
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	4619      	mov	r1, r3
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 f808 	bl	800955e <_ZSt8__fill_aIPffEvT_S1_RKT0_>
      return __first + __n;
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	4413      	add	r3, r2
    }
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <_ZSt8__fill_aIPffEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 800955e:	b580      	push	{r7, lr}
 8009560:	b084      	sub	sp, #16
 8009562:	af00      	add	r7, sp, #0
 8009564:	60f8      	str	r0, [r7, #12]
 8009566:	60b9      	str	r1, [r7, #8]
 8009568:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	68b9      	ldr	r1, [r7, #8]
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f000 f804 	bl	800957c <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 8009574:	bf00      	nop
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 800957c:	b480      	push	{r7}
 800957e:	b087      	sub	sp, #28
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 800958e:	68fa      	ldr	r2, [r7, #12]
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	429a      	cmp	r2, r3
 8009594:	d006      	beq.n	80095a4 <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x28>
	*__first = __tmp;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	697a      	ldr	r2, [r7, #20]
 800959a:	601a      	str	r2, [r3, #0]
      for (; __first != __last; ++__first)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	3304      	adds	r3, #4
 80095a0:	60fb      	str	r3, [r7, #12]
 80095a2:	e7f4      	b.n	800958e <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x12>
    }
 80095a4:	bf00      	nop
 80095a6:	371c      	adds	r7, #28
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80095b4:	4b0e      	ldr	r3, [pc, #56]	; (80095f0 <HAL_Init+0x40>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a0d      	ldr	r2, [pc, #52]	; (80095f0 <HAL_Init+0x40>)
 80095ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80095be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80095c0:	4b0b      	ldr	r3, [pc, #44]	; (80095f0 <HAL_Init+0x40>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a0a      	ldr	r2, [pc, #40]	; (80095f0 <HAL_Init+0x40>)
 80095c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80095ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80095cc:	4b08      	ldr	r3, [pc, #32]	; (80095f0 <HAL_Init+0x40>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a07      	ldr	r2, [pc, #28]	; (80095f0 <HAL_Init+0x40>)
 80095d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80095d8:	2003      	movs	r0, #3
 80095da:	f000 fd0e 	bl	8009ffa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80095de:	200f      	movs	r0, #15
 80095e0:	f7fa f962 	bl	80038a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80095e4:	f7f9 fcf0 	bl	8002fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	40023c00 	.word	0x40023c00

080095f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80095f4:	b480      	push	{r7}
 80095f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80095f8:	4b06      	ldr	r3, [pc, #24]	; (8009614 <HAL_IncTick+0x20>)
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	461a      	mov	r2, r3
 80095fe:	4b06      	ldr	r3, [pc, #24]	; (8009618 <HAL_IncTick+0x24>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4413      	add	r3, r2
 8009604:	4a04      	ldr	r2, [pc, #16]	; (8009618 <HAL_IncTick+0x24>)
 8009606:	6013      	str	r3, [r2, #0]
}
 8009608:	bf00      	nop
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	20000024 	.word	0x20000024
 8009618:	20000bf8 	.word	0x20000bf8

0800961c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800961c:	b480      	push	{r7}
 800961e:	af00      	add	r7, sp, #0
  return uwTick;
 8009620:	4b03      	ldr	r3, [pc, #12]	; (8009630 <HAL_GetTick+0x14>)
 8009622:	681b      	ldr	r3, [r3, #0]
}
 8009624:	4618      	mov	r0, r3
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	20000bf8 	.word	0x20000bf8

08009634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800963c:	f7ff ffee 	bl	800961c <HAL_GetTick>
 8009640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964c:	d005      	beq.n	800965a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800964e:	4b0a      	ldr	r3, [pc, #40]	; (8009678 <HAL_Delay+0x44>)
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	461a      	mov	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	4413      	add	r3, r2
 8009658:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800965a:	bf00      	nop
 800965c:	f7ff ffde 	bl	800961c <HAL_GetTick>
 8009660:	4602      	mov	r2, r0
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	1ad3      	subs	r3, r2, r3
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	429a      	cmp	r2, r3
 800966a:	d8f7      	bhi.n	800965c <HAL_Delay+0x28>
  {
  }
}
 800966c:	bf00      	nop
 800966e:	bf00      	nop
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20000024 	.word	0x20000024

0800967c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d101      	bne.n	8009692 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e033      	b.n	80096fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009696:	2b00      	cmp	r3, #0
 8009698:	d109      	bne.n	80096ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f7f9 fcc0 	bl	8003020 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b2:	f003 0310 	and.w	r3, r3, #16
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d118      	bne.n	80096ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80096c2:	f023 0302 	bic.w	r3, r3, #2
 80096c6:	f043 0202 	orr.w	r2, r3, #2
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 fa68 	bl	8009ba4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096de:	f023 0303 	bic.w	r3, r3, #3
 80096e2:	f043 0201 	orr.w	r2, r3, #1
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	641a      	str	r2, [r3, #64]	; 0x40
 80096ea:	e001      	b.n	80096f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80096ec:	2301      	movs	r3, #1
 80096ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80096f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
	...

08009704 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009710:	2300      	movs	r3, #0
 8009712:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800971a:	2b01      	cmp	r3, #1
 800971c:	d101      	bne.n	8009722 <HAL_ADC_Start_DMA+0x1e>
 800971e:	2302      	movs	r3, #2
 8009720:	e0e9      	b.n	80098f6 <HAL_ADC_Start_DMA+0x1f2>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	f003 0301 	and.w	r3, r3, #1
 8009734:	2b01      	cmp	r3, #1
 8009736:	d018      	beq.n	800976a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	689a      	ldr	r2, [r3, #8]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f042 0201 	orr.w	r2, r2, #1
 8009746:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009748:	4b6d      	ldr	r3, [pc, #436]	; (8009900 <HAL_ADC_Start_DMA+0x1fc>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a6d      	ldr	r2, [pc, #436]	; (8009904 <HAL_ADC_Start_DMA+0x200>)
 800974e:	fba2 2303 	umull	r2, r3, r2, r3
 8009752:	0c9a      	lsrs	r2, r3, #18
 8009754:	4613      	mov	r3, r2
 8009756:	005b      	lsls	r3, r3, #1
 8009758:	4413      	add	r3, r2
 800975a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800975c:	e002      	b.n	8009764 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	3b01      	subs	r3, #1
 8009762:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1f9      	bne.n	800975e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009778:	d107      	bne.n	800978a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	689a      	ldr	r2, [r3, #8]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009788:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	f003 0301 	and.w	r3, r3, #1
 8009794:	2b01      	cmp	r3, #1
 8009796:	f040 80a1 	bne.w	80098dc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80097a2:	f023 0301 	bic.w	r3, r3, #1
 80097a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d007      	beq.n	80097cc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80097c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80097d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097d8:	d106      	bne.n	80097e8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097de:	f023 0206 	bic.w	r2, r3, #6
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	645a      	str	r2, [r3, #68]	; 0x44
 80097e6:	e002      	b.n	80097ee <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80097f6:	4b44      	ldr	r3, [pc, #272]	; (8009908 <HAL_ADC_Start_DMA+0x204>)
 80097f8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fe:	4a43      	ldr	r2, [pc, #268]	; (800990c <HAL_ADC_Start_DMA+0x208>)
 8009800:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009806:	4a42      	ldr	r2, [pc, #264]	; (8009910 <HAL_ADC_Start_DMA+0x20c>)
 8009808:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980e:	4a41      	ldr	r2, [pc, #260]	; (8009914 <HAL_ADC_Start_DMA+0x210>)
 8009810:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800981a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	685a      	ldr	r2, [r3, #4]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800982a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	689a      	ldr	r2, [r3, #8]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800983a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	334c      	adds	r3, #76	; 0x4c
 8009846:	4619      	mov	r1, r3
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f000 fcb8 	bl	800a1c0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	f003 031f 	and.w	r3, r3, #31
 8009858:	2b00      	cmp	r3, #0
 800985a:	d12a      	bne.n	80098b2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a2d      	ldr	r2, [pc, #180]	; (8009918 <HAL_ADC_Start_DMA+0x214>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d015      	beq.n	8009892 <HAL_ADC_Start_DMA+0x18e>
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a2c      	ldr	r2, [pc, #176]	; (800991c <HAL_ADC_Start_DMA+0x218>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d105      	bne.n	800987c <HAL_ADC_Start_DMA+0x178>
 8009870:	4b25      	ldr	r3, [pc, #148]	; (8009908 <HAL_ADC_Start_DMA+0x204>)
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	f003 031f 	and.w	r3, r3, #31
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00a      	beq.n	8009892 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a27      	ldr	r2, [pc, #156]	; (8009920 <HAL_ADC_Start_DMA+0x21c>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d136      	bne.n	80098f4 <HAL_ADC_Start_DMA+0x1f0>
 8009886:	4b20      	ldr	r3, [pc, #128]	; (8009908 <HAL_ADC_Start_DMA+0x204>)
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	f003 0310 	and.w	r3, r3, #16
 800988e:	2b00      	cmp	r3, #0
 8009890:	d130      	bne.n	80098f4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d129      	bne.n	80098f4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	689a      	ldr	r2, [r3, #8]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80098ae:	609a      	str	r2, [r3, #8]
 80098b0:	e020      	b.n	80098f4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a18      	ldr	r2, [pc, #96]	; (8009918 <HAL_ADC_Start_DMA+0x214>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d11b      	bne.n	80098f4 <HAL_ADC_Start_DMA+0x1f0>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d114      	bne.n	80098f4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	689a      	ldr	r2, [r3, #8]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80098d8:	609a      	str	r2, [r3, #8]
 80098da:	e00b      	b.n	80098f4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e0:	f043 0210 	orr.w	r2, r3, #16
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ec:	f043 0201 	orr.w	r2, r3, #1
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3718      	adds	r7, #24
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	20000004 	.word	0x20000004
 8009904:	431bde83 	.word	0x431bde83
 8009908:	40012300 	.word	0x40012300
 800990c:	08009d9d 	.word	0x08009d9d
 8009910:	08009e57 	.word	0x08009e57
 8009914:	08009e73 	.word	0x08009e73
 8009918:	40012000 	.word	0x40012000
 800991c:	40012100 	.word	0x40012100
 8009920:	40012200 	.word	0x40012200

08009924 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800992c:	bf00      	nop
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009960:	b480      	push	{r7}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800996a:	2300      	movs	r3, #0
 800996c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009974:	2b01      	cmp	r3, #1
 8009976:	d101      	bne.n	800997c <HAL_ADC_ConfigChannel+0x1c>
 8009978:	2302      	movs	r3, #2
 800997a:	e105      	b.n	8009b88 <HAL_ADC_ConfigChannel+0x228>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b09      	cmp	r3, #9
 800998a:	d925      	bls.n	80099d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68d9      	ldr	r1, [r3, #12]
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	b29b      	uxth	r3, r3
 8009998:	461a      	mov	r2, r3
 800999a:	4613      	mov	r3, r2
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	4413      	add	r3, r2
 80099a0:	3b1e      	subs	r3, #30
 80099a2:	2207      	movs	r2, #7
 80099a4:	fa02 f303 	lsl.w	r3, r2, r3
 80099a8:	43da      	mvns	r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	400a      	ands	r2, r1
 80099b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	68d9      	ldr	r1, [r3, #12]
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	689a      	ldr	r2, [r3, #8]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	4618      	mov	r0, r3
 80099c4:	4603      	mov	r3, r0
 80099c6:	005b      	lsls	r3, r3, #1
 80099c8:	4403      	add	r3, r0
 80099ca:	3b1e      	subs	r3, #30
 80099cc:	409a      	lsls	r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	430a      	orrs	r2, r1
 80099d4:	60da      	str	r2, [r3, #12]
 80099d6:	e022      	b.n	8009a1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6919      	ldr	r1, [r3, #16]
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	461a      	mov	r2, r3
 80099e6:	4613      	mov	r3, r2
 80099e8:	005b      	lsls	r3, r3, #1
 80099ea:	4413      	add	r3, r2
 80099ec:	2207      	movs	r2, #7
 80099ee:	fa02 f303 	lsl.w	r3, r2, r3
 80099f2:	43da      	mvns	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	400a      	ands	r2, r1
 80099fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	6919      	ldr	r1, [r3, #16]
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	689a      	ldr	r2, [r3, #8]
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	4603      	mov	r3, r0
 8009a10:	005b      	lsls	r3, r3, #1
 8009a12:	4403      	add	r3, r0
 8009a14:	409a      	lsls	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	2b06      	cmp	r3, #6
 8009a24:	d824      	bhi.n	8009a70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	685a      	ldr	r2, [r3, #4]
 8009a30:	4613      	mov	r3, r2
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	4413      	add	r3, r2
 8009a36:	3b05      	subs	r3, #5
 8009a38:	221f      	movs	r2, #31
 8009a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a3e:	43da      	mvns	r2, r3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	400a      	ands	r2, r1
 8009a46:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	4618      	mov	r0, r3
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	685a      	ldr	r2, [r3, #4]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	4413      	add	r3, r2
 8009a60:	3b05      	subs	r3, #5
 8009a62:	fa00 f203 	lsl.w	r2, r0, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	430a      	orrs	r2, r1
 8009a6c:	635a      	str	r2, [r3, #52]	; 0x34
 8009a6e:	e04c      	b.n	8009b0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	2b0c      	cmp	r3, #12
 8009a76:	d824      	bhi.n	8009ac2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	685a      	ldr	r2, [r3, #4]
 8009a82:	4613      	mov	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4413      	add	r3, r2
 8009a88:	3b23      	subs	r3, #35	; 0x23
 8009a8a:	221f      	movs	r2, #31
 8009a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a90:	43da      	mvns	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	400a      	ands	r2, r1
 8009a98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	685a      	ldr	r2, [r3, #4]
 8009aac:	4613      	mov	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	3b23      	subs	r3, #35	; 0x23
 8009ab4:	fa00 f203 	lsl.w	r2, r0, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	430a      	orrs	r2, r1
 8009abe:	631a      	str	r2, [r3, #48]	; 0x30
 8009ac0:	e023      	b.n	8009b0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	4613      	mov	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4413      	add	r3, r2
 8009ad2:	3b41      	subs	r3, #65	; 0x41
 8009ad4:	221f      	movs	r2, #31
 8009ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8009ada:	43da      	mvns	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	400a      	ands	r2, r1
 8009ae2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	4618      	mov	r0, r3
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	685a      	ldr	r2, [r3, #4]
 8009af6:	4613      	mov	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	3b41      	subs	r3, #65	; 0x41
 8009afe:	fa00 f203 	lsl.w	r2, r0, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009b0a:	4b22      	ldr	r3, [pc, #136]	; (8009b94 <HAL_ADC_ConfigChannel+0x234>)
 8009b0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a21      	ldr	r2, [pc, #132]	; (8009b98 <HAL_ADC_ConfigChannel+0x238>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d109      	bne.n	8009b2c <HAL_ADC_ConfigChannel+0x1cc>
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b12      	cmp	r3, #18
 8009b1e:	d105      	bne.n	8009b2c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a19      	ldr	r2, [pc, #100]	; (8009b98 <HAL_ADC_ConfigChannel+0x238>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d123      	bne.n	8009b7e <HAL_ADC_ConfigChannel+0x21e>
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2b10      	cmp	r3, #16
 8009b3c:	d003      	beq.n	8009b46 <HAL_ADC_ConfigChannel+0x1e6>
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2b11      	cmp	r3, #17
 8009b44:	d11b      	bne.n	8009b7e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2b10      	cmp	r3, #16
 8009b58:	d111      	bne.n	8009b7e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009b5a:	4b10      	ldr	r3, [pc, #64]	; (8009b9c <HAL_ADC_ConfigChannel+0x23c>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a10      	ldr	r2, [pc, #64]	; (8009ba0 <HAL_ADC_ConfigChannel+0x240>)
 8009b60:	fba2 2303 	umull	r2, r3, r2, r3
 8009b64:	0c9a      	lsrs	r2, r3, #18
 8009b66:	4613      	mov	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	005b      	lsls	r3, r3, #1
 8009b6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009b70:	e002      	b.n	8009b78 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	3b01      	subs	r3, #1
 8009b76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1f9      	bne.n	8009b72 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2200      	movs	r2, #0
 8009b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009b86:	2300      	movs	r3, #0
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3714      	adds	r7, #20
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr
 8009b94:	40012300 	.word	0x40012300
 8009b98:	40012000 	.word	0x40012000
 8009b9c:	20000004 	.word	0x20000004
 8009ba0:	431bde83 	.word	0x431bde83

08009ba4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009bac:	4b79      	ldr	r3, [pc, #484]	; (8009d94 <ADC_Init+0x1f0>)
 8009bae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	685a      	ldr	r2, [r3, #4]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	431a      	orrs	r2, r3
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	685a      	ldr	r2, [r3, #4]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009bd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	6859      	ldr	r1, [r3, #4]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	021a      	lsls	r2, r3, #8
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	430a      	orrs	r2, r1
 8009bec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	685a      	ldr	r2, [r3, #4]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009bfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	6859      	ldr	r1, [r3, #4]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	689a      	ldr	r2, [r3, #8]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	430a      	orrs	r2, r1
 8009c0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	689a      	ldr	r2, [r3, #8]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6899      	ldr	r1, [r3, #8]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	68da      	ldr	r2, [r3, #12]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c36:	4a58      	ldr	r2, [pc, #352]	; (8009d98 <ADC_Init+0x1f4>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d022      	beq.n	8009c82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	689a      	ldr	r2, [r3, #8]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009c4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	6899      	ldr	r1, [r3, #8]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	430a      	orrs	r2, r1
 8009c5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	689a      	ldr	r2, [r3, #8]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009c6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	6899      	ldr	r1, [r3, #8]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	430a      	orrs	r2, r1
 8009c7e:	609a      	str	r2, [r3, #8]
 8009c80:	e00f      	b.n	8009ca2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	689a      	ldr	r2, [r3, #8]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009c90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	689a      	ldr	r2, [r3, #8]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009ca0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	689a      	ldr	r2, [r3, #8]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f022 0202 	bic.w	r2, r2, #2
 8009cb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	6899      	ldr	r1, [r3, #8]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	7e1b      	ldrb	r3, [r3, #24]
 8009cbc:	005a      	lsls	r2, r3, #1
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	430a      	orrs	r2, r1
 8009cc4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d01b      	beq.n	8009d08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	685a      	ldr	r2, [r3, #4]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cde:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	685a      	ldr	r2, [r3, #4]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009cee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	6859      	ldr	r1, [r3, #4]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	035a      	lsls	r2, r3, #13
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	430a      	orrs	r2, r1
 8009d04:	605a      	str	r2, [r3, #4]
 8009d06:	e007      	b.n	8009d18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	685a      	ldr	r2, [r3, #4]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009d26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	69db      	ldr	r3, [r3, #28]
 8009d32:	3b01      	subs	r3, #1
 8009d34:	051a      	lsls	r2, r3, #20
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	430a      	orrs	r2, r1
 8009d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	689a      	ldr	r2, [r3, #8]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009d4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6899      	ldr	r1, [r3, #8]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d5a:	025a      	lsls	r2, r3, #9
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	430a      	orrs	r2, r1
 8009d62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	689a      	ldr	r2, [r3, #8]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6899      	ldr	r1, [r3, #8]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	695b      	ldr	r3, [r3, #20]
 8009d7e:	029a      	lsls	r2, r3, #10
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	430a      	orrs	r2, r1
 8009d86:	609a      	str	r2, [r3, #8]
}
 8009d88:	bf00      	nop
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	40012300 	.word	0x40012300
 8009d98:	0f000001 	.word	0x0f000001

08009d9c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d13c      	bne.n	8009e30 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d12b      	bne.n	8009e28 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d127      	bne.n	8009e28 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dde:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d006      	beq.n	8009df4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d119      	bne.n	8009e28 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	685a      	ldr	r2, [r3, #4]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f022 0220 	bic.w	r2, r2, #32
 8009e02:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d105      	bne.n	8009e28 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e20:	f043 0201 	orr.w	r2, r3, #1
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f7ff fd7b 	bl	8009924 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009e2e:	e00e      	b.n	8009e4e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e34:	f003 0310 	and.w	r3, r3, #16
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d003      	beq.n	8009e44 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f7ff fd85 	bl	800994c <HAL_ADC_ErrorCallback>
}
 8009e42:	e004      	b.n	8009e4e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	4798      	blx	r3
}
 8009e4e:	bf00      	nop
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b084      	sub	sp, #16
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e62:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f7ff fd67 	bl	8009938 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009e6a:	bf00      	nop
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b084      	sub	sp, #16
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2240      	movs	r2, #64	; 0x40
 8009e84:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e8a:	f043 0204 	orr.w	r2, r3, #4
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	f7ff fd5a 	bl	800994c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009e98:	bf00      	nop
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <__NVIC_SetPriorityGrouping>:
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f003 0307 	and.w	r3, r3, #7
 8009eae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009eb0:	4b0c      	ldr	r3, [pc, #48]	; (8009ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009ed2:	4a04      	ldr	r2, [pc, #16]	; (8009ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	60d3      	str	r3, [r2, #12]
}
 8009ed8:	bf00      	nop
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	e000ed00 	.word	0xe000ed00

08009ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009eec:	4b04      	ldr	r3, [pc, #16]	; (8009f00 <__NVIC_GetPriorityGrouping+0x18>)
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	0a1b      	lsrs	r3, r3, #8
 8009ef2:	f003 0307 	and.w	r3, r3, #7
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr
 8009f00:	e000ed00 	.word	0xe000ed00

08009f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	db0b      	blt.n	8009f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009f16:	79fb      	ldrb	r3, [r7, #7]
 8009f18:	f003 021f 	and.w	r2, r3, #31
 8009f1c:	4907      	ldr	r1, [pc, #28]	; (8009f3c <__NVIC_EnableIRQ+0x38>)
 8009f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f22:	095b      	lsrs	r3, r3, #5
 8009f24:	2001      	movs	r0, #1
 8009f26:	fa00 f202 	lsl.w	r2, r0, r2
 8009f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009f2e:	bf00      	nop
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	e000e100 	.word	0xe000e100

08009f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	4603      	mov	r3, r0
 8009f48:	6039      	str	r1, [r7, #0]
 8009f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	db0a      	blt.n	8009f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	b2da      	uxtb	r2, r3
 8009f58:	490c      	ldr	r1, [pc, #48]	; (8009f8c <__NVIC_SetPriority+0x4c>)
 8009f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f5e:	0112      	lsls	r2, r2, #4
 8009f60:	b2d2      	uxtb	r2, r2
 8009f62:	440b      	add	r3, r1
 8009f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009f68:	e00a      	b.n	8009f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	b2da      	uxtb	r2, r3
 8009f6e:	4908      	ldr	r1, [pc, #32]	; (8009f90 <__NVIC_SetPriority+0x50>)
 8009f70:	79fb      	ldrb	r3, [r7, #7]
 8009f72:	f003 030f 	and.w	r3, r3, #15
 8009f76:	3b04      	subs	r3, #4
 8009f78:	0112      	lsls	r2, r2, #4
 8009f7a:	b2d2      	uxtb	r2, r2
 8009f7c:	440b      	add	r3, r1
 8009f7e:	761a      	strb	r2, [r3, #24]
}
 8009f80:	bf00      	nop
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	e000e100 	.word	0xe000e100
 8009f90:	e000ed00 	.word	0xe000ed00

08009f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b089      	sub	sp, #36	; 0x24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f003 0307 	and.w	r3, r3, #7
 8009fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	f1c3 0307 	rsb	r3, r3, #7
 8009fae:	2b04      	cmp	r3, #4
 8009fb0:	bf28      	it	cs
 8009fb2:	2304      	movcs	r3, #4
 8009fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	3304      	adds	r3, #4
 8009fba:	2b06      	cmp	r3, #6
 8009fbc:	d902      	bls.n	8009fc4 <NVIC_EncodePriority+0x30>
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	3b03      	subs	r3, #3
 8009fc2:	e000      	b.n	8009fc6 <NVIC_EncodePriority+0x32>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd2:	43da      	mvns	r2, r3
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	401a      	ands	r2, r3
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8009fe6:	43d9      	mvns	r1, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009fec:	4313      	orrs	r3, r2
         );
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3724      	adds	r7, #36	; 0x24
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr

08009ffa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b082      	sub	sp, #8
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f7ff ff4c 	bl	8009ea0 <__NVIC_SetPriorityGrouping>
}
 800a008:	bf00      	nop
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	4603      	mov	r3, r0
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	607a      	str	r2, [r7, #4]
 800a01c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a01e:	2300      	movs	r3, #0
 800a020:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a022:	f7ff ff61 	bl	8009ee8 <__NVIC_GetPriorityGrouping>
 800a026:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	68b9      	ldr	r1, [r7, #8]
 800a02c:	6978      	ldr	r0, [r7, #20]
 800a02e:	f7ff ffb1 	bl	8009f94 <NVIC_EncodePriority>
 800a032:	4602      	mov	r2, r0
 800a034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a038:	4611      	mov	r1, r2
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7ff ff80 	bl	8009f40 <__NVIC_SetPriority>
}
 800a040:	bf00      	nop
 800a042:	3718      	adds	r7, #24
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	4603      	mov	r3, r0
 800a050:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a056:	4618      	mov	r0, r3
 800a058:	f7ff ff54 	bl	8009f04 <__NVIC_EnableIRQ>
}
 800a05c:	bf00      	nop
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a06c:	2300      	movs	r3, #0
 800a06e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a070:	f7ff fad4 	bl	800961c <HAL_GetTick>
 800a074:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d101      	bne.n	800a080 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	e099      	b.n	800a1b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2202      	movs	r2, #2
 800a084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f022 0201 	bic.w	r2, r2, #1
 800a09e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a0a0:	e00f      	b.n	800a0c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a0a2:	f7ff fabb 	bl	800961c <HAL_GetTick>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	2b05      	cmp	r3, #5
 800a0ae:	d908      	bls.n	800a0c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2220      	movs	r2, #32
 800a0b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2203      	movs	r2, #3
 800a0ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e078      	b.n	800a1b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 0301 	and.w	r3, r3, #1
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1e8      	bne.n	800a0a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a0d8:	697a      	ldr	r2, [r7, #20]
 800a0da:	4b38      	ldr	r3, [pc, #224]	; (800a1bc <HAL_DMA_Init+0x158>)
 800a0dc:	4013      	ands	r3, r2
 800a0de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	685a      	ldr	r2, [r3, #4]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a0ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a0fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a106:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a1b      	ldr	r3, [r3, #32]
 800a10c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a10e:	697a      	ldr	r2, [r7, #20]
 800a110:	4313      	orrs	r3, r2
 800a112:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a118:	2b04      	cmp	r3, #4
 800a11a:	d107      	bne.n	800a12c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a124:	4313      	orrs	r3, r2
 800a126:	697a      	ldr	r2, [r7, #20]
 800a128:	4313      	orrs	r3, r2
 800a12a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	697a      	ldr	r2, [r7, #20]
 800a132:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	f023 0307 	bic.w	r3, r3, #7
 800a142:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a152:	2b04      	cmp	r3, #4
 800a154:	d117      	bne.n	800a186 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a15a:	697a      	ldr	r2, [r7, #20]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00e      	beq.n	800a186 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fb01 	bl	800a770 <DMA_CheckFifoParam>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d008      	beq.n	800a186 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2240      	movs	r2, #64	; 0x40
 800a178:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a182:	2301      	movs	r3, #1
 800a184:	e016      	b.n	800a1b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 fab8 	bl	800a704 <DMA_CalcBaseAndBitshift>
 800a194:	4603      	mov	r3, r0
 800a196:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a19c:	223f      	movs	r2, #63	; 0x3f
 800a19e:	409a      	lsls	r2, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3718      	adds	r7, #24
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	f010803f 	.word	0xf010803f

0800a1c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
 800a1cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d101      	bne.n	800a1e6 <HAL_DMA_Start_IT+0x26>
 800a1e2:	2302      	movs	r3, #2
 800a1e4:	e040      	b.n	800a268 <HAL_DMA_Start_IT+0xa8>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d12f      	bne.n	800a25a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2202      	movs	r2, #2
 800a1fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	68b9      	ldr	r1, [r7, #8]
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f000 fa4a 	bl	800a6a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a218:	223f      	movs	r2, #63	; 0x3f
 800a21a:	409a      	lsls	r2, r3
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f042 0216 	orr.w	r2, r2, #22
 800a22e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a234:	2b00      	cmp	r3, #0
 800a236:	d007      	beq.n	800a248 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f042 0208 	orr.w	r2, r2, #8
 800a246:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f042 0201 	orr.w	r2, r2, #1
 800a256:	601a      	str	r2, [r3, #0]
 800a258:	e005      	b.n	800a266 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a262:	2302      	movs	r3, #2
 800a264:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a266:	7dfb      	ldrb	r3, [r7, #23]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3718      	adds	r7, #24
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a27c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a27e:	f7ff f9cd 	bl	800961c <HAL_GetTick>
 800a282:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	d008      	beq.n	800a2a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2280      	movs	r2, #128	; 0x80
 800a294:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e052      	b.n	800a348 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f022 0216 	bic.w	r2, r2, #22
 800a2b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	695a      	ldr	r2, [r3, #20]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a2c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d103      	bne.n	800a2d2 <HAL_DMA_Abort+0x62>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d007      	beq.n	800a2e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f022 0208 	bic.w	r2, r2, #8
 800a2e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f022 0201 	bic.w	r2, r2, #1
 800a2f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a2f2:	e013      	b.n	800a31c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a2f4:	f7ff f992 	bl	800961c <HAL_GetTick>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	1ad3      	subs	r3, r2, r3
 800a2fe:	2b05      	cmp	r3, #5
 800a300:	d90c      	bls.n	800a31c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2220      	movs	r2, #32
 800a306:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2203      	movs	r2, #3
 800a30c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800a318:	2303      	movs	r3, #3
 800a31a:	e015      	b.n	800a348 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f003 0301 	and.w	r3, r3, #1
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1e4      	bne.n	800a2f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a32e:	223f      	movs	r2, #63	; 0x3f
 800a330:	409a      	lsls	r2, r3
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800a346:	2300      	movs	r3, #0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	2b02      	cmp	r3, #2
 800a362:	d004      	beq.n	800a36e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2280      	movs	r2, #128	; 0x80
 800a368:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	e00c      	b.n	800a388 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2205      	movs	r2, #5
 800a372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f022 0201 	bic.w	r2, r2, #1
 800a384:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a39c:	2300      	movs	r3, #0
 800a39e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a3a0:	4b8e      	ldr	r3, [pc, #568]	; (800a5dc <HAL_DMA_IRQHandler+0x248>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a8e      	ldr	r2, [pc, #568]	; (800a5e0 <HAL_DMA_IRQHandler+0x24c>)
 800a3a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3aa:	0a9b      	lsrs	r3, r3, #10
 800a3ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3be:	2208      	movs	r2, #8
 800a3c0:	409a      	lsls	r2, r3
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d01a      	beq.n	800a400 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f003 0304 	and.w	r3, r3, #4
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d013      	beq.n	800a400 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f022 0204 	bic.w	r2, r2, #4
 800a3e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ec:	2208      	movs	r2, #8
 800a3ee:	409a      	lsls	r2, r3
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3f8:	f043 0201 	orr.w	r2, r3, #1
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a404:	2201      	movs	r2, #1
 800a406:	409a      	lsls	r2, r3
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	4013      	ands	r3, r2
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d012      	beq.n	800a436 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	695b      	ldr	r3, [r3, #20]
 800a416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00b      	beq.n	800a436 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a422:	2201      	movs	r2, #1
 800a424:	409a      	lsls	r2, r3
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a42e:	f043 0202 	orr.w	r2, r3, #2
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a43a:	2204      	movs	r2, #4
 800a43c:	409a      	lsls	r2, r3
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	4013      	ands	r3, r2
 800a442:	2b00      	cmp	r3, #0
 800a444:	d012      	beq.n	800a46c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f003 0302 	and.w	r3, r3, #2
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00b      	beq.n	800a46c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a458:	2204      	movs	r2, #4
 800a45a:	409a      	lsls	r2, r3
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a464:	f043 0204 	orr.w	r2, r3, #4
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a470:	2210      	movs	r2, #16
 800a472:	409a      	lsls	r2, r3
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	4013      	ands	r3, r2
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d043      	beq.n	800a504 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0308 	and.w	r3, r3, #8
 800a486:	2b00      	cmp	r3, #0
 800a488:	d03c      	beq.n	800a504 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a48e:	2210      	movs	r2, #16
 800a490:	409a      	lsls	r2, r3
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d018      	beq.n	800a4d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d108      	bne.n	800a4c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d024      	beq.n	800a504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	4798      	blx	r3
 800a4c2:	e01f      	b.n	800a504 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d01b      	beq.n	800a504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	4798      	blx	r3
 800a4d4:	e016      	b.n	800a504 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d107      	bne.n	800a4f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f022 0208 	bic.w	r2, r2, #8
 800a4f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d003      	beq.n	800a504 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a508:	2220      	movs	r2, #32
 800a50a:	409a      	lsls	r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4013      	ands	r3, r2
 800a510:	2b00      	cmp	r3, #0
 800a512:	f000 808f 	beq.w	800a634 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f003 0310 	and.w	r3, r3, #16
 800a520:	2b00      	cmp	r3, #0
 800a522:	f000 8087 	beq.w	800a634 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a52a:	2220      	movs	r2, #32
 800a52c:	409a      	lsls	r2, r3
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2b05      	cmp	r3, #5
 800a53c:	d136      	bne.n	800a5ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f022 0216 	bic.w	r2, r2, #22
 800a54c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	695a      	ldr	r2, [r3, #20]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a55c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a562:	2b00      	cmp	r3, #0
 800a564:	d103      	bne.n	800a56e <HAL_DMA_IRQHandler+0x1da>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d007      	beq.n	800a57e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f022 0208 	bic.w	r2, r2, #8
 800a57c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a582:	223f      	movs	r2, #63	; 0x3f
 800a584:	409a      	lsls	r2, r3
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d07e      	beq.n	800a6a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	4798      	blx	r3
        }
        return;
 800a5aa:	e079      	b.n	800a6a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d01d      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10d      	bne.n	800a5e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d031      	beq.n	800a634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	4798      	blx	r3
 800a5d8:	e02c      	b.n	800a634 <HAL_DMA_IRQHandler+0x2a0>
 800a5da:	bf00      	nop
 800a5dc:	20000004 	.word	0x20000004
 800a5e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d023      	beq.n	800a634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	4798      	blx	r3
 800a5f4:	e01e      	b.n	800a634 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a600:	2b00      	cmp	r3, #0
 800a602:	d10f      	bne.n	800a624 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f022 0210 	bic.w	r2, r2, #16
 800a612:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d003      	beq.n	800a634 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d032      	beq.n	800a6a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a640:	f003 0301 	and.w	r3, r3, #1
 800a644:	2b00      	cmp	r3, #0
 800a646:	d022      	beq.n	800a68e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2205      	movs	r2, #5
 800a64c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f022 0201 	bic.w	r2, r2, #1
 800a65e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	3301      	adds	r3, #1
 800a664:	60bb      	str	r3, [r7, #8]
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d307      	bcc.n	800a67c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1f2      	bne.n	800a660 <HAL_DMA_IRQHandler+0x2cc>
 800a67a:	e000      	b.n	800a67e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800a67c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2201      	movs	r2, #1
 800a682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a692:	2b00      	cmp	r3, #0
 800a694:	d005      	beq.n	800a6a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	4798      	blx	r3
 800a69e:	e000      	b.n	800a6a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 800a6a0:	bf00      	nop
    }
  }
}
 800a6a2:	3718      	adds	r7, #24
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
 800a6b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a6c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	683a      	ldr	r2, [r7, #0]
 800a6cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	2b40      	cmp	r3, #64	; 0x40
 800a6d4:	d108      	bne.n	800a6e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	68ba      	ldr	r2, [r7, #8]
 800a6e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a6e6:	e007      	b.n	800a6f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	60da      	str	r2, [r3, #12]
}
 800a6f8:	bf00      	nop
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	b2db      	uxtb	r3, r3
 800a712:	3b10      	subs	r3, #16
 800a714:	4a14      	ldr	r2, [pc, #80]	; (800a768 <DMA_CalcBaseAndBitshift+0x64>)
 800a716:	fba2 2303 	umull	r2, r3, r2, r3
 800a71a:	091b      	lsrs	r3, r3, #4
 800a71c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a71e:	4a13      	ldr	r2, [pc, #76]	; (800a76c <DMA_CalcBaseAndBitshift+0x68>)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	4413      	add	r3, r2
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	461a      	mov	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2b03      	cmp	r3, #3
 800a730:	d909      	bls.n	800a746 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a73a:	f023 0303 	bic.w	r3, r3, #3
 800a73e:	1d1a      	adds	r2, r3, #4
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	659a      	str	r2, [r3, #88]	; 0x58
 800a744:	e007      	b.n	800a756 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a74e:	f023 0303 	bic.w	r3, r3, #3
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3714      	adds	r7, #20
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	aaaaaaab 	.word	0xaaaaaaab
 800a76c:	08031278 	.word	0x08031278

0800a770 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a778:	2300      	movs	r3, #0
 800a77a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a780:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d11f      	bne.n	800a7ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	2b03      	cmp	r3, #3
 800a78e:	d856      	bhi.n	800a83e <DMA_CheckFifoParam+0xce>
 800a790:	a201      	add	r2, pc, #4	; (adr r2, 800a798 <DMA_CheckFifoParam+0x28>)
 800a792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a796:	bf00      	nop
 800a798:	0800a7a9 	.word	0x0800a7a9
 800a79c:	0800a7bb 	.word	0x0800a7bb
 800a7a0:	0800a7a9 	.word	0x0800a7a9
 800a7a4:	0800a83f 	.word	0x0800a83f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d046      	beq.n	800a842 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a7b8:	e043      	b.n	800a842 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a7c2:	d140      	bne.n	800a846 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a7c8:	e03d      	b.n	800a846 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	699b      	ldr	r3, [r3, #24]
 800a7ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7d2:	d121      	bne.n	800a818 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	2b03      	cmp	r3, #3
 800a7d8:	d837      	bhi.n	800a84a <DMA_CheckFifoParam+0xda>
 800a7da:	a201      	add	r2, pc, #4	; (adr r2, 800a7e0 <DMA_CheckFifoParam+0x70>)
 800a7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e0:	0800a7f1 	.word	0x0800a7f1
 800a7e4:	0800a7f7 	.word	0x0800a7f7
 800a7e8:	0800a7f1 	.word	0x0800a7f1
 800a7ec:	0800a809 	.word	0x0800a809
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a7f4:	e030      	b.n	800a858 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d025      	beq.n	800a84e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a806:	e022      	b.n	800a84e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a810:	d11f      	bne.n	800a852 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a812:	2301      	movs	r3, #1
 800a814:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a816:	e01c      	b.n	800a852 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	d903      	bls.n	800a826 <DMA_CheckFifoParam+0xb6>
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	2b03      	cmp	r3, #3
 800a822:	d003      	beq.n	800a82c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a824:	e018      	b.n	800a858 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a826:	2301      	movs	r3, #1
 800a828:	73fb      	strb	r3, [r7, #15]
      break;
 800a82a:	e015      	b.n	800a858 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00e      	beq.n	800a856 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	73fb      	strb	r3, [r7, #15]
      break;
 800a83c:	e00b      	b.n	800a856 <DMA_CheckFifoParam+0xe6>
      break;
 800a83e:	bf00      	nop
 800a840:	e00a      	b.n	800a858 <DMA_CheckFifoParam+0xe8>
      break;
 800a842:	bf00      	nop
 800a844:	e008      	b.n	800a858 <DMA_CheckFifoParam+0xe8>
      break;
 800a846:	bf00      	nop
 800a848:	e006      	b.n	800a858 <DMA_CheckFifoParam+0xe8>
      break;
 800a84a:	bf00      	nop
 800a84c:	e004      	b.n	800a858 <DMA_CheckFifoParam+0xe8>
      break;
 800a84e:	bf00      	nop
 800a850:	e002      	b.n	800a858 <DMA_CheckFifoParam+0xe8>
      break;   
 800a852:	bf00      	nop
 800a854:	e000      	b.n	800a858 <DMA_CheckFifoParam+0xe8>
      break;
 800a856:	bf00      	nop
    }
  } 
  
  return status; 
 800a858:	7bfb      	ldrb	r3, [r7, #15]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3714      	adds	r7, #20
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop

0800a868 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b086      	sub	sp, #24
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a87a:	4b23      	ldr	r3, [pc, #140]	; (800a908 <HAL_FLASH_Program+0xa0>)
 800a87c:	7e1b      	ldrb	r3, [r3, #24]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d101      	bne.n	800a886 <HAL_FLASH_Program+0x1e>
 800a882:	2302      	movs	r3, #2
 800a884:	e03b      	b.n	800a8fe <HAL_FLASH_Program+0x96>
 800a886:	4b20      	ldr	r3, [pc, #128]	; (800a908 <HAL_FLASH_Program+0xa0>)
 800a888:	2201      	movs	r2, #1
 800a88a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a88c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a890:	f000 f87c 	bl	800a98c <FLASH_WaitForLastOperation>
 800a894:	4603      	mov	r3, r0
 800a896:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800a898:	7dfb      	ldrb	r3, [r7, #23]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d12b      	bne.n	800a8f6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d105      	bne.n	800a8b0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800a8a4:	783b      	ldrb	r3, [r7, #0]
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	68b8      	ldr	r0, [r7, #8]
 800a8aa:	f000 f927 	bl	800aafc <FLASH_Program_Byte>
 800a8ae:	e016      	b.n	800a8de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d105      	bne.n	800a8c2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800a8b6:	883b      	ldrh	r3, [r7, #0]
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	68b8      	ldr	r0, [r7, #8]
 800a8bc:	f000 f8fa 	bl	800aab4 <FLASH_Program_HalfWord>
 800a8c0:	e00d      	b.n	800a8de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d105      	bne.n	800a8d4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	68b8      	ldr	r0, [r7, #8]
 800a8ce:	f000 f8cf 	bl	800aa70 <FLASH_Program_Word>
 800a8d2:	e004      	b.n	800a8de <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800a8d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8d8:	68b8      	ldr	r0, [r7, #8]
 800a8da:	f000 f897 	bl	800aa0c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a8de:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a8e2:	f000 f853 	bl	800a98c <FLASH_WaitForLastOperation>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800a8ea:	4b08      	ldr	r3, [pc, #32]	; (800a90c <HAL_FLASH_Program+0xa4>)
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	4a07      	ldr	r2, [pc, #28]	; (800a90c <HAL_FLASH_Program+0xa4>)
 800a8f0:	f023 0301 	bic.w	r3, r3, #1
 800a8f4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a8f6:	4b04      	ldr	r3, [pc, #16]	; (800a908 <HAL_FLASH_Program+0xa0>)
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	761a      	strb	r2, [r3, #24]
  
  return status;
 800a8fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3718      	adds	r7, #24
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	20000bfc 	.word	0x20000bfc
 800a90c:	40023c00 	.word	0x40023c00

0800a910 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a916:	2300      	movs	r3, #0
 800a918:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a91a:	4b0b      	ldr	r3, [pc, #44]	; (800a948 <HAL_FLASH_Unlock+0x38>)
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	da0b      	bge.n	800a93a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a922:	4b09      	ldr	r3, [pc, #36]	; (800a948 <HAL_FLASH_Unlock+0x38>)
 800a924:	4a09      	ldr	r2, [pc, #36]	; (800a94c <HAL_FLASH_Unlock+0x3c>)
 800a926:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a928:	4b07      	ldr	r3, [pc, #28]	; (800a948 <HAL_FLASH_Unlock+0x38>)
 800a92a:	4a09      	ldr	r2, [pc, #36]	; (800a950 <HAL_FLASH_Unlock+0x40>)
 800a92c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a92e:	4b06      	ldr	r3, [pc, #24]	; (800a948 <HAL_FLASH_Unlock+0x38>)
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	2b00      	cmp	r3, #0
 800a934:	da01      	bge.n	800a93a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800a93a:	79fb      	ldrb	r3, [r7, #7]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	40023c00 	.word	0x40023c00
 800a94c:	45670123 	.word	0x45670123
 800a950:	cdef89ab 	.word	0xcdef89ab

0800a954 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a954:	b480      	push	{r7}
 800a956:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800a958:	4b05      	ldr	r3, [pc, #20]	; (800a970 <HAL_FLASH_Lock+0x1c>)
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	4a04      	ldr	r2, [pc, #16]	; (800a970 <HAL_FLASH_Lock+0x1c>)
 800a95e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a962:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	40023c00 	.word	0x40023c00

0800a974 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800a974:	b480      	push	{r7}
 800a976:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800a978:	4b03      	ldr	r3, [pc, #12]	; (800a988 <HAL_FLASH_GetError+0x14>)
 800a97a:	69db      	ldr	r3, [r3, #28]
}  
 800a97c:	4618      	mov	r0, r3
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	20000bfc 	.word	0x20000bfc

0800a98c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a994:	2300      	movs	r3, #0
 800a996:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a998:	4b1a      	ldr	r3, [pc, #104]	; (800aa04 <FLASH_WaitForLastOperation+0x78>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800a99e:	f7fe fe3d 	bl	800961c <HAL_GetTick>
 800a9a2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a9a4:	e010      	b.n	800a9c8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ac:	d00c      	beq.n	800a9c8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d007      	beq.n	800a9c4 <FLASH_WaitForLastOperation+0x38>
 800a9b4:	f7fe fe32 	bl	800961c <HAL_GetTick>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d201      	bcs.n	800a9c8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a9c4:	2303      	movs	r3, #3
 800a9c6:	e019      	b.n	800a9fc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a9c8:	4b0f      	ldr	r3, [pc, #60]	; (800aa08 <FLASH_WaitForLastOperation+0x7c>)
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1e8      	bne.n	800a9a6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a9d4:	4b0c      	ldr	r3, [pc, #48]	; (800aa08 <FLASH_WaitForLastOperation+0x7c>)
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	f003 0301 	and.w	r3, r3, #1
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d002      	beq.n	800a9e6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a9e0:	4b09      	ldr	r3, [pc, #36]	; (800aa08 <FLASH_WaitForLastOperation+0x7c>)
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a9e6:	4b08      	ldr	r3, [pc, #32]	; (800aa08 <FLASH_WaitForLastOperation+0x7c>)
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d003      	beq.n	800a9fa <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a9f2:	f000 f8a5 	bl	800ab40 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e000      	b.n	800a9fc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800a9fa:	2300      	movs	r3, #0
  
}  
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	20000bfc 	.word	0x20000bfc
 800aa08:	40023c00 	.word	0x40023c00

0800aa0c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aa18:	4b14      	ldr	r3, [pc, #80]	; (800aa6c <FLASH_Program_DoubleWord+0x60>)
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	4a13      	ldr	r2, [pc, #76]	; (800aa6c <FLASH_Program_DoubleWord+0x60>)
 800aa1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800aa24:	4b11      	ldr	r3, [pc, #68]	; (800aa6c <FLASH_Program_DoubleWord+0x60>)
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	4a10      	ldr	r2, [pc, #64]	; (800aa6c <FLASH_Program_DoubleWord+0x60>)
 800aa2a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800aa2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800aa30:	4b0e      	ldr	r3, [pc, #56]	; (800aa6c <FLASH_Program_DoubleWord+0x60>)
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	4a0d      	ldr	r2, [pc, #52]	; (800aa6c <FLASH_Program_DoubleWord+0x60>)
 800aa36:	f043 0301 	orr.w	r3, r3, #1
 800aa3a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	683a      	ldr	r2, [r7, #0]
 800aa40:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800aa42:	f3bf 8f6f 	isb	sy
}
 800aa46:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800aa48:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa4c:	f04f 0200 	mov.w	r2, #0
 800aa50:	f04f 0300 	mov.w	r3, #0
 800aa54:	000a      	movs	r2, r1
 800aa56:	2300      	movs	r3, #0
 800aa58:	68f9      	ldr	r1, [r7, #12]
 800aa5a:	3104      	adds	r1, #4
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	600b      	str	r3, [r1, #0]
}
 800aa60:	bf00      	nop
 800aa62:	3714      	adds	r7, #20
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr
 800aa6c:	40023c00 	.word	0x40023c00

0800aa70 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aa7a:	4b0d      	ldr	r3, [pc, #52]	; (800aab0 <FLASH_Program_Word+0x40>)
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	4a0c      	ldr	r2, [pc, #48]	; (800aab0 <FLASH_Program_Word+0x40>)
 800aa80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa84:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800aa86:	4b0a      	ldr	r3, [pc, #40]	; (800aab0 <FLASH_Program_Word+0x40>)
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	4a09      	ldr	r2, [pc, #36]	; (800aab0 <FLASH_Program_Word+0x40>)
 800aa8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa90:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800aa92:	4b07      	ldr	r3, [pc, #28]	; (800aab0 <FLASH_Program_Word+0x40>)
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	4a06      	ldr	r2, [pc, #24]	; (800aab0 <FLASH_Program_Word+0x40>)
 800aa98:	f043 0301 	orr.w	r3, r3, #1
 800aa9c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	683a      	ldr	r2, [r7, #0]
 800aaa2:	601a      	str	r2, [r3, #0]
}
 800aaa4:	bf00      	nop
 800aaa6:	370c      	adds	r7, #12
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr
 800aab0:	40023c00 	.word	0x40023c00

0800aab4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	460b      	mov	r3, r1
 800aabe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aac0:	4b0d      	ldr	r3, [pc, #52]	; (800aaf8 <FLASH_Program_HalfWord+0x44>)
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	4a0c      	ldr	r2, [pc, #48]	; (800aaf8 <FLASH_Program_HalfWord+0x44>)
 800aac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800aacc:	4b0a      	ldr	r3, [pc, #40]	; (800aaf8 <FLASH_Program_HalfWord+0x44>)
 800aace:	691b      	ldr	r3, [r3, #16]
 800aad0:	4a09      	ldr	r2, [pc, #36]	; (800aaf8 <FLASH_Program_HalfWord+0x44>)
 800aad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aad6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800aad8:	4b07      	ldr	r3, [pc, #28]	; (800aaf8 <FLASH_Program_HalfWord+0x44>)
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	4a06      	ldr	r2, [pc, #24]	; (800aaf8 <FLASH_Program_HalfWord+0x44>)
 800aade:	f043 0301 	orr.w	r3, r3, #1
 800aae2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	887a      	ldrh	r2, [r7, #2]
 800aae8:	801a      	strh	r2, [r3, #0]
}
 800aaea:	bf00      	nop
 800aaec:	370c      	adds	r7, #12
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	40023c00 	.word	0x40023c00

0800aafc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	460b      	mov	r3, r1
 800ab06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ab08:	4b0c      	ldr	r3, [pc, #48]	; (800ab3c <FLASH_Program_Byte+0x40>)
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	4a0b      	ldr	r2, [pc, #44]	; (800ab3c <FLASH_Program_Byte+0x40>)
 800ab0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800ab14:	4b09      	ldr	r3, [pc, #36]	; (800ab3c <FLASH_Program_Byte+0x40>)
 800ab16:	4a09      	ldr	r2, [pc, #36]	; (800ab3c <FLASH_Program_Byte+0x40>)
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ab1c:	4b07      	ldr	r3, [pc, #28]	; (800ab3c <FLASH_Program_Byte+0x40>)
 800ab1e:	691b      	ldr	r3, [r3, #16]
 800ab20:	4a06      	ldr	r2, [pc, #24]	; (800ab3c <FLASH_Program_Byte+0x40>)
 800ab22:	f043 0301 	orr.w	r3, r3, #1
 800ab26:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	78fa      	ldrb	r2, [r7, #3]
 800ab2c:	701a      	strb	r2, [r3, #0]
}
 800ab2e:	bf00      	nop
 800ab30:	370c      	adds	r7, #12
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop
 800ab3c:	40023c00 	.word	0x40023c00

0800ab40 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800ab40:	b480      	push	{r7}
 800ab42:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800ab44:	4b27      	ldr	r3, [pc, #156]	; (800abe4 <FLASH_SetErrorCode+0xa4>)
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	f003 0310 	and.w	r3, r3, #16
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d008      	beq.n	800ab62 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ab50:	4b25      	ldr	r3, [pc, #148]	; (800abe8 <FLASH_SetErrorCode+0xa8>)
 800ab52:	69db      	ldr	r3, [r3, #28]
 800ab54:	f043 0310 	orr.w	r3, r3, #16
 800ab58:	4a23      	ldr	r2, [pc, #140]	; (800abe8 <FLASH_SetErrorCode+0xa8>)
 800ab5a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800ab5c:	4b21      	ldr	r3, [pc, #132]	; (800abe4 <FLASH_SetErrorCode+0xa4>)
 800ab5e:	2210      	movs	r2, #16
 800ab60:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800ab62:	4b20      	ldr	r3, [pc, #128]	; (800abe4 <FLASH_SetErrorCode+0xa4>)
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	f003 0320 	and.w	r3, r3, #32
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d008      	beq.n	800ab80 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ab6e:	4b1e      	ldr	r3, [pc, #120]	; (800abe8 <FLASH_SetErrorCode+0xa8>)
 800ab70:	69db      	ldr	r3, [r3, #28]
 800ab72:	f043 0308 	orr.w	r3, r3, #8
 800ab76:	4a1c      	ldr	r2, [pc, #112]	; (800abe8 <FLASH_SetErrorCode+0xa8>)
 800ab78:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800ab7a:	4b1a      	ldr	r3, [pc, #104]	; (800abe4 <FLASH_SetErrorCode+0xa4>)
 800ab7c:	2220      	movs	r2, #32
 800ab7e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800ab80:	4b18      	ldr	r3, [pc, #96]	; (800abe4 <FLASH_SetErrorCode+0xa4>)
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d008      	beq.n	800ab9e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ab8c:	4b16      	ldr	r3, [pc, #88]	; (800abe8 <FLASH_SetErrorCode+0xa8>)
 800ab8e:	69db      	ldr	r3, [r3, #28]
 800ab90:	f043 0304 	orr.w	r3, r3, #4
 800ab94:	4a14      	ldr	r2, [pc, #80]	; (800abe8 <FLASH_SetErrorCode+0xa8>)
 800ab96:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ab98:	4b12      	ldr	r3, [pc, #72]	; (800abe4 <FLASH_SetErrorCode+0xa4>)
 800ab9a:	2240      	movs	r2, #64	; 0x40
 800ab9c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800ab9e:	4b11      	ldr	r3, [pc, #68]	; (800abe4 <FLASH_SetErrorCode+0xa4>)
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d008      	beq.n	800abbc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800abaa:	4b0f      	ldr	r3, [pc, #60]	; (800abe8 <FLASH_SetErrorCode+0xa8>)
 800abac:	69db      	ldr	r3, [r3, #28]
 800abae:	f043 0302 	orr.w	r3, r3, #2
 800abb2:	4a0d      	ldr	r2, [pc, #52]	; (800abe8 <FLASH_SetErrorCode+0xa8>)
 800abb4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800abb6:	4b0b      	ldr	r3, [pc, #44]	; (800abe4 <FLASH_SetErrorCode+0xa4>)
 800abb8:	2280      	movs	r2, #128	; 0x80
 800abba:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800abbc:	4b09      	ldr	r3, [pc, #36]	; (800abe4 <FLASH_SetErrorCode+0xa4>)
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	f003 0302 	and.w	r3, r3, #2
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d008      	beq.n	800abda <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800abc8:	4b07      	ldr	r3, [pc, #28]	; (800abe8 <FLASH_SetErrorCode+0xa8>)
 800abca:	69db      	ldr	r3, [r3, #28]
 800abcc:	f043 0320 	orr.w	r3, r3, #32
 800abd0:	4a05      	ldr	r2, [pc, #20]	; (800abe8 <FLASH_SetErrorCode+0xa8>)
 800abd2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800abd4:	4b03      	ldr	r3, [pc, #12]	; (800abe4 <FLASH_SetErrorCode+0xa4>)
 800abd6:	2202      	movs	r2, #2
 800abd8:	60da      	str	r2, [r3, #12]
  }
}
 800abda:	bf00      	nop
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr
 800abe4:	40023c00 	.word	0x40023c00
 800abe8:	20000bfc 	.word	0x20000bfc

0800abec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800abec:	b480      	push	{r7}
 800abee:	b089      	sub	sp, #36	; 0x24
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800abf6:	2300      	movs	r3, #0
 800abf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800abfa:	2300      	movs	r3, #0
 800abfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800abfe:	2300      	movs	r3, #0
 800ac00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ac02:	2300      	movs	r3, #0
 800ac04:	61fb      	str	r3, [r7, #28]
 800ac06:	e16b      	b.n	800aee0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ac08:	2201      	movs	r2, #1
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	4013      	ands	r3, r2
 800ac1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ac1c:	693a      	ldr	r2, [r7, #16]
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	f040 815a 	bne.w	800aeda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	f003 0303 	and.w	r3, r3, #3
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d005      	beq.n	800ac3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d130      	bne.n	800aca0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	005b      	lsls	r3, r3, #1
 800ac48:	2203      	movs	r2, #3
 800ac4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac4e:	43db      	mvns	r3, r3
 800ac50:	69ba      	ldr	r2, [r7, #24]
 800ac52:	4013      	ands	r3, r2
 800ac54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	68da      	ldr	r2, [r3, #12]
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	005b      	lsls	r3, r3, #1
 800ac5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac62:	69ba      	ldr	r2, [r7, #24]
 800ac64:	4313      	orrs	r3, r2
 800ac66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	69ba      	ldr	r2, [r7, #24]
 800ac6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ac74:	2201      	movs	r2, #1
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	fa02 f303 	lsl.w	r3, r2, r3
 800ac7c:	43db      	mvns	r3, r3
 800ac7e:	69ba      	ldr	r2, [r7, #24]
 800ac80:	4013      	ands	r3, r2
 800ac82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	091b      	lsrs	r3, r3, #4
 800ac8a:	f003 0201 	and.w	r2, r3, #1
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	fa02 f303 	lsl.w	r3, r2, r3
 800ac94:	69ba      	ldr	r2, [r7, #24]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	69ba      	ldr	r2, [r7, #24]
 800ac9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	f003 0303 	and.w	r3, r3, #3
 800aca8:	2b03      	cmp	r3, #3
 800acaa:	d017      	beq.n	800acdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	005b      	lsls	r3, r3, #1
 800acb6:	2203      	movs	r2, #3
 800acb8:	fa02 f303 	lsl.w	r3, r2, r3
 800acbc:	43db      	mvns	r3, r3
 800acbe:	69ba      	ldr	r2, [r7, #24]
 800acc0:	4013      	ands	r3, r2
 800acc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	689a      	ldr	r2, [r3, #8]
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	005b      	lsls	r3, r3, #1
 800accc:	fa02 f303 	lsl.w	r3, r2, r3
 800acd0:	69ba      	ldr	r2, [r7, #24]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	69ba      	ldr	r2, [r7, #24]
 800acda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	f003 0303 	and.w	r3, r3, #3
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	d123      	bne.n	800ad30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	08da      	lsrs	r2, r3, #3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	3208      	adds	r2, #8
 800acf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	f003 0307 	and.w	r3, r3, #7
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	220f      	movs	r2, #15
 800ad00:	fa02 f303 	lsl.w	r3, r2, r3
 800ad04:	43db      	mvns	r3, r3
 800ad06:	69ba      	ldr	r2, [r7, #24]
 800ad08:	4013      	ands	r3, r2
 800ad0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	691a      	ldr	r2, [r3, #16]
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	f003 0307 	and.w	r3, r3, #7
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	fa02 f303 	lsl.w	r3, r2, r3
 800ad1c:	69ba      	ldr	r2, [r7, #24]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	08da      	lsrs	r2, r3, #3
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	3208      	adds	r2, #8
 800ad2a:	69b9      	ldr	r1, [r7, #24]
 800ad2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	005b      	lsls	r3, r3, #1
 800ad3a:	2203      	movs	r2, #3
 800ad3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad40:	43db      	mvns	r3, r3
 800ad42:	69ba      	ldr	r2, [r7, #24]
 800ad44:	4013      	ands	r3, r2
 800ad46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	f003 0203 	and.w	r2, r3, #3
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	005b      	lsls	r3, r3, #1
 800ad54:	fa02 f303 	lsl.w	r3, r2, r3
 800ad58:	69ba      	ldr	r2, [r7, #24]
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	69ba      	ldr	r2, [r7, #24]
 800ad62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f000 80b4 	beq.w	800aeda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad72:	2300      	movs	r3, #0
 800ad74:	60fb      	str	r3, [r7, #12]
 800ad76:	4b60      	ldr	r3, [pc, #384]	; (800aef8 <HAL_GPIO_Init+0x30c>)
 800ad78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad7a:	4a5f      	ldr	r2, [pc, #380]	; (800aef8 <HAL_GPIO_Init+0x30c>)
 800ad7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad80:	6453      	str	r3, [r2, #68]	; 0x44
 800ad82:	4b5d      	ldr	r3, [pc, #372]	; (800aef8 <HAL_GPIO_Init+0x30c>)
 800ad84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad8a:	60fb      	str	r3, [r7, #12]
 800ad8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ad8e:	4a5b      	ldr	r2, [pc, #364]	; (800aefc <HAL_GPIO_Init+0x310>)
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	089b      	lsrs	r3, r3, #2
 800ad94:	3302      	adds	r3, #2
 800ad96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	f003 0303 	and.w	r3, r3, #3
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	220f      	movs	r2, #15
 800ada6:	fa02 f303 	lsl.w	r3, r2, r3
 800adaa:	43db      	mvns	r3, r3
 800adac:	69ba      	ldr	r2, [r7, #24]
 800adae:	4013      	ands	r3, r2
 800adb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a52      	ldr	r2, [pc, #328]	; (800af00 <HAL_GPIO_Init+0x314>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d02b      	beq.n	800ae12 <HAL_GPIO_Init+0x226>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4a51      	ldr	r2, [pc, #324]	; (800af04 <HAL_GPIO_Init+0x318>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d025      	beq.n	800ae0e <HAL_GPIO_Init+0x222>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a50      	ldr	r2, [pc, #320]	; (800af08 <HAL_GPIO_Init+0x31c>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d01f      	beq.n	800ae0a <HAL_GPIO_Init+0x21e>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4a4f      	ldr	r2, [pc, #316]	; (800af0c <HAL_GPIO_Init+0x320>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d019      	beq.n	800ae06 <HAL_GPIO_Init+0x21a>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4a4e      	ldr	r2, [pc, #312]	; (800af10 <HAL_GPIO_Init+0x324>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d013      	beq.n	800ae02 <HAL_GPIO_Init+0x216>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4a4d      	ldr	r2, [pc, #308]	; (800af14 <HAL_GPIO_Init+0x328>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d00d      	beq.n	800adfe <HAL_GPIO_Init+0x212>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4a4c      	ldr	r2, [pc, #304]	; (800af18 <HAL_GPIO_Init+0x32c>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d007      	beq.n	800adfa <HAL_GPIO_Init+0x20e>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	4a4b      	ldr	r2, [pc, #300]	; (800af1c <HAL_GPIO_Init+0x330>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d101      	bne.n	800adf6 <HAL_GPIO_Init+0x20a>
 800adf2:	2307      	movs	r3, #7
 800adf4:	e00e      	b.n	800ae14 <HAL_GPIO_Init+0x228>
 800adf6:	2308      	movs	r3, #8
 800adf8:	e00c      	b.n	800ae14 <HAL_GPIO_Init+0x228>
 800adfa:	2306      	movs	r3, #6
 800adfc:	e00a      	b.n	800ae14 <HAL_GPIO_Init+0x228>
 800adfe:	2305      	movs	r3, #5
 800ae00:	e008      	b.n	800ae14 <HAL_GPIO_Init+0x228>
 800ae02:	2304      	movs	r3, #4
 800ae04:	e006      	b.n	800ae14 <HAL_GPIO_Init+0x228>
 800ae06:	2303      	movs	r3, #3
 800ae08:	e004      	b.n	800ae14 <HAL_GPIO_Init+0x228>
 800ae0a:	2302      	movs	r3, #2
 800ae0c:	e002      	b.n	800ae14 <HAL_GPIO_Init+0x228>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e000      	b.n	800ae14 <HAL_GPIO_Init+0x228>
 800ae12:	2300      	movs	r3, #0
 800ae14:	69fa      	ldr	r2, [r7, #28]
 800ae16:	f002 0203 	and.w	r2, r2, #3
 800ae1a:	0092      	lsls	r2, r2, #2
 800ae1c:	4093      	lsls	r3, r2
 800ae1e:	69ba      	ldr	r2, [r7, #24]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ae24:	4935      	ldr	r1, [pc, #212]	; (800aefc <HAL_GPIO_Init+0x310>)
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	089b      	lsrs	r3, r3, #2
 800ae2a:	3302      	adds	r3, #2
 800ae2c:	69ba      	ldr	r2, [r7, #24]
 800ae2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ae32:	4b3b      	ldr	r3, [pc, #236]	; (800af20 <HAL_GPIO_Init+0x334>)
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	43db      	mvns	r3, r3
 800ae3c:	69ba      	ldr	r2, [r7, #24]
 800ae3e:	4013      	ands	r3, r2
 800ae40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d003      	beq.n	800ae56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800ae4e:	69ba      	ldr	r2, [r7, #24]
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ae56:	4a32      	ldr	r2, [pc, #200]	; (800af20 <HAL_GPIO_Init+0x334>)
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ae5c:	4b30      	ldr	r3, [pc, #192]	; (800af20 <HAL_GPIO_Init+0x334>)
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	43db      	mvns	r3, r3
 800ae66:	69ba      	ldr	r2, [r7, #24]
 800ae68:	4013      	ands	r3, r2
 800ae6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d003      	beq.n	800ae80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800ae78:	69ba      	ldr	r2, [r7, #24]
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ae80:	4a27      	ldr	r2, [pc, #156]	; (800af20 <HAL_GPIO_Init+0x334>)
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800ae86:	4b26      	ldr	r3, [pc, #152]	; (800af20 <HAL_GPIO_Init+0x334>)
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	43db      	mvns	r3, r3
 800ae90:	69ba      	ldr	r2, [r7, #24]
 800ae92:	4013      	ands	r3, r2
 800ae94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d003      	beq.n	800aeaa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800aea2:	69ba      	ldr	r2, [r7, #24]
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800aeaa:	4a1d      	ldr	r2, [pc, #116]	; (800af20 <HAL_GPIO_Init+0x334>)
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800aeb0:	4b1b      	ldr	r3, [pc, #108]	; (800af20 <HAL_GPIO_Init+0x334>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	43db      	mvns	r3, r3
 800aeba:	69ba      	ldr	r2, [r7, #24]
 800aebc:	4013      	ands	r3, r2
 800aebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d003      	beq.n	800aed4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800aecc:	69ba      	ldr	r2, [r7, #24]
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	4313      	orrs	r3, r2
 800aed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800aed4:	4a12      	ldr	r2, [pc, #72]	; (800af20 <HAL_GPIO_Init+0x334>)
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	3301      	adds	r3, #1
 800aede:	61fb      	str	r3, [r7, #28]
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	2b0f      	cmp	r3, #15
 800aee4:	f67f ae90 	bls.w	800ac08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800aee8:	bf00      	nop
 800aeea:	bf00      	nop
 800aeec:	3724      	adds	r7, #36	; 0x24
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	40023800 	.word	0x40023800
 800aefc:	40013800 	.word	0x40013800
 800af00:	40020000 	.word	0x40020000
 800af04:	40020400 	.word	0x40020400
 800af08:	40020800 	.word	0x40020800
 800af0c:	40020c00 	.word	0x40020c00
 800af10:	40021000 	.word	0x40021000
 800af14:	40021400 	.word	0x40021400
 800af18:	40021800 	.word	0x40021800
 800af1c:	40021c00 	.word	0x40021c00
 800af20:	40013c00 	.word	0x40013c00

0800af24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	460b      	mov	r3, r1
 800af2e:	807b      	strh	r3, [r7, #2]
 800af30:	4613      	mov	r3, r2
 800af32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800af34:	787b      	ldrb	r3, [r7, #1]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d003      	beq.n	800af42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800af3a:	887a      	ldrh	r2, [r7, #2]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800af40:	e003      	b.n	800af4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800af42:	887b      	ldrh	r3, [r7, #2]
 800af44:	041a      	lsls	r2, r3, #16
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	619a      	str	r2, [r3, #24]
}
 800af4a:	bf00      	nop
 800af4c:	370c      	adds	r7, #12
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
	...

0800af58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	4603      	mov	r3, r0
 800af60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800af62:	4b08      	ldr	r3, [pc, #32]	; (800af84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800af64:	695a      	ldr	r2, [r3, #20]
 800af66:	88fb      	ldrh	r3, [r7, #6]
 800af68:	4013      	ands	r3, r2
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d006      	beq.n	800af7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800af6e:	4a05      	ldr	r2, [pc, #20]	; (800af84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800af70:	88fb      	ldrh	r3, [r7, #6]
 800af72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800af74:	88fb      	ldrh	r3, [r7, #6]
 800af76:	4618      	mov	r0, r3
 800af78:	f7f7 f9f8 	bl	800236c <HAL_GPIO_EXTI_Callback>
  }
}
 800af7c:	bf00      	nop
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	40013c00 	.word	0x40013c00

0800af88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800af88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af8a:	b08f      	sub	sp, #60	; 0x3c
 800af8c:	af0a      	add	r7, sp, #40	; 0x28
 800af8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d101      	bne.n	800af9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800af96:	2301      	movs	r3, #1
 800af98:	e10f      	b.n	800b1ba <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d106      	bne.n	800afba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f00d fa85 	bl	80184c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2203      	movs	r2, #3
 800afbe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d102      	bne.n	800afd4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4618      	mov	r0, r3
 800afda:	f006 ff36 	bl	8011e4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	603b      	str	r3, [r7, #0]
 800afe4:	687e      	ldr	r6, [r7, #4]
 800afe6:	466d      	mov	r5, sp
 800afe8:	f106 0410 	add.w	r4, r6, #16
 800afec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800afee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aff2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aff4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aff8:	e885 0003 	stmia.w	r5, {r0, r1}
 800affc:	1d33      	adds	r3, r6, #4
 800affe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b000:	6838      	ldr	r0, [r7, #0]
 800b002:	f006 fe0d 	bl	8011c20 <USB_CoreInit>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d005      	beq.n	800b018 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2202      	movs	r2, #2
 800b010:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	e0d0      	b.n	800b1ba <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2100      	movs	r1, #0
 800b01e:	4618      	mov	r0, r3
 800b020:	f006 ff24 	bl	8011e6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b024:	2300      	movs	r3, #0
 800b026:	73fb      	strb	r3, [r7, #15]
 800b028:	e04a      	b.n	800b0c0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b02a:	7bfa      	ldrb	r2, [r7, #15]
 800b02c:	6879      	ldr	r1, [r7, #4]
 800b02e:	4613      	mov	r3, r2
 800b030:	00db      	lsls	r3, r3, #3
 800b032:	4413      	add	r3, r2
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	440b      	add	r3, r1
 800b038:	333d      	adds	r3, #61	; 0x3d
 800b03a:	2201      	movs	r2, #1
 800b03c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b03e:	7bfa      	ldrb	r2, [r7, #15]
 800b040:	6879      	ldr	r1, [r7, #4]
 800b042:	4613      	mov	r3, r2
 800b044:	00db      	lsls	r3, r3, #3
 800b046:	4413      	add	r3, r2
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	440b      	add	r3, r1
 800b04c:	333c      	adds	r3, #60	; 0x3c
 800b04e:	7bfa      	ldrb	r2, [r7, #15]
 800b050:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b052:	7bfa      	ldrb	r2, [r7, #15]
 800b054:	7bfb      	ldrb	r3, [r7, #15]
 800b056:	b298      	uxth	r0, r3
 800b058:	6879      	ldr	r1, [r7, #4]
 800b05a:	4613      	mov	r3, r2
 800b05c:	00db      	lsls	r3, r3, #3
 800b05e:	4413      	add	r3, r2
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	440b      	add	r3, r1
 800b064:	3344      	adds	r3, #68	; 0x44
 800b066:	4602      	mov	r2, r0
 800b068:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b06a:	7bfa      	ldrb	r2, [r7, #15]
 800b06c:	6879      	ldr	r1, [r7, #4]
 800b06e:	4613      	mov	r3, r2
 800b070:	00db      	lsls	r3, r3, #3
 800b072:	4413      	add	r3, r2
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	440b      	add	r3, r1
 800b078:	3340      	adds	r3, #64	; 0x40
 800b07a:	2200      	movs	r2, #0
 800b07c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b07e:	7bfa      	ldrb	r2, [r7, #15]
 800b080:	6879      	ldr	r1, [r7, #4]
 800b082:	4613      	mov	r3, r2
 800b084:	00db      	lsls	r3, r3, #3
 800b086:	4413      	add	r3, r2
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	440b      	add	r3, r1
 800b08c:	3348      	adds	r3, #72	; 0x48
 800b08e:	2200      	movs	r2, #0
 800b090:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b092:	7bfa      	ldrb	r2, [r7, #15]
 800b094:	6879      	ldr	r1, [r7, #4]
 800b096:	4613      	mov	r3, r2
 800b098:	00db      	lsls	r3, r3, #3
 800b09a:	4413      	add	r3, r2
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	440b      	add	r3, r1
 800b0a0:	334c      	adds	r3, #76	; 0x4c
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b0a6:	7bfa      	ldrb	r2, [r7, #15]
 800b0a8:	6879      	ldr	r1, [r7, #4]
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	00db      	lsls	r3, r3, #3
 800b0ae:	4413      	add	r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	440b      	add	r3, r1
 800b0b4:	3354      	adds	r3, #84	; 0x54
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	73fb      	strb	r3, [r7, #15]
 800b0c0:	7bfa      	ldrb	r2, [r7, #15]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d3af      	bcc.n	800b02a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	73fb      	strb	r3, [r7, #15]
 800b0ce:	e044      	b.n	800b15a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b0d0:	7bfa      	ldrb	r2, [r7, #15]
 800b0d2:	6879      	ldr	r1, [r7, #4]
 800b0d4:	4613      	mov	r3, r2
 800b0d6:	00db      	lsls	r3, r3, #3
 800b0d8:	4413      	add	r3, r2
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	440b      	add	r3, r1
 800b0de:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b0e6:	7bfa      	ldrb	r2, [r7, #15]
 800b0e8:	6879      	ldr	r1, [r7, #4]
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	00db      	lsls	r3, r3, #3
 800b0ee:	4413      	add	r3, r2
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	440b      	add	r3, r1
 800b0f4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800b0f8:	7bfa      	ldrb	r2, [r7, #15]
 800b0fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b0fc:	7bfa      	ldrb	r2, [r7, #15]
 800b0fe:	6879      	ldr	r1, [r7, #4]
 800b100:	4613      	mov	r3, r2
 800b102:	00db      	lsls	r3, r3, #3
 800b104:	4413      	add	r3, r2
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	440b      	add	r3, r1
 800b10a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b10e:	2200      	movs	r2, #0
 800b110:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b112:	7bfa      	ldrb	r2, [r7, #15]
 800b114:	6879      	ldr	r1, [r7, #4]
 800b116:	4613      	mov	r3, r2
 800b118:	00db      	lsls	r3, r3, #3
 800b11a:	4413      	add	r3, r2
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	440b      	add	r3, r1
 800b120:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b124:	2200      	movs	r2, #0
 800b126:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b128:	7bfa      	ldrb	r2, [r7, #15]
 800b12a:	6879      	ldr	r1, [r7, #4]
 800b12c:	4613      	mov	r3, r2
 800b12e:	00db      	lsls	r3, r3, #3
 800b130:	4413      	add	r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	440b      	add	r3, r1
 800b136:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b13a:	2200      	movs	r2, #0
 800b13c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b13e:	7bfa      	ldrb	r2, [r7, #15]
 800b140:	6879      	ldr	r1, [r7, #4]
 800b142:	4613      	mov	r3, r2
 800b144:	00db      	lsls	r3, r3, #3
 800b146:	4413      	add	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	440b      	add	r3, r1
 800b14c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800b150:	2200      	movs	r2, #0
 800b152:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b154:	7bfb      	ldrb	r3, [r7, #15]
 800b156:	3301      	adds	r3, #1
 800b158:	73fb      	strb	r3, [r7, #15]
 800b15a:	7bfa      	ldrb	r2, [r7, #15]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	429a      	cmp	r2, r3
 800b162:	d3b5      	bcc.n	800b0d0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	603b      	str	r3, [r7, #0]
 800b16a:	687e      	ldr	r6, [r7, #4]
 800b16c:	466d      	mov	r5, sp
 800b16e:	f106 0410 	add.w	r4, r6, #16
 800b172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b17a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b17e:	e885 0003 	stmia.w	r5, {r0, r1}
 800b182:	1d33      	adds	r3, r6, #4
 800b184:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b186:	6838      	ldr	r0, [r7, #0]
 800b188:	f006 febc 	bl	8011f04 <USB_DevInit>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d005      	beq.n	800b19e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2202      	movs	r2, #2
 800b196:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b19a:	2301      	movs	r3, #1
 800b19c:	e00d      	b.n	800b1ba <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f008 f80b 	bl	80131ce <USB_DevDisconnect>

  return HAL_OK;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3714      	adds	r7, #20
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b1c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b084      	sub	sp, #16
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d101      	bne.n	800b1de <HAL_PCD_Start+0x1c>
 800b1da:	2302      	movs	r3, #2
 800b1dc:	e020      	b.n	800b220 <HAL_PCD_Start+0x5e>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d109      	bne.n	800b202 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d005      	beq.n	800b202 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4618      	mov	r0, r3
 800b208:	f006 fe0e 	bl	8011e28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4618      	mov	r0, r3
 800b212:	f007 ffbb 	bl	801318c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b21e:	2300      	movs	r3, #0
}
 800b220:	4618      	mov	r0, r3
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b228:	b590      	push	{r4, r7, lr}
 800b22a:	b08d      	sub	sp, #52	; 0x34
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b236:	6a3b      	ldr	r3, [r7, #32]
 800b238:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4618      	mov	r0, r3
 800b240:	f008 f879 	bl	8013336 <USB_GetMode>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	f040 848a 	bne.w	800bb60 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4618      	mov	r0, r3
 800b252:	f007 ffdd 	bl	8013210 <USB_ReadInterrupts>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f000 8480 	beq.w	800bb5e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b264:	689b      	ldr	r3, [r3, #8]
 800b266:	0a1b      	lsrs	r3, r3, #8
 800b268:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4618      	mov	r0, r3
 800b278:	f007 ffca 	bl	8013210 <USB_ReadInterrupts>
 800b27c:	4603      	mov	r3, r0
 800b27e:	f003 0302 	and.w	r3, r3, #2
 800b282:	2b02      	cmp	r3, #2
 800b284:	d107      	bne.n	800b296 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	695a      	ldr	r2, [r3, #20]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f002 0202 	and.w	r2, r2, #2
 800b294:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4618      	mov	r0, r3
 800b29c:	f007 ffb8 	bl	8013210 <USB_ReadInterrupts>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	f003 0310 	and.w	r3, r3, #16
 800b2a6:	2b10      	cmp	r3, #16
 800b2a8:	d161      	bne.n	800b36e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	699a      	ldr	r2, [r3, #24]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f022 0210 	bic.w	r2, r2, #16
 800b2b8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b2ba:	6a3b      	ldr	r3, [r7, #32]
 800b2bc:	6a1b      	ldr	r3, [r3, #32]
 800b2be:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b2c0:	69bb      	ldr	r3, [r7, #24]
 800b2c2:	f003 020f 	and.w	r2, r3, #15
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	00db      	lsls	r3, r3, #3
 800b2ca:	4413      	add	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	3304      	adds	r3, #4
 800b2d8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	0c5b      	lsrs	r3, r3, #17
 800b2de:	f003 030f 	and.w	r3, r3, #15
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	d124      	bne.n	800b330 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b2e6:	69ba      	ldr	r2, [r7, #24]
 800b2e8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800b2ec:	4013      	ands	r3, r2
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d035      	beq.n	800b35e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	091b      	lsrs	r3, r3, #4
 800b2fa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b2fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b300:	b29b      	uxth	r3, r3
 800b302:	461a      	mov	r2, r3
 800b304:	6a38      	ldr	r0, [r7, #32]
 800b306:	f007 fdef 	bl	8012ee8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	691a      	ldr	r2, [r3, #16]
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	091b      	lsrs	r3, r3, #4
 800b312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b316:	441a      	add	r2, r3
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	6a1a      	ldr	r2, [r3, #32]
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	091b      	lsrs	r3, r3, #4
 800b324:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b328:	441a      	add	r2, r3
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	621a      	str	r2, [r3, #32]
 800b32e:	e016      	b.n	800b35e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	0c5b      	lsrs	r3, r3, #17
 800b334:	f003 030f 	and.w	r3, r3, #15
 800b338:	2b06      	cmp	r3, #6
 800b33a:	d110      	bne.n	800b35e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b342:	2208      	movs	r2, #8
 800b344:	4619      	mov	r1, r3
 800b346:	6a38      	ldr	r0, [r7, #32]
 800b348:	f007 fdce 	bl	8012ee8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	6a1a      	ldr	r2, [r3, #32]
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	091b      	lsrs	r3, r3, #4
 800b354:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b358:	441a      	add	r2, r3
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	699a      	ldr	r2, [r3, #24]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f042 0210 	orr.w	r2, r2, #16
 800b36c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4618      	mov	r0, r3
 800b374:	f007 ff4c 	bl	8013210 <USB_ReadInterrupts>
 800b378:	4603      	mov	r3, r0
 800b37a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b37e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b382:	f040 80a7 	bne.w	800b4d4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b386:	2300      	movs	r3, #0
 800b388:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4618      	mov	r0, r3
 800b390:	f007 ff51 	bl	8013236 <USB_ReadDevAllOutEpInterrupt>
 800b394:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b396:	e099      	b.n	800b4cc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39a:	f003 0301 	and.w	r3, r3, #1
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	f000 808e 	beq.w	800b4c0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3aa:	b2d2      	uxtb	r2, r2
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f007 ff75 	bl	801329e <USB_ReadDevOutEPInterrupt>
 800b3b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	f003 0301 	and.w	r3, r3, #1
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00c      	beq.n	800b3da <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c2:	015a      	lsls	r2, r3, #5
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b3d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 feef 	bl	800c1b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	f003 0308 	and.w	r3, r3, #8
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d00c      	beq.n	800b3fe <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e6:	015a      	lsls	r2, r3, #5
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	2308      	movs	r3, #8
 800b3f4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b3f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 ffc5 	bl	800c388 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	f003 0310 	and.w	r3, r3, #16
 800b404:	2b00      	cmp	r3, #0
 800b406:	d008      	beq.n	800b41a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40a:	015a      	lsls	r2, r3, #5
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	4413      	add	r3, r2
 800b410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b414:	461a      	mov	r2, r3
 800b416:	2310      	movs	r3, #16
 800b418:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	f003 0302 	and.w	r3, r3, #2
 800b420:	2b00      	cmp	r3, #0
 800b422:	d030      	beq.n	800b486 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b424:	6a3b      	ldr	r3, [r7, #32]
 800b426:	695b      	ldr	r3, [r3, #20]
 800b428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b42c:	2b80      	cmp	r3, #128	; 0x80
 800b42e:	d109      	bne.n	800b444 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	69fa      	ldr	r2, [r7, #28]
 800b43a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b43e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b442:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b446:	4613      	mov	r3, r2
 800b448:	00db      	lsls	r3, r3, #3
 800b44a:	4413      	add	r3, r2
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	4413      	add	r3, r2
 800b456:	3304      	adds	r3, #4
 800b458:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	78db      	ldrb	r3, [r3, #3]
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d108      	bne.n	800b474 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	2200      	movs	r2, #0
 800b466:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	4619      	mov	r1, r3
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f00d f92e 	bl	80186d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b476:	015a      	lsls	r2, r3, #5
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	4413      	add	r3, r2
 800b47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b480:	461a      	mov	r2, r3
 800b482:	2302      	movs	r3, #2
 800b484:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	f003 0320 	and.w	r3, r3, #32
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d008      	beq.n	800b4a2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b492:	015a      	lsls	r2, r3, #5
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	4413      	add	r3, r2
 800b498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b49c:	461a      	mov	r2, r3
 800b49e:	2320      	movs	r3, #32
 800b4a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d009      	beq.n	800b4c0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ae:	015a      	lsls	r2, r3, #5
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b4be:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c8:	085b      	lsrs	r3, r3, #1
 800b4ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f47f af62 	bne.w	800b398 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f007 fe99 	bl	8013210 <USB_ReadInterrupts>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b4e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b4e8:	f040 80db 	bne.w	800b6a2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f007 feba 	bl	801326a <USB_ReadDevAllInEpInterrupt>
 800b4f6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b4fc:	e0cd      	b.n	800b69a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b500:	f003 0301 	and.w	r3, r3, #1
 800b504:	2b00      	cmp	r3, #0
 800b506:	f000 80c2 	beq.w	800b68e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b510:	b2d2      	uxtb	r2, r2
 800b512:	4611      	mov	r1, r2
 800b514:	4618      	mov	r0, r3
 800b516:	f007 fee0 	bl	80132da <USB_ReadDevInEPInterrupt>
 800b51a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	f003 0301 	and.w	r3, r3, #1
 800b522:	2b00      	cmp	r3, #0
 800b524:	d057      	beq.n	800b5d6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b528:	f003 030f 	and.w	r3, r3, #15
 800b52c:	2201      	movs	r2, #1
 800b52e:	fa02 f303 	lsl.w	r3, r2, r3
 800b532:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b53a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	43db      	mvns	r3, r3
 800b540:	69f9      	ldr	r1, [r7, #28]
 800b542:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b546:	4013      	ands	r3, r2
 800b548:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54c:	015a      	lsls	r2, r3, #5
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	4413      	add	r3, r2
 800b552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b556:	461a      	mov	r2, r3
 800b558:	2301      	movs	r3, #1
 800b55a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	691b      	ldr	r3, [r3, #16]
 800b560:	2b01      	cmp	r3, #1
 800b562:	d132      	bne.n	800b5ca <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b564:	6879      	ldr	r1, [r7, #4]
 800b566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b568:	4613      	mov	r3, r2
 800b56a:	00db      	lsls	r3, r3, #3
 800b56c:	4413      	add	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	440b      	add	r3, r1
 800b572:	334c      	adds	r3, #76	; 0x4c
 800b574:	6819      	ldr	r1, [r3, #0]
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b57a:	4613      	mov	r3, r2
 800b57c:	00db      	lsls	r3, r3, #3
 800b57e:	4413      	add	r3, r2
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	4403      	add	r3, r0
 800b584:	3348      	adds	r3, #72	; 0x48
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4419      	add	r1, r3
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b58e:	4613      	mov	r3, r2
 800b590:	00db      	lsls	r3, r3, #3
 800b592:	4413      	add	r3, r2
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	4403      	add	r3, r0
 800b598:	334c      	adds	r3, #76	; 0x4c
 800b59a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d113      	bne.n	800b5ca <HAL_PCD_IRQHandler+0x3a2>
 800b5a2:	6879      	ldr	r1, [r7, #4]
 800b5a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	00db      	lsls	r3, r3, #3
 800b5aa:	4413      	add	r3, r2
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	440b      	add	r3, r1
 800b5b0:	3354      	adds	r3, #84	; 0x54
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d108      	bne.n	800b5ca <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6818      	ldr	r0, [r3, #0]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	2101      	movs	r1, #1
 800b5c6:	f007 fee7 	bl	8013398 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f00c fff8 	bl	80185c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	f003 0308 	and.w	r3, r3, #8
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d008      	beq.n	800b5f2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e2:	015a      	lsls	r2, r3, #5
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	2308      	movs	r3, #8
 800b5f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	f003 0310 	and.w	r3, r3, #16
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d008      	beq.n	800b60e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fe:	015a      	lsls	r2, r3, #5
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	4413      	add	r3, r2
 800b604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b608:	461a      	mov	r2, r3
 800b60a:	2310      	movs	r3, #16
 800b60c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b614:	2b00      	cmp	r3, #0
 800b616:	d008      	beq.n	800b62a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61a:	015a      	lsls	r2, r3, #5
 800b61c:	69fb      	ldr	r3, [r7, #28]
 800b61e:	4413      	add	r3, r2
 800b620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b624:	461a      	mov	r2, r3
 800b626:	2340      	movs	r3, #64	; 0x40
 800b628:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	f003 0302 	and.w	r3, r3, #2
 800b630:	2b00      	cmp	r3, #0
 800b632:	d023      	beq.n	800b67c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b636:	6a38      	ldr	r0, [r7, #32]
 800b638:	f006 fdc8 	bl	80121cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b63c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b63e:	4613      	mov	r3, r2
 800b640:	00db      	lsls	r3, r3, #3
 800b642:	4413      	add	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	3338      	adds	r3, #56	; 0x38
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	4413      	add	r3, r2
 800b64c:	3304      	adds	r3, #4
 800b64e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	78db      	ldrb	r3, [r3, #3]
 800b654:	2b01      	cmp	r3, #1
 800b656:	d108      	bne.n	800b66a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	2200      	movs	r2, #0
 800b65c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b660:	b2db      	uxtb	r3, r3
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f00d f845 	bl	80186f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66c:	015a      	lsls	r2, r3, #5
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	4413      	add	r3, r2
 800b672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b676:	461a      	mov	r2, r3
 800b678:	2302      	movs	r3, #2
 800b67a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b682:	2b00      	cmp	r3, #0
 800b684:	d003      	beq.n	800b68e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fd08 	bl	800c09e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b690:	3301      	adds	r3, #1
 800b692:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b696:	085b      	lsrs	r3, r3, #1
 800b698:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f47f af2e 	bne.w	800b4fe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f007 fdb2 	bl	8013210 <USB_ReadInterrupts>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6b6:	d122      	bne.n	800b6fe <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	69fa      	ldr	r2, [r7, #28]
 800b6c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6c6:	f023 0301 	bic.w	r3, r3, #1
 800b6ca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d108      	bne.n	800b6e8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b6de:	2100      	movs	r1, #0
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 feef 	bl	800c4c4 <HAL_PCDEx_LPM_Callback>
 800b6e6:	e002      	b.n	800b6ee <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f00c ffe3 	bl	80186b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	695a      	ldr	r2, [r3, #20]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b6fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4618      	mov	r0, r3
 800b704:	f007 fd84 	bl	8013210 <USB_ReadInterrupts>
 800b708:	4603      	mov	r3, r0
 800b70a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b70e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b712:	d112      	bne.n	800b73a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b714:	69fb      	ldr	r3, [r7, #28]
 800b716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	f003 0301 	and.w	r3, r3, #1
 800b720:	2b01      	cmp	r3, #1
 800b722:	d102      	bne.n	800b72a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f00c ff9f 	bl	8018668 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	695a      	ldr	r2, [r3, #20]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b738:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4618      	mov	r0, r3
 800b740:	f007 fd66 	bl	8013210 <USB_ReadInterrupts>
 800b744:	4603      	mov	r3, r0
 800b746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b74a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b74e:	f040 80b7 	bne.w	800b8c0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	69fa      	ldr	r2, [r7, #28]
 800b75c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b760:	f023 0301 	bic.w	r3, r3, #1
 800b764:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2110      	movs	r1, #16
 800b76c:	4618      	mov	r0, r3
 800b76e:	f006 fd2d 	bl	80121cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b772:	2300      	movs	r3, #0
 800b774:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b776:	e046      	b.n	800b806 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77a:	015a      	lsls	r2, r3, #5
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	4413      	add	r3, r2
 800b780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b784:	461a      	mov	r2, r3
 800b786:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b78a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78e:	015a      	lsls	r2, r3, #5
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	4413      	add	r3, r2
 800b794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b79c:	0151      	lsls	r1, r2, #5
 800b79e:	69fa      	ldr	r2, [r7, #28]
 800b7a0:	440a      	add	r2, r1
 800b7a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b7aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ae:	015a      	lsls	r2, r3, #5
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	4413      	add	r3, r2
 800b7b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b7be:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c2:	015a      	lsls	r2, r3, #5
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	4413      	add	r3, r2
 800b7c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7d0:	0151      	lsls	r1, r2, #5
 800b7d2:	69fa      	ldr	r2, [r7, #28]
 800b7d4:	440a      	add	r2, r1
 800b7d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b7de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e2:	015a      	lsls	r2, r3, #5
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7f0:	0151      	lsls	r1, r2, #5
 800b7f2:	69fa      	ldr	r2, [r7, #28]
 800b7f4:	440a      	add	r2, r1
 800b7f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b7fe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b802:	3301      	adds	r3, #1
 800b804:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d3b3      	bcc.n	800b778 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b816:	69db      	ldr	r3, [r3, #28]
 800b818:	69fa      	ldr	r2, [r7, #28]
 800b81a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b81e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b822:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d016      	beq.n	800b85a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b836:	69fa      	ldr	r2, [r7, #28]
 800b838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b83c:	f043 030b 	orr.w	r3, r3, #11
 800b840:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b84a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b84c:	69fa      	ldr	r2, [r7, #28]
 800b84e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b852:	f043 030b 	orr.w	r3, r3, #11
 800b856:	6453      	str	r3, [r2, #68]	; 0x44
 800b858:	e015      	b.n	800b886 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b860:	695b      	ldr	r3, [r3, #20]
 800b862:	69fa      	ldr	r2, [r7, #28]
 800b864:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b868:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b86c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b870:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b878:	691b      	ldr	r3, [r3, #16]
 800b87a:	69fa      	ldr	r2, [r7, #28]
 800b87c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b880:	f043 030b 	orr.w	r3, r3, #11
 800b884:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	69fa      	ldr	r2, [r7, #28]
 800b890:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b894:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b898:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6818      	ldr	r0, [r3, #0]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	f007 fd74 	bl	8013398 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	695a      	ldr	r2, [r3, #20]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b8be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f007 fca3 	bl	8013210 <USB_ReadInterrupts>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b8d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8d4:	d124      	bne.n	800b920 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f007 fd39 	bl	8013352 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f006 fcee 	bl	80122c6 <USB_GetDevSpeed>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681c      	ldr	r4, [r3, #0]
 800b8f6:	f001 fa53 	bl	800cda0 <HAL_RCC_GetHCLKFreq>
 800b8fa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b900:	b2db      	uxtb	r3, r3
 800b902:	461a      	mov	r2, r3
 800b904:	4620      	mov	r0, r4
 800b906:	f006 f9ed 	bl	8011ce4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f00c fe83 	bl	8018616 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	695a      	ldr	r2, [r3, #20]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b91e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4618      	mov	r0, r3
 800b926:	f007 fc73 	bl	8013210 <USB_ReadInterrupts>
 800b92a:	4603      	mov	r3, r0
 800b92c:	f003 0308 	and.w	r3, r3, #8
 800b930:	2b08      	cmp	r3, #8
 800b932:	d10a      	bne.n	800b94a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f00c fe60 	bl	80185fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	695a      	ldr	r2, [r3, #20]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f002 0208 	and.w	r2, r2, #8
 800b948:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4618      	mov	r0, r3
 800b950:	f007 fc5e 	bl	8013210 <USB_ReadInterrupts>
 800b954:	4603      	mov	r3, r0
 800b956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b95a:	2b80      	cmp	r3, #128	; 0x80
 800b95c:	d122      	bne.n	800b9a4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b95e:	6a3b      	ldr	r3, [r7, #32]
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b966:	6a3b      	ldr	r3, [r7, #32]
 800b968:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b96a:	2301      	movs	r3, #1
 800b96c:	627b      	str	r3, [r7, #36]	; 0x24
 800b96e:	e014      	b.n	800b99a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b970:	6879      	ldr	r1, [r7, #4]
 800b972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b974:	4613      	mov	r3, r2
 800b976:	00db      	lsls	r3, r3, #3
 800b978:	4413      	add	r3, r2
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	440b      	add	r3, r1
 800b97e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	2b01      	cmp	r3, #1
 800b986:	d105      	bne.n	800b994 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	4619      	mov	r1, r3
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 fb27 	bl	800bfe2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b996:	3301      	adds	r3, #1
 800b998:	627b      	str	r3, [r7, #36]	; 0x24
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d3e5      	bcc.n	800b970 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f007 fc31 	bl	8013210 <USB_ReadInterrupts>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b9b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9b8:	d13b      	bne.n	800ba32 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	627b      	str	r3, [r7, #36]	; 0x24
 800b9be:	e02b      	b.n	800ba18 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c2:	015a      	lsls	r2, r3, #5
 800b9c4:	69fb      	ldr	r3, [r7, #28]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b9d0:	6879      	ldr	r1, [r7, #4]
 800b9d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	00db      	lsls	r3, r3, #3
 800b9d8:	4413      	add	r3, r2
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	440b      	add	r3, r1
 800b9de:	3340      	adds	r3, #64	; 0x40
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d115      	bne.n	800ba12 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800b9e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	da12      	bge.n	800ba12 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800b9ec:	6879      	ldr	r1, [r7, #4]
 800b9ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9f0:	4613      	mov	r3, r2
 800b9f2:	00db      	lsls	r3, r3, #3
 800b9f4:	4413      	add	r3, r2
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	440b      	add	r3, r1
 800b9fa:	333f      	adds	r3, #63	; 0x3f
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800ba00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 fae8 	bl	800bfe2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ba12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba14:	3301      	adds	r3, #1
 800ba16:	627b      	str	r3, [r7, #36]	; 0x24
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d3ce      	bcc.n	800b9c0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	695a      	ldr	r2, [r3, #20]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800ba30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f007 fbea 	bl	8013210 <USB_ReadInterrupts>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba46:	d155      	bne.n	800baf4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ba48:	2301      	movs	r3, #1
 800ba4a:	627b      	str	r3, [r7, #36]	; 0x24
 800ba4c:	e045      	b.n	800bada <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800ba4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba50:	015a      	lsls	r2, r3, #5
 800ba52:	69fb      	ldr	r3, [r7, #28]
 800ba54:	4413      	add	r3, r2
 800ba56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ba5e:	6879      	ldr	r1, [r7, #4]
 800ba60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba62:	4613      	mov	r3, r2
 800ba64:	00db      	lsls	r3, r3, #3
 800ba66:	4413      	add	r3, r2
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	440b      	add	r3, r1
 800ba6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d12e      	bne.n	800bad4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ba76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	da2b      	bge.n	800bad4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800ba7c:	69bb      	ldr	r3, [r7, #24]
 800ba7e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800ba88:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d121      	bne.n	800bad4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800ba90:	6879      	ldr	r1, [r7, #4]
 800ba92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba94:	4613      	mov	r3, r2
 800ba96:	00db      	lsls	r3, r3, #3
 800ba98:	4413      	add	r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	440b      	add	r3, r1
 800ba9e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800baa2:	2201      	movs	r2, #1
 800baa4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800baa6:	6a3b      	ldr	r3, [r7, #32]
 800baa8:	699b      	ldr	r3, [r3, #24]
 800baaa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800baae:	6a3b      	ldr	r3, [r7, #32]
 800bab0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800bab2:	6a3b      	ldr	r3, [r7, #32]
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baba:	2b00      	cmp	r3, #0
 800babc:	d10a      	bne.n	800bad4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	69fa      	ldr	r2, [r7, #28]
 800bac8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bacc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bad0:	6053      	str	r3, [r2, #4]
            break;
 800bad2:	e007      	b.n	800bae4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad6:	3301      	adds	r3, #1
 800bad8:	627b      	str	r3, [r7, #36]	; 0x24
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d3b4      	bcc.n	800ba4e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	695a      	ldr	r2, [r3, #20]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800baf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4618      	mov	r0, r3
 800bafa:	f007 fb89 	bl	8013210 <USB_ReadInterrupts>
 800bafe:	4603      	mov	r3, r0
 800bb00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb08:	d10a      	bne.n	800bb20 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f00c fe04 	bl	8018718 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	695a      	ldr	r2, [r3, #20]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800bb1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4618      	mov	r0, r3
 800bb26:	f007 fb73 	bl	8013210 <USB_ReadInterrupts>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	f003 0304 	and.w	r3, r3, #4
 800bb30:	2b04      	cmp	r3, #4
 800bb32:	d115      	bne.n	800bb60 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	f003 0304 	and.w	r3, r3, #4
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d002      	beq.n	800bb4c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f00c fdf4 	bl	8018734 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	6859      	ldr	r1, [r3, #4]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	69ba      	ldr	r2, [r7, #24]
 800bb58:	430a      	orrs	r2, r1
 800bb5a:	605a      	str	r2, [r3, #4]
 800bb5c:	e000      	b.n	800bb60 <HAL_PCD_IRQHandler+0x938>
      return;
 800bb5e:	bf00      	nop
    }
  }
}
 800bb60:	3734      	adds	r7, #52	; 0x34
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd90      	pop	{r4, r7, pc}

0800bb66 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b082      	sub	sp, #8
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
 800bb6e:	460b      	mov	r3, r1
 800bb70:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d101      	bne.n	800bb80 <HAL_PCD_SetAddress+0x1a>
 800bb7c:	2302      	movs	r3, #2
 800bb7e:	e013      	b.n	800bba8 <HAL_PCD_SetAddress+0x42>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	78fa      	ldrb	r2, [r7, #3]
 800bb8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	78fa      	ldrb	r2, [r7, #3]
 800bb96:	4611      	mov	r1, r2
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f007 fad1 	bl	8013140 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800bba6:	2300      	movs	r3, #0
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3708      	adds	r7, #8
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	4608      	mov	r0, r1
 800bbba:	4611      	mov	r1, r2
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	70fb      	strb	r3, [r7, #3]
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	803b      	strh	r3, [r7, #0]
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bbce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	da0f      	bge.n	800bbf6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bbd6:	78fb      	ldrb	r3, [r7, #3]
 800bbd8:	f003 020f 	and.w	r2, r3, #15
 800bbdc:	4613      	mov	r3, r2
 800bbde:	00db      	lsls	r3, r3, #3
 800bbe0:	4413      	add	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	3338      	adds	r3, #56	; 0x38
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	4413      	add	r3, r2
 800bbea:	3304      	adds	r3, #4
 800bbec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	705a      	strb	r2, [r3, #1]
 800bbf4:	e00f      	b.n	800bc16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bbf6:	78fb      	ldrb	r3, [r7, #3]
 800bbf8:	f003 020f 	and.w	r2, r3, #15
 800bbfc:	4613      	mov	r3, r2
 800bbfe:	00db      	lsls	r3, r3, #3
 800bc00:	4413      	add	r3, r2
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	4413      	add	r3, r2
 800bc0c:	3304      	adds	r3, #4
 800bc0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2200      	movs	r2, #0
 800bc14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800bc16:	78fb      	ldrb	r3, [r7, #3]
 800bc18:	f003 030f 	and.w	r3, r3, #15
 800bc1c:	b2da      	uxtb	r2, r3
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800bc22:	883a      	ldrh	r2, [r7, #0]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	78ba      	ldrb	r2, [r7, #2]
 800bc2c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	785b      	ldrb	r3, [r3, #1]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d004      	beq.n	800bc40 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	b29a      	uxth	r2, r3
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800bc40:	78bb      	ldrb	r3, [r7, #2]
 800bc42:	2b02      	cmp	r3, #2
 800bc44:	d102      	bne.n	800bc4c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d101      	bne.n	800bc5a <HAL_PCD_EP_Open+0xaa>
 800bc56:	2302      	movs	r3, #2
 800bc58:	e00e      	b.n	800bc78 <HAL_PCD_EP_Open+0xc8>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68f9      	ldr	r1, [r7, #12]
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f006 fb51 	bl	8012310 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800bc76:	7afb      	ldrb	r3, [r7, #11]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3710      	adds	r7, #16
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	460b      	mov	r3, r1
 800bc8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bc8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	da0f      	bge.n	800bcb4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bc94:	78fb      	ldrb	r3, [r7, #3]
 800bc96:	f003 020f 	and.w	r2, r3, #15
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	00db      	lsls	r3, r3, #3
 800bc9e:	4413      	add	r3, r2
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	3338      	adds	r3, #56	; 0x38
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	4413      	add	r3, r2
 800bca8:	3304      	adds	r3, #4
 800bcaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	705a      	strb	r2, [r3, #1]
 800bcb2:	e00f      	b.n	800bcd4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bcb4:	78fb      	ldrb	r3, [r7, #3]
 800bcb6:	f003 020f 	and.w	r2, r3, #15
 800bcba:	4613      	mov	r3, r2
 800bcbc:	00db      	lsls	r3, r3, #3
 800bcbe:	4413      	add	r3, r2
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	4413      	add	r3, r2
 800bcca:	3304      	adds	r3, #4
 800bccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800bcd4:	78fb      	ldrb	r3, [r7, #3]
 800bcd6:	f003 030f 	and.w	r3, r3, #15
 800bcda:	b2da      	uxtb	r2, r3
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d101      	bne.n	800bcee <HAL_PCD_EP_Close+0x6e>
 800bcea:	2302      	movs	r3, #2
 800bcec:	e00e      	b.n	800bd0c <HAL_PCD_EP_Close+0x8c>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	68f9      	ldr	r1, [r7, #12]
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f006 fb8f 	bl	8012420 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2200      	movs	r2, #0
 800bd06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800bd0a:	2300      	movs	r3, #0
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3710      	adds	r7, #16
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b086      	sub	sp, #24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	607a      	str	r2, [r7, #4]
 800bd1e:	603b      	str	r3, [r7, #0]
 800bd20:	460b      	mov	r3, r1
 800bd22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bd24:	7afb      	ldrb	r3, [r7, #11]
 800bd26:	f003 020f 	and.w	r2, r3, #15
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	00db      	lsls	r3, r3, #3
 800bd2e:	4413      	add	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bd36:	68fa      	ldr	r2, [r7, #12]
 800bd38:	4413      	add	r3, r2
 800bd3a:	3304      	adds	r3, #4
 800bd3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	683a      	ldr	r2, [r7, #0]
 800bd48:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	2200      	movs	r2, #0
 800bd54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bd56:	7afb      	ldrb	r3, [r7, #11]
 800bd58:	f003 030f 	and.w	r3, r3, #15
 800bd5c:	b2da      	uxtb	r2, r3
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d102      	bne.n	800bd70 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bd70:	7afb      	ldrb	r3, [r7, #11]
 800bd72:	f003 030f 	and.w	r3, r3, #15
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d109      	bne.n	800bd8e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6818      	ldr	r0, [r3, #0]
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	691b      	ldr	r3, [r3, #16]
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	461a      	mov	r2, r3
 800bd86:	6979      	ldr	r1, [r7, #20]
 800bd88:	f006 fe6e 	bl	8012a68 <USB_EP0StartXfer>
 800bd8c:	e008      	b.n	800bda0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6818      	ldr	r0, [r3, #0]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	691b      	ldr	r3, [r3, #16]
 800bd96:	b2db      	uxtb	r3, r3
 800bd98:	461a      	mov	r2, r3
 800bd9a:	6979      	ldr	r1, [r7, #20]
 800bd9c:	f006 fc1c 	bl	80125d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3718      	adds	r7, #24
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b083      	sub	sp, #12
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800bdb6:	78fb      	ldrb	r3, [r7, #3]
 800bdb8:	f003 020f 	and.w	r2, r3, #15
 800bdbc:	6879      	ldr	r1, [r7, #4]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	00db      	lsls	r3, r3, #3
 800bdc2:	4413      	add	r3, r2
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	440b      	add	r3, r1
 800bdc8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800bdcc:	681b      	ldr	r3, [r3, #0]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	370c      	adds	r7, #12
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr

0800bdda <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b086      	sub	sp, #24
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	60f8      	str	r0, [r7, #12]
 800bde2:	607a      	str	r2, [r7, #4]
 800bde4:	603b      	str	r3, [r7, #0]
 800bde6:	460b      	mov	r3, r1
 800bde8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bdea:	7afb      	ldrb	r3, [r7, #11]
 800bdec:	f003 020f 	and.w	r2, r3, #15
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	00db      	lsls	r3, r3, #3
 800bdf4:	4413      	add	r3, r2
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	3338      	adds	r3, #56	; 0x38
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	3304      	adds	r3, #4
 800be00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	683a      	ldr	r2, [r7, #0]
 800be0c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	2200      	movs	r2, #0
 800be12:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	2201      	movs	r2, #1
 800be18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800be1a:	7afb      	ldrb	r3, [r7, #11]
 800be1c:	f003 030f 	and.w	r3, r3, #15
 800be20:	b2da      	uxtb	r2, r3
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	691b      	ldr	r3, [r3, #16]
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d102      	bne.n	800be34 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800be34:	7afb      	ldrb	r3, [r7, #11]
 800be36:	f003 030f 	and.w	r3, r3, #15
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d109      	bne.n	800be52 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	6818      	ldr	r0, [r3, #0]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	b2db      	uxtb	r3, r3
 800be48:	461a      	mov	r2, r3
 800be4a:	6979      	ldr	r1, [r7, #20]
 800be4c:	f006 fe0c 	bl	8012a68 <USB_EP0StartXfer>
 800be50:	e008      	b.n	800be64 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	6818      	ldr	r0, [r3, #0]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	691b      	ldr	r3, [r3, #16]
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	461a      	mov	r2, r3
 800be5e:	6979      	ldr	r1, [r7, #20]
 800be60:	f006 fbba 	bl	80125d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800be64:	2300      	movs	r3, #0
}
 800be66:	4618      	mov	r0, r3
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800be6e:	b580      	push	{r7, lr}
 800be70:	b084      	sub	sp, #16
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
 800be76:	460b      	mov	r3, r1
 800be78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800be7a:	78fb      	ldrb	r3, [r7, #3]
 800be7c:	f003 020f 	and.w	r2, r3, #15
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	429a      	cmp	r2, r3
 800be86:	d901      	bls.n	800be8c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800be88:	2301      	movs	r3, #1
 800be8a:	e050      	b.n	800bf2e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800be8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be90:	2b00      	cmp	r3, #0
 800be92:	da0f      	bge.n	800beb4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800be94:	78fb      	ldrb	r3, [r7, #3]
 800be96:	f003 020f 	and.w	r2, r3, #15
 800be9a:	4613      	mov	r3, r2
 800be9c:	00db      	lsls	r3, r3, #3
 800be9e:	4413      	add	r3, r2
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	3338      	adds	r3, #56	; 0x38
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	4413      	add	r3, r2
 800bea8:	3304      	adds	r3, #4
 800beaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2201      	movs	r2, #1
 800beb0:	705a      	strb	r2, [r3, #1]
 800beb2:	e00d      	b.n	800bed0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800beb4:	78fa      	ldrb	r2, [r7, #3]
 800beb6:	4613      	mov	r3, r2
 800beb8:	00db      	lsls	r3, r3, #3
 800beba:	4413      	add	r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	4413      	add	r3, r2
 800bec6:	3304      	adds	r3, #4
 800bec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2200      	movs	r2, #0
 800bece:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2201      	movs	r2, #1
 800bed4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bed6:	78fb      	ldrb	r3, [r7, #3]
 800bed8:	f003 030f 	and.w	r3, r3, #15
 800bedc:	b2da      	uxtb	r2, r3
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d101      	bne.n	800bef0 <HAL_PCD_EP_SetStall+0x82>
 800beec:	2302      	movs	r3, #2
 800beee:	e01e      	b.n	800bf2e <HAL_PCD_EP_SetStall+0xc0>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	68f9      	ldr	r1, [r7, #12]
 800befe:	4618      	mov	r0, r3
 800bf00:	f007 f84a 	bl	8012f98 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bf04:	78fb      	ldrb	r3, [r7, #3]
 800bf06:	f003 030f 	and.w	r3, r3, #15
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d10a      	bne.n	800bf24 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6818      	ldr	r0, [r3, #0]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	b2d9      	uxtb	r1, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bf1e:	461a      	mov	r2, r3
 800bf20:	f007 fa3a 	bl	8013398 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800bf2c:	2300      	movs	r3, #0
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}

0800bf36 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bf36:	b580      	push	{r7, lr}
 800bf38:	b084      	sub	sp, #16
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6078      	str	r0, [r7, #4]
 800bf3e:	460b      	mov	r3, r1
 800bf40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bf42:	78fb      	ldrb	r3, [r7, #3]
 800bf44:	f003 020f 	and.w	r2, r3, #15
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d901      	bls.n	800bf54 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800bf50:	2301      	movs	r3, #1
 800bf52:	e042      	b.n	800bfda <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bf54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	da0f      	bge.n	800bf7c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bf5c:	78fb      	ldrb	r3, [r7, #3]
 800bf5e:	f003 020f 	and.w	r2, r3, #15
 800bf62:	4613      	mov	r3, r2
 800bf64:	00db      	lsls	r3, r3, #3
 800bf66:	4413      	add	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	3338      	adds	r3, #56	; 0x38
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	4413      	add	r3, r2
 800bf70:	3304      	adds	r3, #4
 800bf72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2201      	movs	r2, #1
 800bf78:	705a      	strb	r2, [r3, #1]
 800bf7a:	e00f      	b.n	800bf9c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bf7c:	78fb      	ldrb	r3, [r7, #3]
 800bf7e:	f003 020f 	and.w	r2, r3, #15
 800bf82:	4613      	mov	r3, r2
 800bf84:	00db      	lsls	r3, r3, #3
 800bf86:	4413      	add	r3, r2
 800bf88:	009b      	lsls	r3, r3, #2
 800bf8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	4413      	add	r3, r2
 800bf92:	3304      	adds	r3, #4
 800bf94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bfa2:	78fb      	ldrb	r3, [r7, #3]
 800bfa4:	f003 030f 	and.w	r3, r3, #15
 800bfa8:	b2da      	uxtb	r2, r3
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d101      	bne.n	800bfbc <HAL_PCD_EP_ClrStall+0x86>
 800bfb8:	2302      	movs	r3, #2
 800bfba:	e00e      	b.n	800bfda <HAL_PCD_EP_ClrStall+0xa4>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	68f9      	ldr	r1, [r7, #12]
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f007 f852 	bl	8013074 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b084      	sub	sp, #16
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
 800bfea:	460b      	mov	r3, r1
 800bfec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800bfee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	da0c      	bge.n	800c010 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bff6:	78fb      	ldrb	r3, [r7, #3]
 800bff8:	f003 020f 	and.w	r2, r3, #15
 800bffc:	4613      	mov	r3, r2
 800bffe:	00db      	lsls	r3, r3, #3
 800c000:	4413      	add	r3, r2
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	3338      	adds	r3, #56	; 0x38
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	4413      	add	r3, r2
 800c00a:	3304      	adds	r3, #4
 800c00c:	60fb      	str	r3, [r7, #12]
 800c00e:	e00c      	b.n	800c02a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c010:	78fb      	ldrb	r3, [r7, #3]
 800c012:	f003 020f 	and.w	r2, r3, #15
 800c016:	4613      	mov	r3, r2
 800c018:	00db      	lsls	r3, r3, #3
 800c01a:	4413      	add	r3, r2
 800c01c:	009b      	lsls	r3, r3, #2
 800c01e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	4413      	add	r3, r2
 800c026:	3304      	adds	r3, #4
 800c028:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	68f9      	ldr	r1, [r7, #12]
 800c030:	4618      	mov	r0, r3
 800c032:	f006 fe71 	bl	8012d18 <USB_EPStopXfer>
 800c036:	4603      	mov	r3, r0
 800c038:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c03a:	7afb      	ldrb	r3, [r7, #11]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3710      	adds	r7, #16
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	460b      	mov	r3, r1
 800c04e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800c056:	2b01      	cmp	r3, #1
 800c058:	d101      	bne.n	800c05e <HAL_PCD_EP_Flush+0x1a>
 800c05a:	2302      	movs	r3, #2
 800c05c:	e01b      	b.n	800c096 <HAL_PCD_EP_Flush+0x52>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2201      	movs	r2, #1
 800c062:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 800c066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	da09      	bge.n	800c082 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	78fb      	ldrb	r3, [r7, #3]
 800c074:	f003 030f 	and.w	r3, r3, #15
 800c078:	4619      	mov	r1, r3
 800c07a:	4610      	mov	r0, r2
 800c07c:	f006 f8a6 	bl	80121cc <USB_FlushTxFifo>
 800c080:	e004      	b.n	800c08c <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4618      	mov	r0, r3
 800c088:	f006 f8d4 	bl	8012234 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2200      	movs	r2, #0
 800c090:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	3708      	adds	r7, #8
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b08a      	sub	sp, #40	; 0x28
 800c0a2:	af02      	add	r7, sp, #8
 800c0a4:	6078      	str	r0, [r7, #4]
 800c0a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c0b2:	683a      	ldr	r2, [r7, #0]
 800c0b4:	4613      	mov	r3, r2
 800c0b6:	00db      	lsls	r3, r3, #3
 800c0b8:	4413      	add	r3, r2
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	3338      	adds	r3, #56	; 0x38
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	4413      	add	r3, r2
 800c0c2:	3304      	adds	r3, #4
 800c0c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6a1a      	ldr	r2, [r3, #32]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	699b      	ldr	r3, [r3, #24]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d901      	bls.n	800c0d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	e06c      	b.n	800c1b0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	699a      	ldr	r2, [r3, #24]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	6a1b      	ldr	r3, [r3, #32]
 800c0de:	1ad3      	subs	r3, r2, r3
 800c0e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	68db      	ldr	r3, [r3, #12]
 800c0e6:	69fa      	ldr	r2, [r7, #28]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d902      	bls.n	800c0f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	3303      	adds	r3, #3
 800c0f6:	089b      	lsrs	r3, r3, #2
 800c0f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c0fa:	e02b      	b.n	800c154 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	699a      	ldr	r2, [r3, #24]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	6a1b      	ldr	r3, [r3, #32]
 800c104:	1ad3      	subs	r3, r2, r3
 800c106:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	69fa      	ldr	r2, [r7, #28]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d902      	bls.n	800c118 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	3303      	adds	r3, #3
 800c11c:	089b      	lsrs	r3, r3, #2
 800c11e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	6919      	ldr	r1, [r3, #16]
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	b2da      	uxtb	r2, r3
 800c128:	69fb      	ldr	r3, [r7, #28]
 800c12a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c130:	b2db      	uxtb	r3, r3
 800c132:	9300      	str	r3, [sp, #0]
 800c134:	4603      	mov	r3, r0
 800c136:	6978      	ldr	r0, [r7, #20]
 800c138:	f006 fe98 	bl	8012e6c <USB_WritePacket>

    ep->xfer_buff  += len;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	691a      	ldr	r2, [r3, #16]
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	441a      	add	r2, r3
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6a1a      	ldr	r2, [r3, #32]
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	441a      	add	r2, r3
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	015a      	lsls	r2, r3, #5
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	4413      	add	r3, r2
 800c15c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c160:	699b      	ldr	r3, [r3, #24]
 800c162:	b29b      	uxth	r3, r3
 800c164:	69ba      	ldr	r2, [r7, #24]
 800c166:	429a      	cmp	r2, r3
 800c168:	d809      	bhi.n	800c17e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6a1a      	ldr	r2, [r3, #32]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c172:	429a      	cmp	r2, r3
 800c174:	d203      	bcs.n	800c17e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	699b      	ldr	r3, [r3, #24]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d1be      	bne.n	800c0fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	699a      	ldr	r2, [r3, #24]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	6a1b      	ldr	r3, [r3, #32]
 800c186:	429a      	cmp	r2, r3
 800c188:	d811      	bhi.n	800c1ae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	f003 030f 	and.w	r3, r3, #15
 800c190:	2201      	movs	r2, #1
 800c192:	fa02 f303 	lsl.w	r3, r2, r3
 800c196:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c19e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	43db      	mvns	r3, r3
 800c1a4:	6939      	ldr	r1, [r7, #16]
 800c1a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1aa:	4013      	ands	r3, r2
 800c1ac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800c1ae:	2300      	movs	r3, #0
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3720      	adds	r7, #32
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b088      	sub	sp, #32
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c1cc:	69fb      	ldr	r3, [r7, #28]
 800c1ce:	333c      	adds	r3, #60	; 0x3c
 800c1d0:	3304      	adds	r3, #4
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	015a      	lsls	r2, r3, #5
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	4413      	add	r3, r2
 800c1de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	691b      	ldr	r3, [r3, #16]
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	d17b      	bne.n	800c2e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	f003 0308 	and.w	r3, r3, #8
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d015      	beq.n	800c224 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	4a61      	ldr	r2, [pc, #388]	; (800c380 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	f240 80b9 	bls.w	800c374 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f000 80b3 	beq.w	800c374 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	015a      	lsls	r2, r3, #5
 800c212:	69bb      	ldr	r3, [r7, #24]
 800c214:	4413      	add	r3, r2
 800c216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c21a:	461a      	mov	r2, r3
 800c21c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c220:	6093      	str	r3, [r2, #8]
 800c222:	e0a7      	b.n	800c374 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	f003 0320 	and.w	r3, r3, #32
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d009      	beq.n	800c242 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	015a      	lsls	r2, r3, #5
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	4413      	add	r3, r2
 800c236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c23a:	461a      	mov	r2, r3
 800c23c:	2320      	movs	r3, #32
 800c23e:	6093      	str	r3, [r2, #8]
 800c240:	e098      	b.n	800c374 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f040 8093 	bne.w	800c374 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	4a4b      	ldr	r2, [pc, #300]	; (800c380 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d90f      	bls.n	800c276 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d00a      	beq.n	800c276 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	015a      	lsls	r2, r3, #5
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	4413      	add	r3, r2
 800c268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c26c:	461a      	mov	r2, r3
 800c26e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c272:	6093      	str	r3, [r2, #8]
 800c274:	e07e      	b.n	800c374 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c276:	683a      	ldr	r2, [r7, #0]
 800c278:	4613      	mov	r3, r2
 800c27a:	00db      	lsls	r3, r3, #3
 800c27c:	4413      	add	r3, r2
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	4413      	add	r3, r2
 800c288:	3304      	adds	r3, #4
 800c28a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	69da      	ldr	r2, [r3, #28]
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	0159      	lsls	r1, r3, #5
 800c294:	69bb      	ldr	r3, [r7, #24]
 800c296:	440b      	add	r3, r1
 800c298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c29c:	691b      	ldr	r3, [r3, #16]
 800c29e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2a2:	1ad2      	subs	r2, r2, r3
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d114      	bne.n	800c2d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	699b      	ldr	r3, [r3, #24]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d109      	bne.n	800c2ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6818      	ldr	r0, [r3, #0]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	2101      	movs	r1, #1
 800c2c4:	f007 f868 	bl	8013398 <USB_EP0_OutStart>
 800c2c8:	e006      	b.n	800c2d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	691a      	ldr	r2, [r3, #16]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	6a1b      	ldr	r3, [r3, #32]
 800c2d2:	441a      	add	r2, r3
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	4619      	mov	r1, r3
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f00c f956 	bl	8018590 <HAL_PCD_DataOutStageCallback>
 800c2e4:	e046      	b.n	800c374 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	4a26      	ldr	r2, [pc, #152]	; (800c384 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d124      	bne.n	800c338 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d00a      	beq.n	800c30e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	015a      	lsls	r2, r3, #5
 800c2fc:	69bb      	ldr	r3, [r7, #24]
 800c2fe:	4413      	add	r3, r2
 800c300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c304:	461a      	mov	r2, r3
 800c306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c30a:	6093      	str	r3, [r2, #8]
 800c30c:	e032      	b.n	800c374 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	f003 0320 	and.w	r3, r3, #32
 800c314:	2b00      	cmp	r3, #0
 800c316:	d008      	beq.n	800c32a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	015a      	lsls	r2, r3, #5
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	4413      	add	r3, r2
 800c320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c324:	461a      	mov	r2, r3
 800c326:	2320      	movs	r3, #32
 800c328:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	4619      	mov	r1, r3
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f00c f92d 	bl	8018590 <HAL_PCD_DataOutStageCallback>
 800c336:	e01d      	b.n	800c374 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d114      	bne.n	800c368 <PCD_EP_OutXfrComplete_int+0x1b0>
 800c33e:	6879      	ldr	r1, [r7, #4]
 800c340:	683a      	ldr	r2, [r7, #0]
 800c342:	4613      	mov	r3, r2
 800c344:	00db      	lsls	r3, r3, #3
 800c346:	4413      	add	r3, r2
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	440b      	add	r3, r1
 800c34c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d108      	bne.n	800c368 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6818      	ldr	r0, [r3, #0]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c360:	461a      	mov	r2, r3
 800c362:	2100      	movs	r1, #0
 800c364:	f007 f818 	bl	8013398 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	4619      	mov	r1, r3
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f00c f90e 	bl	8018590 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c374:	2300      	movs	r3, #0
}
 800c376:	4618      	mov	r0, r3
 800c378:	3720      	adds	r7, #32
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	4f54300a 	.word	0x4f54300a
 800c384:	4f54310a 	.word	0x4f54310a

0800c388 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b086      	sub	sp, #24
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	333c      	adds	r3, #60	; 0x3c
 800c3a0:	3304      	adds	r3, #4
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	015a      	lsls	r2, r3, #5
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	4a15      	ldr	r2, [pc, #84]	; (800c410 <PCD_EP_OutSetupPacket_int+0x88>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d90e      	bls.n	800c3dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d009      	beq.n	800c3dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	015a      	lsls	r2, r3, #5
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f00c f8c5 	bl	801856c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	4a0a      	ldr	r2, [pc, #40]	; (800c410 <PCD_EP_OutSetupPacket_int+0x88>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d90c      	bls.n	800c404 <PCD_EP_OutSetupPacket_int+0x7c>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	691b      	ldr	r3, [r3, #16]
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d108      	bne.n	800c404 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6818      	ldr	r0, [r3, #0]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	2101      	movs	r1, #1
 800c400:	f006 ffca 	bl	8013398 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c404:	2300      	movs	r3, #0
}
 800c406:	4618      	mov	r0, r3
 800c408:	3718      	adds	r7, #24
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	4f54300a 	.word	0x4f54300a

0800c414 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c414:	b480      	push	{r7}
 800c416:	b085      	sub	sp, #20
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	460b      	mov	r3, r1
 800c41e:	70fb      	strb	r3, [r7, #3]
 800c420:	4613      	mov	r3, r2
 800c422:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c42a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c42c:	78fb      	ldrb	r3, [r7, #3]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d107      	bne.n	800c442 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c432:	883b      	ldrh	r3, [r7, #0]
 800c434:	0419      	lsls	r1, r3, #16
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	68ba      	ldr	r2, [r7, #8]
 800c43c:	430a      	orrs	r2, r1
 800c43e:	629a      	str	r2, [r3, #40]	; 0x28
 800c440:	e028      	b.n	800c494 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c448:	0c1b      	lsrs	r3, r3, #16
 800c44a:	68ba      	ldr	r2, [r7, #8]
 800c44c:	4413      	add	r3, r2
 800c44e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c450:	2300      	movs	r3, #0
 800c452:	73fb      	strb	r3, [r7, #15]
 800c454:	e00d      	b.n	800c472 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	7bfb      	ldrb	r3, [r7, #15]
 800c45c:	3340      	adds	r3, #64	; 0x40
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	4413      	add	r3, r2
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	0c1b      	lsrs	r3, r3, #16
 800c466:	68ba      	ldr	r2, [r7, #8]
 800c468:	4413      	add	r3, r2
 800c46a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c46c:	7bfb      	ldrb	r3, [r7, #15]
 800c46e:	3301      	adds	r3, #1
 800c470:	73fb      	strb	r3, [r7, #15]
 800c472:	7bfa      	ldrb	r2, [r7, #15]
 800c474:	78fb      	ldrb	r3, [r7, #3]
 800c476:	3b01      	subs	r3, #1
 800c478:	429a      	cmp	r2, r3
 800c47a:	d3ec      	bcc.n	800c456 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c47c:	883b      	ldrh	r3, [r7, #0]
 800c47e:	0418      	lsls	r0, r3, #16
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6819      	ldr	r1, [r3, #0]
 800c484:	78fb      	ldrb	r3, [r7, #3]
 800c486:	3b01      	subs	r3, #1
 800c488:	68ba      	ldr	r2, [r7, #8]
 800c48a:	4302      	orrs	r2, r0
 800c48c:	3340      	adds	r3, #64	; 0x40
 800c48e:	009b      	lsls	r3, r3, #2
 800c490:	440b      	add	r3, r1
 800c492:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	3714      	adds	r7, #20
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c4a2:	b480      	push	{r7}
 800c4a4:	b083      	sub	sp, #12
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	887a      	ldrh	r2, [r7, #2]
 800c4b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c4b6:	2300      	movs	r3, #0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	370c      	adds	r7, #12
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr

0800c4c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c4d0:	bf00      	nop
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b086      	sub	sp, #24
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d101      	bne.n	800c4ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e267      	b.n	800c9be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f003 0301 	and.w	r3, r3, #1
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d075      	beq.n	800c5e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c4fa:	4b88      	ldr	r3, [pc, #544]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c4fc:	689b      	ldr	r3, [r3, #8]
 800c4fe:	f003 030c 	and.w	r3, r3, #12
 800c502:	2b04      	cmp	r3, #4
 800c504:	d00c      	beq.n	800c520 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c506:	4b85      	ldr	r3, [pc, #532]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c508:	689b      	ldr	r3, [r3, #8]
 800c50a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c50e:	2b08      	cmp	r3, #8
 800c510:	d112      	bne.n	800c538 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c512:	4b82      	ldr	r3, [pc, #520]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c51a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c51e:	d10b      	bne.n	800c538 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c520:	4b7e      	ldr	r3, [pc, #504]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d05b      	beq.n	800c5e4 <HAL_RCC_OscConfig+0x108>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d157      	bne.n	800c5e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c534:	2301      	movs	r3, #1
 800c536:	e242      	b.n	800c9be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c540:	d106      	bne.n	800c550 <HAL_RCC_OscConfig+0x74>
 800c542:	4b76      	ldr	r3, [pc, #472]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4a75      	ldr	r2, [pc, #468]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c54c:	6013      	str	r3, [r2, #0]
 800c54e:	e01d      	b.n	800c58c <HAL_RCC_OscConfig+0xb0>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c558:	d10c      	bne.n	800c574 <HAL_RCC_OscConfig+0x98>
 800c55a:	4b70      	ldr	r3, [pc, #448]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4a6f      	ldr	r2, [pc, #444]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c564:	6013      	str	r3, [r2, #0]
 800c566:	4b6d      	ldr	r3, [pc, #436]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a6c      	ldr	r2, [pc, #432]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c56c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c570:	6013      	str	r3, [r2, #0]
 800c572:	e00b      	b.n	800c58c <HAL_RCC_OscConfig+0xb0>
 800c574:	4b69      	ldr	r3, [pc, #420]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4a68      	ldr	r2, [pc, #416]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c57a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c57e:	6013      	str	r3, [r2, #0]
 800c580:	4b66      	ldr	r3, [pc, #408]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	4a65      	ldr	r2, [pc, #404]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c58a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d013      	beq.n	800c5bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c594:	f7fd f842 	bl	800961c <HAL_GetTick>
 800c598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c59a:	e008      	b.n	800c5ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c59c:	f7fd f83e 	bl	800961c <HAL_GetTick>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	1ad3      	subs	r3, r2, r3
 800c5a6:	2b64      	cmp	r3, #100	; 0x64
 800c5a8:	d901      	bls.n	800c5ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c5aa:	2303      	movs	r3, #3
 800c5ac:	e207      	b.n	800c9be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c5ae:	4b5b      	ldr	r3, [pc, #364]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d0f0      	beq.n	800c59c <HAL_RCC_OscConfig+0xc0>
 800c5ba:	e014      	b.n	800c5e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c5bc:	f7fd f82e 	bl	800961c <HAL_GetTick>
 800c5c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c5c2:	e008      	b.n	800c5d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c5c4:	f7fd f82a 	bl	800961c <HAL_GetTick>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	1ad3      	subs	r3, r2, r3
 800c5ce:	2b64      	cmp	r3, #100	; 0x64
 800c5d0:	d901      	bls.n	800c5d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c5d2:	2303      	movs	r3, #3
 800c5d4:	e1f3      	b.n	800c9be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c5d6:	4b51      	ldr	r3, [pc, #324]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1f0      	bne.n	800c5c4 <HAL_RCC_OscConfig+0xe8>
 800c5e2:	e000      	b.n	800c5e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c5e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f003 0302 	and.w	r3, r3, #2
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d063      	beq.n	800c6ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c5f2:	4b4a      	ldr	r3, [pc, #296]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c5f4:	689b      	ldr	r3, [r3, #8]
 800c5f6:	f003 030c 	and.w	r3, r3, #12
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00b      	beq.n	800c616 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c5fe:	4b47      	ldr	r3, [pc, #284]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c606:	2b08      	cmp	r3, #8
 800c608:	d11c      	bne.n	800c644 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c60a:	4b44      	ldr	r3, [pc, #272]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c612:	2b00      	cmp	r3, #0
 800c614:	d116      	bne.n	800c644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c616:	4b41      	ldr	r3, [pc, #260]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f003 0302 	and.w	r3, r3, #2
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d005      	beq.n	800c62e <HAL_RCC_OscConfig+0x152>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	68db      	ldr	r3, [r3, #12]
 800c626:	2b01      	cmp	r3, #1
 800c628:	d001      	beq.n	800c62e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c62a:	2301      	movs	r3, #1
 800c62c:	e1c7      	b.n	800c9be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c62e:	4b3b      	ldr	r3, [pc, #236]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	691b      	ldr	r3, [r3, #16]
 800c63a:	00db      	lsls	r3, r3, #3
 800c63c:	4937      	ldr	r1, [pc, #220]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c63e:	4313      	orrs	r3, r2
 800c640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c642:	e03a      	b.n	800c6ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d020      	beq.n	800c68e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c64c:	4b34      	ldr	r3, [pc, #208]	; (800c720 <HAL_RCC_OscConfig+0x244>)
 800c64e:	2201      	movs	r2, #1
 800c650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c652:	f7fc ffe3 	bl	800961c <HAL_GetTick>
 800c656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c658:	e008      	b.n	800c66c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c65a:	f7fc ffdf 	bl	800961c <HAL_GetTick>
 800c65e:	4602      	mov	r2, r0
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	1ad3      	subs	r3, r2, r3
 800c664:	2b02      	cmp	r3, #2
 800c666:	d901      	bls.n	800c66c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c668:	2303      	movs	r3, #3
 800c66a:	e1a8      	b.n	800c9be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c66c:	4b2b      	ldr	r3, [pc, #172]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f003 0302 	and.w	r3, r3, #2
 800c674:	2b00      	cmp	r3, #0
 800c676:	d0f0      	beq.n	800c65a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c678:	4b28      	ldr	r3, [pc, #160]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	691b      	ldr	r3, [r3, #16]
 800c684:	00db      	lsls	r3, r3, #3
 800c686:	4925      	ldr	r1, [pc, #148]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c688:	4313      	orrs	r3, r2
 800c68a:	600b      	str	r3, [r1, #0]
 800c68c:	e015      	b.n	800c6ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c68e:	4b24      	ldr	r3, [pc, #144]	; (800c720 <HAL_RCC_OscConfig+0x244>)
 800c690:	2200      	movs	r2, #0
 800c692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c694:	f7fc ffc2 	bl	800961c <HAL_GetTick>
 800c698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c69a:	e008      	b.n	800c6ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c69c:	f7fc ffbe 	bl	800961c <HAL_GetTick>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	1ad3      	subs	r3, r2, r3
 800c6a6:	2b02      	cmp	r3, #2
 800c6a8:	d901      	bls.n	800c6ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c6aa:	2303      	movs	r3, #3
 800c6ac:	e187      	b.n	800c9be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c6ae:	4b1b      	ldr	r3, [pc, #108]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f003 0302 	and.w	r3, r3, #2
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1f0      	bne.n	800c69c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f003 0308 	and.w	r3, r3, #8
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d036      	beq.n	800c734 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	695b      	ldr	r3, [r3, #20]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d016      	beq.n	800c6fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c6ce:	4b15      	ldr	r3, [pc, #84]	; (800c724 <HAL_RCC_OscConfig+0x248>)
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6d4:	f7fc ffa2 	bl	800961c <HAL_GetTick>
 800c6d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c6da:	e008      	b.n	800c6ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c6dc:	f7fc ff9e 	bl	800961c <HAL_GetTick>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	1ad3      	subs	r3, r2, r3
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d901      	bls.n	800c6ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c6ea:	2303      	movs	r3, #3
 800c6ec:	e167      	b.n	800c9be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c6ee:	4b0b      	ldr	r3, [pc, #44]	; (800c71c <HAL_RCC_OscConfig+0x240>)
 800c6f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6f2:	f003 0302 	and.w	r3, r3, #2
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d0f0      	beq.n	800c6dc <HAL_RCC_OscConfig+0x200>
 800c6fa:	e01b      	b.n	800c734 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c6fc:	4b09      	ldr	r3, [pc, #36]	; (800c724 <HAL_RCC_OscConfig+0x248>)
 800c6fe:	2200      	movs	r2, #0
 800c700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c702:	f7fc ff8b 	bl	800961c <HAL_GetTick>
 800c706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c708:	e00e      	b.n	800c728 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c70a:	f7fc ff87 	bl	800961c <HAL_GetTick>
 800c70e:	4602      	mov	r2, r0
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	1ad3      	subs	r3, r2, r3
 800c714:	2b02      	cmp	r3, #2
 800c716:	d907      	bls.n	800c728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c718:	2303      	movs	r3, #3
 800c71a:	e150      	b.n	800c9be <HAL_RCC_OscConfig+0x4e2>
 800c71c:	40023800 	.word	0x40023800
 800c720:	42470000 	.word	0x42470000
 800c724:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c728:	4b88      	ldr	r3, [pc, #544]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c72a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c72c:	f003 0302 	and.w	r3, r3, #2
 800c730:	2b00      	cmp	r3, #0
 800c732:	d1ea      	bne.n	800c70a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f003 0304 	and.w	r3, r3, #4
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f000 8097 	beq.w	800c870 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c742:	2300      	movs	r3, #0
 800c744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c746:	4b81      	ldr	r3, [pc, #516]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c74a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d10f      	bne.n	800c772 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c752:	2300      	movs	r3, #0
 800c754:	60bb      	str	r3, [r7, #8]
 800c756:	4b7d      	ldr	r3, [pc, #500]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c75a:	4a7c      	ldr	r2, [pc, #496]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c75c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c760:	6413      	str	r3, [r2, #64]	; 0x40
 800c762:	4b7a      	ldr	r3, [pc, #488]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c76a:	60bb      	str	r3, [r7, #8]
 800c76c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c76e:	2301      	movs	r3, #1
 800c770:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c772:	4b77      	ldr	r3, [pc, #476]	; (800c950 <HAL_RCC_OscConfig+0x474>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d118      	bne.n	800c7b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c77e:	4b74      	ldr	r3, [pc, #464]	; (800c950 <HAL_RCC_OscConfig+0x474>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4a73      	ldr	r2, [pc, #460]	; (800c950 <HAL_RCC_OscConfig+0x474>)
 800c784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c78a:	f7fc ff47 	bl	800961c <HAL_GetTick>
 800c78e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c790:	e008      	b.n	800c7a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c792:	f7fc ff43 	bl	800961c <HAL_GetTick>
 800c796:	4602      	mov	r2, r0
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	1ad3      	subs	r3, r2, r3
 800c79c:	2b02      	cmp	r3, #2
 800c79e:	d901      	bls.n	800c7a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c7a0:	2303      	movs	r3, #3
 800c7a2:	e10c      	b.n	800c9be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c7a4:	4b6a      	ldr	r3, [pc, #424]	; (800c950 <HAL_RCC_OscConfig+0x474>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d0f0      	beq.n	800c792 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d106      	bne.n	800c7c6 <HAL_RCC_OscConfig+0x2ea>
 800c7b8:	4b64      	ldr	r3, [pc, #400]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c7ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7bc:	4a63      	ldr	r2, [pc, #396]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c7be:	f043 0301 	orr.w	r3, r3, #1
 800c7c2:	6713      	str	r3, [r2, #112]	; 0x70
 800c7c4:	e01c      	b.n	800c800 <HAL_RCC_OscConfig+0x324>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	689b      	ldr	r3, [r3, #8]
 800c7ca:	2b05      	cmp	r3, #5
 800c7cc:	d10c      	bne.n	800c7e8 <HAL_RCC_OscConfig+0x30c>
 800c7ce:	4b5f      	ldr	r3, [pc, #380]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c7d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7d2:	4a5e      	ldr	r2, [pc, #376]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c7d4:	f043 0304 	orr.w	r3, r3, #4
 800c7d8:	6713      	str	r3, [r2, #112]	; 0x70
 800c7da:	4b5c      	ldr	r3, [pc, #368]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c7dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7de:	4a5b      	ldr	r2, [pc, #364]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c7e0:	f043 0301 	orr.w	r3, r3, #1
 800c7e4:	6713      	str	r3, [r2, #112]	; 0x70
 800c7e6:	e00b      	b.n	800c800 <HAL_RCC_OscConfig+0x324>
 800c7e8:	4b58      	ldr	r3, [pc, #352]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c7ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7ec:	4a57      	ldr	r2, [pc, #348]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c7ee:	f023 0301 	bic.w	r3, r3, #1
 800c7f2:	6713      	str	r3, [r2, #112]	; 0x70
 800c7f4:	4b55      	ldr	r3, [pc, #340]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c7f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7f8:	4a54      	ldr	r2, [pc, #336]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c7fa:	f023 0304 	bic.w	r3, r3, #4
 800c7fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	689b      	ldr	r3, [r3, #8]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d015      	beq.n	800c834 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c808:	f7fc ff08 	bl	800961c <HAL_GetTick>
 800c80c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c80e:	e00a      	b.n	800c826 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c810:	f7fc ff04 	bl	800961c <HAL_GetTick>
 800c814:	4602      	mov	r2, r0
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	1ad3      	subs	r3, r2, r3
 800c81a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c81e:	4293      	cmp	r3, r2
 800c820:	d901      	bls.n	800c826 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c822:	2303      	movs	r3, #3
 800c824:	e0cb      	b.n	800c9be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c826:	4b49      	ldr	r3, [pc, #292]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c82a:	f003 0302 	and.w	r3, r3, #2
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d0ee      	beq.n	800c810 <HAL_RCC_OscConfig+0x334>
 800c832:	e014      	b.n	800c85e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c834:	f7fc fef2 	bl	800961c <HAL_GetTick>
 800c838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c83a:	e00a      	b.n	800c852 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c83c:	f7fc feee 	bl	800961c <HAL_GetTick>
 800c840:	4602      	mov	r2, r0
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	f241 3288 	movw	r2, #5000	; 0x1388
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d901      	bls.n	800c852 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c84e:	2303      	movs	r3, #3
 800c850:	e0b5      	b.n	800c9be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c852:	4b3e      	ldr	r3, [pc, #248]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c856:	f003 0302 	and.w	r3, r3, #2
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d1ee      	bne.n	800c83c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c85e:	7dfb      	ldrb	r3, [r7, #23]
 800c860:	2b01      	cmp	r3, #1
 800c862:	d105      	bne.n	800c870 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c864:	4b39      	ldr	r3, [pc, #228]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c868:	4a38      	ldr	r2, [pc, #224]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c86a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c86e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	699b      	ldr	r3, [r3, #24]
 800c874:	2b00      	cmp	r3, #0
 800c876:	f000 80a1 	beq.w	800c9bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c87a:	4b34      	ldr	r3, [pc, #208]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c87c:	689b      	ldr	r3, [r3, #8]
 800c87e:	f003 030c 	and.w	r3, r3, #12
 800c882:	2b08      	cmp	r3, #8
 800c884:	d05c      	beq.n	800c940 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	699b      	ldr	r3, [r3, #24]
 800c88a:	2b02      	cmp	r3, #2
 800c88c:	d141      	bne.n	800c912 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c88e:	4b31      	ldr	r3, [pc, #196]	; (800c954 <HAL_RCC_OscConfig+0x478>)
 800c890:	2200      	movs	r2, #0
 800c892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c894:	f7fc fec2 	bl	800961c <HAL_GetTick>
 800c898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c89a:	e008      	b.n	800c8ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c89c:	f7fc febe 	bl	800961c <HAL_GetTick>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	1ad3      	subs	r3, r2, r3
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	d901      	bls.n	800c8ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c8aa:	2303      	movs	r3, #3
 800c8ac:	e087      	b.n	800c9be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8ae:	4b27      	ldr	r3, [pc, #156]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1f0      	bne.n	800c89c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	69da      	ldr	r2, [r3, #28]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6a1b      	ldr	r3, [r3, #32]
 800c8c2:	431a      	orrs	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c8:	019b      	lsls	r3, r3, #6
 800c8ca:	431a      	orrs	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8d0:	085b      	lsrs	r3, r3, #1
 800c8d2:	3b01      	subs	r3, #1
 800c8d4:	041b      	lsls	r3, r3, #16
 800c8d6:	431a      	orrs	r2, r3
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8dc:	061b      	lsls	r3, r3, #24
 800c8de:	491b      	ldr	r1, [pc, #108]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c8e0:	4313      	orrs	r3, r2
 800c8e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c8e4:	4b1b      	ldr	r3, [pc, #108]	; (800c954 <HAL_RCC_OscConfig+0x478>)
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c8ea:	f7fc fe97 	bl	800961c <HAL_GetTick>
 800c8ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c8f0:	e008      	b.n	800c904 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c8f2:	f7fc fe93 	bl	800961c <HAL_GetTick>
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	1ad3      	subs	r3, r2, r3
 800c8fc:	2b02      	cmp	r3, #2
 800c8fe:	d901      	bls.n	800c904 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c900:	2303      	movs	r3, #3
 800c902:	e05c      	b.n	800c9be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c904:	4b11      	ldr	r3, [pc, #68]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d0f0      	beq.n	800c8f2 <HAL_RCC_OscConfig+0x416>
 800c910:	e054      	b.n	800c9bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c912:	4b10      	ldr	r3, [pc, #64]	; (800c954 <HAL_RCC_OscConfig+0x478>)
 800c914:	2200      	movs	r2, #0
 800c916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c918:	f7fc fe80 	bl	800961c <HAL_GetTick>
 800c91c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c91e:	e008      	b.n	800c932 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c920:	f7fc fe7c 	bl	800961c <HAL_GetTick>
 800c924:	4602      	mov	r2, r0
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	1ad3      	subs	r3, r2, r3
 800c92a:	2b02      	cmp	r3, #2
 800c92c:	d901      	bls.n	800c932 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c92e:	2303      	movs	r3, #3
 800c930:	e045      	b.n	800c9be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c932:	4b06      	ldr	r3, [pc, #24]	; (800c94c <HAL_RCC_OscConfig+0x470>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d1f0      	bne.n	800c920 <HAL_RCC_OscConfig+0x444>
 800c93e:	e03d      	b.n	800c9bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	699b      	ldr	r3, [r3, #24]
 800c944:	2b01      	cmp	r3, #1
 800c946:	d107      	bne.n	800c958 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c948:	2301      	movs	r3, #1
 800c94a:	e038      	b.n	800c9be <HAL_RCC_OscConfig+0x4e2>
 800c94c:	40023800 	.word	0x40023800
 800c950:	40007000 	.word	0x40007000
 800c954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c958:	4b1b      	ldr	r3, [pc, #108]	; (800c9c8 <HAL_RCC_OscConfig+0x4ec>)
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	699b      	ldr	r3, [r3, #24]
 800c962:	2b01      	cmp	r3, #1
 800c964:	d028      	beq.n	800c9b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c970:	429a      	cmp	r2, r3
 800c972:	d121      	bne.n	800c9b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c97e:	429a      	cmp	r2, r3
 800c980:	d11a      	bne.n	800c9b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c988:	4013      	ands	r3, r2
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c98e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c990:	4293      	cmp	r3, r2
 800c992:	d111      	bne.n	800c9b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c99e:	085b      	lsrs	r3, r3, #1
 800c9a0:	3b01      	subs	r3, #1
 800c9a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d107      	bne.n	800c9b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d001      	beq.n	800c9bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	e000      	b.n	800c9be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c9bc:	2300      	movs	r3, #0
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3718      	adds	r7, #24
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	40023800 	.word	0x40023800

0800c9cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d101      	bne.n	800c9e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e0cc      	b.n	800cb7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c9e0:	4b68      	ldr	r3, [pc, #416]	; (800cb84 <HAL_RCC_ClockConfig+0x1b8>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f003 0307 	and.w	r3, r3, #7
 800c9e8:	683a      	ldr	r2, [r7, #0]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d90c      	bls.n	800ca08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c9ee:	4b65      	ldr	r3, [pc, #404]	; (800cb84 <HAL_RCC_ClockConfig+0x1b8>)
 800c9f0:	683a      	ldr	r2, [r7, #0]
 800c9f2:	b2d2      	uxtb	r2, r2
 800c9f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c9f6:	4b63      	ldr	r3, [pc, #396]	; (800cb84 <HAL_RCC_ClockConfig+0x1b8>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f003 0307 	and.w	r3, r3, #7
 800c9fe:	683a      	ldr	r2, [r7, #0]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d001      	beq.n	800ca08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ca04:	2301      	movs	r3, #1
 800ca06:	e0b8      	b.n	800cb7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f003 0302 	and.w	r3, r3, #2
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d020      	beq.n	800ca56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f003 0304 	and.w	r3, r3, #4
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d005      	beq.n	800ca2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ca20:	4b59      	ldr	r3, [pc, #356]	; (800cb88 <HAL_RCC_ClockConfig+0x1bc>)
 800ca22:	689b      	ldr	r3, [r3, #8]
 800ca24:	4a58      	ldr	r2, [pc, #352]	; (800cb88 <HAL_RCC_ClockConfig+0x1bc>)
 800ca26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ca2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f003 0308 	and.w	r3, r3, #8
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d005      	beq.n	800ca44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ca38:	4b53      	ldr	r3, [pc, #332]	; (800cb88 <HAL_RCC_ClockConfig+0x1bc>)
 800ca3a:	689b      	ldr	r3, [r3, #8]
 800ca3c:	4a52      	ldr	r2, [pc, #328]	; (800cb88 <HAL_RCC_ClockConfig+0x1bc>)
 800ca3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ca42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ca44:	4b50      	ldr	r3, [pc, #320]	; (800cb88 <HAL_RCC_ClockConfig+0x1bc>)
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	494d      	ldr	r1, [pc, #308]	; (800cb88 <HAL_RCC_ClockConfig+0x1bc>)
 800ca52:	4313      	orrs	r3, r2
 800ca54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f003 0301 	and.w	r3, r3, #1
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d044      	beq.n	800caec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d107      	bne.n	800ca7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca6a:	4b47      	ldr	r3, [pc, #284]	; (800cb88 <HAL_RCC_ClockConfig+0x1bc>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d119      	bne.n	800caaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ca76:	2301      	movs	r3, #1
 800ca78:	e07f      	b.n	800cb7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	d003      	beq.n	800ca8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ca86:	2b03      	cmp	r3, #3
 800ca88:	d107      	bne.n	800ca9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca8a:	4b3f      	ldr	r3, [pc, #252]	; (800cb88 <HAL_RCC_ClockConfig+0x1bc>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d109      	bne.n	800caaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ca96:	2301      	movs	r3, #1
 800ca98:	e06f      	b.n	800cb7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ca9a:	4b3b      	ldr	r3, [pc, #236]	; (800cb88 <HAL_RCC_ClockConfig+0x1bc>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f003 0302 	and.w	r3, r3, #2
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d101      	bne.n	800caaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800caa6:	2301      	movs	r3, #1
 800caa8:	e067      	b.n	800cb7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800caaa:	4b37      	ldr	r3, [pc, #220]	; (800cb88 <HAL_RCC_ClockConfig+0x1bc>)
 800caac:	689b      	ldr	r3, [r3, #8]
 800caae:	f023 0203 	bic.w	r2, r3, #3
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	4934      	ldr	r1, [pc, #208]	; (800cb88 <HAL_RCC_ClockConfig+0x1bc>)
 800cab8:	4313      	orrs	r3, r2
 800caba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cabc:	f7fc fdae 	bl	800961c <HAL_GetTick>
 800cac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cac2:	e00a      	b.n	800cada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cac4:	f7fc fdaa 	bl	800961c <HAL_GetTick>
 800cac8:	4602      	mov	r2, r0
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	1ad3      	subs	r3, r2, r3
 800cace:	f241 3288 	movw	r2, #5000	; 0x1388
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d901      	bls.n	800cada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cad6:	2303      	movs	r3, #3
 800cad8:	e04f      	b.n	800cb7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cada:	4b2b      	ldr	r3, [pc, #172]	; (800cb88 <HAL_RCC_ClockConfig+0x1bc>)
 800cadc:	689b      	ldr	r3, [r3, #8]
 800cade:	f003 020c 	and.w	r2, r3, #12
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	429a      	cmp	r2, r3
 800caea:	d1eb      	bne.n	800cac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800caec:	4b25      	ldr	r3, [pc, #148]	; (800cb84 <HAL_RCC_ClockConfig+0x1b8>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f003 0307 	and.w	r3, r3, #7
 800caf4:	683a      	ldr	r2, [r7, #0]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d20c      	bcs.n	800cb14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cafa:	4b22      	ldr	r3, [pc, #136]	; (800cb84 <HAL_RCC_ClockConfig+0x1b8>)
 800cafc:	683a      	ldr	r2, [r7, #0]
 800cafe:	b2d2      	uxtb	r2, r2
 800cb00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb02:	4b20      	ldr	r3, [pc, #128]	; (800cb84 <HAL_RCC_ClockConfig+0x1b8>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f003 0307 	and.w	r3, r3, #7
 800cb0a:	683a      	ldr	r2, [r7, #0]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d001      	beq.n	800cb14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800cb10:	2301      	movs	r3, #1
 800cb12:	e032      	b.n	800cb7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f003 0304 	and.w	r3, r3, #4
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d008      	beq.n	800cb32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cb20:	4b19      	ldr	r3, [pc, #100]	; (800cb88 <HAL_RCC_ClockConfig+0x1bc>)
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	4916      	ldr	r1, [pc, #88]	; (800cb88 <HAL_RCC_ClockConfig+0x1bc>)
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f003 0308 	and.w	r3, r3, #8
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d009      	beq.n	800cb52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cb3e:	4b12      	ldr	r3, [pc, #72]	; (800cb88 <HAL_RCC_ClockConfig+0x1bc>)
 800cb40:	689b      	ldr	r3, [r3, #8]
 800cb42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	691b      	ldr	r3, [r3, #16]
 800cb4a:	00db      	lsls	r3, r3, #3
 800cb4c:	490e      	ldr	r1, [pc, #56]	; (800cb88 <HAL_RCC_ClockConfig+0x1bc>)
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800cb52:	f000 f821 	bl	800cb98 <HAL_RCC_GetSysClockFreq>
 800cb56:	4602      	mov	r2, r0
 800cb58:	4b0b      	ldr	r3, [pc, #44]	; (800cb88 <HAL_RCC_ClockConfig+0x1bc>)
 800cb5a:	689b      	ldr	r3, [r3, #8]
 800cb5c:	091b      	lsrs	r3, r3, #4
 800cb5e:	f003 030f 	and.w	r3, r3, #15
 800cb62:	490a      	ldr	r1, [pc, #40]	; (800cb8c <HAL_RCC_ClockConfig+0x1c0>)
 800cb64:	5ccb      	ldrb	r3, [r1, r3]
 800cb66:	fa22 f303 	lsr.w	r3, r2, r3
 800cb6a:	4a09      	ldr	r2, [pc, #36]	; (800cb90 <HAL_RCC_ClockConfig+0x1c4>)
 800cb6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800cb6e:	4b09      	ldr	r3, [pc, #36]	; (800cb94 <HAL_RCC_ClockConfig+0x1c8>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7f6 fe98 	bl	80038a8 <HAL_InitTick>

  return HAL_OK;
 800cb78:	2300      	movs	r3, #0
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	40023c00 	.word	0x40023c00
 800cb88:	40023800 	.word	0x40023800
 800cb8c:	0801d228 	.word	0x0801d228
 800cb90:	20000004 	.word	0x20000004
 800cb94:	20000020 	.word	0x20000020

0800cb98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cb98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb9c:	b094      	sub	sp, #80	; 0x50
 800cb9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800cba0:	2300      	movs	r3, #0
 800cba2:	647b      	str	r3, [r7, #68]	; 0x44
 800cba4:	2300      	movs	r3, #0
 800cba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cba8:	2300      	movs	r3, #0
 800cbaa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800cbac:	2300      	movs	r3, #0
 800cbae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cbb0:	4b79      	ldr	r3, [pc, #484]	; (800cd98 <HAL_RCC_GetSysClockFreq+0x200>)
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	f003 030c 	and.w	r3, r3, #12
 800cbb8:	2b08      	cmp	r3, #8
 800cbba:	d00d      	beq.n	800cbd8 <HAL_RCC_GetSysClockFreq+0x40>
 800cbbc:	2b08      	cmp	r3, #8
 800cbbe:	f200 80e1 	bhi.w	800cd84 <HAL_RCC_GetSysClockFreq+0x1ec>
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d002      	beq.n	800cbcc <HAL_RCC_GetSysClockFreq+0x34>
 800cbc6:	2b04      	cmp	r3, #4
 800cbc8:	d003      	beq.n	800cbd2 <HAL_RCC_GetSysClockFreq+0x3a>
 800cbca:	e0db      	b.n	800cd84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cbcc:	4b73      	ldr	r3, [pc, #460]	; (800cd9c <HAL_RCC_GetSysClockFreq+0x204>)
 800cbce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800cbd0:	e0db      	b.n	800cd8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cbd2:	4b72      	ldr	r3, [pc, #456]	; (800cd9c <HAL_RCC_GetSysClockFreq+0x204>)
 800cbd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cbd6:	e0d8      	b.n	800cd8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cbd8:	4b6f      	ldr	r3, [pc, #444]	; (800cd98 <HAL_RCC_GetSysClockFreq+0x200>)
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cbe0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800cbe2:	4b6d      	ldr	r3, [pc, #436]	; (800cd98 <HAL_RCC_GetSysClockFreq+0x200>)
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d063      	beq.n	800ccb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cbee:	4b6a      	ldr	r3, [pc, #424]	; (800cd98 <HAL_RCC_GetSysClockFreq+0x200>)
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	099b      	lsrs	r3, r3, #6
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	63bb      	str	r3, [r7, #56]	; 0x38
 800cbf8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc00:	633b      	str	r3, [r7, #48]	; 0x30
 800cc02:	2300      	movs	r3, #0
 800cc04:	637b      	str	r3, [r7, #52]	; 0x34
 800cc06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800cc0a:	4622      	mov	r2, r4
 800cc0c:	462b      	mov	r3, r5
 800cc0e:	f04f 0000 	mov.w	r0, #0
 800cc12:	f04f 0100 	mov.w	r1, #0
 800cc16:	0159      	lsls	r1, r3, #5
 800cc18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cc1c:	0150      	lsls	r0, r2, #5
 800cc1e:	4602      	mov	r2, r0
 800cc20:	460b      	mov	r3, r1
 800cc22:	4621      	mov	r1, r4
 800cc24:	1a51      	subs	r1, r2, r1
 800cc26:	6139      	str	r1, [r7, #16]
 800cc28:	4629      	mov	r1, r5
 800cc2a:	eb63 0301 	sbc.w	r3, r3, r1
 800cc2e:	617b      	str	r3, [r7, #20]
 800cc30:	f04f 0200 	mov.w	r2, #0
 800cc34:	f04f 0300 	mov.w	r3, #0
 800cc38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cc3c:	4659      	mov	r1, fp
 800cc3e:	018b      	lsls	r3, r1, #6
 800cc40:	4651      	mov	r1, sl
 800cc42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800cc46:	4651      	mov	r1, sl
 800cc48:	018a      	lsls	r2, r1, #6
 800cc4a:	4651      	mov	r1, sl
 800cc4c:	ebb2 0801 	subs.w	r8, r2, r1
 800cc50:	4659      	mov	r1, fp
 800cc52:	eb63 0901 	sbc.w	r9, r3, r1
 800cc56:	f04f 0200 	mov.w	r2, #0
 800cc5a:	f04f 0300 	mov.w	r3, #0
 800cc5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cc62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cc66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cc6a:	4690      	mov	r8, r2
 800cc6c:	4699      	mov	r9, r3
 800cc6e:	4623      	mov	r3, r4
 800cc70:	eb18 0303 	adds.w	r3, r8, r3
 800cc74:	60bb      	str	r3, [r7, #8]
 800cc76:	462b      	mov	r3, r5
 800cc78:	eb49 0303 	adc.w	r3, r9, r3
 800cc7c:	60fb      	str	r3, [r7, #12]
 800cc7e:	f04f 0200 	mov.w	r2, #0
 800cc82:	f04f 0300 	mov.w	r3, #0
 800cc86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800cc8a:	4629      	mov	r1, r5
 800cc8c:	028b      	lsls	r3, r1, #10
 800cc8e:	4621      	mov	r1, r4
 800cc90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cc94:	4621      	mov	r1, r4
 800cc96:	028a      	lsls	r2, r1, #10
 800cc98:	4610      	mov	r0, r2
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc9e:	2200      	movs	r2, #0
 800cca0:	62bb      	str	r3, [r7, #40]	; 0x28
 800cca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cca4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cca8:	f7f3 ffee 	bl	8000c88 <__aeabi_uldivmod>
 800ccac:	4602      	mov	r2, r0
 800ccae:	460b      	mov	r3, r1
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccb4:	e058      	b.n	800cd68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ccb6:	4b38      	ldr	r3, [pc, #224]	; (800cd98 <HAL_RCC_GetSysClockFreq+0x200>)
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	099b      	lsrs	r3, r3, #6
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	4611      	mov	r1, r2
 800ccc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ccc6:	623b      	str	r3, [r7, #32]
 800ccc8:	2300      	movs	r3, #0
 800ccca:	627b      	str	r3, [r7, #36]	; 0x24
 800cccc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ccd0:	4642      	mov	r2, r8
 800ccd2:	464b      	mov	r3, r9
 800ccd4:	f04f 0000 	mov.w	r0, #0
 800ccd8:	f04f 0100 	mov.w	r1, #0
 800ccdc:	0159      	lsls	r1, r3, #5
 800ccde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cce2:	0150      	lsls	r0, r2, #5
 800cce4:	4602      	mov	r2, r0
 800cce6:	460b      	mov	r3, r1
 800cce8:	4641      	mov	r1, r8
 800ccea:	ebb2 0a01 	subs.w	sl, r2, r1
 800ccee:	4649      	mov	r1, r9
 800ccf0:	eb63 0b01 	sbc.w	fp, r3, r1
 800ccf4:	f04f 0200 	mov.w	r2, #0
 800ccf8:	f04f 0300 	mov.w	r3, #0
 800ccfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800cd00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800cd04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800cd08:	ebb2 040a 	subs.w	r4, r2, sl
 800cd0c:	eb63 050b 	sbc.w	r5, r3, fp
 800cd10:	f04f 0200 	mov.w	r2, #0
 800cd14:	f04f 0300 	mov.w	r3, #0
 800cd18:	00eb      	lsls	r3, r5, #3
 800cd1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cd1e:	00e2      	lsls	r2, r4, #3
 800cd20:	4614      	mov	r4, r2
 800cd22:	461d      	mov	r5, r3
 800cd24:	4643      	mov	r3, r8
 800cd26:	18e3      	adds	r3, r4, r3
 800cd28:	603b      	str	r3, [r7, #0]
 800cd2a:	464b      	mov	r3, r9
 800cd2c:	eb45 0303 	adc.w	r3, r5, r3
 800cd30:	607b      	str	r3, [r7, #4]
 800cd32:	f04f 0200 	mov.w	r2, #0
 800cd36:	f04f 0300 	mov.w	r3, #0
 800cd3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800cd3e:	4629      	mov	r1, r5
 800cd40:	028b      	lsls	r3, r1, #10
 800cd42:	4621      	mov	r1, r4
 800cd44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cd48:	4621      	mov	r1, r4
 800cd4a:	028a      	lsls	r2, r1, #10
 800cd4c:	4610      	mov	r0, r2
 800cd4e:	4619      	mov	r1, r3
 800cd50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd52:	2200      	movs	r2, #0
 800cd54:	61bb      	str	r3, [r7, #24]
 800cd56:	61fa      	str	r2, [r7, #28]
 800cd58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cd5c:	f7f3 ff94 	bl	8000c88 <__aeabi_uldivmod>
 800cd60:	4602      	mov	r2, r0
 800cd62:	460b      	mov	r3, r1
 800cd64:	4613      	mov	r3, r2
 800cd66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800cd68:	4b0b      	ldr	r3, [pc, #44]	; (800cd98 <HAL_RCC_GetSysClockFreq+0x200>)
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	0c1b      	lsrs	r3, r3, #16
 800cd6e:	f003 0303 	and.w	r3, r3, #3
 800cd72:	3301      	adds	r3, #1
 800cd74:	005b      	lsls	r3, r3, #1
 800cd76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800cd78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cd82:	e002      	b.n	800cd8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cd84:	4b05      	ldr	r3, [pc, #20]	; (800cd9c <HAL_RCC_GetSysClockFreq+0x204>)
 800cd86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cd88:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cd8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3750      	adds	r7, #80	; 0x50
 800cd90:	46bd      	mov	sp, r7
 800cd92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cd96:	bf00      	nop
 800cd98:	40023800 	.word	0x40023800
 800cd9c:	00f42400 	.word	0x00f42400

0800cda0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cda0:	b480      	push	{r7}
 800cda2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cda4:	4b03      	ldr	r3, [pc, #12]	; (800cdb4 <HAL_RCC_GetHCLKFreq+0x14>)
 800cda6:	681b      	ldr	r3, [r3, #0]
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop
 800cdb4:	20000004 	.word	0x20000004

0800cdb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800cdbc:	f7ff fff0 	bl	800cda0 <HAL_RCC_GetHCLKFreq>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	4b05      	ldr	r3, [pc, #20]	; (800cdd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cdc4:	689b      	ldr	r3, [r3, #8]
 800cdc6:	0a9b      	lsrs	r3, r3, #10
 800cdc8:	f003 0307 	and.w	r3, r3, #7
 800cdcc:	4903      	ldr	r1, [pc, #12]	; (800cddc <HAL_RCC_GetPCLK1Freq+0x24>)
 800cdce:	5ccb      	ldrb	r3, [r1, r3]
 800cdd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	bd80      	pop	{r7, pc}
 800cdd8:	40023800 	.word	0x40023800
 800cddc:	0801d238 	.word	0x0801d238

0800cde0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800cde4:	f7ff ffdc 	bl	800cda0 <HAL_RCC_GetHCLKFreq>
 800cde8:	4602      	mov	r2, r0
 800cdea:	4b05      	ldr	r3, [pc, #20]	; (800ce00 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cdec:	689b      	ldr	r3, [r3, #8]
 800cdee:	0b5b      	lsrs	r3, r3, #13
 800cdf0:	f003 0307 	and.w	r3, r3, #7
 800cdf4:	4903      	ldr	r1, [pc, #12]	; (800ce04 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cdf6:	5ccb      	ldrb	r3, [r1, r3]
 800cdf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	40023800 	.word	0x40023800
 800ce04:	0801d238 	.word	0x0801d238

0800ce08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b083      	sub	sp, #12
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	220f      	movs	r2, #15
 800ce16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ce18:	4b12      	ldr	r3, [pc, #72]	; (800ce64 <HAL_RCC_GetClockConfig+0x5c>)
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	f003 0203 	and.w	r2, r3, #3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ce24:	4b0f      	ldr	r3, [pc, #60]	; (800ce64 <HAL_RCC_GetClockConfig+0x5c>)
 800ce26:	689b      	ldr	r3, [r3, #8]
 800ce28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ce30:	4b0c      	ldr	r3, [pc, #48]	; (800ce64 <HAL_RCC_GetClockConfig+0x5c>)
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800ce3c:	4b09      	ldr	r3, [pc, #36]	; (800ce64 <HAL_RCC_GetClockConfig+0x5c>)
 800ce3e:	689b      	ldr	r3, [r3, #8]
 800ce40:	08db      	lsrs	r3, r3, #3
 800ce42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ce4a:	4b07      	ldr	r3, [pc, #28]	; (800ce68 <HAL_RCC_GetClockConfig+0x60>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f003 0207 	and.w	r2, r3, #7
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	601a      	str	r2, [r3, #0]
}
 800ce56:	bf00      	nop
 800ce58:	370c      	adds	r7, #12
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr
 800ce62:	bf00      	nop
 800ce64:	40023800 	.word	0x40023800
 800ce68:	40023c00 	.word	0x40023c00

0800ce6c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d101      	bne.n	800ce7e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	e022      	b.n	800cec4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d105      	bne.n	800ce96 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f7f6 f93b 	bl	800310c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2203      	movs	r2, #3
 800ce9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 f814 	bl	800cecc <HAL_SD_InitCard>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d001      	beq.n	800ceae <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e00a      	b.n	800cec4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2201      	movs	r2, #1
 800cebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cec2:	2300      	movs	r3, #0
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3708      	adds	r7, #8
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cecc:	b5b0      	push	{r4, r5, r7, lr}
 800cece:	b08e      	sub	sp, #56	; 0x38
 800ced0:	af04      	add	r7, sp, #16
 800ced2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800ced4:	2300      	movs	r3, #0
 800ced6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800ced8:	2300      	movs	r3, #0
 800ceda:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cedc:	2300      	movs	r3, #0
 800cede:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cee0:	2300      	movs	r3, #0
 800cee2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cee4:	2300      	movs	r3, #0
 800cee6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cee8:	2376      	movs	r3, #118	; 0x76
 800ceea:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681d      	ldr	r5, [r3, #0]
 800cef0:	466c      	mov	r4, sp
 800cef2:	f107 0314 	add.w	r3, r7, #20
 800cef6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cefa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cefe:	f107 0308 	add.w	r3, r7, #8
 800cf02:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cf04:	4628      	mov	r0, r5
 800cf06:	f004 f917 	bl	8011138 <SDIO_Init>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800cf10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d001      	beq.n	800cf1c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	e04f      	b.n	800cfbc <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cf1c:	4b29      	ldr	r3, [pc, #164]	; (800cfc4 <HAL_SD_InitCard+0xf8>)
 800cf1e:	2200      	movs	r2, #0
 800cf20:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	4618      	mov	r0, r3
 800cf28:	f004 f94f 	bl	80111ca <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800cf2c:	4b25      	ldr	r3, [pc, #148]	; (800cfc4 <HAL_SD_InitCard+0xf8>)
 800cf2e:	2201      	movs	r2, #1
 800cf30:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800cf32:	2002      	movs	r0, #2
 800cf34:	f7fc fb7e 	bl	8009634 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 ff03 	bl	800dd44 <SD_PowerON>
 800cf3e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf40:	6a3b      	ldr	r3, [r7, #32]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d00b      	beq.n	800cf5e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2201      	movs	r2, #1
 800cf4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf52:	6a3b      	ldr	r3, [r7, #32]
 800cf54:	431a      	orrs	r2, r3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e02e      	b.n	800cfbc <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 fe22 	bl	800dba8 <SD_InitCard>
 800cf64:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf66:	6a3b      	ldr	r3, [r7, #32]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d00b      	beq.n	800cf84 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2201      	movs	r2, #1
 800cf70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf78:	6a3b      	ldr	r3, [r7, #32]
 800cf7a:	431a      	orrs	r2, r3
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cf80:	2301      	movs	r3, #1
 800cf82:	e01b      	b.n	800cfbc <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f004 f9ae 	bl	80112ee <SDMMC_CmdBlockLength>
 800cf92:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf94:	6a3b      	ldr	r3, [r7, #32]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d00f      	beq.n	800cfba <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4a0a      	ldr	r2, [pc, #40]	; (800cfc8 <HAL_SD_InitCard+0xfc>)
 800cfa0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfa6:	6a3b      	ldr	r3, [r7, #32]
 800cfa8:	431a      	orrs	r2, r3
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	e000      	b.n	800cfbc <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800cfba:	2300      	movs	r3, #0
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3728      	adds	r7, #40	; 0x28
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bdb0      	pop	{r4, r5, r7, pc}
 800cfc4:	422580a0 	.word	0x422580a0
 800cfc8:	004005ff 	.word	0x004005ff

0800cfcc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b092      	sub	sp, #72	; 0x48
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]
 800cfd8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cfda:	f7fc fb1f 	bl	800961c <HAL_GetTick>
 800cfde:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d107      	bne.n	800cffe <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cff2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cffa:	2301      	movs	r3, #1
 800cffc:	e1bd      	b.n	800d37a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d004:	b2db      	uxtb	r3, r3
 800d006:	2b01      	cmp	r3, #1
 800d008:	f040 81b0 	bne.w	800d36c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2200      	movs	r2, #0
 800d010:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	441a      	add	r2, r3
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d907      	bls.n	800d030 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d024:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d02c:	2301      	movs	r3, #1
 800d02e:	e1a4      	b.n	800d37a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2203      	movs	r2, #3
 800d034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2200      	movs	r2, #0
 800d03e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d044:	2b01      	cmp	r3, #1
 800d046:	d002      	beq.n	800d04e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800d048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04a:	025b      	lsls	r3, r3, #9
 800d04c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d04e:	f04f 33ff 	mov.w	r3, #4294967295
 800d052:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	025b      	lsls	r3, r3, #9
 800d058:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d05a:	2390      	movs	r3, #144	; 0x90
 800d05c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d05e:	2302      	movs	r3, #2
 800d060:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d062:	2300      	movs	r3, #0
 800d064:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800d066:	2301      	movs	r3, #1
 800d068:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f107 0214 	add.w	r2, r7, #20
 800d072:	4611      	mov	r1, r2
 800d074:	4618      	mov	r0, r3
 800d076:	f004 f90e 	bl	8011296 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d90a      	bls.n	800d096 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2202      	movs	r2, #2
 800d084:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d08c:	4618      	mov	r0, r3
 800d08e:	f004 f972 	bl	8011376 <SDMMC_CmdReadMultiBlock>
 800d092:	6478      	str	r0, [r7, #68]	; 0x44
 800d094:	e009      	b.n	800d0aa <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2201      	movs	r2, #1
 800d09a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f004 f945 	bl	8011332 <SDMMC_CmdReadSingleBlock>
 800d0a8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d012      	beq.n	800d0d6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a7a      	ldr	r2, [pc, #488]	; (800d2a0 <HAL_SD_ReadBlocks+0x2d4>)
 800d0b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0be:	431a      	orrs	r2, r3
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	e151      	b.n	800d37a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800d0da:	e061      	b.n	800d1a0 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d03c      	beq.n	800d164 <HAL_SD_ReadBlocks+0x198>
 800d0ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d039      	beq.n	800d164 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	643b      	str	r3, [r7, #64]	; 0x40
 800d0f4:	e033      	b.n	800d15e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f004 f847 	bl	801118e <SDIO_ReadFIFO>
 800d100:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800d102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d104:	b2da      	uxtb	r2, r3
 800d106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d108:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d10c:	3301      	adds	r3, #1
 800d10e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d112:	3b01      	subs	r3, #1
 800d114:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d118:	0a1b      	lsrs	r3, r3, #8
 800d11a:	b2da      	uxtb	r2, r3
 800d11c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d11e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d122:	3301      	adds	r3, #1
 800d124:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d128:	3b01      	subs	r3, #1
 800d12a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12e:	0c1b      	lsrs	r3, r3, #16
 800d130:	b2da      	uxtb	r2, r3
 800d132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d134:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d138:	3301      	adds	r3, #1
 800d13a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d13e:	3b01      	subs	r3, #1
 800d140:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d144:	0e1b      	lsrs	r3, r3, #24
 800d146:	b2da      	uxtb	r2, r3
 800d148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d14a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d14e:	3301      	adds	r3, #1
 800d150:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d154:	3b01      	subs	r3, #1
 800d156:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800d158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d15a:	3301      	adds	r3, #1
 800d15c:	643b      	str	r3, [r7, #64]	; 0x40
 800d15e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d160:	2b07      	cmp	r3, #7
 800d162:	d9c8      	bls.n	800d0f6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d164:	f7fc fa5a 	bl	800961c <HAL_GetTick>
 800d168:	4602      	mov	r2, r0
 800d16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d16c:	1ad3      	subs	r3, r2, r3
 800d16e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d170:	429a      	cmp	r2, r3
 800d172:	d902      	bls.n	800d17a <HAL_SD_ReadBlocks+0x1ae>
 800d174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d176:	2b00      	cmp	r3, #0
 800d178:	d112      	bne.n	800d1a0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	4a48      	ldr	r2, [pc, #288]	; (800d2a0 <HAL_SD_ReadBlocks+0x2d4>)
 800d180:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d186:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2201      	movs	r2, #1
 800d192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2200      	movs	r2, #0
 800d19a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d19c:	2303      	movs	r3, #3
 800d19e:	e0ec      	b.n	800d37a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1a6:	f240 332a 	movw	r3, #810	; 0x32a
 800d1aa:	4013      	ands	r3, r2
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d095      	beq.n	800d0dc <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d022      	beq.n	800d204 <HAL_SD_ReadBlocks+0x238>
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d91f      	bls.n	800d204 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1c8:	2b03      	cmp	r3, #3
 800d1ca:	d01b      	beq.n	800d204 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f004 f937 	bl	8011444 <SDMMC_CmdStopTransfer>
 800d1d6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d1d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d012      	beq.n	800d204 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4a2f      	ldr	r2, [pc, #188]	; (800d2a0 <HAL_SD_ReadBlocks+0x2d4>)
 800d1e4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1ec:	431a      	orrs	r2, r3
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d200:	2301      	movs	r3, #1
 800d202:	e0ba      	b.n	800d37a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d20a:	f003 0308 	and.w	r3, r3, #8
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d012      	beq.n	800d238 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4a22      	ldr	r2, [pc, #136]	; (800d2a0 <HAL_SD_ReadBlocks+0x2d4>)
 800d218:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d21e:	f043 0208 	orr.w	r2, r3, #8
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2201      	movs	r2, #1
 800d22a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2200      	movs	r2, #0
 800d232:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d234:	2301      	movs	r3, #1
 800d236:	e0a0      	b.n	800d37a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d23e:	f003 0302 	and.w	r3, r3, #2
 800d242:	2b00      	cmp	r3, #0
 800d244:	d012      	beq.n	800d26c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4a15      	ldr	r2, [pc, #84]	; (800d2a0 <HAL_SD_ReadBlocks+0x2d4>)
 800d24c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d252:	f043 0202 	orr.w	r2, r3, #2
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2201      	movs	r2, #1
 800d25e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2200      	movs	r2, #0
 800d266:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d268:	2301      	movs	r3, #1
 800d26a:	e086      	b.n	800d37a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d272:	f003 0320 	and.w	r3, r3, #32
 800d276:	2b00      	cmp	r3, #0
 800d278:	d063      	beq.n	800d342 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4a08      	ldr	r2, [pc, #32]	; (800d2a0 <HAL_SD_ReadBlocks+0x2d4>)
 800d280:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d286:	f043 0220 	orr.w	r2, r3, #32
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2201      	movs	r2, #1
 800d292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2200      	movs	r2, #0
 800d29a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d29c:	2301      	movs	r3, #1
 800d29e:	e06c      	b.n	800d37a <HAL_SD_ReadBlocks+0x3ae>
 800d2a0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f003 ff70 	bl	801118e <SDIO_ReadFIFO>
 800d2ae:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800d2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b2:	b2da      	uxtb	r2, r3
 800d2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2b6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d2be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2c0:	3b01      	subs	r3, #1
 800d2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c6:	0a1b      	lsrs	r3, r3, #8
 800d2c8:	b2da      	uxtb	r2, r3
 800d2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2cc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d2ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2d6:	3b01      	subs	r3, #1
 800d2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2dc:	0c1b      	lsrs	r3, r3, #16
 800d2de:	b2da      	uxtb	r2, r3
 800d2e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2e2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d2ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ec:	3b01      	subs	r3, #1
 800d2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f2:	0e1b      	lsrs	r3, r3, #24
 800d2f4:	b2da      	uxtb	r2, r3
 800d2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2f8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d302:	3b01      	subs	r3, #1
 800d304:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d306:	f7fc f989 	bl	800961c <HAL_GetTick>
 800d30a:	4602      	mov	r2, r0
 800d30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30e:	1ad3      	subs	r3, r2, r3
 800d310:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d312:	429a      	cmp	r2, r3
 800d314:	d902      	bls.n	800d31c <HAL_SD_ReadBlocks+0x350>
 800d316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d112      	bne.n	800d342 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4a18      	ldr	r2, [pc, #96]	; (800d384 <HAL_SD_ReadBlocks+0x3b8>)
 800d322:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d328:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2201      	movs	r2, #1
 800d334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2200      	movs	r2, #0
 800d33c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d33e:	2301      	movs	r3, #1
 800d340:	e01b      	b.n	800d37a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d002      	beq.n	800d356 <HAL_SD_ReadBlocks+0x38a>
 800d350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d352:	2b00      	cmp	r3, #0
 800d354:	d1a6      	bne.n	800d2a4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f240 523a 	movw	r2, #1338	; 0x53a
 800d35e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2201      	movs	r2, #1
 800d364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d368:	2300      	movs	r3, #0
 800d36a:	e006      	b.n	800d37a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d370:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d378:	2301      	movs	r3, #1
  }
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3748      	adds	r7, #72	; 0x48
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}
 800d382:	bf00      	nop
 800d384:	004005ff 	.word	0x004005ff

0800d388 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b092      	sub	sp, #72	; 0x48
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	607a      	str	r2, [r7, #4]
 800d394:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d396:	f7fc f941 	bl	800961c <HAL_GetTick>
 800d39a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d107      	bne.n	800d3ba <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e166      	b.n	800d688 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d3c0:	b2db      	uxtb	r3, r3
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	f040 8159 	bne.w	800d67a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d3ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	441a      	add	r2, r3
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d907      	bls.n	800d3ec <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3e0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	e14d      	b.n	800d688 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2203      	movs	r2, #3
 800d3f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d400:	2b01      	cmp	r3, #1
 800d402:	d002      	beq.n	800d40a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d406:	025b      	lsls	r3, r3, #9
 800d408:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d40a:	f04f 33ff 	mov.w	r3, #4294967295
 800d40e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	025b      	lsls	r3, r3, #9
 800d414:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d416:	2390      	movs	r3, #144	; 0x90
 800d418:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d41a:	2300      	movs	r3, #0
 800d41c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d41e:	2300      	movs	r3, #0
 800d420:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800d422:	2301      	movs	r3, #1
 800d424:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f107 0218 	add.w	r2, r7, #24
 800d42e:	4611      	mov	r1, r2
 800d430:	4618      	mov	r0, r3
 800d432:	f003 ff30 	bl	8011296 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d90a      	bls.n	800d452 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2220      	movs	r2, #32
 800d440:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d448:	4618      	mov	r0, r3
 800d44a:	f003 ffd8 	bl	80113fe <SDMMC_CmdWriteMultiBlock>
 800d44e:	6478      	str	r0, [r7, #68]	; 0x44
 800d450:	e009      	b.n	800d466 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2210      	movs	r2, #16
 800d456:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d45e:	4618      	mov	r0, r3
 800d460:	f003 ffab 	bl	80113ba <SDMMC_CmdWriteSingleBlock>
 800d464:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d012      	beq.n	800d492 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4a87      	ldr	r2, [pc, #540]	; (800d690 <HAL_SD_WriteBlocks+0x308>)
 800d472:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d47a:	431a      	orrs	r2, r3
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2201      	movs	r2, #1
 800d484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2200      	movs	r2, #0
 800d48c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d48e:	2301      	movs	r3, #1
 800d490:	e0fa      	b.n	800d688 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800d496:	e065      	b.n	800d564 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d49e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d040      	beq.n	800d528 <HAL_SD_WriteBlocks+0x1a0>
 800d4a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d03d      	beq.n	800d528 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	643b      	str	r3, [r7, #64]	; 0x40
 800d4b0:	e037      	b.n	800d522 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800d4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d4be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	021a      	lsls	r2, r3, #8
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d4d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4d8:	3b01      	subs	r3, #1
 800d4da:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	041a      	lsls	r2, r3, #16
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d4ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	061a      	lsls	r2, r3, #24
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	4313      	orrs	r3, r2
 800d4fe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d502:	3301      	adds	r3, #1
 800d504:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d508:	3b01      	subs	r3, #1
 800d50a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f107 0214 	add.w	r2, r7, #20
 800d514:	4611      	mov	r1, r2
 800d516:	4618      	mov	r0, r3
 800d518:	f003 fe46 	bl	80111a8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d51c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d51e:	3301      	adds	r3, #1
 800d520:	643b      	str	r3, [r7, #64]	; 0x40
 800d522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d524:	2b07      	cmp	r3, #7
 800d526:	d9c4      	bls.n	800d4b2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d528:	f7fc f878 	bl	800961c <HAL_GetTick>
 800d52c:	4602      	mov	r2, r0
 800d52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d530:	1ad3      	subs	r3, r2, r3
 800d532:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d534:	429a      	cmp	r2, r3
 800d536:	d902      	bls.n	800d53e <HAL_SD_WriteBlocks+0x1b6>
 800d538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d112      	bne.n	800d564 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4a53      	ldr	r2, [pc, #332]	; (800d690 <HAL_SD_WriteBlocks+0x308>)
 800d544:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d54a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d54c:	431a      	orrs	r2, r3
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2201      	movs	r2, #1
 800d556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2200      	movs	r2, #0
 800d55e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d560:	2303      	movs	r3, #3
 800d562:	e091      	b.n	800d688 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d56a:	f240 331a 	movw	r3, #794	; 0x31a
 800d56e:	4013      	ands	r3, r2
 800d570:	2b00      	cmp	r3, #0
 800d572:	d091      	beq.n	800d498 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d57a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d022      	beq.n	800d5c8 <HAL_SD_WriteBlocks+0x240>
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	2b01      	cmp	r3, #1
 800d586:	d91f      	bls.n	800d5c8 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d58c:	2b03      	cmp	r3, #3
 800d58e:	d01b      	beq.n	800d5c8 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4618      	mov	r0, r3
 800d596:	f003 ff55 	bl	8011444 <SDMMC_CmdStopTransfer>
 800d59a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d59c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d012      	beq.n	800d5c8 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	4a3a      	ldr	r2, [pc, #232]	; (800d690 <HAL_SD_WriteBlocks+0x308>)
 800d5a8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5b0:	431a      	orrs	r2, r3
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	e05f      	b.n	800d688 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ce:	f003 0308 	and.w	r3, r3, #8
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d012      	beq.n	800d5fc <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4a2d      	ldr	r2, [pc, #180]	; (800d690 <HAL_SD_WriteBlocks+0x308>)
 800d5dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e2:	f043 0208 	orr.w	r2, r3, #8
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e045      	b.n	800d688 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d602:	f003 0302 	and.w	r3, r3, #2
 800d606:	2b00      	cmp	r3, #0
 800d608:	d012      	beq.n	800d630 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	4a20      	ldr	r2, [pc, #128]	; (800d690 <HAL_SD_WriteBlocks+0x308>)
 800d610:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d616:	f043 0202 	orr.w	r2, r3, #2
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2201      	movs	r2, #1
 800d622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2200      	movs	r2, #0
 800d62a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d62c:	2301      	movs	r3, #1
 800d62e:	e02b      	b.n	800d688 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d636:	f003 0310 	and.w	r3, r3, #16
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d012      	beq.n	800d664 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4a13      	ldr	r2, [pc, #76]	; (800d690 <HAL_SD_WriteBlocks+0x308>)
 800d644:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d64a:	f043 0210 	orr.w	r2, r3, #16
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2201      	movs	r2, #1
 800d656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	2200      	movs	r2, #0
 800d65e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d660:	2301      	movs	r3, #1
 800d662:	e011      	b.n	800d688 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f240 523a 	movw	r2, #1338	; 0x53a
 800d66c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2201      	movs	r2, #1
 800d672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d676:	2300      	movs	r3, #0
 800d678:	e006      	b.n	800d688 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d67e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d686:	2301      	movs	r3, #1
  }
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3748      	adds	r7, #72	; 0x48
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}
 800d690:	004005ff 	.word	0x004005ff

0800d694 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d694:	b480      	push	{r7}
 800d696:	b083      	sub	sp, #12
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6a2:	0f9b      	lsrs	r3, r3, #30
 800d6a4:	b2da      	uxtb	r2, r3
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6ae:	0e9b      	lsrs	r3, r3, #26
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	f003 030f 	and.w	r3, r3, #15
 800d6b6:	b2da      	uxtb	r2, r3
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6c0:	0e1b      	lsrs	r3, r3, #24
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	f003 0303 	and.w	r3, r3, #3
 800d6c8:	b2da      	uxtb	r2, r3
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6d2:	0c1b      	lsrs	r3, r3, #16
 800d6d4:	b2da      	uxtb	r2, r3
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6de:	0a1b      	lsrs	r3, r3, #8
 800d6e0:	b2da      	uxtb	r2, r3
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6ea:	b2da      	uxtb	r2, r3
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6f4:	0d1b      	lsrs	r3, r3, #20
 800d6f6:	b29a      	uxth	r2, r3
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d700:	0c1b      	lsrs	r3, r3, #16
 800d702:	b2db      	uxtb	r3, r3
 800d704:	f003 030f 	and.w	r3, r3, #15
 800d708:	b2da      	uxtb	r2, r3
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d712:	0bdb      	lsrs	r3, r3, #15
 800d714:	b2db      	uxtb	r3, r3
 800d716:	f003 0301 	and.w	r3, r3, #1
 800d71a:	b2da      	uxtb	r2, r3
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d724:	0b9b      	lsrs	r3, r3, #14
 800d726:	b2db      	uxtb	r3, r3
 800d728:	f003 0301 	and.w	r3, r3, #1
 800d72c:	b2da      	uxtb	r2, r3
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d736:	0b5b      	lsrs	r3, r3, #13
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	f003 0301 	and.w	r3, r3, #1
 800d73e:	b2da      	uxtb	r2, r3
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d748:	0b1b      	lsrs	r3, r3, #12
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	f003 0301 	and.w	r3, r3, #1
 800d750:	b2da      	uxtb	r2, r3
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	2200      	movs	r2, #0
 800d75a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d760:	2b00      	cmp	r3, #0
 800d762:	d163      	bne.n	800d82c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d768:	009a      	lsls	r2, r3, #2
 800d76a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d76e:	4013      	ands	r3, r2
 800d770:	687a      	ldr	r2, [r7, #4]
 800d772:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d774:	0f92      	lsrs	r2, r2, #30
 800d776:	431a      	orrs	r2, r3
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d780:	0edb      	lsrs	r3, r3, #27
 800d782:	b2db      	uxtb	r3, r3
 800d784:	f003 0307 	and.w	r3, r3, #7
 800d788:	b2da      	uxtb	r2, r3
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d792:	0e1b      	lsrs	r3, r3, #24
 800d794:	b2db      	uxtb	r3, r3
 800d796:	f003 0307 	and.w	r3, r3, #7
 800d79a:	b2da      	uxtb	r2, r3
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7a4:	0d5b      	lsrs	r3, r3, #21
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	f003 0307 	and.w	r3, r3, #7
 800d7ac:	b2da      	uxtb	r2, r3
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7b6:	0c9b      	lsrs	r3, r3, #18
 800d7b8:	b2db      	uxtb	r3, r3
 800d7ba:	f003 0307 	and.w	r3, r3, #7
 800d7be:	b2da      	uxtb	r2, r3
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7c8:	0bdb      	lsrs	r3, r3, #15
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	f003 0307 	and.w	r3, r3, #7
 800d7d0:	b2da      	uxtb	r2, r3
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	691b      	ldr	r3, [r3, #16]
 800d7da:	1c5a      	adds	r2, r3, #1
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	7e1b      	ldrb	r3, [r3, #24]
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	f003 0307 	and.w	r3, r3, #7
 800d7ea:	3302      	adds	r3, #2
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d7f2:	687a      	ldr	r2, [r7, #4]
 800d7f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d7f6:	fb03 f202 	mul.w	r2, r3, r2
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	7a1b      	ldrb	r3, [r3, #8]
 800d802:	b2db      	uxtb	r3, r3
 800d804:	f003 030f 	and.w	r3, r3, #15
 800d808:	2201      	movs	r2, #1
 800d80a:	409a      	lsls	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d814:	687a      	ldr	r2, [r7, #4]
 800d816:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d818:	0a52      	lsrs	r2, r2, #9
 800d81a:	fb03 f202 	mul.w	r2, r3, r2
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d828:	661a      	str	r2, [r3, #96]	; 0x60
 800d82a:	e031      	b.n	800d890 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d830:	2b01      	cmp	r3, #1
 800d832:	d11d      	bne.n	800d870 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d838:	041b      	lsls	r3, r3, #16
 800d83a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d842:	0c1b      	lsrs	r3, r3, #16
 800d844:	431a      	orrs	r2, r3
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	691b      	ldr	r3, [r3, #16]
 800d84e:	3301      	adds	r3, #1
 800d850:	029a      	lsls	r2, r3, #10
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d864:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	661a      	str	r2, [r3, #96]	; 0x60
 800d86e:	e00f      	b.n	800d890 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4a58      	ldr	r2, [pc, #352]	; (800d9d8 <HAL_SD_GetCardCSD+0x344>)
 800d876:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d87c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2201      	movs	r2, #1
 800d888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d88c:	2301      	movs	r3, #1
 800d88e:	e09d      	b.n	800d9cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d894:	0b9b      	lsrs	r3, r3, #14
 800d896:	b2db      	uxtb	r3, r3
 800d898:	f003 0301 	and.w	r3, r3, #1
 800d89c:	b2da      	uxtb	r2, r3
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8a6:	09db      	lsrs	r3, r3, #7
 800d8a8:	b2db      	uxtb	r3, r3
 800d8aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8ae:	b2da      	uxtb	r2, r3
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8be:	b2da      	uxtb	r2, r3
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8c8:	0fdb      	lsrs	r3, r3, #31
 800d8ca:	b2da      	uxtb	r2, r3
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8d4:	0f5b      	lsrs	r3, r3, #29
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	f003 0303 	and.w	r3, r3, #3
 800d8dc:	b2da      	uxtb	r2, r3
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8e6:	0e9b      	lsrs	r3, r3, #26
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	f003 0307 	and.w	r3, r3, #7
 800d8ee:	b2da      	uxtb	r2, r3
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8f8:	0d9b      	lsrs	r3, r3, #22
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	f003 030f 	and.w	r3, r3, #15
 800d900:	b2da      	uxtb	r2, r3
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d90a:	0d5b      	lsrs	r3, r3, #21
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	f003 0301 	and.w	r3, r3, #1
 800d912:	b2da      	uxtb	r2, r3
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	2200      	movs	r2, #0
 800d91e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d926:	0c1b      	lsrs	r3, r3, #16
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	f003 0301 	and.w	r3, r3, #1
 800d92e:	b2da      	uxtb	r2, r3
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d93a:	0bdb      	lsrs	r3, r3, #15
 800d93c:	b2db      	uxtb	r3, r3
 800d93e:	f003 0301 	and.w	r3, r3, #1
 800d942:	b2da      	uxtb	r2, r3
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d94e:	0b9b      	lsrs	r3, r3, #14
 800d950:	b2db      	uxtb	r3, r3
 800d952:	f003 0301 	and.w	r3, r3, #1
 800d956:	b2da      	uxtb	r2, r3
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d962:	0b5b      	lsrs	r3, r3, #13
 800d964:	b2db      	uxtb	r3, r3
 800d966:	f003 0301 	and.w	r3, r3, #1
 800d96a:	b2da      	uxtb	r2, r3
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d976:	0b1b      	lsrs	r3, r3, #12
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	f003 0301 	and.w	r3, r3, #1
 800d97e:	b2da      	uxtb	r2, r3
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d98a:	0a9b      	lsrs	r3, r3, #10
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	f003 0303 	and.w	r3, r3, #3
 800d992:	b2da      	uxtb	r2, r3
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d99e:	0a1b      	lsrs	r3, r3, #8
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	f003 0303 	and.w	r3, r3, #3
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9b2:	085b      	lsrs	r3, r3, #1
 800d9b4:	b2db      	uxtb	r3, r3
 800d9b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9ba:	b2da      	uxtb	r2, r3
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d9ca:	2300      	movs	r3, #0
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	370c      	adds	r7, #12
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr
 800d9d8:	004005ff 	.word	0x004005ff

0800d9dc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b083      	sub	sp, #12
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800da26:	2300      	movs	r3, #0
}
 800da28:	4618      	mov	r0, r3
 800da2a:	370c      	adds	r7, #12
 800da2c:	46bd      	mov	sp, r7
 800da2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da32:	4770      	bx	lr

0800da34 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800da34:	b5b0      	push	{r4, r5, r7, lr}
 800da36:	b08e      	sub	sp, #56	; 0x38
 800da38:	af04      	add	r7, sp, #16
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800da3e:	2300      	movs	r3, #0
 800da40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2203      	movs	r2, #3
 800da48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da50:	2b03      	cmp	r3, #3
 800da52:	d02e      	beq.n	800dab2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da5a:	d106      	bne.n	800da6a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	639a      	str	r2, [r3, #56]	; 0x38
 800da68:	e029      	b.n	800dabe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800da70:	d10a      	bne.n	800da88 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f000 fa1c 	bl	800deb0 <SD_WideBus_Enable>
 800da78:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da7e:	6a3b      	ldr	r3, [r7, #32]
 800da80:	431a      	orrs	r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	639a      	str	r2, [r3, #56]	; 0x38
 800da86:	e01a      	b.n	800dabe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d10a      	bne.n	800daa4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f000 fa59 	bl	800df46 <SD_WideBus_Disable>
 800da94:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da9a:	6a3b      	ldr	r3, [r7, #32]
 800da9c:	431a      	orrs	r2, r3
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	639a      	str	r2, [r3, #56]	; 0x38
 800daa2:	e00c      	b.n	800dabe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	639a      	str	r2, [r3, #56]	; 0x38
 800dab0:	e005      	b.n	800dabe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dab6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d00b      	beq.n	800dade <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a26      	ldr	r2, [pc, #152]	; (800db64 <HAL_SD_ConfigWideBusOperation+0x130>)
 800dacc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2201      	movs	r2, #1
 800dad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800dad6:	2301      	movs	r3, #1
 800dad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dadc:	e01f      	b.n	800db1e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	689b      	ldr	r3, [r3, #8]
 800dae8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	68db      	ldr	r3, [r3, #12]
 800daee:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	695b      	ldr	r3, [r3, #20]
 800daf8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	699b      	ldr	r3, [r3, #24]
 800dafe:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681d      	ldr	r5, [r3, #0]
 800db04:	466c      	mov	r4, sp
 800db06:	f107 0314 	add.w	r3, r7, #20
 800db0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800db0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800db12:	f107 0308 	add.w	r3, r7, #8
 800db16:	cb0e      	ldmia	r3, {r1, r2, r3}
 800db18:	4628      	mov	r0, r5
 800db1a:	f003 fb0d 	bl	8011138 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f44f 7100 	mov.w	r1, #512	; 0x200
 800db26:	4618      	mov	r0, r3
 800db28:	f003 fbe1 	bl	80112ee <SDMMC_CmdBlockLength>
 800db2c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db2e:	6a3b      	ldr	r3, [r7, #32]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d00c      	beq.n	800db4e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a0a      	ldr	r2, [pc, #40]	; (800db64 <HAL_SD_ConfigWideBusOperation+0x130>)
 800db3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db40:	6a3b      	ldr	r3, [r7, #32]
 800db42:	431a      	orrs	r2, r3
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800db48:	2301      	movs	r3, #1
 800db4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2201      	movs	r2, #1
 800db52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800db56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3728      	adds	r7, #40	; 0x28
 800db5e:	46bd      	mov	sp, r7
 800db60:	bdb0      	pop	{r4, r5, r7, pc}
 800db62:	bf00      	nop
 800db64:	004005ff 	.word	0x004005ff

0800db68 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b086      	sub	sp, #24
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800db70:	2300      	movs	r3, #0
 800db72:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800db74:	f107 030c 	add.w	r3, r7, #12
 800db78:	4619      	mov	r1, r3
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 f970 	bl	800de60 <SD_SendStatus>
 800db80:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d005      	beq.n	800db94 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	431a      	orrs	r2, r3
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	0a5b      	lsrs	r3, r3, #9
 800db98:	f003 030f 	and.w	r3, r3, #15
 800db9c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800db9e:	693b      	ldr	r3, [r7, #16]
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3718      	adds	r7, #24
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dba8:	b5b0      	push	{r4, r5, r7, lr}
 800dbaa:	b094      	sub	sp, #80	; 0x50
 800dbac:	af04      	add	r7, sp, #16
 800dbae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f003 fb14 	bl	80111e6 <SDIO_GetPowerState>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d102      	bne.n	800dbca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dbc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dbc8:	e0b8      	b.n	800dd3c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbce:	2b03      	cmp	r3, #3
 800dbd0:	d02f      	beq.n	800dc32 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f003 fd3e 	bl	8011658 <SDMMC_CmdSendCID>
 800dbdc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d001      	beq.n	800dbe8 <SD_InitCard+0x40>
    {
      return errorstate;
 800dbe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbe6:	e0a9      	b.n	800dd3c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	2100      	movs	r1, #0
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f003 fb3e 	bl	8011270 <SDIO_GetResponse>
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2104      	movs	r1, #4
 800dc00:	4618      	mov	r0, r3
 800dc02:	f003 fb35 	bl	8011270 <SDIO_GetResponse>
 800dc06:	4602      	mov	r2, r0
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	2108      	movs	r1, #8
 800dc12:	4618      	mov	r0, r3
 800dc14:	f003 fb2c 	bl	8011270 <SDIO_GetResponse>
 800dc18:	4602      	mov	r2, r0
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	210c      	movs	r1, #12
 800dc24:	4618      	mov	r0, r3
 800dc26:	f003 fb23 	bl	8011270 <SDIO_GetResponse>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc36:	2b03      	cmp	r3, #3
 800dc38:	d00d      	beq.n	800dc56 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f107 020e 	add.w	r2, r7, #14
 800dc42:	4611      	mov	r1, r2
 800dc44:	4618      	mov	r0, r3
 800dc46:	f003 fd44 	bl	80116d2 <SDMMC_CmdSetRelAdd>
 800dc4a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d001      	beq.n	800dc56 <SD_InitCard+0xae>
    {
      return errorstate;
 800dc52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc54:	e072      	b.n	800dd3c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc5a:	2b03      	cmp	r3, #3
 800dc5c:	d036      	beq.n	800dccc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800dc5e:	89fb      	ldrh	r3, [r7, #14]
 800dc60:	461a      	mov	r2, r3
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681a      	ldr	r2, [r3, #0]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc6e:	041b      	lsls	r3, r3, #16
 800dc70:	4619      	mov	r1, r3
 800dc72:	4610      	mov	r0, r2
 800dc74:	f003 fd0e 	bl	8011694 <SDMMC_CmdSendCSD>
 800dc78:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d001      	beq.n	800dc84 <SD_InitCard+0xdc>
    {
      return errorstate;
 800dc80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc82:	e05b      	b.n	800dd3c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	2100      	movs	r1, #0
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f003 faf0 	bl	8011270 <SDIO_GetResponse>
 800dc90:	4602      	mov	r2, r0
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	2104      	movs	r1, #4
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f003 fae7 	bl	8011270 <SDIO_GetResponse>
 800dca2:	4602      	mov	r2, r0
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	2108      	movs	r1, #8
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f003 fade 	bl	8011270 <SDIO_GetResponse>
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	210c      	movs	r1, #12
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f003 fad5 	bl	8011270 <SDIO_GetResponse>
 800dcc6:	4602      	mov	r2, r0
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	2104      	movs	r1, #4
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f003 facc 	bl	8011270 <SDIO_GetResponse>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	0d1a      	lsrs	r2, r3, #20
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800dce0:	f107 0310 	add.w	r3, r7, #16
 800dce4:	4619      	mov	r1, r3
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f7ff fcd4 	bl	800d694 <HAL_SD_GetCardCSD>
 800dcec:	4603      	mov	r3, r0
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d002      	beq.n	800dcf8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcf2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dcf6:	e021      	b.n	800dd3c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6819      	ldr	r1, [r3, #0]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd00:	041b      	lsls	r3, r3, #16
 800dd02:	2200      	movs	r2, #0
 800dd04:	461c      	mov	r4, r3
 800dd06:	4615      	mov	r5, r2
 800dd08:	4622      	mov	r2, r4
 800dd0a:	462b      	mov	r3, r5
 800dd0c:	4608      	mov	r0, r1
 800dd0e:	f003 fbbb 	bl	8011488 <SDMMC_CmdSelDesel>
 800dd12:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d001      	beq.n	800dd1e <SD_InitCard+0x176>
  {
    return errorstate;
 800dd1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd1c:	e00e      	b.n	800dd3c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681d      	ldr	r5, [r3, #0]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	466c      	mov	r4, sp
 800dd26:	f103 0210 	add.w	r2, r3, #16
 800dd2a:	ca07      	ldmia	r2, {r0, r1, r2}
 800dd2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dd30:	3304      	adds	r3, #4
 800dd32:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dd34:	4628      	mov	r0, r5
 800dd36:	f003 f9ff 	bl	8011138 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800dd3a:	2300      	movs	r3, #0
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3740      	adds	r7, #64	; 0x40
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bdb0      	pop	{r4, r5, r7, pc}

0800dd44 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800dd50:	2300      	movs	r3, #0
 800dd52:	617b      	str	r3, [r7, #20]
 800dd54:	2300      	movs	r3, #0
 800dd56:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f003 fbb6 	bl	80114ce <SDMMC_CmdGoIdleState>
 800dd62:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d001      	beq.n	800dd6e <SD_PowerON+0x2a>
  {
    return errorstate;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	e072      	b.n	800de54 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4618      	mov	r0, r3
 800dd74:	f003 fbc9 	bl	801150a <SDMMC_CmdOperCond>
 800dd78:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d00d      	beq.n	800dd9c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2200      	movs	r2, #0
 800dd84:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f003 fb9f 	bl	80114ce <SDMMC_CmdGoIdleState>
 800dd90:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d004      	beq.n	800dda2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	e05b      	b.n	800de54 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2201      	movs	r2, #1
 800dda0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dda6:	2b01      	cmp	r3, #1
 800dda8:	d137      	bne.n	800de1a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	2100      	movs	r1, #0
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f003 fbc9 	bl	8011548 <SDMMC_CmdAppCommand>
 800ddb6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d02d      	beq.n	800de1a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ddbe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ddc2:	e047      	b.n	800de54 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2100      	movs	r1, #0
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f003 fbbc 	bl	8011548 <SDMMC_CmdAppCommand>
 800ddd0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d001      	beq.n	800dddc <SD_PowerON+0x98>
    {
      return errorstate;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	e03b      	b.n	800de54 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	491e      	ldr	r1, [pc, #120]	; (800de5c <SD_PowerON+0x118>)
 800dde2:	4618      	mov	r0, r3
 800dde4:	f003 fbd2 	bl	801158c <SDMMC_CmdAppOperCommand>
 800dde8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d002      	beq.n	800ddf6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ddf0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ddf4:	e02e      	b.n	800de54 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f003 fa37 	bl	8011270 <SDIO_GetResponse>
 800de02:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	0fdb      	lsrs	r3, r3, #31
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d101      	bne.n	800de10 <SD_PowerON+0xcc>
 800de0c:	2301      	movs	r3, #1
 800de0e:	e000      	b.n	800de12 <SD_PowerON+0xce>
 800de10:	2300      	movs	r3, #0
 800de12:	613b      	str	r3, [r7, #16]

    count++;
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	3301      	adds	r3, #1
 800de18:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800de20:	4293      	cmp	r3, r2
 800de22:	d802      	bhi.n	800de2a <SD_PowerON+0xe6>
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d0cc      	beq.n	800ddc4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800de30:	4293      	cmp	r3, r2
 800de32:	d902      	bls.n	800de3a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800de34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800de38:	e00c      	b.n	800de54 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800de40:	2b00      	cmp	r3, #0
 800de42:	d003      	beq.n	800de4c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2201      	movs	r2, #1
 800de48:	645a      	str	r2, [r3, #68]	; 0x44
 800de4a:	e002      	b.n	800de52 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2200      	movs	r2, #0
 800de50:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800de52:	2300      	movs	r3, #0
}
 800de54:	4618      	mov	r0, r3
 800de56:	3718      	adds	r7, #24
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	c1100000 	.word	0xc1100000

0800de60 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d102      	bne.n	800de76 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800de70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800de74:	e018      	b.n	800dea8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681a      	ldr	r2, [r3, #0]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de7e:	041b      	lsls	r3, r3, #16
 800de80:	4619      	mov	r1, r3
 800de82:	4610      	mov	r0, r2
 800de84:	f003 fc46 	bl	8011714 <SDMMC_CmdSendStatus>
 800de88:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d001      	beq.n	800de94 <SD_SendStatus+0x34>
  {
    return errorstate;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	e009      	b.n	800dea8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2100      	movs	r1, #0
 800de9a:	4618      	mov	r0, r3
 800de9c:	f003 f9e8 	bl	8011270 <SDIO_GetResponse>
 800dea0:	4602      	mov	r2, r0
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dea6:	2300      	movs	r3, #0
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3710      	adds	r7, #16
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b086      	sub	sp, #24
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800deb8:	2300      	movs	r3, #0
 800deba:	60fb      	str	r3, [r7, #12]
 800debc:	2300      	movs	r3, #0
 800debe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	2100      	movs	r1, #0
 800dec6:	4618      	mov	r0, r3
 800dec8:	f003 f9d2 	bl	8011270 <SDIO_GetResponse>
 800decc:	4603      	mov	r3, r0
 800dece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ded2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ded6:	d102      	bne.n	800dede <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ded8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dedc:	e02f      	b.n	800df3e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dede:	f107 030c 	add.w	r3, r7, #12
 800dee2:	4619      	mov	r1, r3
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f000 f879 	bl	800dfdc <SD_FindSCR>
 800deea:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d001      	beq.n	800def6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	e023      	b.n	800df3e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800defc:	2b00      	cmp	r3, #0
 800defe:	d01c      	beq.n	800df3a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df08:	041b      	lsls	r3, r3, #16
 800df0a:	4619      	mov	r1, r3
 800df0c:	4610      	mov	r0, r2
 800df0e:	f003 fb1b 	bl	8011548 <SDMMC_CmdAppCommand>
 800df12:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d001      	beq.n	800df1e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	e00f      	b.n	800df3e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2102      	movs	r1, #2
 800df24:	4618      	mov	r0, r3
 800df26:	f003 fb54 	bl	80115d2 <SDMMC_CmdBusWidth>
 800df2a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d001      	beq.n	800df36 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	e003      	b.n	800df3e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800df36:	2300      	movs	r3, #0
 800df38:	e001      	b.n	800df3e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800df3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3718      	adds	r7, #24
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}

0800df46 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800df46:	b580      	push	{r7, lr}
 800df48:	b086      	sub	sp, #24
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800df4e:	2300      	movs	r3, #0
 800df50:	60fb      	str	r3, [r7, #12]
 800df52:	2300      	movs	r3, #0
 800df54:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2100      	movs	r1, #0
 800df5c:	4618      	mov	r0, r3
 800df5e:	f003 f987 	bl	8011270 <SDIO_GetResponse>
 800df62:	4603      	mov	r3, r0
 800df64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df6c:	d102      	bne.n	800df74 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800df6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800df72:	e02f      	b.n	800dfd4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800df74:	f107 030c 	add.w	r3, r7, #12
 800df78:	4619      	mov	r1, r3
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 f82e 	bl	800dfdc <SD_FindSCR>
 800df80:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d001      	beq.n	800df8c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	e023      	b.n	800dfd4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df92:	2b00      	cmp	r3, #0
 800df94:	d01c      	beq.n	800dfd0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681a      	ldr	r2, [r3, #0]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df9e:	041b      	lsls	r3, r3, #16
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	4610      	mov	r0, r2
 800dfa4:	f003 fad0 	bl	8011548 <SDMMC_CmdAppCommand>
 800dfa8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d001      	beq.n	800dfb4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	e00f      	b.n	800dfd4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	2100      	movs	r1, #0
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f003 fb09 	bl	80115d2 <SDMMC_CmdBusWidth>
 800dfc0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d001      	beq.n	800dfcc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	e003      	b.n	800dfd4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	e001      	b.n	800dfd4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dfd0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3718      	adds	r7, #24
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dfdc:	b590      	push	{r4, r7, lr}
 800dfde:	b08f      	sub	sp, #60	; 0x3c
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dfe6:	f7fb fb19 	bl	800961c <HAL_GetTick>
 800dfea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800dfec:	2300      	movs	r3, #0
 800dfee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800dff0:	2300      	movs	r3, #0
 800dff2:	60bb      	str	r3, [r7, #8]
 800dff4:	2300      	movs	r3, #0
 800dff6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	2108      	movs	r1, #8
 800e002:	4618      	mov	r0, r3
 800e004:	f003 f973 	bl	80112ee <SDMMC_CmdBlockLength>
 800e008:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d001      	beq.n	800e014 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e012:	e0b2      	b.n	800e17a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681a      	ldr	r2, [r3, #0]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e01c:	041b      	lsls	r3, r3, #16
 800e01e:	4619      	mov	r1, r3
 800e020:	4610      	mov	r0, r2
 800e022:	f003 fa91 	bl	8011548 <SDMMC_CmdAppCommand>
 800e026:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d001      	beq.n	800e032 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e030:	e0a3      	b.n	800e17a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e032:	f04f 33ff 	mov.w	r3, #4294967295
 800e036:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e038:	2308      	movs	r3, #8
 800e03a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e03c:	2330      	movs	r3, #48	; 0x30
 800e03e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e040:	2302      	movs	r3, #2
 800e042:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e044:	2300      	movs	r3, #0
 800e046:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e048:	2301      	movs	r3, #1
 800e04a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f107 0210 	add.w	r2, r7, #16
 800e054:	4611      	mov	r1, r2
 800e056:	4618      	mov	r0, r3
 800e058:	f003 f91d 	bl	8011296 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4618      	mov	r0, r3
 800e062:	f003 fad8 	bl	8011616 <SDMMC_CmdSendSCR>
 800e066:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d02a      	beq.n	800e0c4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800e06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e070:	e083      	b.n	800e17a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d00f      	beq.n	800e0a0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6819      	ldr	r1, [r3, #0]
 800e084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e086:	009b      	lsls	r3, r3, #2
 800e088:	f107 0208 	add.w	r2, r7, #8
 800e08c:	18d4      	adds	r4, r2, r3
 800e08e:	4608      	mov	r0, r1
 800e090:	f003 f87d 	bl	801118e <SDIO_ReadFIFO>
 800e094:	4603      	mov	r3, r0
 800e096:	6023      	str	r3, [r4, #0]
      index++;
 800e098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e09a:	3301      	adds	r3, #1
 800e09c:	637b      	str	r3, [r7, #52]	; 0x34
 800e09e:	e006      	b.n	800e0ae <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d012      	beq.n	800e0d4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e0ae:	f7fb fab5 	bl	800961c <HAL_GetTick>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b6:	1ad3      	subs	r3, r2, r3
 800e0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0bc:	d102      	bne.n	800e0c4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e0be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0c2:	e05a      	b.n	800e17a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0ca:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d0cf      	beq.n	800e072 <SD_FindSCR+0x96>
 800e0d2:	e000      	b.n	800e0d6 <SD_FindSCR+0xfa>
      break;
 800e0d4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0dc:	f003 0308 	and.w	r3, r3, #8
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d005      	beq.n	800e0f0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2208      	movs	r2, #8
 800e0ea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e0ec:	2308      	movs	r3, #8
 800e0ee:	e044      	b.n	800e17a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0f6:	f003 0302 	and.w	r3, r3, #2
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d005      	beq.n	800e10a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2202      	movs	r2, #2
 800e104:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e106:	2302      	movs	r3, #2
 800e108:	e037      	b.n	800e17a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e110:	f003 0320 	and.w	r3, r3, #32
 800e114:	2b00      	cmp	r3, #0
 800e116:	d005      	beq.n	800e124 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2220      	movs	r2, #32
 800e11e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e120:	2320      	movs	r3, #32
 800e122:	e02a      	b.n	800e17a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f240 523a 	movw	r2, #1338	; 0x53a
 800e12c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	061a      	lsls	r2, r3, #24
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	021b      	lsls	r3, r3, #8
 800e136:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e13a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	0a1b      	lsrs	r3, r3, #8
 800e140:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e144:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	0e1b      	lsrs	r3, r3, #24
 800e14a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e14e:	601a      	str	r2, [r3, #0]
    scr++;
 800e150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e152:	3304      	adds	r3, #4
 800e154:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	061a      	lsls	r2, r3, #24
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	021b      	lsls	r3, r3, #8
 800e15e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e162:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	0a1b      	lsrs	r3, r3, #8
 800e168:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e16c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	0e1b      	lsrs	r3, r3, #24
 800e172:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e176:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e178:	2300      	movs	r3, #0
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	373c      	adds	r7, #60	; 0x3c
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd90      	pop	{r4, r7, pc}

0800e182 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e182:	b580      	push	{r7, lr}
 800e184:	b082      	sub	sp, #8
 800e186:	af00      	add	r7, sp, #0
 800e188:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d101      	bne.n	800e194 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e190:	2301      	movs	r3, #1
 800e192:	e07b      	b.n	800e28c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d108      	bne.n	800e1ae <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e1a4:	d009      	beq.n	800e1ba <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	61da      	str	r2, [r3, #28]
 800e1ac:	e005      	b.n	800e1ba <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e1c6:	b2db      	uxtb	r3, r3
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d106      	bne.n	800e1da <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f7f5 f801 	bl	80031dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2202      	movs	r2, #2
 800e1de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1f0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e202:	431a      	orrs	r2, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	68db      	ldr	r3, [r3, #12]
 800e208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e20c:	431a      	orrs	r2, r3
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	691b      	ldr	r3, [r3, #16]
 800e212:	f003 0302 	and.w	r3, r3, #2
 800e216:	431a      	orrs	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	695b      	ldr	r3, [r3, #20]
 800e21c:	f003 0301 	and.w	r3, r3, #1
 800e220:	431a      	orrs	r2, r3
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	699b      	ldr	r3, [r3, #24]
 800e226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e22a:	431a      	orrs	r2, r3
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	69db      	ldr	r3, [r3, #28]
 800e230:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e234:	431a      	orrs	r2, r3
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6a1b      	ldr	r3, [r3, #32]
 800e23a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e23e:	ea42 0103 	orr.w	r1, r2, r3
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e246:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	430a      	orrs	r2, r1
 800e250:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	699b      	ldr	r3, [r3, #24]
 800e256:	0c1b      	lsrs	r3, r3, #16
 800e258:	f003 0104 	and.w	r1, r3, #4
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e260:	f003 0210 	and.w	r2, r3, #16
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	430a      	orrs	r2, r1
 800e26a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	69da      	ldr	r2, [r3, #28]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e27a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2200      	movs	r2, #0
 800e280:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2201      	movs	r2, #1
 800e286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e28a:	2300      	movs	r3, #0
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3708      	adds	r7, #8
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b086      	sub	sp, #24
 800e298:	af00      	add	r7, sp, #0
 800e29a:	60f8      	str	r0, [r7, #12]
 800e29c:	60b9      	str	r1, [r7, #8]
 800e29e:	4613      	mov	r3, r2
 800e2a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	d101      	bne.n	800e2b4 <HAL_SPI_Transmit_DMA+0x20>
 800e2b0:	2302      	movs	r3, #2
 800e2b2:	e09b      	b.n	800e3ec <HAL_SPI_Transmit_DMA+0x158>
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e2c2:	b2db      	uxtb	r3, r3
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d002      	beq.n	800e2ce <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800e2c8:	2302      	movs	r3, #2
 800e2ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e2cc:	e089      	b.n	800e3e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d002      	beq.n	800e2da <HAL_SPI_Transmit_DMA+0x46>
 800e2d4:	88fb      	ldrh	r3, [r7, #6]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d102      	bne.n	800e2e0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800e2da:	2301      	movs	r3, #1
 800e2dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e2de:	e080      	b.n	800e3e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2203      	movs	r2, #3
 800e2e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	68ba      	ldr	r2, [r7, #8]
 800e2f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	88fa      	ldrh	r2, [r7, #6]
 800e2f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	88fa      	ldrh	r2, [r7, #6]
 800e2fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2200      	movs	r2, #0
 800e304:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	2200      	movs	r2, #0
 800e30a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2200      	movs	r2, #0
 800e310:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2200      	movs	r2, #0
 800e316:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2200      	movs	r2, #0
 800e31c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	689b      	ldr	r3, [r3, #8]
 800e322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e326:	d10f      	bne.n	800e348 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	681a      	ldr	r2, [r3, #0]
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e336:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	681a      	ldr	r2, [r3, #0]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e346:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e34c:	4a29      	ldr	r2, [pc, #164]	; (800e3f4 <HAL_SPI_Transmit_DMA+0x160>)
 800e34e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e354:	4a28      	ldr	r2, [pc, #160]	; (800e3f8 <HAL_SPI_Transmit_DMA+0x164>)
 800e356:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e35c:	4a27      	ldr	r2, [pc, #156]	; (800e3fc <HAL_SPI_Transmit_DMA+0x168>)
 800e35e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e364:	2200      	movs	r2, #0
 800e366:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e370:	4619      	mov	r1, r3
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	330c      	adds	r3, #12
 800e378:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e37e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e380:	f7fb ff1e 	bl	800a1c0 <HAL_DMA_Start_IT>
 800e384:	4603      	mov	r3, r0
 800e386:	2b00      	cmp	r3, #0
 800e388:	d00c      	beq.n	800e3a4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e38e:	f043 0210 	orr.w	r2, r3, #16
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800e396:	2301      	movs	r3, #1
 800e398:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2201      	movs	r2, #1
 800e39e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800e3a2:	e01e      	b.n	800e3e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3ae:	2b40      	cmp	r3, #64	; 0x40
 800e3b0:	d007      	beq.n	800e3c2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	681a      	ldr	r2, [r3, #0]
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3c0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	685a      	ldr	r2, [r3, #4]
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f042 0220 	orr.w	r2, r2, #32
 800e3d0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	685a      	ldr	r2, [r3, #4]
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f042 0202 	orr.w	r2, r2, #2
 800e3e0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e3ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3718      	adds	r7, #24
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	0800ea01 	.word	0x0800ea01
 800e3f8:	0800e821 	.word	0x0800e821
 800e3fc:	0800ea55 	.word	0x0800ea55

0800e400 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b086      	sub	sp, #24
 800e404:	af00      	add	r7, sp, #0
 800e406:	60f8      	str	r0, [r7, #12]
 800e408:	60b9      	str	r1, [r7, #8]
 800e40a:	4613      	mov	r3, r2
 800e40c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e40e:	2300      	movs	r3, #0
 800e410:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	689b      	ldr	r3, [r3, #8]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d110      	bne.n	800e43c <HAL_SPI_Receive_DMA+0x3c>
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	685b      	ldr	r3, [r3, #4]
 800e41e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e422:	d10b      	bne.n	800e43c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2204      	movs	r2, #4
 800e428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800e42c:	88fb      	ldrh	r3, [r7, #6]
 800e42e:	68ba      	ldr	r2, [r7, #8]
 800e430:	68b9      	ldr	r1, [r7, #8]
 800e432:	68f8      	ldr	r0, [r7, #12]
 800e434:	f000 f8ac 	bl	800e590 <HAL_SPI_TransmitReceive_DMA>
 800e438:	4603      	mov	r3, r0
 800e43a:	e09f      	b.n	800e57c <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e442:	2b01      	cmp	r3, #1
 800e444:	d101      	bne.n	800e44a <HAL_SPI_Receive_DMA+0x4a>
 800e446:	2302      	movs	r3, #2
 800e448:	e098      	b.n	800e57c <HAL_SPI_Receive_DMA+0x17c>
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2201      	movs	r2, #1
 800e44e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e458:	b2db      	uxtb	r3, r3
 800e45a:	2b01      	cmp	r3, #1
 800e45c:	d002      	beq.n	800e464 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800e45e:	2302      	movs	r3, #2
 800e460:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e462:	e086      	b.n	800e572 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d002      	beq.n	800e470 <HAL_SPI_Receive_DMA+0x70>
 800e46a:	88fb      	ldrh	r3, [r7, #6]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d102      	bne.n	800e476 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800e470:	2301      	movs	r3, #1
 800e472:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e474:	e07d      	b.n	800e572 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	2204      	movs	r2, #4
 800e47a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	2200      	movs	r2, #0
 800e482:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	68ba      	ldr	r2, [r7, #8]
 800e488:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	88fa      	ldrh	r2, [r7, #6]
 800e48e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	88fa      	ldrh	r2, [r7, #6]
 800e494:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	2200      	movs	r2, #0
 800e49a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	689b      	ldr	r3, [r3, #8]
 800e4b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4b6:	d10f      	bne.n	800e4d8 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	681a      	ldr	r2, [r3, #0]
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e4c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	681a      	ldr	r2, [r3, #0]
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e4d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4dc:	4a29      	ldr	r2, [pc, #164]	; (800e584 <HAL_SPI_Receive_DMA+0x184>)
 800e4de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4e4:	4a28      	ldr	r2, [pc, #160]	; (800e588 <HAL_SPI_Receive_DMA+0x188>)
 800e4e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4ec:	4a27      	ldr	r2, [pc, #156]	; (800e58c <HAL_SPI_Receive_DMA+0x18c>)
 800e4ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	330c      	adds	r3, #12
 800e502:	4619      	mov	r1, r3
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e508:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e50e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e510:	f7fb fe56 	bl	800a1c0 <HAL_DMA_Start_IT>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d00c      	beq.n	800e534 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e51e:	f043 0210 	orr.w	r2, r3, #16
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800e526:	2301      	movs	r3, #1
 800e528:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2201      	movs	r2, #1
 800e52e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800e532:	e01e      	b.n	800e572 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e53e:	2b40      	cmp	r3, #64	; 0x40
 800e540:	d007      	beq.n	800e552 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	681a      	ldr	r2, [r3, #0]
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e550:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	685a      	ldr	r2, [r3, #4]
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f042 0220 	orr.w	r2, r2, #32
 800e560:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	685a      	ldr	r2, [r3, #4]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f042 0201 	orr.w	r2, r2, #1
 800e570:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2200      	movs	r2, #0
 800e576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e57a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3718      	adds	r7, #24
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}
 800e584:	0800ea1d 	.word	0x0800ea1d
 800e588:	0800e8c9 	.word	0x0800e8c9
 800e58c:	0800ea55 	.word	0x0800ea55

0800e590 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b086      	sub	sp, #24
 800e594:	af00      	add	r7, sp, #0
 800e596:	60f8      	str	r0, [r7, #12]
 800e598:	60b9      	str	r1, [r7, #8]
 800e59a:	607a      	str	r2, [r7, #4]
 800e59c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e5a8:	2b01      	cmp	r3, #1
 800e5aa:	d101      	bne.n	800e5b0 <HAL_SPI_TransmitReceive_DMA+0x20>
 800e5ac:	2302      	movs	r3, #2
 800e5ae:	e0e3      	b.n	800e778 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e5be:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800e5c6:	7dbb      	ldrb	r3, [r7, #22]
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d00d      	beq.n	800e5e8 <HAL_SPI_TransmitReceive_DMA+0x58>
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e5d2:	d106      	bne.n	800e5e2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	689b      	ldr	r3, [r3, #8]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d102      	bne.n	800e5e2 <HAL_SPI_TransmitReceive_DMA+0x52>
 800e5dc:	7dbb      	ldrb	r3, [r7, #22]
 800e5de:	2b04      	cmp	r3, #4
 800e5e0:	d002      	beq.n	800e5e8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800e5e2:	2302      	movs	r3, #2
 800e5e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e5e6:	e0c2      	b.n	800e76e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d005      	beq.n	800e5fa <HAL_SPI_TransmitReceive_DMA+0x6a>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d002      	beq.n	800e5fa <HAL_SPI_TransmitReceive_DMA+0x6a>
 800e5f4:	887b      	ldrh	r3, [r7, #2]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d102      	bne.n	800e600 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e5fe:	e0b6      	b.n	800e76e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e606:	b2db      	uxtb	r3, r3
 800e608:	2b04      	cmp	r3, #4
 800e60a:	d003      	beq.n	800e614 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2205      	movs	r2, #5
 800e610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2200      	movs	r2, #0
 800e618:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	68ba      	ldr	r2, [r7, #8]
 800e61e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	887a      	ldrh	r2, [r7, #2]
 800e624:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	887a      	ldrh	r2, [r7, #2]
 800e62a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	687a      	ldr	r2, [r7, #4]
 800e630:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	887a      	ldrh	r2, [r7, #2]
 800e636:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	887a      	ldrh	r2, [r7, #2]
 800e63c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	2200      	movs	r2, #0
 800e642:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2200      	movs	r2, #0
 800e648:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e650:	b2db      	uxtb	r3, r3
 800e652:	2b04      	cmp	r3, #4
 800e654:	d108      	bne.n	800e668 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e65a:	4a49      	ldr	r2, [pc, #292]	; (800e780 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800e65c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e662:	4a48      	ldr	r2, [pc, #288]	; (800e784 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800e664:	63da      	str	r2, [r3, #60]	; 0x3c
 800e666:	e007      	b.n	800e678 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e66c:	4a46      	ldr	r2, [pc, #280]	; (800e788 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800e66e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e674:	4a45      	ldr	r2, [pc, #276]	; (800e78c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800e676:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e67c:	4a44      	ldr	r2, [pc, #272]	; (800e790 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800e67e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e684:	2200      	movs	r2, #0
 800e686:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	330c      	adds	r3, #12
 800e692:	4619      	mov	r1, r3
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e698:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e69e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e6a0:	f7fb fd8e 	bl	800a1c0 <HAL_DMA_Start_IT>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d00c      	beq.n	800e6c4 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6ae:	f043 0210 	orr.w	r2, r3, #16
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2201      	movs	r2, #1
 800e6be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800e6c2:	e054      	b.n	800e76e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	685a      	ldr	r2, [r3, #4]
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	f042 0201 	orr.w	r2, r2, #1
 800e6d2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6d8:	2200      	movs	r2, #0
 800e6da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	330c      	adds	r3, #12
 800e704:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e70a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e70c:	f7fb fd58 	bl	800a1c0 <HAL_DMA_Start_IT>
 800e710:	4603      	mov	r3, r0
 800e712:	2b00      	cmp	r3, #0
 800e714:	d00c      	beq.n	800e730 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e71a:	f043 0210 	orr.w	r2, r3, #16
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800e722:	2301      	movs	r3, #1
 800e724:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	2201      	movs	r2, #1
 800e72a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800e72e:	e01e      	b.n	800e76e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e73a:	2b40      	cmp	r3, #64	; 0x40
 800e73c:	d007      	beq.n	800e74e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e74c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	685a      	ldr	r2, [r3, #4]
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f042 0220 	orr.w	r2, r2, #32
 800e75c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	685a      	ldr	r2, [r3, #4]
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f042 0202 	orr.w	r2, r2, #2
 800e76c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	2200      	movs	r2, #0
 800e772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e776:	7dfb      	ldrb	r3, [r7, #23]
}
 800e778:	4618      	mov	r0, r3
 800e77a:	3718      	adds	r7, #24
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}
 800e780:	0800ea1d 	.word	0x0800ea1d
 800e784:	0800e8c9 	.word	0x0800e8c9
 800e788:	0800ea39 	.word	0x0800ea39
 800e78c:	0800e971 	.word	0x0800e971
 800e790:	0800ea55 	.word	0x0800ea55

0800e794 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e794:	b480      	push	{r7}
 800e796:	b083      	sub	sp, #12
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800e79c:	bf00      	nop
 800e79e:	370c      	adds	r7, #12
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr

0800e7a8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800e7b0:	bf00      	nop
 800e7b2:	370c      	adds	r7, #12
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr

0800e7bc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e7c4:	bf00      	nop
 800e7c6:	370c      	adds	r7, #12
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ce:	4770      	bx	lr

0800e7d0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	b083      	sub	sp, #12
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800e7d8:	bf00      	nop
 800e7da:	370c      	adds	r7, #12
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr

0800e7e4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b083      	sub	sp, #12
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800e7ec:	bf00      	nop
 800e7ee:	370c      	adds	r7, #12
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr

0800e7f8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b083      	sub	sp, #12
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800e800:	bf00      	nop
 800e802:	370c      	adds	r7, #12
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr

0800e80c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b083      	sub	sp, #12
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e814:	bf00      	nop
 800e816:	370c      	adds	r7, #12
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b086      	sub	sp, #24
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e82c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e82e:	f7fa fef5 	bl	800961c <HAL_GetTick>
 800e832:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e83e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e842:	d03b      	beq.n	800e8bc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	685a      	ldr	r2, [r3, #4]
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f022 0220 	bic.w	r2, r2, #32
 800e852:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	685a      	ldr	r2, [r3, #4]
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f022 0202 	bic.w	r2, r2, #2
 800e862:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e864:	693a      	ldr	r2, [r7, #16]
 800e866:	2164      	movs	r1, #100	; 0x64
 800e868:	6978      	ldr	r0, [r7, #20]
 800e86a:	f000 fa01 	bl	800ec70 <SPI_EndRxTxTransaction>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	d005      	beq.n	800e880 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e878:	f043 0220 	orr.w	r2, r3, #32
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	689b      	ldr	r3, [r3, #8]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d10a      	bne.n	800e89e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e888:	2300      	movs	r3, #0
 800e88a:	60fb      	str	r3, [r7, #12]
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	68db      	ldr	r3, [r3, #12]
 800e892:	60fb      	str	r3, [r7, #12]
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	689b      	ldr	r3, [r3, #8]
 800e89a:	60fb      	str	r3, [r7, #12]
 800e89c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	2201      	movs	r2, #1
 800e8a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d003      	beq.n	800e8bc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e8b4:	6978      	ldr	r0, [r7, #20]
 800e8b6:	f7ff ffa9 	bl	800e80c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e8ba:	e002      	b.n	800e8c2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800e8bc:	6978      	ldr	r0, [r7, #20]
 800e8be:	f7ff ff69 	bl	800e794 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e8c2:	3718      	adds	r7, #24
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}

0800e8c8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8d4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e8d6:	f7fa fea1 	bl	800961c <HAL_GetTick>
 800e8da:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8ea:	d03b      	beq.n	800e964 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	685a      	ldr	r2, [r3, #4]
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f022 0220 	bic.w	r2, r2, #32
 800e8fa:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	689b      	ldr	r3, [r3, #8]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d10d      	bne.n	800e920 <SPI_DMAReceiveCplt+0x58>
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e90c:	d108      	bne.n	800e920 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	685a      	ldr	r2, [r3, #4]
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f022 0203 	bic.w	r2, r2, #3
 800e91c:	605a      	str	r2, [r3, #4]
 800e91e:	e007      	b.n	800e930 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	685a      	ldr	r2, [r3, #4]
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f022 0201 	bic.w	r2, r2, #1
 800e92e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e930:	68ba      	ldr	r2, [r7, #8]
 800e932:	2164      	movs	r1, #100	; 0x64
 800e934:	68f8      	ldr	r0, [r7, #12]
 800e936:	f000 f935 	bl	800eba4 <SPI_EndRxTransaction>
 800e93a:	4603      	mov	r3, r0
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d002      	beq.n	800e946 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	2220      	movs	r2, #32
 800e944:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2200      	movs	r2, #0
 800e94a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	2201      	movs	r2, #1
 800e950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d003      	beq.n	800e964 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f7ff ff55 	bl	800e80c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e962:	e002      	b.n	800e96a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800e964:	68f8      	ldr	r0, [r7, #12]
 800e966:	f7ff ff1f 	bl	800e7a8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e96a:	3710      	adds	r7, #16
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e97c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e97e:	f7fa fe4d 	bl	800961c <HAL_GetTick>
 800e982:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e98e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e992:	d02f      	beq.n	800e9f4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	685a      	ldr	r2, [r3, #4]
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f022 0220 	bic.w	r2, r2, #32
 800e9a2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e9a4:	68ba      	ldr	r2, [r7, #8]
 800e9a6:	2164      	movs	r1, #100	; 0x64
 800e9a8:	68f8      	ldr	r0, [r7, #12]
 800e9aa:	f000 f961 	bl	800ec70 <SPI_EndRxTxTransaction>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d005      	beq.n	800e9c0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9b8:	f043 0220 	orr.w	r2, r3, #32
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	685a      	ldr	r2, [r3, #4]
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f022 0203 	bic.w	r2, r2, #3
 800e9ce:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2201      	movs	r2, #1
 800e9e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d003      	beq.n	800e9f4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e9ec:	68f8      	ldr	r0, [r7, #12]
 800e9ee:	f7ff ff0d 	bl	800e80c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e9f2:	e002      	b.n	800e9fa <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800e9f4:	68f8      	ldr	r0, [r7, #12]
 800e9f6:	f7ff fee1 	bl	800e7bc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e9fa:	3710      	adds	r7, #16
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea0c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ea0e:	68f8      	ldr	r0, [r7, #12]
 800ea10:	f7ff fede 	bl	800e7d0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ea14:	bf00      	nop
 800ea16:	3710      	adds	r7, #16
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea28:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ea2a:	68f8      	ldr	r0, [r7, #12]
 800ea2c:	f7ff feda 	bl	800e7e4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ea30:	bf00      	nop
 800ea32:	3710      	adds	r7, #16
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}

0800ea38 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea44:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ea46:	68f8      	ldr	r0, [r7, #12]
 800ea48:	f7ff fed6 	bl	800e7f8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ea4c:	bf00      	nop
 800ea4e:	3710      	adds	r7, #16
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b084      	sub	sp, #16
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea60:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	685a      	ldr	r2, [r3, #4]
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f022 0203 	bic.w	r2, r2, #3
 800ea70:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea76:	f043 0210 	orr.w	r2, r3, #16
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	2201      	movs	r2, #1
 800ea82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ea86:	68f8      	ldr	r0, [r7, #12]
 800ea88:	f7ff fec0 	bl	800e80c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ea8c:	bf00      	nop
 800ea8e:	3710      	adds	r7, #16
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}

0800ea94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b088      	sub	sp, #32
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	603b      	str	r3, [r7, #0]
 800eaa0:	4613      	mov	r3, r2
 800eaa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800eaa4:	f7fa fdba 	bl	800961c <HAL_GetTick>
 800eaa8:	4602      	mov	r2, r0
 800eaaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaac:	1a9b      	subs	r3, r3, r2
 800eaae:	683a      	ldr	r2, [r7, #0]
 800eab0:	4413      	add	r3, r2
 800eab2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800eab4:	f7fa fdb2 	bl	800961c <HAL_GetTick>
 800eab8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800eaba:	4b39      	ldr	r3, [pc, #228]	; (800eba0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	015b      	lsls	r3, r3, #5
 800eac0:	0d1b      	lsrs	r3, r3, #20
 800eac2:	69fa      	ldr	r2, [r7, #28]
 800eac4:	fb02 f303 	mul.w	r3, r2, r3
 800eac8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eaca:	e054      	b.n	800eb76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ead2:	d050      	beq.n	800eb76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ead4:	f7fa fda2 	bl	800961c <HAL_GetTick>
 800ead8:	4602      	mov	r2, r0
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	1ad3      	subs	r3, r2, r3
 800eade:	69fa      	ldr	r2, [r7, #28]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d902      	bls.n	800eaea <SPI_WaitFlagStateUntilTimeout+0x56>
 800eae4:	69fb      	ldr	r3, [r7, #28]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d13d      	bne.n	800eb66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	685a      	ldr	r2, [r3, #4]
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800eaf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	685b      	ldr	r3, [r3, #4]
 800eafe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb02:	d111      	bne.n	800eb28 <SPI_WaitFlagStateUntilTimeout+0x94>
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	689b      	ldr	r3, [r3, #8]
 800eb08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb0c:	d004      	beq.n	800eb18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	689b      	ldr	r3, [r3, #8]
 800eb12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb16:	d107      	bne.n	800eb28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	681a      	ldr	r2, [r3, #0]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb30:	d10f      	bne.n	800eb52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	681a      	ldr	r2, [r3, #0]
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eb40:	601a      	str	r2, [r3, #0]
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	681a      	ldr	r2, [r3, #0]
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800eb50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2201      	movs	r2, #1
 800eb56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800eb62:	2303      	movs	r3, #3
 800eb64:	e017      	b.n	800eb96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d101      	bne.n	800eb70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	3b01      	subs	r3, #1
 800eb74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	689a      	ldr	r2, [r3, #8]
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	4013      	ands	r3, r2
 800eb80:	68ba      	ldr	r2, [r7, #8]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	bf0c      	ite	eq
 800eb86:	2301      	moveq	r3, #1
 800eb88:	2300      	movne	r3, #0
 800eb8a:	b2db      	uxtb	r3, r3
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	79fb      	ldrb	r3, [r7, #7]
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d19b      	bne.n	800eacc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800eb94:	2300      	movs	r3, #0
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3720      	adds	r7, #32
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}
 800eb9e:	bf00      	nop
 800eba0:	20000004 	.word	0x20000004

0800eba4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b086      	sub	sp, #24
 800eba8:	af02      	add	r7, sp, #8
 800ebaa:	60f8      	str	r0, [r7, #12]
 800ebac:	60b9      	str	r1, [r7, #8]
 800ebae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	685b      	ldr	r3, [r3, #4]
 800ebb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ebb8:	d111      	bne.n	800ebde <SPI_EndRxTransaction+0x3a>
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	689b      	ldr	r3, [r3, #8]
 800ebbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebc2:	d004      	beq.n	800ebce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	689b      	ldr	r3, [r3, #8]
 800ebc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebcc:	d107      	bne.n	800ebde <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ebdc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	685b      	ldr	r3, [r3, #4]
 800ebe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ebe6:	d12a      	bne.n	800ec3e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	689b      	ldr	r3, [r3, #8]
 800ebec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebf0:	d012      	beq.n	800ec18 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	9300      	str	r3, [sp, #0]
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	2180      	movs	r1, #128	; 0x80
 800ebfc:	68f8      	ldr	r0, [r7, #12]
 800ebfe:	f7ff ff49 	bl	800ea94 <SPI_WaitFlagStateUntilTimeout>
 800ec02:	4603      	mov	r3, r0
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d02d      	beq.n	800ec64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec0c:	f043 0220 	orr.w	r2, r3, #32
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ec14:	2303      	movs	r3, #3
 800ec16:	e026      	b.n	800ec66 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	9300      	str	r3, [sp, #0]
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	2101      	movs	r1, #1
 800ec22:	68f8      	ldr	r0, [r7, #12]
 800ec24:	f7ff ff36 	bl	800ea94 <SPI_WaitFlagStateUntilTimeout>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d01a      	beq.n	800ec64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec32:	f043 0220 	orr.w	r2, r3, #32
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ec3a:	2303      	movs	r3, #3
 800ec3c:	e013      	b.n	800ec66 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	9300      	str	r3, [sp, #0]
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	2200      	movs	r2, #0
 800ec46:	2101      	movs	r1, #1
 800ec48:	68f8      	ldr	r0, [r7, #12]
 800ec4a:	f7ff ff23 	bl	800ea94 <SPI_WaitFlagStateUntilTimeout>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d007      	beq.n	800ec64 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec58:	f043 0220 	orr.w	r2, r3, #32
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ec60:	2303      	movs	r3, #3
 800ec62:	e000      	b.n	800ec66 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ec64:	2300      	movs	r3, #0
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3710      	adds	r7, #16
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
	...

0800ec70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b088      	sub	sp, #32
 800ec74:	af02      	add	r7, sp, #8
 800ec76:	60f8      	str	r0, [r7, #12]
 800ec78:	60b9      	str	r1, [r7, #8]
 800ec7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ec7c:	4b1b      	ldr	r3, [pc, #108]	; (800ecec <SPI_EndRxTxTransaction+0x7c>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4a1b      	ldr	r2, [pc, #108]	; (800ecf0 <SPI_EndRxTxTransaction+0x80>)
 800ec82:	fba2 2303 	umull	r2, r3, r2, r3
 800ec86:	0d5b      	lsrs	r3, r3, #21
 800ec88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ec8c:	fb02 f303 	mul.w	r3, r2, r3
 800ec90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	685b      	ldr	r3, [r3, #4]
 800ec96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec9a:	d112      	bne.n	800ecc2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	9300      	str	r3, [sp, #0]
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	2200      	movs	r2, #0
 800eca4:	2180      	movs	r1, #128	; 0x80
 800eca6:	68f8      	ldr	r0, [r7, #12]
 800eca8:	f7ff fef4 	bl	800ea94 <SPI_WaitFlagStateUntilTimeout>
 800ecac:	4603      	mov	r3, r0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d016      	beq.n	800ece0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecb6:	f043 0220 	orr.w	r2, r3, #32
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ecbe:	2303      	movs	r3, #3
 800ecc0:	e00f      	b.n	800ece2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d00a      	beq.n	800ecde <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	3b01      	subs	r3, #1
 800eccc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	689b      	ldr	r3, [r3, #8]
 800ecd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecd8:	2b80      	cmp	r3, #128	; 0x80
 800ecda:	d0f2      	beq.n	800ecc2 <SPI_EndRxTxTransaction+0x52>
 800ecdc:	e000      	b.n	800ece0 <SPI_EndRxTxTransaction+0x70>
        break;
 800ecde:	bf00      	nop
  }

  return HAL_OK;
 800ece0:	2300      	movs	r3, #0
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3718      	adds	r7, #24
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
 800ecea:	bf00      	nop
 800ecec:	20000004 	.word	0x20000004
 800ecf0:	165e9f81 	.word	0x165e9f81

0800ecf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b082      	sub	sp, #8
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d101      	bne.n	800ed06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ed02:	2301      	movs	r3, #1
 800ed04:	e041      	b.n	800ed8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d106      	bne.n	800ed20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2200      	movs	r2, #0
 800ed16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f7f4 fb0a 	bl	8003334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2202      	movs	r2, #2
 800ed24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681a      	ldr	r2, [r3, #0]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	3304      	adds	r3, #4
 800ed30:	4619      	mov	r1, r3
 800ed32:	4610      	mov	r0, r2
 800ed34:	f000 fc7a 	bl	800f62c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2201      	movs	r2, #1
 800ed44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2201      	movs	r2, #1
 800ed54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2201      	movs	r2, #1
 800ed64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2201      	movs	r2, #1
 800ed74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2201      	movs	r2, #1
 800ed84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ed88:	2300      	movs	r3, #0
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3708      	adds	r7, #8
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
	...

0800ed94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b085      	sub	sp, #20
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eda2:	b2db      	uxtb	r3, r3
 800eda4:	2b01      	cmp	r3, #1
 800eda6:	d001      	beq.n	800edac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800eda8:	2301      	movs	r3, #1
 800edaa:	e04e      	b.n	800ee4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2202      	movs	r2, #2
 800edb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	68da      	ldr	r2, [r3, #12]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f042 0201 	orr.w	r2, r2, #1
 800edc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	4a23      	ldr	r2, [pc, #140]	; (800ee58 <HAL_TIM_Base_Start_IT+0xc4>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	d022      	beq.n	800ee14 <HAL_TIM_Base_Start_IT+0x80>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800edd6:	d01d      	beq.n	800ee14 <HAL_TIM_Base_Start_IT+0x80>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	4a1f      	ldr	r2, [pc, #124]	; (800ee5c <HAL_TIM_Base_Start_IT+0xc8>)
 800edde:	4293      	cmp	r3, r2
 800ede0:	d018      	beq.n	800ee14 <HAL_TIM_Base_Start_IT+0x80>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	4a1e      	ldr	r2, [pc, #120]	; (800ee60 <HAL_TIM_Base_Start_IT+0xcc>)
 800ede8:	4293      	cmp	r3, r2
 800edea:	d013      	beq.n	800ee14 <HAL_TIM_Base_Start_IT+0x80>
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	4a1c      	ldr	r2, [pc, #112]	; (800ee64 <HAL_TIM_Base_Start_IT+0xd0>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d00e      	beq.n	800ee14 <HAL_TIM_Base_Start_IT+0x80>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	4a1b      	ldr	r2, [pc, #108]	; (800ee68 <HAL_TIM_Base_Start_IT+0xd4>)
 800edfc:	4293      	cmp	r3, r2
 800edfe:	d009      	beq.n	800ee14 <HAL_TIM_Base_Start_IT+0x80>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	4a19      	ldr	r2, [pc, #100]	; (800ee6c <HAL_TIM_Base_Start_IT+0xd8>)
 800ee06:	4293      	cmp	r3, r2
 800ee08:	d004      	beq.n	800ee14 <HAL_TIM_Base_Start_IT+0x80>
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	4a18      	ldr	r2, [pc, #96]	; (800ee70 <HAL_TIM_Base_Start_IT+0xdc>)
 800ee10:	4293      	cmp	r3, r2
 800ee12:	d111      	bne.n	800ee38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	689b      	ldr	r3, [r3, #8]
 800ee1a:	f003 0307 	and.w	r3, r3, #7
 800ee1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2b06      	cmp	r3, #6
 800ee24:	d010      	beq.n	800ee48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	681a      	ldr	r2, [r3, #0]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	f042 0201 	orr.w	r2, r2, #1
 800ee34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee36:	e007      	b.n	800ee48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	681a      	ldr	r2, [r3, #0]
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f042 0201 	orr.w	r2, r2, #1
 800ee46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ee48:	2300      	movs	r3, #0
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3714      	adds	r7, #20
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee54:	4770      	bx	lr
 800ee56:	bf00      	nop
 800ee58:	40010000 	.word	0x40010000
 800ee5c:	40000400 	.word	0x40000400
 800ee60:	40000800 	.word	0x40000800
 800ee64:	40000c00 	.word	0x40000c00
 800ee68:	40010400 	.word	0x40010400
 800ee6c:	40014000 	.word	0x40014000
 800ee70:	40001800 	.word	0x40001800

0800ee74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b082      	sub	sp, #8
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d101      	bne.n	800ee86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ee82:	2301      	movs	r3, #1
 800ee84:	e041      	b.n	800ef0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee8c:	b2db      	uxtb	r3, r3
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d106      	bne.n	800eea0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2200      	movs	r2, #0
 800ee96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 f839 	bl	800ef12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2202      	movs	r2, #2
 800eea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681a      	ldr	r2, [r3, #0]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	3304      	adds	r3, #4
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	4610      	mov	r0, r2
 800eeb4:	f000 fbba 	bl	800f62c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2201      	movs	r2, #1
 800eebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2201      	movs	r2, #1
 800eec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2201      	movs	r2, #1
 800eecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2201      	movs	r2, #1
 800eed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2201      	movs	r2, #1
 800eedc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2201      	movs	r2, #1
 800eee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2201      	movs	r2, #1
 800eeec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2201      	movs	r2, #1
 800eef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2201      	movs	r2, #1
 800eefc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2201      	movs	r2, #1
 800ef04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ef08:	2300      	movs	r3, #0
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3708      	adds	r7, #8
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}

0800ef12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ef12:	b480      	push	{r7}
 800ef14:	b083      	sub	sp, #12
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ef1a:	bf00      	nop
 800ef1c:	370c      	adds	r7, #12
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef24:	4770      	bx	lr
	...

0800ef28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b084      	sub	sp, #16
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d109      	bne.n	800ef4c <HAL_TIM_PWM_Start+0x24>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ef3e:	b2db      	uxtb	r3, r3
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	bf14      	ite	ne
 800ef44:	2301      	movne	r3, #1
 800ef46:	2300      	moveq	r3, #0
 800ef48:	b2db      	uxtb	r3, r3
 800ef4a:	e022      	b.n	800ef92 <HAL_TIM_PWM_Start+0x6a>
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	2b04      	cmp	r3, #4
 800ef50:	d109      	bne.n	800ef66 <HAL_TIM_PWM_Start+0x3e>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ef58:	b2db      	uxtb	r3, r3
 800ef5a:	2b01      	cmp	r3, #1
 800ef5c:	bf14      	ite	ne
 800ef5e:	2301      	movne	r3, #1
 800ef60:	2300      	moveq	r3, #0
 800ef62:	b2db      	uxtb	r3, r3
 800ef64:	e015      	b.n	800ef92 <HAL_TIM_PWM_Start+0x6a>
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	2b08      	cmp	r3, #8
 800ef6a:	d109      	bne.n	800ef80 <HAL_TIM_PWM_Start+0x58>
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	bf14      	ite	ne
 800ef78:	2301      	movne	r3, #1
 800ef7a:	2300      	moveq	r3, #0
 800ef7c:	b2db      	uxtb	r3, r3
 800ef7e:	e008      	b.n	800ef92 <HAL_TIM_PWM_Start+0x6a>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ef86:	b2db      	uxtb	r3, r3
 800ef88:	2b01      	cmp	r3, #1
 800ef8a:	bf14      	ite	ne
 800ef8c:	2301      	movne	r3, #1
 800ef8e:	2300      	moveq	r3, #0
 800ef90:	b2db      	uxtb	r3, r3
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d001      	beq.n	800ef9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ef96:	2301      	movs	r3, #1
 800ef98:	e07c      	b.n	800f094 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d104      	bne.n	800efaa <HAL_TIM_PWM_Start+0x82>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2202      	movs	r2, #2
 800efa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800efa8:	e013      	b.n	800efd2 <HAL_TIM_PWM_Start+0xaa>
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	2b04      	cmp	r3, #4
 800efae:	d104      	bne.n	800efba <HAL_TIM_PWM_Start+0x92>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2202      	movs	r2, #2
 800efb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800efb8:	e00b      	b.n	800efd2 <HAL_TIM_PWM_Start+0xaa>
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	2b08      	cmp	r3, #8
 800efbe:	d104      	bne.n	800efca <HAL_TIM_PWM_Start+0xa2>
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2202      	movs	r2, #2
 800efc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800efc8:	e003      	b.n	800efd2 <HAL_TIM_PWM_Start+0xaa>
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2202      	movs	r2, #2
 800efce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	2201      	movs	r2, #1
 800efd8:	6839      	ldr	r1, [r7, #0]
 800efda:	4618      	mov	r0, r3
 800efdc:	f000 fe10 	bl	800fc00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4a2d      	ldr	r2, [pc, #180]	; (800f09c <HAL_TIM_PWM_Start+0x174>)
 800efe6:	4293      	cmp	r3, r2
 800efe8:	d004      	beq.n	800eff4 <HAL_TIM_PWM_Start+0xcc>
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	4a2c      	ldr	r2, [pc, #176]	; (800f0a0 <HAL_TIM_PWM_Start+0x178>)
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d101      	bne.n	800eff8 <HAL_TIM_PWM_Start+0xd0>
 800eff4:	2301      	movs	r3, #1
 800eff6:	e000      	b.n	800effa <HAL_TIM_PWM_Start+0xd2>
 800eff8:	2300      	movs	r3, #0
 800effa:	2b00      	cmp	r3, #0
 800effc:	d007      	beq.n	800f00e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f00c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	4a22      	ldr	r2, [pc, #136]	; (800f09c <HAL_TIM_PWM_Start+0x174>)
 800f014:	4293      	cmp	r3, r2
 800f016:	d022      	beq.n	800f05e <HAL_TIM_PWM_Start+0x136>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f020:	d01d      	beq.n	800f05e <HAL_TIM_PWM_Start+0x136>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	4a1f      	ldr	r2, [pc, #124]	; (800f0a4 <HAL_TIM_PWM_Start+0x17c>)
 800f028:	4293      	cmp	r3, r2
 800f02a:	d018      	beq.n	800f05e <HAL_TIM_PWM_Start+0x136>
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4a1d      	ldr	r2, [pc, #116]	; (800f0a8 <HAL_TIM_PWM_Start+0x180>)
 800f032:	4293      	cmp	r3, r2
 800f034:	d013      	beq.n	800f05e <HAL_TIM_PWM_Start+0x136>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	4a1c      	ldr	r2, [pc, #112]	; (800f0ac <HAL_TIM_PWM_Start+0x184>)
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d00e      	beq.n	800f05e <HAL_TIM_PWM_Start+0x136>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	4a16      	ldr	r2, [pc, #88]	; (800f0a0 <HAL_TIM_PWM_Start+0x178>)
 800f046:	4293      	cmp	r3, r2
 800f048:	d009      	beq.n	800f05e <HAL_TIM_PWM_Start+0x136>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	4a18      	ldr	r2, [pc, #96]	; (800f0b0 <HAL_TIM_PWM_Start+0x188>)
 800f050:	4293      	cmp	r3, r2
 800f052:	d004      	beq.n	800f05e <HAL_TIM_PWM_Start+0x136>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	4a16      	ldr	r2, [pc, #88]	; (800f0b4 <HAL_TIM_PWM_Start+0x18c>)
 800f05a:	4293      	cmp	r3, r2
 800f05c:	d111      	bne.n	800f082 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	689b      	ldr	r3, [r3, #8]
 800f064:	f003 0307 	and.w	r3, r3, #7
 800f068:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	2b06      	cmp	r3, #6
 800f06e:	d010      	beq.n	800f092 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f042 0201 	orr.w	r2, r2, #1
 800f07e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f080:	e007      	b.n	800f092 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	681a      	ldr	r2, [r3, #0]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f042 0201 	orr.w	r2, r2, #1
 800f090:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f092:	2300      	movs	r3, #0
}
 800f094:	4618      	mov	r0, r3
 800f096:	3710      	adds	r7, #16
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}
 800f09c:	40010000 	.word	0x40010000
 800f0a0:	40010400 	.word	0x40010400
 800f0a4:	40000400 	.word	0x40000400
 800f0a8:	40000800 	.word	0x40000800
 800f0ac:	40000c00 	.word	0x40000c00
 800f0b0:	40014000 	.word	0x40014000
 800f0b4:	40001800 	.word	0x40001800

0800f0b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b082      	sub	sp, #8
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	691b      	ldr	r3, [r3, #16]
 800f0c6:	f003 0302 	and.w	r3, r3, #2
 800f0ca:	2b02      	cmp	r3, #2
 800f0cc:	d122      	bne.n	800f114 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	68db      	ldr	r3, [r3, #12]
 800f0d4:	f003 0302 	and.w	r3, r3, #2
 800f0d8:	2b02      	cmp	r3, #2
 800f0da:	d11b      	bne.n	800f114 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	f06f 0202 	mvn.w	r2, #2
 800f0e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2201      	movs	r2, #1
 800f0ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	699b      	ldr	r3, [r3, #24]
 800f0f2:	f003 0303 	and.w	r3, r3, #3
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d003      	beq.n	800f102 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f000 fa77 	bl	800f5ee <HAL_TIM_IC_CaptureCallback>
 800f100:	e005      	b.n	800f10e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f000 fa69 	bl	800f5da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f000 fa7a 	bl	800f602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2200      	movs	r2, #0
 800f112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	691b      	ldr	r3, [r3, #16]
 800f11a:	f003 0304 	and.w	r3, r3, #4
 800f11e:	2b04      	cmp	r3, #4
 800f120:	d122      	bne.n	800f168 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	68db      	ldr	r3, [r3, #12]
 800f128:	f003 0304 	and.w	r3, r3, #4
 800f12c:	2b04      	cmp	r3, #4
 800f12e:	d11b      	bne.n	800f168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f06f 0204 	mvn.w	r2, #4
 800f138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2202      	movs	r2, #2
 800f13e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	699b      	ldr	r3, [r3, #24]
 800f146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d003      	beq.n	800f156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f000 fa4d 	bl	800f5ee <HAL_TIM_IC_CaptureCallback>
 800f154:	e005      	b.n	800f162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f000 fa3f 	bl	800f5da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f000 fa50 	bl	800f602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2200      	movs	r2, #0
 800f166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	691b      	ldr	r3, [r3, #16]
 800f16e:	f003 0308 	and.w	r3, r3, #8
 800f172:	2b08      	cmp	r3, #8
 800f174:	d122      	bne.n	800f1bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	68db      	ldr	r3, [r3, #12]
 800f17c:	f003 0308 	and.w	r3, r3, #8
 800f180:	2b08      	cmp	r3, #8
 800f182:	d11b      	bne.n	800f1bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	f06f 0208 	mvn.w	r2, #8
 800f18c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2204      	movs	r2, #4
 800f192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	69db      	ldr	r3, [r3, #28]
 800f19a:	f003 0303 	and.w	r3, r3, #3
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d003      	beq.n	800f1aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f000 fa23 	bl	800f5ee <HAL_TIM_IC_CaptureCallback>
 800f1a8:	e005      	b.n	800f1b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f000 fa15 	bl	800f5da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f000 fa26 	bl	800f602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	691b      	ldr	r3, [r3, #16]
 800f1c2:	f003 0310 	and.w	r3, r3, #16
 800f1c6:	2b10      	cmp	r3, #16
 800f1c8:	d122      	bne.n	800f210 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	68db      	ldr	r3, [r3, #12]
 800f1d0:	f003 0310 	and.w	r3, r3, #16
 800f1d4:	2b10      	cmp	r3, #16
 800f1d6:	d11b      	bne.n	800f210 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	f06f 0210 	mvn.w	r2, #16
 800f1e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2208      	movs	r2, #8
 800f1e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	69db      	ldr	r3, [r3, #28]
 800f1ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d003      	beq.n	800f1fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f000 f9f9 	bl	800f5ee <HAL_TIM_IC_CaptureCallback>
 800f1fc:	e005      	b.n	800f20a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f000 f9eb 	bl	800f5da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f000 f9fc 	bl	800f602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2200      	movs	r2, #0
 800f20e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	691b      	ldr	r3, [r3, #16]
 800f216:	f003 0301 	and.w	r3, r3, #1
 800f21a:	2b01      	cmp	r3, #1
 800f21c:	d10e      	bne.n	800f23c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	68db      	ldr	r3, [r3, #12]
 800f224:	f003 0301 	and.w	r3, r3, #1
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d107      	bne.n	800f23c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	f06f 0201 	mvn.w	r2, #1
 800f234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f7f3 f886 	bl	8002348 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	691b      	ldr	r3, [r3, #16]
 800f242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f246:	2b80      	cmp	r3, #128	; 0x80
 800f248:	d10e      	bne.n	800f268 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	68db      	ldr	r3, [r3, #12]
 800f250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f254:	2b80      	cmp	r3, #128	; 0x80
 800f256:	d107      	bne.n	800f268 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f000 fd78 	bl	800fd58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	691b      	ldr	r3, [r3, #16]
 800f26e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f272:	2b40      	cmp	r3, #64	; 0x40
 800f274:	d10e      	bne.n	800f294 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	68db      	ldr	r3, [r3, #12]
 800f27c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f280:	2b40      	cmp	r3, #64	; 0x40
 800f282:	d107      	bne.n	800f294 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f28c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 f9c1 	bl	800f616 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	691b      	ldr	r3, [r3, #16]
 800f29a:	f003 0320 	and.w	r3, r3, #32
 800f29e:	2b20      	cmp	r3, #32
 800f2a0:	d10e      	bne.n	800f2c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	68db      	ldr	r3, [r3, #12]
 800f2a8:	f003 0320 	and.w	r3, r3, #32
 800f2ac:	2b20      	cmp	r3, #32
 800f2ae:	d107      	bne.n	800f2c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f06f 0220 	mvn.w	r2, #32
 800f2b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f000 fd42 	bl	800fd44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f2c0:	bf00      	nop
 800f2c2:	3708      	adds	r7, #8
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b086      	sub	sp, #24
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f2de:	2b01      	cmp	r3, #1
 800f2e0:	d101      	bne.n	800f2e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f2e2:	2302      	movs	r3, #2
 800f2e4:	e0ae      	b.n	800f444 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2b0c      	cmp	r3, #12
 800f2f2:	f200 809f 	bhi.w	800f434 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800f2f6:	a201      	add	r2, pc, #4	; (adr r2, 800f2fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2fc:	0800f331 	.word	0x0800f331
 800f300:	0800f435 	.word	0x0800f435
 800f304:	0800f435 	.word	0x0800f435
 800f308:	0800f435 	.word	0x0800f435
 800f30c:	0800f371 	.word	0x0800f371
 800f310:	0800f435 	.word	0x0800f435
 800f314:	0800f435 	.word	0x0800f435
 800f318:	0800f435 	.word	0x0800f435
 800f31c:	0800f3b3 	.word	0x0800f3b3
 800f320:	0800f435 	.word	0x0800f435
 800f324:	0800f435 	.word	0x0800f435
 800f328:	0800f435 	.word	0x0800f435
 800f32c:	0800f3f3 	.word	0x0800f3f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	68b9      	ldr	r1, [r7, #8]
 800f336:	4618      	mov	r0, r3
 800f338:	f000 fa18 	bl	800f76c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	699a      	ldr	r2, [r3, #24]
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	f042 0208 	orr.w	r2, r2, #8
 800f34a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	699a      	ldr	r2, [r3, #24]
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	f022 0204 	bic.w	r2, r2, #4
 800f35a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	6999      	ldr	r1, [r3, #24]
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	691a      	ldr	r2, [r3, #16]
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	430a      	orrs	r2, r1
 800f36c:	619a      	str	r2, [r3, #24]
      break;
 800f36e:	e064      	b.n	800f43a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	68b9      	ldr	r1, [r7, #8]
 800f376:	4618      	mov	r0, r3
 800f378:	f000 fa68 	bl	800f84c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	699a      	ldr	r2, [r3, #24]
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f38a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	699a      	ldr	r2, [r3, #24]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f39a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	6999      	ldr	r1, [r3, #24]
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	691b      	ldr	r3, [r3, #16]
 800f3a6:	021a      	lsls	r2, r3, #8
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	430a      	orrs	r2, r1
 800f3ae:	619a      	str	r2, [r3, #24]
      break;
 800f3b0:	e043      	b.n	800f43a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	68b9      	ldr	r1, [r7, #8]
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f000 fabd 	bl	800f938 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	69da      	ldr	r2, [r3, #28]
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	f042 0208 	orr.w	r2, r2, #8
 800f3cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	69da      	ldr	r2, [r3, #28]
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f022 0204 	bic.w	r2, r2, #4
 800f3dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	69d9      	ldr	r1, [r3, #28]
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	691a      	ldr	r2, [r3, #16]
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	430a      	orrs	r2, r1
 800f3ee:	61da      	str	r2, [r3, #28]
      break;
 800f3f0:	e023      	b.n	800f43a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	68b9      	ldr	r1, [r7, #8]
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f000 fb11 	bl	800fa20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	69da      	ldr	r2, [r3, #28]
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f40c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	69da      	ldr	r2, [r3, #28]
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f41c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	69d9      	ldr	r1, [r3, #28]
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	691b      	ldr	r3, [r3, #16]
 800f428:	021a      	lsls	r2, r3, #8
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	430a      	orrs	r2, r1
 800f430:	61da      	str	r2, [r3, #28]
      break;
 800f432:	e002      	b.n	800f43a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800f434:	2301      	movs	r3, #1
 800f436:	75fb      	strb	r3, [r7, #23]
      break;
 800f438:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	2200      	movs	r2, #0
 800f43e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f442:	7dfb      	ldrb	r3, [r7, #23]
}
 800f444:	4618      	mov	r0, r3
 800f446:	3718      	adds	r7, #24
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}

0800f44c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b084      	sub	sp, #16
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f456:	2300      	movs	r3, #0
 800f458:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f460:	2b01      	cmp	r3, #1
 800f462:	d101      	bne.n	800f468 <HAL_TIM_ConfigClockSource+0x1c>
 800f464:	2302      	movs	r3, #2
 800f466:	e0b4      	b.n	800f5d2 <HAL_TIM_ConfigClockSource+0x186>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2201      	movs	r2, #1
 800f46c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2202      	movs	r2, #2
 800f474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	689b      	ldr	r3, [r3, #8]
 800f47e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f48e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	68ba      	ldr	r2, [r7, #8]
 800f496:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f4a0:	d03e      	beq.n	800f520 <HAL_TIM_ConfigClockSource+0xd4>
 800f4a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f4a6:	f200 8087 	bhi.w	800f5b8 <HAL_TIM_ConfigClockSource+0x16c>
 800f4aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4ae:	f000 8086 	beq.w	800f5be <HAL_TIM_ConfigClockSource+0x172>
 800f4b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4b6:	d87f      	bhi.n	800f5b8 <HAL_TIM_ConfigClockSource+0x16c>
 800f4b8:	2b70      	cmp	r3, #112	; 0x70
 800f4ba:	d01a      	beq.n	800f4f2 <HAL_TIM_ConfigClockSource+0xa6>
 800f4bc:	2b70      	cmp	r3, #112	; 0x70
 800f4be:	d87b      	bhi.n	800f5b8 <HAL_TIM_ConfigClockSource+0x16c>
 800f4c0:	2b60      	cmp	r3, #96	; 0x60
 800f4c2:	d050      	beq.n	800f566 <HAL_TIM_ConfigClockSource+0x11a>
 800f4c4:	2b60      	cmp	r3, #96	; 0x60
 800f4c6:	d877      	bhi.n	800f5b8 <HAL_TIM_ConfigClockSource+0x16c>
 800f4c8:	2b50      	cmp	r3, #80	; 0x50
 800f4ca:	d03c      	beq.n	800f546 <HAL_TIM_ConfigClockSource+0xfa>
 800f4cc:	2b50      	cmp	r3, #80	; 0x50
 800f4ce:	d873      	bhi.n	800f5b8 <HAL_TIM_ConfigClockSource+0x16c>
 800f4d0:	2b40      	cmp	r3, #64	; 0x40
 800f4d2:	d058      	beq.n	800f586 <HAL_TIM_ConfigClockSource+0x13a>
 800f4d4:	2b40      	cmp	r3, #64	; 0x40
 800f4d6:	d86f      	bhi.n	800f5b8 <HAL_TIM_ConfigClockSource+0x16c>
 800f4d8:	2b30      	cmp	r3, #48	; 0x30
 800f4da:	d064      	beq.n	800f5a6 <HAL_TIM_ConfigClockSource+0x15a>
 800f4dc:	2b30      	cmp	r3, #48	; 0x30
 800f4de:	d86b      	bhi.n	800f5b8 <HAL_TIM_ConfigClockSource+0x16c>
 800f4e0:	2b20      	cmp	r3, #32
 800f4e2:	d060      	beq.n	800f5a6 <HAL_TIM_ConfigClockSource+0x15a>
 800f4e4:	2b20      	cmp	r3, #32
 800f4e6:	d867      	bhi.n	800f5b8 <HAL_TIM_ConfigClockSource+0x16c>
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d05c      	beq.n	800f5a6 <HAL_TIM_ConfigClockSource+0x15a>
 800f4ec:	2b10      	cmp	r3, #16
 800f4ee:	d05a      	beq.n	800f5a6 <HAL_TIM_ConfigClockSource+0x15a>
 800f4f0:	e062      	b.n	800f5b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6818      	ldr	r0, [r3, #0]
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	6899      	ldr	r1, [r3, #8]
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	685a      	ldr	r2, [r3, #4]
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	68db      	ldr	r3, [r3, #12]
 800f502:	f000 fb5d 	bl	800fbc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	689b      	ldr	r3, [r3, #8]
 800f50c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f514:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	68ba      	ldr	r2, [r7, #8]
 800f51c:	609a      	str	r2, [r3, #8]
      break;
 800f51e:	e04f      	b.n	800f5c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6818      	ldr	r0, [r3, #0]
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	6899      	ldr	r1, [r3, #8]
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	685a      	ldr	r2, [r3, #4]
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	68db      	ldr	r3, [r3, #12]
 800f530:	f000 fb46 	bl	800fbc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	689a      	ldr	r2, [r3, #8]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f542:	609a      	str	r2, [r3, #8]
      break;
 800f544:	e03c      	b.n	800f5c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6818      	ldr	r0, [r3, #0]
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	6859      	ldr	r1, [r3, #4]
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	461a      	mov	r2, r3
 800f554:	f000 faba 	bl	800facc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	2150      	movs	r1, #80	; 0x50
 800f55e:	4618      	mov	r0, r3
 800f560:	f000 fb13 	bl	800fb8a <TIM_ITRx_SetConfig>
      break;
 800f564:	e02c      	b.n	800f5c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6818      	ldr	r0, [r3, #0]
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	6859      	ldr	r1, [r3, #4]
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	68db      	ldr	r3, [r3, #12]
 800f572:	461a      	mov	r2, r3
 800f574:	f000 fad9 	bl	800fb2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	2160      	movs	r1, #96	; 0x60
 800f57e:	4618      	mov	r0, r3
 800f580:	f000 fb03 	bl	800fb8a <TIM_ITRx_SetConfig>
      break;
 800f584:	e01c      	b.n	800f5c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6818      	ldr	r0, [r3, #0]
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	6859      	ldr	r1, [r3, #4]
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	68db      	ldr	r3, [r3, #12]
 800f592:	461a      	mov	r2, r3
 800f594:	f000 fa9a 	bl	800facc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	2140      	movs	r1, #64	; 0x40
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f000 faf3 	bl	800fb8a <TIM_ITRx_SetConfig>
      break;
 800f5a4:	e00c      	b.n	800f5c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681a      	ldr	r2, [r3, #0]
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	4619      	mov	r1, r3
 800f5b0:	4610      	mov	r0, r2
 800f5b2:	f000 faea 	bl	800fb8a <TIM_ITRx_SetConfig>
      break;
 800f5b6:	e003      	b.n	800f5c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	73fb      	strb	r3, [r7, #15]
      break;
 800f5bc:	e000      	b.n	800f5c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f5be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3710      	adds	r7, #16
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}

0800f5da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f5da:	b480      	push	{r7}
 800f5dc:	b083      	sub	sp, #12
 800f5de:	af00      	add	r7, sp, #0
 800f5e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f5e2:	bf00      	nop
 800f5e4:	370c      	adds	r7, #12
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ec:	4770      	bx	lr

0800f5ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f5ee:	b480      	push	{r7}
 800f5f0:	b083      	sub	sp, #12
 800f5f2:	af00      	add	r7, sp, #0
 800f5f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f5f6:	bf00      	nop
 800f5f8:	370c      	adds	r7, #12
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f600:	4770      	bx	lr

0800f602 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f602:	b480      	push	{r7}
 800f604:	b083      	sub	sp, #12
 800f606:	af00      	add	r7, sp, #0
 800f608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f60a:	bf00      	nop
 800f60c:	370c      	adds	r7, #12
 800f60e:	46bd      	mov	sp, r7
 800f610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f614:	4770      	bx	lr

0800f616 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f616:	b480      	push	{r7}
 800f618:	b083      	sub	sp, #12
 800f61a:	af00      	add	r7, sp, #0
 800f61c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f61e:	bf00      	nop
 800f620:	370c      	adds	r7, #12
 800f622:	46bd      	mov	sp, r7
 800f624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f628:	4770      	bx	lr
	...

0800f62c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b085      	sub	sp, #20
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	4a40      	ldr	r2, [pc, #256]	; (800f740 <TIM_Base_SetConfig+0x114>)
 800f640:	4293      	cmp	r3, r2
 800f642:	d013      	beq.n	800f66c <TIM_Base_SetConfig+0x40>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f64a:	d00f      	beq.n	800f66c <TIM_Base_SetConfig+0x40>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	4a3d      	ldr	r2, [pc, #244]	; (800f744 <TIM_Base_SetConfig+0x118>)
 800f650:	4293      	cmp	r3, r2
 800f652:	d00b      	beq.n	800f66c <TIM_Base_SetConfig+0x40>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	4a3c      	ldr	r2, [pc, #240]	; (800f748 <TIM_Base_SetConfig+0x11c>)
 800f658:	4293      	cmp	r3, r2
 800f65a:	d007      	beq.n	800f66c <TIM_Base_SetConfig+0x40>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	4a3b      	ldr	r2, [pc, #236]	; (800f74c <TIM_Base_SetConfig+0x120>)
 800f660:	4293      	cmp	r3, r2
 800f662:	d003      	beq.n	800f66c <TIM_Base_SetConfig+0x40>
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	4a3a      	ldr	r2, [pc, #232]	; (800f750 <TIM_Base_SetConfig+0x124>)
 800f668:	4293      	cmp	r3, r2
 800f66a:	d108      	bne.n	800f67e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	68fa      	ldr	r2, [r7, #12]
 800f67a:	4313      	orrs	r3, r2
 800f67c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	4a2f      	ldr	r2, [pc, #188]	; (800f740 <TIM_Base_SetConfig+0x114>)
 800f682:	4293      	cmp	r3, r2
 800f684:	d02b      	beq.n	800f6de <TIM_Base_SetConfig+0xb2>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f68c:	d027      	beq.n	800f6de <TIM_Base_SetConfig+0xb2>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	4a2c      	ldr	r2, [pc, #176]	; (800f744 <TIM_Base_SetConfig+0x118>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d023      	beq.n	800f6de <TIM_Base_SetConfig+0xb2>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	4a2b      	ldr	r2, [pc, #172]	; (800f748 <TIM_Base_SetConfig+0x11c>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d01f      	beq.n	800f6de <TIM_Base_SetConfig+0xb2>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	4a2a      	ldr	r2, [pc, #168]	; (800f74c <TIM_Base_SetConfig+0x120>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d01b      	beq.n	800f6de <TIM_Base_SetConfig+0xb2>
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	4a29      	ldr	r2, [pc, #164]	; (800f750 <TIM_Base_SetConfig+0x124>)
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d017      	beq.n	800f6de <TIM_Base_SetConfig+0xb2>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	4a28      	ldr	r2, [pc, #160]	; (800f754 <TIM_Base_SetConfig+0x128>)
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d013      	beq.n	800f6de <TIM_Base_SetConfig+0xb2>
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	4a27      	ldr	r2, [pc, #156]	; (800f758 <TIM_Base_SetConfig+0x12c>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d00f      	beq.n	800f6de <TIM_Base_SetConfig+0xb2>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	4a26      	ldr	r2, [pc, #152]	; (800f75c <TIM_Base_SetConfig+0x130>)
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	d00b      	beq.n	800f6de <TIM_Base_SetConfig+0xb2>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	4a25      	ldr	r2, [pc, #148]	; (800f760 <TIM_Base_SetConfig+0x134>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d007      	beq.n	800f6de <TIM_Base_SetConfig+0xb2>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	4a24      	ldr	r2, [pc, #144]	; (800f764 <TIM_Base_SetConfig+0x138>)
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	d003      	beq.n	800f6de <TIM_Base_SetConfig+0xb2>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	4a23      	ldr	r2, [pc, #140]	; (800f768 <TIM_Base_SetConfig+0x13c>)
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d108      	bne.n	800f6f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	68db      	ldr	r3, [r3, #12]
 800f6ea:	68fa      	ldr	r2, [r7, #12]
 800f6ec:	4313      	orrs	r3, r2
 800f6ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	695b      	ldr	r3, [r3, #20]
 800f6fa:	4313      	orrs	r3, r2
 800f6fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	68fa      	ldr	r2, [r7, #12]
 800f702:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	689a      	ldr	r2, [r3, #8]
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	681a      	ldr	r2, [r3, #0]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	4a0a      	ldr	r2, [pc, #40]	; (800f740 <TIM_Base_SetConfig+0x114>)
 800f718:	4293      	cmp	r3, r2
 800f71a:	d003      	beq.n	800f724 <TIM_Base_SetConfig+0xf8>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	4a0c      	ldr	r2, [pc, #48]	; (800f750 <TIM_Base_SetConfig+0x124>)
 800f720:	4293      	cmp	r3, r2
 800f722:	d103      	bne.n	800f72c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	691a      	ldr	r2, [r3, #16]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2201      	movs	r2, #1
 800f730:	615a      	str	r2, [r3, #20]
}
 800f732:	bf00      	nop
 800f734:	3714      	adds	r7, #20
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr
 800f73e:	bf00      	nop
 800f740:	40010000 	.word	0x40010000
 800f744:	40000400 	.word	0x40000400
 800f748:	40000800 	.word	0x40000800
 800f74c:	40000c00 	.word	0x40000c00
 800f750:	40010400 	.word	0x40010400
 800f754:	40014000 	.word	0x40014000
 800f758:	40014400 	.word	0x40014400
 800f75c:	40014800 	.word	0x40014800
 800f760:	40001800 	.word	0x40001800
 800f764:	40001c00 	.word	0x40001c00
 800f768:	40002000 	.word	0x40002000

0800f76c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f76c:	b480      	push	{r7}
 800f76e:	b087      	sub	sp, #28
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6a1b      	ldr	r3, [r3, #32]
 800f77a:	f023 0201 	bic.w	r2, r3, #1
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6a1b      	ldr	r3, [r3, #32]
 800f786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	685b      	ldr	r3, [r3, #4]
 800f78c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	699b      	ldr	r3, [r3, #24]
 800f792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f79a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	f023 0303 	bic.w	r3, r3, #3
 800f7a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	68fa      	ldr	r2, [r7, #12]
 800f7aa:	4313      	orrs	r3, r2
 800f7ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	f023 0302 	bic.w	r3, r3, #2
 800f7b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	689b      	ldr	r3, [r3, #8]
 800f7ba:	697a      	ldr	r2, [r7, #20]
 800f7bc:	4313      	orrs	r3, r2
 800f7be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	4a20      	ldr	r2, [pc, #128]	; (800f844 <TIM_OC1_SetConfig+0xd8>)
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	d003      	beq.n	800f7d0 <TIM_OC1_SetConfig+0x64>
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	4a1f      	ldr	r2, [pc, #124]	; (800f848 <TIM_OC1_SetConfig+0xdc>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d10c      	bne.n	800f7ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	f023 0308 	bic.w	r3, r3, #8
 800f7d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	68db      	ldr	r3, [r3, #12]
 800f7dc:	697a      	ldr	r2, [r7, #20]
 800f7de:	4313      	orrs	r3, r2
 800f7e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	f023 0304 	bic.w	r3, r3, #4
 800f7e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	4a15      	ldr	r2, [pc, #84]	; (800f844 <TIM_OC1_SetConfig+0xd8>)
 800f7ee:	4293      	cmp	r3, r2
 800f7f0:	d003      	beq.n	800f7fa <TIM_OC1_SetConfig+0x8e>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	4a14      	ldr	r2, [pc, #80]	; (800f848 <TIM_OC1_SetConfig+0xdc>)
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	d111      	bne.n	800f81e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	695b      	ldr	r3, [r3, #20]
 800f80e:	693a      	ldr	r2, [r7, #16]
 800f810:	4313      	orrs	r3, r2
 800f812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	699b      	ldr	r3, [r3, #24]
 800f818:	693a      	ldr	r2, [r7, #16]
 800f81a:	4313      	orrs	r3, r2
 800f81c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	693a      	ldr	r2, [r7, #16]
 800f822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	68fa      	ldr	r2, [r7, #12]
 800f828:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	685a      	ldr	r2, [r3, #4]
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	697a      	ldr	r2, [r7, #20]
 800f836:	621a      	str	r2, [r3, #32]
}
 800f838:	bf00      	nop
 800f83a:	371c      	adds	r7, #28
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr
 800f844:	40010000 	.word	0x40010000
 800f848:	40010400 	.word	0x40010400

0800f84c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f84c:	b480      	push	{r7}
 800f84e:	b087      	sub	sp, #28
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	6a1b      	ldr	r3, [r3, #32]
 800f85a:	f023 0210 	bic.w	r2, r3, #16
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6a1b      	ldr	r3, [r3, #32]
 800f866:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	685b      	ldr	r3, [r3, #4]
 800f86c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	699b      	ldr	r3, [r3, #24]
 800f872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f87a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	021b      	lsls	r3, r3, #8
 800f88a:	68fa      	ldr	r2, [r7, #12]
 800f88c:	4313      	orrs	r3, r2
 800f88e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	f023 0320 	bic.w	r3, r3, #32
 800f896:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	689b      	ldr	r3, [r3, #8]
 800f89c:	011b      	lsls	r3, r3, #4
 800f89e:	697a      	ldr	r2, [r7, #20]
 800f8a0:	4313      	orrs	r3, r2
 800f8a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	4a22      	ldr	r2, [pc, #136]	; (800f930 <TIM_OC2_SetConfig+0xe4>)
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	d003      	beq.n	800f8b4 <TIM_OC2_SetConfig+0x68>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	4a21      	ldr	r2, [pc, #132]	; (800f934 <TIM_OC2_SetConfig+0xe8>)
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d10d      	bne.n	800f8d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	68db      	ldr	r3, [r3, #12]
 800f8c0:	011b      	lsls	r3, r3, #4
 800f8c2:	697a      	ldr	r2, [r7, #20]
 800f8c4:	4313      	orrs	r3, r2
 800f8c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	4a17      	ldr	r2, [pc, #92]	; (800f930 <TIM_OC2_SetConfig+0xe4>)
 800f8d4:	4293      	cmp	r3, r2
 800f8d6:	d003      	beq.n	800f8e0 <TIM_OC2_SetConfig+0x94>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	4a16      	ldr	r2, [pc, #88]	; (800f934 <TIM_OC2_SetConfig+0xe8>)
 800f8dc:	4293      	cmp	r3, r2
 800f8de:	d113      	bne.n	800f908 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f8e0:	693b      	ldr	r3, [r7, #16]
 800f8e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f8e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f8e8:	693b      	ldr	r3, [r7, #16]
 800f8ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f8ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	695b      	ldr	r3, [r3, #20]
 800f8f4:	009b      	lsls	r3, r3, #2
 800f8f6:	693a      	ldr	r2, [r7, #16]
 800f8f8:	4313      	orrs	r3, r2
 800f8fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	699b      	ldr	r3, [r3, #24]
 800f900:	009b      	lsls	r3, r3, #2
 800f902:	693a      	ldr	r2, [r7, #16]
 800f904:	4313      	orrs	r3, r2
 800f906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	693a      	ldr	r2, [r7, #16]
 800f90c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	68fa      	ldr	r2, [r7, #12]
 800f912:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	685a      	ldr	r2, [r3, #4]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	697a      	ldr	r2, [r7, #20]
 800f920:	621a      	str	r2, [r3, #32]
}
 800f922:	bf00      	nop
 800f924:	371c      	adds	r7, #28
 800f926:	46bd      	mov	sp, r7
 800f928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92c:	4770      	bx	lr
 800f92e:	bf00      	nop
 800f930:	40010000 	.word	0x40010000
 800f934:	40010400 	.word	0x40010400

0800f938 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f938:	b480      	push	{r7}
 800f93a:	b087      	sub	sp, #28
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6a1b      	ldr	r3, [r3, #32]
 800f946:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6a1b      	ldr	r3, [r3, #32]
 800f952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	685b      	ldr	r3, [r3, #4]
 800f958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	69db      	ldr	r3, [r3, #28]
 800f95e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	f023 0303 	bic.w	r3, r3, #3
 800f96e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	68fa      	ldr	r2, [r7, #12]
 800f976:	4313      	orrs	r3, r2
 800f978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	689b      	ldr	r3, [r3, #8]
 800f986:	021b      	lsls	r3, r3, #8
 800f988:	697a      	ldr	r2, [r7, #20]
 800f98a:	4313      	orrs	r3, r2
 800f98c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	4a21      	ldr	r2, [pc, #132]	; (800fa18 <TIM_OC3_SetConfig+0xe0>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d003      	beq.n	800f99e <TIM_OC3_SetConfig+0x66>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	4a20      	ldr	r2, [pc, #128]	; (800fa1c <TIM_OC3_SetConfig+0xe4>)
 800f99a:	4293      	cmp	r3, r2
 800f99c:	d10d      	bne.n	800f9ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f9a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	68db      	ldr	r3, [r3, #12]
 800f9aa:	021b      	lsls	r3, r3, #8
 800f9ac:	697a      	ldr	r2, [r7, #20]
 800f9ae:	4313      	orrs	r3, r2
 800f9b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f9b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	4a16      	ldr	r2, [pc, #88]	; (800fa18 <TIM_OC3_SetConfig+0xe0>)
 800f9be:	4293      	cmp	r3, r2
 800f9c0:	d003      	beq.n	800f9ca <TIM_OC3_SetConfig+0x92>
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	4a15      	ldr	r2, [pc, #84]	; (800fa1c <TIM_OC3_SetConfig+0xe4>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d113      	bne.n	800f9f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f9d2:	693b      	ldr	r3, [r7, #16]
 800f9d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f9d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	695b      	ldr	r3, [r3, #20]
 800f9de:	011b      	lsls	r3, r3, #4
 800f9e0:	693a      	ldr	r2, [r7, #16]
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	699b      	ldr	r3, [r3, #24]
 800f9ea:	011b      	lsls	r3, r3, #4
 800f9ec:	693a      	ldr	r2, [r7, #16]
 800f9ee:	4313      	orrs	r3, r2
 800f9f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	693a      	ldr	r2, [r7, #16]
 800f9f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	68fa      	ldr	r2, [r7, #12]
 800f9fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	685a      	ldr	r2, [r3, #4]
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	697a      	ldr	r2, [r7, #20]
 800fa0a:	621a      	str	r2, [r3, #32]
}
 800fa0c:	bf00      	nop
 800fa0e:	371c      	adds	r7, #28
 800fa10:	46bd      	mov	sp, r7
 800fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa16:	4770      	bx	lr
 800fa18:	40010000 	.word	0x40010000
 800fa1c:	40010400 	.word	0x40010400

0800fa20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b087      	sub	sp, #28
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6a1b      	ldr	r3, [r3, #32]
 800fa2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6a1b      	ldr	r3, [r3, #32]
 800fa3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	69db      	ldr	r3, [r3, #28]
 800fa46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	021b      	lsls	r3, r3, #8
 800fa5e:	68fa      	ldr	r2, [r7, #12]
 800fa60:	4313      	orrs	r3, r2
 800fa62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fa64:	693b      	ldr	r3, [r7, #16]
 800fa66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fa6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	689b      	ldr	r3, [r3, #8]
 800fa70:	031b      	lsls	r3, r3, #12
 800fa72:	693a      	ldr	r2, [r7, #16]
 800fa74:	4313      	orrs	r3, r2
 800fa76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	4a12      	ldr	r2, [pc, #72]	; (800fac4 <TIM_OC4_SetConfig+0xa4>)
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d003      	beq.n	800fa88 <TIM_OC4_SetConfig+0x68>
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	4a11      	ldr	r2, [pc, #68]	; (800fac8 <TIM_OC4_SetConfig+0xa8>)
 800fa84:	4293      	cmp	r3, r2
 800fa86:	d109      	bne.n	800fa9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fa8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	695b      	ldr	r3, [r3, #20]
 800fa94:	019b      	lsls	r3, r3, #6
 800fa96:	697a      	ldr	r2, [r7, #20]
 800fa98:	4313      	orrs	r3, r2
 800fa9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	697a      	ldr	r2, [r7, #20]
 800faa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	68fa      	ldr	r2, [r7, #12]
 800faa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	685a      	ldr	r2, [r3, #4]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	693a      	ldr	r2, [r7, #16]
 800fab4:	621a      	str	r2, [r3, #32]
}
 800fab6:	bf00      	nop
 800fab8:	371c      	adds	r7, #28
 800faba:	46bd      	mov	sp, r7
 800fabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac0:	4770      	bx	lr
 800fac2:	bf00      	nop
 800fac4:	40010000 	.word	0x40010000
 800fac8:	40010400 	.word	0x40010400

0800facc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800facc:	b480      	push	{r7}
 800face:	b087      	sub	sp, #28
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	60f8      	str	r0, [r7, #12]
 800fad4:	60b9      	str	r1, [r7, #8]
 800fad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	6a1b      	ldr	r3, [r3, #32]
 800fadc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	6a1b      	ldr	r3, [r3, #32]
 800fae2:	f023 0201 	bic.w	r2, r3, #1
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	699b      	ldr	r3, [r3, #24]
 800faee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800faf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	011b      	lsls	r3, r3, #4
 800fafc:	693a      	ldr	r2, [r7, #16]
 800fafe:	4313      	orrs	r3, r2
 800fb00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	f023 030a 	bic.w	r3, r3, #10
 800fb08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fb0a:	697a      	ldr	r2, [r7, #20]
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	4313      	orrs	r3, r2
 800fb10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	693a      	ldr	r2, [r7, #16]
 800fb16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	697a      	ldr	r2, [r7, #20]
 800fb1c:	621a      	str	r2, [r3, #32]
}
 800fb1e:	bf00      	nop
 800fb20:	371c      	adds	r7, #28
 800fb22:	46bd      	mov	sp, r7
 800fb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb28:	4770      	bx	lr

0800fb2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fb2a:	b480      	push	{r7}
 800fb2c:	b087      	sub	sp, #28
 800fb2e:	af00      	add	r7, sp, #0
 800fb30:	60f8      	str	r0, [r7, #12]
 800fb32:	60b9      	str	r1, [r7, #8]
 800fb34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	6a1b      	ldr	r3, [r3, #32]
 800fb3a:	f023 0210 	bic.w	r2, r3, #16
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	699b      	ldr	r3, [r3, #24]
 800fb46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	6a1b      	ldr	r3, [r3, #32]
 800fb4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fb54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	031b      	lsls	r3, r3, #12
 800fb5a:	697a      	ldr	r2, [r7, #20]
 800fb5c:	4313      	orrs	r3, r2
 800fb5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fb66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fb68:	68bb      	ldr	r3, [r7, #8]
 800fb6a:	011b      	lsls	r3, r3, #4
 800fb6c:	693a      	ldr	r2, [r7, #16]
 800fb6e:	4313      	orrs	r3, r2
 800fb70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	697a      	ldr	r2, [r7, #20]
 800fb76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	693a      	ldr	r2, [r7, #16]
 800fb7c:	621a      	str	r2, [r3, #32]
}
 800fb7e:	bf00      	nop
 800fb80:	371c      	adds	r7, #28
 800fb82:	46bd      	mov	sp, r7
 800fb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb88:	4770      	bx	lr

0800fb8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fb8a:	b480      	push	{r7}
 800fb8c:	b085      	sub	sp, #20
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]
 800fb92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	689b      	ldr	r3, [r3, #8]
 800fb98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fba2:	683a      	ldr	r2, [r7, #0]
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	4313      	orrs	r3, r2
 800fba8:	f043 0307 	orr.w	r3, r3, #7
 800fbac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	68fa      	ldr	r2, [r7, #12]
 800fbb2:	609a      	str	r2, [r3, #8]
}
 800fbb4:	bf00      	nop
 800fbb6:	3714      	adds	r7, #20
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbe:	4770      	bx	lr

0800fbc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fbc0:	b480      	push	{r7}
 800fbc2:	b087      	sub	sp, #28
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	60f8      	str	r0, [r7, #12]
 800fbc8:	60b9      	str	r1, [r7, #8]
 800fbca:	607a      	str	r2, [r7, #4]
 800fbcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	689b      	ldr	r3, [r3, #8]
 800fbd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fbda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	021a      	lsls	r2, r3, #8
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	431a      	orrs	r2, r3
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	697a      	ldr	r2, [r7, #20]
 800fbea:	4313      	orrs	r3, r2
 800fbec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	697a      	ldr	r2, [r7, #20]
 800fbf2:	609a      	str	r2, [r3, #8]
}
 800fbf4:	bf00      	nop
 800fbf6:	371c      	adds	r7, #28
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr

0800fc00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fc00:	b480      	push	{r7}
 800fc02:	b087      	sub	sp, #28
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	60f8      	str	r0, [r7, #12]
 800fc08:	60b9      	str	r1, [r7, #8]
 800fc0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	f003 031f 	and.w	r3, r3, #31
 800fc12:	2201      	movs	r2, #1
 800fc14:	fa02 f303 	lsl.w	r3, r2, r3
 800fc18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	6a1a      	ldr	r2, [r3, #32]
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	43db      	mvns	r3, r3
 800fc22:	401a      	ands	r2, r3
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	6a1a      	ldr	r2, [r3, #32]
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	f003 031f 	and.w	r3, r3, #31
 800fc32:	6879      	ldr	r1, [r7, #4]
 800fc34:	fa01 f303 	lsl.w	r3, r1, r3
 800fc38:	431a      	orrs	r2, r3
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	621a      	str	r2, [r3, #32]
}
 800fc3e:	bf00      	nop
 800fc40:	371c      	adds	r7, #28
 800fc42:	46bd      	mov	sp, r7
 800fc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc48:	4770      	bx	lr
	...

0800fc4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b085      	sub	sp, #20
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc5c:	2b01      	cmp	r3, #1
 800fc5e:	d101      	bne.n	800fc64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fc60:	2302      	movs	r3, #2
 800fc62:	e05a      	b.n	800fd1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2201      	movs	r2, #1
 800fc68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2202      	movs	r2, #2
 800fc70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	685b      	ldr	r3, [r3, #4]
 800fc7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	689b      	ldr	r3, [r3, #8]
 800fc82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	68fa      	ldr	r2, [r7, #12]
 800fc92:	4313      	orrs	r3, r2
 800fc94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	68fa      	ldr	r2, [r7, #12]
 800fc9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	4a21      	ldr	r2, [pc, #132]	; (800fd28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fca4:	4293      	cmp	r3, r2
 800fca6:	d022      	beq.n	800fcee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fcb0:	d01d      	beq.n	800fcee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	4a1d      	ldr	r2, [pc, #116]	; (800fd2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fcb8:	4293      	cmp	r3, r2
 800fcba:	d018      	beq.n	800fcee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	4a1b      	ldr	r2, [pc, #108]	; (800fd30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fcc2:	4293      	cmp	r3, r2
 800fcc4:	d013      	beq.n	800fcee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	4a1a      	ldr	r2, [pc, #104]	; (800fd34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fccc:	4293      	cmp	r3, r2
 800fcce:	d00e      	beq.n	800fcee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	4a18      	ldr	r2, [pc, #96]	; (800fd38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fcd6:	4293      	cmp	r3, r2
 800fcd8:	d009      	beq.n	800fcee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	4a17      	ldr	r2, [pc, #92]	; (800fd3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fce0:	4293      	cmp	r3, r2
 800fce2:	d004      	beq.n	800fcee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	4a15      	ldr	r2, [pc, #84]	; (800fd40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fcea:	4293      	cmp	r3, r2
 800fcec:	d10c      	bne.n	800fd08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fcf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	685b      	ldr	r3, [r3, #4]
 800fcfa:	68ba      	ldr	r2, [r7, #8]
 800fcfc:	4313      	orrs	r3, r2
 800fcfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	68ba      	ldr	r2, [r7, #8]
 800fd06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2200      	movs	r2, #0
 800fd14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fd18:	2300      	movs	r3, #0
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3714      	adds	r7, #20
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd24:	4770      	bx	lr
 800fd26:	bf00      	nop
 800fd28:	40010000 	.word	0x40010000
 800fd2c:	40000400 	.word	0x40000400
 800fd30:	40000800 	.word	0x40000800
 800fd34:	40000c00 	.word	0x40000c00
 800fd38:	40010400 	.word	0x40010400
 800fd3c:	40014000 	.word	0x40014000
 800fd40:	40001800 	.word	0x40001800

0800fd44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fd44:	b480      	push	{r7}
 800fd46:	b083      	sub	sp, #12
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fd4c:	bf00      	nop
 800fd4e:	370c      	adds	r7, #12
 800fd50:	46bd      	mov	sp, r7
 800fd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd56:	4770      	bx	lr

0800fd58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b083      	sub	sp, #12
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fd60:	bf00      	nop
 800fd62:	370c      	adds	r7, #12
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr

0800fd6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d101      	bne.n	800fd7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	e03f      	b.n	800fdfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd84:	b2db      	uxtb	r3, r3
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d106      	bne.n	800fd98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f7f3 fb66 	bl	8003464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2224      	movs	r2, #36	; 0x24
 800fd9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	68da      	ldr	r2, [r3, #12]
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fdae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f000 ff4d 	bl	8010c50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	691a      	ldr	r2, [r3, #16]
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fdc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	695a      	ldr	r2, [r3, #20]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fdd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	68da      	ldr	r2, [r3, #12]
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fde4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2200      	movs	r2, #0
 800fdea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2220      	movs	r2, #32
 800fdf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2220      	movs	r2, #32
 800fdf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800fdfc:	2300      	movs	r3, #0
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3708      	adds	r7, #8
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
	...

0800fe08 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b08c      	sub	sp, #48	; 0x30
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	60f8      	str	r0, [r7, #12]
 800fe10:	60b9      	str	r1, [r7, #8]
 800fe12:	4613      	mov	r3, r2
 800fe14:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fe1c:	b2db      	uxtb	r3, r3
 800fe1e:	2b20      	cmp	r3, #32
 800fe20:	d165      	bne.n	800feee <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800fe22:	68bb      	ldr	r3, [r7, #8]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d002      	beq.n	800fe2e <HAL_UART_Transmit_DMA+0x26>
 800fe28:	88fb      	ldrh	r3, [r7, #6]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d101      	bne.n	800fe32 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800fe2e:	2301      	movs	r3, #1
 800fe30:	e05e      	b.n	800fef0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe38:	2b01      	cmp	r3, #1
 800fe3a:	d101      	bne.n	800fe40 <HAL_UART_Transmit_DMA+0x38>
 800fe3c:	2302      	movs	r3, #2
 800fe3e:	e057      	b.n	800fef0 <HAL_UART_Transmit_DMA+0xe8>
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2201      	movs	r2, #1
 800fe44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800fe48:	68ba      	ldr	r2, [r7, #8]
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	88fa      	ldrh	r2, [r7, #6]
 800fe52:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	88fa      	ldrh	r2, [r7, #6]
 800fe58:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	2221      	movs	r2, #33	; 0x21
 800fe64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe6c:	4a22      	ldr	r2, [pc, #136]	; (800fef8 <HAL_UART_Transmit_DMA+0xf0>)
 800fe6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe74:	4a21      	ldr	r2, [pc, #132]	; (800fefc <HAL_UART_Transmit_DMA+0xf4>)
 800fe76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe7c:	4a20      	ldr	r2, [pc, #128]	; (800ff00 <HAL_UART_Transmit_DMA+0xf8>)
 800fe7e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe84:	2200      	movs	r2, #0
 800fe86:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800fe88:	f107 0308 	add.w	r3, r7, #8
 800fe8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800fe92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe94:	6819      	ldr	r1, [r3, #0]
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	3304      	adds	r3, #4
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	88fb      	ldrh	r3, [r7, #6]
 800fea0:	f7fa f98e 	bl	800a1c0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800feac:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	2200      	movs	r2, #0
 800feb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	3314      	adds	r3, #20
 800febc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800febe:	69bb      	ldr	r3, [r7, #24]
 800fec0:	e853 3f00 	ldrex	r3, [r3]
 800fec4:	617b      	str	r3, [r7, #20]
   return(result);
 800fec6:	697b      	ldr	r3, [r7, #20]
 800fec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fecc:	62bb      	str	r3, [r7, #40]	; 0x28
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	3314      	adds	r3, #20
 800fed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fed6:	627a      	str	r2, [r7, #36]	; 0x24
 800fed8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feda:	6a39      	ldr	r1, [r7, #32]
 800fedc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fede:	e841 2300 	strex	r3, r2, [r1]
 800fee2:	61fb      	str	r3, [r7, #28]
   return(result);
 800fee4:	69fb      	ldr	r3, [r7, #28]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d1e5      	bne.n	800feb6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800feea:	2300      	movs	r3, #0
 800feec:	e000      	b.n	800fef0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800feee:	2302      	movs	r3, #2
  }
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	3730      	adds	r7, #48	; 0x30
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	080104e9 	.word	0x080104e9
 800fefc:	08010583 	.word	0x08010583
 800ff00:	080106fb 	.word	0x080106fb

0800ff04 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	60f8      	str	r0, [r7, #12]
 800ff0c:	60b9      	str	r1, [r7, #8]
 800ff0e:	4613      	mov	r3, r2
 800ff10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ff18:	b2db      	uxtb	r3, r3
 800ff1a:	2b20      	cmp	r3, #32
 800ff1c:	d11d      	bne.n	800ff5a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d002      	beq.n	800ff2a <HAL_UART_Receive_DMA+0x26>
 800ff24:	88fb      	ldrh	r3, [r7, #6]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d101      	bne.n	800ff2e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	e016      	b.n	800ff5c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff34:	2b01      	cmp	r3, #1
 800ff36:	d101      	bne.n	800ff3c <HAL_UART_Receive_DMA+0x38>
 800ff38:	2302      	movs	r3, #2
 800ff3a:	e00f      	b.n	800ff5c <HAL_UART_Receive_DMA+0x58>
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	2201      	movs	r2, #1
 800ff40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	2200      	movs	r2, #0
 800ff48:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ff4a:	88fb      	ldrh	r3, [r7, #6]
 800ff4c:	461a      	mov	r2, r3
 800ff4e:	68b9      	ldr	r1, [r7, #8]
 800ff50:	68f8      	ldr	r0, [r7, #12]
 800ff52:	f000 fc1d 	bl	8010790 <UART_Start_Receive_DMA>
 800ff56:	4603      	mov	r3, r0
 800ff58:	e000      	b.n	800ff5c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ff5a:	2302      	movs	r3, #2
  }
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3710      	adds	r7, #16
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b0ba      	sub	sp, #232	; 0xe8
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	68db      	ldr	r3, [r3, #12]
 800ff7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	695b      	ldr	r3, [r3, #20]
 800ff86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ff90:	2300      	movs	r3, #0
 800ff92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ff96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff9a:	f003 030f 	and.w	r3, r3, #15
 800ff9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ffa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d10f      	bne.n	800ffca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ffaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ffae:	f003 0320 	and.w	r3, r3, #32
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d009      	beq.n	800ffca <HAL_UART_IRQHandler+0x66>
 800ffb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ffba:	f003 0320 	and.w	r3, r3, #32
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d003      	beq.n	800ffca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f000 fd89 	bl	8010ada <UART_Receive_IT>
      return;
 800ffc8:	e256      	b.n	8010478 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ffca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	f000 80de 	beq.w	8010190 <HAL_UART_IRQHandler+0x22c>
 800ffd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ffd8:	f003 0301 	and.w	r3, r3, #1
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d106      	bne.n	800ffee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ffe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ffe4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	f000 80d1 	beq.w	8010190 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ffee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fff2:	f003 0301 	and.w	r3, r3, #1
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d00b      	beq.n	8010012 <HAL_UART_IRQHandler+0xae>
 800fffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010002:	2b00      	cmp	r3, #0
 8010004:	d005      	beq.n	8010012 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801000a:	f043 0201 	orr.w	r2, r3, #1
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010016:	f003 0304 	and.w	r3, r3, #4
 801001a:	2b00      	cmp	r3, #0
 801001c:	d00b      	beq.n	8010036 <HAL_UART_IRQHandler+0xd2>
 801001e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010022:	f003 0301 	and.w	r3, r3, #1
 8010026:	2b00      	cmp	r3, #0
 8010028:	d005      	beq.n	8010036 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801002e:	f043 0202 	orr.w	r2, r3, #2
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801003a:	f003 0302 	and.w	r3, r3, #2
 801003e:	2b00      	cmp	r3, #0
 8010040:	d00b      	beq.n	801005a <HAL_UART_IRQHandler+0xf6>
 8010042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010046:	f003 0301 	and.w	r3, r3, #1
 801004a:	2b00      	cmp	r3, #0
 801004c:	d005      	beq.n	801005a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010052:	f043 0204 	orr.w	r2, r3, #4
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801005a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801005e:	f003 0308 	and.w	r3, r3, #8
 8010062:	2b00      	cmp	r3, #0
 8010064:	d011      	beq.n	801008a <HAL_UART_IRQHandler+0x126>
 8010066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801006a:	f003 0320 	and.w	r3, r3, #32
 801006e:	2b00      	cmp	r3, #0
 8010070:	d105      	bne.n	801007e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8010072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010076:	f003 0301 	and.w	r3, r3, #1
 801007a:	2b00      	cmp	r3, #0
 801007c:	d005      	beq.n	801008a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010082:	f043 0208 	orr.w	r2, r3, #8
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801008e:	2b00      	cmp	r3, #0
 8010090:	f000 81ed 	beq.w	801046e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010098:	f003 0320 	and.w	r3, r3, #32
 801009c:	2b00      	cmp	r3, #0
 801009e:	d008      	beq.n	80100b2 <HAL_UART_IRQHandler+0x14e>
 80100a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100a4:	f003 0320 	and.w	r3, r3, #32
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d002      	beq.n	80100b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f000 fd14 	bl	8010ada <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	695b      	ldr	r3, [r3, #20]
 80100b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100bc:	2b40      	cmp	r3, #64	; 0x40
 80100be:	bf0c      	ite	eq
 80100c0:	2301      	moveq	r3, #1
 80100c2:	2300      	movne	r3, #0
 80100c4:	b2db      	uxtb	r3, r3
 80100c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100ce:	f003 0308 	and.w	r3, r3, #8
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d103      	bne.n	80100de <HAL_UART_IRQHandler+0x17a>
 80100d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d04f      	beq.n	801017e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	f000 fc1c 	bl	801091c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	695b      	ldr	r3, [r3, #20]
 80100ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100ee:	2b40      	cmp	r3, #64	; 0x40
 80100f0:	d141      	bne.n	8010176 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	3314      	adds	r3, #20
 80100f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010100:	e853 3f00 	ldrex	r3, [r3]
 8010104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010108:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801010c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010110:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	3314      	adds	r3, #20
 801011a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801011e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010126:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801012a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801012e:	e841 2300 	strex	r3, r2, [r1]
 8010132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801013a:	2b00      	cmp	r3, #0
 801013c:	d1d9      	bne.n	80100f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010142:	2b00      	cmp	r3, #0
 8010144:	d013      	beq.n	801016e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801014a:	4a7d      	ldr	r2, [pc, #500]	; (8010340 <HAL_UART_IRQHandler+0x3dc>)
 801014c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010152:	4618      	mov	r0, r3
 8010154:	f7fa f8fc 	bl	800a350 <HAL_DMA_Abort_IT>
 8010158:	4603      	mov	r3, r0
 801015a:	2b00      	cmp	r3, #0
 801015c:	d016      	beq.n	801018c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010164:	687a      	ldr	r2, [r7, #4]
 8010166:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010168:	4610      	mov	r0, r2
 801016a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801016c:	e00e      	b.n	801018c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f000 f9a4 	bl	80104bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010174:	e00a      	b.n	801018c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f000 f9a0 	bl	80104bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801017c:	e006      	b.n	801018c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f000 f99c 	bl	80104bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2200      	movs	r2, #0
 8010188:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801018a:	e170      	b.n	801046e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801018c:	bf00      	nop
    return;
 801018e:	e16e      	b.n	801046e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010194:	2b01      	cmp	r3, #1
 8010196:	f040 814a 	bne.w	801042e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801019a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801019e:	f003 0310 	and.w	r3, r3, #16
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	f000 8143 	beq.w	801042e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80101a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80101ac:	f003 0310 	and.w	r3, r3, #16
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	f000 813c 	beq.w	801042e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80101b6:	2300      	movs	r3, #0
 80101b8:	60bb      	str	r3, [r7, #8]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	60bb      	str	r3, [r7, #8]
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	685b      	ldr	r3, [r3, #4]
 80101c8:	60bb      	str	r3, [r7, #8]
 80101ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	695b      	ldr	r3, [r3, #20]
 80101d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101d6:	2b40      	cmp	r3, #64	; 0x40
 80101d8:	f040 80b4 	bne.w	8010344 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	685b      	ldr	r3, [r3, #4]
 80101e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80101e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	f000 8140 	beq.w	8010472 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80101f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80101fa:	429a      	cmp	r2, r3
 80101fc:	f080 8139 	bcs.w	8010472 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010206:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801020c:	69db      	ldr	r3, [r3, #28]
 801020e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010212:	f000 8088 	beq.w	8010326 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	330c      	adds	r3, #12
 801021c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010220:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010224:	e853 3f00 	ldrex	r3, [r3]
 8010228:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801022c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010234:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	330c      	adds	r3, #12
 801023e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010242:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010246:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801024a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801024e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010252:	e841 2300 	strex	r3, r2, [r1]
 8010256:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801025a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801025e:	2b00      	cmp	r3, #0
 8010260:	d1d9      	bne.n	8010216 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	3314      	adds	r3, #20
 8010268:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801026a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801026c:	e853 3f00 	ldrex	r3, [r3]
 8010270:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010272:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010274:	f023 0301 	bic.w	r3, r3, #1
 8010278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	3314      	adds	r3, #20
 8010282:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010286:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801028a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801028c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801028e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010292:	e841 2300 	strex	r3, r2, [r1]
 8010296:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801029a:	2b00      	cmp	r3, #0
 801029c:	d1e1      	bne.n	8010262 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	3314      	adds	r3, #20
 80102a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102a8:	e853 3f00 	ldrex	r3, [r3]
 80102ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80102ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80102b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	3314      	adds	r3, #20
 80102be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80102c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80102c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80102c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80102ca:	e841 2300 	strex	r3, r2, [r1]
 80102ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80102d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d1e3      	bne.n	801029e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2220      	movs	r2, #32
 80102da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2200      	movs	r2, #0
 80102e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	330c      	adds	r3, #12
 80102ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102ee:	e853 3f00 	ldrex	r3, [r3]
 80102f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80102f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102f6:	f023 0310 	bic.w	r3, r3, #16
 80102fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	330c      	adds	r3, #12
 8010304:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010308:	65ba      	str	r2, [r7, #88]	; 0x58
 801030a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801030c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801030e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010310:	e841 2300 	strex	r3, r2, [r1]
 8010314:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010318:	2b00      	cmp	r3, #0
 801031a:	d1e3      	bne.n	80102e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010320:	4618      	mov	r0, r3
 8010322:	f7f9 ffa5 	bl	800a270 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801032e:	b29b      	uxth	r3, r3
 8010330:	1ad3      	subs	r3, r2, r3
 8010332:	b29b      	uxth	r3, r3
 8010334:	4619      	mov	r1, r3
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f000 f8ca 	bl	80104d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801033c:	e099      	b.n	8010472 <HAL_UART_IRQHandler+0x50e>
 801033e:	bf00      	nop
 8010340:	080109e3 	.word	0x080109e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801034c:	b29b      	uxth	r3, r3
 801034e:	1ad3      	subs	r3, r2, r3
 8010350:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010358:	b29b      	uxth	r3, r3
 801035a:	2b00      	cmp	r3, #0
 801035c:	f000 808b 	beq.w	8010476 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8010360:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010364:	2b00      	cmp	r3, #0
 8010366:	f000 8086 	beq.w	8010476 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	330c      	adds	r3, #12
 8010370:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010374:	e853 3f00 	ldrex	r3, [r3]
 8010378:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801037a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801037c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010380:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	330c      	adds	r3, #12
 801038a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801038e:	647a      	str	r2, [r7, #68]	; 0x44
 8010390:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010392:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010394:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010396:	e841 2300 	strex	r3, r2, [r1]
 801039a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801039c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d1e3      	bne.n	801036a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	3314      	adds	r3, #20
 80103a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ac:	e853 3f00 	ldrex	r3, [r3]
 80103b0:	623b      	str	r3, [r7, #32]
   return(result);
 80103b2:	6a3b      	ldr	r3, [r7, #32]
 80103b4:	f023 0301 	bic.w	r3, r3, #1
 80103b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	3314      	adds	r3, #20
 80103c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80103c6:	633a      	str	r2, [r7, #48]	; 0x30
 80103c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80103cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103ce:	e841 2300 	strex	r3, r2, [r1]
 80103d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80103d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d1e3      	bne.n	80103a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	2220      	movs	r2, #32
 80103de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2200      	movs	r2, #0
 80103e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	330c      	adds	r3, #12
 80103ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	e853 3f00 	ldrex	r3, [r3]
 80103f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	f023 0310 	bic.w	r3, r3, #16
 80103fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	330c      	adds	r3, #12
 8010408:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801040c:	61fa      	str	r2, [r7, #28]
 801040e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010410:	69b9      	ldr	r1, [r7, #24]
 8010412:	69fa      	ldr	r2, [r7, #28]
 8010414:	e841 2300 	strex	r3, r2, [r1]
 8010418:	617b      	str	r3, [r7, #20]
   return(result);
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d1e3      	bne.n	80103e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010420:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010424:	4619      	mov	r1, r3
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f000 f852 	bl	80104d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801042c:	e023      	b.n	8010476 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801042e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010436:	2b00      	cmp	r3, #0
 8010438:	d009      	beq.n	801044e <HAL_UART_IRQHandler+0x4ea>
 801043a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801043e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010442:	2b00      	cmp	r3, #0
 8010444:	d003      	beq.n	801044e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8010446:	6878      	ldr	r0, [r7, #4]
 8010448:	f000 fadf 	bl	8010a0a <UART_Transmit_IT>
    return;
 801044c:	e014      	b.n	8010478 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801044e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010456:	2b00      	cmp	r3, #0
 8010458:	d00e      	beq.n	8010478 <HAL_UART_IRQHandler+0x514>
 801045a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801045e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010462:	2b00      	cmp	r3, #0
 8010464:	d008      	beq.n	8010478 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f000 fb1f 	bl	8010aaa <UART_EndTransmit_IT>
    return;
 801046c:	e004      	b.n	8010478 <HAL_UART_IRQHandler+0x514>
    return;
 801046e:	bf00      	nop
 8010470:	e002      	b.n	8010478 <HAL_UART_IRQHandler+0x514>
      return;
 8010472:	bf00      	nop
 8010474:	e000      	b.n	8010478 <HAL_UART_IRQHandler+0x514>
      return;
 8010476:	bf00      	nop
  }
}
 8010478:	37e8      	adds	r7, #232	; 0xe8
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
 801047e:	bf00      	nop

08010480 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010480:	b480      	push	{r7}
 8010482:	b083      	sub	sp, #12
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010488:	bf00      	nop
 801048a:	370c      	adds	r7, #12
 801048c:	46bd      	mov	sp, r7
 801048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010492:	4770      	bx	lr

08010494 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010494:	b480      	push	{r7}
 8010496:	b083      	sub	sp, #12
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 801049c:	bf00      	nop
 801049e:	370c      	adds	r7, #12
 80104a0:	46bd      	mov	sp, r7
 80104a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a6:	4770      	bx	lr

080104a8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80104a8:	b480      	push	{r7}
 80104aa:	b083      	sub	sp, #12
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80104b0:	bf00      	nop
 80104b2:	370c      	adds	r7, #12
 80104b4:	46bd      	mov	sp, r7
 80104b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ba:	4770      	bx	lr

080104bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80104bc:	b480      	push	{r7}
 80104be:	b083      	sub	sp, #12
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80104c4:	bf00      	nop
 80104c6:	370c      	adds	r7, #12
 80104c8:	46bd      	mov	sp, r7
 80104ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ce:	4770      	bx	lr

080104d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80104d0:	b480      	push	{r7}
 80104d2:	b083      	sub	sp, #12
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
 80104d8:	460b      	mov	r3, r1
 80104da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80104dc:	bf00      	nop
 80104de:	370c      	adds	r7, #12
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b090      	sub	sp, #64	; 0x40
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010500:	2b00      	cmp	r3, #0
 8010502:	d137      	bne.n	8010574 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8010504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010506:	2200      	movs	r2, #0
 8010508:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801050a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	3314      	adds	r3, #20
 8010510:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010514:	e853 3f00 	ldrex	r3, [r3]
 8010518:	623b      	str	r3, [r7, #32]
   return(result);
 801051a:	6a3b      	ldr	r3, [r7, #32]
 801051c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010520:	63bb      	str	r3, [r7, #56]	; 0x38
 8010522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	3314      	adds	r3, #20
 8010528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801052a:	633a      	str	r2, [r7, #48]	; 0x30
 801052c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801052e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010532:	e841 2300 	strex	r3, r2, [r1]
 8010536:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801053a:	2b00      	cmp	r3, #0
 801053c:	d1e5      	bne.n	801050a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801053e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	330c      	adds	r3, #12
 8010544:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	e853 3f00 	ldrex	r3, [r3]
 801054c:	60fb      	str	r3, [r7, #12]
   return(result);
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010554:	637b      	str	r3, [r7, #52]	; 0x34
 8010556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	330c      	adds	r3, #12
 801055c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801055e:	61fa      	str	r2, [r7, #28]
 8010560:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010562:	69b9      	ldr	r1, [r7, #24]
 8010564:	69fa      	ldr	r2, [r7, #28]
 8010566:	e841 2300 	strex	r3, r2, [r1]
 801056a:	617b      	str	r3, [r7, #20]
   return(result);
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d1e5      	bne.n	801053e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010572:	e002      	b.n	801057a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8010574:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010576:	f7ff ff83 	bl	8010480 <HAL_UART_TxCpltCallback>
}
 801057a:	bf00      	nop
 801057c:	3740      	adds	r7, #64	; 0x40
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}

08010582 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010582:	b580      	push	{r7, lr}
 8010584:	b084      	sub	sp, #16
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801058e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010590:	68f8      	ldr	r0, [r7, #12]
 8010592:	f7ff ff7f 	bl	8010494 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010596:	bf00      	nop
 8010598:	3710      	adds	r7, #16
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}

0801059e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801059e:	b580      	push	{r7, lr}
 80105a0:	b09c      	sub	sp, #112	; 0x70
 80105a2:	af00      	add	r7, sp, #0
 80105a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d172      	bne.n	80106a0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80105ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105bc:	2200      	movs	r2, #0
 80105be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	330c      	adds	r3, #12
 80105c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105ca:	e853 3f00 	ldrex	r3, [r3]
 80105ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80105d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80105d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80105d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	330c      	adds	r3, #12
 80105de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80105e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80105e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80105e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80105e8:	e841 2300 	strex	r3, r2, [r1]
 80105ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80105ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d1e5      	bne.n	80105c0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	3314      	adds	r3, #20
 80105fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105fe:	e853 3f00 	ldrex	r3, [r3]
 8010602:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010606:	f023 0301 	bic.w	r3, r3, #1
 801060a:	667b      	str	r3, [r7, #100]	; 0x64
 801060c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	3314      	adds	r3, #20
 8010612:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010614:	647a      	str	r2, [r7, #68]	; 0x44
 8010616:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010618:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801061a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801061c:	e841 2300 	strex	r3, r2, [r1]
 8010620:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010624:	2b00      	cmp	r3, #0
 8010626:	d1e5      	bne.n	80105f4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	3314      	adds	r3, #20
 801062e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010632:	e853 3f00 	ldrex	r3, [r3]
 8010636:	623b      	str	r3, [r7, #32]
   return(result);
 8010638:	6a3b      	ldr	r3, [r7, #32]
 801063a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801063e:	663b      	str	r3, [r7, #96]	; 0x60
 8010640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	3314      	adds	r3, #20
 8010646:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010648:	633a      	str	r2, [r7, #48]	; 0x30
 801064a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801064c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801064e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010650:	e841 2300 	strex	r3, r2, [r1]
 8010654:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010658:	2b00      	cmp	r3, #0
 801065a:	d1e5      	bne.n	8010628 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801065c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801065e:	2220      	movs	r2, #32
 8010660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010668:	2b01      	cmp	r3, #1
 801066a:	d119      	bne.n	80106a0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801066c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	330c      	adds	r3, #12
 8010672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	e853 3f00 	ldrex	r3, [r3]
 801067a:	60fb      	str	r3, [r7, #12]
   return(result);
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	f023 0310 	bic.w	r3, r3, #16
 8010682:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	330c      	adds	r3, #12
 801068a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801068c:	61fa      	str	r2, [r7, #28]
 801068e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010690:	69b9      	ldr	r1, [r7, #24]
 8010692:	69fa      	ldr	r2, [r7, #28]
 8010694:	e841 2300 	strex	r3, r2, [r1]
 8010698:	617b      	str	r3, [r7, #20]
   return(result);
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d1e5      	bne.n	801066c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106a4:	2b01      	cmp	r3, #1
 80106a6:	d106      	bne.n	80106b6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80106a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80106ac:	4619      	mov	r1, r3
 80106ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80106b0:	f7ff ff0e 	bl	80104d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80106b4:	e002      	b.n	80106bc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80106b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80106b8:	f7f1 fed4 	bl	8002464 <HAL_UART_RxCpltCallback>
}
 80106bc:	bf00      	nop
 80106be:	3770      	adds	r7, #112	; 0x70
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}

080106c4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b084      	sub	sp, #16
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106d0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106d6:	2b01      	cmp	r3, #1
 80106d8:	d108      	bne.n	80106ec <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80106de:	085b      	lsrs	r3, r3, #1
 80106e0:	b29b      	uxth	r3, r3
 80106e2:	4619      	mov	r1, r3
 80106e4:	68f8      	ldr	r0, [r7, #12]
 80106e6:	f7ff fef3 	bl	80104d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80106ea:	e002      	b.n	80106f2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80106ec:	68f8      	ldr	r0, [r7, #12]
 80106ee:	f7ff fedb 	bl	80104a8 <HAL_UART_RxHalfCpltCallback>
}
 80106f2:	bf00      	nop
 80106f4:	3710      	adds	r7, #16
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}

080106fa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80106fa:	b580      	push	{r7, lr}
 80106fc:	b084      	sub	sp, #16
 80106fe:	af00      	add	r7, sp, #0
 8010700:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010702:	2300      	movs	r3, #0
 8010704:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801070a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	695b      	ldr	r3, [r3, #20]
 8010712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010716:	2b80      	cmp	r3, #128	; 0x80
 8010718:	bf0c      	ite	eq
 801071a:	2301      	moveq	r3, #1
 801071c:	2300      	movne	r3, #0
 801071e:	b2db      	uxtb	r3, r3
 8010720:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010728:	b2db      	uxtb	r3, r3
 801072a:	2b21      	cmp	r3, #33	; 0x21
 801072c:	d108      	bne.n	8010740 <UART_DMAError+0x46>
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d005      	beq.n	8010740 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	2200      	movs	r2, #0
 8010738:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801073a:	68b8      	ldr	r0, [r7, #8]
 801073c:	f000 f8c6 	bl	80108cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	695b      	ldr	r3, [r3, #20]
 8010746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801074a:	2b40      	cmp	r3, #64	; 0x40
 801074c:	bf0c      	ite	eq
 801074e:	2301      	moveq	r3, #1
 8010750:	2300      	movne	r3, #0
 8010752:	b2db      	uxtb	r3, r3
 8010754:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801075c:	b2db      	uxtb	r3, r3
 801075e:	2b22      	cmp	r3, #34	; 0x22
 8010760:	d108      	bne.n	8010774 <UART_DMAError+0x7a>
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d005      	beq.n	8010774 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010768:	68bb      	ldr	r3, [r7, #8]
 801076a:	2200      	movs	r2, #0
 801076c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801076e:	68b8      	ldr	r0, [r7, #8]
 8010770:	f000 f8d4 	bl	801091c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010778:	f043 0210 	orr.w	r2, r3, #16
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010780:	68b8      	ldr	r0, [r7, #8]
 8010782:	f7ff fe9b 	bl	80104bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010786:	bf00      	nop
 8010788:	3710      	adds	r7, #16
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
	...

08010790 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b098      	sub	sp, #96	; 0x60
 8010794:	af00      	add	r7, sp, #0
 8010796:	60f8      	str	r0, [r7, #12]
 8010798:	60b9      	str	r1, [r7, #8]
 801079a:	4613      	mov	r3, r2
 801079c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801079e:	68ba      	ldr	r2, [r7, #8]
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	88fa      	ldrh	r2, [r7, #6]
 80107a8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	2200      	movs	r2, #0
 80107ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	2222      	movs	r2, #34	; 0x22
 80107b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107bc:	4a40      	ldr	r2, [pc, #256]	; (80108c0 <UART_Start_Receive_DMA+0x130>)
 80107be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107c4:	4a3f      	ldr	r2, [pc, #252]	; (80108c4 <UART_Start_Receive_DMA+0x134>)
 80107c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107cc:	4a3e      	ldr	r2, [pc, #248]	; (80108c8 <UART_Start_Receive_DMA+0x138>)
 80107ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107d4:	2200      	movs	r2, #0
 80107d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80107d8:	f107 0308 	add.w	r3, r7, #8
 80107dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	3304      	adds	r3, #4
 80107e8:	4619      	mov	r1, r3
 80107ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107ec:	681a      	ldr	r2, [r3, #0]
 80107ee:	88fb      	ldrh	r3, [r7, #6]
 80107f0:	f7f9 fce6 	bl	800a1c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80107f4:	2300      	movs	r3, #0
 80107f6:	613b      	str	r3, [r7, #16]
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	613b      	str	r3, [r7, #16]
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	685b      	ldr	r3, [r3, #4]
 8010806:	613b      	str	r3, [r7, #16]
 8010808:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	2200      	movs	r2, #0
 801080e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	691b      	ldr	r3, [r3, #16]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d019      	beq.n	801084e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	330c      	adds	r3, #12
 8010820:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010824:	e853 3f00 	ldrex	r3, [r3]
 8010828:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801082a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801082c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010830:	65bb      	str	r3, [r7, #88]	; 0x58
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	330c      	adds	r3, #12
 8010838:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801083a:	64fa      	str	r2, [r7, #76]	; 0x4c
 801083c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801083e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010840:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010842:	e841 2300 	strex	r3, r2, [r1]
 8010846:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801084a:	2b00      	cmp	r3, #0
 801084c:	d1e5      	bne.n	801081a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	3314      	adds	r3, #20
 8010854:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010858:	e853 3f00 	ldrex	r3, [r3]
 801085c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801085e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010860:	f043 0301 	orr.w	r3, r3, #1
 8010864:	657b      	str	r3, [r7, #84]	; 0x54
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	3314      	adds	r3, #20
 801086c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801086e:	63ba      	str	r2, [r7, #56]	; 0x38
 8010870:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010872:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010876:	e841 2300 	strex	r3, r2, [r1]
 801087a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801087c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801087e:	2b00      	cmp	r3, #0
 8010880:	d1e5      	bne.n	801084e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	3314      	adds	r3, #20
 8010888:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801088a:	69bb      	ldr	r3, [r7, #24]
 801088c:	e853 3f00 	ldrex	r3, [r3]
 8010890:	617b      	str	r3, [r7, #20]
   return(result);
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010898:	653b      	str	r3, [r7, #80]	; 0x50
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	3314      	adds	r3, #20
 80108a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80108a2:	627a      	str	r2, [r7, #36]	; 0x24
 80108a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108a6:	6a39      	ldr	r1, [r7, #32]
 80108a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108aa:	e841 2300 	strex	r3, r2, [r1]
 80108ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80108b0:	69fb      	ldr	r3, [r7, #28]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d1e5      	bne.n	8010882 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80108b6:	2300      	movs	r3, #0
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	3760      	adds	r7, #96	; 0x60
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}
 80108c0:	0801059f 	.word	0x0801059f
 80108c4:	080106c5 	.word	0x080106c5
 80108c8:	080106fb 	.word	0x080106fb

080108cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80108cc:	b480      	push	{r7}
 80108ce:	b089      	sub	sp, #36	; 0x24
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	330c      	adds	r3, #12
 80108da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	e853 3f00 	ldrex	r3, [r3]
 80108e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80108ea:	61fb      	str	r3, [r7, #28]
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	330c      	adds	r3, #12
 80108f2:	69fa      	ldr	r2, [r7, #28]
 80108f4:	61ba      	str	r2, [r7, #24]
 80108f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108f8:	6979      	ldr	r1, [r7, #20]
 80108fa:	69ba      	ldr	r2, [r7, #24]
 80108fc:	e841 2300 	strex	r3, r2, [r1]
 8010900:	613b      	str	r3, [r7, #16]
   return(result);
 8010902:	693b      	ldr	r3, [r7, #16]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d1e5      	bne.n	80108d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2220      	movs	r2, #32
 801090c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8010910:	bf00      	nop
 8010912:	3724      	adds	r7, #36	; 0x24
 8010914:	46bd      	mov	sp, r7
 8010916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091a:	4770      	bx	lr

0801091c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801091c:	b480      	push	{r7}
 801091e:	b095      	sub	sp, #84	; 0x54
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	330c      	adds	r3, #12
 801092a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801092c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801092e:	e853 3f00 	ldrex	r3, [r3]
 8010932:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010936:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801093a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	330c      	adds	r3, #12
 8010942:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010944:	643a      	str	r2, [r7, #64]	; 0x40
 8010946:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010948:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801094a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801094c:	e841 2300 	strex	r3, r2, [r1]
 8010950:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010954:	2b00      	cmp	r3, #0
 8010956:	d1e5      	bne.n	8010924 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	3314      	adds	r3, #20
 801095e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010960:	6a3b      	ldr	r3, [r7, #32]
 8010962:	e853 3f00 	ldrex	r3, [r3]
 8010966:	61fb      	str	r3, [r7, #28]
   return(result);
 8010968:	69fb      	ldr	r3, [r7, #28]
 801096a:	f023 0301 	bic.w	r3, r3, #1
 801096e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	3314      	adds	r3, #20
 8010976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010978:	62fa      	str	r2, [r7, #44]	; 0x2c
 801097a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801097c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801097e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010980:	e841 2300 	strex	r3, r2, [r1]
 8010984:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010988:	2b00      	cmp	r3, #0
 801098a:	d1e5      	bne.n	8010958 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010990:	2b01      	cmp	r3, #1
 8010992:	d119      	bne.n	80109c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	330c      	adds	r3, #12
 801099a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	e853 3f00 	ldrex	r3, [r3]
 80109a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	f023 0310 	bic.w	r3, r3, #16
 80109aa:	647b      	str	r3, [r7, #68]	; 0x44
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	330c      	adds	r3, #12
 80109b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80109b4:	61ba      	str	r2, [r7, #24]
 80109b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109b8:	6979      	ldr	r1, [r7, #20]
 80109ba:	69ba      	ldr	r2, [r7, #24]
 80109bc:	e841 2300 	strex	r3, r2, [r1]
 80109c0:	613b      	str	r3, [r7, #16]
   return(result);
 80109c2:	693b      	ldr	r3, [r7, #16]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d1e5      	bne.n	8010994 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2220      	movs	r2, #32
 80109cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2200      	movs	r2, #0
 80109d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80109d6:	bf00      	nop
 80109d8:	3754      	adds	r7, #84	; 0x54
 80109da:	46bd      	mov	sp, r7
 80109dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e0:	4770      	bx	lr

080109e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80109e2:	b580      	push	{r7, lr}
 80109e4:	b084      	sub	sp, #16
 80109e6:	af00      	add	r7, sp, #0
 80109e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	2200      	movs	r2, #0
 80109f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	2200      	movs	r2, #0
 80109fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80109fc:	68f8      	ldr	r0, [r7, #12]
 80109fe:	f7ff fd5d 	bl	80104bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a02:	bf00      	nop
 8010a04:	3710      	adds	r7, #16
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}

08010a0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010a0a:	b480      	push	{r7}
 8010a0c:	b085      	sub	sp, #20
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a18:	b2db      	uxtb	r3, r3
 8010a1a:	2b21      	cmp	r3, #33	; 0x21
 8010a1c:	d13e      	bne.n	8010a9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	689b      	ldr	r3, [r3, #8]
 8010a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a26:	d114      	bne.n	8010a52 <UART_Transmit_IT+0x48>
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	691b      	ldr	r3, [r3, #16]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d110      	bne.n	8010a52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6a1b      	ldr	r3, [r3, #32]
 8010a34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	881b      	ldrh	r3, [r3, #0]
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010a44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6a1b      	ldr	r3, [r3, #32]
 8010a4a:	1c9a      	adds	r2, r3, #2
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	621a      	str	r2, [r3, #32]
 8010a50:	e008      	b.n	8010a64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	6a1b      	ldr	r3, [r3, #32]
 8010a56:	1c59      	adds	r1, r3, #1
 8010a58:	687a      	ldr	r2, [r7, #4]
 8010a5a:	6211      	str	r1, [r2, #32]
 8010a5c:	781a      	ldrb	r2, [r3, #0]
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010a68:	b29b      	uxth	r3, r3
 8010a6a:	3b01      	subs	r3, #1
 8010a6c:	b29b      	uxth	r3, r3
 8010a6e:	687a      	ldr	r2, [r7, #4]
 8010a70:	4619      	mov	r1, r3
 8010a72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d10f      	bne.n	8010a98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	68da      	ldr	r2, [r3, #12]
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010a86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	68da      	ldr	r2, [r3, #12]
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010a96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010a98:	2300      	movs	r3, #0
 8010a9a:	e000      	b.n	8010a9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010a9c:	2302      	movs	r3, #2
  }
}
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	3714      	adds	r7, #20
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa8:	4770      	bx	lr

08010aaa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010aaa:	b580      	push	{r7, lr}
 8010aac:	b082      	sub	sp, #8
 8010aae:	af00      	add	r7, sp, #0
 8010ab0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	68da      	ldr	r2, [r3, #12]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010ac0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2220      	movs	r2, #32
 8010ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f7ff fcd8 	bl	8010480 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010ad0:	2300      	movs	r3, #0
}
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3708      	adds	r7, #8
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}

08010ada <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010ada:	b580      	push	{r7, lr}
 8010adc:	b08c      	sub	sp, #48	; 0x30
 8010ade:	af00      	add	r7, sp, #0
 8010ae0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010ae8:	b2db      	uxtb	r3, r3
 8010aea:	2b22      	cmp	r3, #34	; 0x22
 8010aec:	f040 80ab 	bne.w	8010c46 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	689b      	ldr	r3, [r3, #8]
 8010af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010af8:	d117      	bne.n	8010b2a <UART_Receive_IT+0x50>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	691b      	ldr	r3, [r3, #16]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d113      	bne.n	8010b2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8010b02:	2300      	movs	r3, #0
 8010b04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	685b      	ldr	r3, [r3, #4]
 8010b12:	b29b      	uxth	r3, r3
 8010b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b18:	b29a      	uxth	r2, r3
 8010b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b22:	1c9a      	adds	r2, r3, #2
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	629a      	str	r2, [r3, #40]	; 0x28
 8010b28:	e026      	b.n	8010b78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8010b30:	2300      	movs	r3, #0
 8010b32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	689b      	ldr	r3, [r3, #8]
 8010b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b3c:	d007      	beq.n	8010b4e <UART_Receive_IT+0x74>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	689b      	ldr	r3, [r3, #8]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d10a      	bne.n	8010b5c <UART_Receive_IT+0x82>
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	691b      	ldr	r3, [r3, #16]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d106      	bne.n	8010b5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	b2da      	uxtb	r2, r3
 8010b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b58:	701a      	strb	r2, [r3, #0]
 8010b5a:	e008      	b.n	8010b6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	685b      	ldr	r3, [r3, #4]
 8010b62:	b2db      	uxtb	r3, r3
 8010b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b68:	b2da      	uxtb	r2, r3
 8010b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b72:	1c5a      	adds	r2, r3, #1
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010b7c:	b29b      	uxth	r3, r3
 8010b7e:	3b01      	subs	r3, #1
 8010b80:	b29b      	uxth	r3, r3
 8010b82:	687a      	ldr	r2, [r7, #4]
 8010b84:	4619      	mov	r1, r3
 8010b86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d15a      	bne.n	8010c42 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	68da      	ldr	r2, [r3, #12]
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	f022 0220 	bic.w	r2, r2, #32
 8010b9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	68da      	ldr	r2, [r3, #12]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010baa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	695a      	ldr	r2, [r3, #20]
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f022 0201 	bic.w	r2, r2, #1
 8010bba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2220      	movs	r2, #32
 8010bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bc8:	2b01      	cmp	r3, #1
 8010bca:	d135      	bne.n	8010c38 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	330c      	adds	r3, #12
 8010bd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	e853 3f00 	ldrex	r3, [r3]
 8010be0:	613b      	str	r3, [r7, #16]
   return(result);
 8010be2:	693b      	ldr	r3, [r7, #16]
 8010be4:	f023 0310 	bic.w	r3, r3, #16
 8010be8:	627b      	str	r3, [r7, #36]	; 0x24
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	330c      	adds	r3, #12
 8010bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bf2:	623a      	str	r2, [r7, #32]
 8010bf4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bf6:	69f9      	ldr	r1, [r7, #28]
 8010bf8:	6a3a      	ldr	r2, [r7, #32]
 8010bfa:	e841 2300 	strex	r3, r2, [r1]
 8010bfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8010c00:	69bb      	ldr	r3, [r7, #24]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d1e5      	bne.n	8010bd2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	f003 0310 	and.w	r3, r3, #16
 8010c10:	2b10      	cmp	r3, #16
 8010c12:	d10a      	bne.n	8010c2a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010c14:	2300      	movs	r3, #0
 8010c16:	60fb      	str	r3, [r7, #12]
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	60fb      	str	r3, [r7, #12]
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	685b      	ldr	r3, [r3, #4]
 8010c26:	60fb      	str	r3, [r7, #12]
 8010c28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010c2e:	4619      	mov	r1, r3
 8010c30:	6878      	ldr	r0, [r7, #4]
 8010c32:	f7ff fc4d 	bl	80104d0 <HAL_UARTEx_RxEventCallback>
 8010c36:	e002      	b.n	8010c3e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010c38:	6878      	ldr	r0, [r7, #4]
 8010c3a:	f7f1 fc13 	bl	8002464 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	e002      	b.n	8010c48 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8010c42:	2300      	movs	r3, #0
 8010c44:	e000      	b.n	8010c48 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8010c46:	2302      	movs	r3, #2
  }
}
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3730      	adds	r7, #48	; 0x30
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}

08010c50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010c54:	b0c0      	sub	sp, #256	; 0x100
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	691b      	ldr	r3, [r3, #16]
 8010c64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8010c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010c6c:	68d9      	ldr	r1, [r3, #12]
 8010c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010c72:	681a      	ldr	r2, [r3, #0]
 8010c74:	ea40 0301 	orr.w	r3, r0, r1
 8010c78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010c7e:	689a      	ldr	r2, [r3, #8]
 8010c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010c84:	691b      	ldr	r3, [r3, #16]
 8010c86:	431a      	orrs	r2, r3
 8010c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010c8c:	695b      	ldr	r3, [r3, #20]
 8010c8e:	431a      	orrs	r2, r3
 8010c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010c94:	69db      	ldr	r3, [r3, #28]
 8010c96:	4313      	orrs	r3, r2
 8010c98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8010c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	68db      	ldr	r3, [r3, #12]
 8010ca4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8010ca8:	f021 010c 	bic.w	r1, r1, #12
 8010cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010cb0:	681a      	ldr	r2, [r3, #0]
 8010cb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010cb6:	430b      	orrs	r3, r1
 8010cb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	695b      	ldr	r3, [r3, #20]
 8010cc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8010cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010cca:	6999      	ldr	r1, [r3, #24]
 8010ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010cd0:	681a      	ldr	r2, [r3, #0]
 8010cd2:	ea40 0301 	orr.w	r3, r0, r1
 8010cd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010cdc:	681a      	ldr	r2, [r3, #0]
 8010cde:	4b8f      	ldr	r3, [pc, #572]	; (8010f1c <UART_SetConfig+0x2cc>)
 8010ce0:	429a      	cmp	r2, r3
 8010ce2:	d005      	beq.n	8010cf0 <UART_SetConfig+0xa0>
 8010ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010ce8:	681a      	ldr	r2, [r3, #0]
 8010cea:	4b8d      	ldr	r3, [pc, #564]	; (8010f20 <UART_SetConfig+0x2d0>)
 8010cec:	429a      	cmp	r2, r3
 8010cee:	d104      	bne.n	8010cfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010cf0:	f7fc f876 	bl	800cde0 <HAL_RCC_GetPCLK2Freq>
 8010cf4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8010cf8:	e003      	b.n	8010d02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010cfa:	f7fc f85d 	bl	800cdb8 <HAL_RCC_GetPCLK1Freq>
 8010cfe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d06:	69db      	ldr	r3, [r3, #28]
 8010d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d0c:	f040 810c 	bne.w	8010f28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010d14:	2200      	movs	r2, #0
 8010d16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010d1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8010d1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8010d22:	4622      	mov	r2, r4
 8010d24:	462b      	mov	r3, r5
 8010d26:	1891      	adds	r1, r2, r2
 8010d28:	65b9      	str	r1, [r7, #88]	; 0x58
 8010d2a:	415b      	adcs	r3, r3
 8010d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010d2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8010d32:	4621      	mov	r1, r4
 8010d34:	eb12 0801 	adds.w	r8, r2, r1
 8010d38:	4629      	mov	r1, r5
 8010d3a:	eb43 0901 	adc.w	r9, r3, r1
 8010d3e:	f04f 0200 	mov.w	r2, #0
 8010d42:	f04f 0300 	mov.w	r3, #0
 8010d46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010d4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010d4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010d52:	4690      	mov	r8, r2
 8010d54:	4699      	mov	r9, r3
 8010d56:	4623      	mov	r3, r4
 8010d58:	eb18 0303 	adds.w	r3, r8, r3
 8010d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010d60:	462b      	mov	r3, r5
 8010d62:	eb49 0303 	adc.w	r3, r9, r3
 8010d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d6e:	685b      	ldr	r3, [r3, #4]
 8010d70:	2200      	movs	r2, #0
 8010d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010d76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8010d7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8010d7e:	460b      	mov	r3, r1
 8010d80:	18db      	adds	r3, r3, r3
 8010d82:	653b      	str	r3, [r7, #80]	; 0x50
 8010d84:	4613      	mov	r3, r2
 8010d86:	eb42 0303 	adc.w	r3, r2, r3
 8010d8a:	657b      	str	r3, [r7, #84]	; 0x54
 8010d8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010d90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8010d94:	f7ef ff78 	bl	8000c88 <__aeabi_uldivmod>
 8010d98:	4602      	mov	r2, r0
 8010d9a:	460b      	mov	r3, r1
 8010d9c:	4b61      	ldr	r3, [pc, #388]	; (8010f24 <UART_SetConfig+0x2d4>)
 8010d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8010da2:	095b      	lsrs	r3, r3, #5
 8010da4:	011c      	lsls	r4, r3, #4
 8010da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010daa:	2200      	movs	r2, #0
 8010dac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010db0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8010db4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8010db8:	4642      	mov	r2, r8
 8010dba:	464b      	mov	r3, r9
 8010dbc:	1891      	adds	r1, r2, r2
 8010dbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8010dc0:	415b      	adcs	r3, r3
 8010dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010dc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8010dc8:	4641      	mov	r1, r8
 8010dca:	eb12 0a01 	adds.w	sl, r2, r1
 8010dce:	4649      	mov	r1, r9
 8010dd0:	eb43 0b01 	adc.w	fp, r3, r1
 8010dd4:	f04f 0200 	mov.w	r2, #0
 8010dd8:	f04f 0300 	mov.w	r3, #0
 8010ddc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010de0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010de4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010de8:	4692      	mov	sl, r2
 8010dea:	469b      	mov	fp, r3
 8010dec:	4643      	mov	r3, r8
 8010dee:	eb1a 0303 	adds.w	r3, sl, r3
 8010df2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010df6:	464b      	mov	r3, r9
 8010df8:	eb4b 0303 	adc.w	r3, fp, r3
 8010dfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010e04:	685b      	ldr	r3, [r3, #4]
 8010e06:	2200      	movs	r2, #0
 8010e08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010e0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8010e10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8010e14:	460b      	mov	r3, r1
 8010e16:	18db      	adds	r3, r3, r3
 8010e18:	643b      	str	r3, [r7, #64]	; 0x40
 8010e1a:	4613      	mov	r3, r2
 8010e1c:	eb42 0303 	adc.w	r3, r2, r3
 8010e20:	647b      	str	r3, [r7, #68]	; 0x44
 8010e22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010e26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8010e2a:	f7ef ff2d 	bl	8000c88 <__aeabi_uldivmod>
 8010e2e:	4602      	mov	r2, r0
 8010e30:	460b      	mov	r3, r1
 8010e32:	4611      	mov	r1, r2
 8010e34:	4b3b      	ldr	r3, [pc, #236]	; (8010f24 <UART_SetConfig+0x2d4>)
 8010e36:	fba3 2301 	umull	r2, r3, r3, r1
 8010e3a:	095b      	lsrs	r3, r3, #5
 8010e3c:	2264      	movs	r2, #100	; 0x64
 8010e3e:	fb02 f303 	mul.w	r3, r2, r3
 8010e42:	1acb      	subs	r3, r1, r3
 8010e44:	00db      	lsls	r3, r3, #3
 8010e46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8010e4a:	4b36      	ldr	r3, [pc, #216]	; (8010f24 <UART_SetConfig+0x2d4>)
 8010e4c:	fba3 2302 	umull	r2, r3, r3, r2
 8010e50:	095b      	lsrs	r3, r3, #5
 8010e52:	005b      	lsls	r3, r3, #1
 8010e54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010e58:	441c      	add	r4, r3
 8010e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010e5e:	2200      	movs	r2, #0
 8010e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010e64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010e68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8010e6c:	4642      	mov	r2, r8
 8010e6e:	464b      	mov	r3, r9
 8010e70:	1891      	adds	r1, r2, r2
 8010e72:	63b9      	str	r1, [r7, #56]	; 0x38
 8010e74:	415b      	adcs	r3, r3
 8010e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010e7c:	4641      	mov	r1, r8
 8010e7e:	1851      	adds	r1, r2, r1
 8010e80:	6339      	str	r1, [r7, #48]	; 0x30
 8010e82:	4649      	mov	r1, r9
 8010e84:	414b      	adcs	r3, r1
 8010e86:	637b      	str	r3, [r7, #52]	; 0x34
 8010e88:	f04f 0200 	mov.w	r2, #0
 8010e8c:	f04f 0300 	mov.w	r3, #0
 8010e90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8010e94:	4659      	mov	r1, fp
 8010e96:	00cb      	lsls	r3, r1, #3
 8010e98:	4651      	mov	r1, sl
 8010e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010e9e:	4651      	mov	r1, sl
 8010ea0:	00ca      	lsls	r2, r1, #3
 8010ea2:	4610      	mov	r0, r2
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	4642      	mov	r2, r8
 8010eaa:	189b      	adds	r3, r3, r2
 8010eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010eb0:	464b      	mov	r3, r9
 8010eb2:	460a      	mov	r2, r1
 8010eb4:	eb42 0303 	adc.w	r3, r2, r3
 8010eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010ec0:	685b      	ldr	r3, [r3, #4]
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010ec8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8010ecc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8010ed0:	460b      	mov	r3, r1
 8010ed2:	18db      	adds	r3, r3, r3
 8010ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8010ed6:	4613      	mov	r3, r2
 8010ed8:	eb42 0303 	adc.w	r3, r2, r3
 8010edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ede:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010ee2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8010ee6:	f7ef fecf 	bl	8000c88 <__aeabi_uldivmod>
 8010eea:	4602      	mov	r2, r0
 8010eec:	460b      	mov	r3, r1
 8010eee:	4b0d      	ldr	r3, [pc, #52]	; (8010f24 <UART_SetConfig+0x2d4>)
 8010ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8010ef4:	095b      	lsrs	r3, r3, #5
 8010ef6:	2164      	movs	r1, #100	; 0x64
 8010ef8:	fb01 f303 	mul.w	r3, r1, r3
 8010efc:	1ad3      	subs	r3, r2, r3
 8010efe:	00db      	lsls	r3, r3, #3
 8010f00:	3332      	adds	r3, #50	; 0x32
 8010f02:	4a08      	ldr	r2, [pc, #32]	; (8010f24 <UART_SetConfig+0x2d4>)
 8010f04:	fba2 2303 	umull	r2, r3, r2, r3
 8010f08:	095b      	lsrs	r3, r3, #5
 8010f0a:	f003 0207 	and.w	r2, r3, #7
 8010f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	4422      	add	r2, r4
 8010f16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010f18:	e105      	b.n	8011126 <UART_SetConfig+0x4d6>
 8010f1a:	bf00      	nop
 8010f1c:	40011000 	.word	0x40011000
 8010f20:	40011400 	.word	0x40011400
 8010f24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010f32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010f36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8010f3a:	4642      	mov	r2, r8
 8010f3c:	464b      	mov	r3, r9
 8010f3e:	1891      	adds	r1, r2, r2
 8010f40:	6239      	str	r1, [r7, #32]
 8010f42:	415b      	adcs	r3, r3
 8010f44:	627b      	str	r3, [r7, #36]	; 0x24
 8010f46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010f4a:	4641      	mov	r1, r8
 8010f4c:	1854      	adds	r4, r2, r1
 8010f4e:	4649      	mov	r1, r9
 8010f50:	eb43 0501 	adc.w	r5, r3, r1
 8010f54:	f04f 0200 	mov.w	r2, #0
 8010f58:	f04f 0300 	mov.w	r3, #0
 8010f5c:	00eb      	lsls	r3, r5, #3
 8010f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010f62:	00e2      	lsls	r2, r4, #3
 8010f64:	4614      	mov	r4, r2
 8010f66:	461d      	mov	r5, r3
 8010f68:	4643      	mov	r3, r8
 8010f6a:	18e3      	adds	r3, r4, r3
 8010f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010f70:	464b      	mov	r3, r9
 8010f72:	eb45 0303 	adc.w	r3, r5, r3
 8010f76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010f7e:	685b      	ldr	r3, [r3, #4]
 8010f80:	2200      	movs	r2, #0
 8010f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010f86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010f8a:	f04f 0200 	mov.w	r2, #0
 8010f8e:	f04f 0300 	mov.w	r3, #0
 8010f92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8010f96:	4629      	mov	r1, r5
 8010f98:	008b      	lsls	r3, r1, #2
 8010f9a:	4621      	mov	r1, r4
 8010f9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010fa0:	4621      	mov	r1, r4
 8010fa2:	008a      	lsls	r2, r1, #2
 8010fa4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8010fa8:	f7ef fe6e 	bl	8000c88 <__aeabi_uldivmod>
 8010fac:	4602      	mov	r2, r0
 8010fae:	460b      	mov	r3, r1
 8010fb0:	4b60      	ldr	r3, [pc, #384]	; (8011134 <UART_SetConfig+0x4e4>)
 8010fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8010fb6:	095b      	lsrs	r3, r3, #5
 8010fb8:	011c      	lsls	r4, r3, #4
 8010fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010fc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010fc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8010fcc:	4642      	mov	r2, r8
 8010fce:	464b      	mov	r3, r9
 8010fd0:	1891      	adds	r1, r2, r2
 8010fd2:	61b9      	str	r1, [r7, #24]
 8010fd4:	415b      	adcs	r3, r3
 8010fd6:	61fb      	str	r3, [r7, #28]
 8010fd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010fdc:	4641      	mov	r1, r8
 8010fde:	1851      	adds	r1, r2, r1
 8010fe0:	6139      	str	r1, [r7, #16]
 8010fe2:	4649      	mov	r1, r9
 8010fe4:	414b      	adcs	r3, r1
 8010fe6:	617b      	str	r3, [r7, #20]
 8010fe8:	f04f 0200 	mov.w	r2, #0
 8010fec:	f04f 0300 	mov.w	r3, #0
 8010ff0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010ff4:	4659      	mov	r1, fp
 8010ff6:	00cb      	lsls	r3, r1, #3
 8010ff8:	4651      	mov	r1, sl
 8010ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010ffe:	4651      	mov	r1, sl
 8011000:	00ca      	lsls	r2, r1, #3
 8011002:	4610      	mov	r0, r2
 8011004:	4619      	mov	r1, r3
 8011006:	4603      	mov	r3, r0
 8011008:	4642      	mov	r2, r8
 801100a:	189b      	adds	r3, r3, r2
 801100c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011010:	464b      	mov	r3, r9
 8011012:	460a      	mov	r2, r1
 8011014:	eb42 0303 	adc.w	r3, r2, r3
 8011018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801101c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011020:	685b      	ldr	r3, [r3, #4]
 8011022:	2200      	movs	r2, #0
 8011024:	67bb      	str	r3, [r7, #120]	; 0x78
 8011026:	67fa      	str	r2, [r7, #124]	; 0x7c
 8011028:	f04f 0200 	mov.w	r2, #0
 801102c:	f04f 0300 	mov.w	r3, #0
 8011030:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8011034:	4649      	mov	r1, r9
 8011036:	008b      	lsls	r3, r1, #2
 8011038:	4641      	mov	r1, r8
 801103a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801103e:	4641      	mov	r1, r8
 8011040:	008a      	lsls	r2, r1, #2
 8011042:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8011046:	f7ef fe1f 	bl	8000c88 <__aeabi_uldivmod>
 801104a:	4602      	mov	r2, r0
 801104c:	460b      	mov	r3, r1
 801104e:	4b39      	ldr	r3, [pc, #228]	; (8011134 <UART_SetConfig+0x4e4>)
 8011050:	fba3 1302 	umull	r1, r3, r3, r2
 8011054:	095b      	lsrs	r3, r3, #5
 8011056:	2164      	movs	r1, #100	; 0x64
 8011058:	fb01 f303 	mul.w	r3, r1, r3
 801105c:	1ad3      	subs	r3, r2, r3
 801105e:	011b      	lsls	r3, r3, #4
 8011060:	3332      	adds	r3, #50	; 0x32
 8011062:	4a34      	ldr	r2, [pc, #208]	; (8011134 <UART_SetConfig+0x4e4>)
 8011064:	fba2 2303 	umull	r2, r3, r2, r3
 8011068:	095b      	lsrs	r3, r3, #5
 801106a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801106e:	441c      	add	r4, r3
 8011070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011074:	2200      	movs	r2, #0
 8011076:	673b      	str	r3, [r7, #112]	; 0x70
 8011078:	677a      	str	r2, [r7, #116]	; 0x74
 801107a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801107e:	4642      	mov	r2, r8
 8011080:	464b      	mov	r3, r9
 8011082:	1891      	adds	r1, r2, r2
 8011084:	60b9      	str	r1, [r7, #8]
 8011086:	415b      	adcs	r3, r3
 8011088:	60fb      	str	r3, [r7, #12]
 801108a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801108e:	4641      	mov	r1, r8
 8011090:	1851      	adds	r1, r2, r1
 8011092:	6039      	str	r1, [r7, #0]
 8011094:	4649      	mov	r1, r9
 8011096:	414b      	adcs	r3, r1
 8011098:	607b      	str	r3, [r7, #4]
 801109a:	f04f 0200 	mov.w	r2, #0
 801109e:	f04f 0300 	mov.w	r3, #0
 80110a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80110a6:	4659      	mov	r1, fp
 80110a8:	00cb      	lsls	r3, r1, #3
 80110aa:	4651      	mov	r1, sl
 80110ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80110b0:	4651      	mov	r1, sl
 80110b2:	00ca      	lsls	r2, r1, #3
 80110b4:	4610      	mov	r0, r2
 80110b6:	4619      	mov	r1, r3
 80110b8:	4603      	mov	r3, r0
 80110ba:	4642      	mov	r2, r8
 80110bc:	189b      	adds	r3, r3, r2
 80110be:	66bb      	str	r3, [r7, #104]	; 0x68
 80110c0:	464b      	mov	r3, r9
 80110c2:	460a      	mov	r2, r1
 80110c4:	eb42 0303 	adc.w	r3, r2, r3
 80110c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80110ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	2200      	movs	r2, #0
 80110d2:	663b      	str	r3, [r7, #96]	; 0x60
 80110d4:	667a      	str	r2, [r7, #100]	; 0x64
 80110d6:	f04f 0200 	mov.w	r2, #0
 80110da:	f04f 0300 	mov.w	r3, #0
 80110de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80110e2:	4649      	mov	r1, r9
 80110e4:	008b      	lsls	r3, r1, #2
 80110e6:	4641      	mov	r1, r8
 80110e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80110ec:	4641      	mov	r1, r8
 80110ee:	008a      	lsls	r2, r1, #2
 80110f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80110f4:	f7ef fdc8 	bl	8000c88 <__aeabi_uldivmod>
 80110f8:	4602      	mov	r2, r0
 80110fa:	460b      	mov	r3, r1
 80110fc:	4b0d      	ldr	r3, [pc, #52]	; (8011134 <UART_SetConfig+0x4e4>)
 80110fe:	fba3 1302 	umull	r1, r3, r3, r2
 8011102:	095b      	lsrs	r3, r3, #5
 8011104:	2164      	movs	r1, #100	; 0x64
 8011106:	fb01 f303 	mul.w	r3, r1, r3
 801110a:	1ad3      	subs	r3, r2, r3
 801110c:	011b      	lsls	r3, r3, #4
 801110e:	3332      	adds	r3, #50	; 0x32
 8011110:	4a08      	ldr	r2, [pc, #32]	; (8011134 <UART_SetConfig+0x4e4>)
 8011112:	fba2 2303 	umull	r2, r3, r2, r3
 8011116:	095b      	lsrs	r3, r3, #5
 8011118:	f003 020f 	and.w	r2, r3, #15
 801111c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	4422      	add	r2, r4
 8011124:	609a      	str	r2, [r3, #8]
}
 8011126:	bf00      	nop
 8011128:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801112c:	46bd      	mov	sp, r7
 801112e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011132:	bf00      	nop
 8011134:	51eb851f 	.word	0x51eb851f

08011138 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8011138:	b084      	sub	sp, #16
 801113a:	b480      	push	{r7}
 801113c:	b085      	sub	sp, #20
 801113e:	af00      	add	r7, sp, #0
 8011140:	6078      	str	r0, [r7, #4]
 8011142:	f107 001c 	add.w	r0, r7, #28
 8011146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801114a:	2300      	movs	r3, #0
 801114c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801114e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8011150:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8011152:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8011154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8011156:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8011158:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801115a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 801115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 801115e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8011162:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8011164:	68fa      	ldr	r2, [r7, #12]
 8011166:	4313      	orrs	r3, r2
 8011168:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	685b      	ldr	r3, [r3, #4]
 801116e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8011172:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011176:	68fa      	ldr	r2, [r7, #12]
 8011178:	431a      	orrs	r2, r3
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801117e:	2300      	movs	r3, #0
}
 8011180:	4618      	mov	r0, r3
 8011182:	3714      	adds	r7, #20
 8011184:	46bd      	mov	sp, r7
 8011186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118a:	b004      	add	sp, #16
 801118c:	4770      	bx	lr

0801118e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 801118e:	b480      	push	{r7}
 8011190:	b083      	sub	sp, #12
 8011192:	af00      	add	r7, sp, #0
 8011194:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801119c:	4618      	mov	r0, r3
 801119e:	370c      	adds	r7, #12
 80111a0:	46bd      	mov	sp, r7
 80111a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a6:	4770      	bx	lr

080111a8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80111a8:	b480      	push	{r7}
 80111aa:	b083      	sub	sp, #12
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
 80111b0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	681a      	ldr	r2, [r3, #0]
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80111bc:	2300      	movs	r3, #0
}
 80111be:	4618      	mov	r0, r3
 80111c0:	370c      	adds	r7, #12
 80111c2:	46bd      	mov	sp, r7
 80111c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c8:	4770      	bx	lr

080111ca <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80111ca:	b480      	push	{r7}
 80111cc:	b083      	sub	sp, #12
 80111ce:	af00      	add	r7, sp, #0
 80111d0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2203      	movs	r2, #3
 80111d6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80111d8:	2300      	movs	r3, #0
}
 80111da:	4618      	mov	r0, r3
 80111dc:	370c      	adds	r7, #12
 80111de:	46bd      	mov	sp, r7
 80111e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e4:	4770      	bx	lr

080111e6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80111e6:	b480      	push	{r7}
 80111e8:	b083      	sub	sp, #12
 80111ea:	af00      	add	r7, sp, #0
 80111ec:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	f003 0303 	and.w	r3, r3, #3
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	370c      	adds	r7, #12
 80111fa:	46bd      	mov	sp, r7
 80111fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011200:	4770      	bx	lr

08011202 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8011202:	b480      	push	{r7}
 8011204:	b085      	sub	sp, #20
 8011206:	af00      	add	r7, sp, #0
 8011208:	6078      	str	r0, [r7, #4]
 801120a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801120c:	2300      	movs	r3, #0
 801120e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	681a      	ldr	r2, [r3, #0]
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011220:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011226:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801122c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801122e:	68fa      	ldr	r2, [r7, #12]
 8011230:	4313      	orrs	r3, r2
 8011232:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	68db      	ldr	r3, [r3, #12]
 8011238:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801123c:	f023 030f 	bic.w	r3, r3, #15
 8011240:	68fa      	ldr	r2, [r7, #12]
 8011242:	431a      	orrs	r2, r3
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8011248:	2300      	movs	r3, #0
}
 801124a:	4618      	mov	r0, r3
 801124c:	3714      	adds	r7, #20
 801124e:	46bd      	mov	sp, r7
 8011250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011254:	4770      	bx	lr

08011256 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8011256:	b480      	push	{r7}
 8011258:	b083      	sub	sp, #12
 801125a:	af00      	add	r7, sp, #0
 801125c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	691b      	ldr	r3, [r3, #16]
 8011262:	b2db      	uxtb	r3, r3
}
 8011264:	4618      	mov	r0, r3
 8011266:	370c      	adds	r7, #12
 8011268:	46bd      	mov	sp, r7
 801126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126e:	4770      	bx	lr

08011270 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8011270:	b480      	push	{r7}
 8011272:	b085      	sub	sp, #20
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	3314      	adds	r3, #20
 801127e:	461a      	mov	r2, r3
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	4413      	add	r3, r2
 8011284:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	681b      	ldr	r3, [r3, #0]
}  
 801128a:	4618      	mov	r0, r3
 801128c:	3714      	adds	r7, #20
 801128e:	46bd      	mov	sp, r7
 8011290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011294:	4770      	bx	lr

08011296 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8011296:	b480      	push	{r7}
 8011298:	b085      	sub	sp, #20
 801129a:	af00      	add	r7, sp, #0
 801129c:	6078      	str	r0, [r7, #4]
 801129e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80112a0:	2300      	movs	r3, #0
 80112a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	681a      	ldr	r2, [r3, #0]
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	685a      	ldr	r2, [r3, #4]
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80112bc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80112c2:	431a      	orrs	r2, r3
                       Data->DPSM);
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80112c8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80112ca:	68fa      	ldr	r2, [r7, #12]
 80112cc:	4313      	orrs	r3, r2
 80112ce:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112d4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	431a      	orrs	r2, r3
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80112e0:	2300      	movs	r3, #0

}
 80112e2:	4618      	mov	r0, r3
 80112e4:	3714      	adds	r7, #20
 80112e6:	46bd      	mov	sp, r7
 80112e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ec:	4770      	bx	lr

080112ee <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80112ee:	b580      	push	{r7, lr}
 80112f0:	b088      	sub	sp, #32
 80112f2:	af00      	add	r7, sp, #0
 80112f4:	6078      	str	r0, [r7, #4]
 80112f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80112fc:	2310      	movs	r3, #16
 80112fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011300:	2340      	movs	r3, #64	; 0x40
 8011302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011304:	2300      	movs	r3, #0
 8011306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801130c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801130e:	f107 0308 	add.w	r3, r7, #8
 8011312:	4619      	mov	r1, r3
 8011314:	6878      	ldr	r0, [r7, #4]
 8011316:	f7ff ff74 	bl	8011202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 801131a:	f241 3288 	movw	r2, #5000	; 0x1388
 801131e:	2110      	movs	r1, #16
 8011320:	6878      	ldr	r0, [r7, #4]
 8011322:	f000 fa19 	bl	8011758 <SDMMC_GetCmdResp1>
 8011326:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011328:	69fb      	ldr	r3, [r7, #28]
}
 801132a:	4618      	mov	r0, r3
 801132c:	3720      	adds	r7, #32
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}

08011332 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8011332:	b580      	push	{r7, lr}
 8011334:	b088      	sub	sp, #32
 8011336:	af00      	add	r7, sp, #0
 8011338:	6078      	str	r0, [r7, #4]
 801133a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011340:	2311      	movs	r3, #17
 8011342:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011344:	2340      	movs	r3, #64	; 0x40
 8011346:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011348:	2300      	movs	r3, #0
 801134a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801134c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011350:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011352:	f107 0308 	add.w	r3, r7, #8
 8011356:	4619      	mov	r1, r3
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	f7ff ff52 	bl	8011202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 801135e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011362:	2111      	movs	r1, #17
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f000 f9f7 	bl	8011758 <SDMMC_GetCmdResp1>
 801136a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801136c:	69fb      	ldr	r3, [r7, #28]
}
 801136e:	4618      	mov	r0, r3
 8011370:	3720      	adds	r7, #32
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}

08011376 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8011376:	b580      	push	{r7, lr}
 8011378:	b088      	sub	sp, #32
 801137a:	af00      	add	r7, sp, #0
 801137c:	6078      	str	r0, [r7, #4]
 801137e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011384:	2312      	movs	r3, #18
 8011386:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011388:	2340      	movs	r3, #64	; 0x40
 801138a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801138c:	2300      	movs	r3, #0
 801138e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011394:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011396:	f107 0308 	add.w	r3, r7, #8
 801139a:	4619      	mov	r1, r3
 801139c:	6878      	ldr	r0, [r7, #4]
 801139e:	f7ff ff30 	bl	8011202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80113a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80113a6:	2112      	movs	r1, #18
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f000 f9d5 	bl	8011758 <SDMMC_GetCmdResp1>
 80113ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113b0:	69fb      	ldr	r3, [r7, #28]
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3720      	adds	r7, #32
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}

080113ba <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80113ba:	b580      	push	{r7, lr}
 80113bc:	b088      	sub	sp, #32
 80113be:	af00      	add	r7, sp, #0
 80113c0:	6078      	str	r0, [r7, #4]
 80113c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80113c8:	2318      	movs	r3, #24
 80113ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80113cc:	2340      	movs	r3, #64	; 0x40
 80113ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80113d0:	2300      	movs	r3, #0
 80113d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80113d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80113da:	f107 0308 	add.w	r3, r7, #8
 80113de:	4619      	mov	r1, r3
 80113e0:	6878      	ldr	r0, [r7, #4]
 80113e2:	f7ff ff0e 	bl	8011202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80113e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80113ea:	2118      	movs	r1, #24
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	f000 f9b3 	bl	8011758 <SDMMC_GetCmdResp1>
 80113f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113f4:	69fb      	ldr	r3, [r7, #28]
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	3720      	adds	r7, #32
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bd80      	pop	{r7, pc}

080113fe <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80113fe:	b580      	push	{r7, lr}
 8011400:	b088      	sub	sp, #32
 8011402:	af00      	add	r7, sp, #0
 8011404:	6078      	str	r0, [r7, #4]
 8011406:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801140c:	2319      	movs	r3, #25
 801140e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011410:	2340      	movs	r3, #64	; 0x40
 8011412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011414:	2300      	movs	r3, #0
 8011416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801141c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801141e:	f107 0308 	add.w	r3, r7, #8
 8011422:	4619      	mov	r1, r3
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f7ff feec 	bl	8011202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801142a:	f241 3288 	movw	r2, #5000	; 0x1388
 801142e:	2119      	movs	r1, #25
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	f000 f991 	bl	8011758 <SDMMC_GetCmdResp1>
 8011436:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011438:	69fb      	ldr	r3, [r7, #28]
}
 801143a:	4618      	mov	r0, r3
 801143c:	3720      	adds	r7, #32
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
	...

08011444 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b088      	sub	sp, #32
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801144c:	2300      	movs	r3, #0
 801144e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011450:	230c      	movs	r3, #12
 8011452:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011454:	2340      	movs	r3, #64	; 0x40
 8011456:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011458:	2300      	movs	r3, #0
 801145a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801145c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011460:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011462:	f107 0308 	add.w	r3, r7, #8
 8011466:	4619      	mov	r1, r3
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f7ff feca 	bl	8011202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 801146e:	4a05      	ldr	r2, [pc, #20]	; (8011484 <SDMMC_CmdStopTransfer+0x40>)
 8011470:	210c      	movs	r1, #12
 8011472:	6878      	ldr	r0, [r7, #4]
 8011474:	f000 f970 	bl	8011758 <SDMMC_GetCmdResp1>
 8011478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801147a:	69fb      	ldr	r3, [r7, #28]
}
 801147c:	4618      	mov	r0, r3
 801147e:	3720      	adds	r7, #32
 8011480:	46bd      	mov	sp, r7
 8011482:	bd80      	pop	{r7, pc}
 8011484:	05f5e100 	.word	0x05f5e100

08011488 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b08a      	sub	sp, #40	; 0x28
 801148c:	af00      	add	r7, sp, #0
 801148e:	60f8      	str	r0, [r7, #12]
 8011490:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011498:	2307      	movs	r3, #7
 801149a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801149c:	2340      	movs	r3, #64	; 0x40
 801149e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80114a0:	2300      	movs	r3, #0
 80114a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80114a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114a8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80114aa:	f107 0310 	add.w	r3, r7, #16
 80114ae:	4619      	mov	r1, r3
 80114b0:	68f8      	ldr	r0, [r7, #12]
 80114b2:	f7ff fea6 	bl	8011202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80114b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80114ba:	2107      	movs	r1, #7
 80114bc:	68f8      	ldr	r0, [r7, #12]
 80114be:	f000 f94b 	bl	8011758 <SDMMC_GetCmdResp1>
 80114c2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80114c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80114c6:	4618      	mov	r0, r3
 80114c8:	3728      	adds	r7, #40	; 0x28
 80114ca:	46bd      	mov	sp, r7
 80114cc:	bd80      	pop	{r7, pc}

080114ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80114ce:	b580      	push	{r7, lr}
 80114d0:	b088      	sub	sp, #32
 80114d2:	af00      	add	r7, sp, #0
 80114d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80114d6:	2300      	movs	r3, #0
 80114d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80114da:	2300      	movs	r3, #0
 80114dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80114de:	2300      	movs	r3, #0
 80114e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80114e2:	2300      	movs	r3, #0
 80114e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80114e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80114ec:	f107 0308 	add.w	r3, r7, #8
 80114f0:	4619      	mov	r1, r3
 80114f2:	6878      	ldr	r0, [r7, #4]
 80114f4:	f7ff fe85 	bl	8011202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f000 fb65 	bl	8011bc8 <SDMMC_GetCmdError>
 80114fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011500:	69fb      	ldr	r3, [r7, #28]
}
 8011502:	4618      	mov	r0, r3
 8011504:	3720      	adds	r7, #32
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}

0801150a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 801150a:	b580      	push	{r7, lr}
 801150c:	b088      	sub	sp, #32
 801150e:	af00      	add	r7, sp, #0
 8011510:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011512:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011518:	2308      	movs	r3, #8
 801151a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801151c:	2340      	movs	r3, #64	; 0x40
 801151e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011520:	2300      	movs	r3, #0
 8011522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011528:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801152a:	f107 0308 	add.w	r3, r7, #8
 801152e:	4619      	mov	r1, r3
 8011530:	6878      	ldr	r0, [r7, #4]
 8011532:	f7ff fe66 	bl	8011202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8011536:	6878      	ldr	r0, [r7, #4]
 8011538:	f000 faf8 	bl	8011b2c <SDMMC_GetCmdResp7>
 801153c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801153e:	69fb      	ldr	r3, [r7, #28]
}
 8011540:	4618      	mov	r0, r3
 8011542:	3720      	adds	r7, #32
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}

08011548 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b088      	sub	sp, #32
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
 8011550:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011556:	2337      	movs	r3, #55	; 0x37
 8011558:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801155a:	2340      	movs	r3, #64	; 0x40
 801155c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801155e:	2300      	movs	r3, #0
 8011560:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011566:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011568:	f107 0308 	add.w	r3, r7, #8
 801156c:	4619      	mov	r1, r3
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f7ff fe47 	bl	8011202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8011574:	f241 3288 	movw	r2, #5000	; 0x1388
 8011578:	2137      	movs	r1, #55	; 0x37
 801157a:	6878      	ldr	r0, [r7, #4]
 801157c:	f000 f8ec 	bl	8011758 <SDMMC_GetCmdResp1>
 8011580:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011582:	69fb      	ldr	r3, [r7, #28]
}
 8011584:	4618      	mov	r0, r3
 8011586:	3720      	adds	r7, #32
 8011588:	46bd      	mov	sp, r7
 801158a:	bd80      	pop	{r7, pc}

0801158c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b088      	sub	sp, #32
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
 8011594:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801159c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80115a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80115a2:	2329      	movs	r3, #41	; 0x29
 80115a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80115a6:	2340      	movs	r3, #64	; 0x40
 80115a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80115aa:	2300      	movs	r3, #0
 80115ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80115ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80115b4:	f107 0308 	add.w	r3, r7, #8
 80115b8:	4619      	mov	r1, r3
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f7ff fe21 	bl	8011202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80115c0:	6878      	ldr	r0, [r7, #4]
 80115c2:	f000 f9ff 	bl	80119c4 <SDMMC_GetCmdResp3>
 80115c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115c8:	69fb      	ldr	r3, [r7, #28]
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	3720      	adds	r7, #32
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bd80      	pop	{r7, pc}

080115d2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80115d2:	b580      	push	{r7, lr}
 80115d4:	b088      	sub	sp, #32
 80115d6:	af00      	add	r7, sp, #0
 80115d8:	6078      	str	r0, [r7, #4]
 80115da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80115e0:	2306      	movs	r3, #6
 80115e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80115e4:	2340      	movs	r3, #64	; 0x40
 80115e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80115e8:	2300      	movs	r3, #0
 80115ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80115ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80115f2:	f107 0308 	add.w	r3, r7, #8
 80115f6:	4619      	mov	r1, r3
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f7ff fe02 	bl	8011202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80115fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8011602:	2106      	movs	r1, #6
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f000 f8a7 	bl	8011758 <SDMMC_GetCmdResp1>
 801160a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801160c:	69fb      	ldr	r3, [r7, #28]
}
 801160e:	4618      	mov	r0, r3
 8011610:	3720      	adds	r7, #32
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}

08011616 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8011616:	b580      	push	{r7, lr}
 8011618:	b088      	sub	sp, #32
 801161a:	af00      	add	r7, sp, #0
 801161c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801161e:	2300      	movs	r3, #0
 8011620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011622:	2333      	movs	r3, #51	; 0x33
 8011624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011626:	2340      	movs	r3, #64	; 0x40
 8011628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801162a:	2300      	movs	r3, #0
 801162c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801162e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011632:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011634:	f107 0308 	add.w	r3, r7, #8
 8011638:	4619      	mov	r1, r3
 801163a:	6878      	ldr	r0, [r7, #4]
 801163c:	f7ff fde1 	bl	8011202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8011640:	f241 3288 	movw	r2, #5000	; 0x1388
 8011644:	2133      	movs	r1, #51	; 0x33
 8011646:	6878      	ldr	r0, [r7, #4]
 8011648:	f000 f886 	bl	8011758 <SDMMC_GetCmdResp1>
 801164c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801164e:	69fb      	ldr	r3, [r7, #28]
}
 8011650:	4618      	mov	r0, r3
 8011652:	3720      	adds	r7, #32
 8011654:	46bd      	mov	sp, r7
 8011656:	bd80      	pop	{r7, pc}

08011658 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b088      	sub	sp, #32
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011660:	2300      	movs	r3, #0
 8011662:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011664:	2302      	movs	r3, #2
 8011666:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8011668:	23c0      	movs	r3, #192	; 0xc0
 801166a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801166c:	2300      	movs	r3, #0
 801166e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011674:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011676:	f107 0308 	add.w	r3, r7, #8
 801167a:	4619      	mov	r1, r3
 801167c:	6878      	ldr	r0, [r7, #4]
 801167e:	f7ff fdc0 	bl	8011202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f000 f956 	bl	8011934 <SDMMC_GetCmdResp2>
 8011688:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801168a:	69fb      	ldr	r3, [r7, #28]
}
 801168c:	4618      	mov	r0, r3
 801168e:	3720      	adds	r7, #32
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}

08011694 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b088      	sub	sp, #32
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80116a2:	2309      	movs	r3, #9
 80116a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80116a6:	23c0      	movs	r3, #192	; 0xc0
 80116a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80116aa:	2300      	movs	r3, #0
 80116ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80116ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80116b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80116b4:	f107 0308 	add.w	r3, r7, #8
 80116b8:	4619      	mov	r1, r3
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f7ff fda1 	bl	8011202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80116c0:	6878      	ldr	r0, [r7, #4]
 80116c2:	f000 f937 	bl	8011934 <SDMMC_GetCmdResp2>
 80116c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116c8:	69fb      	ldr	r3, [r7, #28]
}
 80116ca:	4618      	mov	r0, r3
 80116cc:	3720      	adds	r7, #32
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}

080116d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80116d2:	b580      	push	{r7, lr}
 80116d4:	b088      	sub	sp, #32
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	6078      	str	r0, [r7, #4]
 80116da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80116dc:	2300      	movs	r3, #0
 80116de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80116e0:	2303      	movs	r3, #3
 80116e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80116e4:	2340      	movs	r3, #64	; 0x40
 80116e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80116e8:	2300      	movs	r3, #0
 80116ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80116ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80116f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80116f2:	f107 0308 	add.w	r3, r7, #8
 80116f6:	4619      	mov	r1, r3
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f7ff fd82 	bl	8011202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80116fe:	683a      	ldr	r2, [r7, #0]
 8011700:	2103      	movs	r1, #3
 8011702:	6878      	ldr	r0, [r7, #4]
 8011704:	f000 f99c 	bl	8011a40 <SDMMC_GetCmdResp6>
 8011708:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801170a:	69fb      	ldr	r3, [r7, #28]
}
 801170c:	4618      	mov	r0, r3
 801170e:	3720      	adds	r7, #32
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}

08011714 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b088      	sub	sp, #32
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011722:	230d      	movs	r3, #13
 8011724:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011726:	2340      	movs	r3, #64	; 0x40
 8011728:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801172a:	2300      	movs	r3, #0
 801172c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801172e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011732:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011734:	f107 0308 	add.w	r3, r7, #8
 8011738:	4619      	mov	r1, r3
 801173a:	6878      	ldr	r0, [r7, #4]
 801173c:	f7ff fd61 	bl	8011202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8011740:	f241 3288 	movw	r2, #5000	; 0x1388
 8011744:	210d      	movs	r1, #13
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f000 f806 	bl	8011758 <SDMMC_GetCmdResp1>
 801174c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801174e:	69fb      	ldr	r3, [r7, #28]
}
 8011750:	4618      	mov	r0, r3
 8011752:	3720      	adds	r7, #32
 8011754:	46bd      	mov	sp, r7
 8011756:	bd80      	pop	{r7, pc}

08011758 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b088      	sub	sp, #32
 801175c:	af00      	add	r7, sp, #0
 801175e:	60f8      	str	r0, [r7, #12]
 8011760:	460b      	mov	r3, r1
 8011762:	607a      	str	r2, [r7, #4]
 8011764:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011766:	4b70      	ldr	r3, [pc, #448]	; (8011928 <SDMMC_GetCmdResp1+0x1d0>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	4a70      	ldr	r2, [pc, #448]	; (801192c <SDMMC_GetCmdResp1+0x1d4>)
 801176c:	fba2 2303 	umull	r2, r3, r2, r3
 8011770:	0a5a      	lsrs	r2, r3, #9
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	fb02 f303 	mul.w	r3, r2, r3
 8011778:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 801177a:	69fb      	ldr	r3, [r7, #28]
 801177c:	1e5a      	subs	r2, r3, #1
 801177e:	61fa      	str	r2, [r7, #28]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d102      	bne.n	801178a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011784:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011788:	e0c9      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801178e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011790:	69bb      	ldr	r3, [r7, #24]
 8011792:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011796:	2b00      	cmp	r3, #0
 8011798:	d0ef      	beq.n	801177a <SDMMC_GetCmdResp1+0x22>
 801179a:	69bb      	ldr	r3, [r7, #24]
 801179c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d1ea      	bne.n	801177a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117a8:	f003 0304 	and.w	r3, r3, #4
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d004      	beq.n	80117ba <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	2204      	movs	r2, #4
 80117b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80117b6:	2304      	movs	r3, #4
 80117b8:	e0b1      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117be:	f003 0301 	and.w	r3, r3, #1
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d004      	beq.n	80117d0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	2201      	movs	r2, #1
 80117ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80117cc:	2301      	movs	r3, #1
 80117ce:	e0a6      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	22c5      	movs	r2, #197	; 0xc5
 80117d4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80117d6:	68f8      	ldr	r0, [r7, #12]
 80117d8:	f7ff fd3d 	bl	8011256 <SDIO_GetCommandResponse>
 80117dc:	4603      	mov	r3, r0
 80117de:	461a      	mov	r2, r3
 80117e0:	7afb      	ldrb	r3, [r7, #11]
 80117e2:	4293      	cmp	r3, r2
 80117e4:	d001      	beq.n	80117ea <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80117e6:	2301      	movs	r3, #1
 80117e8:	e099      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80117ea:	2100      	movs	r1, #0
 80117ec:	68f8      	ldr	r0, [r7, #12]
 80117ee:	f7ff fd3f 	bl	8011270 <SDIO_GetResponse>
 80117f2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80117f4:	697a      	ldr	r2, [r7, #20]
 80117f6:	4b4e      	ldr	r3, [pc, #312]	; (8011930 <SDMMC_GetCmdResp1+0x1d8>)
 80117f8:	4013      	ands	r3, r2
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d101      	bne.n	8011802 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80117fe:	2300      	movs	r3, #0
 8011800:	e08d      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	2b00      	cmp	r3, #0
 8011806:	da02      	bge.n	801180e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011808:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801180c:	e087      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801180e:	697b      	ldr	r3, [r7, #20]
 8011810:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011814:	2b00      	cmp	r3, #0
 8011816:	d001      	beq.n	801181c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011818:	2340      	movs	r3, #64	; 0x40
 801181a:	e080      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011822:	2b00      	cmp	r3, #0
 8011824:	d001      	beq.n	801182a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011826:	2380      	movs	r3, #128	; 0x80
 8011828:	e079      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801182a:	697b      	ldr	r3, [r7, #20]
 801182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011830:	2b00      	cmp	r3, #0
 8011832:	d002      	beq.n	801183a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011838:	e071      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011840:	2b00      	cmp	r3, #0
 8011842:	d002      	beq.n	801184a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011848:	e069      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011850:	2b00      	cmp	r3, #0
 8011852:	d002      	beq.n	801185a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011858:	e061      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011860:	2b00      	cmp	r3, #0
 8011862:	d002      	beq.n	801186a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011864:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011868:	e059      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011870:	2b00      	cmp	r3, #0
 8011872:	d002      	beq.n	801187a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011878:	e051      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801187a:	697b      	ldr	r3, [r7, #20]
 801187c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011880:	2b00      	cmp	r3, #0
 8011882:	d002      	beq.n	801188a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011888:	e049      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801188a:	697b      	ldr	r3, [r7, #20]
 801188c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011890:	2b00      	cmp	r3, #0
 8011892:	d002      	beq.n	801189a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011894:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011898:	e041      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801189a:	697b      	ldr	r3, [r7, #20]
 801189c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d002      	beq.n	80118aa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80118a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80118a8:	e039      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d002      	beq.n	80118ba <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80118b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80118b8:	e031      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d002      	beq.n	80118ca <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80118c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80118c8:	e029      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d002      	beq.n	80118da <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80118d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80118d8:	e021      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d002      	beq.n	80118ea <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80118e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80118e8:	e019      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d002      	beq.n	80118fa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80118f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80118f8:	e011      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80118fa:	697b      	ldr	r3, [r7, #20]
 80118fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011900:	2b00      	cmp	r3, #0
 8011902:	d002      	beq.n	801190a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011904:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011908:	e009      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	f003 0308 	and.w	r3, r3, #8
 8011910:	2b00      	cmp	r3, #0
 8011912:	d002      	beq.n	801191a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011914:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011918:	e001      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801191a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801191e:	4618      	mov	r0, r3
 8011920:	3720      	adds	r7, #32
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
 8011926:	bf00      	nop
 8011928:	20000004 	.word	0x20000004
 801192c:	10624dd3 	.word	0x10624dd3
 8011930:	fdffe008 	.word	0xfdffe008

08011934 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8011934:	b480      	push	{r7}
 8011936:	b085      	sub	sp, #20
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801193c:	4b1f      	ldr	r3, [pc, #124]	; (80119bc <SDMMC_GetCmdResp2+0x88>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	4a1f      	ldr	r2, [pc, #124]	; (80119c0 <SDMMC_GetCmdResp2+0x8c>)
 8011942:	fba2 2303 	umull	r2, r3, r2, r3
 8011946:	0a5b      	lsrs	r3, r3, #9
 8011948:	f241 3288 	movw	r2, #5000	; 0x1388
 801194c:	fb02 f303 	mul.w	r3, r2, r3
 8011950:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	1e5a      	subs	r2, r3, #1
 8011956:	60fa      	str	r2, [r7, #12]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d102      	bne.n	8011962 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801195c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011960:	e026      	b.n	80119b0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011966:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011968:	68bb      	ldr	r3, [r7, #8]
 801196a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801196e:	2b00      	cmp	r3, #0
 8011970:	d0ef      	beq.n	8011952 <SDMMC_GetCmdResp2+0x1e>
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011978:	2b00      	cmp	r3, #0
 801197a:	d1ea      	bne.n	8011952 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011980:	f003 0304 	and.w	r3, r3, #4
 8011984:	2b00      	cmp	r3, #0
 8011986:	d004      	beq.n	8011992 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2204      	movs	r2, #4
 801198c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801198e:	2304      	movs	r3, #4
 8011990:	e00e      	b.n	80119b0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011996:	f003 0301 	and.w	r3, r3, #1
 801199a:	2b00      	cmp	r3, #0
 801199c:	d004      	beq.n	80119a8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	2201      	movs	r2, #1
 80119a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80119a4:	2301      	movs	r3, #1
 80119a6:	e003      	b.n	80119b0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	22c5      	movs	r2, #197	; 0xc5
 80119ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80119ae:	2300      	movs	r3, #0
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	3714      	adds	r7, #20
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr
 80119bc:	20000004 	.word	0x20000004
 80119c0:	10624dd3 	.word	0x10624dd3

080119c4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80119c4:	b480      	push	{r7}
 80119c6:	b085      	sub	sp, #20
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80119cc:	4b1a      	ldr	r3, [pc, #104]	; (8011a38 <SDMMC_GetCmdResp3+0x74>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	4a1a      	ldr	r2, [pc, #104]	; (8011a3c <SDMMC_GetCmdResp3+0x78>)
 80119d2:	fba2 2303 	umull	r2, r3, r2, r3
 80119d6:	0a5b      	lsrs	r3, r3, #9
 80119d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80119dc:	fb02 f303 	mul.w	r3, r2, r3
 80119e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	1e5a      	subs	r2, r3, #1
 80119e6:	60fa      	str	r2, [r7, #12]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d102      	bne.n	80119f2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80119ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80119f0:	e01b      	b.n	8011a2a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d0ef      	beq.n	80119e2 <SDMMC_GetCmdResp3+0x1e>
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d1ea      	bne.n	80119e2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a10:	f003 0304 	and.w	r3, r3, #4
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d004      	beq.n	8011a22 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	2204      	movs	r2, #4
 8011a1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011a1e:	2304      	movs	r3, #4
 8011a20:	e003      	b.n	8011a2a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	22c5      	movs	r2, #197	; 0xc5
 8011a26:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011a28:	2300      	movs	r3, #0
}
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	3714      	adds	r7, #20
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a34:	4770      	bx	lr
 8011a36:	bf00      	nop
 8011a38:	20000004 	.word	0x20000004
 8011a3c:	10624dd3 	.word	0x10624dd3

08011a40 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b088      	sub	sp, #32
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	60f8      	str	r0, [r7, #12]
 8011a48:	460b      	mov	r3, r1
 8011a4a:	607a      	str	r2, [r7, #4]
 8011a4c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011a4e:	4b35      	ldr	r3, [pc, #212]	; (8011b24 <SDMMC_GetCmdResp6+0xe4>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	4a35      	ldr	r2, [pc, #212]	; (8011b28 <SDMMC_GetCmdResp6+0xe8>)
 8011a54:	fba2 2303 	umull	r2, r3, r2, r3
 8011a58:	0a5b      	lsrs	r3, r3, #9
 8011a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a5e:	fb02 f303 	mul.w	r3, r2, r3
 8011a62:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011a64:	69fb      	ldr	r3, [r7, #28]
 8011a66:	1e5a      	subs	r2, r3, #1
 8011a68:	61fa      	str	r2, [r7, #28]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d102      	bne.n	8011a74 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011a6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011a72:	e052      	b.n	8011b1a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a78:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011a7a:	69bb      	ldr	r3, [r7, #24]
 8011a7c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d0ef      	beq.n	8011a64 <SDMMC_GetCmdResp6+0x24>
 8011a84:	69bb      	ldr	r3, [r7, #24]
 8011a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d1ea      	bne.n	8011a64 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a92:	f003 0304 	and.w	r3, r3, #4
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d004      	beq.n	8011aa4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	2204      	movs	r2, #4
 8011a9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011aa0:	2304      	movs	r3, #4
 8011aa2:	e03a      	b.n	8011b1a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011aa8:	f003 0301 	and.w	r3, r3, #1
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d004      	beq.n	8011aba <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	2201      	movs	r2, #1
 8011ab4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	e02f      	b.n	8011b1a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8011aba:	68f8      	ldr	r0, [r7, #12]
 8011abc:	f7ff fbcb 	bl	8011256 <SDIO_GetCommandResponse>
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	461a      	mov	r2, r3
 8011ac4:	7afb      	ldrb	r3, [r7, #11]
 8011ac6:	4293      	cmp	r3, r2
 8011ac8:	d001      	beq.n	8011ace <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011aca:	2301      	movs	r3, #1
 8011acc:	e025      	b.n	8011b1a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	22c5      	movs	r2, #197	; 0xc5
 8011ad2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8011ad4:	2100      	movs	r1, #0
 8011ad6:	68f8      	ldr	r0, [r7, #12]
 8011ad8:	f7ff fbca 	bl	8011270 <SDIO_GetResponse>
 8011adc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011ade:	697b      	ldr	r3, [r7, #20]
 8011ae0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d106      	bne.n	8011af6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011ae8:	697b      	ldr	r3, [r7, #20]
 8011aea:	0c1b      	lsrs	r3, r3, #16
 8011aec:	b29a      	uxth	r2, r3
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8011af2:	2300      	movs	r3, #0
 8011af4:	e011      	b.n	8011b1a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d002      	beq.n	8011b06 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011b04:	e009      	b.n	8011b1a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d002      	beq.n	8011b16 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b14:	e001      	b.n	8011b1a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011b16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3720      	adds	r7, #32
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd80      	pop	{r7, pc}
 8011b22:	bf00      	nop
 8011b24:	20000004 	.word	0x20000004
 8011b28:	10624dd3 	.word	0x10624dd3

08011b2c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8011b2c:	b480      	push	{r7}
 8011b2e:	b085      	sub	sp, #20
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011b34:	4b22      	ldr	r3, [pc, #136]	; (8011bc0 <SDMMC_GetCmdResp7+0x94>)
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	4a22      	ldr	r2, [pc, #136]	; (8011bc4 <SDMMC_GetCmdResp7+0x98>)
 8011b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8011b3e:	0a5b      	lsrs	r3, r3, #9
 8011b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b44:	fb02 f303 	mul.w	r3, r2, r3
 8011b48:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	1e5a      	subs	r2, r3, #1
 8011b4e:	60fa      	str	r2, [r7, #12]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d102      	bne.n	8011b5a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011b54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011b58:	e02c      	b.n	8011bb4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b5e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d0ef      	beq.n	8011b4a <SDMMC_GetCmdResp7+0x1e>
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d1ea      	bne.n	8011b4a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b78:	f003 0304 	and.w	r3, r3, #4
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d004      	beq.n	8011b8a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2204      	movs	r2, #4
 8011b84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011b86:	2304      	movs	r3, #4
 8011b88:	e014      	b.n	8011bb4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b8e:	f003 0301 	and.w	r3, r3, #1
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d004      	beq.n	8011ba0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2201      	movs	r2, #1
 8011b9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	e009      	b.n	8011bb4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d002      	beq.n	8011bb2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2240      	movs	r2, #64	; 0x40
 8011bb0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011bb2:	2300      	movs	r3, #0
  
}
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	3714      	adds	r7, #20
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bbe:	4770      	bx	lr
 8011bc0:	20000004 	.word	0x20000004
 8011bc4:	10624dd3 	.word	0x10624dd3

08011bc8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8011bc8:	b480      	push	{r7}
 8011bca:	b085      	sub	sp, #20
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011bd0:	4b11      	ldr	r3, [pc, #68]	; (8011c18 <SDMMC_GetCmdError+0x50>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	4a11      	ldr	r2, [pc, #68]	; (8011c1c <SDMMC_GetCmdError+0x54>)
 8011bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8011bda:	0a5b      	lsrs	r3, r3, #9
 8011bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8011be0:	fb02 f303 	mul.w	r3, r2, r3
 8011be4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	1e5a      	subs	r2, r3, #1
 8011bea:	60fa      	str	r2, [r7, #12]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d102      	bne.n	8011bf6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011bf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011bf4:	e009      	b.n	8011c0a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d0f1      	beq.n	8011be6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	22c5      	movs	r2, #197	; 0xc5
 8011c06:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8011c08:	2300      	movs	r3, #0
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3714      	adds	r7, #20
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c14:	4770      	bx	lr
 8011c16:	bf00      	nop
 8011c18:	20000004 	.word	0x20000004
 8011c1c:	10624dd3 	.word	0x10624dd3

08011c20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011c20:	b084      	sub	sp, #16
 8011c22:	b580      	push	{r7, lr}
 8011c24:	b084      	sub	sp, #16
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	6078      	str	r0, [r7, #4]
 8011c2a:	f107 001c 	add.w	r0, r7, #28
 8011c2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c34:	2b01      	cmp	r3, #1
 8011c36:	d122      	bne.n	8011c7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	68db      	ldr	r3, [r3, #12]
 8011c48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8011c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011c50:	687a      	ldr	r2, [r7, #4]
 8011c52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	68db      	ldr	r3, [r3, #12]
 8011c58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c62:	2b01      	cmp	r3, #1
 8011c64:	d105      	bne.n	8011c72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	68db      	ldr	r3, [r3, #12]
 8011c6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f001 fbee 	bl	8013454 <USB_CoreReset>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	73fb      	strb	r3, [r7, #15]
 8011c7c:	e01a      	b.n	8011cb4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	68db      	ldr	r3, [r3, #12]
 8011c82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f001 fbe2 	bl	8013454 <USB_CoreReset>
 8011c90:	4603      	mov	r3, r0
 8011c92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d106      	bne.n	8011ca8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	639a      	str	r2, [r3, #56]	; 0x38
 8011ca6:	e005      	b.n	8011cb4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cb6:	2b01      	cmp	r3, #1
 8011cb8:	d10b      	bne.n	8011cd2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	689b      	ldr	r3, [r3, #8]
 8011cbe:	f043 0206 	orr.w	r2, r3, #6
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	689b      	ldr	r3, [r3, #8]
 8011cca:	f043 0220 	orr.w	r2, r3, #32
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	3710      	adds	r7, #16
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011cde:	b004      	add	sp, #16
 8011ce0:	4770      	bx	lr
	...

08011ce4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011ce4:	b480      	push	{r7}
 8011ce6:	b087      	sub	sp, #28
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	60f8      	str	r0, [r7, #12]
 8011cec:	60b9      	str	r1, [r7, #8]
 8011cee:	4613      	mov	r3, r2
 8011cf0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011cf2:	79fb      	ldrb	r3, [r7, #7]
 8011cf4:	2b02      	cmp	r3, #2
 8011cf6:	d165      	bne.n	8011dc4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	4a41      	ldr	r2, [pc, #260]	; (8011e00 <USB_SetTurnaroundTime+0x11c>)
 8011cfc:	4293      	cmp	r3, r2
 8011cfe:	d906      	bls.n	8011d0e <USB_SetTurnaroundTime+0x2a>
 8011d00:	68bb      	ldr	r3, [r7, #8]
 8011d02:	4a40      	ldr	r2, [pc, #256]	; (8011e04 <USB_SetTurnaroundTime+0x120>)
 8011d04:	4293      	cmp	r3, r2
 8011d06:	d202      	bcs.n	8011d0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011d08:	230f      	movs	r3, #15
 8011d0a:	617b      	str	r3, [r7, #20]
 8011d0c:	e062      	b.n	8011dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	4a3c      	ldr	r2, [pc, #240]	; (8011e04 <USB_SetTurnaroundTime+0x120>)
 8011d12:	4293      	cmp	r3, r2
 8011d14:	d306      	bcc.n	8011d24 <USB_SetTurnaroundTime+0x40>
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	4a3b      	ldr	r2, [pc, #236]	; (8011e08 <USB_SetTurnaroundTime+0x124>)
 8011d1a:	4293      	cmp	r3, r2
 8011d1c:	d202      	bcs.n	8011d24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011d1e:	230e      	movs	r3, #14
 8011d20:	617b      	str	r3, [r7, #20]
 8011d22:	e057      	b.n	8011dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	4a38      	ldr	r2, [pc, #224]	; (8011e08 <USB_SetTurnaroundTime+0x124>)
 8011d28:	4293      	cmp	r3, r2
 8011d2a:	d306      	bcc.n	8011d3a <USB_SetTurnaroundTime+0x56>
 8011d2c:	68bb      	ldr	r3, [r7, #8]
 8011d2e:	4a37      	ldr	r2, [pc, #220]	; (8011e0c <USB_SetTurnaroundTime+0x128>)
 8011d30:	4293      	cmp	r3, r2
 8011d32:	d202      	bcs.n	8011d3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011d34:	230d      	movs	r3, #13
 8011d36:	617b      	str	r3, [r7, #20]
 8011d38:	e04c      	b.n	8011dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	4a33      	ldr	r2, [pc, #204]	; (8011e0c <USB_SetTurnaroundTime+0x128>)
 8011d3e:	4293      	cmp	r3, r2
 8011d40:	d306      	bcc.n	8011d50 <USB_SetTurnaroundTime+0x6c>
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	4a32      	ldr	r2, [pc, #200]	; (8011e10 <USB_SetTurnaroundTime+0x12c>)
 8011d46:	4293      	cmp	r3, r2
 8011d48:	d802      	bhi.n	8011d50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011d4a:	230c      	movs	r3, #12
 8011d4c:	617b      	str	r3, [r7, #20]
 8011d4e:	e041      	b.n	8011dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	4a2f      	ldr	r2, [pc, #188]	; (8011e10 <USB_SetTurnaroundTime+0x12c>)
 8011d54:	4293      	cmp	r3, r2
 8011d56:	d906      	bls.n	8011d66 <USB_SetTurnaroundTime+0x82>
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	4a2e      	ldr	r2, [pc, #184]	; (8011e14 <USB_SetTurnaroundTime+0x130>)
 8011d5c:	4293      	cmp	r3, r2
 8011d5e:	d802      	bhi.n	8011d66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011d60:	230b      	movs	r3, #11
 8011d62:	617b      	str	r3, [r7, #20]
 8011d64:	e036      	b.n	8011dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	4a2a      	ldr	r2, [pc, #168]	; (8011e14 <USB_SetTurnaroundTime+0x130>)
 8011d6a:	4293      	cmp	r3, r2
 8011d6c:	d906      	bls.n	8011d7c <USB_SetTurnaroundTime+0x98>
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	4a29      	ldr	r2, [pc, #164]	; (8011e18 <USB_SetTurnaroundTime+0x134>)
 8011d72:	4293      	cmp	r3, r2
 8011d74:	d802      	bhi.n	8011d7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011d76:	230a      	movs	r3, #10
 8011d78:	617b      	str	r3, [r7, #20]
 8011d7a:	e02b      	b.n	8011dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	4a26      	ldr	r2, [pc, #152]	; (8011e18 <USB_SetTurnaroundTime+0x134>)
 8011d80:	4293      	cmp	r3, r2
 8011d82:	d906      	bls.n	8011d92 <USB_SetTurnaroundTime+0xae>
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	4a25      	ldr	r2, [pc, #148]	; (8011e1c <USB_SetTurnaroundTime+0x138>)
 8011d88:	4293      	cmp	r3, r2
 8011d8a:	d202      	bcs.n	8011d92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011d8c:	2309      	movs	r3, #9
 8011d8e:	617b      	str	r3, [r7, #20]
 8011d90:	e020      	b.n	8011dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	4a21      	ldr	r2, [pc, #132]	; (8011e1c <USB_SetTurnaroundTime+0x138>)
 8011d96:	4293      	cmp	r3, r2
 8011d98:	d306      	bcc.n	8011da8 <USB_SetTurnaroundTime+0xc4>
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	4a20      	ldr	r2, [pc, #128]	; (8011e20 <USB_SetTurnaroundTime+0x13c>)
 8011d9e:	4293      	cmp	r3, r2
 8011da0:	d802      	bhi.n	8011da8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011da2:	2308      	movs	r3, #8
 8011da4:	617b      	str	r3, [r7, #20]
 8011da6:	e015      	b.n	8011dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011da8:	68bb      	ldr	r3, [r7, #8]
 8011daa:	4a1d      	ldr	r2, [pc, #116]	; (8011e20 <USB_SetTurnaroundTime+0x13c>)
 8011dac:	4293      	cmp	r3, r2
 8011dae:	d906      	bls.n	8011dbe <USB_SetTurnaroundTime+0xda>
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	4a1c      	ldr	r2, [pc, #112]	; (8011e24 <USB_SetTurnaroundTime+0x140>)
 8011db4:	4293      	cmp	r3, r2
 8011db6:	d202      	bcs.n	8011dbe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011db8:	2307      	movs	r3, #7
 8011dba:	617b      	str	r3, [r7, #20]
 8011dbc:	e00a      	b.n	8011dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011dbe:	2306      	movs	r3, #6
 8011dc0:	617b      	str	r3, [r7, #20]
 8011dc2:	e007      	b.n	8011dd4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011dc4:	79fb      	ldrb	r3, [r7, #7]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d102      	bne.n	8011dd0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011dca:	2309      	movs	r3, #9
 8011dcc:	617b      	str	r3, [r7, #20]
 8011dce:	e001      	b.n	8011dd4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011dd0:	2309      	movs	r3, #9
 8011dd2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	68db      	ldr	r3, [r3, #12]
 8011dd8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	68da      	ldr	r2, [r3, #12]
 8011de4:	697b      	ldr	r3, [r7, #20]
 8011de6:	029b      	lsls	r3, r3, #10
 8011de8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011dec:	431a      	orrs	r2, r3
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011df2:	2300      	movs	r3, #0
}
 8011df4:	4618      	mov	r0, r3
 8011df6:	371c      	adds	r7, #28
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfe:	4770      	bx	lr
 8011e00:	00d8acbf 	.word	0x00d8acbf
 8011e04:	00e4e1c0 	.word	0x00e4e1c0
 8011e08:	00f42400 	.word	0x00f42400
 8011e0c:	01067380 	.word	0x01067380
 8011e10:	011a499f 	.word	0x011a499f
 8011e14:	01312cff 	.word	0x01312cff
 8011e18:	014ca43f 	.word	0x014ca43f
 8011e1c:	016e3600 	.word	0x016e3600
 8011e20:	01a6ab1f 	.word	0x01a6ab1f
 8011e24:	01e84800 	.word	0x01e84800

08011e28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011e28:	b480      	push	{r7}
 8011e2a:	b083      	sub	sp, #12
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	689b      	ldr	r3, [r3, #8]
 8011e34:	f043 0201 	orr.w	r2, r3, #1
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011e3c:	2300      	movs	r3, #0
}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	370c      	adds	r7, #12
 8011e42:	46bd      	mov	sp, r7
 8011e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e48:	4770      	bx	lr

08011e4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011e4a:	b480      	push	{r7}
 8011e4c:	b083      	sub	sp, #12
 8011e4e:	af00      	add	r7, sp, #0
 8011e50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	689b      	ldr	r3, [r3, #8]
 8011e56:	f023 0201 	bic.w	r2, r3, #1
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011e5e:	2300      	movs	r3, #0
}
 8011e60:	4618      	mov	r0, r3
 8011e62:	370c      	adds	r7, #12
 8011e64:	46bd      	mov	sp, r7
 8011e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6a:	4770      	bx	lr

08011e6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b084      	sub	sp, #16
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
 8011e74:	460b      	mov	r3, r1
 8011e76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011e78:	2300      	movs	r3, #0
 8011e7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	68db      	ldr	r3, [r3, #12]
 8011e80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011e88:	78fb      	ldrb	r3, [r7, #3]
 8011e8a:	2b01      	cmp	r3, #1
 8011e8c:	d115      	bne.n	8011eba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	68db      	ldr	r3, [r3, #12]
 8011e92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011e9a:	2001      	movs	r0, #1
 8011e9c:	f7f7 fbca 	bl	8009634 <HAL_Delay>
      ms++;
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	3301      	adds	r3, #1
 8011ea4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8011ea6:	6878      	ldr	r0, [r7, #4]
 8011ea8:	f001 fa45 	bl	8013336 <USB_GetMode>
 8011eac:	4603      	mov	r3, r0
 8011eae:	2b01      	cmp	r3, #1
 8011eb0:	d01e      	beq.n	8011ef0 <USB_SetCurrentMode+0x84>
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	2b31      	cmp	r3, #49	; 0x31
 8011eb6:	d9f0      	bls.n	8011e9a <USB_SetCurrentMode+0x2e>
 8011eb8:	e01a      	b.n	8011ef0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011eba:	78fb      	ldrb	r3, [r7, #3]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d115      	bne.n	8011eec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	68db      	ldr	r3, [r3, #12]
 8011ec4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011ecc:	2001      	movs	r0, #1
 8011ece:	f7f7 fbb1 	bl	8009634 <HAL_Delay>
      ms++;
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	3301      	adds	r3, #1
 8011ed6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	f001 fa2c 	bl	8013336 <USB_GetMode>
 8011ede:	4603      	mov	r3, r0
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d005      	beq.n	8011ef0 <USB_SetCurrentMode+0x84>
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	2b31      	cmp	r3, #49	; 0x31
 8011ee8:	d9f0      	bls.n	8011ecc <USB_SetCurrentMode+0x60>
 8011eea:	e001      	b.n	8011ef0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011eec:	2301      	movs	r3, #1
 8011eee:	e005      	b.n	8011efc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	2b32      	cmp	r3, #50	; 0x32
 8011ef4:	d101      	bne.n	8011efa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	e000      	b.n	8011efc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011efa:	2300      	movs	r3, #0
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	3710      	adds	r7, #16
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}

08011f04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011f04:	b084      	sub	sp, #16
 8011f06:	b580      	push	{r7, lr}
 8011f08:	b086      	sub	sp, #24
 8011f0a:	af00      	add	r7, sp, #0
 8011f0c:	6078      	str	r0, [r7, #4]
 8011f0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011f16:	2300      	movs	r3, #0
 8011f18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011f1e:	2300      	movs	r3, #0
 8011f20:	613b      	str	r3, [r7, #16]
 8011f22:	e009      	b.n	8011f38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011f24:	687a      	ldr	r2, [r7, #4]
 8011f26:	693b      	ldr	r3, [r7, #16]
 8011f28:	3340      	adds	r3, #64	; 0x40
 8011f2a:	009b      	lsls	r3, r3, #2
 8011f2c:	4413      	add	r3, r2
 8011f2e:	2200      	movs	r2, #0
 8011f30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	3301      	adds	r3, #1
 8011f36:	613b      	str	r3, [r7, #16]
 8011f38:	693b      	ldr	r3, [r7, #16]
 8011f3a:	2b0e      	cmp	r3, #14
 8011f3c:	d9f2      	bls.n	8011f24 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d11c      	bne.n	8011f7e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f4a:	685b      	ldr	r3, [r3, #4]
 8011f4c:	68fa      	ldr	r2, [r7, #12]
 8011f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011f52:	f043 0302 	orr.w	r3, r3, #2
 8011f56:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f68:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f74:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	639a      	str	r2, [r3, #56]	; 0x38
 8011f7c:	e00b      	b.n	8011f96 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f82:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011f9c:	461a      	mov	r2, r3
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fa8:	4619      	mov	r1, r3
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fb0:	461a      	mov	r2, r3
 8011fb2:	680b      	ldr	r3, [r1, #0]
 8011fb4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fb8:	2b01      	cmp	r3, #1
 8011fba:	d10c      	bne.n	8011fd6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d104      	bne.n	8011fcc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011fc2:	2100      	movs	r1, #0
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f000 f965 	bl	8012294 <USB_SetDevSpeed>
 8011fca:	e008      	b.n	8011fde <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011fcc:	2101      	movs	r1, #1
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	f000 f960 	bl	8012294 <USB_SetDevSpeed>
 8011fd4:	e003      	b.n	8011fde <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011fd6:	2103      	movs	r1, #3
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f000 f95b 	bl	8012294 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011fde:	2110      	movs	r1, #16
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f000 f8f3 	bl	80121cc <USB_FlushTxFifo>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d001      	beq.n	8011ff0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8011fec:	2301      	movs	r3, #1
 8011fee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f000 f91f 	bl	8012234 <USB_FlushRxFifo>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d001      	beq.n	8012000 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012006:	461a      	mov	r2, r3
 8012008:	2300      	movs	r3, #0
 801200a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012012:	461a      	mov	r2, r3
 8012014:	2300      	movs	r3, #0
 8012016:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801201e:	461a      	mov	r2, r3
 8012020:	2300      	movs	r3, #0
 8012022:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012024:	2300      	movs	r3, #0
 8012026:	613b      	str	r3, [r7, #16]
 8012028:	e043      	b.n	80120b2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801202a:	693b      	ldr	r3, [r7, #16]
 801202c:	015a      	lsls	r2, r3, #5
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	4413      	add	r3, r2
 8012032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801203c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012040:	d118      	bne.n	8012074 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8012042:	693b      	ldr	r3, [r7, #16]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d10a      	bne.n	801205e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012048:	693b      	ldr	r3, [r7, #16]
 801204a:	015a      	lsls	r2, r3, #5
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	4413      	add	r3, r2
 8012050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012054:	461a      	mov	r2, r3
 8012056:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801205a:	6013      	str	r3, [r2, #0]
 801205c:	e013      	b.n	8012086 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801205e:	693b      	ldr	r3, [r7, #16]
 8012060:	015a      	lsls	r2, r3, #5
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	4413      	add	r3, r2
 8012066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801206a:	461a      	mov	r2, r3
 801206c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012070:	6013      	str	r3, [r2, #0]
 8012072:	e008      	b.n	8012086 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012074:	693b      	ldr	r3, [r7, #16]
 8012076:	015a      	lsls	r2, r3, #5
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	4413      	add	r3, r2
 801207c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012080:	461a      	mov	r2, r3
 8012082:	2300      	movs	r3, #0
 8012084:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012086:	693b      	ldr	r3, [r7, #16]
 8012088:	015a      	lsls	r2, r3, #5
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	4413      	add	r3, r2
 801208e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012092:	461a      	mov	r2, r3
 8012094:	2300      	movs	r3, #0
 8012096:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012098:	693b      	ldr	r3, [r7, #16]
 801209a:	015a      	lsls	r2, r3, #5
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	4413      	add	r3, r2
 80120a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120a4:	461a      	mov	r2, r3
 80120a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80120aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80120ac:	693b      	ldr	r3, [r7, #16]
 80120ae:	3301      	adds	r3, #1
 80120b0:	613b      	str	r3, [r7, #16]
 80120b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b4:	693a      	ldr	r2, [r7, #16]
 80120b6:	429a      	cmp	r2, r3
 80120b8:	d3b7      	bcc.n	801202a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80120ba:	2300      	movs	r3, #0
 80120bc:	613b      	str	r3, [r7, #16]
 80120be:	e043      	b.n	8012148 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80120c0:	693b      	ldr	r3, [r7, #16]
 80120c2:	015a      	lsls	r2, r3, #5
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	4413      	add	r3, r2
 80120c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80120d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80120d6:	d118      	bne.n	801210a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d10a      	bne.n	80120f4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80120de:	693b      	ldr	r3, [r7, #16]
 80120e0:	015a      	lsls	r2, r3, #5
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	4413      	add	r3, r2
 80120e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120ea:	461a      	mov	r2, r3
 80120ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80120f0:	6013      	str	r3, [r2, #0]
 80120f2:	e013      	b.n	801211c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80120f4:	693b      	ldr	r3, [r7, #16]
 80120f6:	015a      	lsls	r2, r3, #5
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	4413      	add	r3, r2
 80120fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012100:	461a      	mov	r2, r3
 8012102:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012106:	6013      	str	r3, [r2, #0]
 8012108:	e008      	b.n	801211c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801210a:	693b      	ldr	r3, [r7, #16]
 801210c:	015a      	lsls	r2, r3, #5
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	4413      	add	r3, r2
 8012112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012116:	461a      	mov	r2, r3
 8012118:	2300      	movs	r3, #0
 801211a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801211c:	693b      	ldr	r3, [r7, #16]
 801211e:	015a      	lsls	r2, r3, #5
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	4413      	add	r3, r2
 8012124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012128:	461a      	mov	r2, r3
 801212a:	2300      	movs	r3, #0
 801212c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801212e:	693b      	ldr	r3, [r7, #16]
 8012130:	015a      	lsls	r2, r3, #5
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	4413      	add	r3, r2
 8012136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801213a:	461a      	mov	r2, r3
 801213c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012140:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012142:	693b      	ldr	r3, [r7, #16]
 8012144:	3301      	adds	r3, #1
 8012146:	613b      	str	r3, [r7, #16]
 8012148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801214a:	693a      	ldr	r2, [r7, #16]
 801214c:	429a      	cmp	r2, r3
 801214e:	d3b7      	bcc.n	80120c0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012156:	691b      	ldr	r3, [r3, #16]
 8012158:	68fa      	ldr	r2, [r7, #12]
 801215a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801215e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012162:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2200      	movs	r2, #0
 8012168:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012170:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012174:	2b00      	cmp	r3, #0
 8012176:	d105      	bne.n	8012184 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	699b      	ldr	r3, [r3, #24]
 801217c:	f043 0210 	orr.w	r2, r3, #16
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	699a      	ldr	r2, [r3, #24]
 8012188:	4b0f      	ldr	r3, [pc, #60]	; (80121c8 <USB_DevInit+0x2c4>)
 801218a:	4313      	orrs	r3, r2
 801218c:	687a      	ldr	r2, [r7, #4]
 801218e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012192:	2b00      	cmp	r3, #0
 8012194:	d005      	beq.n	80121a2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	699b      	ldr	r3, [r3, #24]
 801219a:	f043 0208 	orr.w	r2, r3, #8
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80121a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121a4:	2b01      	cmp	r3, #1
 80121a6:	d107      	bne.n	80121b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	699b      	ldr	r3, [r3, #24]
 80121ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80121b0:	f043 0304 	orr.w	r3, r3, #4
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80121b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3718      	adds	r7, #24
 80121be:	46bd      	mov	sp, r7
 80121c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80121c4:	b004      	add	sp, #16
 80121c6:	4770      	bx	lr
 80121c8:	803c3800 	.word	0x803c3800

080121cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80121cc:	b480      	push	{r7}
 80121ce:	b085      	sub	sp, #20
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
 80121d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80121d6:	2300      	movs	r3, #0
 80121d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	3301      	adds	r3, #1
 80121de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	4a13      	ldr	r2, [pc, #76]	; (8012230 <USB_FlushTxFifo+0x64>)
 80121e4:	4293      	cmp	r3, r2
 80121e6:	d901      	bls.n	80121ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80121e8:	2303      	movs	r3, #3
 80121ea:	e01b      	b.n	8012224 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	691b      	ldr	r3, [r3, #16]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	daf2      	bge.n	80121da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80121f4:	2300      	movs	r3, #0
 80121f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80121f8:	683b      	ldr	r3, [r7, #0]
 80121fa:	019b      	lsls	r3, r3, #6
 80121fc:	f043 0220 	orr.w	r2, r3, #32
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	3301      	adds	r3, #1
 8012208:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	4a08      	ldr	r2, [pc, #32]	; (8012230 <USB_FlushTxFifo+0x64>)
 801220e:	4293      	cmp	r3, r2
 8012210:	d901      	bls.n	8012216 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012212:	2303      	movs	r3, #3
 8012214:	e006      	b.n	8012224 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	691b      	ldr	r3, [r3, #16]
 801221a:	f003 0320 	and.w	r3, r3, #32
 801221e:	2b20      	cmp	r3, #32
 8012220:	d0f0      	beq.n	8012204 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012222:	2300      	movs	r3, #0
}
 8012224:	4618      	mov	r0, r3
 8012226:	3714      	adds	r7, #20
 8012228:	46bd      	mov	sp, r7
 801222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222e:	4770      	bx	lr
 8012230:	00030d40 	.word	0x00030d40

08012234 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012234:	b480      	push	{r7}
 8012236:	b085      	sub	sp, #20
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801223c:	2300      	movs	r3, #0
 801223e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	3301      	adds	r3, #1
 8012244:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	4a11      	ldr	r2, [pc, #68]	; (8012290 <USB_FlushRxFifo+0x5c>)
 801224a:	4293      	cmp	r3, r2
 801224c:	d901      	bls.n	8012252 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801224e:	2303      	movs	r3, #3
 8012250:	e018      	b.n	8012284 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	691b      	ldr	r3, [r3, #16]
 8012256:	2b00      	cmp	r3, #0
 8012258:	daf2      	bge.n	8012240 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801225a:	2300      	movs	r3, #0
 801225c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	2210      	movs	r2, #16
 8012262:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	3301      	adds	r3, #1
 8012268:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	4a08      	ldr	r2, [pc, #32]	; (8012290 <USB_FlushRxFifo+0x5c>)
 801226e:	4293      	cmp	r3, r2
 8012270:	d901      	bls.n	8012276 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012272:	2303      	movs	r3, #3
 8012274:	e006      	b.n	8012284 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	691b      	ldr	r3, [r3, #16]
 801227a:	f003 0310 	and.w	r3, r3, #16
 801227e:	2b10      	cmp	r3, #16
 8012280:	d0f0      	beq.n	8012264 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012282:	2300      	movs	r3, #0
}
 8012284:	4618      	mov	r0, r3
 8012286:	3714      	adds	r7, #20
 8012288:	46bd      	mov	sp, r7
 801228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228e:	4770      	bx	lr
 8012290:	00030d40 	.word	0x00030d40

08012294 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012294:	b480      	push	{r7}
 8012296:	b085      	sub	sp, #20
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
 801229c:	460b      	mov	r3, r1
 801229e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80122aa:	681a      	ldr	r2, [r3, #0]
 80122ac:	78fb      	ldrb	r3, [r7, #3]
 80122ae:	68f9      	ldr	r1, [r7, #12]
 80122b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80122b4:	4313      	orrs	r3, r2
 80122b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80122b8:	2300      	movs	r3, #0
}
 80122ba:	4618      	mov	r0, r3
 80122bc:	3714      	adds	r7, #20
 80122be:	46bd      	mov	sp, r7
 80122c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c4:	4770      	bx	lr

080122c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80122c6:	b480      	push	{r7}
 80122c8:	b087      	sub	sp, #28
 80122ca:	af00      	add	r7, sp, #0
 80122cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80122d2:	693b      	ldr	r3, [r7, #16]
 80122d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80122d8:	689b      	ldr	r3, [r3, #8]
 80122da:	f003 0306 	and.w	r3, r3, #6
 80122de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d102      	bne.n	80122ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80122e6:	2300      	movs	r3, #0
 80122e8:	75fb      	strb	r3, [r7, #23]
 80122ea:	e00a      	b.n	8012302 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	2b02      	cmp	r3, #2
 80122f0:	d002      	beq.n	80122f8 <USB_GetDevSpeed+0x32>
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	2b06      	cmp	r3, #6
 80122f6:	d102      	bne.n	80122fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80122f8:	2302      	movs	r3, #2
 80122fa:	75fb      	strb	r3, [r7, #23]
 80122fc:	e001      	b.n	8012302 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80122fe:	230f      	movs	r3, #15
 8012300:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012302:	7dfb      	ldrb	r3, [r7, #23]
}
 8012304:	4618      	mov	r0, r3
 8012306:	371c      	adds	r7, #28
 8012308:	46bd      	mov	sp, r7
 801230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230e:	4770      	bx	lr

08012310 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012310:	b480      	push	{r7}
 8012312:	b085      	sub	sp, #20
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
 8012318:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	781b      	ldrb	r3, [r3, #0]
 8012322:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	785b      	ldrb	r3, [r3, #1]
 8012328:	2b01      	cmp	r3, #1
 801232a:	d13a      	bne.n	80123a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012332:	69da      	ldr	r2, [r3, #28]
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	781b      	ldrb	r3, [r3, #0]
 8012338:	f003 030f 	and.w	r3, r3, #15
 801233c:	2101      	movs	r1, #1
 801233e:	fa01 f303 	lsl.w	r3, r1, r3
 8012342:	b29b      	uxth	r3, r3
 8012344:	68f9      	ldr	r1, [r7, #12]
 8012346:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801234a:	4313      	orrs	r3, r2
 801234c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	015a      	lsls	r2, r3, #5
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	4413      	add	r3, r2
 8012356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012360:	2b00      	cmp	r3, #0
 8012362:	d155      	bne.n	8012410 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	015a      	lsls	r2, r3, #5
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	4413      	add	r3, r2
 801236c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012370:	681a      	ldr	r2, [r3, #0]
 8012372:	683b      	ldr	r3, [r7, #0]
 8012374:	68db      	ldr	r3, [r3, #12]
 8012376:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	791b      	ldrb	r3, [r3, #4]
 801237e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012380:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012382:	68bb      	ldr	r3, [r7, #8]
 8012384:	059b      	lsls	r3, r3, #22
 8012386:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012388:	4313      	orrs	r3, r2
 801238a:	68ba      	ldr	r2, [r7, #8]
 801238c:	0151      	lsls	r1, r2, #5
 801238e:	68fa      	ldr	r2, [r7, #12]
 8012390:	440a      	add	r2, r1
 8012392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801239a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801239e:	6013      	str	r3, [r2, #0]
 80123a0:	e036      	b.n	8012410 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123a8:	69da      	ldr	r2, [r3, #28]
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	781b      	ldrb	r3, [r3, #0]
 80123ae:	f003 030f 	and.w	r3, r3, #15
 80123b2:	2101      	movs	r1, #1
 80123b4:	fa01 f303 	lsl.w	r3, r1, r3
 80123b8:	041b      	lsls	r3, r3, #16
 80123ba:	68f9      	ldr	r1, [r7, #12]
 80123bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80123c0:	4313      	orrs	r3, r2
 80123c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	015a      	lsls	r2, r3, #5
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	4413      	add	r3, r2
 80123cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d11a      	bne.n	8012410 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	015a      	lsls	r2, r3, #5
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	4413      	add	r3, r2
 80123e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123e6:	681a      	ldr	r2, [r3, #0]
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	68db      	ldr	r3, [r3, #12]
 80123ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	791b      	ldrb	r3, [r3, #4]
 80123f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80123f6:	430b      	orrs	r3, r1
 80123f8:	4313      	orrs	r3, r2
 80123fa:	68ba      	ldr	r2, [r7, #8]
 80123fc:	0151      	lsls	r1, r2, #5
 80123fe:	68fa      	ldr	r2, [r7, #12]
 8012400:	440a      	add	r2, r1
 8012402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801240a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801240e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012410:	2300      	movs	r3, #0
}
 8012412:	4618      	mov	r0, r3
 8012414:	3714      	adds	r7, #20
 8012416:	46bd      	mov	sp, r7
 8012418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241c:	4770      	bx	lr
	...

08012420 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012420:	b480      	push	{r7}
 8012422:	b085      	sub	sp, #20
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
 8012428:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	781b      	ldrb	r3, [r3, #0]
 8012432:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	785b      	ldrb	r3, [r3, #1]
 8012438:	2b01      	cmp	r3, #1
 801243a:	d161      	bne.n	8012500 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801243c:	68bb      	ldr	r3, [r7, #8]
 801243e:	015a      	lsls	r2, r3, #5
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	4413      	add	r3, r2
 8012444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801244e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012452:	d11f      	bne.n	8012494 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	015a      	lsls	r2, r3, #5
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	4413      	add	r3, r2
 801245c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	68ba      	ldr	r2, [r7, #8]
 8012464:	0151      	lsls	r1, r2, #5
 8012466:	68fa      	ldr	r2, [r7, #12]
 8012468:	440a      	add	r2, r1
 801246a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801246e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012472:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	015a      	lsls	r2, r3, #5
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	4413      	add	r3, r2
 801247c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	68ba      	ldr	r2, [r7, #8]
 8012484:	0151      	lsls	r1, r2, #5
 8012486:	68fa      	ldr	r2, [r7, #12]
 8012488:	440a      	add	r2, r1
 801248a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801248e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012492:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801249a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	781b      	ldrb	r3, [r3, #0]
 80124a0:	f003 030f 	and.w	r3, r3, #15
 80124a4:	2101      	movs	r1, #1
 80124a6:	fa01 f303 	lsl.w	r3, r1, r3
 80124aa:	b29b      	uxth	r3, r3
 80124ac:	43db      	mvns	r3, r3
 80124ae:	68f9      	ldr	r1, [r7, #12]
 80124b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80124b4:	4013      	ands	r3, r2
 80124b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124be:	69da      	ldr	r2, [r3, #28]
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	781b      	ldrb	r3, [r3, #0]
 80124c4:	f003 030f 	and.w	r3, r3, #15
 80124c8:	2101      	movs	r1, #1
 80124ca:	fa01 f303 	lsl.w	r3, r1, r3
 80124ce:	b29b      	uxth	r3, r3
 80124d0:	43db      	mvns	r3, r3
 80124d2:	68f9      	ldr	r1, [r7, #12]
 80124d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80124d8:	4013      	ands	r3, r2
 80124da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80124dc:	68bb      	ldr	r3, [r7, #8]
 80124de:	015a      	lsls	r2, r3, #5
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	4413      	add	r3, r2
 80124e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124e8:	681a      	ldr	r2, [r3, #0]
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	0159      	lsls	r1, r3, #5
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	440b      	add	r3, r1
 80124f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124f6:	4619      	mov	r1, r3
 80124f8:	4b35      	ldr	r3, [pc, #212]	; (80125d0 <USB_DeactivateEndpoint+0x1b0>)
 80124fa:	4013      	ands	r3, r2
 80124fc:	600b      	str	r3, [r1, #0]
 80124fe:	e060      	b.n	80125c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	015a      	lsls	r2, r3, #5
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	4413      	add	r3, r2
 8012508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012516:	d11f      	bne.n	8012558 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012518:	68bb      	ldr	r3, [r7, #8]
 801251a:	015a      	lsls	r2, r3, #5
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	4413      	add	r3, r2
 8012520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	68ba      	ldr	r2, [r7, #8]
 8012528:	0151      	lsls	r1, r2, #5
 801252a:	68fa      	ldr	r2, [r7, #12]
 801252c:	440a      	add	r2, r1
 801252e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012532:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012536:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	015a      	lsls	r2, r3, #5
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	4413      	add	r3, r2
 8012540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	68ba      	ldr	r2, [r7, #8]
 8012548:	0151      	lsls	r1, r2, #5
 801254a:	68fa      	ldr	r2, [r7, #12]
 801254c:	440a      	add	r2, r1
 801254e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012552:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012556:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801255e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	781b      	ldrb	r3, [r3, #0]
 8012564:	f003 030f 	and.w	r3, r3, #15
 8012568:	2101      	movs	r1, #1
 801256a:	fa01 f303 	lsl.w	r3, r1, r3
 801256e:	041b      	lsls	r3, r3, #16
 8012570:	43db      	mvns	r3, r3
 8012572:	68f9      	ldr	r1, [r7, #12]
 8012574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012578:	4013      	ands	r3, r2
 801257a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012582:	69da      	ldr	r2, [r3, #28]
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	781b      	ldrb	r3, [r3, #0]
 8012588:	f003 030f 	and.w	r3, r3, #15
 801258c:	2101      	movs	r1, #1
 801258e:	fa01 f303 	lsl.w	r3, r1, r3
 8012592:	041b      	lsls	r3, r3, #16
 8012594:	43db      	mvns	r3, r3
 8012596:	68f9      	ldr	r1, [r7, #12]
 8012598:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801259c:	4013      	ands	r3, r2
 801259e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80125a0:	68bb      	ldr	r3, [r7, #8]
 80125a2:	015a      	lsls	r2, r3, #5
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	4413      	add	r3, r2
 80125a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125ac:	681a      	ldr	r2, [r3, #0]
 80125ae:	68bb      	ldr	r3, [r7, #8]
 80125b0:	0159      	lsls	r1, r3, #5
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	440b      	add	r3, r1
 80125b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125ba:	4619      	mov	r1, r3
 80125bc:	4b05      	ldr	r3, [pc, #20]	; (80125d4 <USB_DeactivateEndpoint+0x1b4>)
 80125be:	4013      	ands	r3, r2
 80125c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80125c2:	2300      	movs	r3, #0
}
 80125c4:	4618      	mov	r0, r3
 80125c6:	3714      	adds	r7, #20
 80125c8:	46bd      	mov	sp, r7
 80125ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ce:	4770      	bx	lr
 80125d0:	ec337800 	.word	0xec337800
 80125d4:	eff37800 	.word	0xeff37800

080125d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b08a      	sub	sp, #40	; 0x28
 80125dc:	af02      	add	r7, sp, #8
 80125de:	60f8      	str	r0, [r7, #12]
 80125e0:	60b9      	str	r1, [r7, #8]
 80125e2:	4613      	mov	r3, r2
 80125e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80125f0:	68bb      	ldr	r3, [r7, #8]
 80125f2:	785b      	ldrb	r3, [r3, #1]
 80125f4:	2b01      	cmp	r3, #1
 80125f6:	f040 815c 	bne.w	80128b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	699b      	ldr	r3, [r3, #24]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d132      	bne.n	8012668 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012602:	69bb      	ldr	r3, [r7, #24]
 8012604:	015a      	lsls	r2, r3, #5
 8012606:	69fb      	ldr	r3, [r7, #28]
 8012608:	4413      	add	r3, r2
 801260a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801260e:	691b      	ldr	r3, [r3, #16]
 8012610:	69ba      	ldr	r2, [r7, #24]
 8012612:	0151      	lsls	r1, r2, #5
 8012614:	69fa      	ldr	r2, [r7, #28]
 8012616:	440a      	add	r2, r1
 8012618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801261c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012620:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012624:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012626:	69bb      	ldr	r3, [r7, #24]
 8012628:	015a      	lsls	r2, r3, #5
 801262a:	69fb      	ldr	r3, [r7, #28]
 801262c:	4413      	add	r3, r2
 801262e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012632:	691b      	ldr	r3, [r3, #16]
 8012634:	69ba      	ldr	r2, [r7, #24]
 8012636:	0151      	lsls	r1, r2, #5
 8012638:	69fa      	ldr	r2, [r7, #28]
 801263a:	440a      	add	r2, r1
 801263c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012640:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012644:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012646:	69bb      	ldr	r3, [r7, #24]
 8012648:	015a      	lsls	r2, r3, #5
 801264a:	69fb      	ldr	r3, [r7, #28]
 801264c:	4413      	add	r3, r2
 801264e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012652:	691b      	ldr	r3, [r3, #16]
 8012654:	69ba      	ldr	r2, [r7, #24]
 8012656:	0151      	lsls	r1, r2, #5
 8012658:	69fa      	ldr	r2, [r7, #28]
 801265a:	440a      	add	r2, r1
 801265c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012660:	0cdb      	lsrs	r3, r3, #19
 8012662:	04db      	lsls	r3, r3, #19
 8012664:	6113      	str	r3, [r2, #16]
 8012666:	e074      	b.n	8012752 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012668:	69bb      	ldr	r3, [r7, #24]
 801266a:	015a      	lsls	r2, r3, #5
 801266c:	69fb      	ldr	r3, [r7, #28]
 801266e:	4413      	add	r3, r2
 8012670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012674:	691b      	ldr	r3, [r3, #16]
 8012676:	69ba      	ldr	r2, [r7, #24]
 8012678:	0151      	lsls	r1, r2, #5
 801267a:	69fa      	ldr	r2, [r7, #28]
 801267c:	440a      	add	r2, r1
 801267e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012682:	0cdb      	lsrs	r3, r3, #19
 8012684:	04db      	lsls	r3, r3, #19
 8012686:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012688:	69bb      	ldr	r3, [r7, #24]
 801268a:	015a      	lsls	r2, r3, #5
 801268c:	69fb      	ldr	r3, [r7, #28]
 801268e:	4413      	add	r3, r2
 8012690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012694:	691b      	ldr	r3, [r3, #16]
 8012696:	69ba      	ldr	r2, [r7, #24]
 8012698:	0151      	lsls	r1, r2, #5
 801269a:	69fa      	ldr	r2, [r7, #28]
 801269c:	440a      	add	r2, r1
 801269e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80126a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80126aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80126ac:	69bb      	ldr	r3, [r7, #24]
 80126ae:	015a      	lsls	r2, r3, #5
 80126b0:	69fb      	ldr	r3, [r7, #28]
 80126b2:	4413      	add	r3, r2
 80126b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126b8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80126ba:	68bb      	ldr	r3, [r7, #8]
 80126bc:	6999      	ldr	r1, [r3, #24]
 80126be:	68bb      	ldr	r3, [r7, #8]
 80126c0:	68db      	ldr	r3, [r3, #12]
 80126c2:	440b      	add	r3, r1
 80126c4:	1e59      	subs	r1, r3, #1
 80126c6:	68bb      	ldr	r3, [r7, #8]
 80126c8:	68db      	ldr	r3, [r3, #12]
 80126ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80126ce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80126d0:	4b9d      	ldr	r3, [pc, #628]	; (8012948 <USB_EPStartXfer+0x370>)
 80126d2:	400b      	ands	r3, r1
 80126d4:	69b9      	ldr	r1, [r7, #24]
 80126d6:	0148      	lsls	r0, r1, #5
 80126d8:	69f9      	ldr	r1, [r7, #28]
 80126da:	4401      	add	r1, r0
 80126dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80126e0:	4313      	orrs	r3, r2
 80126e2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80126e4:	69bb      	ldr	r3, [r7, #24]
 80126e6:	015a      	lsls	r2, r3, #5
 80126e8:	69fb      	ldr	r3, [r7, #28]
 80126ea:	4413      	add	r3, r2
 80126ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126f0:	691a      	ldr	r2, [r3, #16]
 80126f2:	68bb      	ldr	r3, [r7, #8]
 80126f4:	699b      	ldr	r3, [r3, #24]
 80126f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80126fa:	69b9      	ldr	r1, [r7, #24]
 80126fc:	0148      	lsls	r0, r1, #5
 80126fe:	69f9      	ldr	r1, [r7, #28]
 8012700:	4401      	add	r1, r0
 8012702:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012706:	4313      	orrs	r3, r2
 8012708:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801270a:	68bb      	ldr	r3, [r7, #8]
 801270c:	791b      	ldrb	r3, [r3, #4]
 801270e:	2b01      	cmp	r3, #1
 8012710:	d11f      	bne.n	8012752 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012712:	69bb      	ldr	r3, [r7, #24]
 8012714:	015a      	lsls	r2, r3, #5
 8012716:	69fb      	ldr	r3, [r7, #28]
 8012718:	4413      	add	r3, r2
 801271a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801271e:	691b      	ldr	r3, [r3, #16]
 8012720:	69ba      	ldr	r2, [r7, #24]
 8012722:	0151      	lsls	r1, r2, #5
 8012724:	69fa      	ldr	r2, [r7, #28]
 8012726:	440a      	add	r2, r1
 8012728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801272c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012730:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012732:	69bb      	ldr	r3, [r7, #24]
 8012734:	015a      	lsls	r2, r3, #5
 8012736:	69fb      	ldr	r3, [r7, #28]
 8012738:	4413      	add	r3, r2
 801273a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801273e:	691b      	ldr	r3, [r3, #16]
 8012740:	69ba      	ldr	r2, [r7, #24]
 8012742:	0151      	lsls	r1, r2, #5
 8012744:	69fa      	ldr	r2, [r7, #28]
 8012746:	440a      	add	r2, r1
 8012748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801274c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012750:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8012752:	79fb      	ldrb	r3, [r7, #7]
 8012754:	2b01      	cmp	r3, #1
 8012756:	d14b      	bne.n	80127f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012758:	68bb      	ldr	r3, [r7, #8]
 801275a:	695b      	ldr	r3, [r3, #20]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d009      	beq.n	8012774 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012760:	69bb      	ldr	r3, [r7, #24]
 8012762:	015a      	lsls	r2, r3, #5
 8012764:	69fb      	ldr	r3, [r7, #28]
 8012766:	4413      	add	r3, r2
 8012768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801276c:	461a      	mov	r2, r3
 801276e:	68bb      	ldr	r3, [r7, #8]
 8012770:	695b      	ldr	r3, [r3, #20]
 8012772:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8012774:	68bb      	ldr	r3, [r7, #8]
 8012776:	791b      	ldrb	r3, [r3, #4]
 8012778:	2b01      	cmp	r3, #1
 801277a:	d128      	bne.n	80127ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801277c:	69fb      	ldr	r3, [r7, #28]
 801277e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012782:	689b      	ldr	r3, [r3, #8]
 8012784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012788:	2b00      	cmp	r3, #0
 801278a:	d110      	bne.n	80127ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801278c:	69bb      	ldr	r3, [r7, #24]
 801278e:	015a      	lsls	r2, r3, #5
 8012790:	69fb      	ldr	r3, [r7, #28]
 8012792:	4413      	add	r3, r2
 8012794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	69ba      	ldr	r2, [r7, #24]
 801279c:	0151      	lsls	r1, r2, #5
 801279e:	69fa      	ldr	r2, [r7, #28]
 80127a0:	440a      	add	r2, r1
 80127a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80127aa:	6013      	str	r3, [r2, #0]
 80127ac:	e00f      	b.n	80127ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80127ae:	69bb      	ldr	r3, [r7, #24]
 80127b0:	015a      	lsls	r2, r3, #5
 80127b2:	69fb      	ldr	r3, [r7, #28]
 80127b4:	4413      	add	r3, r2
 80127b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	69ba      	ldr	r2, [r7, #24]
 80127be:	0151      	lsls	r1, r2, #5
 80127c0:	69fa      	ldr	r2, [r7, #28]
 80127c2:	440a      	add	r2, r1
 80127c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80127cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80127ce:	69bb      	ldr	r3, [r7, #24]
 80127d0:	015a      	lsls	r2, r3, #5
 80127d2:	69fb      	ldr	r3, [r7, #28]
 80127d4:	4413      	add	r3, r2
 80127d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	69ba      	ldr	r2, [r7, #24]
 80127de:	0151      	lsls	r1, r2, #5
 80127e0:	69fa      	ldr	r2, [r7, #28]
 80127e2:	440a      	add	r2, r1
 80127e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80127ec:	6013      	str	r3, [r2, #0]
 80127ee:	e133      	b.n	8012a58 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80127f0:	69bb      	ldr	r3, [r7, #24]
 80127f2:	015a      	lsls	r2, r3, #5
 80127f4:	69fb      	ldr	r3, [r7, #28]
 80127f6:	4413      	add	r3, r2
 80127f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	69ba      	ldr	r2, [r7, #24]
 8012800:	0151      	lsls	r1, r2, #5
 8012802:	69fa      	ldr	r2, [r7, #28]
 8012804:	440a      	add	r2, r1
 8012806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801280a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801280e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	791b      	ldrb	r3, [r3, #4]
 8012814:	2b01      	cmp	r3, #1
 8012816:	d015      	beq.n	8012844 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	699b      	ldr	r3, [r3, #24]
 801281c:	2b00      	cmp	r3, #0
 801281e:	f000 811b 	beq.w	8012a58 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012822:	69fb      	ldr	r3, [r7, #28]
 8012824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801282a:	68bb      	ldr	r3, [r7, #8]
 801282c:	781b      	ldrb	r3, [r3, #0]
 801282e:	f003 030f 	and.w	r3, r3, #15
 8012832:	2101      	movs	r1, #1
 8012834:	fa01 f303 	lsl.w	r3, r1, r3
 8012838:	69f9      	ldr	r1, [r7, #28]
 801283a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801283e:	4313      	orrs	r3, r2
 8012840:	634b      	str	r3, [r1, #52]	; 0x34
 8012842:	e109      	b.n	8012a58 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012844:	69fb      	ldr	r3, [r7, #28]
 8012846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801284a:	689b      	ldr	r3, [r3, #8]
 801284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012850:	2b00      	cmp	r3, #0
 8012852:	d110      	bne.n	8012876 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012854:	69bb      	ldr	r3, [r7, #24]
 8012856:	015a      	lsls	r2, r3, #5
 8012858:	69fb      	ldr	r3, [r7, #28]
 801285a:	4413      	add	r3, r2
 801285c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	69ba      	ldr	r2, [r7, #24]
 8012864:	0151      	lsls	r1, r2, #5
 8012866:	69fa      	ldr	r2, [r7, #28]
 8012868:	440a      	add	r2, r1
 801286a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801286e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012872:	6013      	str	r3, [r2, #0]
 8012874:	e00f      	b.n	8012896 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012876:	69bb      	ldr	r3, [r7, #24]
 8012878:	015a      	lsls	r2, r3, #5
 801287a:	69fb      	ldr	r3, [r7, #28]
 801287c:	4413      	add	r3, r2
 801287e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	69ba      	ldr	r2, [r7, #24]
 8012886:	0151      	lsls	r1, r2, #5
 8012888:	69fa      	ldr	r2, [r7, #28]
 801288a:	440a      	add	r2, r1
 801288c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012894:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8012896:	68bb      	ldr	r3, [r7, #8]
 8012898:	6919      	ldr	r1, [r3, #16]
 801289a:	68bb      	ldr	r3, [r7, #8]
 801289c:	781a      	ldrb	r2, [r3, #0]
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	699b      	ldr	r3, [r3, #24]
 80128a2:	b298      	uxth	r0, r3
 80128a4:	79fb      	ldrb	r3, [r7, #7]
 80128a6:	9300      	str	r3, [sp, #0]
 80128a8:	4603      	mov	r3, r0
 80128aa:	68f8      	ldr	r0, [r7, #12]
 80128ac:	f000 fade 	bl	8012e6c <USB_WritePacket>
 80128b0:	e0d2      	b.n	8012a58 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80128b2:	69bb      	ldr	r3, [r7, #24]
 80128b4:	015a      	lsls	r2, r3, #5
 80128b6:	69fb      	ldr	r3, [r7, #28]
 80128b8:	4413      	add	r3, r2
 80128ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128be:	691b      	ldr	r3, [r3, #16]
 80128c0:	69ba      	ldr	r2, [r7, #24]
 80128c2:	0151      	lsls	r1, r2, #5
 80128c4:	69fa      	ldr	r2, [r7, #28]
 80128c6:	440a      	add	r2, r1
 80128c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80128cc:	0cdb      	lsrs	r3, r3, #19
 80128ce:	04db      	lsls	r3, r3, #19
 80128d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80128d2:	69bb      	ldr	r3, [r7, #24]
 80128d4:	015a      	lsls	r2, r3, #5
 80128d6:	69fb      	ldr	r3, [r7, #28]
 80128d8:	4413      	add	r3, r2
 80128da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128de:	691b      	ldr	r3, [r3, #16]
 80128e0:	69ba      	ldr	r2, [r7, #24]
 80128e2:	0151      	lsls	r1, r2, #5
 80128e4:	69fa      	ldr	r2, [r7, #28]
 80128e6:	440a      	add	r2, r1
 80128e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80128ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80128f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80128f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80128f6:	68bb      	ldr	r3, [r7, #8]
 80128f8:	699b      	ldr	r3, [r3, #24]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d126      	bne.n	801294c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80128fe:	69bb      	ldr	r3, [r7, #24]
 8012900:	015a      	lsls	r2, r3, #5
 8012902:	69fb      	ldr	r3, [r7, #28]
 8012904:	4413      	add	r3, r2
 8012906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801290a:	691a      	ldr	r2, [r3, #16]
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	68db      	ldr	r3, [r3, #12]
 8012910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012914:	69b9      	ldr	r1, [r7, #24]
 8012916:	0148      	lsls	r0, r1, #5
 8012918:	69f9      	ldr	r1, [r7, #28]
 801291a:	4401      	add	r1, r0
 801291c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012920:	4313      	orrs	r3, r2
 8012922:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012924:	69bb      	ldr	r3, [r7, #24]
 8012926:	015a      	lsls	r2, r3, #5
 8012928:	69fb      	ldr	r3, [r7, #28]
 801292a:	4413      	add	r3, r2
 801292c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012930:	691b      	ldr	r3, [r3, #16]
 8012932:	69ba      	ldr	r2, [r7, #24]
 8012934:	0151      	lsls	r1, r2, #5
 8012936:	69fa      	ldr	r2, [r7, #28]
 8012938:	440a      	add	r2, r1
 801293a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801293e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012942:	6113      	str	r3, [r2, #16]
 8012944:	e03a      	b.n	80129bc <USB_EPStartXfer+0x3e4>
 8012946:	bf00      	nop
 8012948:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	699a      	ldr	r2, [r3, #24]
 8012950:	68bb      	ldr	r3, [r7, #8]
 8012952:	68db      	ldr	r3, [r3, #12]
 8012954:	4413      	add	r3, r2
 8012956:	1e5a      	subs	r2, r3, #1
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	68db      	ldr	r3, [r3, #12]
 801295c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012960:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8012962:	68bb      	ldr	r3, [r7, #8]
 8012964:	68db      	ldr	r3, [r3, #12]
 8012966:	8afa      	ldrh	r2, [r7, #22]
 8012968:	fb03 f202 	mul.w	r2, r3, r2
 801296c:	68bb      	ldr	r3, [r7, #8]
 801296e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8012970:	69bb      	ldr	r3, [r7, #24]
 8012972:	015a      	lsls	r2, r3, #5
 8012974:	69fb      	ldr	r3, [r7, #28]
 8012976:	4413      	add	r3, r2
 8012978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801297c:	691a      	ldr	r2, [r3, #16]
 801297e:	8afb      	ldrh	r3, [r7, #22]
 8012980:	04d9      	lsls	r1, r3, #19
 8012982:	4b38      	ldr	r3, [pc, #224]	; (8012a64 <USB_EPStartXfer+0x48c>)
 8012984:	400b      	ands	r3, r1
 8012986:	69b9      	ldr	r1, [r7, #24]
 8012988:	0148      	lsls	r0, r1, #5
 801298a:	69f9      	ldr	r1, [r7, #28]
 801298c:	4401      	add	r1, r0
 801298e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012992:	4313      	orrs	r3, r2
 8012994:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8012996:	69bb      	ldr	r3, [r7, #24]
 8012998:	015a      	lsls	r2, r3, #5
 801299a:	69fb      	ldr	r3, [r7, #28]
 801299c:	4413      	add	r3, r2
 801299e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129a2:	691a      	ldr	r2, [r3, #16]
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	69db      	ldr	r3, [r3, #28]
 80129a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80129ac:	69b9      	ldr	r1, [r7, #24]
 80129ae:	0148      	lsls	r0, r1, #5
 80129b0:	69f9      	ldr	r1, [r7, #28]
 80129b2:	4401      	add	r1, r0
 80129b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80129b8:	4313      	orrs	r3, r2
 80129ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80129bc:	79fb      	ldrb	r3, [r7, #7]
 80129be:	2b01      	cmp	r3, #1
 80129c0:	d10d      	bne.n	80129de <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	691b      	ldr	r3, [r3, #16]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d009      	beq.n	80129de <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	6919      	ldr	r1, [r3, #16]
 80129ce:	69bb      	ldr	r3, [r7, #24]
 80129d0:	015a      	lsls	r2, r3, #5
 80129d2:	69fb      	ldr	r3, [r7, #28]
 80129d4:	4413      	add	r3, r2
 80129d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129da:	460a      	mov	r2, r1
 80129dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80129de:	68bb      	ldr	r3, [r7, #8]
 80129e0:	791b      	ldrb	r3, [r3, #4]
 80129e2:	2b01      	cmp	r3, #1
 80129e4:	d128      	bne.n	8012a38 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80129e6:	69fb      	ldr	r3, [r7, #28]
 80129e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129ec:	689b      	ldr	r3, [r3, #8]
 80129ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d110      	bne.n	8012a18 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80129f6:	69bb      	ldr	r3, [r7, #24]
 80129f8:	015a      	lsls	r2, r3, #5
 80129fa:	69fb      	ldr	r3, [r7, #28]
 80129fc:	4413      	add	r3, r2
 80129fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	69ba      	ldr	r2, [r7, #24]
 8012a06:	0151      	lsls	r1, r2, #5
 8012a08:	69fa      	ldr	r2, [r7, #28]
 8012a0a:	440a      	add	r2, r1
 8012a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012a14:	6013      	str	r3, [r2, #0]
 8012a16:	e00f      	b.n	8012a38 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012a18:	69bb      	ldr	r3, [r7, #24]
 8012a1a:	015a      	lsls	r2, r3, #5
 8012a1c:	69fb      	ldr	r3, [r7, #28]
 8012a1e:	4413      	add	r3, r2
 8012a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	69ba      	ldr	r2, [r7, #24]
 8012a28:	0151      	lsls	r1, r2, #5
 8012a2a:	69fa      	ldr	r2, [r7, #28]
 8012a2c:	440a      	add	r2, r1
 8012a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012a36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012a38:	69bb      	ldr	r3, [r7, #24]
 8012a3a:	015a      	lsls	r2, r3, #5
 8012a3c:	69fb      	ldr	r3, [r7, #28]
 8012a3e:	4413      	add	r3, r2
 8012a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	69ba      	ldr	r2, [r7, #24]
 8012a48:	0151      	lsls	r1, r2, #5
 8012a4a:	69fa      	ldr	r2, [r7, #28]
 8012a4c:	440a      	add	r2, r1
 8012a4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012a56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012a58:	2300      	movs	r3, #0
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	3720      	adds	r7, #32
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}
 8012a62:	bf00      	nop
 8012a64:	1ff80000 	.word	0x1ff80000

08012a68 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012a68:	b480      	push	{r7}
 8012a6a:	b087      	sub	sp, #28
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	60f8      	str	r0, [r7, #12]
 8012a70:	60b9      	str	r1, [r7, #8]
 8012a72:	4613      	mov	r3, r2
 8012a74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8012a7a:	68bb      	ldr	r3, [r7, #8]
 8012a7c:	781b      	ldrb	r3, [r3, #0]
 8012a7e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	785b      	ldrb	r3, [r3, #1]
 8012a84:	2b01      	cmp	r3, #1
 8012a86:	f040 80ce 	bne.w	8012c26 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	699b      	ldr	r3, [r3, #24]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d132      	bne.n	8012af8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	015a      	lsls	r2, r3, #5
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	4413      	add	r3, r2
 8012a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a9e:	691b      	ldr	r3, [r3, #16]
 8012aa0:	693a      	ldr	r2, [r7, #16]
 8012aa2:	0151      	lsls	r1, r2, #5
 8012aa4:	697a      	ldr	r2, [r7, #20]
 8012aa6:	440a      	add	r2, r1
 8012aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012aac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012ab0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012ab4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012ab6:	693b      	ldr	r3, [r7, #16]
 8012ab8:	015a      	lsls	r2, r3, #5
 8012aba:	697b      	ldr	r3, [r7, #20]
 8012abc:	4413      	add	r3, r2
 8012abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ac2:	691b      	ldr	r3, [r3, #16]
 8012ac4:	693a      	ldr	r2, [r7, #16]
 8012ac6:	0151      	lsls	r1, r2, #5
 8012ac8:	697a      	ldr	r2, [r7, #20]
 8012aca:	440a      	add	r2, r1
 8012acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ad0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012ad4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012ad6:	693b      	ldr	r3, [r7, #16]
 8012ad8:	015a      	lsls	r2, r3, #5
 8012ada:	697b      	ldr	r3, [r7, #20]
 8012adc:	4413      	add	r3, r2
 8012ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ae2:	691b      	ldr	r3, [r3, #16]
 8012ae4:	693a      	ldr	r2, [r7, #16]
 8012ae6:	0151      	lsls	r1, r2, #5
 8012ae8:	697a      	ldr	r2, [r7, #20]
 8012aea:	440a      	add	r2, r1
 8012aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012af0:	0cdb      	lsrs	r3, r3, #19
 8012af2:	04db      	lsls	r3, r3, #19
 8012af4:	6113      	str	r3, [r2, #16]
 8012af6:	e04e      	b.n	8012b96 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012af8:	693b      	ldr	r3, [r7, #16]
 8012afa:	015a      	lsls	r2, r3, #5
 8012afc:	697b      	ldr	r3, [r7, #20]
 8012afe:	4413      	add	r3, r2
 8012b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b04:	691b      	ldr	r3, [r3, #16]
 8012b06:	693a      	ldr	r2, [r7, #16]
 8012b08:	0151      	lsls	r1, r2, #5
 8012b0a:	697a      	ldr	r2, [r7, #20]
 8012b0c:	440a      	add	r2, r1
 8012b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b12:	0cdb      	lsrs	r3, r3, #19
 8012b14:	04db      	lsls	r3, r3, #19
 8012b16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012b18:	693b      	ldr	r3, [r7, #16]
 8012b1a:	015a      	lsls	r2, r3, #5
 8012b1c:	697b      	ldr	r3, [r7, #20]
 8012b1e:	4413      	add	r3, r2
 8012b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b24:	691b      	ldr	r3, [r3, #16]
 8012b26:	693a      	ldr	r2, [r7, #16]
 8012b28:	0151      	lsls	r1, r2, #5
 8012b2a:	697a      	ldr	r2, [r7, #20]
 8012b2c:	440a      	add	r2, r1
 8012b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012b36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012b3a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8012b3c:	68bb      	ldr	r3, [r7, #8]
 8012b3e:	699a      	ldr	r2, [r3, #24]
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	68db      	ldr	r3, [r3, #12]
 8012b44:	429a      	cmp	r2, r3
 8012b46:	d903      	bls.n	8012b50 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8012b48:	68bb      	ldr	r3, [r7, #8]
 8012b4a:	68da      	ldr	r2, [r3, #12]
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012b50:	693b      	ldr	r3, [r7, #16]
 8012b52:	015a      	lsls	r2, r3, #5
 8012b54:	697b      	ldr	r3, [r7, #20]
 8012b56:	4413      	add	r3, r2
 8012b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b5c:	691b      	ldr	r3, [r3, #16]
 8012b5e:	693a      	ldr	r2, [r7, #16]
 8012b60:	0151      	lsls	r1, r2, #5
 8012b62:	697a      	ldr	r2, [r7, #20]
 8012b64:	440a      	add	r2, r1
 8012b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012b6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012b70:	693b      	ldr	r3, [r7, #16]
 8012b72:	015a      	lsls	r2, r3, #5
 8012b74:	697b      	ldr	r3, [r7, #20]
 8012b76:	4413      	add	r3, r2
 8012b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b7c:	691a      	ldr	r2, [r3, #16]
 8012b7e:	68bb      	ldr	r3, [r7, #8]
 8012b80:	699b      	ldr	r3, [r3, #24]
 8012b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012b86:	6939      	ldr	r1, [r7, #16]
 8012b88:	0148      	lsls	r0, r1, #5
 8012b8a:	6979      	ldr	r1, [r7, #20]
 8012b8c:	4401      	add	r1, r0
 8012b8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012b92:	4313      	orrs	r3, r2
 8012b94:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012b96:	79fb      	ldrb	r3, [r7, #7]
 8012b98:	2b01      	cmp	r3, #1
 8012b9a:	d11e      	bne.n	8012bda <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012b9c:	68bb      	ldr	r3, [r7, #8]
 8012b9e:	695b      	ldr	r3, [r3, #20]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d009      	beq.n	8012bb8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012ba4:	693b      	ldr	r3, [r7, #16]
 8012ba6:	015a      	lsls	r2, r3, #5
 8012ba8:	697b      	ldr	r3, [r7, #20]
 8012baa:	4413      	add	r3, r2
 8012bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bb0:	461a      	mov	r2, r3
 8012bb2:	68bb      	ldr	r3, [r7, #8]
 8012bb4:	695b      	ldr	r3, [r3, #20]
 8012bb6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012bb8:	693b      	ldr	r3, [r7, #16]
 8012bba:	015a      	lsls	r2, r3, #5
 8012bbc:	697b      	ldr	r3, [r7, #20]
 8012bbe:	4413      	add	r3, r2
 8012bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	693a      	ldr	r2, [r7, #16]
 8012bc8:	0151      	lsls	r1, r2, #5
 8012bca:	697a      	ldr	r2, [r7, #20]
 8012bcc:	440a      	add	r2, r1
 8012bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012bd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012bd6:	6013      	str	r3, [r2, #0]
 8012bd8:	e097      	b.n	8012d0a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012bda:	693b      	ldr	r3, [r7, #16]
 8012bdc:	015a      	lsls	r2, r3, #5
 8012bde:	697b      	ldr	r3, [r7, #20]
 8012be0:	4413      	add	r3, r2
 8012be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	693a      	ldr	r2, [r7, #16]
 8012bea:	0151      	lsls	r1, r2, #5
 8012bec:	697a      	ldr	r2, [r7, #20]
 8012bee:	440a      	add	r2, r1
 8012bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012bf4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012bf8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	699b      	ldr	r3, [r3, #24]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	f000 8083 	beq.w	8012d0a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012c04:	697b      	ldr	r3, [r7, #20]
 8012c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012c0c:	68bb      	ldr	r3, [r7, #8]
 8012c0e:	781b      	ldrb	r3, [r3, #0]
 8012c10:	f003 030f 	and.w	r3, r3, #15
 8012c14:	2101      	movs	r1, #1
 8012c16:	fa01 f303 	lsl.w	r3, r1, r3
 8012c1a:	6979      	ldr	r1, [r7, #20]
 8012c1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012c20:	4313      	orrs	r3, r2
 8012c22:	634b      	str	r3, [r1, #52]	; 0x34
 8012c24:	e071      	b.n	8012d0a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012c26:	693b      	ldr	r3, [r7, #16]
 8012c28:	015a      	lsls	r2, r3, #5
 8012c2a:	697b      	ldr	r3, [r7, #20]
 8012c2c:	4413      	add	r3, r2
 8012c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c32:	691b      	ldr	r3, [r3, #16]
 8012c34:	693a      	ldr	r2, [r7, #16]
 8012c36:	0151      	lsls	r1, r2, #5
 8012c38:	697a      	ldr	r2, [r7, #20]
 8012c3a:	440a      	add	r2, r1
 8012c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c40:	0cdb      	lsrs	r3, r3, #19
 8012c42:	04db      	lsls	r3, r3, #19
 8012c44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	015a      	lsls	r2, r3, #5
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	4413      	add	r3, r2
 8012c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c52:	691b      	ldr	r3, [r3, #16]
 8012c54:	693a      	ldr	r2, [r7, #16]
 8012c56:	0151      	lsls	r1, r2, #5
 8012c58:	697a      	ldr	r2, [r7, #20]
 8012c5a:	440a      	add	r2, r1
 8012c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012c64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012c68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8012c6a:	68bb      	ldr	r3, [r7, #8]
 8012c6c:	699b      	ldr	r3, [r3, #24]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d003      	beq.n	8012c7a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8012c72:	68bb      	ldr	r3, [r7, #8]
 8012c74:	68da      	ldr	r2, [r3, #12]
 8012c76:	68bb      	ldr	r3, [r7, #8]
 8012c78:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8012c7a:	68bb      	ldr	r3, [r7, #8]
 8012c7c:	68da      	ldr	r2, [r3, #12]
 8012c7e:	68bb      	ldr	r3, [r7, #8]
 8012c80:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012c82:	693b      	ldr	r3, [r7, #16]
 8012c84:	015a      	lsls	r2, r3, #5
 8012c86:	697b      	ldr	r3, [r7, #20]
 8012c88:	4413      	add	r3, r2
 8012c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c8e:	691b      	ldr	r3, [r3, #16]
 8012c90:	693a      	ldr	r2, [r7, #16]
 8012c92:	0151      	lsls	r1, r2, #5
 8012c94:	697a      	ldr	r2, [r7, #20]
 8012c96:	440a      	add	r2, r1
 8012c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012ca0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8012ca2:	693b      	ldr	r3, [r7, #16]
 8012ca4:	015a      	lsls	r2, r3, #5
 8012ca6:	697b      	ldr	r3, [r7, #20]
 8012ca8:	4413      	add	r3, r2
 8012caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cae:	691a      	ldr	r2, [r3, #16]
 8012cb0:	68bb      	ldr	r3, [r7, #8]
 8012cb2:	69db      	ldr	r3, [r3, #28]
 8012cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012cb8:	6939      	ldr	r1, [r7, #16]
 8012cba:	0148      	lsls	r0, r1, #5
 8012cbc:	6979      	ldr	r1, [r7, #20]
 8012cbe:	4401      	add	r1, r0
 8012cc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012cc4:	4313      	orrs	r3, r2
 8012cc6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8012cc8:	79fb      	ldrb	r3, [r7, #7]
 8012cca:	2b01      	cmp	r3, #1
 8012ccc:	d10d      	bne.n	8012cea <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012cce:	68bb      	ldr	r3, [r7, #8]
 8012cd0:	691b      	ldr	r3, [r3, #16]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d009      	beq.n	8012cea <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	6919      	ldr	r1, [r3, #16]
 8012cda:	693b      	ldr	r3, [r7, #16]
 8012cdc:	015a      	lsls	r2, r3, #5
 8012cde:	697b      	ldr	r3, [r7, #20]
 8012ce0:	4413      	add	r3, r2
 8012ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ce6:	460a      	mov	r2, r1
 8012ce8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012cea:	693b      	ldr	r3, [r7, #16]
 8012cec:	015a      	lsls	r2, r3, #5
 8012cee:	697b      	ldr	r3, [r7, #20]
 8012cf0:	4413      	add	r3, r2
 8012cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	693a      	ldr	r2, [r7, #16]
 8012cfa:	0151      	lsls	r1, r2, #5
 8012cfc:	697a      	ldr	r2, [r7, #20]
 8012cfe:	440a      	add	r2, r1
 8012d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012d08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012d0a:	2300      	movs	r3, #0
}
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	371c      	adds	r7, #28
 8012d10:	46bd      	mov	sp, r7
 8012d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d16:	4770      	bx	lr

08012d18 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012d18:	b480      	push	{r7}
 8012d1a:	b087      	sub	sp, #28
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
 8012d20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012d22:	2300      	movs	r3, #0
 8012d24:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8012d26:	2300      	movs	r3, #0
 8012d28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012d2e:	683b      	ldr	r3, [r7, #0]
 8012d30:	785b      	ldrb	r3, [r3, #1]
 8012d32:	2b01      	cmp	r3, #1
 8012d34:	d14a      	bne.n	8012dcc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	781b      	ldrb	r3, [r3, #0]
 8012d3a:	015a      	lsls	r2, r3, #5
 8012d3c:	693b      	ldr	r3, [r7, #16]
 8012d3e:	4413      	add	r3, r2
 8012d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012d4e:	f040 8086 	bne.w	8012e5e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8012d52:	683b      	ldr	r3, [r7, #0]
 8012d54:	781b      	ldrb	r3, [r3, #0]
 8012d56:	015a      	lsls	r2, r3, #5
 8012d58:	693b      	ldr	r3, [r7, #16]
 8012d5a:	4413      	add	r3, r2
 8012d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	683a      	ldr	r2, [r7, #0]
 8012d64:	7812      	ldrb	r2, [r2, #0]
 8012d66:	0151      	lsls	r1, r2, #5
 8012d68:	693a      	ldr	r2, [r7, #16]
 8012d6a:	440a      	add	r2, r1
 8012d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012d74:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	781b      	ldrb	r3, [r3, #0]
 8012d7a:	015a      	lsls	r2, r3, #5
 8012d7c:	693b      	ldr	r3, [r7, #16]
 8012d7e:	4413      	add	r3, r2
 8012d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	683a      	ldr	r2, [r7, #0]
 8012d88:	7812      	ldrb	r2, [r2, #0]
 8012d8a:	0151      	lsls	r1, r2, #5
 8012d8c:	693a      	ldr	r2, [r7, #16]
 8012d8e:	440a      	add	r2, r1
 8012d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012d98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	3301      	adds	r3, #1
 8012d9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	f242 7210 	movw	r2, #10000	; 0x2710
 8012da6:	4293      	cmp	r3, r2
 8012da8:	d902      	bls.n	8012db0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8012daa:	2301      	movs	r3, #1
 8012dac:	75fb      	strb	r3, [r7, #23]
          break;
 8012dae:	e056      	b.n	8012e5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	781b      	ldrb	r3, [r3, #0]
 8012db4:	015a      	lsls	r2, r3, #5
 8012db6:	693b      	ldr	r3, [r7, #16]
 8012db8:	4413      	add	r3, r2
 8012dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012dc8:	d0e7      	beq.n	8012d9a <USB_EPStopXfer+0x82>
 8012dca:	e048      	b.n	8012e5e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	781b      	ldrb	r3, [r3, #0]
 8012dd0:	015a      	lsls	r2, r3, #5
 8012dd2:	693b      	ldr	r3, [r7, #16]
 8012dd4:	4413      	add	r3, r2
 8012dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012de0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012de4:	d13b      	bne.n	8012e5e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	781b      	ldrb	r3, [r3, #0]
 8012dea:	015a      	lsls	r2, r3, #5
 8012dec:	693b      	ldr	r3, [r7, #16]
 8012dee:	4413      	add	r3, r2
 8012df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	683a      	ldr	r2, [r7, #0]
 8012df8:	7812      	ldrb	r2, [r2, #0]
 8012dfa:	0151      	lsls	r1, r2, #5
 8012dfc:	693a      	ldr	r2, [r7, #16]
 8012dfe:	440a      	add	r2, r1
 8012e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012e08:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8012e0a:	683b      	ldr	r3, [r7, #0]
 8012e0c:	781b      	ldrb	r3, [r3, #0]
 8012e0e:	015a      	lsls	r2, r3, #5
 8012e10:	693b      	ldr	r3, [r7, #16]
 8012e12:	4413      	add	r3, r2
 8012e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	683a      	ldr	r2, [r7, #0]
 8012e1c:	7812      	ldrb	r2, [r2, #0]
 8012e1e:	0151      	lsls	r1, r2, #5
 8012e20:	693a      	ldr	r2, [r7, #16]
 8012e22:	440a      	add	r2, r1
 8012e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012e2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	3301      	adds	r3, #1
 8012e32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	f242 7210 	movw	r2, #10000	; 0x2710
 8012e3a:	4293      	cmp	r3, r2
 8012e3c:	d902      	bls.n	8012e44 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8012e3e:	2301      	movs	r3, #1
 8012e40:	75fb      	strb	r3, [r7, #23]
          break;
 8012e42:	e00c      	b.n	8012e5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	781b      	ldrb	r3, [r3, #0]
 8012e48:	015a      	lsls	r2, r3, #5
 8012e4a:	693b      	ldr	r3, [r7, #16]
 8012e4c:	4413      	add	r3, r2
 8012e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012e5c:	d0e7      	beq.n	8012e2e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8012e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e60:	4618      	mov	r0, r3
 8012e62:	371c      	adds	r7, #28
 8012e64:	46bd      	mov	sp, r7
 8012e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6a:	4770      	bx	lr

08012e6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012e6c:	b480      	push	{r7}
 8012e6e:	b089      	sub	sp, #36	; 0x24
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	60f8      	str	r0, [r7, #12]
 8012e74:	60b9      	str	r1, [r7, #8]
 8012e76:	4611      	mov	r1, r2
 8012e78:	461a      	mov	r2, r3
 8012e7a:	460b      	mov	r3, r1
 8012e7c:	71fb      	strb	r3, [r7, #7]
 8012e7e:	4613      	mov	r3, r2
 8012e80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8012e8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d123      	bne.n	8012eda <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012e92:	88bb      	ldrh	r3, [r7, #4]
 8012e94:	3303      	adds	r3, #3
 8012e96:	089b      	lsrs	r3, r3, #2
 8012e98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	61bb      	str	r3, [r7, #24]
 8012e9e:	e018      	b.n	8012ed2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012ea0:	79fb      	ldrb	r3, [r7, #7]
 8012ea2:	031a      	lsls	r2, r3, #12
 8012ea4:	697b      	ldr	r3, [r7, #20]
 8012ea6:	4413      	add	r3, r2
 8012ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012eac:	461a      	mov	r2, r3
 8012eae:	69fb      	ldr	r3, [r7, #28]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012eb4:	69fb      	ldr	r3, [r7, #28]
 8012eb6:	3301      	adds	r3, #1
 8012eb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012eba:	69fb      	ldr	r3, [r7, #28]
 8012ebc:	3301      	adds	r3, #1
 8012ebe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012ec0:	69fb      	ldr	r3, [r7, #28]
 8012ec2:	3301      	adds	r3, #1
 8012ec4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012ec6:	69fb      	ldr	r3, [r7, #28]
 8012ec8:	3301      	adds	r3, #1
 8012eca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012ecc:	69bb      	ldr	r3, [r7, #24]
 8012ece:	3301      	adds	r3, #1
 8012ed0:	61bb      	str	r3, [r7, #24]
 8012ed2:	69ba      	ldr	r2, [r7, #24]
 8012ed4:	693b      	ldr	r3, [r7, #16]
 8012ed6:	429a      	cmp	r2, r3
 8012ed8:	d3e2      	bcc.n	8012ea0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012eda:	2300      	movs	r3, #0
}
 8012edc:	4618      	mov	r0, r3
 8012ede:	3724      	adds	r7, #36	; 0x24
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee6:	4770      	bx	lr

08012ee8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012ee8:	b480      	push	{r7}
 8012eea:	b08b      	sub	sp, #44	; 0x2c
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	60f8      	str	r0, [r7, #12]
 8012ef0:	60b9      	str	r1, [r7, #8]
 8012ef2:	4613      	mov	r3, r2
 8012ef4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8012efa:	68bb      	ldr	r3, [r7, #8]
 8012efc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8012efe:	88fb      	ldrh	r3, [r7, #6]
 8012f00:	089b      	lsrs	r3, r3, #2
 8012f02:	b29b      	uxth	r3, r3
 8012f04:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012f06:	88fb      	ldrh	r3, [r7, #6]
 8012f08:	f003 0303 	and.w	r3, r3, #3
 8012f0c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8012f0e:	2300      	movs	r3, #0
 8012f10:	623b      	str	r3, [r7, #32]
 8012f12:	e014      	b.n	8012f3e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012f14:	69bb      	ldr	r3, [r7, #24]
 8012f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012f1a:	681a      	ldr	r2, [r3, #0]
 8012f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8012f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f22:	3301      	adds	r3, #1
 8012f24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f28:	3301      	adds	r3, #1
 8012f2a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f2e:	3301      	adds	r3, #1
 8012f30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f34:	3301      	adds	r3, #1
 8012f36:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8012f38:	6a3b      	ldr	r3, [r7, #32]
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	623b      	str	r3, [r7, #32]
 8012f3e:	6a3a      	ldr	r2, [r7, #32]
 8012f40:	697b      	ldr	r3, [r7, #20]
 8012f42:	429a      	cmp	r2, r3
 8012f44:	d3e6      	bcc.n	8012f14 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8012f46:	8bfb      	ldrh	r3, [r7, #30]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d01e      	beq.n	8012f8a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012f50:	69bb      	ldr	r3, [r7, #24]
 8012f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012f56:	461a      	mov	r2, r3
 8012f58:	f107 0310 	add.w	r3, r7, #16
 8012f5c:	6812      	ldr	r2, [r2, #0]
 8012f5e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012f60:	693a      	ldr	r2, [r7, #16]
 8012f62:	6a3b      	ldr	r3, [r7, #32]
 8012f64:	b2db      	uxtb	r3, r3
 8012f66:	00db      	lsls	r3, r3, #3
 8012f68:	fa22 f303 	lsr.w	r3, r2, r3
 8012f6c:	b2da      	uxtb	r2, r3
 8012f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f70:	701a      	strb	r2, [r3, #0]
      i++;
 8012f72:	6a3b      	ldr	r3, [r7, #32]
 8012f74:	3301      	adds	r3, #1
 8012f76:	623b      	str	r3, [r7, #32]
      pDest++;
 8012f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f7a:	3301      	adds	r3, #1
 8012f7c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8012f7e:	8bfb      	ldrh	r3, [r7, #30]
 8012f80:	3b01      	subs	r3, #1
 8012f82:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012f84:	8bfb      	ldrh	r3, [r7, #30]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d1ea      	bne.n	8012f60 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8012f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	372c      	adds	r7, #44	; 0x2c
 8012f90:	46bd      	mov	sp, r7
 8012f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f96:	4770      	bx	lr

08012f98 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012f98:	b480      	push	{r7}
 8012f9a:	b085      	sub	sp, #20
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
 8012fa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012fa6:	683b      	ldr	r3, [r7, #0]
 8012fa8:	781b      	ldrb	r3, [r3, #0]
 8012faa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012fac:	683b      	ldr	r3, [r7, #0]
 8012fae:	785b      	ldrb	r3, [r3, #1]
 8012fb0:	2b01      	cmp	r3, #1
 8012fb2:	d12c      	bne.n	801300e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012fb4:	68bb      	ldr	r3, [r7, #8]
 8012fb6:	015a      	lsls	r2, r3, #5
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	4413      	add	r3, r2
 8012fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	db12      	blt.n	8012fec <USB_EPSetStall+0x54>
 8012fc6:	68bb      	ldr	r3, [r7, #8]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d00f      	beq.n	8012fec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012fcc:	68bb      	ldr	r3, [r7, #8]
 8012fce:	015a      	lsls	r2, r3, #5
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	4413      	add	r3, r2
 8012fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	68ba      	ldr	r2, [r7, #8]
 8012fdc:	0151      	lsls	r1, r2, #5
 8012fde:	68fa      	ldr	r2, [r7, #12]
 8012fe0:	440a      	add	r2, r1
 8012fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012fe6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012fea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012fec:	68bb      	ldr	r3, [r7, #8]
 8012fee:	015a      	lsls	r2, r3, #5
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	4413      	add	r3, r2
 8012ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	68ba      	ldr	r2, [r7, #8]
 8012ffc:	0151      	lsls	r1, r2, #5
 8012ffe:	68fa      	ldr	r2, [r7, #12]
 8013000:	440a      	add	r2, r1
 8013002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013006:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801300a:	6013      	str	r3, [r2, #0]
 801300c:	e02b      	b.n	8013066 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801300e:	68bb      	ldr	r3, [r7, #8]
 8013010:	015a      	lsls	r2, r3, #5
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	4413      	add	r3, r2
 8013016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	2b00      	cmp	r3, #0
 801301e:	db12      	blt.n	8013046 <USB_EPSetStall+0xae>
 8013020:	68bb      	ldr	r3, [r7, #8]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d00f      	beq.n	8013046 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013026:	68bb      	ldr	r3, [r7, #8]
 8013028:	015a      	lsls	r2, r3, #5
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	4413      	add	r3, r2
 801302e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	68ba      	ldr	r2, [r7, #8]
 8013036:	0151      	lsls	r1, r2, #5
 8013038:	68fa      	ldr	r2, [r7, #12]
 801303a:	440a      	add	r2, r1
 801303c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013040:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013044:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013046:	68bb      	ldr	r3, [r7, #8]
 8013048:	015a      	lsls	r2, r3, #5
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	4413      	add	r3, r2
 801304e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	68ba      	ldr	r2, [r7, #8]
 8013056:	0151      	lsls	r1, r2, #5
 8013058:	68fa      	ldr	r2, [r7, #12]
 801305a:	440a      	add	r2, r1
 801305c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013060:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013064:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013066:	2300      	movs	r3, #0
}
 8013068:	4618      	mov	r0, r3
 801306a:	3714      	adds	r7, #20
 801306c:	46bd      	mov	sp, r7
 801306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013072:	4770      	bx	lr

08013074 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013074:	b480      	push	{r7}
 8013076:	b085      	sub	sp, #20
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
 801307c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013082:	683b      	ldr	r3, [r7, #0]
 8013084:	781b      	ldrb	r3, [r3, #0]
 8013086:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013088:	683b      	ldr	r3, [r7, #0]
 801308a:	785b      	ldrb	r3, [r3, #1]
 801308c:	2b01      	cmp	r3, #1
 801308e:	d128      	bne.n	80130e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	015a      	lsls	r2, r3, #5
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	4413      	add	r3, r2
 8013098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	68ba      	ldr	r2, [r7, #8]
 80130a0:	0151      	lsls	r1, r2, #5
 80130a2:	68fa      	ldr	r2, [r7, #12]
 80130a4:	440a      	add	r2, r1
 80130a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80130ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80130b0:	683b      	ldr	r3, [r7, #0]
 80130b2:	791b      	ldrb	r3, [r3, #4]
 80130b4:	2b03      	cmp	r3, #3
 80130b6:	d003      	beq.n	80130c0 <USB_EPClearStall+0x4c>
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	791b      	ldrb	r3, [r3, #4]
 80130bc:	2b02      	cmp	r3, #2
 80130be:	d138      	bne.n	8013132 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80130c0:	68bb      	ldr	r3, [r7, #8]
 80130c2:	015a      	lsls	r2, r3, #5
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	4413      	add	r3, r2
 80130c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	68ba      	ldr	r2, [r7, #8]
 80130d0:	0151      	lsls	r1, r2, #5
 80130d2:	68fa      	ldr	r2, [r7, #12]
 80130d4:	440a      	add	r2, r1
 80130d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80130de:	6013      	str	r3, [r2, #0]
 80130e0:	e027      	b.n	8013132 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80130e2:	68bb      	ldr	r3, [r7, #8]
 80130e4:	015a      	lsls	r2, r3, #5
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	4413      	add	r3, r2
 80130ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	68ba      	ldr	r2, [r7, #8]
 80130f2:	0151      	lsls	r1, r2, #5
 80130f4:	68fa      	ldr	r2, [r7, #12]
 80130f6:	440a      	add	r2, r1
 80130f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80130fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013100:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	791b      	ldrb	r3, [r3, #4]
 8013106:	2b03      	cmp	r3, #3
 8013108:	d003      	beq.n	8013112 <USB_EPClearStall+0x9e>
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	791b      	ldrb	r3, [r3, #4]
 801310e:	2b02      	cmp	r3, #2
 8013110:	d10f      	bne.n	8013132 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013112:	68bb      	ldr	r3, [r7, #8]
 8013114:	015a      	lsls	r2, r3, #5
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	4413      	add	r3, r2
 801311a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	68ba      	ldr	r2, [r7, #8]
 8013122:	0151      	lsls	r1, r2, #5
 8013124:	68fa      	ldr	r2, [r7, #12]
 8013126:	440a      	add	r2, r1
 8013128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801312c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013130:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013132:	2300      	movs	r3, #0
}
 8013134:	4618      	mov	r0, r3
 8013136:	3714      	adds	r7, #20
 8013138:	46bd      	mov	sp, r7
 801313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313e:	4770      	bx	lr

08013140 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013140:	b480      	push	{r7}
 8013142:	b085      	sub	sp, #20
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
 8013148:	460b      	mov	r3, r1
 801314a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	68fa      	ldr	r2, [r7, #12]
 801315a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801315e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013162:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801316a:	681a      	ldr	r2, [r3, #0]
 801316c:	78fb      	ldrb	r3, [r7, #3]
 801316e:	011b      	lsls	r3, r3, #4
 8013170:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013174:	68f9      	ldr	r1, [r7, #12]
 8013176:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801317a:	4313      	orrs	r3, r2
 801317c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801317e:	2300      	movs	r3, #0
}
 8013180:	4618      	mov	r0, r3
 8013182:	3714      	adds	r7, #20
 8013184:	46bd      	mov	sp, r7
 8013186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801318a:	4770      	bx	lr

0801318c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801318c:	b480      	push	{r7}
 801318e:	b085      	sub	sp, #20
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	68fa      	ldr	r2, [r7, #12]
 80131a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80131a6:	f023 0303 	bic.w	r3, r3, #3
 80131aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131b2:	685b      	ldr	r3, [r3, #4]
 80131b4:	68fa      	ldr	r2, [r7, #12]
 80131b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80131ba:	f023 0302 	bic.w	r3, r3, #2
 80131be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80131c0:	2300      	movs	r3, #0
}
 80131c2:	4618      	mov	r0, r3
 80131c4:	3714      	adds	r7, #20
 80131c6:	46bd      	mov	sp, r7
 80131c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131cc:	4770      	bx	lr

080131ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80131ce:	b480      	push	{r7}
 80131d0:	b085      	sub	sp, #20
 80131d2:	af00      	add	r7, sp, #0
 80131d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	68fa      	ldr	r2, [r7, #12]
 80131e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80131e8:	f023 0303 	bic.w	r3, r3, #3
 80131ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131f4:	685b      	ldr	r3, [r3, #4]
 80131f6:	68fa      	ldr	r2, [r7, #12]
 80131f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80131fc:	f043 0302 	orr.w	r3, r3, #2
 8013200:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013202:	2300      	movs	r3, #0
}
 8013204:	4618      	mov	r0, r3
 8013206:	3714      	adds	r7, #20
 8013208:	46bd      	mov	sp, r7
 801320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801320e:	4770      	bx	lr

08013210 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013210:	b480      	push	{r7}
 8013212:	b085      	sub	sp, #20
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	695b      	ldr	r3, [r3, #20]
 801321c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	699b      	ldr	r3, [r3, #24]
 8013222:	68fa      	ldr	r2, [r7, #12]
 8013224:	4013      	ands	r3, r2
 8013226:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013228:	68fb      	ldr	r3, [r7, #12]
}
 801322a:	4618      	mov	r0, r3
 801322c:	3714      	adds	r7, #20
 801322e:	46bd      	mov	sp, r7
 8013230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013234:	4770      	bx	lr

08013236 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013236:	b480      	push	{r7}
 8013238:	b085      	sub	sp, #20
 801323a:	af00      	add	r7, sp, #0
 801323c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013248:	699b      	ldr	r3, [r3, #24]
 801324a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013252:	69db      	ldr	r3, [r3, #28]
 8013254:	68ba      	ldr	r2, [r7, #8]
 8013256:	4013      	ands	r3, r2
 8013258:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	0c1b      	lsrs	r3, r3, #16
}
 801325e:	4618      	mov	r0, r3
 8013260:	3714      	adds	r7, #20
 8013262:	46bd      	mov	sp, r7
 8013264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013268:	4770      	bx	lr

0801326a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801326a:	b480      	push	{r7}
 801326c:	b085      	sub	sp, #20
 801326e:	af00      	add	r7, sp, #0
 8013270:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801327c:	699b      	ldr	r3, [r3, #24]
 801327e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013286:	69db      	ldr	r3, [r3, #28]
 8013288:	68ba      	ldr	r2, [r7, #8]
 801328a:	4013      	ands	r3, r2
 801328c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801328e:	68bb      	ldr	r3, [r7, #8]
 8013290:	b29b      	uxth	r3, r3
}
 8013292:	4618      	mov	r0, r3
 8013294:	3714      	adds	r7, #20
 8013296:	46bd      	mov	sp, r7
 8013298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801329c:	4770      	bx	lr

0801329e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801329e:	b480      	push	{r7}
 80132a0:	b085      	sub	sp, #20
 80132a2:	af00      	add	r7, sp, #0
 80132a4:	6078      	str	r0, [r7, #4]
 80132a6:	460b      	mov	r3, r1
 80132a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80132ae:	78fb      	ldrb	r3, [r7, #3]
 80132b0:	015a      	lsls	r2, r3, #5
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	4413      	add	r3, r2
 80132b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132ba:	689b      	ldr	r3, [r3, #8]
 80132bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132c4:	695b      	ldr	r3, [r3, #20]
 80132c6:	68ba      	ldr	r2, [r7, #8]
 80132c8:	4013      	ands	r3, r2
 80132ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80132cc:	68bb      	ldr	r3, [r7, #8]
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	3714      	adds	r7, #20
 80132d2:	46bd      	mov	sp, r7
 80132d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d8:	4770      	bx	lr

080132da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80132da:	b480      	push	{r7}
 80132dc:	b087      	sub	sp, #28
 80132de:	af00      	add	r7, sp, #0
 80132e0:	6078      	str	r0, [r7, #4]
 80132e2:	460b      	mov	r3, r1
 80132e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80132ea:	697b      	ldr	r3, [r7, #20]
 80132ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132f0:	691b      	ldr	r3, [r3, #16]
 80132f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80132f4:	697b      	ldr	r3, [r7, #20]
 80132f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80132fe:	78fb      	ldrb	r3, [r7, #3]
 8013300:	f003 030f 	and.w	r3, r3, #15
 8013304:	68fa      	ldr	r2, [r7, #12]
 8013306:	fa22 f303 	lsr.w	r3, r2, r3
 801330a:	01db      	lsls	r3, r3, #7
 801330c:	b2db      	uxtb	r3, r3
 801330e:	693a      	ldr	r2, [r7, #16]
 8013310:	4313      	orrs	r3, r2
 8013312:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013314:	78fb      	ldrb	r3, [r7, #3]
 8013316:	015a      	lsls	r2, r3, #5
 8013318:	697b      	ldr	r3, [r7, #20]
 801331a:	4413      	add	r3, r2
 801331c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013320:	689b      	ldr	r3, [r3, #8]
 8013322:	693a      	ldr	r2, [r7, #16]
 8013324:	4013      	ands	r3, r2
 8013326:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013328:	68bb      	ldr	r3, [r7, #8]
}
 801332a:	4618      	mov	r0, r3
 801332c:	371c      	adds	r7, #28
 801332e:	46bd      	mov	sp, r7
 8013330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013334:	4770      	bx	lr

08013336 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013336:	b480      	push	{r7}
 8013338:	b083      	sub	sp, #12
 801333a:	af00      	add	r7, sp, #0
 801333c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	695b      	ldr	r3, [r3, #20]
 8013342:	f003 0301 	and.w	r3, r3, #1
}
 8013346:	4618      	mov	r0, r3
 8013348:	370c      	adds	r7, #12
 801334a:	46bd      	mov	sp, r7
 801334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013350:	4770      	bx	lr

08013352 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013352:	b480      	push	{r7}
 8013354:	b085      	sub	sp, #20
 8013356:	af00      	add	r7, sp, #0
 8013358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	68fa      	ldr	r2, [r7, #12]
 8013368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801336c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8013370:	f023 0307 	bic.w	r3, r3, #7
 8013374:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801337c:	685b      	ldr	r3, [r3, #4]
 801337e:	68fa      	ldr	r2, [r7, #12]
 8013380:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013388:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801338a:	2300      	movs	r3, #0
}
 801338c:	4618      	mov	r0, r3
 801338e:	3714      	adds	r7, #20
 8013390:	46bd      	mov	sp, r7
 8013392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013396:	4770      	bx	lr

08013398 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013398:	b480      	push	{r7}
 801339a:	b087      	sub	sp, #28
 801339c:	af00      	add	r7, sp, #0
 801339e:	60f8      	str	r0, [r7, #12]
 80133a0:	460b      	mov	r3, r1
 80133a2:	607a      	str	r2, [r7, #4]
 80133a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	333c      	adds	r3, #60	; 0x3c
 80133ae:	3304      	adds	r3, #4
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80133b4:	693b      	ldr	r3, [r7, #16]
 80133b6:	4a26      	ldr	r2, [pc, #152]	; (8013450 <USB_EP0_OutStart+0xb8>)
 80133b8:	4293      	cmp	r3, r2
 80133ba:	d90a      	bls.n	80133d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80133bc:	697b      	ldr	r3, [r7, #20]
 80133be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80133c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80133cc:	d101      	bne.n	80133d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80133ce:	2300      	movs	r3, #0
 80133d0:	e037      	b.n	8013442 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80133d2:	697b      	ldr	r3, [r7, #20]
 80133d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133d8:	461a      	mov	r2, r3
 80133da:	2300      	movs	r3, #0
 80133dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80133de:	697b      	ldr	r3, [r7, #20]
 80133e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133e4:	691b      	ldr	r3, [r3, #16]
 80133e6:	697a      	ldr	r2, [r7, #20]
 80133e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80133f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80133f2:	697b      	ldr	r3, [r7, #20]
 80133f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133f8:	691b      	ldr	r3, [r3, #16]
 80133fa:	697a      	ldr	r2, [r7, #20]
 80133fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013400:	f043 0318 	orr.w	r3, r3, #24
 8013404:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013406:	697b      	ldr	r3, [r7, #20]
 8013408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801340c:	691b      	ldr	r3, [r3, #16]
 801340e:	697a      	ldr	r2, [r7, #20]
 8013410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013414:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013418:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801341a:	7afb      	ldrb	r3, [r7, #11]
 801341c:	2b01      	cmp	r3, #1
 801341e:	d10f      	bne.n	8013440 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013420:	697b      	ldr	r3, [r7, #20]
 8013422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013426:	461a      	mov	r2, r3
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801342c:	697b      	ldr	r3, [r7, #20]
 801342e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	697a      	ldr	r2, [r7, #20]
 8013436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801343a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801343e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013440:	2300      	movs	r3, #0
}
 8013442:	4618      	mov	r0, r3
 8013444:	371c      	adds	r7, #28
 8013446:	46bd      	mov	sp, r7
 8013448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344c:	4770      	bx	lr
 801344e:	bf00      	nop
 8013450:	4f54300a 	.word	0x4f54300a

08013454 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013454:	b480      	push	{r7}
 8013456:	b085      	sub	sp, #20
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801345c:	2300      	movs	r3, #0
 801345e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	3301      	adds	r3, #1
 8013464:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	4a13      	ldr	r2, [pc, #76]	; (80134b8 <USB_CoreReset+0x64>)
 801346a:	4293      	cmp	r3, r2
 801346c:	d901      	bls.n	8013472 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801346e:	2303      	movs	r3, #3
 8013470:	e01b      	b.n	80134aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	691b      	ldr	r3, [r3, #16]
 8013476:	2b00      	cmp	r3, #0
 8013478:	daf2      	bge.n	8013460 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801347a:	2300      	movs	r3, #0
 801347c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	691b      	ldr	r3, [r3, #16]
 8013482:	f043 0201 	orr.w	r2, r3, #1
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	3301      	adds	r3, #1
 801348e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	4a09      	ldr	r2, [pc, #36]	; (80134b8 <USB_CoreReset+0x64>)
 8013494:	4293      	cmp	r3, r2
 8013496:	d901      	bls.n	801349c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013498:	2303      	movs	r3, #3
 801349a:	e006      	b.n	80134aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	691b      	ldr	r3, [r3, #16]
 80134a0:	f003 0301 	and.w	r3, r3, #1
 80134a4:	2b01      	cmp	r3, #1
 80134a6:	d0f0      	beq.n	801348a <USB_CoreReset+0x36>

  return HAL_OK;
 80134a8:	2300      	movs	r3, #0
}
 80134aa:	4618      	mov	r0, r3
 80134ac:	3714      	adds	r7, #20
 80134ae:	46bd      	mov	sp, r7
 80134b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b4:	4770      	bx	lr
 80134b6:	bf00      	nop
 80134b8:	00030d40 	.word	0x00030d40

080134bc <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b084      	sub	sp, #16
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
 80134c4:	460b      	mov	r3, r1
 80134c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80134c8:	f44f 701d 	mov.w	r0, #628	; 0x274
 80134cc:	f005 faea 	bl	8018aa4 <USBD_static_malloc>
 80134d0:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d109      	bne.n	80134ec <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	32b0      	adds	r2, #176	; 0xb0
 80134e2:	2100      	movs	r1, #0
 80134e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80134e8:	2302      	movs	r3, #2
 80134ea:	e06e      	b.n	80135ca <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	32b0      	adds	r2, #176	; 0xb0
 80134f6:	68f9      	ldr	r1, [r7, #12]
 80134f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	32b0      	adds	r2, #176	; 0xb0
 8013506:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	7c1b      	ldrb	r3, [r3, #16]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d12b      	bne.n	8013570 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8013518:	4b2e      	ldr	r3, [pc, #184]	; (80135d4 <USBD_MSC_Init+0x118>)
 801351a:	7819      	ldrb	r1, [r3, #0]
 801351c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013520:	2202      	movs	r2, #2
 8013522:	6878      	ldr	r0, [r7, #4]
 8013524:	f005 f97b 	bl	801881e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8013528:	4b2a      	ldr	r3, [pc, #168]	; (80135d4 <USBD_MSC_Init+0x118>)
 801352a:	781b      	ldrb	r3, [r3, #0]
 801352c:	f003 020f 	and.w	r2, r3, #15
 8013530:	6879      	ldr	r1, [r7, #4]
 8013532:	4613      	mov	r3, r2
 8013534:	009b      	lsls	r3, r3, #2
 8013536:	4413      	add	r3, r2
 8013538:	009b      	lsls	r3, r3, #2
 801353a:	440b      	add	r3, r1
 801353c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013540:	2201      	movs	r2, #1
 8013542:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8013544:	4b24      	ldr	r3, [pc, #144]	; (80135d8 <USBD_MSC_Init+0x11c>)
 8013546:	7819      	ldrb	r1, [r3, #0]
 8013548:	f44f 7300 	mov.w	r3, #512	; 0x200
 801354c:	2202      	movs	r2, #2
 801354e:	6878      	ldr	r0, [r7, #4]
 8013550:	f005 f965 	bl	801881e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8013554:	4b20      	ldr	r3, [pc, #128]	; (80135d8 <USBD_MSC_Init+0x11c>)
 8013556:	781b      	ldrb	r3, [r3, #0]
 8013558:	f003 020f 	and.w	r2, r3, #15
 801355c:	6879      	ldr	r1, [r7, #4]
 801355e:	4613      	mov	r3, r2
 8013560:	009b      	lsls	r3, r3, #2
 8013562:	4413      	add	r3, r2
 8013564:	009b      	lsls	r3, r3, #2
 8013566:	440b      	add	r3, r1
 8013568:	3324      	adds	r3, #36	; 0x24
 801356a:	2201      	movs	r2, #1
 801356c:	801a      	strh	r2, [r3, #0]
 801356e:	e028      	b.n	80135c2 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8013570:	4b18      	ldr	r3, [pc, #96]	; (80135d4 <USBD_MSC_Init+0x118>)
 8013572:	7819      	ldrb	r1, [r3, #0]
 8013574:	2340      	movs	r3, #64	; 0x40
 8013576:	2202      	movs	r2, #2
 8013578:	6878      	ldr	r0, [r7, #4]
 801357a:	f005 f950 	bl	801881e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 801357e:	4b15      	ldr	r3, [pc, #84]	; (80135d4 <USBD_MSC_Init+0x118>)
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	f003 020f 	and.w	r2, r3, #15
 8013586:	6879      	ldr	r1, [r7, #4]
 8013588:	4613      	mov	r3, r2
 801358a:	009b      	lsls	r3, r3, #2
 801358c:	4413      	add	r3, r2
 801358e:	009b      	lsls	r3, r3, #2
 8013590:	440b      	add	r3, r1
 8013592:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013596:	2201      	movs	r2, #1
 8013598:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801359a:	4b0f      	ldr	r3, [pc, #60]	; (80135d8 <USBD_MSC_Init+0x11c>)
 801359c:	7819      	ldrb	r1, [r3, #0]
 801359e:	2340      	movs	r3, #64	; 0x40
 80135a0:	2202      	movs	r2, #2
 80135a2:	6878      	ldr	r0, [r7, #4]
 80135a4:	f005 f93b 	bl	801881e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80135a8:	4b0b      	ldr	r3, [pc, #44]	; (80135d8 <USBD_MSC_Init+0x11c>)
 80135aa:	781b      	ldrb	r3, [r3, #0]
 80135ac:	f003 020f 	and.w	r2, r3, #15
 80135b0:	6879      	ldr	r1, [r7, #4]
 80135b2:	4613      	mov	r3, r2
 80135b4:	009b      	lsls	r3, r3, #2
 80135b6:	4413      	add	r3, r2
 80135b8:	009b      	lsls	r3, r3, #2
 80135ba:	440b      	add	r3, r1
 80135bc:	3324      	adds	r3, #36	; 0x24
 80135be:	2201      	movs	r2, #1
 80135c0:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80135c2:	6878      	ldr	r0, [r7, #4]
 80135c4:	f000 fa2c 	bl	8013a20 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80135c8:	2300      	movs	r3, #0
}
 80135ca:	4618      	mov	r0, r3
 80135cc:	3710      	adds	r7, #16
 80135ce:	46bd      	mov	sp, r7
 80135d0:	bd80      	pop	{r7, pc}
 80135d2:	bf00      	nop
 80135d4:	2000008b 	.word	0x2000008b
 80135d8:	2000008a 	.word	0x2000008a

080135dc <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b082      	sub	sp, #8
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
 80135e4:	460b      	mov	r3, r1
 80135e6:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80135e8:	4b26      	ldr	r3, [pc, #152]	; (8013684 <USBD_MSC_DeInit+0xa8>)
 80135ea:	781b      	ldrb	r3, [r3, #0]
 80135ec:	4619      	mov	r1, r3
 80135ee:	6878      	ldr	r0, [r7, #4]
 80135f0:	f005 f93b 	bl	801886a <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80135f4:	4b23      	ldr	r3, [pc, #140]	; (8013684 <USBD_MSC_DeInit+0xa8>)
 80135f6:	781b      	ldrb	r3, [r3, #0]
 80135f8:	f003 020f 	and.w	r2, r3, #15
 80135fc:	6879      	ldr	r1, [r7, #4]
 80135fe:	4613      	mov	r3, r2
 8013600:	009b      	lsls	r3, r3, #2
 8013602:	4413      	add	r3, r2
 8013604:	009b      	lsls	r3, r3, #2
 8013606:	440b      	add	r3, r1
 8013608:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801360c:	2200      	movs	r2, #0
 801360e:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8013610:	4b1d      	ldr	r3, [pc, #116]	; (8013688 <USBD_MSC_DeInit+0xac>)
 8013612:	781b      	ldrb	r3, [r3, #0]
 8013614:	4619      	mov	r1, r3
 8013616:	6878      	ldr	r0, [r7, #4]
 8013618:	f005 f927 	bl	801886a <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 801361c:	4b1a      	ldr	r3, [pc, #104]	; (8013688 <USBD_MSC_DeInit+0xac>)
 801361e:	781b      	ldrb	r3, [r3, #0]
 8013620:	f003 020f 	and.w	r2, r3, #15
 8013624:	6879      	ldr	r1, [r7, #4]
 8013626:	4613      	mov	r3, r2
 8013628:	009b      	lsls	r3, r3, #2
 801362a:	4413      	add	r3, r2
 801362c:	009b      	lsls	r3, r3, #2
 801362e:	440b      	add	r3, r1
 8013630:	3324      	adds	r3, #36	; 0x24
 8013632:	2200      	movs	r2, #0
 8013634:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	32b0      	adds	r2, #176	; 0xb0
 8013640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d018      	beq.n	801367a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8013648:	6878      	ldr	r0, [r7, #4]
 801364a:	f000 fa67 	bl	8013b1c <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	32b0      	adds	r2, #176	; 0xb0
 8013658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801365c:	4618      	mov	r0, r3
 801365e:	f005 fa2f 	bl	8018ac0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	32b0      	adds	r2, #176	; 0xb0
 801366c:	2100      	movs	r1, #0
 801366e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	2200      	movs	r2, #0
 8013676:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801367a:	2300      	movs	r3, #0
}
 801367c:	4618      	mov	r0, r3
 801367e:	3708      	adds	r7, #8
 8013680:	46bd      	mov	sp, r7
 8013682:	bd80      	pop	{r7, pc}
 8013684:	2000008b 	.word	0x2000008b
 8013688:	2000008a 	.word	0x2000008a

0801368c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b086      	sub	sp, #24
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
 8013694:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	32b0      	adds	r2, #176	; 0xb0
 80136a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136a4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80136a6:	2300      	movs	r3, #0
 80136a8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80136aa:	2300      	movs	r3, #0
 80136ac:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80136ae:	693b      	ldr	r3, [r7, #16]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d101      	bne.n	80136b8 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80136b4:	2303      	movs	r3, #3
 80136b6:	e0e1      	b.n	801387c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80136b8:	683b      	ldr	r3, [r7, #0]
 80136ba:	781b      	ldrb	r3, [r3, #0]
 80136bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d053      	beq.n	801376c <USBD_MSC_Setup+0xe0>
 80136c4:	2b20      	cmp	r3, #32
 80136c6:	f040 80d1 	bne.w	801386c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80136ca:	683b      	ldr	r3, [r7, #0]
 80136cc:	785b      	ldrb	r3, [r3, #1]
 80136ce:	2bfe      	cmp	r3, #254	; 0xfe
 80136d0:	d002      	beq.n	80136d8 <USBD_MSC_Setup+0x4c>
 80136d2:	2bff      	cmp	r3, #255	; 0xff
 80136d4:	d02a      	beq.n	801372c <USBD_MSC_Setup+0xa0>
 80136d6:	e041      	b.n	801375c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80136d8:	683b      	ldr	r3, [r7, #0]
 80136da:	885b      	ldrh	r3, [r3, #2]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d11e      	bne.n	801371e <USBD_MSC_Setup+0x92>
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	88db      	ldrh	r3, [r3, #6]
 80136e4:	2b01      	cmp	r3, #1
 80136e6:	d11a      	bne.n	801371e <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 80136e8:	683b      	ldr	r3, [r7, #0]
 80136ea:	781b      	ldrb	r3, [r3, #0]
 80136ec:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	da15      	bge.n	801371e <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80136f8:	687a      	ldr	r2, [r7, #4]
 80136fa:	33b0      	adds	r3, #176	; 0xb0
 80136fc:	009b      	lsls	r3, r3, #2
 80136fe:	4413      	add	r3, r2
 8013700:	685b      	ldr	r3, [r3, #4]
 8013702:	699b      	ldr	r3, [r3, #24]
 8013704:	4798      	blx	r3
 8013706:	4603      	mov	r3, r0
 8013708:	461a      	mov	r2, r3
 801370a:	693b      	ldr	r3, [r7, #16]
 801370c:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801370e:	693b      	ldr	r3, [r7, #16]
 8013710:	2201      	movs	r2, #1
 8013712:	4619      	mov	r1, r3
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	f003 f8f9 	bl	801690c <USBD_CtlSendData>
 801371a:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801371c:	e025      	b.n	801376a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 801371e:	6839      	ldr	r1, [r7, #0]
 8013720:	6878      	ldr	r0, [r7, #4]
 8013722:	f003 f882 	bl	801682a <USBD_CtlError>
            ret = USBD_FAIL;
 8013726:	2303      	movs	r3, #3
 8013728:	75fb      	strb	r3, [r7, #23]
          break;
 801372a:	e01e      	b.n	801376a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801372c:	683b      	ldr	r3, [r7, #0]
 801372e:	885b      	ldrh	r3, [r3, #2]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d10c      	bne.n	801374e <USBD_MSC_Setup+0xc2>
 8013734:	683b      	ldr	r3, [r7, #0]
 8013736:	88db      	ldrh	r3, [r3, #6]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d108      	bne.n	801374e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 801373c:	683b      	ldr	r3, [r7, #0]
 801373e:	781b      	ldrb	r3, [r3, #0]
 8013740:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8013742:	2b00      	cmp	r3, #0
 8013744:	db03      	blt.n	801374e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8013746:	6878      	ldr	r0, [r7, #4]
 8013748:	f000 f9b4 	bl	8013ab4 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801374c:	e00d      	b.n	801376a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 801374e:	6839      	ldr	r1, [r7, #0]
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	f003 f86a 	bl	801682a <USBD_CtlError>
            ret = USBD_FAIL;
 8013756:	2303      	movs	r3, #3
 8013758:	75fb      	strb	r3, [r7, #23]
          break;
 801375a:	e006      	b.n	801376a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 801375c:	6839      	ldr	r1, [r7, #0]
 801375e:	6878      	ldr	r0, [r7, #4]
 8013760:	f003 f863 	bl	801682a <USBD_CtlError>
          ret = USBD_FAIL;
 8013764:	2303      	movs	r3, #3
 8013766:	75fb      	strb	r3, [r7, #23]
          break;
 8013768:	bf00      	nop
      }
      break;
 801376a:	e086      	b.n	801387a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	785b      	ldrb	r3, [r3, #1]
 8013770:	2b0b      	cmp	r3, #11
 8013772:	d872      	bhi.n	801385a <USBD_MSC_Setup+0x1ce>
 8013774:	a201      	add	r2, pc, #4	; (adr r2, 801377c <USBD_MSC_Setup+0xf0>)
 8013776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801377a:	bf00      	nop
 801377c:	080137ad 	.word	0x080137ad
 8013780:	08013829 	.word	0x08013829
 8013784:	0801385b 	.word	0x0801385b
 8013788:	0801385b 	.word	0x0801385b
 801378c:	0801385b 	.word	0x0801385b
 8013790:	0801385b 	.word	0x0801385b
 8013794:	0801385b 	.word	0x0801385b
 8013798:	0801385b 	.word	0x0801385b
 801379c:	0801385b 	.word	0x0801385b
 80137a0:	0801385b 	.word	0x0801385b
 80137a4:	080137d7 	.word	0x080137d7
 80137a8:	08013801 	.word	0x08013801
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137b2:	b2db      	uxtb	r3, r3
 80137b4:	2b03      	cmp	r3, #3
 80137b6:	d107      	bne.n	80137c8 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80137b8:	f107 030e 	add.w	r3, r7, #14
 80137bc:	2202      	movs	r2, #2
 80137be:	4619      	mov	r1, r3
 80137c0:	6878      	ldr	r0, [r7, #4]
 80137c2:	f003 f8a3 	bl	801690c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80137c6:	e050      	b.n	801386a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80137c8:	6839      	ldr	r1, [r7, #0]
 80137ca:	6878      	ldr	r0, [r7, #4]
 80137cc:	f003 f82d 	bl	801682a <USBD_CtlError>
            ret = USBD_FAIL;
 80137d0:	2303      	movs	r3, #3
 80137d2:	75fb      	strb	r3, [r7, #23]
          break;
 80137d4:	e049      	b.n	801386a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137dc:	b2db      	uxtb	r3, r3
 80137de:	2b03      	cmp	r3, #3
 80137e0:	d107      	bne.n	80137f2 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80137e2:	693b      	ldr	r3, [r7, #16]
 80137e4:	3304      	adds	r3, #4
 80137e6:	2201      	movs	r2, #1
 80137e8:	4619      	mov	r1, r3
 80137ea:	6878      	ldr	r0, [r7, #4]
 80137ec:	f003 f88e 	bl	801690c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80137f0:	e03b      	b.n	801386a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80137f2:	6839      	ldr	r1, [r7, #0]
 80137f4:	6878      	ldr	r0, [r7, #4]
 80137f6:	f003 f818 	bl	801682a <USBD_CtlError>
            ret = USBD_FAIL;
 80137fa:	2303      	movs	r3, #3
 80137fc:	75fb      	strb	r3, [r7, #23]
          break;
 80137fe:	e034      	b.n	801386a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013806:	b2db      	uxtb	r3, r3
 8013808:	2b03      	cmp	r3, #3
 801380a:	d106      	bne.n	801381a <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	885b      	ldrh	r3, [r3, #2]
 8013810:	b2db      	uxtb	r3, r3
 8013812:	461a      	mov	r2, r3
 8013814:	693b      	ldr	r3, [r7, #16]
 8013816:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013818:	e027      	b.n	801386a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 801381a:	6839      	ldr	r1, [r7, #0]
 801381c:	6878      	ldr	r0, [r7, #4]
 801381e:	f003 f804 	bl	801682a <USBD_CtlError>
            ret = USBD_FAIL;
 8013822:	2303      	movs	r3, #3
 8013824:	75fb      	strb	r3, [r7, #23]
          break;
 8013826:	e020      	b.n	801386a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801382e:	b2db      	uxtb	r3, r3
 8013830:	2b03      	cmp	r3, #3
 8013832:	d119      	bne.n	8013868 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	885b      	ldrh	r3, [r3, #2]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d115      	bne.n	8013868 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801383c:	683b      	ldr	r3, [r7, #0]
 801383e:	889b      	ldrh	r3, [r3, #4]
 8013840:	b2db      	uxtb	r3, r3
 8013842:	4619      	mov	r1, r3
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f005 f82f 	bl	80188a8 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801384a:	683b      	ldr	r3, [r7, #0]
 801384c:	889b      	ldrh	r3, [r3, #4]
 801384e:	b2db      	uxtb	r3, r3
 8013850:	4619      	mov	r1, r3
 8013852:	6878      	ldr	r0, [r7, #4]
 8013854:	f000 fb2e 	bl	8013eb4 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8013858:	e006      	b.n	8013868 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 801385a:	6839      	ldr	r1, [r7, #0]
 801385c:	6878      	ldr	r0, [r7, #4]
 801385e:	f002 ffe4 	bl	801682a <USBD_CtlError>
          ret = USBD_FAIL;
 8013862:	2303      	movs	r3, #3
 8013864:	75fb      	strb	r3, [r7, #23]
          break;
 8013866:	e000      	b.n	801386a <USBD_MSC_Setup+0x1de>
          break;
 8013868:	bf00      	nop
      }
      break;
 801386a:	e006      	b.n	801387a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 801386c:	6839      	ldr	r1, [r7, #0]
 801386e:	6878      	ldr	r0, [r7, #4]
 8013870:	f002 ffdb 	bl	801682a <USBD_CtlError>
      ret = USBD_FAIL;
 8013874:	2303      	movs	r3, #3
 8013876:	75fb      	strb	r3, [r7, #23]
      break;
 8013878:	bf00      	nop
  }

  return (uint8_t)ret;
 801387a:	7dfb      	ldrb	r3, [r7, #23]
}
 801387c:	4618      	mov	r0, r3
 801387e:	3718      	adds	r7, #24
 8013880:	46bd      	mov	sp, r7
 8013882:	bd80      	pop	{r7, pc}

08013884 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013884:	b580      	push	{r7, lr}
 8013886:	b082      	sub	sp, #8
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
 801388c:	460b      	mov	r3, r1
 801388e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8013890:	78fb      	ldrb	r3, [r7, #3]
 8013892:	4619      	mov	r1, r3
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f000 f959 	bl	8013b4c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801389a:	2300      	movs	r3, #0
}
 801389c:	4618      	mov	r0, r3
 801389e:	3708      	adds	r7, #8
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd80      	pop	{r7, pc}

080138a4 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b082      	sub	sp, #8
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
 80138ac:	460b      	mov	r3, r1
 80138ae:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80138b0:	78fb      	ldrb	r3, [r7, #3]
 80138b2:	4619      	mov	r1, r3
 80138b4:	6878      	ldr	r0, [r7, #4]
 80138b6:	f000 f983 	bl	8013bc0 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80138ba:	2300      	movs	r3, #0
}
 80138bc:	4618      	mov	r0, r3
 80138be:	3708      	adds	r7, #8
 80138c0:	46bd      	mov	sp, r7
 80138c2:	bd80      	pop	{r7, pc}

080138c4 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b084      	sub	sp, #16
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80138cc:	2181      	movs	r1, #129	; 0x81
 80138ce:	4812      	ldr	r0, [pc, #72]	; (8013918 <USBD_MSC_GetHSCfgDesc+0x54>)
 80138d0:	f002 f972 	bl	8015bb8 <USBD_GetEpDesc>
 80138d4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80138d6:	2101      	movs	r1, #1
 80138d8:	480f      	ldr	r0, [pc, #60]	; (8013918 <USBD_MSC_GetHSCfgDesc+0x54>)
 80138da:	f002 f96d 	bl	8015bb8 <USBD_GetEpDesc>
 80138de:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d006      	beq.n	80138f4 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	2200      	movs	r2, #0
 80138ea:	711a      	strb	r2, [r3, #4]
 80138ec:	2200      	movs	r2, #0
 80138ee:	f042 0202 	orr.w	r2, r2, #2
 80138f2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d006      	beq.n	8013908 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80138fa:	68bb      	ldr	r3, [r7, #8]
 80138fc:	2200      	movs	r2, #0
 80138fe:	711a      	strb	r2, [r3, #4]
 8013900:	2200      	movs	r2, #0
 8013902:	f042 0202 	orr.w	r2, r2, #2
 8013906:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2220      	movs	r2, #32
 801390c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801390e:	4b02      	ldr	r3, [pc, #8]	; (8013918 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8013910:	4618      	mov	r0, r3
 8013912:	3710      	adds	r7, #16
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}
 8013918:	20000060 	.word	0x20000060

0801391c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b084      	sub	sp, #16
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8013924:	2181      	movs	r1, #129	; 0x81
 8013926:	4812      	ldr	r0, [pc, #72]	; (8013970 <USBD_MSC_GetFSCfgDesc+0x54>)
 8013928:	f002 f946 	bl	8015bb8 <USBD_GetEpDesc>
 801392c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801392e:	2101      	movs	r1, #1
 8013930:	480f      	ldr	r0, [pc, #60]	; (8013970 <USBD_MSC_GetFSCfgDesc+0x54>)
 8013932:	f002 f941 	bl	8015bb8 <USBD_GetEpDesc>
 8013936:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d006      	beq.n	801394c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	2200      	movs	r2, #0
 8013942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013946:	711a      	strb	r2, [r3, #4]
 8013948:	2200      	movs	r2, #0
 801394a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 801394c:	68bb      	ldr	r3, [r7, #8]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d006      	beq.n	8013960 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8013952:	68bb      	ldr	r3, [r7, #8]
 8013954:	2200      	movs	r2, #0
 8013956:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801395a:	711a      	strb	r2, [r3, #4]
 801395c:	2200      	movs	r2, #0
 801395e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	2220      	movs	r2, #32
 8013964:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8013966:	4b02      	ldr	r3, [pc, #8]	; (8013970 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8013968:	4618      	mov	r0, r3
 801396a:	3710      	adds	r7, #16
 801396c:	46bd      	mov	sp, r7
 801396e:	bd80      	pop	{r7, pc}
 8013970:	20000060 	.word	0x20000060

08013974 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b084      	sub	sp, #16
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801397c:	2181      	movs	r1, #129	; 0x81
 801397e:	4812      	ldr	r0, [pc, #72]	; (80139c8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8013980:	f002 f91a 	bl	8015bb8 <USBD_GetEpDesc>
 8013984:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8013986:	2101      	movs	r1, #1
 8013988:	480f      	ldr	r0, [pc, #60]	; (80139c8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 801398a:	f002 f915 	bl	8015bb8 <USBD_GetEpDesc>
 801398e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d006      	beq.n	80139a4 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	2200      	movs	r2, #0
 801399a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801399e:	711a      	strb	r2, [r3, #4]
 80139a0:	2200      	movs	r2, #0
 80139a2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d006      	beq.n	80139b8 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80139aa:	68bb      	ldr	r3, [r7, #8]
 80139ac:	2200      	movs	r2, #0
 80139ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80139b2:	711a      	strb	r2, [r3, #4]
 80139b4:	2200      	movs	r2, #0
 80139b6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	2220      	movs	r2, #32
 80139bc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80139be:	4b02      	ldr	r3, [pc, #8]	; (80139c8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80139c0:	4618      	mov	r0, r3
 80139c2:	3710      	adds	r7, #16
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}
 80139c8:	20000060 	.word	0x20000060

080139cc <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80139cc:	b480      	push	{r7}
 80139ce:	b083      	sub	sp, #12
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	220a      	movs	r2, #10
 80139d8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80139da:	4b03      	ldr	r3, [pc, #12]	; (80139e8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80139dc:	4618      	mov	r0, r3
 80139de:	370c      	adds	r7, #12
 80139e0:	46bd      	mov	sp, r7
 80139e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e6:	4770      	bx	lr
 80139e8:	20000080 	.word	0x20000080

080139ec <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80139ec:	b480      	push	{r7}
 80139ee:	b083      	sub	sp, #12
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
 80139f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80139f6:	683b      	ldr	r3, [r7, #0]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d101      	bne.n	8013a00 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80139fc:	2303      	movs	r3, #3
 80139fe:	e009      	b.n	8013a14 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013a06:	687a      	ldr	r2, [r7, #4]
 8013a08:	33b0      	adds	r3, #176	; 0xb0
 8013a0a:	009b      	lsls	r3, r3, #2
 8013a0c:	4413      	add	r3, r2
 8013a0e:	683a      	ldr	r2, [r7, #0]
 8013a10:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013a12:	2300      	movs	r3, #0
}
 8013a14:	4618      	mov	r0, r3
 8013a16:	370c      	adds	r7, #12
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1e:	4770      	bx	lr

08013a20 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b084      	sub	sp, #16
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	32b0      	adds	r2, #176	; 0xb0
 8013a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a36:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d032      	beq.n	8013aa4 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	2200      	movs	r2, #0
 8013a42:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	2200      	movs	r2, #0
 8013a48:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	2200      	movs	r2, #0
 8013a56:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	2200      	movs	r2, #0
 8013a5e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013a68:	687a      	ldr	r2, [r7, #4]
 8013a6a:	33b0      	adds	r3, #176	; 0xb0
 8013a6c:	009b      	lsls	r3, r3, #2
 8013a6e:	4413      	add	r3, r2
 8013a70:	685b      	ldr	r3, [r3, #4]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	2000      	movs	r0, #0
 8013a76:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8013a78:	4b0c      	ldr	r3, [pc, #48]	; (8013aac <MSC_BOT_Init+0x8c>)
 8013a7a:	781b      	ldrb	r3, [r3, #0]
 8013a7c:	4619      	mov	r1, r3
 8013a7e:	6878      	ldr	r0, [r7, #4]
 8013a80:	f004 ff12 	bl	80188a8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8013a84:	4b0a      	ldr	r3, [pc, #40]	; (8013ab0 <MSC_BOT_Init+0x90>)
 8013a86:	781b      	ldrb	r3, [r3, #0]
 8013a88:	4619      	mov	r1, r3
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	f004 ff0c 	bl	80188a8 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8013a90:	4b06      	ldr	r3, [pc, #24]	; (8013aac <MSC_BOT_Init+0x8c>)
 8013a92:	7819      	ldrb	r1, [r3, #0]
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8013a9a:	231f      	movs	r3, #31
 8013a9c:	6878      	ldr	r0, [r7, #4]
 8013a9e:	f004 ffcc 	bl	8018a3a <USBD_LL_PrepareReceive>
 8013aa2:	e000      	b.n	8013aa6 <MSC_BOT_Init+0x86>
    return;
 8013aa4:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8013aa6:	3710      	adds	r7, #16
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bd80      	pop	{r7, pc}
 8013aac:	2000008b 	.word	0x2000008b
 8013ab0:	2000008a 	.word	0x2000008a

08013ab4 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b084      	sub	sp, #16
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	32b0      	adds	r2, #176	; 0xb0
 8013ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013aca:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d01b      	beq.n	8013b0a <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	2201      	movs	r2, #1
 8013adc:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8013ade:	4b0d      	ldr	r3, [pc, #52]	; (8013b14 <MSC_BOT_Reset+0x60>)
 8013ae0:	781b      	ldrb	r3, [r3, #0]
 8013ae2:	4619      	mov	r1, r3
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f004 ff1d 	bl	8018924 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8013aea:	4b0b      	ldr	r3, [pc, #44]	; (8013b18 <MSC_BOT_Reset+0x64>)
 8013aec:	781b      	ldrb	r3, [r3, #0]
 8013aee:	4619      	mov	r1, r3
 8013af0:	6878      	ldr	r0, [r7, #4]
 8013af2:	f004 ff17 	bl	8018924 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8013af6:	4b08      	ldr	r3, [pc, #32]	; (8013b18 <MSC_BOT_Reset+0x64>)
 8013af8:	7819      	ldrb	r1, [r3, #0]
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8013b00:	231f      	movs	r3, #31
 8013b02:	6878      	ldr	r0, [r7, #4]
 8013b04:	f004 ff99 	bl	8018a3a <USBD_LL_PrepareReceive>
 8013b08:	e000      	b.n	8013b0c <MSC_BOT_Reset+0x58>
    return;
 8013b0a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8013b0c:	3710      	adds	r7, #16
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd80      	pop	{r7, pc}
 8013b12:	bf00      	nop
 8013b14:	2000008a 	.word	0x2000008a
 8013b18:	2000008b 	.word	0x2000008b

08013b1c <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8013b1c:	b480      	push	{r7}
 8013b1e:	b085      	sub	sp, #20
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	32b0      	adds	r2, #176	; 0xb0
 8013b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b32:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d002      	beq.n	8013b40 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	721a      	strb	r2, [r3, #8]
  }
}
 8013b40:	bf00      	nop
 8013b42:	3714      	adds	r7, #20
 8013b44:	46bd      	mov	sp, r7
 8013b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4a:	4770      	bx	lr

08013b4c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b084      	sub	sp, #16
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
 8013b54:	460b      	mov	r3, r1
 8013b56:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	32b0      	adds	r2, #176	; 0xb0
 8013b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b66:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d020      	beq.n	8013bb0 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	7a1b      	ldrb	r3, [r3, #8]
 8013b72:	2b02      	cmp	r3, #2
 8013b74:	d005      	beq.n	8013b82 <MSC_BOT_DataIn+0x36>
 8013b76:	2b02      	cmp	r3, #2
 8013b78:	db1c      	blt.n	8013bb4 <MSC_BOT_DataIn+0x68>
 8013b7a:	3b03      	subs	r3, #3
 8013b7c:	2b01      	cmp	r3, #1
 8013b7e:	d819      	bhi.n	8013bb4 <MSC_BOT_DataIn+0x68>
 8013b80:	e011      	b.n	8013ba6 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8013b8e:	461a      	mov	r2, r3
 8013b90:	6878      	ldr	r0, [r7, #4]
 8013b92:	f000 f9c9 	bl	8013f28 <SCSI_ProcessCmd>
 8013b96:	4603      	mov	r3, r0
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	da0d      	bge.n	8013bb8 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013b9c:	2101      	movs	r1, #1
 8013b9e:	6878      	ldr	r0, [r7, #4]
 8013ba0:	f000 f90c 	bl	8013dbc <MSC_BOT_SendCSW>
      }
      break;
 8013ba4:	e008      	b.n	8013bb8 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013ba6:	2100      	movs	r1, #0
 8013ba8:	6878      	ldr	r0, [r7, #4]
 8013baa:	f000 f907 	bl	8013dbc <MSC_BOT_SendCSW>
      break;
 8013bae:	e004      	b.n	8013bba <MSC_BOT_DataIn+0x6e>
    return;
 8013bb0:	bf00      	nop
 8013bb2:	e002      	b.n	8013bba <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8013bb4:	bf00      	nop
 8013bb6:	e000      	b.n	8013bba <MSC_BOT_DataIn+0x6e>
      break;
 8013bb8:	bf00      	nop
  }
}
 8013bba:	3710      	adds	r7, #16
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bd80      	pop	{r7, pc}

08013bc0 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b084      	sub	sp, #16
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
 8013bc8:	460b      	mov	r3, r1
 8013bca:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	32b0      	adds	r2, #176	; 0xb0
 8013bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bda:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d01c      	beq.n	8013c1c <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	7a1b      	ldrb	r3, [r3, #8]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d002      	beq.n	8013bf0 <MSC_BOT_DataOut+0x30>
 8013bea:	2b01      	cmp	r3, #1
 8013bec:	d004      	beq.n	8013bf8 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8013bee:	e018      	b.n	8013c22 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8013bf0:	6878      	ldr	r0, [r7, #4]
 8013bf2:	f000 f819 	bl	8013c28 <MSC_BOT_CBW_Decode>
      break;
 8013bf6:	e014      	b.n	8013c22 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8013c04:	461a      	mov	r2, r3
 8013c06:	6878      	ldr	r0, [r7, #4]
 8013c08:	f000 f98e 	bl	8013f28 <SCSI_ProcessCmd>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	da06      	bge.n	8013c20 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013c12:	2101      	movs	r1, #1
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	f000 f8d1 	bl	8013dbc <MSC_BOT_SendCSW>
      break;
 8013c1a:	e001      	b.n	8013c20 <MSC_BOT_DataOut+0x60>
    return;
 8013c1c:	bf00      	nop
 8013c1e:	e000      	b.n	8013c22 <MSC_BOT_DataOut+0x62>
      break;
 8013c20:	bf00      	nop
  }
}
 8013c22:	3710      	adds	r7, #16
 8013c24:	46bd      	mov	sp, r7
 8013c26:	bd80      	pop	{r7, pc}

08013c28 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b084      	sub	sp, #16
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	32b0      	adds	r2, #176	; 0xb0
 8013c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c3e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d079      	beq.n	8013d3a <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8013c5e:	4b3a      	ldr	r3, [pc, #232]	; (8013d48 <MSC_BOT_CBW_Decode+0x120>)
 8013c60:	781b      	ldrb	r3, [r3, #0]
 8013c62:	4619      	mov	r1, r3
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	f004 ff09 	bl	8018a7c <USBD_LL_GetRxDataSize>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	2b1f      	cmp	r3, #31
 8013c6e:	d114      	bne.n	8013c9a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8013c76:	4a35      	ldr	r2, [pc, #212]	; (8013d4c <MSC_BOT_CBW_Decode+0x124>)
 8013c78:	4293      	cmp	r3, r2
 8013c7a:	d10e      	bne.n	8013c9a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013c82:	2b01      	cmp	r3, #1
 8013c84:	d809      	bhi.n	8013c9a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d004      	beq.n	8013c9a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013c96:	2b10      	cmp	r3, #16
 8013c98:	d90e      	bls.n	8013cb8 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8013ca0:	2320      	movs	r3, #32
 8013ca2:	2205      	movs	r2, #5
 8013ca4:	6878      	ldr	r0, [r7, #4]
 8013ca6:	f000 fe28 	bl	80148fa <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	2202      	movs	r2, #2
 8013cae:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8013cb0:	6878      	ldr	r0, [r7, #4]
 8013cb2:	f000 f8bd 	bl	8013e30 <MSC_BOT_Abort>
 8013cb6:	e043      	b.n	8013d40 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8013cc4:	461a      	mov	r2, r3
 8013cc6:	6878      	ldr	r0, [r7, #4]
 8013cc8:	f000 f92e 	bl	8013f28 <SCSI_ProcessCmd>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	da0c      	bge.n	8013cec <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	7a1b      	ldrb	r3, [r3, #8]
 8013cd6:	2b05      	cmp	r3, #5
 8013cd8:	d104      	bne.n	8013ce4 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013cda:	2101      	movs	r1, #1
 8013cdc:	6878      	ldr	r0, [r7, #4]
 8013cde:	f000 f86d 	bl	8013dbc <MSC_BOT_SendCSW>
 8013ce2:	e02d      	b.n	8013d40 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013ce4:	6878      	ldr	r0, [r7, #4]
 8013ce6:	f000 f8a3 	bl	8013e30 <MSC_BOT_Abort>
 8013cea:	e029      	b.n	8013d40 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	7a1b      	ldrb	r3, [r3, #8]
 8013cf0:	2b02      	cmp	r3, #2
 8013cf2:	d024      	beq.n	8013d3e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013cf8:	2b01      	cmp	r3, #1
 8013cfa:	d020      	beq.n	8013d3e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013d00:	2b03      	cmp	r3, #3
 8013d02:	d01c      	beq.n	8013d3e <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	68db      	ldr	r3, [r3, #12]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d009      	beq.n	8013d20 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	f103 0110 	add.w	r1, r3, #16
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	68db      	ldr	r3, [r3, #12]
 8013d16:	461a      	mov	r2, r3
 8013d18:	6878      	ldr	r0, [r7, #4]
 8013d1a:	f000 f819 	bl	8013d50 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8013d1e:	e00f      	b.n	8013d40 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	68db      	ldr	r3, [r3, #12]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d104      	bne.n	8013d32 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013d28:	2100      	movs	r1, #0
 8013d2a:	6878      	ldr	r0, [r7, #4]
 8013d2c:	f000 f846 	bl	8013dbc <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8013d30:	e006      	b.n	8013d40 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013d32:	6878      	ldr	r0, [r7, #4]
 8013d34:	f000 f87c 	bl	8013e30 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8013d38:	e002      	b.n	8013d40 <MSC_BOT_CBW_Decode+0x118>
    return;
 8013d3a:	bf00      	nop
 8013d3c:	e000      	b.n	8013d40 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8013d3e:	bf00      	nop
    }
  }
}
 8013d40:	3710      	adds	r7, #16
 8013d42:	46bd      	mov	sp, r7
 8013d44:	bd80      	pop	{r7, pc}
 8013d46:	bf00      	nop
 8013d48:	2000008b 	.word	0x2000008b
 8013d4c:	43425355 	.word	0x43425355

08013d50 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b086      	sub	sp, #24
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	60f8      	str	r0, [r7, #12]
 8013d58:	60b9      	str	r1, [r7, #8]
 8013d5a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	32b0      	adds	r2, #176	; 0xb0
 8013d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d6a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013d6c:	697b      	ldr	r3, [r7, #20]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d01e      	beq.n	8013db0 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8013d72:	697b      	ldr	r3, [r7, #20]
 8013d74:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013d78:	687a      	ldr	r2, [r7, #4]
 8013d7a:	4293      	cmp	r3, r2
 8013d7c:	bf28      	it	cs
 8013d7e:	4613      	movcs	r3, r2
 8013d80:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8013d82:	697b      	ldr	r3, [r7, #20]
 8013d84:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	1ad2      	subs	r2, r2, r3
 8013d8c:	697b      	ldr	r3, [r7, #20]
 8013d8e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8013d92:	697b      	ldr	r3, [r7, #20]
 8013d94:	2200      	movs	r2, #0
 8013d96:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8013d9a:	697b      	ldr	r3, [r7, #20]
 8013d9c:	2204      	movs	r2, #4
 8013d9e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8013da0:	4b05      	ldr	r3, [pc, #20]	; (8013db8 <MSC_BOT_SendData+0x68>)
 8013da2:	7819      	ldrb	r1, [r3, #0]
 8013da4:	693b      	ldr	r3, [r7, #16]
 8013da6:	68ba      	ldr	r2, [r7, #8]
 8013da8:	68f8      	ldr	r0, [r7, #12]
 8013daa:	f004 fe25 	bl	80189f8 <USBD_LL_Transmit>
 8013dae:	e000      	b.n	8013db2 <MSC_BOT_SendData+0x62>
    return;
 8013db0:	bf00      	nop
}
 8013db2:	3718      	adds	r7, #24
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bd80      	pop	{r7, pc}
 8013db8:	2000008a 	.word	0x2000008a

08013dbc <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b084      	sub	sp, #16
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
 8013dc4:	460b      	mov	r3, r1
 8013dc6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	32b0      	adds	r2, #176	; 0xb0
 8013dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013dd6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d01d      	beq.n	8013e1a <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	4a10      	ldr	r2, [pc, #64]	; (8013e24 <MSC_BOT_SendCSW+0x68>)
 8013de2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	78fa      	ldrb	r2, [r7, #3]
 8013dea:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	2200      	movs	r2, #0
 8013df2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8013df4:	4b0c      	ldr	r3, [pc, #48]	; (8013e28 <MSC_BOT_SendCSW+0x6c>)
 8013df6:	7819      	ldrb	r1, [r3, #0]
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8013dfe:	230d      	movs	r3, #13
 8013e00:	6878      	ldr	r0, [r7, #4]
 8013e02:	f004 fdf9 	bl	80189f8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8013e06:	4b09      	ldr	r3, [pc, #36]	; (8013e2c <MSC_BOT_SendCSW+0x70>)
 8013e08:	7819      	ldrb	r1, [r3, #0]
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8013e10:	231f      	movs	r3, #31
 8013e12:	6878      	ldr	r0, [r7, #4]
 8013e14:	f004 fe11 	bl	8018a3a <USBD_LL_PrepareReceive>
 8013e18:	e000      	b.n	8013e1c <MSC_BOT_SendCSW+0x60>
    return;
 8013e1a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8013e1c:	3710      	adds	r7, #16
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	bd80      	pop	{r7, pc}
 8013e22:	bf00      	nop
 8013e24:	53425355 	.word	0x53425355
 8013e28:	2000008a 	.word	0x2000008a
 8013e2c:	2000008b 	.word	0x2000008b

08013e30 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b084      	sub	sp, #16
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	32b0      	adds	r2, #176	; 0xb0
 8013e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e46:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d02a      	beq.n	8013ea4 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d10e      	bne.n	8013e76 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d009      	beq.n	8013e76 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d105      	bne.n	8013e76 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8013e6a:	4b10      	ldr	r3, [pc, #64]	; (8013eac <MSC_BOT_Abort+0x7c>)
 8013e6c:	781b      	ldrb	r3, [r3, #0]
 8013e6e:	4619      	mov	r1, r3
 8013e70:	6878      	ldr	r0, [r7, #4]
 8013e72:	f004 fd38 	bl	80188e6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8013e76:	4b0e      	ldr	r3, [pc, #56]	; (8013eb0 <MSC_BOT_Abort+0x80>)
 8013e78:	781b      	ldrb	r3, [r3, #0]
 8013e7a:	4619      	mov	r1, r3
 8013e7c:	6878      	ldr	r0, [r7, #4]
 8013e7e:	f004 fd32 	bl	80188e6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	7a5b      	ldrb	r3, [r3, #9]
 8013e86:	2b02      	cmp	r3, #2
 8013e88:	d10d      	bne.n	8013ea6 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8013e8a:	4b09      	ldr	r3, [pc, #36]	; (8013eb0 <MSC_BOT_Abort+0x80>)
 8013e8c:	781b      	ldrb	r3, [r3, #0]
 8013e8e:	4619      	mov	r1, r3
 8013e90:	6878      	ldr	r0, [r7, #4]
 8013e92:	f004 fd28 	bl	80188e6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8013e96:	4b05      	ldr	r3, [pc, #20]	; (8013eac <MSC_BOT_Abort+0x7c>)
 8013e98:	781b      	ldrb	r3, [r3, #0]
 8013e9a:	4619      	mov	r1, r3
 8013e9c:	6878      	ldr	r0, [r7, #4]
 8013e9e:	f004 fd22 	bl	80188e6 <USBD_LL_StallEP>
 8013ea2:	e000      	b.n	8013ea6 <MSC_BOT_Abort+0x76>
    return;
 8013ea4:	bf00      	nop
  }
}
 8013ea6:	3710      	adds	r7, #16
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd80      	pop	{r7, pc}
 8013eac:	2000008b 	.word	0x2000008b
 8013eb0:	2000008a 	.word	0x2000008a

08013eb4 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b084      	sub	sp, #16
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
 8013ebc:	460b      	mov	r3, r1
 8013ebe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	32b0      	adds	r2, #176	; 0xb0
 8013eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ece:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d01d      	beq.n	8013f12 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	7a5b      	ldrb	r3, [r3, #9]
 8013eda:	2b02      	cmp	r3, #2
 8013edc:	d10c      	bne.n	8013ef8 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8013ede:	4b10      	ldr	r3, [pc, #64]	; (8013f20 <MSC_BOT_CplClrFeature+0x6c>)
 8013ee0:	781b      	ldrb	r3, [r3, #0]
 8013ee2:	4619      	mov	r1, r3
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f004 fcfe 	bl	80188e6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8013eea:	4b0e      	ldr	r3, [pc, #56]	; (8013f24 <MSC_BOT_CplClrFeature+0x70>)
 8013eec:	781b      	ldrb	r3, [r3, #0]
 8013eee:	4619      	mov	r1, r3
 8013ef0:	6878      	ldr	r0, [r7, #4]
 8013ef2:	f004 fcf8 	bl	80188e6 <USBD_LL_StallEP>
 8013ef6:	e00f      	b.n	8013f18 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8013ef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	da0a      	bge.n	8013f16 <MSC_BOT_CplClrFeature+0x62>
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	7a5b      	ldrb	r3, [r3, #9]
 8013f04:	2b01      	cmp	r3, #1
 8013f06:	d006      	beq.n	8013f16 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013f08:	2101      	movs	r1, #1
 8013f0a:	6878      	ldr	r0, [r7, #4]
 8013f0c:	f7ff ff56 	bl	8013dbc <MSC_BOT_SendCSW>
 8013f10:	e002      	b.n	8013f18 <MSC_BOT_CplClrFeature+0x64>
    return;
 8013f12:	bf00      	nop
 8013f14:	e000      	b.n	8013f18 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8013f16:	bf00      	nop
  }
}
 8013f18:	3710      	adds	r7, #16
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bd80      	pop	{r7, pc}
 8013f1e:	bf00      	nop
 8013f20:	2000008a 	.word	0x2000008a
 8013f24:	2000008b 	.word	0x2000008b

08013f28 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b086      	sub	sp, #24
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	60f8      	str	r0, [r7, #12]
 8013f30:	460b      	mov	r3, r1
 8013f32:	607a      	str	r2, [r7, #4]
 8013f34:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	32b0      	adds	r2, #176	; 0xb0
 8013f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f44:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d102      	bne.n	8013f52 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8013f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8013f50:	e168      	b.n	8014224 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	781b      	ldrb	r3, [r3, #0]
 8013f56:	2baa      	cmp	r3, #170	; 0xaa
 8013f58:	f000 8144 	beq.w	80141e4 <SCSI_ProcessCmd+0x2bc>
 8013f5c:	2baa      	cmp	r3, #170	; 0xaa
 8013f5e:	f300 8153 	bgt.w	8014208 <SCSI_ProcessCmd+0x2e0>
 8013f62:	2ba8      	cmp	r3, #168	; 0xa8
 8013f64:	f000 812c 	beq.w	80141c0 <SCSI_ProcessCmd+0x298>
 8013f68:	2ba8      	cmp	r3, #168	; 0xa8
 8013f6a:	f300 814d 	bgt.w	8014208 <SCSI_ProcessCmd+0x2e0>
 8013f6e:	2b5a      	cmp	r3, #90	; 0x5a
 8013f70:	f300 80c0 	bgt.w	80140f4 <SCSI_ProcessCmd+0x1cc>
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	f2c0 8147 	blt.w	8014208 <SCSI_ProcessCmd+0x2e0>
 8013f7a:	2b5a      	cmp	r3, #90	; 0x5a
 8013f7c:	f200 8144 	bhi.w	8014208 <SCSI_ProcessCmd+0x2e0>
 8013f80:	a201      	add	r2, pc, #4	; (adr r2, 8013f88 <SCSI_ProcessCmd+0x60>)
 8013f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f86:	bf00      	nop
 8013f88:	080140fb 	.word	0x080140fb
 8013f8c:	08014209 	.word	0x08014209
 8013f90:	08014209 	.word	0x08014209
 8013f94:	0801410d 	.word	0x0801410d
 8013f98:	08014209 	.word	0x08014209
 8013f9c:	08014209 	.word	0x08014209
 8013fa0:	08014209 	.word	0x08014209
 8013fa4:	08014209 	.word	0x08014209
 8013fa8:	08014209 	.word	0x08014209
 8013fac:	08014209 	.word	0x08014209
 8013fb0:	08014209 	.word	0x08014209
 8013fb4:	08014209 	.word	0x08014209
 8013fb8:	08014209 	.word	0x08014209
 8013fbc:	08014209 	.word	0x08014209
 8013fc0:	08014209 	.word	0x08014209
 8013fc4:	08014209 	.word	0x08014209
 8013fc8:	08014209 	.word	0x08014209
 8013fcc:	08014209 	.word	0x08014209
 8013fd0:	0801411f 	.word	0x0801411f
 8013fd4:	08014209 	.word	0x08014209
 8013fd8:	08014209 	.word	0x08014209
 8013fdc:	08014209 	.word	0x08014209
 8013fe0:	08014209 	.word	0x08014209
 8013fe4:	08014209 	.word	0x08014209
 8013fe8:	08014209 	.word	0x08014209
 8013fec:	08014209 	.word	0x08014209
 8013ff0:	08014155 	.word	0x08014155
 8013ff4:	08014131 	.word	0x08014131
 8013ff8:	08014209 	.word	0x08014209
 8013ffc:	08014209 	.word	0x08014209
 8014000:	08014143 	.word	0x08014143
 8014004:	08014209 	.word	0x08014209
 8014008:	08014209 	.word	0x08014209
 801400c:	08014209 	.word	0x08014209
 8014010:	08014209 	.word	0x08014209
 8014014:	08014179 	.word	0x08014179
 8014018:	08014209 	.word	0x08014209
 801401c:	0801418b 	.word	0x0801418b
 8014020:	08014209 	.word	0x08014209
 8014024:	08014209 	.word	0x08014209
 8014028:	080141af 	.word	0x080141af
 801402c:	08014209 	.word	0x08014209
 8014030:	080141d3 	.word	0x080141d3
 8014034:	08014209 	.word	0x08014209
 8014038:	08014209 	.word	0x08014209
 801403c:	08014209 	.word	0x08014209
 8014040:	08014209 	.word	0x08014209
 8014044:	080141f7 	.word	0x080141f7
 8014048:	08014209 	.word	0x08014209
 801404c:	08014209 	.word	0x08014209
 8014050:	08014209 	.word	0x08014209
 8014054:	08014209 	.word	0x08014209
 8014058:	08014209 	.word	0x08014209
 801405c:	08014209 	.word	0x08014209
 8014060:	08014209 	.word	0x08014209
 8014064:	08014209 	.word	0x08014209
 8014068:	08014209 	.word	0x08014209
 801406c:	08014209 	.word	0x08014209
 8014070:	08014209 	.word	0x08014209
 8014074:	08014209 	.word	0x08014209
 8014078:	08014209 	.word	0x08014209
 801407c:	08014209 	.word	0x08014209
 8014080:	08014209 	.word	0x08014209
 8014084:	08014209 	.word	0x08014209
 8014088:	08014209 	.word	0x08014209
 801408c:	08014209 	.word	0x08014209
 8014090:	08014209 	.word	0x08014209
 8014094:	08014209 	.word	0x08014209
 8014098:	08014209 	.word	0x08014209
 801409c:	08014209 	.word	0x08014209
 80140a0:	08014209 	.word	0x08014209
 80140a4:	08014209 	.word	0x08014209
 80140a8:	08014209 	.word	0x08014209
 80140ac:	08014209 	.word	0x08014209
 80140b0:	08014209 	.word	0x08014209
 80140b4:	08014209 	.word	0x08014209
 80140b8:	08014209 	.word	0x08014209
 80140bc:	08014209 	.word	0x08014209
 80140c0:	08014209 	.word	0x08014209
 80140c4:	08014209 	.word	0x08014209
 80140c8:	08014209 	.word	0x08014209
 80140cc:	08014209 	.word	0x08014209
 80140d0:	08014209 	.word	0x08014209
 80140d4:	08014209 	.word	0x08014209
 80140d8:	08014209 	.word	0x08014209
 80140dc:	08014209 	.word	0x08014209
 80140e0:	08014209 	.word	0x08014209
 80140e4:	08014209 	.word	0x08014209
 80140e8:	08014209 	.word	0x08014209
 80140ec:	08014209 	.word	0x08014209
 80140f0:	08014167 	.word	0x08014167
 80140f4:	2b9e      	cmp	r3, #158	; 0x9e
 80140f6:	d051      	beq.n	801419c <SCSI_ProcessCmd+0x274>
 80140f8:	e086      	b.n	8014208 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80140fa:	7afb      	ldrb	r3, [r7, #11]
 80140fc:	687a      	ldr	r2, [r7, #4]
 80140fe:	4619      	mov	r1, r3
 8014100:	68f8      	ldr	r0, [r7, #12]
 8014102:	f000 f893 	bl	801422c <SCSI_TestUnitReady>
 8014106:	4603      	mov	r3, r0
 8014108:	75fb      	strb	r3, [r7, #23]
      break;
 801410a:	e089      	b.n	8014220 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 801410c:	7afb      	ldrb	r3, [r7, #11]
 801410e:	687a      	ldr	r2, [r7, #4]
 8014110:	4619      	mov	r1, r3
 8014112:	68f8      	ldr	r0, [r7, #12]
 8014114:	f000 fb6e 	bl	80147f4 <SCSI_RequestSense>
 8014118:	4603      	mov	r3, r0
 801411a:	75fb      	strb	r3, [r7, #23]
      break;
 801411c:	e080      	b.n	8014220 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801411e:	7afb      	ldrb	r3, [r7, #11]
 8014120:	687a      	ldr	r2, [r7, #4]
 8014122:	4619      	mov	r1, r3
 8014124:	68f8      	ldr	r0, [r7, #12]
 8014126:	f000 f8db 	bl	80142e0 <SCSI_Inquiry>
 801412a:	4603      	mov	r3, r0
 801412c:	75fb      	strb	r3, [r7, #23]
      break;
 801412e:	e077      	b.n	8014220 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8014130:	7afb      	ldrb	r3, [r7, #11]
 8014132:	687a      	ldr	r2, [r7, #4]
 8014134:	4619      	mov	r1, r3
 8014136:	68f8      	ldr	r0, [r7, #12]
 8014138:	f000 fc2a 	bl	8014990 <SCSI_StartStopUnit>
 801413c:	4603      	mov	r3, r0
 801413e:	75fb      	strb	r3, [r7, #23]
      break;
 8014140:	e06e      	b.n	8014220 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8014142:	7afb      	ldrb	r3, [r7, #11]
 8014144:	687a      	ldr	r2, [r7, #4]
 8014146:	4619      	mov	r1, r3
 8014148:	68f8      	ldr	r0, [r7, #12]
 801414a:	f000 fc76 	bl	8014a3a <SCSI_AllowPreventRemovable>
 801414e:	4603      	mov	r3, r0
 8014150:	75fb      	strb	r3, [r7, #23]
      break;
 8014152:	e065      	b.n	8014220 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8014154:	7afb      	ldrb	r3, [r7, #11]
 8014156:	687a      	ldr	r2, [r7, #4]
 8014158:	4619      	mov	r1, r3
 801415a:	68f8      	ldr	r0, [r7, #12]
 801415c:	f000 faea 	bl	8014734 <SCSI_ModeSense6>
 8014160:	4603      	mov	r3, r0
 8014162:	75fb      	strb	r3, [r7, #23]
      break;
 8014164:	e05c      	b.n	8014220 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8014166:	7afb      	ldrb	r3, [r7, #11]
 8014168:	687a      	ldr	r2, [r7, #4]
 801416a:	4619      	mov	r1, r3
 801416c:	68f8      	ldr	r0, [r7, #12]
 801416e:	f000 fb11 	bl	8014794 <SCSI_ModeSense10>
 8014172:	4603      	mov	r3, r0
 8014174:	75fb      	strb	r3, [r7, #23]
      break;
 8014176:	e053      	b.n	8014220 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8014178:	7afb      	ldrb	r3, [r7, #11]
 801417a:	687a      	ldr	r2, [r7, #4]
 801417c:	4619      	mov	r1, r3
 801417e:	68f8      	ldr	r0, [r7, #12]
 8014180:	f000 fa5d 	bl	801463e <SCSI_ReadFormatCapacity>
 8014184:	4603      	mov	r3, r0
 8014186:	75fb      	strb	r3, [r7, #23]
      break;
 8014188:	e04a      	b.n	8014220 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801418a:	7afb      	ldrb	r3, [r7, #11]
 801418c:	687a      	ldr	r2, [r7, #4]
 801418e:	4619      	mov	r1, r3
 8014190:	68f8      	ldr	r0, [r7, #12]
 8014192:	f000 f923 	bl	80143dc <SCSI_ReadCapacity10>
 8014196:	4603      	mov	r3, r0
 8014198:	75fb      	strb	r3, [r7, #23]
      break;
 801419a:	e041      	b.n	8014220 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801419c:	7afb      	ldrb	r3, [r7, #11]
 801419e:	687a      	ldr	r2, [r7, #4]
 80141a0:	4619      	mov	r1, r3
 80141a2:	68f8      	ldr	r0, [r7, #12]
 80141a4:	f000 f998 	bl	80144d8 <SCSI_ReadCapacity16>
 80141a8:	4603      	mov	r3, r0
 80141aa:	75fb      	strb	r3, [r7, #23]
      break;
 80141ac:	e038      	b.n	8014220 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 80141ae:	7afb      	ldrb	r3, [r7, #11]
 80141b0:	687a      	ldr	r2, [r7, #4]
 80141b2:	4619      	mov	r1, r3
 80141b4:	68f8      	ldr	r0, [r7, #12]
 80141b6:	f000 fc6d 	bl	8014a94 <SCSI_Read10>
 80141ba:	4603      	mov	r3, r0
 80141bc:	75fb      	strb	r3, [r7, #23]
      break;
 80141be:	e02f      	b.n	8014220 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80141c0:	7afb      	ldrb	r3, [r7, #11]
 80141c2:	687a      	ldr	r2, [r7, #4]
 80141c4:	4619      	mov	r1, r3
 80141c6:	68f8      	ldr	r0, [r7, #12]
 80141c8:	f000 fd0e 	bl	8014be8 <SCSI_Read12>
 80141cc:	4603      	mov	r3, r0
 80141ce:	75fb      	strb	r3, [r7, #23]
      break;
 80141d0:	e026      	b.n	8014220 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80141d2:	7afb      	ldrb	r3, [r7, #11]
 80141d4:	687a      	ldr	r2, [r7, #4]
 80141d6:	4619      	mov	r1, r3
 80141d8:	68f8      	ldr	r0, [r7, #12]
 80141da:	f000 fdb9 	bl	8014d50 <SCSI_Write10>
 80141de:	4603      	mov	r3, r0
 80141e0:	75fb      	strb	r3, [r7, #23]
      break;
 80141e2:	e01d      	b.n	8014220 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80141e4:	7afb      	ldrb	r3, [r7, #11]
 80141e6:	687a      	ldr	r2, [r7, #4]
 80141e8:	4619      	mov	r1, r3
 80141ea:	68f8      	ldr	r0, [r7, #12]
 80141ec:	f000 fe86 	bl	8014efc <SCSI_Write12>
 80141f0:	4603      	mov	r3, r0
 80141f2:	75fb      	strb	r3, [r7, #23]
      break;
 80141f4:	e014      	b.n	8014220 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80141f6:	7afb      	ldrb	r3, [r7, #11]
 80141f8:	687a      	ldr	r2, [r7, #4]
 80141fa:	4619      	mov	r1, r3
 80141fc:	68f8      	ldr	r0, [r7, #12]
 80141fe:	f000 ff63 	bl	80150c8 <SCSI_Verify10>
 8014202:	4603      	mov	r3, r0
 8014204:	75fb      	strb	r3, [r7, #23]
      break;
 8014206:	e00b      	b.n	8014220 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8014208:	7af9      	ldrb	r1, [r7, #11]
 801420a:	2320      	movs	r3, #32
 801420c:	2205      	movs	r2, #5
 801420e:	68f8      	ldr	r0, [r7, #12]
 8014210:	f000 fb73 	bl	80148fa <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8014214:	693b      	ldr	r3, [r7, #16]
 8014216:	2202      	movs	r2, #2
 8014218:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801421a:	23ff      	movs	r3, #255	; 0xff
 801421c:	75fb      	strb	r3, [r7, #23]
      break;
 801421e:	bf00      	nop
  }

  return ret;
 8014220:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014224:	4618      	mov	r0, r3
 8014226:	3718      	adds	r7, #24
 8014228:	46bd      	mov	sp, r7
 801422a:	bd80      	pop	{r7, pc}

0801422c <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b086      	sub	sp, #24
 8014230:	af00      	add	r7, sp, #0
 8014232:	60f8      	str	r0, [r7, #12]
 8014234:	460b      	mov	r3, r1
 8014236:	607a      	str	r2, [r7, #4]
 8014238:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	32b0      	adds	r2, #176	; 0xb0
 8014244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014248:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801424a:	697b      	ldr	r3, [r7, #20]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d102      	bne.n	8014256 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8014250:	f04f 33ff 	mov.w	r3, #4294967295
 8014254:	e03f      	b.n	80142d6 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8014256:	697b      	ldr	r3, [r7, #20]
 8014258:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801425c:	2b00      	cmp	r3, #0
 801425e:	d00a      	beq.n	8014276 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014260:	697b      	ldr	r3, [r7, #20]
 8014262:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014266:	2320      	movs	r3, #32
 8014268:	2205      	movs	r2, #5
 801426a:	68f8      	ldr	r0, [r7, #12]
 801426c:	f000 fb45 	bl	80148fa <SCSI_SenseCode>

    return -1;
 8014270:	f04f 33ff 	mov.w	r3, #4294967295
 8014274:	e02f      	b.n	80142d6 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014276:	697b      	ldr	r3, [r7, #20]
 8014278:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801427c:	2b02      	cmp	r3, #2
 801427e:	d10b      	bne.n	8014298 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014280:	7af9      	ldrb	r1, [r7, #11]
 8014282:	233a      	movs	r3, #58	; 0x3a
 8014284:	2202      	movs	r2, #2
 8014286:	68f8      	ldr	r0, [r7, #12]
 8014288:	f000 fb37 	bl	80148fa <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801428c:	697b      	ldr	r3, [r7, #20]
 801428e:	2205      	movs	r2, #5
 8014290:	721a      	strb	r2, [r3, #8]
    return -1;
 8014292:	f04f 33ff 	mov.w	r3, #4294967295
 8014296:	e01e      	b.n	80142d6 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801429e:	68fa      	ldr	r2, [r7, #12]
 80142a0:	33b0      	adds	r3, #176	; 0xb0
 80142a2:	009b      	lsls	r3, r3, #2
 80142a4:	4413      	add	r3, r2
 80142a6:	685b      	ldr	r3, [r3, #4]
 80142a8:	689b      	ldr	r3, [r3, #8]
 80142aa:	7afa      	ldrb	r2, [r7, #11]
 80142ac:	4610      	mov	r0, r2
 80142ae:	4798      	blx	r3
 80142b0:	4603      	mov	r3, r0
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d00b      	beq.n	80142ce <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80142b6:	7af9      	ldrb	r1, [r7, #11]
 80142b8:	233a      	movs	r3, #58	; 0x3a
 80142ba:	2202      	movs	r2, #2
 80142bc:	68f8      	ldr	r0, [r7, #12]
 80142be:	f000 fb1c 	bl	80148fa <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80142c2:	697b      	ldr	r3, [r7, #20]
 80142c4:	2205      	movs	r2, #5
 80142c6:	721a      	strb	r2, [r3, #8]

    return -1;
 80142c8:	f04f 33ff 	mov.w	r3, #4294967295
 80142cc:	e003      	b.n	80142d6 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 80142ce:	697b      	ldr	r3, [r7, #20]
 80142d0:	2200      	movs	r2, #0
 80142d2:	60da      	str	r2, [r3, #12]

  return 0;
 80142d4:	2300      	movs	r3, #0
}
 80142d6:	4618      	mov	r0, r3
 80142d8:	3718      	adds	r7, #24
 80142da:	46bd      	mov	sp, r7
 80142dc:	bd80      	pop	{r7, pc}
	...

080142e0 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b088      	sub	sp, #32
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	60f8      	str	r0, [r7, #12]
 80142e8:	460b      	mov	r3, r1
 80142ea:	607a      	str	r2, [r7, #4]
 80142ec:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	32b0      	adds	r2, #176	; 0xb0
 80142f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142fc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80142fe:	69bb      	ldr	r3, [r7, #24]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d102      	bne.n	801430a <SCSI_Inquiry+0x2a>
  {
    return -1;
 8014304:	f04f 33ff 	mov.w	r3, #4294967295
 8014308:	e05f      	b.n	80143ca <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801430a:	69bb      	ldr	r3, [r7, #24]
 801430c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014310:	2b00      	cmp	r3, #0
 8014312:	d10a      	bne.n	801432a <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014314:	69bb      	ldr	r3, [r7, #24]
 8014316:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801431a:	2320      	movs	r3, #32
 801431c:	2205      	movs	r2, #5
 801431e:	68f8      	ldr	r0, [r7, #12]
 8014320:	f000 faeb 	bl	80148fa <SCSI_SenseCode>
    return -1;
 8014324:	f04f 33ff 	mov.w	r3, #4294967295
 8014328:	e04f      	b.n	80143ca <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	3301      	adds	r3, #1
 801432e:	781b      	ldrb	r3, [r3, #0]
 8014330:	f003 0301 	and.w	r3, r3, #1
 8014334:	2b00      	cmp	r3, #0
 8014336:	d020      	beq.n	801437a <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	3302      	adds	r3, #2
 801433c:	781b      	ldrb	r3, [r3, #0]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d105      	bne.n	801434e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8014342:	2206      	movs	r2, #6
 8014344:	4923      	ldr	r1, [pc, #140]	; (80143d4 <SCSI_Inquiry+0xf4>)
 8014346:	69b8      	ldr	r0, [r7, #24]
 8014348:	f001 f844 	bl	80153d4 <SCSI_UpdateBotData>
 801434c:	e03c      	b.n	80143c8 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	3302      	adds	r3, #2
 8014352:	781b      	ldrb	r3, [r3, #0]
 8014354:	2b80      	cmp	r3, #128	; 0x80
 8014356:	d105      	bne.n	8014364 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8014358:	2208      	movs	r2, #8
 801435a:	491f      	ldr	r1, [pc, #124]	; (80143d8 <SCSI_Inquiry+0xf8>)
 801435c:	69b8      	ldr	r0, [r7, #24]
 801435e:	f001 f839 	bl	80153d4 <SCSI_UpdateBotData>
 8014362:	e031      	b.n	80143c8 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8014364:	69bb      	ldr	r3, [r7, #24]
 8014366:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801436a:	2324      	movs	r3, #36	; 0x24
 801436c:	2205      	movs	r2, #5
 801436e:	68f8      	ldr	r0, [r7, #12]
 8014370:	f000 fac3 	bl	80148fa <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8014374:	f04f 33ff 	mov.w	r3, #4294967295
 8014378:	e027      	b.n	80143ca <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014380:	68fa      	ldr	r2, [r7, #12]
 8014382:	33b0      	adds	r3, #176	; 0xb0
 8014384:	009b      	lsls	r3, r3, #2
 8014386:	4413      	add	r3, r2
 8014388:	685b      	ldr	r3, [r3, #4]
 801438a:	69d9      	ldr	r1, [r3, #28]
 801438c:	7afa      	ldrb	r2, [r7, #11]
 801438e:	4613      	mov	r3, r2
 8014390:	00db      	lsls	r3, r3, #3
 8014392:	4413      	add	r3, r2
 8014394:	009b      	lsls	r3, r3, #2
 8014396:	440b      	add	r3, r1
 8014398:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801439a:	697b      	ldr	r3, [r7, #20]
 801439c:	3304      	adds	r3, #4
 801439e:	781b      	ldrb	r3, [r3, #0]
 80143a0:	b29b      	uxth	r3, r3
 80143a2:	3305      	adds	r3, #5
 80143a4:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	3304      	adds	r3, #4
 80143aa:	781b      	ldrb	r3, [r3, #0]
 80143ac:	b29b      	uxth	r3, r3
 80143ae:	8bfa      	ldrh	r2, [r7, #30]
 80143b0:	429a      	cmp	r2, r3
 80143b2:	d303      	bcc.n	80143bc <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	3304      	adds	r3, #4
 80143b8:	781b      	ldrb	r3, [r3, #0]
 80143ba:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80143bc:	8bfb      	ldrh	r3, [r7, #30]
 80143be:	461a      	mov	r2, r3
 80143c0:	6979      	ldr	r1, [r7, #20]
 80143c2:	69b8      	ldr	r0, [r7, #24]
 80143c4:	f001 f806 	bl	80153d4 <SCSI_UpdateBotData>
  }

  return 0;
 80143c8:	2300      	movs	r3, #0
}
 80143ca:	4618      	mov	r0, r3
 80143cc:	3720      	adds	r7, #32
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}
 80143d2:	bf00      	nop
 80143d4:	2000008c 	.word	0x2000008c
 80143d8:	20000094 	.word	0x20000094

080143dc <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	b086      	sub	sp, #24
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	60f8      	str	r0, [r7, #12]
 80143e4:	460b      	mov	r3, r1
 80143e6:	607a      	str	r2, [r7, #4]
 80143e8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	32b0      	adds	r2, #176	; 0xb0
 80143f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143f8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80143fa:	697b      	ldr	r3, [r7, #20]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d102      	bne.n	8014406 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8014400:	f04f 33ff 	mov.w	r3, #4294967295
 8014404:	e064      	b.n	80144d0 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801440c:	68fa      	ldr	r2, [r7, #12]
 801440e:	33b0      	adds	r3, #176	; 0xb0
 8014410:	009b      	lsls	r3, r3, #2
 8014412:	4413      	add	r3, r2
 8014414:	685b      	ldr	r3, [r3, #4]
 8014416:	685b      	ldr	r3, [r3, #4]
 8014418:	697a      	ldr	r2, [r7, #20]
 801441a:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801441e:	697a      	ldr	r2, [r7, #20]
 8014420:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8014424:	7af8      	ldrb	r0, [r7, #11]
 8014426:	4798      	blx	r3
 8014428:	4603      	mov	r3, r0
 801442a:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801442c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d104      	bne.n	801443e <SCSI_ReadCapacity10+0x62>
 8014434:	697b      	ldr	r3, [r7, #20]
 8014436:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801443a:	2b02      	cmp	r3, #2
 801443c:	d108      	bne.n	8014450 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801443e:	7af9      	ldrb	r1, [r7, #11]
 8014440:	233a      	movs	r3, #58	; 0x3a
 8014442:	2202      	movs	r2, #2
 8014444:	68f8      	ldr	r0, [r7, #12]
 8014446:	f000 fa58 	bl	80148fa <SCSI_SenseCode>
    return -1;
 801444a:	f04f 33ff 	mov.w	r3, #4294967295
 801444e:	e03f      	b.n	80144d0 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014450:	697b      	ldr	r3, [r7, #20]
 8014452:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8014456:	3b01      	subs	r3, #1
 8014458:	0e1b      	lsrs	r3, r3, #24
 801445a:	b2da      	uxtb	r2, r3
 801445c:	697b      	ldr	r3, [r7, #20]
 801445e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014460:	697b      	ldr	r3, [r7, #20]
 8014462:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8014466:	3b01      	subs	r3, #1
 8014468:	0c1b      	lsrs	r3, r3, #16
 801446a:	b2da      	uxtb	r2, r3
 801446c:	697b      	ldr	r3, [r7, #20]
 801446e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014470:	697b      	ldr	r3, [r7, #20]
 8014472:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8014476:	3b01      	subs	r3, #1
 8014478:	0a1b      	lsrs	r3, r3, #8
 801447a:	b2da      	uxtb	r2, r3
 801447c:	697b      	ldr	r3, [r7, #20]
 801447e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8014480:	697b      	ldr	r3, [r7, #20]
 8014482:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8014486:	b2db      	uxtb	r3, r3
 8014488:	3b01      	subs	r3, #1
 801448a:	b2da      	uxtb	r2, r3
 801448c:	697b      	ldr	r3, [r7, #20]
 801448e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8014490:	697b      	ldr	r3, [r7, #20]
 8014492:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8014496:	161b      	asrs	r3, r3, #24
 8014498:	b2da      	uxtb	r2, r3
 801449a:	697b      	ldr	r3, [r7, #20]
 801449c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801449e:	697b      	ldr	r3, [r7, #20]
 80144a0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80144a4:	141b      	asrs	r3, r3, #16
 80144a6:	b2da      	uxtb	r2, r3
 80144a8:	697b      	ldr	r3, [r7, #20]
 80144aa:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80144ac:	697b      	ldr	r3, [r7, #20]
 80144ae:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80144b2:	0a1b      	lsrs	r3, r3, #8
 80144b4:	b29b      	uxth	r3, r3
 80144b6:	b2da      	uxtb	r2, r3
 80144b8:	697b      	ldr	r3, [r7, #20]
 80144ba:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80144bc:	697b      	ldr	r3, [r7, #20]
 80144be:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80144c2:	b2da      	uxtb	r2, r3
 80144c4:	697b      	ldr	r3, [r7, #20]
 80144c6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80144c8:	697b      	ldr	r3, [r7, #20]
 80144ca:	2208      	movs	r2, #8
 80144cc:	60da      	str	r2, [r3, #12]

  return 0;
 80144ce:	2300      	movs	r3, #0

}
 80144d0:	4618      	mov	r0, r3
 80144d2:	3718      	adds	r7, #24
 80144d4:	46bd      	mov	sp, r7
 80144d6:	bd80      	pop	{r7, pc}

080144d8 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b088      	sub	sp, #32
 80144dc:	af00      	add	r7, sp, #0
 80144de:	60f8      	str	r0, [r7, #12]
 80144e0:	460b      	mov	r3, r1
 80144e2:	607a      	str	r2, [r7, #4]
 80144e4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	32b0      	adds	r2, #176	; 0xb0
 80144f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144f4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80144f6:	69bb      	ldr	r3, [r7, #24]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d102      	bne.n	8014502 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 80144fc:	f04f 33ff 	mov.w	r3, #4294967295
 8014500:	e099      	b.n	8014636 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014508:	68fa      	ldr	r2, [r7, #12]
 801450a:	33b0      	adds	r3, #176	; 0xb0
 801450c:	009b      	lsls	r3, r3, #2
 801450e:	4413      	add	r3, r2
 8014510:	685b      	ldr	r3, [r3, #4]
 8014512:	685b      	ldr	r3, [r3, #4]
 8014514:	69ba      	ldr	r2, [r7, #24]
 8014516:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801451a:	69ba      	ldr	r2, [r7, #24]
 801451c:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8014520:	7af8      	ldrb	r0, [r7, #11]
 8014522:	4798      	blx	r3
 8014524:	4603      	mov	r3, r0
 8014526:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014528:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d104      	bne.n	801453a <SCSI_ReadCapacity16+0x62>
 8014530:	69bb      	ldr	r3, [r7, #24]
 8014532:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8014536:	2b02      	cmp	r3, #2
 8014538:	d108      	bne.n	801454c <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801453a:	7af9      	ldrb	r1, [r7, #11]
 801453c:	233a      	movs	r3, #58	; 0x3a
 801453e:	2202      	movs	r2, #2
 8014540:	68f8      	ldr	r0, [r7, #12]
 8014542:	f000 f9da 	bl	80148fa <SCSI_SenseCode>
    return -1;
 8014546:	f04f 33ff 	mov.w	r3, #4294967295
 801454a:	e074      	b.n	8014636 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	330a      	adds	r3, #10
 8014550:	781b      	ldrb	r3, [r3, #0]
 8014552:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	330b      	adds	r3, #11
 8014558:	781b      	ldrb	r3, [r3, #0]
 801455a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801455c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	330c      	adds	r3, #12
 8014562:	781b      	ldrb	r3, [r3, #0]
 8014564:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014566:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8014568:	687a      	ldr	r2, [r7, #4]
 801456a:	320d      	adds	r2, #13
 801456c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801456e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014570:	69bb      	ldr	r3, [r7, #24]
 8014572:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014574:	2300      	movs	r3, #0
 8014576:	77fb      	strb	r3, [r7, #31]
 8014578:	e007      	b.n	801458a <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 801457a:	7ffb      	ldrb	r3, [r7, #31]
 801457c:	69ba      	ldr	r2, [r7, #24]
 801457e:	4413      	add	r3, r2
 8014580:	2200      	movs	r2, #0
 8014582:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014584:	7ffb      	ldrb	r3, [r7, #31]
 8014586:	3301      	adds	r3, #1
 8014588:	77fb      	strb	r3, [r7, #31]
 801458a:	7ffa      	ldrb	r2, [r7, #31]
 801458c:	69bb      	ldr	r3, [r7, #24]
 801458e:	68db      	ldr	r3, [r3, #12]
 8014590:	429a      	cmp	r2, r3
 8014592:	d3f2      	bcc.n	801457a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014594:	69bb      	ldr	r3, [r7, #24]
 8014596:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801459a:	3b01      	subs	r3, #1
 801459c:	0e1b      	lsrs	r3, r3, #24
 801459e:	b2da      	uxtb	r2, r3
 80145a0:	69bb      	ldr	r3, [r7, #24]
 80145a2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80145a4:	69bb      	ldr	r3, [r7, #24]
 80145a6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80145aa:	3b01      	subs	r3, #1
 80145ac:	0c1b      	lsrs	r3, r3, #16
 80145ae:	b2da      	uxtb	r2, r3
 80145b0:	69bb      	ldr	r3, [r7, #24]
 80145b2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80145b4:	69bb      	ldr	r3, [r7, #24]
 80145b6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80145ba:	3b01      	subs	r3, #1
 80145bc:	0a1b      	lsrs	r3, r3, #8
 80145be:	b2da      	uxtb	r2, r3
 80145c0:	69bb      	ldr	r3, [r7, #24]
 80145c2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80145c4:	69bb      	ldr	r3, [r7, #24]
 80145c6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80145ca:	b2db      	uxtb	r3, r3
 80145cc:	3b01      	subs	r3, #1
 80145ce:	b2da      	uxtb	r2, r3
 80145d0:	69bb      	ldr	r3, [r7, #24]
 80145d2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80145d4:	69bb      	ldr	r3, [r7, #24]
 80145d6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80145da:	161b      	asrs	r3, r3, #24
 80145dc:	b2da      	uxtb	r2, r3
 80145de:	69bb      	ldr	r3, [r7, #24]
 80145e0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80145e2:	69bb      	ldr	r3, [r7, #24]
 80145e4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80145e8:	141b      	asrs	r3, r3, #16
 80145ea:	b2da      	uxtb	r2, r3
 80145ec:	69bb      	ldr	r3, [r7, #24]
 80145ee:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80145f0:	69bb      	ldr	r3, [r7, #24]
 80145f2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80145f6:	0a1b      	lsrs	r3, r3, #8
 80145f8:	b29b      	uxth	r3, r3
 80145fa:	b2da      	uxtb	r2, r3
 80145fc:	69bb      	ldr	r3, [r7, #24]
 80145fe:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8014600:	69bb      	ldr	r3, [r7, #24]
 8014602:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8014606:	b2da      	uxtb	r2, r3
 8014608:	69bb      	ldr	r3, [r7, #24]
 801460a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	330a      	adds	r3, #10
 8014610:	781b      	ldrb	r3, [r3, #0]
 8014612:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	330b      	adds	r3, #11
 8014618:	781b      	ldrb	r3, [r3, #0]
 801461a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801461c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	330c      	adds	r3, #12
 8014622:	781b      	ldrb	r3, [r3, #0]
 8014624:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014626:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8014628:	687a      	ldr	r2, [r7, #4]
 801462a:	320d      	adds	r2, #13
 801462c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801462e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014630:	69bb      	ldr	r3, [r7, #24]
 8014632:	60da      	str	r2, [r3, #12]

  return 0;
 8014634:	2300      	movs	r3, #0
}
 8014636:	4618      	mov	r0, r3
 8014638:	3720      	adds	r7, #32
 801463a:	46bd      	mov	sp, r7
 801463c:	bd80      	pop	{r7, pc}

0801463e <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801463e:	b580      	push	{r7, lr}
 8014640:	b088      	sub	sp, #32
 8014642:	af00      	add	r7, sp, #0
 8014644:	60f8      	str	r0, [r7, #12]
 8014646:	460b      	mov	r3, r1
 8014648:	607a      	str	r2, [r7, #4]
 801464a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	32b0      	adds	r2, #176	; 0xb0
 8014656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801465a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801465c:	69bb      	ldr	r3, [r7, #24]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d102      	bne.n	8014668 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8014662:	f04f 33ff 	mov.w	r3, #4294967295
 8014666:	e061      	b.n	801472c <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801466e:	68fa      	ldr	r2, [r7, #12]
 8014670:	33b0      	adds	r3, #176	; 0xb0
 8014672:	009b      	lsls	r3, r3, #2
 8014674:	4413      	add	r3, r2
 8014676:	685b      	ldr	r3, [r3, #4]
 8014678:	685b      	ldr	r3, [r3, #4]
 801467a:	f107 0214 	add.w	r2, r7, #20
 801467e:	f107 0110 	add.w	r1, r7, #16
 8014682:	7af8      	ldrb	r0, [r7, #11]
 8014684:	4798      	blx	r3
 8014686:	4603      	mov	r3, r0
 8014688:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801468a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d104      	bne.n	801469c <SCSI_ReadFormatCapacity+0x5e>
 8014692:	69bb      	ldr	r3, [r7, #24]
 8014694:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8014698:	2b02      	cmp	r3, #2
 801469a:	d108      	bne.n	80146ae <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801469c:	7af9      	ldrb	r1, [r7, #11]
 801469e:	233a      	movs	r3, #58	; 0x3a
 80146a0:	2202      	movs	r2, #2
 80146a2:	68f8      	ldr	r0, [r7, #12]
 80146a4:	f000 f929 	bl	80148fa <SCSI_SenseCode>
    return -1;
 80146a8:	f04f 33ff 	mov.w	r3, #4294967295
 80146ac:	e03e      	b.n	801472c <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 80146ae:	2300      	movs	r3, #0
 80146b0:	83fb      	strh	r3, [r7, #30]
 80146b2:	e007      	b.n	80146c4 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 80146b4:	8bfb      	ldrh	r3, [r7, #30]
 80146b6:	69ba      	ldr	r2, [r7, #24]
 80146b8:	4413      	add	r3, r2
 80146ba:	2200      	movs	r2, #0
 80146bc:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80146be:	8bfb      	ldrh	r3, [r7, #30]
 80146c0:	3301      	adds	r3, #1
 80146c2:	83fb      	strh	r3, [r7, #30]
 80146c4:	8bfb      	ldrh	r3, [r7, #30]
 80146c6:	2b0b      	cmp	r3, #11
 80146c8:	d9f4      	bls.n	80146b4 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 80146ca:	69bb      	ldr	r3, [r7, #24]
 80146cc:	2208      	movs	r2, #8
 80146ce:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80146d0:	693b      	ldr	r3, [r7, #16]
 80146d2:	3b01      	subs	r3, #1
 80146d4:	0e1b      	lsrs	r3, r3, #24
 80146d6:	b2da      	uxtb	r2, r3
 80146d8:	69bb      	ldr	r3, [r7, #24]
 80146da:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80146dc:	693b      	ldr	r3, [r7, #16]
 80146de:	3b01      	subs	r3, #1
 80146e0:	0c1b      	lsrs	r3, r3, #16
 80146e2:	b2da      	uxtb	r2, r3
 80146e4:	69bb      	ldr	r3, [r7, #24]
 80146e6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80146e8:	693b      	ldr	r3, [r7, #16]
 80146ea:	3b01      	subs	r3, #1
 80146ec:	0a1b      	lsrs	r3, r3, #8
 80146ee:	b2da      	uxtb	r2, r3
 80146f0:	69bb      	ldr	r3, [r7, #24]
 80146f2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80146f4:	693b      	ldr	r3, [r7, #16]
 80146f6:	b2db      	uxtb	r3, r3
 80146f8:	3b01      	subs	r3, #1
 80146fa:	b2da      	uxtb	r2, r3
 80146fc:	69bb      	ldr	r3, [r7, #24]
 80146fe:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8014700:	69bb      	ldr	r3, [r7, #24]
 8014702:	2202      	movs	r2, #2
 8014704:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8014706:	8abb      	ldrh	r3, [r7, #20]
 8014708:	141b      	asrs	r3, r3, #16
 801470a:	b2da      	uxtb	r2, r3
 801470c:	69bb      	ldr	r3, [r7, #24]
 801470e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8014710:	8abb      	ldrh	r3, [r7, #20]
 8014712:	0a1b      	lsrs	r3, r3, #8
 8014714:	b29b      	uxth	r3, r3
 8014716:	b2da      	uxtb	r2, r3
 8014718:	69bb      	ldr	r3, [r7, #24]
 801471a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 801471c:	8abb      	ldrh	r3, [r7, #20]
 801471e:	b2da      	uxtb	r2, r3
 8014720:	69bb      	ldr	r3, [r7, #24]
 8014722:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8014724:	69bb      	ldr	r3, [r7, #24]
 8014726:	220c      	movs	r2, #12
 8014728:	60da      	str	r2, [r3, #12]

  return 0;
 801472a:	2300      	movs	r3, #0
}
 801472c:	4618      	mov	r0, r3
 801472e:	3720      	adds	r7, #32
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}

08014734 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b086      	sub	sp, #24
 8014738:	af00      	add	r7, sp, #0
 801473a:	60f8      	str	r0, [r7, #12]
 801473c:	460b      	mov	r3, r1
 801473e:	607a      	str	r2, [r7, #4]
 8014740:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	32b0      	adds	r2, #176	; 0xb0
 801474c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014750:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8014752:	2317      	movs	r3, #23
 8014754:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8014756:	693b      	ldr	r3, [r7, #16]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d102      	bne.n	8014762 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 801475c:	f04f 33ff 	mov.w	r3, #4294967295
 8014760:	e011      	b.n	8014786 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	3304      	adds	r3, #4
 8014766:	781b      	ldrb	r3, [r3, #0]
 8014768:	b29b      	uxth	r3, r3
 801476a:	8afa      	ldrh	r2, [r7, #22]
 801476c:	429a      	cmp	r2, r3
 801476e:	d303      	bcc.n	8014778 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	3304      	adds	r3, #4
 8014774:	781b      	ldrb	r3, [r3, #0]
 8014776:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8014778:	8afb      	ldrh	r3, [r7, #22]
 801477a:	461a      	mov	r2, r3
 801477c:	4904      	ldr	r1, [pc, #16]	; (8014790 <SCSI_ModeSense6+0x5c>)
 801477e:	6938      	ldr	r0, [r7, #16]
 8014780:	f000 fe28 	bl	80153d4 <SCSI_UpdateBotData>

  return 0;
 8014784:	2300      	movs	r3, #0
}
 8014786:	4618      	mov	r0, r3
 8014788:	3718      	adds	r7, #24
 801478a:	46bd      	mov	sp, r7
 801478c:	bd80      	pop	{r7, pc}
 801478e:	bf00      	nop
 8014790:	2000009c 	.word	0x2000009c

08014794 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b086      	sub	sp, #24
 8014798:	af00      	add	r7, sp, #0
 801479a:	60f8      	str	r0, [r7, #12]
 801479c:	460b      	mov	r3, r1
 801479e:	607a      	str	r2, [r7, #4]
 80147a0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	32b0      	adds	r2, #176	; 0xb0
 80147ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147b0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80147b2:	231b      	movs	r3, #27
 80147b4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80147b6:	693b      	ldr	r3, [r7, #16]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d102      	bne.n	80147c2 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 80147bc:	f04f 33ff 	mov.w	r3, #4294967295
 80147c0:	e011      	b.n	80147e6 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	3308      	adds	r3, #8
 80147c6:	781b      	ldrb	r3, [r3, #0]
 80147c8:	b29b      	uxth	r3, r3
 80147ca:	8afa      	ldrh	r2, [r7, #22]
 80147cc:	429a      	cmp	r2, r3
 80147ce:	d303      	bcc.n	80147d8 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	3308      	adds	r3, #8
 80147d4:	781b      	ldrb	r3, [r3, #0]
 80147d6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80147d8:	8afb      	ldrh	r3, [r7, #22]
 80147da:	461a      	mov	r2, r3
 80147dc:	4904      	ldr	r1, [pc, #16]	; (80147f0 <SCSI_ModeSense10+0x5c>)
 80147de:	6938      	ldr	r0, [r7, #16]
 80147e0:	f000 fdf8 	bl	80153d4 <SCSI_UpdateBotData>

  return 0;
 80147e4:	2300      	movs	r3, #0
}
 80147e6:	4618      	mov	r0, r3
 80147e8:	3718      	adds	r7, #24
 80147ea:	46bd      	mov	sp, r7
 80147ec:	bd80      	pop	{r7, pc}
 80147ee:	bf00      	nop
 80147f0:	200000b4 	.word	0x200000b4

080147f4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b086      	sub	sp, #24
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	60f8      	str	r0, [r7, #12]
 80147fc:	460b      	mov	r3, r1
 80147fe:	607a      	str	r2, [r7, #4]
 8014800:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	32b0      	adds	r2, #176	; 0xb0
 801480c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014810:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8014812:	693b      	ldr	r3, [r7, #16]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d102      	bne.n	801481e <SCSI_RequestSense+0x2a>
  {
    return -1;
 8014818:	f04f 33ff 	mov.w	r3, #4294967295
 801481c:	e069      	b.n	80148f2 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801481e:	693b      	ldr	r3, [r7, #16]
 8014820:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014824:	2b00      	cmp	r3, #0
 8014826:	d10a      	bne.n	801483e <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014828:	693b      	ldr	r3, [r7, #16]
 801482a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801482e:	2320      	movs	r3, #32
 8014830:	2205      	movs	r2, #5
 8014832:	68f8      	ldr	r0, [r7, #12]
 8014834:	f000 f861 	bl	80148fa <SCSI_SenseCode>
    return -1;
 8014838:	f04f 33ff 	mov.w	r3, #4294967295
 801483c:	e059      	b.n	80148f2 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801483e:	2300      	movs	r3, #0
 8014840:	75fb      	strb	r3, [r7, #23]
 8014842:	e007      	b.n	8014854 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8014844:	7dfb      	ldrb	r3, [r7, #23]
 8014846:	693a      	ldr	r2, [r7, #16]
 8014848:	4413      	add	r3, r2
 801484a:	2200      	movs	r2, #0
 801484c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801484e:	7dfb      	ldrb	r3, [r7, #23]
 8014850:	3301      	adds	r3, #1
 8014852:	75fb      	strb	r3, [r7, #23]
 8014854:	7dfb      	ldrb	r3, [r7, #23]
 8014856:	2b11      	cmp	r3, #17
 8014858:	d9f4      	bls.n	8014844 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 801485a:	693b      	ldr	r3, [r7, #16]
 801485c:	2270      	movs	r2, #112	; 0x70
 801485e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8014860:	693b      	ldr	r3, [r7, #16]
 8014862:	220c      	movs	r2, #12
 8014864:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8014866:	693b      	ldr	r3, [r7, #16]
 8014868:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 801486c:	693b      	ldr	r3, [r7, #16]
 801486e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8014872:	429a      	cmp	r2, r3
 8014874:	d02e      	beq.n	80148d4 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8014876:	693b      	ldr	r3, [r7, #16]
 8014878:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801487c:	461a      	mov	r2, r3
 801487e:	693b      	ldr	r3, [r7, #16]
 8014880:	3248      	adds	r2, #72	; 0x48
 8014882:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8014886:	693b      	ldr	r3, [r7, #16]
 8014888:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801488a:	693b      	ldr	r3, [r7, #16]
 801488c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8014890:	693a      	ldr	r2, [r7, #16]
 8014892:	3348      	adds	r3, #72	; 0x48
 8014894:	00db      	lsls	r3, r3, #3
 8014896:	4413      	add	r3, r2
 8014898:	791a      	ldrb	r2, [r3, #4]
 801489a:	693b      	ldr	r3, [r7, #16]
 801489c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801489e:	693b      	ldr	r3, [r7, #16]
 80148a0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80148a4:	693a      	ldr	r2, [r7, #16]
 80148a6:	3348      	adds	r3, #72	; 0x48
 80148a8:	00db      	lsls	r3, r3, #3
 80148aa:	4413      	add	r3, r2
 80148ac:	795a      	ldrb	r2, [r3, #5]
 80148ae:	693b      	ldr	r3, [r7, #16]
 80148b0:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80148b2:	693b      	ldr	r3, [r7, #16]
 80148b4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80148b8:	3301      	adds	r3, #1
 80148ba:	b2da      	uxtb	r2, r3
 80148bc:	693b      	ldr	r3, [r7, #16]
 80148be:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80148c2:	693b      	ldr	r3, [r7, #16]
 80148c4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80148c8:	2b04      	cmp	r3, #4
 80148ca:	d103      	bne.n	80148d4 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 80148cc:	693b      	ldr	r3, [r7, #16]
 80148ce:	2200      	movs	r2, #0
 80148d0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80148d4:	693b      	ldr	r3, [r7, #16]
 80148d6:	2212      	movs	r2, #18
 80148d8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	3304      	adds	r3, #4
 80148de:	781b      	ldrb	r3, [r3, #0]
 80148e0:	2b12      	cmp	r3, #18
 80148e2:	d805      	bhi.n	80148f0 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	3304      	adds	r3, #4
 80148e8:	781b      	ldrb	r3, [r3, #0]
 80148ea:	461a      	mov	r2, r3
 80148ec:	693b      	ldr	r3, [r7, #16]
 80148ee:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80148f0:	2300      	movs	r3, #0
}
 80148f2:	4618      	mov	r0, r3
 80148f4:	3718      	adds	r7, #24
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd80      	pop	{r7, pc}

080148fa <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80148fa:	b480      	push	{r7}
 80148fc:	b085      	sub	sp, #20
 80148fe:	af00      	add	r7, sp, #0
 8014900:	6078      	str	r0, [r7, #4]
 8014902:	4608      	mov	r0, r1
 8014904:	4611      	mov	r1, r2
 8014906:	461a      	mov	r2, r3
 8014908:	4603      	mov	r3, r0
 801490a:	70fb      	strb	r3, [r7, #3]
 801490c:	460b      	mov	r3, r1
 801490e:	70bb      	strb	r3, [r7, #2]
 8014910:	4613      	mov	r3, r2
 8014912:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	32b0      	adds	r2, #176	; 0xb0
 801491e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014922:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d02c      	beq.n	8014984 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8014930:	461a      	mov	r2, r3
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	3248      	adds	r2, #72	; 0x48
 8014936:	78b9      	ldrb	r1, [r7, #2]
 8014938:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8014942:	68fa      	ldr	r2, [r7, #12]
 8014944:	3348      	adds	r3, #72	; 0x48
 8014946:	00db      	lsls	r3, r3, #3
 8014948:	4413      	add	r3, r2
 801494a:	787a      	ldrb	r2, [r7, #1]
 801494c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8014954:	68fa      	ldr	r2, [r7, #12]
 8014956:	3348      	adds	r3, #72	; 0x48
 8014958:	00db      	lsls	r3, r3, #3
 801495a:	4413      	add	r3, r2
 801495c:	2200      	movs	r2, #0
 801495e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8014966:	3301      	adds	r3, #1
 8014968:	b2da      	uxtb	r2, r3
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8014976:	2b04      	cmp	r3, #4
 8014978:	d105      	bne.n	8014986 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	2200      	movs	r2, #0
 801497e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8014982:	e000      	b.n	8014986 <SCSI_SenseCode+0x8c>
    return;
 8014984:	bf00      	nop
  }
}
 8014986:	3714      	adds	r7, #20
 8014988:	46bd      	mov	sp, r7
 801498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498e:	4770      	bx	lr

08014990 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b086      	sub	sp, #24
 8014994:	af00      	add	r7, sp, #0
 8014996:	60f8      	str	r0, [r7, #12]
 8014998:	460b      	mov	r3, r1
 801499a:	607a      	str	r2, [r7, #4]
 801499c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	32b0      	adds	r2, #176	; 0xb0
 80149a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149ac:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80149ae:	697b      	ldr	r3, [r7, #20]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d102      	bne.n	80149ba <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 80149b4:	f04f 33ff 	mov.w	r3, #4294967295
 80149b8:	e03b      	b.n	8014a32 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80149ba:	697b      	ldr	r3, [r7, #20]
 80149bc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80149c0:	2b01      	cmp	r3, #1
 80149c2:	d10f      	bne.n	80149e4 <SCSI_StartStopUnit+0x54>
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	3304      	adds	r3, #4
 80149c8:	781b      	ldrb	r3, [r3, #0]
 80149ca:	f003 0303 	and.w	r3, r3, #3
 80149ce:	2b02      	cmp	r3, #2
 80149d0:	d108      	bne.n	80149e4 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80149d2:	7af9      	ldrb	r1, [r7, #11]
 80149d4:	2324      	movs	r3, #36	; 0x24
 80149d6:	2205      	movs	r2, #5
 80149d8:	68f8      	ldr	r0, [r7, #12]
 80149da:	f7ff ff8e 	bl	80148fa <SCSI_SenseCode>

    return -1;
 80149de:	f04f 33ff 	mov.w	r3, #4294967295
 80149e2:	e026      	b.n	8014a32 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	3304      	adds	r3, #4
 80149e8:	781b      	ldrb	r3, [r3, #0]
 80149ea:	f003 0303 	and.w	r3, r3, #3
 80149ee:	2b01      	cmp	r3, #1
 80149f0:	d104      	bne.n	80149fc <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80149f2:	697b      	ldr	r3, [r7, #20]
 80149f4:	2200      	movs	r2, #0
 80149f6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80149fa:	e016      	b.n	8014a2a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	3304      	adds	r3, #4
 8014a00:	781b      	ldrb	r3, [r3, #0]
 8014a02:	f003 0303 	and.w	r3, r3, #3
 8014a06:	2b02      	cmp	r3, #2
 8014a08:	d104      	bne.n	8014a14 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8014a0a:	697b      	ldr	r3, [r7, #20]
 8014a0c:	2202      	movs	r2, #2
 8014a0e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8014a12:	e00a      	b.n	8014a2a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	3304      	adds	r3, #4
 8014a18:	781b      	ldrb	r3, [r3, #0]
 8014a1a:	f003 0303 	and.w	r3, r3, #3
 8014a1e:	2b03      	cmp	r3, #3
 8014a20:	d103      	bne.n	8014a2a <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014a22:	697b      	ldr	r3, [r7, #20]
 8014a24:	2200      	movs	r2, #0
 8014a26:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8014a2a:	697b      	ldr	r3, [r7, #20]
 8014a2c:	2200      	movs	r2, #0
 8014a2e:	60da      	str	r2, [r3, #12]

  return 0;
 8014a30:	2300      	movs	r3, #0
}
 8014a32:	4618      	mov	r0, r3
 8014a34:	3718      	adds	r7, #24
 8014a36:	46bd      	mov	sp, r7
 8014a38:	bd80      	pop	{r7, pc}

08014a3a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014a3a:	b480      	push	{r7}
 8014a3c:	b087      	sub	sp, #28
 8014a3e:	af00      	add	r7, sp, #0
 8014a40:	60f8      	str	r0, [r7, #12]
 8014a42:	460b      	mov	r3, r1
 8014a44:	607a      	str	r2, [r7, #4]
 8014a46:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	32b0      	adds	r2, #176	; 0xb0
 8014a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a56:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014a58:	697b      	ldr	r3, [r7, #20]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d102      	bne.n	8014a64 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8014a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8014a62:	e011      	b.n	8014a88 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	3304      	adds	r3, #4
 8014a68:	781b      	ldrb	r3, [r3, #0]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d104      	bne.n	8014a78 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014a6e:	697b      	ldr	r3, [r7, #20]
 8014a70:	2200      	movs	r2, #0
 8014a72:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8014a76:	e003      	b.n	8014a80 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8014a78:	697b      	ldr	r3, [r7, #20]
 8014a7a:	2201      	movs	r2, #1
 8014a7c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8014a80:	697b      	ldr	r3, [r7, #20]
 8014a82:	2200      	movs	r2, #0
 8014a84:	60da      	str	r2, [r3, #12]

  return 0;
 8014a86:	2300      	movs	r3, #0
}
 8014a88:	4618      	mov	r0, r3
 8014a8a:	371c      	adds	r7, #28
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a92:	4770      	bx	lr

08014a94 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b086      	sub	sp, #24
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	60f8      	str	r0, [r7, #12]
 8014a9c:	460b      	mov	r3, r1
 8014a9e:	607a      	str	r2, [r7, #4]
 8014aa0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	32b0      	adds	r2, #176	; 0xb0
 8014aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ab0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014ab2:	697b      	ldr	r3, [r7, #20]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d102      	bne.n	8014abe <SCSI_Read10+0x2a>
  {
    return -1;
 8014ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8014abc:	e090      	b.n	8014be0 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014abe:	697b      	ldr	r3, [r7, #20]
 8014ac0:	7a1b      	ldrb	r3, [r3, #8]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	f040 8082 	bne.w	8014bcc <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8014ac8:	697b      	ldr	r3, [r7, #20]
 8014aca:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8014ace:	b25b      	sxtb	r3, r3
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	db0a      	blt.n	8014aea <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014ad4:	697b      	ldr	r3, [r7, #20]
 8014ad6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014ada:	2320      	movs	r3, #32
 8014adc:	2205      	movs	r2, #5
 8014ade:	68f8      	ldr	r0, [r7, #12]
 8014ae0:	f7ff ff0b 	bl	80148fa <SCSI_SenseCode>
      return -1;
 8014ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ae8:	e07a      	b.n	8014be0 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014aea:	697b      	ldr	r3, [r7, #20]
 8014aec:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8014af0:	2b02      	cmp	r3, #2
 8014af2:	d108      	bne.n	8014b06 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014af4:	7af9      	ldrb	r1, [r7, #11]
 8014af6:	233a      	movs	r3, #58	; 0x3a
 8014af8:	2202      	movs	r2, #2
 8014afa:	68f8      	ldr	r0, [r7, #12]
 8014afc:	f7ff fefd 	bl	80148fa <SCSI_SenseCode>

      return -1;
 8014b00:	f04f 33ff 	mov.w	r3, #4294967295
 8014b04:	e06c      	b.n	8014be0 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b0c:	68fa      	ldr	r2, [r7, #12]
 8014b0e:	33b0      	adds	r3, #176	; 0xb0
 8014b10:	009b      	lsls	r3, r3, #2
 8014b12:	4413      	add	r3, r2
 8014b14:	685b      	ldr	r3, [r3, #4]
 8014b16:	689b      	ldr	r3, [r3, #8]
 8014b18:	7afa      	ldrb	r2, [r7, #11]
 8014b1a:	4610      	mov	r0, r2
 8014b1c:	4798      	blx	r3
 8014b1e:	4603      	mov	r3, r0
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d008      	beq.n	8014b36 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014b24:	7af9      	ldrb	r1, [r7, #11]
 8014b26:	233a      	movs	r3, #58	; 0x3a
 8014b28:	2202      	movs	r2, #2
 8014b2a:	68f8      	ldr	r0, [r7, #12]
 8014b2c:	f7ff fee5 	bl	80148fa <SCSI_SenseCode>
      return -1;
 8014b30:	f04f 33ff 	mov.w	r3, #4294967295
 8014b34:	e054      	b.n	8014be0 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	3302      	adds	r3, #2
 8014b3a:	781b      	ldrb	r3, [r3, #0]
 8014b3c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	3303      	adds	r3, #3
 8014b42:	781b      	ldrb	r3, [r3, #0]
 8014b44:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014b46:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	3304      	adds	r3, #4
 8014b4c:	781b      	ldrb	r3, [r3, #0]
 8014b4e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014b50:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014b52:	687a      	ldr	r2, [r7, #4]
 8014b54:	3205      	adds	r2, #5
 8014b56:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8014b58:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014b5a:	697b      	ldr	r3, [r7, #20]
 8014b5c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	3307      	adds	r3, #7
 8014b64:	781b      	ldrb	r3, [r3, #0]
 8014b66:	021b      	lsls	r3, r3, #8
 8014b68:	687a      	ldr	r2, [r7, #4]
 8014b6a:	3208      	adds	r2, #8
 8014b6c:	7812      	ldrb	r2, [r2, #0]
 8014b6e:	431a      	orrs	r2, r3
 8014b70:	697b      	ldr	r3, [r7, #20]
 8014b72:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014b76:	697b      	ldr	r3, [r7, #20]
 8014b78:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8014b7c:	697b      	ldr	r3, [r7, #20]
 8014b7e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8014b82:	7af9      	ldrb	r1, [r7, #11]
 8014b84:	68f8      	ldr	r0, [r7, #12]
 8014b86:	f000 fadc 	bl	8015142 <SCSI_CheckAddressRange>
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	da02      	bge.n	8014b96 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014b90:	f04f 33ff 	mov.w	r3, #4294967295
 8014b94:	e024      	b.n	8014be0 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8014b96:	697b      	ldr	r3, [r7, #20]
 8014b98:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8014b9c:	697b      	ldr	r3, [r7, #20]
 8014b9e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8014ba2:	6979      	ldr	r1, [r7, #20]
 8014ba4:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8014ba8:	fb01 f303 	mul.w	r3, r1, r3
 8014bac:	429a      	cmp	r2, r3
 8014bae:	d00a      	beq.n	8014bc6 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014bb0:	697b      	ldr	r3, [r7, #20]
 8014bb2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014bb6:	2320      	movs	r3, #32
 8014bb8:	2205      	movs	r2, #5
 8014bba:	68f8      	ldr	r0, [r7, #12]
 8014bbc:	f7ff fe9d 	bl	80148fa <SCSI_SenseCode>
      return -1;
 8014bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8014bc4:	e00c      	b.n	8014be0 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014bc6:	697b      	ldr	r3, [r7, #20]
 8014bc8:	2202      	movs	r2, #2
 8014bca:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8014bcc:	697b      	ldr	r3, [r7, #20]
 8014bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014bd2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014bd4:	7afb      	ldrb	r3, [r7, #11]
 8014bd6:	4619      	mov	r1, r3
 8014bd8:	68f8      	ldr	r0, [r7, #12]
 8014bda:	f000 fadf 	bl	801519c <SCSI_ProcessRead>
 8014bde:	4603      	mov	r3, r0
}
 8014be0:	4618      	mov	r0, r3
 8014be2:	3718      	adds	r7, #24
 8014be4:	46bd      	mov	sp, r7
 8014be6:	bd80      	pop	{r7, pc}

08014be8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b086      	sub	sp, #24
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	60f8      	str	r0, [r7, #12]
 8014bf0:	460b      	mov	r3, r1
 8014bf2:	607a      	str	r2, [r7, #4]
 8014bf4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	32b0      	adds	r2, #176	; 0xb0
 8014c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c04:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014c06:	697b      	ldr	r3, [r7, #20]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d102      	bne.n	8014c12 <SCSI_Read12+0x2a>
  {
    return -1;
 8014c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c10:	e09a      	b.n	8014d48 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014c12:	697b      	ldr	r3, [r7, #20]
 8014c14:	7a1b      	ldrb	r3, [r3, #8]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	f040 808c 	bne.w	8014d34 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8014c1c:	697b      	ldr	r3, [r7, #20]
 8014c1e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8014c22:	b25b      	sxtb	r3, r3
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	db0a      	blt.n	8014c3e <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014c28:	697b      	ldr	r3, [r7, #20]
 8014c2a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014c2e:	2320      	movs	r3, #32
 8014c30:	2205      	movs	r2, #5
 8014c32:	68f8      	ldr	r0, [r7, #12]
 8014c34:	f7ff fe61 	bl	80148fa <SCSI_SenseCode>
      return -1;
 8014c38:	f04f 33ff 	mov.w	r3, #4294967295
 8014c3c:	e084      	b.n	8014d48 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014c3e:	697b      	ldr	r3, [r7, #20]
 8014c40:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8014c44:	2b02      	cmp	r3, #2
 8014c46:	d108      	bne.n	8014c5a <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014c48:	7af9      	ldrb	r1, [r7, #11]
 8014c4a:	233a      	movs	r3, #58	; 0x3a
 8014c4c:	2202      	movs	r2, #2
 8014c4e:	68f8      	ldr	r0, [r7, #12]
 8014c50:	f7ff fe53 	bl	80148fa <SCSI_SenseCode>
      return -1;
 8014c54:	f04f 33ff 	mov.w	r3, #4294967295
 8014c58:	e076      	b.n	8014d48 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c60:	68fa      	ldr	r2, [r7, #12]
 8014c62:	33b0      	adds	r3, #176	; 0xb0
 8014c64:	009b      	lsls	r3, r3, #2
 8014c66:	4413      	add	r3, r2
 8014c68:	685b      	ldr	r3, [r3, #4]
 8014c6a:	689b      	ldr	r3, [r3, #8]
 8014c6c:	7afa      	ldrb	r2, [r7, #11]
 8014c6e:	4610      	mov	r0, r2
 8014c70:	4798      	blx	r3
 8014c72:	4603      	mov	r3, r0
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d008      	beq.n	8014c8a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014c78:	7af9      	ldrb	r1, [r7, #11]
 8014c7a:	233a      	movs	r3, #58	; 0x3a
 8014c7c:	2202      	movs	r2, #2
 8014c7e:	68f8      	ldr	r0, [r7, #12]
 8014c80:	f7ff fe3b 	bl	80148fa <SCSI_SenseCode>
      return -1;
 8014c84:	f04f 33ff 	mov.w	r3, #4294967295
 8014c88:	e05e      	b.n	8014d48 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	3302      	adds	r3, #2
 8014c8e:	781b      	ldrb	r3, [r3, #0]
 8014c90:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	3303      	adds	r3, #3
 8014c96:	781b      	ldrb	r3, [r3, #0]
 8014c98:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014c9a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	3304      	adds	r3, #4
 8014ca0:	781b      	ldrb	r3, [r3, #0]
 8014ca2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014ca4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014ca6:	687a      	ldr	r2, [r7, #4]
 8014ca8:	3205      	adds	r2, #5
 8014caa:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8014cac:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014cae:	697b      	ldr	r3, [r7, #20]
 8014cb0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	3306      	adds	r3, #6
 8014cb8:	781b      	ldrb	r3, [r3, #0]
 8014cba:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	3307      	adds	r3, #7
 8014cc0:	781b      	ldrb	r3, [r3, #0]
 8014cc2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014cc4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	3308      	adds	r3, #8
 8014cca:	781b      	ldrb	r3, [r3, #0]
 8014ccc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014cce:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014cd0:	687a      	ldr	r2, [r7, #4]
 8014cd2:	3209      	adds	r2, #9
 8014cd4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014cd6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014cd8:	697b      	ldr	r3, [r7, #20]
 8014cda:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014cde:	697b      	ldr	r3, [r7, #20]
 8014ce0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8014ce4:	697b      	ldr	r3, [r7, #20]
 8014ce6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8014cea:	7af9      	ldrb	r1, [r7, #11]
 8014cec:	68f8      	ldr	r0, [r7, #12]
 8014cee:	f000 fa28 	bl	8015142 <SCSI_CheckAddressRange>
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	da02      	bge.n	8014cfe <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8014cfc:	e024      	b.n	8014d48 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8014cfe:	697b      	ldr	r3, [r7, #20]
 8014d00:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8014d04:	697b      	ldr	r3, [r7, #20]
 8014d06:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8014d0a:	6979      	ldr	r1, [r7, #20]
 8014d0c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8014d10:	fb01 f303 	mul.w	r3, r1, r3
 8014d14:	429a      	cmp	r2, r3
 8014d16:	d00a      	beq.n	8014d2e <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014d18:	697b      	ldr	r3, [r7, #20]
 8014d1a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014d1e:	2320      	movs	r3, #32
 8014d20:	2205      	movs	r2, #5
 8014d22:	68f8      	ldr	r0, [r7, #12]
 8014d24:	f7ff fde9 	bl	80148fa <SCSI_SenseCode>
      return -1;
 8014d28:	f04f 33ff 	mov.w	r3, #4294967295
 8014d2c:	e00c      	b.n	8014d48 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014d2e:	697b      	ldr	r3, [r7, #20]
 8014d30:	2202      	movs	r2, #2
 8014d32:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8014d34:	697b      	ldr	r3, [r7, #20]
 8014d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014d3a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014d3c:	7afb      	ldrb	r3, [r7, #11]
 8014d3e:	4619      	mov	r1, r3
 8014d40:	68f8      	ldr	r0, [r7, #12]
 8014d42:	f000 fa2b 	bl	801519c <SCSI_ProcessRead>
 8014d46:	4603      	mov	r3, r0
}
 8014d48:	4618      	mov	r0, r3
 8014d4a:	3718      	adds	r7, #24
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}

08014d50 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b086      	sub	sp, #24
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	60f8      	str	r0, [r7, #12]
 8014d58:	460b      	mov	r3, r1
 8014d5a:	607a      	str	r2, [r7, #4]
 8014d5c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	32b0      	adds	r2, #176	; 0xb0
 8014d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d6c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8014d6e:	697b      	ldr	r3, [r7, #20]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d102      	bne.n	8014d7a <SCSI_Write10+0x2a>
  {
    return -1;
 8014d74:	f04f 33ff 	mov.w	r3, #4294967295
 8014d78:	e0ba      	b.n	8014ef0 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014d7a:	697b      	ldr	r3, [r7, #20]
 8014d7c:	7a1b      	ldrb	r3, [r3, #8]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	f040 80b0 	bne.w	8014ee4 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014d84:	697b      	ldr	r3, [r7, #20]
 8014d86:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d10a      	bne.n	8014da4 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014d8e:	697b      	ldr	r3, [r7, #20]
 8014d90:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014d94:	2320      	movs	r3, #32
 8014d96:	2205      	movs	r2, #5
 8014d98:	68f8      	ldr	r0, [r7, #12]
 8014d9a:	f7ff fdae 	bl	80148fa <SCSI_SenseCode>
      return -1;
 8014d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8014da2:	e0a5      	b.n	8014ef0 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014da4:	697b      	ldr	r3, [r7, #20]
 8014da6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8014daa:	b25b      	sxtb	r3, r3
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	da0a      	bge.n	8014dc6 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014db0:	697b      	ldr	r3, [r7, #20]
 8014db2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014db6:	2320      	movs	r3, #32
 8014db8:	2205      	movs	r2, #5
 8014dba:	68f8      	ldr	r0, [r7, #12]
 8014dbc:	f7ff fd9d 	bl	80148fa <SCSI_SenseCode>
      return -1;
 8014dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8014dc4:	e094      	b.n	8014ef0 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014dcc:	68fa      	ldr	r2, [r7, #12]
 8014dce:	33b0      	adds	r3, #176	; 0xb0
 8014dd0:	009b      	lsls	r3, r3, #2
 8014dd2:	4413      	add	r3, r2
 8014dd4:	685b      	ldr	r3, [r3, #4]
 8014dd6:	689b      	ldr	r3, [r3, #8]
 8014dd8:	7afa      	ldrb	r2, [r7, #11]
 8014dda:	4610      	mov	r0, r2
 8014ddc:	4798      	blx	r3
 8014dde:	4603      	mov	r3, r0
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d008      	beq.n	8014df6 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014de4:	7af9      	ldrb	r1, [r7, #11]
 8014de6:	233a      	movs	r3, #58	; 0x3a
 8014de8:	2202      	movs	r2, #2
 8014dea:	68f8      	ldr	r0, [r7, #12]
 8014dec:	f7ff fd85 	bl	80148fa <SCSI_SenseCode>
      return -1;
 8014df0:	f04f 33ff 	mov.w	r3, #4294967295
 8014df4:	e07c      	b.n	8014ef0 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014dfc:	68fa      	ldr	r2, [r7, #12]
 8014dfe:	33b0      	adds	r3, #176	; 0xb0
 8014e00:	009b      	lsls	r3, r3, #2
 8014e02:	4413      	add	r3, r2
 8014e04:	685b      	ldr	r3, [r3, #4]
 8014e06:	68db      	ldr	r3, [r3, #12]
 8014e08:	7afa      	ldrb	r2, [r7, #11]
 8014e0a:	4610      	mov	r0, r2
 8014e0c:	4798      	blx	r3
 8014e0e:	4603      	mov	r3, r0
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d008      	beq.n	8014e26 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014e14:	7af9      	ldrb	r1, [r7, #11]
 8014e16:	2327      	movs	r3, #39	; 0x27
 8014e18:	2202      	movs	r2, #2
 8014e1a:	68f8      	ldr	r0, [r7, #12]
 8014e1c:	f7ff fd6d 	bl	80148fa <SCSI_SenseCode>
      return -1;
 8014e20:	f04f 33ff 	mov.w	r3, #4294967295
 8014e24:	e064      	b.n	8014ef0 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	3302      	adds	r3, #2
 8014e2a:	781b      	ldrb	r3, [r3, #0]
 8014e2c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	3303      	adds	r3, #3
 8014e32:	781b      	ldrb	r3, [r3, #0]
 8014e34:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014e36:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	3304      	adds	r3, #4
 8014e3c:	781b      	ldrb	r3, [r3, #0]
 8014e3e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014e40:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014e42:	687a      	ldr	r2, [r7, #4]
 8014e44:	3205      	adds	r2, #5
 8014e46:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014e48:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014e4a:	697b      	ldr	r3, [r7, #20]
 8014e4c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	3307      	adds	r3, #7
 8014e54:	781b      	ldrb	r3, [r3, #0]
 8014e56:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8014e58:	687a      	ldr	r2, [r7, #4]
 8014e5a:	3208      	adds	r2, #8
 8014e5c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014e5e:	431a      	orrs	r2, r3
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014e66:	697b      	ldr	r3, [r7, #20]
 8014e68:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8014e6c:	697b      	ldr	r3, [r7, #20]
 8014e6e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8014e72:	7af9      	ldrb	r1, [r7, #11]
 8014e74:	68f8      	ldr	r0, [r7, #12]
 8014e76:	f000 f964 	bl	8015142 <SCSI_CheckAddressRange>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	da02      	bge.n	8014e86 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014e80:	f04f 33ff 	mov.w	r3, #4294967295
 8014e84:	e034      	b.n	8014ef0 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014e86:	697b      	ldr	r3, [r7, #20]
 8014e88:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8014e8c:	697a      	ldr	r2, [r7, #20]
 8014e8e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8014e92:	fb02 f303 	mul.w	r3, r2, r3
 8014e96:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014e98:	697b      	ldr	r3, [r7, #20]
 8014e9a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014e9e:	693a      	ldr	r2, [r7, #16]
 8014ea0:	429a      	cmp	r2, r3
 8014ea2:	d00a      	beq.n	8014eba <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014ea4:	697b      	ldr	r3, [r7, #20]
 8014ea6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014eaa:	2320      	movs	r3, #32
 8014eac:	2205      	movs	r2, #5
 8014eae:	68f8      	ldr	r0, [r7, #12]
 8014eb0:	f7ff fd23 	bl	80148fa <SCSI_SenseCode>
      return -1;
 8014eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8014eb8:	e01a      	b.n	8014ef0 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014eba:	693b      	ldr	r3, [r7, #16]
 8014ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014ec0:	bf28      	it	cs
 8014ec2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8014ec6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014ec8:	697b      	ldr	r3, [r7, #20]
 8014eca:	2201      	movs	r2, #1
 8014ecc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8014ece:	4b0a      	ldr	r3, [pc, #40]	; (8014ef8 <SCSI_Write10+0x1a8>)
 8014ed0:	7819      	ldrb	r1, [r3, #0]
 8014ed2:	697b      	ldr	r3, [r7, #20]
 8014ed4:	f103 0210 	add.w	r2, r3, #16
 8014ed8:	693b      	ldr	r3, [r7, #16]
 8014eda:	68f8      	ldr	r0, [r7, #12]
 8014edc:	f003 fdad 	bl	8018a3a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	e005      	b.n	8014ef0 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8014ee4:	7afb      	ldrb	r3, [r7, #11]
 8014ee6:	4619      	mov	r1, r3
 8014ee8:	68f8      	ldr	r0, [r7, #12]
 8014eea:	f000 f9dd 	bl	80152a8 <SCSI_ProcessWrite>
 8014eee:	4603      	mov	r3, r0
}
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	3718      	adds	r7, #24
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	bd80      	pop	{r7, pc}
 8014ef8:	2000008b 	.word	0x2000008b

08014efc <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b086      	sub	sp, #24
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	60f8      	str	r0, [r7, #12]
 8014f04:	460b      	mov	r3, r1
 8014f06:	607a      	str	r2, [r7, #4]
 8014f08:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	32b0      	adds	r2, #176	; 0xb0
 8014f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f18:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8014f1a:	697b      	ldr	r3, [r7, #20]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d102      	bne.n	8014f26 <SCSI_Write12+0x2a>
  {
    return -1;
 8014f20:	f04f 33ff 	mov.w	r3, #4294967295
 8014f24:	e0ca      	b.n	80150bc <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014f26:	697b      	ldr	r3, [r7, #20]
 8014f28:	7a1b      	ldrb	r3, [r3, #8]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	f040 80c0 	bne.w	80150b0 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014f30:	697b      	ldr	r3, [r7, #20]
 8014f32:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d10a      	bne.n	8014f50 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014f3a:	697b      	ldr	r3, [r7, #20]
 8014f3c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014f40:	2320      	movs	r3, #32
 8014f42:	2205      	movs	r2, #5
 8014f44:	68f8      	ldr	r0, [r7, #12]
 8014f46:	f7ff fcd8 	bl	80148fa <SCSI_SenseCode>
      return -1;
 8014f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8014f4e:	e0b5      	b.n	80150bc <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014f50:	697b      	ldr	r3, [r7, #20]
 8014f52:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8014f56:	b25b      	sxtb	r3, r3
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	da0a      	bge.n	8014f72 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014f5c:	697b      	ldr	r3, [r7, #20]
 8014f5e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014f62:	2320      	movs	r3, #32
 8014f64:	2205      	movs	r2, #5
 8014f66:	68f8      	ldr	r0, [r7, #12]
 8014f68:	f7ff fcc7 	bl	80148fa <SCSI_SenseCode>
      return -1;
 8014f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8014f70:	e0a4      	b.n	80150bc <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014f78:	68fa      	ldr	r2, [r7, #12]
 8014f7a:	33b0      	adds	r3, #176	; 0xb0
 8014f7c:	009b      	lsls	r3, r3, #2
 8014f7e:	4413      	add	r3, r2
 8014f80:	685b      	ldr	r3, [r3, #4]
 8014f82:	689b      	ldr	r3, [r3, #8]
 8014f84:	7afa      	ldrb	r2, [r7, #11]
 8014f86:	4610      	mov	r0, r2
 8014f88:	4798      	blx	r3
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d00b      	beq.n	8014fa8 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014f90:	7af9      	ldrb	r1, [r7, #11]
 8014f92:	233a      	movs	r3, #58	; 0x3a
 8014f94:	2202      	movs	r2, #2
 8014f96:	68f8      	ldr	r0, [r7, #12]
 8014f98:	f7ff fcaf 	bl	80148fa <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014f9c:	697b      	ldr	r3, [r7, #20]
 8014f9e:	2205      	movs	r2, #5
 8014fa0:	721a      	strb	r2, [r3, #8]
      return -1;
 8014fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8014fa6:	e089      	b.n	80150bc <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014fae:	68fa      	ldr	r2, [r7, #12]
 8014fb0:	33b0      	adds	r3, #176	; 0xb0
 8014fb2:	009b      	lsls	r3, r3, #2
 8014fb4:	4413      	add	r3, r2
 8014fb6:	685b      	ldr	r3, [r3, #4]
 8014fb8:	68db      	ldr	r3, [r3, #12]
 8014fba:	7afa      	ldrb	r2, [r7, #11]
 8014fbc:	4610      	mov	r0, r2
 8014fbe:	4798      	blx	r3
 8014fc0:	4603      	mov	r3, r0
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d00b      	beq.n	8014fde <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014fc6:	7af9      	ldrb	r1, [r7, #11]
 8014fc8:	2327      	movs	r3, #39	; 0x27
 8014fca:	2202      	movs	r2, #2
 8014fcc:	68f8      	ldr	r0, [r7, #12]
 8014fce:	f7ff fc94 	bl	80148fa <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014fd2:	697b      	ldr	r3, [r7, #20]
 8014fd4:	2205      	movs	r2, #5
 8014fd6:	721a      	strb	r2, [r3, #8]
      return -1;
 8014fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8014fdc:	e06e      	b.n	80150bc <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	3302      	adds	r3, #2
 8014fe2:	781b      	ldrb	r3, [r3, #0]
 8014fe4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	3303      	adds	r3, #3
 8014fea:	781b      	ldrb	r3, [r3, #0]
 8014fec:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014fee:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	3304      	adds	r3, #4
 8014ff4:	781b      	ldrb	r3, [r3, #0]
 8014ff6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014ff8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014ffa:	687a      	ldr	r2, [r7, #4]
 8014ffc:	3205      	adds	r2, #5
 8014ffe:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8015000:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015002:	697b      	ldr	r3, [r7, #20]
 8015004:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	3306      	adds	r3, #6
 801500c:	781b      	ldrb	r3, [r3, #0]
 801500e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	3307      	adds	r3, #7
 8015014:	781b      	ldrb	r3, [r3, #0]
 8015016:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015018:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	3308      	adds	r3, #8
 801501e:	781b      	ldrb	r3, [r3, #0]
 8015020:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8015022:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8015024:	687a      	ldr	r2, [r7, #4]
 8015026:	3209      	adds	r2, #9
 8015028:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801502a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801502c:	697b      	ldr	r3, [r7, #20]
 801502e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015032:	697b      	ldr	r3, [r7, #20]
 8015034:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8015038:	697b      	ldr	r3, [r7, #20]
 801503a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801503e:	7af9      	ldrb	r1, [r7, #11]
 8015040:	68f8      	ldr	r0, [r7, #12]
 8015042:	f000 f87e 	bl	8015142 <SCSI_CheckAddressRange>
 8015046:	4603      	mov	r3, r0
 8015048:	2b00      	cmp	r3, #0
 801504a:	da02      	bge.n	8015052 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801504c:	f04f 33ff 	mov.w	r3, #4294967295
 8015050:	e034      	b.n	80150bc <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015052:	697b      	ldr	r3, [r7, #20]
 8015054:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015058:	697a      	ldr	r2, [r7, #20]
 801505a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801505e:	fb02 f303 	mul.w	r3, r2, r3
 8015062:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8015064:	697b      	ldr	r3, [r7, #20]
 8015066:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801506a:	693a      	ldr	r2, [r7, #16]
 801506c:	429a      	cmp	r2, r3
 801506e:	d00a      	beq.n	8015086 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015070:	697b      	ldr	r3, [r7, #20]
 8015072:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8015076:	2320      	movs	r3, #32
 8015078:	2205      	movs	r2, #5
 801507a:	68f8      	ldr	r0, [r7, #12]
 801507c:	f7ff fc3d 	bl	80148fa <SCSI_SenseCode>
      return -1;
 8015080:	f04f 33ff 	mov.w	r3, #4294967295
 8015084:	e01a      	b.n	80150bc <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8015086:	693b      	ldr	r3, [r7, #16]
 8015088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801508c:	bf28      	it	cs
 801508e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8015092:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8015094:	697b      	ldr	r3, [r7, #20]
 8015096:	2201      	movs	r2, #1
 8015098:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 801509a:	4b0a      	ldr	r3, [pc, #40]	; (80150c4 <SCSI_Write12+0x1c8>)
 801509c:	7819      	ldrb	r1, [r3, #0]
 801509e:	697b      	ldr	r3, [r7, #20]
 80150a0:	f103 0210 	add.w	r2, r3, #16
 80150a4:	693b      	ldr	r3, [r7, #16]
 80150a6:	68f8      	ldr	r0, [r7, #12]
 80150a8:	f003 fcc7 	bl	8018a3a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80150ac:	2300      	movs	r3, #0
 80150ae:	e005      	b.n	80150bc <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 80150b0:	7afb      	ldrb	r3, [r7, #11]
 80150b2:	4619      	mov	r1, r3
 80150b4:	68f8      	ldr	r0, [r7, #12]
 80150b6:	f000 f8f7 	bl	80152a8 <SCSI_ProcessWrite>
 80150ba:	4603      	mov	r3, r0
}
 80150bc:	4618      	mov	r0, r3
 80150be:	3718      	adds	r7, #24
 80150c0:	46bd      	mov	sp, r7
 80150c2:	bd80      	pop	{r7, pc}
 80150c4:	2000008b 	.word	0x2000008b

080150c8 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b086      	sub	sp, #24
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	60f8      	str	r0, [r7, #12]
 80150d0:	460b      	mov	r3, r1
 80150d2:	607a      	str	r2, [r7, #4]
 80150d4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	32b0      	adds	r2, #176	; 0xb0
 80150e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150e4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80150e6:	697b      	ldr	r3, [r7, #20]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d102      	bne.n	80150f2 <SCSI_Verify10+0x2a>
  {
    return -1;
 80150ec:	f04f 33ff 	mov.w	r3, #4294967295
 80150f0:	e023      	b.n	801513a <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	3301      	adds	r3, #1
 80150f6:	781b      	ldrb	r3, [r3, #0]
 80150f8:	f003 0302 	and.w	r3, r3, #2
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d008      	beq.n	8015112 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8015100:	7af9      	ldrb	r1, [r7, #11]
 8015102:	2324      	movs	r3, #36	; 0x24
 8015104:	2205      	movs	r2, #5
 8015106:	68f8      	ldr	r0, [r7, #12]
 8015108:	f7ff fbf7 	bl	80148fa <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 801510c:	f04f 33ff 	mov.w	r3, #4294967295
 8015110:	e013      	b.n	801513a <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8015112:	697b      	ldr	r3, [r7, #20]
 8015114:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8015118:	697b      	ldr	r3, [r7, #20]
 801511a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801511e:	7af9      	ldrb	r1, [r7, #11]
 8015120:	68f8      	ldr	r0, [r7, #12]
 8015122:	f000 f80e 	bl	8015142 <SCSI_CheckAddressRange>
 8015126:	4603      	mov	r3, r0
 8015128:	2b00      	cmp	r3, #0
 801512a:	da02      	bge.n	8015132 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 801512c:	f04f 33ff 	mov.w	r3, #4294967295
 8015130:	e003      	b.n	801513a <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8015132:	697b      	ldr	r3, [r7, #20]
 8015134:	2200      	movs	r2, #0
 8015136:	60da      	str	r2, [r3, #12]

  return 0;
 8015138:	2300      	movs	r3, #0
}
 801513a:	4618      	mov	r0, r3
 801513c:	3718      	adds	r7, #24
 801513e:	46bd      	mov	sp, r7
 8015140:	bd80      	pop	{r7, pc}

08015142 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8015142:	b580      	push	{r7, lr}
 8015144:	b086      	sub	sp, #24
 8015146:	af00      	add	r7, sp, #0
 8015148:	60f8      	str	r0, [r7, #12]
 801514a:	607a      	str	r2, [r7, #4]
 801514c:	603b      	str	r3, [r7, #0]
 801514e:	460b      	mov	r3, r1
 8015150:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	32b0      	adds	r2, #176	; 0xb0
 801515c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015160:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015162:	697b      	ldr	r3, [r7, #20]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d102      	bne.n	801516e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8015168:	f04f 33ff 	mov.w	r3, #4294967295
 801516c:	e011      	b.n	8015192 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 801516e:	687a      	ldr	r2, [r7, #4]
 8015170:	683b      	ldr	r3, [r7, #0]
 8015172:	441a      	add	r2, r3
 8015174:	697b      	ldr	r3, [r7, #20]
 8015176:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801517a:	429a      	cmp	r2, r3
 801517c:	d908      	bls.n	8015190 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 801517e:	7af9      	ldrb	r1, [r7, #11]
 8015180:	2321      	movs	r3, #33	; 0x21
 8015182:	2205      	movs	r2, #5
 8015184:	68f8      	ldr	r0, [r7, #12]
 8015186:	f7ff fbb8 	bl	80148fa <SCSI_SenseCode>
    return -1;
 801518a:	f04f 33ff 	mov.w	r3, #4294967295
 801518e:	e000      	b.n	8015192 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8015190:	2300      	movs	r3, #0
}
 8015192:	4618      	mov	r0, r3
 8015194:	3718      	adds	r7, #24
 8015196:	46bd      	mov	sp, r7
 8015198:	bd80      	pop	{r7, pc}
	...

0801519c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801519c:	b590      	push	{r4, r7, lr}
 801519e:	b085      	sub	sp, #20
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	6078      	str	r0, [r7, #4]
 80151a4:	460b      	mov	r3, r1
 80151a6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	32b0      	adds	r2, #176	; 0xb0
 80151b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151b6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d102      	bne.n	80151c4 <SCSI_ProcessRead+0x28>
  {
    return -1;
 80151be:	f04f 33ff 	mov.w	r3, #4294967295
 80151c2:	e06a      	b.n	801529a <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80151ca:	68fa      	ldr	r2, [r7, #12]
 80151cc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80151d0:	fb02 f303 	mul.w	r3, r2, r3
 80151d4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80151d6:	68bb      	ldr	r3, [r7, #8]
 80151d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80151dc:	bf28      	it	cs
 80151de:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80151e2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80151ea:	687a      	ldr	r2, [r7, #4]
 80151ec:	33b0      	adds	r3, #176	; 0xb0
 80151ee:	009b      	lsls	r3, r3, #2
 80151f0:	4413      	add	r3, r2
 80151f2:	685b      	ldr	r3, [r3, #4]
 80151f4:	691c      	ldr	r4, [r3, #16]
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	f103 0110 	add.w	r1, r3, #16
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8015208:	4618      	mov	r0, r3
 801520a:	68bb      	ldr	r3, [r7, #8]
 801520c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8015210:	b29b      	uxth	r3, r3
 8015212:	78f8      	ldrb	r0, [r7, #3]
 8015214:	47a0      	blx	r4
 8015216:	4603      	mov	r3, r0
 8015218:	2b00      	cmp	r3, #0
 801521a:	da08      	bge.n	801522e <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 801521c:	78f9      	ldrb	r1, [r7, #3]
 801521e:	2311      	movs	r3, #17
 8015220:	2204      	movs	r2, #4
 8015222:	6878      	ldr	r0, [r7, #4]
 8015224:	f7ff fb69 	bl	80148fa <SCSI_SenseCode>
    return -1;
 8015228:	f04f 33ff 	mov.w	r3, #4294967295
 801522c:	e035      	b.n	801529a <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 801522e:	4b1d      	ldr	r3, [pc, #116]	; (80152a4 <SCSI_ProcessRead+0x108>)
 8015230:	7819      	ldrb	r1, [r3, #0]
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	f103 0210 	add.w	r2, r3, #16
 8015238:	68bb      	ldr	r3, [r7, #8]
 801523a:	6878      	ldr	r0, [r7, #4]
 801523c:	f003 fbdc 	bl	80189f8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801524c:	4619      	mov	r1, r3
 801524e:	68bb      	ldr	r3, [r7, #8]
 8015250:	fbb3 f3f1 	udiv	r3, r3, r1
 8015254:	441a      	add	r2, r3
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8015268:	4619      	mov	r1, r3
 801526a:	68bb      	ldr	r3, [r7, #8]
 801526c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015270:	1ad2      	subs	r2, r2, r3
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801527e:	68bb      	ldr	r3, [r7, #8]
 8015280:	1ad2      	subs	r2, r2, r3
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801528e:	2b00      	cmp	r3, #0
 8015290:	d102      	bne.n	8015298 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	2203      	movs	r2, #3
 8015296:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8015298:	2300      	movs	r3, #0
}
 801529a:	4618      	mov	r0, r3
 801529c:	3714      	adds	r7, #20
 801529e:	46bd      	mov	sp, r7
 80152a0:	bd90      	pop	{r4, r7, pc}
 80152a2:	bf00      	nop
 80152a4:	2000008a 	.word	0x2000008a

080152a8 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80152a8:	b590      	push	{r4, r7, lr}
 80152aa:	b085      	sub	sp, #20
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
 80152b0:	460b      	mov	r3, r1
 80152b2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	32b0      	adds	r2, #176	; 0xb0
 80152be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152c2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d102      	bne.n	80152d0 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 80152ca:	f04f 33ff 	mov.w	r3, #4294967295
 80152ce:	e07a      	b.n	80153c6 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80152d6:	68fa      	ldr	r2, [r7, #12]
 80152d8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80152dc:	fb02 f303 	mul.w	r3, r2, r3
 80152e0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80152e2:	68bb      	ldr	r3, [r7, #8]
 80152e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80152e8:	bf28      	it	cs
 80152ea:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80152ee:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80152f6:	687a      	ldr	r2, [r7, #4]
 80152f8:	33b0      	adds	r3, #176	; 0xb0
 80152fa:	009b      	lsls	r3, r3, #2
 80152fc:	4413      	add	r3, r2
 80152fe:	685b      	ldr	r3, [r3, #4]
 8015300:	695c      	ldr	r4, [r3, #20]
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	f103 0110 	add.w	r1, r3, #16
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8015314:	4618      	mov	r0, r3
 8015316:	68bb      	ldr	r3, [r7, #8]
 8015318:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 801531c:	b29b      	uxth	r3, r3
 801531e:	78f8      	ldrb	r0, [r7, #3]
 8015320:	47a0      	blx	r4
 8015322:	4603      	mov	r3, r0
 8015324:	2b00      	cmp	r3, #0
 8015326:	da08      	bge.n	801533a <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8015328:	78f9      	ldrb	r1, [r7, #3]
 801532a:	2303      	movs	r3, #3
 801532c:	2204      	movs	r2, #4
 801532e:	6878      	ldr	r0, [r7, #4]
 8015330:	f7ff fae3 	bl	80148fa <SCSI_SenseCode>
    return -1;
 8015334:	f04f 33ff 	mov.w	r3, #4294967295
 8015338:	e045      	b.n	80153c6 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8015346:	4619      	mov	r1, r3
 8015348:	68bb      	ldr	r3, [r7, #8]
 801534a:	fbb3 f3f1 	udiv	r3, r3, r1
 801534e:	441a      	add	r2, r3
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8015362:	4619      	mov	r1, r3
 8015364:	68bb      	ldr	r3, [r7, #8]
 8015366:	fbb3 f3f1 	udiv	r3, r3, r1
 801536a:	1ad2      	subs	r2, r2, r3
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8015378:	68bb      	ldr	r3, [r7, #8]
 801537a:	1ad2      	subs	r2, r2, r3
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015388:	2b00      	cmp	r3, #0
 801538a:	d104      	bne.n	8015396 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801538c:	2100      	movs	r1, #0
 801538e:	6878      	ldr	r0, [r7, #4]
 8015390:	f7fe fd14 	bl	8013dbc <MSC_BOT_SendCSW>
 8015394:	e016      	b.n	80153c4 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801539c:	68fa      	ldr	r2, [r7, #12]
 801539e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80153a2:	fb02 f303 	mul.w	r3, r2, r3
 80153a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80153aa:	bf28      	it	cs
 80153ac:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80153b0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80153b2:	4b07      	ldr	r3, [pc, #28]	; (80153d0 <SCSI_ProcessWrite+0x128>)
 80153b4:	7819      	ldrb	r1, [r3, #0]
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	f103 0210 	add.w	r2, r3, #16
 80153bc:	68bb      	ldr	r3, [r7, #8]
 80153be:	6878      	ldr	r0, [r7, #4]
 80153c0:	f003 fb3b 	bl	8018a3a <USBD_LL_PrepareReceive>
  }

  return 0;
 80153c4:	2300      	movs	r3, #0
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	3714      	adds	r7, #20
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bd90      	pop	{r4, r7, pc}
 80153ce:	bf00      	nop
 80153d0:	2000008b 	.word	0x2000008b

080153d4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80153d4:	b480      	push	{r7}
 80153d6:	b087      	sub	sp, #28
 80153d8:	af00      	add	r7, sp, #0
 80153da:	60f8      	str	r0, [r7, #12]
 80153dc:	60b9      	str	r1, [r7, #8]
 80153de:	4613      	mov	r3, r2
 80153e0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80153e2:	88fb      	ldrh	r3, [r7, #6]
 80153e4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d102      	bne.n	80153f2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80153ec:	f04f 33ff 	mov.w	r3, #4294967295
 80153f0:	e013      	b.n	801541a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80153f2:	8afa      	ldrh	r2, [r7, #22]
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80153f8:	e00b      	b.n	8015412 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80153fa:	8afb      	ldrh	r3, [r7, #22]
 80153fc:	3b01      	subs	r3, #1
 80153fe:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8015400:	8afb      	ldrh	r3, [r7, #22]
 8015402:	68ba      	ldr	r2, [r7, #8]
 8015404:	441a      	add	r2, r3
 8015406:	8afb      	ldrh	r3, [r7, #22]
 8015408:	7811      	ldrb	r1, [r2, #0]
 801540a:	68fa      	ldr	r2, [r7, #12]
 801540c:	4413      	add	r3, r2
 801540e:	460a      	mov	r2, r1
 8015410:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8015412:	8afb      	ldrh	r3, [r7, #22]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d1f0      	bne.n	80153fa <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8015418:	2300      	movs	r3, #0
}
 801541a:	4618      	mov	r0, r3
 801541c:	371c      	adds	r7, #28
 801541e:	46bd      	mov	sp, r7
 8015420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015424:	4770      	bx	lr

08015426 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015426:	b580      	push	{r7, lr}
 8015428:	b086      	sub	sp, #24
 801542a:	af00      	add	r7, sp, #0
 801542c:	60f8      	str	r0, [r7, #12]
 801542e:	60b9      	str	r1, [r7, #8]
 8015430:	4613      	mov	r3, r2
 8015432:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d101      	bne.n	801543e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801543a:	2303      	movs	r3, #3
 801543c:	e01f      	b.n	801547e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	2200      	movs	r2, #0
 8015442:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	2200      	movs	r2, #0
 801544a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	2200      	movs	r2, #0
 8015452:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015456:	68bb      	ldr	r3, [r7, #8]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d003      	beq.n	8015464 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	68ba      	ldr	r2, [r7, #8]
 8015460:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	2201      	movs	r2, #1
 8015468:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	79fa      	ldrb	r2, [r7, #7]
 8015470:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015472:	68f8      	ldr	r0, [r7, #12]
 8015474:	f003 f96c 	bl	8018750 <USBD_LL_Init>
 8015478:	4603      	mov	r3, r0
 801547a:	75fb      	strb	r3, [r7, #23]

  return ret;
 801547c:	7dfb      	ldrb	r3, [r7, #23]
}
 801547e:	4618      	mov	r0, r3
 8015480:	3718      	adds	r7, #24
 8015482:	46bd      	mov	sp, r7
 8015484:	bd80      	pop	{r7, pc}

08015486 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015486:	b580      	push	{r7, lr}
 8015488:	b084      	sub	sp, #16
 801548a:	af00      	add	r7, sp, #0
 801548c:	6078      	str	r0, [r7, #4]
 801548e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015490:	2300      	movs	r3, #0
 8015492:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d101      	bne.n	801549e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801549a:	2303      	movs	r3, #3
 801549c:	e025      	b.n	80154ea <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	683a      	ldr	r2, [r7, #0]
 80154a2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	32ae      	adds	r2, #174	; 0xae
 80154b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d00f      	beq.n	80154da <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	32ae      	adds	r2, #174	; 0xae
 80154c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154ca:	f107 020e 	add.w	r2, r7, #14
 80154ce:	4610      	mov	r0, r2
 80154d0:	4798      	blx	r3
 80154d2:	4602      	mov	r2, r0
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80154e0:	1c5a      	adds	r2, r3, #1
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80154e8:	2300      	movs	r3, #0
}
 80154ea:	4618      	mov	r0, r3
 80154ec:	3710      	adds	r7, #16
 80154ee:	46bd      	mov	sp, r7
 80154f0:	bd80      	pop	{r7, pc}

080154f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80154f2:	b580      	push	{r7, lr}
 80154f4:	b082      	sub	sp, #8
 80154f6:	af00      	add	r7, sp, #0
 80154f8:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80154fa:	6878      	ldr	r0, [r7, #4]
 80154fc:	f003 f974 	bl	80187e8 <USBD_LL_Start>
 8015500:	4603      	mov	r3, r0
}
 8015502:	4618      	mov	r0, r3
 8015504:	3708      	adds	r7, #8
 8015506:	46bd      	mov	sp, r7
 8015508:	bd80      	pop	{r7, pc}

0801550a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801550a:	b480      	push	{r7}
 801550c:	b083      	sub	sp, #12
 801550e:	af00      	add	r7, sp, #0
 8015510:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015512:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015514:	4618      	mov	r0, r3
 8015516:	370c      	adds	r7, #12
 8015518:	46bd      	mov	sp, r7
 801551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551e:	4770      	bx	lr

08015520 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b084      	sub	sp, #16
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
 8015528:	460b      	mov	r3, r1
 801552a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801552c:	2300      	movs	r3, #0
 801552e:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015536:	2b00      	cmp	r3, #0
 8015538:	d009      	beq.n	801554e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	78fa      	ldrb	r2, [r7, #3]
 8015544:	4611      	mov	r1, r2
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	4798      	blx	r3
 801554a:	4603      	mov	r3, r0
 801554c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801554e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015550:	4618      	mov	r0, r3
 8015552:	3710      	adds	r7, #16
 8015554:	46bd      	mov	sp, r7
 8015556:	bd80      	pop	{r7, pc}

08015558 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b084      	sub	sp, #16
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
 8015560:	460b      	mov	r3, r1
 8015562:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015564:	2300      	movs	r3, #0
 8015566:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801556e:	685b      	ldr	r3, [r3, #4]
 8015570:	78fa      	ldrb	r2, [r7, #3]
 8015572:	4611      	mov	r1, r2
 8015574:	6878      	ldr	r0, [r7, #4]
 8015576:	4798      	blx	r3
 8015578:	4603      	mov	r3, r0
 801557a:	2b00      	cmp	r3, #0
 801557c:	d001      	beq.n	8015582 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801557e:	2303      	movs	r3, #3
 8015580:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015582:	7bfb      	ldrb	r3, [r7, #15]
}
 8015584:	4618      	mov	r0, r3
 8015586:	3710      	adds	r7, #16
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}

0801558c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b084      	sub	sp, #16
 8015590:	af00      	add	r7, sp, #0
 8015592:	6078      	str	r0, [r7, #4]
 8015594:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801559c:	6839      	ldr	r1, [r7, #0]
 801559e:	4618      	mov	r0, r3
 80155a0:	f001 f909 	bl	80167b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	2201      	movs	r2, #1
 80155a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80155b2:	461a      	mov	r2, r3
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80155c0:	f003 031f 	and.w	r3, r3, #31
 80155c4:	2b02      	cmp	r3, #2
 80155c6:	d01a      	beq.n	80155fe <USBD_LL_SetupStage+0x72>
 80155c8:	2b02      	cmp	r3, #2
 80155ca:	d822      	bhi.n	8015612 <USBD_LL_SetupStage+0x86>
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d002      	beq.n	80155d6 <USBD_LL_SetupStage+0x4a>
 80155d0:	2b01      	cmp	r3, #1
 80155d2:	d00a      	beq.n	80155ea <USBD_LL_SetupStage+0x5e>
 80155d4:	e01d      	b.n	8015612 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80155dc:	4619      	mov	r1, r3
 80155de:	6878      	ldr	r0, [r7, #4]
 80155e0:	f000 fb60 	bl	8015ca4 <USBD_StdDevReq>
 80155e4:	4603      	mov	r3, r0
 80155e6:	73fb      	strb	r3, [r7, #15]
      break;
 80155e8:	e020      	b.n	801562c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80155f0:	4619      	mov	r1, r3
 80155f2:	6878      	ldr	r0, [r7, #4]
 80155f4:	f000 fbc8 	bl	8015d88 <USBD_StdItfReq>
 80155f8:	4603      	mov	r3, r0
 80155fa:	73fb      	strb	r3, [r7, #15]
      break;
 80155fc:	e016      	b.n	801562c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015604:	4619      	mov	r1, r3
 8015606:	6878      	ldr	r0, [r7, #4]
 8015608:	f000 fc2a 	bl	8015e60 <USBD_StdEPReq>
 801560c:	4603      	mov	r3, r0
 801560e:	73fb      	strb	r3, [r7, #15]
      break;
 8015610:	e00c      	b.n	801562c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015618:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801561c:	b2db      	uxtb	r3, r3
 801561e:	4619      	mov	r1, r3
 8015620:	6878      	ldr	r0, [r7, #4]
 8015622:	f003 f960 	bl	80188e6 <USBD_LL_StallEP>
 8015626:	4603      	mov	r3, r0
 8015628:	73fb      	strb	r3, [r7, #15]
      break;
 801562a:	bf00      	nop
  }

  return ret;
 801562c:	7bfb      	ldrb	r3, [r7, #15]
}
 801562e:	4618      	mov	r0, r3
 8015630:	3710      	adds	r7, #16
 8015632:	46bd      	mov	sp, r7
 8015634:	bd80      	pop	{r7, pc}

08015636 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015636:	b580      	push	{r7, lr}
 8015638:	b086      	sub	sp, #24
 801563a:	af00      	add	r7, sp, #0
 801563c:	60f8      	str	r0, [r7, #12]
 801563e:	460b      	mov	r3, r1
 8015640:	607a      	str	r2, [r7, #4]
 8015642:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015644:	2300      	movs	r3, #0
 8015646:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015648:	7afb      	ldrb	r3, [r7, #11]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d16e      	bne.n	801572c <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015654:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801565c:	2b03      	cmp	r3, #3
 801565e:	f040 8098 	bne.w	8015792 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015662:	693b      	ldr	r3, [r7, #16]
 8015664:	689a      	ldr	r2, [r3, #8]
 8015666:	693b      	ldr	r3, [r7, #16]
 8015668:	68db      	ldr	r3, [r3, #12]
 801566a:	429a      	cmp	r2, r3
 801566c:	d913      	bls.n	8015696 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801566e:	693b      	ldr	r3, [r7, #16]
 8015670:	689a      	ldr	r2, [r3, #8]
 8015672:	693b      	ldr	r3, [r7, #16]
 8015674:	68db      	ldr	r3, [r3, #12]
 8015676:	1ad2      	subs	r2, r2, r3
 8015678:	693b      	ldr	r3, [r7, #16]
 801567a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801567c:	693b      	ldr	r3, [r7, #16]
 801567e:	68da      	ldr	r2, [r3, #12]
 8015680:	693b      	ldr	r3, [r7, #16]
 8015682:	689b      	ldr	r3, [r3, #8]
 8015684:	4293      	cmp	r3, r2
 8015686:	bf28      	it	cs
 8015688:	4613      	movcs	r3, r2
 801568a:	461a      	mov	r2, r3
 801568c:	6879      	ldr	r1, [r7, #4]
 801568e:	68f8      	ldr	r0, [r7, #12]
 8015690:	f001 f968 	bl	8016964 <USBD_CtlContinueRx>
 8015694:	e07d      	b.n	8015792 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801569c:	f003 031f 	and.w	r3, r3, #31
 80156a0:	2b02      	cmp	r3, #2
 80156a2:	d014      	beq.n	80156ce <USBD_LL_DataOutStage+0x98>
 80156a4:	2b02      	cmp	r3, #2
 80156a6:	d81d      	bhi.n	80156e4 <USBD_LL_DataOutStage+0xae>
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d002      	beq.n	80156b2 <USBD_LL_DataOutStage+0x7c>
 80156ac:	2b01      	cmp	r3, #1
 80156ae:	d003      	beq.n	80156b8 <USBD_LL_DataOutStage+0x82>
 80156b0:	e018      	b.n	80156e4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80156b2:	2300      	movs	r3, #0
 80156b4:	75bb      	strb	r3, [r7, #22]
            break;
 80156b6:	e018      	b.n	80156ea <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80156be:	b2db      	uxtb	r3, r3
 80156c0:	4619      	mov	r1, r3
 80156c2:	68f8      	ldr	r0, [r7, #12]
 80156c4:	f000 fa5e 	bl	8015b84 <USBD_CoreFindIF>
 80156c8:	4603      	mov	r3, r0
 80156ca:	75bb      	strb	r3, [r7, #22]
            break;
 80156cc:	e00d      	b.n	80156ea <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80156d4:	b2db      	uxtb	r3, r3
 80156d6:	4619      	mov	r1, r3
 80156d8:	68f8      	ldr	r0, [r7, #12]
 80156da:	f000 fa60 	bl	8015b9e <USBD_CoreFindEP>
 80156de:	4603      	mov	r3, r0
 80156e0:	75bb      	strb	r3, [r7, #22]
            break;
 80156e2:	e002      	b.n	80156ea <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80156e4:	2300      	movs	r3, #0
 80156e6:	75bb      	strb	r3, [r7, #22]
            break;
 80156e8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80156ea:	7dbb      	ldrb	r3, [r7, #22]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d119      	bne.n	8015724 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156f6:	b2db      	uxtb	r3, r3
 80156f8:	2b03      	cmp	r3, #3
 80156fa:	d113      	bne.n	8015724 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80156fc:	7dba      	ldrb	r2, [r7, #22]
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	32ae      	adds	r2, #174	; 0xae
 8015702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015706:	691b      	ldr	r3, [r3, #16]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d00b      	beq.n	8015724 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801570c:	7dba      	ldrb	r2, [r7, #22]
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8015714:	7dba      	ldrb	r2, [r7, #22]
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	32ae      	adds	r2, #174	; 0xae
 801571a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801571e:	691b      	ldr	r3, [r3, #16]
 8015720:	68f8      	ldr	r0, [r7, #12]
 8015722:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015724:	68f8      	ldr	r0, [r7, #12]
 8015726:	f001 f92e 	bl	8016986 <USBD_CtlSendStatus>
 801572a:	e032      	b.n	8015792 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801572c:	7afb      	ldrb	r3, [r7, #11]
 801572e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015732:	b2db      	uxtb	r3, r3
 8015734:	4619      	mov	r1, r3
 8015736:	68f8      	ldr	r0, [r7, #12]
 8015738:	f000 fa31 	bl	8015b9e <USBD_CoreFindEP>
 801573c:	4603      	mov	r3, r0
 801573e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015740:	7dbb      	ldrb	r3, [r7, #22]
 8015742:	2bff      	cmp	r3, #255	; 0xff
 8015744:	d025      	beq.n	8015792 <USBD_LL_DataOutStage+0x15c>
 8015746:	7dbb      	ldrb	r3, [r7, #22]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d122      	bne.n	8015792 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015752:	b2db      	uxtb	r3, r3
 8015754:	2b03      	cmp	r3, #3
 8015756:	d117      	bne.n	8015788 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015758:	7dba      	ldrb	r2, [r7, #22]
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	32ae      	adds	r2, #174	; 0xae
 801575e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015762:	699b      	ldr	r3, [r3, #24]
 8015764:	2b00      	cmp	r3, #0
 8015766:	d00f      	beq.n	8015788 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015768:	7dba      	ldrb	r2, [r7, #22]
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015770:	7dba      	ldrb	r2, [r7, #22]
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	32ae      	adds	r2, #174	; 0xae
 8015776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801577a:	699b      	ldr	r3, [r3, #24]
 801577c:	7afa      	ldrb	r2, [r7, #11]
 801577e:	4611      	mov	r1, r2
 8015780:	68f8      	ldr	r0, [r7, #12]
 8015782:	4798      	blx	r3
 8015784:	4603      	mov	r3, r0
 8015786:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015788:	7dfb      	ldrb	r3, [r7, #23]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d001      	beq.n	8015792 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801578e:	7dfb      	ldrb	r3, [r7, #23]
 8015790:	e000      	b.n	8015794 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015792:	2300      	movs	r3, #0
}
 8015794:	4618      	mov	r0, r3
 8015796:	3718      	adds	r7, #24
 8015798:	46bd      	mov	sp, r7
 801579a:	bd80      	pop	{r7, pc}

0801579c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b086      	sub	sp, #24
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	60f8      	str	r0, [r7, #12]
 80157a4:	460b      	mov	r3, r1
 80157a6:	607a      	str	r2, [r7, #4]
 80157a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80157aa:	7afb      	ldrb	r3, [r7, #11]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d16f      	bne.n	8015890 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	3314      	adds	r3, #20
 80157b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80157bc:	2b02      	cmp	r3, #2
 80157be:	d15a      	bne.n	8015876 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80157c0:	693b      	ldr	r3, [r7, #16]
 80157c2:	689a      	ldr	r2, [r3, #8]
 80157c4:	693b      	ldr	r3, [r7, #16]
 80157c6:	68db      	ldr	r3, [r3, #12]
 80157c8:	429a      	cmp	r2, r3
 80157ca:	d914      	bls.n	80157f6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80157cc:	693b      	ldr	r3, [r7, #16]
 80157ce:	689a      	ldr	r2, [r3, #8]
 80157d0:	693b      	ldr	r3, [r7, #16]
 80157d2:	68db      	ldr	r3, [r3, #12]
 80157d4:	1ad2      	subs	r2, r2, r3
 80157d6:	693b      	ldr	r3, [r7, #16]
 80157d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80157da:	693b      	ldr	r3, [r7, #16]
 80157dc:	689b      	ldr	r3, [r3, #8]
 80157de:	461a      	mov	r2, r3
 80157e0:	6879      	ldr	r1, [r7, #4]
 80157e2:	68f8      	ldr	r0, [r7, #12]
 80157e4:	f001 f8ad 	bl	8016942 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80157e8:	2300      	movs	r3, #0
 80157ea:	2200      	movs	r2, #0
 80157ec:	2100      	movs	r1, #0
 80157ee:	68f8      	ldr	r0, [r7, #12]
 80157f0:	f003 f923 	bl	8018a3a <USBD_LL_PrepareReceive>
 80157f4:	e03f      	b.n	8015876 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80157f6:	693b      	ldr	r3, [r7, #16]
 80157f8:	68da      	ldr	r2, [r3, #12]
 80157fa:	693b      	ldr	r3, [r7, #16]
 80157fc:	689b      	ldr	r3, [r3, #8]
 80157fe:	429a      	cmp	r2, r3
 8015800:	d11c      	bne.n	801583c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015802:	693b      	ldr	r3, [r7, #16]
 8015804:	685a      	ldr	r2, [r3, #4]
 8015806:	693b      	ldr	r3, [r7, #16]
 8015808:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801580a:	429a      	cmp	r2, r3
 801580c:	d316      	bcc.n	801583c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801580e:	693b      	ldr	r3, [r7, #16]
 8015810:	685a      	ldr	r2, [r3, #4]
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015818:	429a      	cmp	r2, r3
 801581a:	d20f      	bcs.n	801583c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801581c:	2200      	movs	r2, #0
 801581e:	2100      	movs	r1, #0
 8015820:	68f8      	ldr	r0, [r7, #12]
 8015822:	f001 f88e 	bl	8016942 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	2200      	movs	r2, #0
 801582a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801582e:	2300      	movs	r3, #0
 8015830:	2200      	movs	r2, #0
 8015832:	2100      	movs	r1, #0
 8015834:	68f8      	ldr	r0, [r7, #12]
 8015836:	f003 f900 	bl	8018a3a <USBD_LL_PrepareReceive>
 801583a:	e01c      	b.n	8015876 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015842:	b2db      	uxtb	r3, r3
 8015844:	2b03      	cmp	r3, #3
 8015846:	d10f      	bne.n	8015868 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801584e:	68db      	ldr	r3, [r3, #12]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d009      	beq.n	8015868 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	2200      	movs	r2, #0
 8015858:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015862:	68db      	ldr	r3, [r3, #12]
 8015864:	68f8      	ldr	r0, [r7, #12]
 8015866:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015868:	2180      	movs	r1, #128	; 0x80
 801586a:	68f8      	ldr	r0, [r7, #12]
 801586c:	f003 f83b 	bl	80188e6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015870:	68f8      	ldr	r0, [r7, #12]
 8015872:	f001 f89b 	bl	80169ac <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801587c:	2b00      	cmp	r3, #0
 801587e:	d03a      	beq.n	80158f6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015880:	68f8      	ldr	r0, [r7, #12]
 8015882:	f7ff fe42 	bl	801550a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	2200      	movs	r2, #0
 801588a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801588e:	e032      	b.n	80158f6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015890:	7afb      	ldrb	r3, [r7, #11]
 8015892:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015896:	b2db      	uxtb	r3, r3
 8015898:	4619      	mov	r1, r3
 801589a:	68f8      	ldr	r0, [r7, #12]
 801589c:	f000 f97f 	bl	8015b9e <USBD_CoreFindEP>
 80158a0:	4603      	mov	r3, r0
 80158a2:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80158a4:	7dfb      	ldrb	r3, [r7, #23]
 80158a6:	2bff      	cmp	r3, #255	; 0xff
 80158a8:	d025      	beq.n	80158f6 <USBD_LL_DataInStage+0x15a>
 80158aa:	7dfb      	ldrb	r3, [r7, #23]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d122      	bne.n	80158f6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158b6:	b2db      	uxtb	r3, r3
 80158b8:	2b03      	cmp	r3, #3
 80158ba:	d11c      	bne.n	80158f6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80158bc:	7dfa      	ldrb	r2, [r7, #23]
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	32ae      	adds	r2, #174	; 0xae
 80158c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158c6:	695b      	ldr	r3, [r3, #20]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d014      	beq.n	80158f6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80158cc:	7dfa      	ldrb	r2, [r7, #23]
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80158d4:	7dfa      	ldrb	r2, [r7, #23]
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	32ae      	adds	r2, #174	; 0xae
 80158da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158de:	695b      	ldr	r3, [r3, #20]
 80158e0:	7afa      	ldrb	r2, [r7, #11]
 80158e2:	4611      	mov	r1, r2
 80158e4:	68f8      	ldr	r0, [r7, #12]
 80158e6:	4798      	blx	r3
 80158e8:	4603      	mov	r3, r0
 80158ea:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80158ec:	7dbb      	ldrb	r3, [r7, #22]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d001      	beq.n	80158f6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80158f2:	7dbb      	ldrb	r3, [r7, #22]
 80158f4:	e000      	b.n	80158f8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80158f6:	2300      	movs	r3, #0
}
 80158f8:	4618      	mov	r0, r3
 80158fa:	3718      	adds	r7, #24
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}

08015900 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b084      	sub	sp, #16
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015908:	2300      	movs	r3, #0
 801590a:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	2201      	movs	r2, #1
 8015910:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	2200      	movs	r2, #0
 8015918:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	2200      	movs	r2, #0
 8015920:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	2200      	movs	r2, #0
 8015926:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	2200      	movs	r2, #0
 801592e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015938:	2b00      	cmp	r3, #0
 801593a:	d014      	beq.n	8015966 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015942:	685b      	ldr	r3, [r3, #4]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d00e      	beq.n	8015966 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801594e:	685b      	ldr	r3, [r3, #4]
 8015950:	687a      	ldr	r2, [r7, #4]
 8015952:	6852      	ldr	r2, [r2, #4]
 8015954:	b2d2      	uxtb	r2, r2
 8015956:	4611      	mov	r1, r2
 8015958:	6878      	ldr	r0, [r7, #4]
 801595a:	4798      	blx	r3
 801595c:	4603      	mov	r3, r0
 801595e:	2b00      	cmp	r3, #0
 8015960:	d001      	beq.n	8015966 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015962:	2303      	movs	r3, #3
 8015964:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015966:	2340      	movs	r3, #64	; 0x40
 8015968:	2200      	movs	r2, #0
 801596a:	2100      	movs	r1, #0
 801596c:	6878      	ldr	r0, [r7, #4]
 801596e:	f002 ff56 	bl	801881e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	2201      	movs	r2, #1
 8015976:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	2240      	movs	r2, #64	; 0x40
 801597e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015982:	2340      	movs	r3, #64	; 0x40
 8015984:	2200      	movs	r2, #0
 8015986:	2180      	movs	r1, #128	; 0x80
 8015988:	6878      	ldr	r0, [r7, #4]
 801598a:	f002 ff48 	bl	801881e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	2201      	movs	r2, #1
 8015992:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	2240      	movs	r2, #64	; 0x40
 8015998:	621a      	str	r2, [r3, #32]

  return ret;
 801599a:	7bfb      	ldrb	r3, [r7, #15]
}
 801599c:	4618      	mov	r0, r3
 801599e:	3710      	adds	r7, #16
 80159a0:	46bd      	mov	sp, r7
 80159a2:	bd80      	pop	{r7, pc}

080159a4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80159a4:	b480      	push	{r7}
 80159a6:	b083      	sub	sp, #12
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	6078      	str	r0, [r7, #4]
 80159ac:	460b      	mov	r3, r1
 80159ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	78fa      	ldrb	r2, [r7, #3]
 80159b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80159b6:	2300      	movs	r3, #0
}
 80159b8:	4618      	mov	r0, r3
 80159ba:	370c      	adds	r7, #12
 80159bc:	46bd      	mov	sp, r7
 80159be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c2:	4770      	bx	lr

080159c4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80159c4:	b480      	push	{r7}
 80159c6:	b083      	sub	sp, #12
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159d2:	b2da      	uxtb	r2, r3
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	2204      	movs	r2, #4
 80159de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80159e2:	2300      	movs	r3, #0
}
 80159e4:	4618      	mov	r0, r3
 80159e6:	370c      	adds	r7, #12
 80159e8:	46bd      	mov	sp, r7
 80159ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ee:	4770      	bx	lr

080159f0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80159f0:	b480      	push	{r7}
 80159f2:	b083      	sub	sp, #12
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159fe:	b2db      	uxtb	r3, r3
 8015a00:	2b04      	cmp	r3, #4
 8015a02:	d106      	bne.n	8015a12 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015a0a:	b2da      	uxtb	r2, r3
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015a12:	2300      	movs	r3, #0
}
 8015a14:	4618      	mov	r0, r3
 8015a16:	370c      	adds	r7, #12
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1e:	4770      	bx	lr

08015a20 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b082      	sub	sp, #8
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a2e:	b2db      	uxtb	r3, r3
 8015a30:	2b03      	cmp	r3, #3
 8015a32:	d110      	bne.n	8015a56 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d00b      	beq.n	8015a56 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a44:	69db      	ldr	r3, [r3, #28]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d005      	beq.n	8015a56 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a50:	69db      	ldr	r3, [r3, #28]
 8015a52:	6878      	ldr	r0, [r7, #4]
 8015a54:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015a56:	2300      	movs	r3, #0
}
 8015a58:	4618      	mov	r0, r3
 8015a5a:	3708      	adds	r7, #8
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	bd80      	pop	{r7, pc}

08015a60 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b082      	sub	sp, #8
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	6078      	str	r0, [r7, #4]
 8015a68:	460b      	mov	r3, r1
 8015a6a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	32ae      	adds	r2, #174	; 0xae
 8015a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d101      	bne.n	8015a82 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015a7e:	2303      	movs	r3, #3
 8015a80:	e01c      	b.n	8015abc <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a88:	b2db      	uxtb	r3, r3
 8015a8a:	2b03      	cmp	r3, #3
 8015a8c:	d115      	bne.n	8015aba <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	32ae      	adds	r2, #174	; 0xae
 8015a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a9c:	6a1b      	ldr	r3, [r3, #32]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d00b      	beq.n	8015aba <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	32ae      	adds	r2, #174	; 0xae
 8015aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ab0:	6a1b      	ldr	r3, [r3, #32]
 8015ab2:	78fa      	ldrb	r2, [r7, #3]
 8015ab4:	4611      	mov	r1, r2
 8015ab6:	6878      	ldr	r0, [r7, #4]
 8015ab8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015aba:	2300      	movs	r3, #0
}
 8015abc:	4618      	mov	r0, r3
 8015abe:	3708      	adds	r7, #8
 8015ac0:	46bd      	mov	sp, r7
 8015ac2:	bd80      	pop	{r7, pc}

08015ac4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b082      	sub	sp, #8
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	6078      	str	r0, [r7, #4]
 8015acc:	460b      	mov	r3, r1
 8015ace:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	32ae      	adds	r2, #174	; 0xae
 8015ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d101      	bne.n	8015ae6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015ae2:	2303      	movs	r3, #3
 8015ae4:	e01c      	b.n	8015b20 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015aec:	b2db      	uxtb	r3, r3
 8015aee:	2b03      	cmp	r3, #3
 8015af0:	d115      	bne.n	8015b1e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	32ae      	adds	r2, #174	; 0xae
 8015afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d00b      	beq.n	8015b1e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	32ae      	adds	r2, #174	; 0xae
 8015b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b16:	78fa      	ldrb	r2, [r7, #3]
 8015b18:	4611      	mov	r1, r2
 8015b1a:	6878      	ldr	r0, [r7, #4]
 8015b1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015b1e:	2300      	movs	r3, #0
}
 8015b20:	4618      	mov	r0, r3
 8015b22:	3708      	adds	r7, #8
 8015b24:	46bd      	mov	sp, r7
 8015b26:	bd80      	pop	{r7, pc}

08015b28 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015b28:	b480      	push	{r7}
 8015b2a:	b083      	sub	sp, #12
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015b30:	2300      	movs	r3, #0
}
 8015b32:	4618      	mov	r0, r3
 8015b34:	370c      	adds	r7, #12
 8015b36:	46bd      	mov	sp, r7
 8015b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b3c:	4770      	bx	lr

08015b3e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015b3e:	b580      	push	{r7, lr}
 8015b40:	b084      	sub	sp, #16
 8015b42:	af00      	add	r7, sp, #0
 8015b44:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015b46:	2300      	movs	r3, #0
 8015b48:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	2201      	movs	r2, #1
 8015b4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d00e      	beq.n	8015b7a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b62:	685b      	ldr	r3, [r3, #4]
 8015b64:	687a      	ldr	r2, [r7, #4]
 8015b66:	6852      	ldr	r2, [r2, #4]
 8015b68:	b2d2      	uxtb	r2, r2
 8015b6a:	4611      	mov	r1, r2
 8015b6c:	6878      	ldr	r0, [r7, #4]
 8015b6e:	4798      	blx	r3
 8015b70:	4603      	mov	r3, r0
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d001      	beq.n	8015b7a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015b76:	2303      	movs	r3, #3
 8015b78:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	3710      	adds	r7, #16
 8015b80:	46bd      	mov	sp, r7
 8015b82:	bd80      	pop	{r7, pc}

08015b84 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015b84:	b480      	push	{r7}
 8015b86:	b083      	sub	sp, #12
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	6078      	str	r0, [r7, #4]
 8015b8c:	460b      	mov	r3, r1
 8015b8e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015b90:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015b92:	4618      	mov	r0, r3
 8015b94:	370c      	adds	r7, #12
 8015b96:	46bd      	mov	sp, r7
 8015b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b9c:	4770      	bx	lr

08015b9e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015b9e:	b480      	push	{r7}
 8015ba0:	b083      	sub	sp, #12
 8015ba2:	af00      	add	r7, sp, #0
 8015ba4:	6078      	str	r0, [r7, #4]
 8015ba6:	460b      	mov	r3, r1
 8015ba8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015baa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015bac:	4618      	mov	r0, r3
 8015bae:	370c      	adds	r7, #12
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb6:	4770      	bx	lr

08015bb8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b086      	sub	sp, #24
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	6078      	str	r0, [r7, #4]
 8015bc0:	460b      	mov	r3, r1
 8015bc2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015bcc:	2300      	movs	r3, #0
 8015bce:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	885b      	ldrh	r3, [r3, #2]
 8015bd4:	b29a      	uxth	r2, r3
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	781b      	ldrb	r3, [r3, #0]
 8015bda:	b29b      	uxth	r3, r3
 8015bdc:	429a      	cmp	r2, r3
 8015bde:	d920      	bls.n	8015c22 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	781b      	ldrb	r3, [r3, #0]
 8015be4:	b29b      	uxth	r3, r3
 8015be6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015be8:	e013      	b.n	8015c12 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015bea:	f107 030a 	add.w	r3, r7, #10
 8015bee:	4619      	mov	r1, r3
 8015bf0:	6978      	ldr	r0, [r7, #20]
 8015bf2:	f000 f81b 	bl	8015c2c <USBD_GetNextDesc>
 8015bf6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015bf8:	697b      	ldr	r3, [r7, #20]
 8015bfa:	785b      	ldrb	r3, [r3, #1]
 8015bfc:	2b05      	cmp	r3, #5
 8015bfe:	d108      	bne.n	8015c12 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015c00:	697b      	ldr	r3, [r7, #20]
 8015c02:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015c04:	693b      	ldr	r3, [r7, #16]
 8015c06:	789b      	ldrb	r3, [r3, #2]
 8015c08:	78fa      	ldrb	r2, [r7, #3]
 8015c0a:	429a      	cmp	r2, r3
 8015c0c:	d008      	beq.n	8015c20 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015c0e:	2300      	movs	r3, #0
 8015c10:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	885b      	ldrh	r3, [r3, #2]
 8015c16:	b29a      	uxth	r2, r3
 8015c18:	897b      	ldrh	r3, [r7, #10]
 8015c1a:	429a      	cmp	r2, r3
 8015c1c:	d8e5      	bhi.n	8015bea <USBD_GetEpDesc+0x32>
 8015c1e:	e000      	b.n	8015c22 <USBD_GetEpDesc+0x6a>
          break;
 8015c20:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015c22:	693b      	ldr	r3, [r7, #16]
}
 8015c24:	4618      	mov	r0, r3
 8015c26:	3718      	adds	r7, #24
 8015c28:	46bd      	mov	sp, r7
 8015c2a:	bd80      	pop	{r7, pc}

08015c2c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015c2c:	b480      	push	{r7}
 8015c2e:	b085      	sub	sp, #20
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	6078      	str	r0, [r7, #4]
 8015c34:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015c3a:	683b      	ldr	r3, [r7, #0]
 8015c3c:	881a      	ldrh	r2, [r3, #0]
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	781b      	ldrb	r3, [r3, #0]
 8015c42:	b29b      	uxth	r3, r3
 8015c44:	4413      	add	r3, r2
 8015c46:	b29a      	uxth	r2, r3
 8015c48:	683b      	ldr	r3, [r7, #0]
 8015c4a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	781b      	ldrb	r3, [r3, #0]
 8015c50:	461a      	mov	r2, r3
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	4413      	add	r3, r2
 8015c56:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015c58:	68fb      	ldr	r3, [r7, #12]
}
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	3714      	adds	r7, #20
 8015c5e:	46bd      	mov	sp, r7
 8015c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c64:	4770      	bx	lr

08015c66 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015c66:	b480      	push	{r7}
 8015c68:	b087      	sub	sp, #28
 8015c6a:	af00      	add	r7, sp, #0
 8015c6c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015c72:	697b      	ldr	r3, [r7, #20]
 8015c74:	781b      	ldrb	r3, [r3, #0]
 8015c76:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015c78:	697b      	ldr	r3, [r7, #20]
 8015c7a:	3301      	adds	r3, #1
 8015c7c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015c7e:	697b      	ldr	r3, [r7, #20]
 8015c80:	781b      	ldrb	r3, [r3, #0]
 8015c82:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015c84:	8a3b      	ldrh	r3, [r7, #16]
 8015c86:	021b      	lsls	r3, r3, #8
 8015c88:	b21a      	sxth	r2, r3
 8015c8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015c8e:	4313      	orrs	r3, r2
 8015c90:	b21b      	sxth	r3, r3
 8015c92:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015c94:	89fb      	ldrh	r3, [r7, #14]
}
 8015c96:	4618      	mov	r0, r3
 8015c98:	371c      	adds	r7, #28
 8015c9a:	46bd      	mov	sp, r7
 8015c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca0:	4770      	bx	lr
	...

08015ca4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b084      	sub	sp, #16
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	6078      	str	r0, [r7, #4]
 8015cac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015cae:	2300      	movs	r3, #0
 8015cb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015cb2:	683b      	ldr	r3, [r7, #0]
 8015cb4:	781b      	ldrb	r3, [r3, #0]
 8015cb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015cba:	2b40      	cmp	r3, #64	; 0x40
 8015cbc:	d005      	beq.n	8015cca <USBD_StdDevReq+0x26>
 8015cbe:	2b40      	cmp	r3, #64	; 0x40
 8015cc0:	d857      	bhi.n	8015d72 <USBD_StdDevReq+0xce>
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d00f      	beq.n	8015ce6 <USBD_StdDevReq+0x42>
 8015cc6:	2b20      	cmp	r3, #32
 8015cc8:	d153      	bne.n	8015d72 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	32ae      	adds	r2, #174	; 0xae
 8015cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cd8:	689b      	ldr	r3, [r3, #8]
 8015cda:	6839      	ldr	r1, [r7, #0]
 8015cdc:	6878      	ldr	r0, [r7, #4]
 8015cde:	4798      	blx	r3
 8015ce0:	4603      	mov	r3, r0
 8015ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8015ce4:	e04a      	b.n	8015d7c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015ce6:	683b      	ldr	r3, [r7, #0]
 8015ce8:	785b      	ldrb	r3, [r3, #1]
 8015cea:	2b09      	cmp	r3, #9
 8015cec:	d83b      	bhi.n	8015d66 <USBD_StdDevReq+0xc2>
 8015cee:	a201      	add	r2, pc, #4	; (adr r2, 8015cf4 <USBD_StdDevReq+0x50>)
 8015cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cf4:	08015d49 	.word	0x08015d49
 8015cf8:	08015d5d 	.word	0x08015d5d
 8015cfc:	08015d67 	.word	0x08015d67
 8015d00:	08015d53 	.word	0x08015d53
 8015d04:	08015d67 	.word	0x08015d67
 8015d08:	08015d27 	.word	0x08015d27
 8015d0c:	08015d1d 	.word	0x08015d1d
 8015d10:	08015d67 	.word	0x08015d67
 8015d14:	08015d3f 	.word	0x08015d3f
 8015d18:	08015d31 	.word	0x08015d31
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015d1c:	6839      	ldr	r1, [r7, #0]
 8015d1e:	6878      	ldr	r0, [r7, #4]
 8015d20:	f000 fa3c 	bl	801619c <USBD_GetDescriptor>
          break;
 8015d24:	e024      	b.n	8015d70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015d26:	6839      	ldr	r1, [r7, #0]
 8015d28:	6878      	ldr	r0, [r7, #4]
 8015d2a:	f000 fba1 	bl	8016470 <USBD_SetAddress>
          break;
 8015d2e:	e01f      	b.n	8015d70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015d30:	6839      	ldr	r1, [r7, #0]
 8015d32:	6878      	ldr	r0, [r7, #4]
 8015d34:	f000 fbe0 	bl	80164f8 <USBD_SetConfig>
 8015d38:	4603      	mov	r3, r0
 8015d3a:	73fb      	strb	r3, [r7, #15]
          break;
 8015d3c:	e018      	b.n	8015d70 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015d3e:	6839      	ldr	r1, [r7, #0]
 8015d40:	6878      	ldr	r0, [r7, #4]
 8015d42:	f000 fc83 	bl	801664c <USBD_GetConfig>
          break;
 8015d46:	e013      	b.n	8015d70 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015d48:	6839      	ldr	r1, [r7, #0]
 8015d4a:	6878      	ldr	r0, [r7, #4]
 8015d4c:	f000 fcb4 	bl	80166b8 <USBD_GetStatus>
          break;
 8015d50:	e00e      	b.n	8015d70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015d52:	6839      	ldr	r1, [r7, #0]
 8015d54:	6878      	ldr	r0, [r7, #4]
 8015d56:	f000 fce3 	bl	8016720 <USBD_SetFeature>
          break;
 8015d5a:	e009      	b.n	8015d70 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015d5c:	6839      	ldr	r1, [r7, #0]
 8015d5e:	6878      	ldr	r0, [r7, #4]
 8015d60:	f000 fd07 	bl	8016772 <USBD_ClrFeature>
          break;
 8015d64:	e004      	b.n	8015d70 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015d66:	6839      	ldr	r1, [r7, #0]
 8015d68:	6878      	ldr	r0, [r7, #4]
 8015d6a:	f000 fd5e 	bl	801682a <USBD_CtlError>
          break;
 8015d6e:	bf00      	nop
      }
      break;
 8015d70:	e004      	b.n	8015d7c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015d72:	6839      	ldr	r1, [r7, #0]
 8015d74:	6878      	ldr	r0, [r7, #4]
 8015d76:	f000 fd58 	bl	801682a <USBD_CtlError>
      break;
 8015d7a:	bf00      	nop
  }

  return ret;
 8015d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	3710      	adds	r7, #16
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}
 8015d86:	bf00      	nop

08015d88 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b084      	sub	sp, #16
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
 8015d90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015d92:	2300      	movs	r3, #0
 8015d94:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015d96:	683b      	ldr	r3, [r7, #0]
 8015d98:	781b      	ldrb	r3, [r3, #0]
 8015d9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015d9e:	2b40      	cmp	r3, #64	; 0x40
 8015da0:	d005      	beq.n	8015dae <USBD_StdItfReq+0x26>
 8015da2:	2b40      	cmp	r3, #64	; 0x40
 8015da4:	d852      	bhi.n	8015e4c <USBD_StdItfReq+0xc4>
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d001      	beq.n	8015dae <USBD_StdItfReq+0x26>
 8015daa:	2b20      	cmp	r3, #32
 8015dac:	d14e      	bne.n	8015e4c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015db4:	b2db      	uxtb	r3, r3
 8015db6:	3b01      	subs	r3, #1
 8015db8:	2b02      	cmp	r3, #2
 8015dba:	d840      	bhi.n	8015e3e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015dbc:	683b      	ldr	r3, [r7, #0]
 8015dbe:	889b      	ldrh	r3, [r3, #4]
 8015dc0:	b2db      	uxtb	r3, r3
 8015dc2:	2b01      	cmp	r3, #1
 8015dc4:	d836      	bhi.n	8015e34 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015dc6:	683b      	ldr	r3, [r7, #0]
 8015dc8:	889b      	ldrh	r3, [r3, #4]
 8015dca:	b2db      	uxtb	r3, r3
 8015dcc:	4619      	mov	r1, r3
 8015dce:	6878      	ldr	r0, [r7, #4]
 8015dd0:	f7ff fed8 	bl	8015b84 <USBD_CoreFindIF>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015dd8:	7bbb      	ldrb	r3, [r7, #14]
 8015dda:	2bff      	cmp	r3, #255	; 0xff
 8015ddc:	d01d      	beq.n	8015e1a <USBD_StdItfReq+0x92>
 8015dde:	7bbb      	ldrb	r3, [r7, #14]
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d11a      	bne.n	8015e1a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015de4:	7bba      	ldrb	r2, [r7, #14]
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	32ae      	adds	r2, #174	; 0xae
 8015dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015dee:	689b      	ldr	r3, [r3, #8]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d00f      	beq.n	8015e14 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015df4:	7bba      	ldrb	r2, [r7, #14]
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015dfc:	7bba      	ldrb	r2, [r7, #14]
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	32ae      	adds	r2, #174	; 0xae
 8015e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e06:	689b      	ldr	r3, [r3, #8]
 8015e08:	6839      	ldr	r1, [r7, #0]
 8015e0a:	6878      	ldr	r0, [r7, #4]
 8015e0c:	4798      	blx	r3
 8015e0e:	4603      	mov	r3, r0
 8015e10:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015e12:	e004      	b.n	8015e1e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015e14:	2303      	movs	r3, #3
 8015e16:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015e18:	e001      	b.n	8015e1e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015e1a:	2303      	movs	r3, #3
 8015e1c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015e1e:	683b      	ldr	r3, [r7, #0]
 8015e20:	88db      	ldrh	r3, [r3, #6]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d110      	bne.n	8015e48 <USBD_StdItfReq+0xc0>
 8015e26:	7bfb      	ldrb	r3, [r7, #15]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d10d      	bne.n	8015e48 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015e2c:	6878      	ldr	r0, [r7, #4]
 8015e2e:	f000 fdaa 	bl	8016986 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015e32:	e009      	b.n	8015e48 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015e34:	6839      	ldr	r1, [r7, #0]
 8015e36:	6878      	ldr	r0, [r7, #4]
 8015e38:	f000 fcf7 	bl	801682a <USBD_CtlError>
          break;
 8015e3c:	e004      	b.n	8015e48 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015e3e:	6839      	ldr	r1, [r7, #0]
 8015e40:	6878      	ldr	r0, [r7, #4]
 8015e42:	f000 fcf2 	bl	801682a <USBD_CtlError>
          break;
 8015e46:	e000      	b.n	8015e4a <USBD_StdItfReq+0xc2>
          break;
 8015e48:	bf00      	nop
      }
      break;
 8015e4a:	e004      	b.n	8015e56 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015e4c:	6839      	ldr	r1, [r7, #0]
 8015e4e:	6878      	ldr	r0, [r7, #4]
 8015e50:	f000 fceb 	bl	801682a <USBD_CtlError>
      break;
 8015e54:	bf00      	nop
  }

  return ret;
 8015e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e58:	4618      	mov	r0, r3
 8015e5a:	3710      	adds	r7, #16
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	bd80      	pop	{r7, pc}

08015e60 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e60:	b580      	push	{r7, lr}
 8015e62:	b084      	sub	sp, #16
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	6078      	str	r0, [r7, #4]
 8015e68:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015e6e:	683b      	ldr	r3, [r7, #0]
 8015e70:	889b      	ldrh	r3, [r3, #4]
 8015e72:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015e74:	683b      	ldr	r3, [r7, #0]
 8015e76:	781b      	ldrb	r3, [r3, #0]
 8015e78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015e7c:	2b40      	cmp	r3, #64	; 0x40
 8015e7e:	d007      	beq.n	8015e90 <USBD_StdEPReq+0x30>
 8015e80:	2b40      	cmp	r3, #64	; 0x40
 8015e82:	f200 817f 	bhi.w	8016184 <USBD_StdEPReq+0x324>
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d02a      	beq.n	8015ee0 <USBD_StdEPReq+0x80>
 8015e8a:	2b20      	cmp	r3, #32
 8015e8c:	f040 817a 	bne.w	8016184 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015e90:	7bbb      	ldrb	r3, [r7, #14]
 8015e92:	4619      	mov	r1, r3
 8015e94:	6878      	ldr	r0, [r7, #4]
 8015e96:	f7ff fe82 	bl	8015b9e <USBD_CoreFindEP>
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015e9e:	7b7b      	ldrb	r3, [r7, #13]
 8015ea0:	2bff      	cmp	r3, #255	; 0xff
 8015ea2:	f000 8174 	beq.w	801618e <USBD_StdEPReq+0x32e>
 8015ea6:	7b7b      	ldrb	r3, [r7, #13]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	f040 8170 	bne.w	801618e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015eae:	7b7a      	ldrb	r2, [r7, #13]
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015eb6:	7b7a      	ldrb	r2, [r7, #13]
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	32ae      	adds	r2, #174	; 0xae
 8015ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ec0:	689b      	ldr	r3, [r3, #8]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	f000 8163 	beq.w	801618e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015ec8:	7b7a      	ldrb	r2, [r7, #13]
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	32ae      	adds	r2, #174	; 0xae
 8015ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ed2:	689b      	ldr	r3, [r3, #8]
 8015ed4:	6839      	ldr	r1, [r7, #0]
 8015ed6:	6878      	ldr	r0, [r7, #4]
 8015ed8:	4798      	blx	r3
 8015eda:	4603      	mov	r3, r0
 8015edc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015ede:	e156      	b.n	801618e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015ee0:	683b      	ldr	r3, [r7, #0]
 8015ee2:	785b      	ldrb	r3, [r3, #1]
 8015ee4:	2b03      	cmp	r3, #3
 8015ee6:	d008      	beq.n	8015efa <USBD_StdEPReq+0x9a>
 8015ee8:	2b03      	cmp	r3, #3
 8015eea:	f300 8145 	bgt.w	8016178 <USBD_StdEPReq+0x318>
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	f000 809b 	beq.w	801602a <USBD_StdEPReq+0x1ca>
 8015ef4:	2b01      	cmp	r3, #1
 8015ef6:	d03c      	beq.n	8015f72 <USBD_StdEPReq+0x112>
 8015ef8:	e13e      	b.n	8016178 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f00:	b2db      	uxtb	r3, r3
 8015f02:	2b02      	cmp	r3, #2
 8015f04:	d002      	beq.n	8015f0c <USBD_StdEPReq+0xac>
 8015f06:	2b03      	cmp	r3, #3
 8015f08:	d016      	beq.n	8015f38 <USBD_StdEPReq+0xd8>
 8015f0a:	e02c      	b.n	8015f66 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015f0c:	7bbb      	ldrb	r3, [r7, #14]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d00d      	beq.n	8015f2e <USBD_StdEPReq+0xce>
 8015f12:	7bbb      	ldrb	r3, [r7, #14]
 8015f14:	2b80      	cmp	r3, #128	; 0x80
 8015f16:	d00a      	beq.n	8015f2e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015f18:	7bbb      	ldrb	r3, [r7, #14]
 8015f1a:	4619      	mov	r1, r3
 8015f1c:	6878      	ldr	r0, [r7, #4]
 8015f1e:	f002 fce2 	bl	80188e6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015f22:	2180      	movs	r1, #128	; 0x80
 8015f24:	6878      	ldr	r0, [r7, #4]
 8015f26:	f002 fcde 	bl	80188e6 <USBD_LL_StallEP>
 8015f2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015f2c:	e020      	b.n	8015f70 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015f2e:	6839      	ldr	r1, [r7, #0]
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f000 fc7a 	bl	801682a <USBD_CtlError>
              break;
 8015f36:	e01b      	b.n	8015f70 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015f38:	683b      	ldr	r3, [r7, #0]
 8015f3a:	885b      	ldrh	r3, [r3, #2]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d10e      	bne.n	8015f5e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015f40:	7bbb      	ldrb	r3, [r7, #14]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d00b      	beq.n	8015f5e <USBD_StdEPReq+0xfe>
 8015f46:	7bbb      	ldrb	r3, [r7, #14]
 8015f48:	2b80      	cmp	r3, #128	; 0x80
 8015f4a:	d008      	beq.n	8015f5e <USBD_StdEPReq+0xfe>
 8015f4c:	683b      	ldr	r3, [r7, #0]
 8015f4e:	88db      	ldrh	r3, [r3, #6]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d104      	bne.n	8015f5e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015f54:	7bbb      	ldrb	r3, [r7, #14]
 8015f56:	4619      	mov	r1, r3
 8015f58:	6878      	ldr	r0, [r7, #4]
 8015f5a:	f002 fcc4 	bl	80188e6 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015f5e:	6878      	ldr	r0, [r7, #4]
 8015f60:	f000 fd11 	bl	8016986 <USBD_CtlSendStatus>

              break;
 8015f64:	e004      	b.n	8015f70 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015f66:	6839      	ldr	r1, [r7, #0]
 8015f68:	6878      	ldr	r0, [r7, #4]
 8015f6a:	f000 fc5e 	bl	801682a <USBD_CtlError>
              break;
 8015f6e:	bf00      	nop
          }
          break;
 8015f70:	e107      	b.n	8016182 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f78:	b2db      	uxtb	r3, r3
 8015f7a:	2b02      	cmp	r3, #2
 8015f7c:	d002      	beq.n	8015f84 <USBD_StdEPReq+0x124>
 8015f7e:	2b03      	cmp	r3, #3
 8015f80:	d016      	beq.n	8015fb0 <USBD_StdEPReq+0x150>
 8015f82:	e04b      	b.n	801601c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015f84:	7bbb      	ldrb	r3, [r7, #14]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d00d      	beq.n	8015fa6 <USBD_StdEPReq+0x146>
 8015f8a:	7bbb      	ldrb	r3, [r7, #14]
 8015f8c:	2b80      	cmp	r3, #128	; 0x80
 8015f8e:	d00a      	beq.n	8015fa6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015f90:	7bbb      	ldrb	r3, [r7, #14]
 8015f92:	4619      	mov	r1, r3
 8015f94:	6878      	ldr	r0, [r7, #4]
 8015f96:	f002 fca6 	bl	80188e6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015f9a:	2180      	movs	r1, #128	; 0x80
 8015f9c:	6878      	ldr	r0, [r7, #4]
 8015f9e:	f002 fca2 	bl	80188e6 <USBD_LL_StallEP>
 8015fa2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015fa4:	e040      	b.n	8016028 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015fa6:	6839      	ldr	r1, [r7, #0]
 8015fa8:	6878      	ldr	r0, [r7, #4]
 8015faa:	f000 fc3e 	bl	801682a <USBD_CtlError>
              break;
 8015fae:	e03b      	b.n	8016028 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015fb0:	683b      	ldr	r3, [r7, #0]
 8015fb2:	885b      	ldrh	r3, [r3, #2]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d136      	bne.n	8016026 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015fb8:	7bbb      	ldrb	r3, [r7, #14]
 8015fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d004      	beq.n	8015fcc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015fc2:	7bbb      	ldrb	r3, [r7, #14]
 8015fc4:	4619      	mov	r1, r3
 8015fc6:	6878      	ldr	r0, [r7, #4]
 8015fc8:	f002 fcac 	bl	8018924 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015fcc:	6878      	ldr	r0, [r7, #4]
 8015fce:	f000 fcda 	bl	8016986 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015fd2:	7bbb      	ldrb	r3, [r7, #14]
 8015fd4:	4619      	mov	r1, r3
 8015fd6:	6878      	ldr	r0, [r7, #4]
 8015fd8:	f7ff fde1 	bl	8015b9e <USBD_CoreFindEP>
 8015fdc:	4603      	mov	r3, r0
 8015fde:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015fe0:	7b7b      	ldrb	r3, [r7, #13]
 8015fe2:	2bff      	cmp	r3, #255	; 0xff
 8015fe4:	d01f      	beq.n	8016026 <USBD_StdEPReq+0x1c6>
 8015fe6:	7b7b      	ldrb	r3, [r7, #13]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d11c      	bne.n	8016026 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015fec:	7b7a      	ldrb	r2, [r7, #13]
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015ff4:	7b7a      	ldrb	r2, [r7, #13]
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	32ae      	adds	r2, #174	; 0xae
 8015ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ffe:	689b      	ldr	r3, [r3, #8]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d010      	beq.n	8016026 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016004:	7b7a      	ldrb	r2, [r7, #13]
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	32ae      	adds	r2, #174	; 0xae
 801600a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801600e:	689b      	ldr	r3, [r3, #8]
 8016010:	6839      	ldr	r1, [r7, #0]
 8016012:	6878      	ldr	r0, [r7, #4]
 8016014:	4798      	blx	r3
 8016016:	4603      	mov	r3, r0
 8016018:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801601a:	e004      	b.n	8016026 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801601c:	6839      	ldr	r1, [r7, #0]
 801601e:	6878      	ldr	r0, [r7, #4]
 8016020:	f000 fc03 	bl	801682a <USBD_CtlError>
              break;
 8016024:	e000      	b.n	8016028 <USBD_StdEPReq+0x1c8>
              break;
 8016026:	bf00      	nop
          }
          break;
 8016028:	e0ab      	b.n	8016182 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016030:	b2db      	uxtb	r3, r3
 8016032:	2b02      	cmp	r3, #2
 8016034:	d002      	beq.n	801603c <USBD_StdEPReq+0x1dc>
 8016036:	2b03      	cmp	r3, #3
 8016038:	d032      	beq.n	80160a0 <USBD_StdEPReq+0x240>
 801603a:	e097      	b.n	801616c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801603c:	7bbb      	ldrb	r3, [r7, #14]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d007      	beq.n	8016052 <USBD_StdEPReq+0x1f2>
 8016042:	7bbb      	ldrb	r3, [r7, #14]
 8016044:	2b80      	cmp	r3, #128	; 0x80
 8016046:	d004      	beq.n	8016052 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016048:	6839      	ldr	r1, [r7, #0]
 801604a:	6878      	ldr	r0, [r7, #4]
 801604c:	f000 fbed 	bl	801682a <USBD_CtlError>
                break;
 8016050:	e091      	b.n	8016176 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016052:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016056:	2b00      	cmp	r3, #0
 8016058:	da0b      	bge.n	8016072 <USBD_StdEPReq+0x212>
 801605a:	7bbb      	ldrb	r3, [r7, #14]
 801605c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016060:	4613      	mov	r3, r2
 8016062:	009b      	lsls	r3, r3, #2
 8016064:	4413      	add	r3, r2
 8016066:	009b      	lsls	r3, r3, #2
 8016068:	3310      	adds	r3, #16
 801606a:	687a      	ldr	r2, [r7, #4]
 801606c:	4413      	add	r3, r2
 801606e:	3304      	adds	r3, #4
 8016070:	e00b      	b.n	801608a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016072:	7bbb      	ldrb	r3, [r7, #14]
 8016074:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016078:	4613      	mov	r3, r2
 801607a:	009b      	lsls	r3, r3, #2
 801607c:	4413      	add	r3, r2
 801607e:	009b      	lsls	r3, r3, #2
 8016080:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016084:	687a      	ldr	r2, [r7, #4]
 8016086:	4413      	add	r3, r2
 8016088:	3304      	adds	r3, #4
 801608a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801608c:	68bb      	ldr	r3, [r7, #8]
 801608e:	2200      	movs	r2, #0
 8016090:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016092:	68bb      	ldr	r3, [r7, #8]
 8016094:	2202      	movs	r2, #2
 8016096:	4619      	mov	r1, r3
 8016098:	6878      	ldr	r0, [r7, #4]
 801609a:	f000 fc37 	bl	801690c <USBD_CtlSendData>
              break;
 801609e:	e06a      	b.n	8016176 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80160a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	da11      	bge.n	80160cc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80160a8:	7bbb      	ldrb	r3, [r7, #14]
 80160aa:	f003 020f 	and.w	r2, r3, #15
 80160ae:	6879      	ldr	r1, [r7, #4]
 80160b0:	4613      	mov	r3, r2
 80160b2:	009b      	lsls	r3, r3, #2
 80160b4:	4413      	add	r3, r2
 80160b6:	009b      	lsls	r3, r3, #2
 80160b8:	440b      	add	r3, r1
 80160ba:	3324      	adds	r3, #36	; 0x24
 80160bc:	881b      	ldrh	r3, [r3, #0]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d117      	bne.n	80160f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80160c2:	6839      	ldr	r1, [r7, #0]
 80160c4:	6878      	ldr	r0, [r7, #4]
 80160c6:	f000 fbb0 	bl	801682a <USBD_CtlError>
                  break;
 80160ca:	e054      	b.n	8016176 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80160cc:	7bbb      	ldrb	r3, [r7, #14]
 80160ce:	f003 020f 	and.w	r2, r3, #15
 80160d2:	6879      	ldr	r1, [r7, #4]
 80160d4:	4613      	mov	r3, r2
 80160d6:	009b      	lsls	r3, r3, #2
 80160d8:	4413      	add	r3, r2
 80160da:	009b      	lsls	r3, r3, #2
 80160dc:	440b      	add	r3, r1
 80160de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80160e2:	881b      	ldrh	r3, [r3, #0]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d104      	bne.n	80160f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80160e8:	6839      	ldr	r1, [r7, #0]
 80160ea:	6878      	ldr	r0, [r7, #4]
 80160ec:	f000 fb9d 	bl	801682a <USBD_CtlError>
                  break;
 80160f0:	e041      	b.n	8016176 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80160f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	da0b      	bge.n	8016112 <USBD_StdEPReq+0x2b2>
 80160fa:	7bbb      	ldrb	r3, [r7, #14]
 80160fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016100:	4613      	mov	r3, r2
 8016102:	009b      	lsls	r3, r3, #2
 8016104:	4413      	add	r3, r2
 8016106:	009b      	lsls	r3, r3, #2
 8016108:	3310      	adds	r3, #16
 801610a:	687a      	ldr	r2, [r7, #4]
 801610c:	4413      	add	r3, r2
 801610e:	3304      	adds	r3, #4
 8016110:	e00b      	b.n	801612a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016112:	7bbb      	ldrb	r3, [r7, #14]
 8016114:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016118:	4613      	mov	r3, r2
 801611a:	009b      	lsls	r3, r3, #2
 801611c:	4413      	add	r3, r2
 801611e:	009b      	lsls	r3, r3, #2
 8016120:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016124:	687a      	ldr	r2, [r7, #4]
 8016126:	4413      	add	r3, r2
 8016128:	3304      	adds	r3, #4
 801612a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801612c:	7bbb      	ldrb	r3, [r7, #14]
 801612e:	2b00      	cmp	r3, #0
 8016130:	d002      	beq.n	8016138 <USBD_StdEPReq+0x2d8>
 8016132:	7bbb      	ldrb	r3, [r7, #14]
 8016134:	2b80      	cmp	r3, #128	; 0x80
 8016136:	d103      	bne.n	8016140 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016138:	68bb      	ldr	r3, [r7, #8]
 801613a:	2200      	movs	r2, #0
 801613c:	601a      	str	r2, [r3, #0]
 801613e:	e00e      	b.n	801615e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016140:	7bbb      	ldrb	r3, [r7, #14]
 8016142:	4619      	mov	r1, r3
 8016144:	6878      	ldr	r0, [r7, #4]
 8016146:	f002 fc0c 	bl	8018962 <USBD_LL_IsStallEP>
 801614a:	4603      	mov	r3, r0
 801614c:	2b00      	cmp	r3, #0
 801614e:	d003      	beq.n	8016158 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016150:	68bb      	ldr	r3, [r7, #8]
 8016152:	2201      	movs	r2, #1
 8016154:	601a      	str	r2, [r3, #0]
 8016156:	e002      	b.n	801615e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016158:	68bb      	ldr	r3, [r7, #8]
 801615a:	2200      	movs	r2, #0
 801615c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801615e:	68bb      	ldr	r3, [r7, #8]
 8016160:	2202      	movs	r2, #2
 8016162:	4619      	mov	r1, r3
 8016164:	6878      	ldr	r0, [r7, #4]
 8016166:	f000 fbd1 	bl	801690c <USBD_CtlSendData>
              break;
 801616a:	e004      	b.n	8016176 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801616c:	6839      	ldr	r1, [r7, #0]
 801616e:	6878      	ldr	r0, [r7, #4]
 8016170:	f000 fb5b 	bl	801682a <USBD_CtlError>
              break;
 8016174:	bf00      	nop
          }
          break;
 8016176:	e004      	b.n	8016182 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016178:	6839      	ldr	r1, [r7, #0]
 801617a:	6878      	ldr	r0, [r7, #4]
 801617c:	f000 fb55 	bl	801682a <USBD_CtlError>
          break;
 8016180:	bf00      	nop
      }
      break;
 8016182:	e005      	b.n	8016190 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016184:	6839      	ldr	r1, [r7, #0]
 8016186:	6878      	ldr	r0, [r7, #4]
 8016188:	f000 fb4f 	bl	801682a <USBD_CtlError>
      break;
 801618c:	e000      	b.n	8016190 <USBD_StdEPReq+0x330>
      break;
 801618e:	bf00      	nop
  }

  return ret;
 8016190:	7bfb      	ldrb	r3, [r7, #15]
}
 8016192:	4618      	mov	r0, r3
 8016194:	3710      	adds	r7, #16
 8016196:	46bd      	mov	sp, r7
 8016198:	bd80      	pop	{r7, pc}
	...

0801619c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b084      	sub	sp, #16
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
 80161a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80161a6:	2300      	movs	r3, #0
 80161a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80161aa:	2300      	movs	r3, #0
 80161ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80161ae:	2300      	movs	r3, #0
 80161b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80161b2:	683b      	ldr	r3, [r7, #0]
 80161b4:	885b      	ldrh	r3, [r3, #2]
 80161b6:	0a1b      	lsrs	r3, r3, #8
 80161b8:	b29b      	uxth	r3, r3
 80161ba:	3b01      	subs	r3, #1
 80161bc:	2b06      	cmp	r3, #6
 80161be:	f200 8128 	bhi.w	8016412 <USBD_GetDescriptor+0x276>
 80161c2:	a201      	add	r2, pc, #4	; (adr r2, 80161c8 <USBD_GetDescriptor+0x2c>)
 80161c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161c8:	080161e5 	.word	0x080161e5
 80161cc:	080161fd 	.word	0x080161fd
 80161d0:	0801623d 	.word	0x0801623d
 80161d4:	08016413 	.word	0x08016413
 80161d8:	08016413 	.word	0x08016413
 80161dc:	080163b3 	.word	0x080163b3
 80161e0:	080163df 	.word	0x080163df
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	687a      	ldr	r2, [r7, #4]
 80161ee:	7c12      	ldrb	r2, [r2, #16]
 80161f0:	f107 0108 	add.w	r1, r7, #8
 80161f4:	4610      	mov	r0, r2
 80161f6:	4798      	blx	r3
 80161f8:	60f8      	str	r0, [r7, #12]
      break;
 80161fa:	e112      	b.n	8016422 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	7c1b      	ldrb	r3, [r3, #16]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d10d      	bne.n	8016220 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801620c:	f107 0208 	add.w	r2, r7, #8
 8016210:	4610      	mov	r0, r2
 8016212:	4798      	blx	r3
 8016214:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	3301      	adds	r3, #1
 801621a:	2202      	movs	r2, #2
 801621c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801621e:	e100      	b.n	8016422 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016228:	f107 0208 	add.w	r2, r7, #8
 801622c:	4610      	mov	r0, r2
 801622e:	4798      	blx	r3
 8016230:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	3301      	adds	r3, #1
 8016236:	2202      	movs	r2, #2
 8016238:	701a      	strb	r2, [r3, #0]
      break;
 801623a:	e0f2      	b.n	8016422 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801623c:	683b      	ldr	r3, [r7, #0]
 801623e:	885b      	ldrh	r3, [r3, #2]
 8016240:	b2db      	uxtb	r3, r3
 8016242:	2b05      	cmp	r3, #5
 8016244:	f200 80ac 	bhi.w	80163a0 <USBD_GetDescriptor+0x204>
 8016248:	a201      	add	r2, pc, #4	; (adr r2, 8016250 <USBD_GetDescriptor+0xb4>)
 801624a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801624e:	bf00      	nop
 8016250:	08016269 	.word	0x08016269
 8016254:	0801629d 	.word	0x0801629d
 8016258:	080162d1 	.word	0x080162d1
 801625c:	08016305 	.word	0x08016305
 8016260:	08016339 	.word	0x08016339
 8016264:	0801636d 	.word	0x0801636d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801626e:	685b      	ldr	r3, [r3, #4]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d00b      	beq.n	801628c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801627a:	685b      	ldr	r3, [r3, #4]
 801627c:	687a      	ldr	r2, [r7, #4]
 801627e:	7c12      	ldrb	r2, [r2, #16]
 8016280:	f107 0108 	add.w	r1, r7, #8
 8016284:	4610      	mov	r0, r2
 8016286:	4798      	blx	r3
 8016288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801628a:	e091      	b.n	80163b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801628c:	6839      	ldr	r1, [r7, #0]
 801628e:	6878      	ldr	r0, [r7, #4]
 8016290:	f000 facb 	bl	801682a <USBD_CtlError>
            err++;
 8016294:	7afb      	ldrb	r3, [r7, #11]
 8016296:	3301      	adds	r3, #1
 8016298:	72fb      	strb	r3, [r7, #11]
          break;
 801629a:	e089      	b.n	80163b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80162a2:	689b      	ldr	r3, [r3, #8]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d00b      	beq.n	80162c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80162ae:	689b      	ldr	r3, [r3, #8]
 80162b0:	687a      	ldr	r2, [r7, #4]
 80162b2:	7c12      	ldrb	r2, [r2, #16]
 80162b4:	f107 0108 	add.w	r1, r7, #8
 80162b8:	4610      	mov	r0, r2
 80162ba:	4798      	blx	r3
 80162bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80162be:	e077      	b.n	80163b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80162c0:	6839      	ldr	r1, [r7, #0]
 80162c2:	6878      	ldr	r0, [r7, #4]
 80162c4:	f000 fab1 	bl	801682a <USBD_CtlError>
            err++;
 80162c8:	7afb      	ldrb	r3, [r7, #11]
 80162ca:	3301      	adds	r3, #1
 80162cc:	72fb      	strb	r3, [r7, #11]
          break;
 80162ce:	e06f      	b.n	80163b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80162d6:	68db      	ldr	r3, [r3, #12]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d00b      	beq.n	80162f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80162e2:	68db      	ldr	r3, [r3, #12]
 80162e4:	687a      	ldr	r2, [r7, #4]
 80162e6:	7c12      	ldrb	r2, [r2, #16]
 80162e8:	f107 0108 	add.w	r1, r7, #8
 80162ec:	4610      	mov	r0, r2
 80162ee:	4798      	blx	r3
 80162f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80162f2:	e05d      	b.n	80163b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80162f4:	6839      	ldr	r1, [r7, #0]
 80162f6:	6878      	ldr	r0, [r7, #4]
 80162f8:	f000 fa97 	bl	801682a <USBD_CtlError>
            err++;
 80162fc:	7afb      	ldrb	r3, [r7, #11]
 80162fe:	3301      	adds	r3, #1
 8016300:	72fb      	strb	r3, [r7, #11]
          break;
 8016302:	e055      	b.n	80163b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801630a:	691b      	ldr	r3, [r3, #16]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d00b      	beq.n	8016328 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016316:	691b      	ldr	r3, [r3, #16]
 8016318:	687a      	ldr	r2, [r7, #4]
 801631a:	7c12      	ldrb	r2, [r2, #16]
 801631c:	f107 0108 	add.w	r1, r7, #8
 8016320:	4610      	mov	r0, r2
 8016322:	4798      	blx	r3
 8016324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016326:	e043      	b.n	80163b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016328:	6839      	ldr	r1, [r7, #0]
 801632a:	6878      	ldr	r0, [r7, #4]
 801632c:	f000 fa7d 	bl	801682a <USBD_CtlError>
            err++;
 8016330:	7afb      	ldrb	r3, [r7, #11]
 8016332:	3301      	adds	r3, #1
 8016334:	72fb      	strb	r3, [r7, #11]
          break;
 8016336:	e03b      	b.n	80163b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801633e:	695b      	ldr	r3, [r3, #20]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d00b      	beq.n	801635c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801634a:	695b      	ldr	r3, [r3, #20]
 801634c:	687a      	ldr	r2, [r7, #4]
 801634e:	7c12      	ldrb	r2, [r2, #16]
 8016350:	f107 0108 	add.w	r1, r7, #8
 8016354:	4610      	mov	r0, r2
 8016356:	4798      	blx	r3
 8016358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801635a:	e029      	b.n	80163b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801635c:	6839      	ldr	r1, [r7, #0]
 801635e:	6878      	ldr	r0, [r7, #4]
 8016360:	f000 fa63 	bl	801682a <USBD_CtlError>
            err++;
 8016364:	7afb      	ldrb	r3, [r7, #11]
 8016366:	3301      	adds	r3, #1
 8016368:	72fb      	strb	r3, [r7, #11]
          break;
 801636a:	e021      	b.n	80163b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016372:	699b      	ldr	r3, [r3, #24]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d00b      	beq.n	8016390 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801637e:	699b      	ldr	r3, [r3, #24]
 8016380:	687a      	ldr	r2, [r7, #4]
 8016382:	7c12      	ldrb	r2, [r2, #16]
 8016384:	f107 0108 	add.w	r1, r7, #8
 8016388:	4610      	mov	r0, r2
 801638a:	4798      	blx	r3
 801638c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801638e:	e00f      	b.n	80163b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016390:	6839      	ldr	r1, [r7, #0]
 8016392:	6878      	ldr	r0, [r7, #4]
 8016394:	f000 fa49 	bl	801682a <USBD_CtlError>
            err++;
 8016398:	7afb      	ldrb	r3, [r7, #11]
 801639a:	3301      	adds	r3, #1
 801639c:	72fb      	strb	r3, [r7, #11]
          break;
 801639e:	e007      	b.n	80163b0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80163a0:	6839      	ldr	r1, [r7, #0]
 80163a2:	6878      	ldr	r0, [r7, #4]
 80163a4:	f000 fa41 	bl	801682a <USBD_CtlError>
          err++;
 80163a8:	7afb      	ldrb	r3, [r7, #11]
 80163aa:	3301      	adds	r3, #1
 80163ac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80163ae:	bf00      	nop
      }
      break;
 80163b0:	e037      	b.n	8016422 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	7c1b      	ldrb	r3, [r3, #16]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d109      	bne.n	80163ce <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80163c2:	f107 0208 	add.w	r2, r7, #8
 80163c6:	4610      	mov	r0, r2
 80163c8:	4798      	blx	r3
 80163ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80163cc:	e029      	b.n	8016422 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80163ce:	6839      	ldr	r1, [r7, #0]
 80163d0:	6878      	ldr	r0, [r7, #4]
 80163d2:	f000 fa2a 	bl	801682a <USBD_CtlError>
        err++;
 80163d6:	7afb      	ldrb	r3, [r7, #11]
 80163d8:	3301      	adds	r3, #1
 80163da:	72fb      	strb	r3, [r7, #11]
      break;
 80163dc:	e021      	b.n	8016422 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	7c1b      	ldrb	r3, [r3, #16]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d10d      	bne.n	8016402 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163ee:	f107 0208 	add.w	r2, r7, #8
 80163f2:	4610      	mov	r0, r2
 80163f4:	4798      	blx	r3
 80163f6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	3301      	adds	r3, #1
 80163fc:	2207      	movs	r2, #7
 80163fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016400:	e00f      	b.n	8016422 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016402:	6839      	ldr	r1, [r7, #0]
 8016404:	6878      	ldr	r0, [r7, #4]
 8016406:	f000 fa10 	bl	801682a <USBD_CtlError>
        err++;
 801640a:	7afb      	ldrb	r3, [r7, #11]
 801640c:	3301      	adds	r3, #1
 801640e:	72fb      	strb	r3, [r7, #11]
      break;
 8016410:	e007      	b.n	8016422 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8016412:	6839      	ldr	r1, [r7, #0]
 8016414:	6878      	ldr	r0, [r7, #4]
 8016416:	f000 fa08 	bl	801682a <USBD_CtlError>
      err++;
 801641a:	7afb      	ldrb	r3, [r7, #11]
 801641c:	3301      	adds	r3, #1
 801641e:	72fb      	strb	r3, [r7, #11]
      break;
 8016420:	bf00      	nop
  }

  if (err != 0U)
 8016422:	7afb      	ldrb	r3, [r7, #11]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d11e      	bne.n	8016466 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8016428:	683b      	ldr	r3, [r7, #0]
 801642a:	88db      	ldrh	r3, [r3, #6]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d016      	beq.n	801645e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016430:	893b      	ldrh	r3, [r7, #8]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d00e      	beq.n	8016454 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8016436:	683b      	ldr	r3, [r7, #0]
 8016438:	88da      	ldrh	r2, [r3, #6]
 801643a:	893b      	ldrh	r3, [r7, #8]
 801643c:	4293      	cmp	r3, r2
 801643e:	bf28      	it	cs
 8016440:	4613      	movcs	r3, r2
 8016442:	b29b      	uxth	r3, r3
 8016444:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016446:	893b      	ldrh	r3, [r7, #8]
 8016448:	461a      	mov	r2, r3
 801644a:	68f9      	ldr	r1, [r7, #12]
 801644c:	6878      	ldr	r0, [r7, #4]
 801644e:	f000 fa5d 	bl	801690c <USBD_CtlSendData>
 8016452:	e009      	b.n	8016468 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016454:	6839      	ldr	r1, [r7, #0]
 8016456:	6878      	ldr	r0, [r7, #4]
 8016458:	f000 f9e7 	bl	801682a <USBD_CtlError>
 801645c:	e004      	b.n	8016468 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801645e:	6878      	ldr	r0, [r7, #4]
 8016460:	f000 fa91 	bl	8016986 <USBD_CtlSendStatus>
 8016464:	e000      	b.n	8016468 <USBD_GetDescriptor+0x2cc>
    return;
 8016466:	bf00      	nop
  }
}
 8016468:	3710      	adds	r7, #16
 801646a:	46bd      	mov	sp, r7
 801646c:	bd80      	pop	{r7, pc}
 801646e:	bf00      	nop

08016470 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b084      	sub	sp, #16
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
 8016478:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801647a:	683b      	ldr	r3, [r7, #0]
 801647c:	889b      	ldrh	r3, [r3, #4]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d131      	bne.n	80164e6 <USBD_SetAddress+0x76>
 8016482:	683b      	ldr	r3, [r7, #0]
 8016484:	88db      	ldrh	r3, [r3, #6]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d12d      	bne.n	80164e6 <USBD_SetAddress+0x76>
 801648a:	683b      	ldr	r3, [r7, #0]
 801648c:	885b      	ldrh	r3, [r3, #2]
 801648e:	2b7f      	cmp	r3, #127	; 0x7f
 8016490:	d829      	bhi.n	80164e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016492:	683b      	ldr	r3, [r7, #0]
 8016494:	885b      	ldrh	r3, [r3, #2]
 8016496:	b2db      	uxtb	r3, r3
 8016498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801649c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80164a4:	b2db      	uxtb	r3, r3
 80164a6:	2b03      	cmp	r3, #3
 80164a8:	d104      	bne.n	80164b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80164aa:	6839      	ldr	r1, [r7, #0]
 80164ac:	6878      	ldr	r0, [r7, #4]
 80164ae:	f000 f9bc 	bl	801682a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80164b2:	e01d      	b.n	80164f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	7bfa      	ldrb	r2, [r7, #15]
 80164b8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80164bc:	7bfb      	ldrb	r3, [r7, #15]
 80164be:	4619      	mov	r1, r3
 80164c0:	6878      	ldr	r0, [r7, #4]
 80164c2:	f002 fa7a 	bl	80189ba <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80164c6:	6878      	ldr	r0, [r7, #4]
 80164c8:	f000 fa5d 	bl	8016986 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80164cc:	7bfb      	ldrb	r3, [r7, #15]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d004      	beq.n	80164dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	2202      	movs	r2, #2
 80164d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80164da:	e009      	b.n	80164f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	2201      	movs	r2, #1
 80164e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80164e4:	e004      	b.n	80164f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80164e6:	6839      	ldr	r1, [r7, #0]
 80164e8:	6878      	ldr	r0, [r7, #4]
 80164ea:	f000 f99e 	bl	801682a <USBD_CtlError>
  }
}
 80164ee:	bf00      	nop
 80164f0:	bf00      	nop
 80164f2:	3710      	adds	r7, #16
 80164f4:	46bd      	mov	sp, r7
 80164f6:	bd80      	pop	{r7, pc}

080164f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80164f8:	b580      	push	{r7, lr}
 80164fa:	b084      	sub	sp, #16
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	6078      	str	r0, [r7, #4]
 8016500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016502:	2300      	movs	r3, #0
 8016504:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016506:	683b      	ldr	r3, [r7, #0]
 8016508:	885b      	ldrh	r3, [r3, #2]
 801650a:	b2da      	uxtb	r2, r3
 801650c:	4b4e      	ldr	r3, [pc, #312]	; (8016648 <USBD_SetConfig+0x150>)
 801650e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016510:	4b4d      	ldr	r3, [pc, #308]	; (8016648 <USBD_SetConfig+0x150>)
 8016512:	781b      	ldrb	r3, [r3, #0]
 8016514:	2b01      	cmp	r3, #1
 8016516:	d905      	bls.n	8016524 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016518:	6839      	ldr	r1, [r7, #0]
 801651a:	6878      	ldr	r0, [r7, #4]
 801651c:	f000 f985 	bl	801682a <USBD_CtlError>
    return USBD_FAIL;
 8016520:	2303      	movs	r3, #3
 8016522:	e08c      	b.n	801663e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801652a:	b2db      	uxtb	r3, r3
 801652c:	2b02      	cmp	r3, #2
 801652e:	d002      	beq.n	8016536 <USBD_SetConfig+0x3e>
 8016530:	2b03      	cmp	r3, #3
 8016532:	d029      	beq.n	8016588 <USBD_SetConfig+0x90>
 8016534:	e075      	b.n	8016622 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016536:	4b44      	ldr	r3, [pc, #272]	; (8016648 <USBD_SetConfig+0x150>)
 8016538:	781b      	ldrb	r3, [r3, #0]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d020      	beq.n	8016580 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801653e:	4b42      	ldr	r3, [pc, #264]	; (8016648 <USBD_SetConfig+0x150>)
 8016540:	781b      	ldrb	r3, [r3, #0]
 8016542:	461a      	mov	r2, r3
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016548:	4b3f      	ldr	r3, [pc, #252]	; (8016648 <USBD_SetConfig+0x150>)
 801654a:	781b      	ldrb	r3, [r3, #0]
 801654c:	4619      	mov	r1, r3
 801654e:	6878      	ldr	r0, [r7, #4]
 8016550:	f7fe ffe6 	bl	8015520 <USBD_SetClassConfig>
 8016554:	4603      	mov	r3, r0
 8016556:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016558:	7bfb      	ldrb	r3, [r7, #15]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d008      	beq.n	8016570 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801655e:	6839      	ldr	r1, [r7, #0]
 8016560:	6878      	ldr	r0, [r7, #4]
 8016562:	f000 f962 	bl	801682a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	2202      	movs	r2, #2
 801656a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801656e:	e065      	b.n	801663c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016570:	6878      	ldr	r0, [r7, #4]
 8016572:	f000 fa08 	bl	8016986 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	2203      	movs	r2, #3
 801657a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801657e:	e05d      	b.n	801663c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016580:	6878      	ldr	r0, [r7, #4]
 8016582:	f000 fa00 	bl	8016986 <USBD_CtlSendStatus>
      break;
 8016586:	e059      	b.n	801663c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016588:	4b2f      	ldr	r3, [pc, #188]	; (8016648 <USBD_SetConfig+0x150>)
 801658a:	781b      	ldrb	r3, [r3, #0]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d112      	bne.n	80165b6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	2202      	movs	r2, #2
 8016594:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016598:	4b2b      	ldr	r3, [pc, #172]	; (8016648 <USBD_SetConfig+0x150>)
 801659a:	781b      	ldrb	r3, [r3, #0]
 801659c:	461a      	mov	r2, r3
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80165a2:	4b29      	ldr	r3, [pc, #164]	; (8016648 <USBD_SetConfig+0x150>)
 80165a4:	781b      	ldrb	r3, [r3, #0]
 80165a6:	4619      	mov	r1, r3
 80165a8:	6878      	ldr	r0, [r7, #4]
 80165aa:	f7fe ffd5 	bl	8015558 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80165ae:	6878      	ldr	r0, [r7, #4]
 80165b0:	f000 f9e9 	bl	8016986 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80165b4:	e042      	b.n	801663c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80165b6:	4b24      	ldr	r3, [pc, #144]	; (8016648 <USBD_SetConfig+0x150>)
 80165b8:	781b      	ldrb	r3, [r3, #0]
 80165ba:	461a      	mov	r2, r3
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	685b      	ldr	r3, [r3, #4]
 80165c0:	429a      	cmp	r2, r3
 80165c2:	d02a      	beq.n	801661a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	685b      	ldr	r3, [r3, #4]
 80165c8:	b2db      	uxtb	r3, r3
 80165ca:	4619      	mov	r1, r3
 80165cc:	6878      	ldr	r0, [r7, #4]
 80165ce:	f7fe ffc3 	bl	8015558 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80165d2:	4b1d      	ldr	r3, [pc, #116]	; (8016648 <USBD_SetConfig+0x150>)
 80165d4:	781b      	ldrb	r3, [r3, #0]
 80165d6:	461a      	mov	r2, r3
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80165dc:	4b1a      	ldr	r3, [pc, #104]	; (8016648 <USBD_SetConfig+0x150>)
 80165de:	781b      	ldrb	r3, [r3, #0]
 80165e0:	4619      	mov	r1, r3
 80165e2:	6878      	ldr	r0, [r7, #4]
 80165e4:	f7fe ff9c 	bl	8015520 <USBD_SetClassConfig>
 80165e8:	4603      	mov	r3, r0
 80165ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80165ec:	7bfb      	ldrb	r3, [r7, #15]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d00f      	beq.n	8016612 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80165f2:	6839      	ldr	r1, [r7, #0]
 80165f4:	6878      	ldr	r0, [r7, #4]
 80165f6:	f000 f918 	bl	801682a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	685b      	ldr	r3, [r3, #4]
 80165fe:	b2db      	uxtb	r3, r3
 8016600:	4619      	mov	r1, r3
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f7fe ffa8 	bl	8015558 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	2202      	movs	r2, #2
 801660c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016610:	e014      	b.n	801663c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016612:	6878      	ldr	r0, [r7, #4]
 8016614:	f000 f9b7 	bl	8016986 <USBD_CtlSendStatus>
      break;
 8016618:	e010      	b.n	801663c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801661a:	6878      	ldr	r0, [r7, #4]
 801661c:	f000 f9b3 	bl	8016986 <USBD_CtlSendStatus>
      break;
 8016620:	e00c      	b.n	801663c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016622:	6839      	ldr	r1, [r7, #0]
 8016624:	6878      	ldr	r0, [r7, #4]
 8016626:	f000 f900 	bl	801682a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801662a:	4b07      	ldr	r3, [pc, #28]	; (8016648 <USBD_SetConfig+0x150>)
 801662c:	781b      	ldrb	r3, [r3, #0]
 801662e:	4619      	mov	r1, r3
 8016630:	6878      	ldr	r0, [r7, #4]
 8016632:	f7fe ff91 	bl	8015558 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016636:	2303      	movs	r3, #3
 8016638:	73fb      	strb	r3, [r7, #15]
      break;
 801663a:	bf00      	nop
  }

  return ret;
 801663c:	7bfb      	ldrb	r3, [r7, #15]
}
 801663e:	4618      	mov	r0, r3
 8016640:	3710      	adds	r7, #16
 8016642:	46bd      	mov	sp, r7
 8016644:	bd80      	pop	{r7, pc}
 8016646:	bf00      	nop
 8016648:	20000c1c 	.word	0x20000c1c

0801664c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801664c:	b580      	push	{r7, lr}
 801664e:	b082      	sub	sp, #8
 8016650:	af00      	add	r7, sp, #0
 8016652:	6078      	str	r0, [r7, #4]
 8016654:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016656:	683b      	ldr	r3, [r7, #0]
 8016658:	88db      	ldrh	r3, [r3, #6]
 801665a:	2b01      	cmp	r3, #1
 801665c:	d004      	beq.n	8016668 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801665e:	6839      	ldr	r1, [r7, #0]
 8016660:	6878      	ldr	r0, [r7, #4]
 8016662:	f000 f8e2 	bl	801682a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016666:	e023      	b.n	80166b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801666e:	b2db      	uxtb	r3, r3
 8016670:	2b02      	cmp	r3, #2
 8016672:	dc02      	bgt.n	801667a <USBD_GetConfig+0x2e>
 8016674:	2b00      	cmp	r3, #0
 8016676:	dc03      	bgt.n	8016680 <USBD_GetConfig+0x34>
 8016678:	e015      	b.n	80166a6 <USBD_GetConfig+0x5a>
 801667a:	2b03      	cmp	r3, #3
 801667c:	d00b      	beq.n	8016696 <USBD_GetConfig+0x4a>
 801667e:	e012      	b.n	80166a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	2200      	movs	r2, #0
 8016684:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	3308      	adds	r3, #8
 801668a:	2201      	movs	r2, #1
 801668c:	4619      	mov	r1, r3
 801668e:	6878      	ldr	r0, [r7, #4]
 8016690:	f000 f93c 	bl	801690c <USBD_CtlSendData>
        break;
 8016694:	e00c      	b.n	80166b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	3304      	adds	r3, #4
 801669a:	2201      	movs	r2, #1
 801669c:	4619      	mov	r1, r3
 801669e:	6878      	ldr	r0, [r7, #4]
 80166a0:	f000 f934 	bl	801690c <USBD_CtlSendData>
        break;
 80166a4:	e004      	b.n	80166b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80166a6:	6839      	ldr	r1, [r7, #0]
 80166a8:	6878      	ldr	r0, [r7, #4]
 80166aa:	f000 f8be 	bl	801682a <USBD_CtlError>
        break;
 80166ae:	bf00      	nop
}
 80166b0:	bf00      	nop
 80166b2:	3708      	adds	r7, #8
 80166b4:	46bd      	mov	sp, r7
 80166b6:	bd80      	pop	{r7, pc}

080166b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b082      	sub	sp, #8
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
 80166c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80166c8:	b2db      	uxtb	r3, r3
 80166ca:	3b01      	subs	r3, #1
 80166cc:	2b02      	cmp	r3, #2
 80166ce:	d81e      	bhi.n	801670e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80166d0:	683b      	ldr	r3, [r7, #0]
 80166d2:	88db      	ldrh	r3, [r3, #6]
 80166d4:	2b02      	cmp	r3, #2
 80166d6:	d004      	beq.n	80166e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80166d8:	6839      	ldr	r1, [r7, #0]
 80166da:	6878      	ldr	r0, [r7, #4]
 80166dc:	f000 f8a5 	bl	801682a <USBD_CtlError>
        break;
 80166e0:	e01a      	b.n	8016718 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	2201      	movs	r2, #1
 80166e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d005      	beq.n	80166fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	68db      	ldr	r3, [r3, #12]
 80166f6:	f043 0202 	orr.w	r2, r3, #2
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	330c      	adds	r3, #12
 8016702:	2202      	movs	r2, #2
 8016704:	4619      	mov	r1, r3
 8016706:	6878      	ldr	r0, [r7, #4]
 8016708:	f000 f900 	bl	801690c <USBD_CtlSendData>
      break;
 801670c:	e004      	b.n	8016718 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801670e:	6839      	ldr	r1, [r7, #0]
 8016710:	6878      	ldr	r0, [r7, #4]
 8016712:	f000 f88a 	bl	801682a <USBD_CtlError>
      break;
 8016716:	bf00      	nop
  }
}
 8016718:	bf00      	nop
 801671a:	3708      	adds	r7, #8
 801671c:	46bd      	mov	sp, r7
 801671e:	bd80      	pop	{r7, pc}

08016720 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016720:	b580      	push	{r7, lr}
 8016722:	b082      	sub	sp, #8
 8016724:	af00      	add	r7, sp, #0
 8016726:	6078      	str	r0, [r7, #4]
 8016728:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801672a:	683b      	ldr	r3, [r7, #0]
 801672c:	885b      	ldrh	r3, [r3, #2]
 801672e:	2b01      	cmp	r3, #1
 8016730:	d107      	bne.n	8016742 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	2201      	movs	r2, #1
 8016736:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801673a:	6878      	ldr	r0, [r7, #4]
 801673c:	f000 f923 	bl	8016986 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016740:	e013      	b.n	801676a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8016742:	683b      	ldr	r3, [r7, #0]
 8016744:	885b      	ldrh	r3, [r3, #2]
 8016746:	2b02      	cmp	r3, #2
 8016748:	d10b      	bne.n	8016762 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801674a:	683b      	ldr	r3, [r7, #0]
 801674c:	889b      	ldrh	r3, [r3, #4]
 801674e:	0a1b      	lsrs	r3, r3, #8
 8016750:	b29b      	uxth	r3, r3
 8016752:	b2da      	uxtb	r2, r3
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801675a:	6878      	ldr	r0, [r7, #4]
 801675c:	f000 f913 	bl	8016986 <USBD_CtlSendStatus>
}
 8016760:	e003      	b.n	801676a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8016762:	6839      	ldr	r1, [r7, #0]
 8016764:	6878      	ldr	r0, [r7, #4]
 8016766:	f000 f860 	bl	801682a <USBD_CtlError>
}
 801676a:	bf00      	nop
 801676c:	3708      	adds	r7, #8
 801676e:	46bd      	mov	sp, r7
 8016770:	bd80      	pop	{r7, pc}

08016772 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016772:	b580      	push	{r7, lr}
 8016774:	b082      	sub	sp, #8
 8016776:	af00      	add	r7, sp, #0
 8016778:	6078      	str	r0, [r7, #4]
 801677a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016782:	b2db      	uxtb	r3, r3
 8016784:	3b01      	subs	r3, #1
 8016786:	2b02      	cmp	r3, #2
 8016788:	d80b      	bhi.n	80167a2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801678a:	683b      	ldr	r3, [r7, #0]
 801678c:	885b      	ldrh	r3, [r3, #2]
 801678e:	2b01      	cmp	r3, #1
 8016790:	d10c      	bne.n	80167ac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	2200      	movs	r2, #0
 8016796:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801679a:	6878      	ldr	r0, [r7, #4]
 801679c:	f000 f8f3 	bl	8016986 <USBD_CtlSendStatus>
      }
      break;
 80167a0:	e004      	b.n	80167ac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80167a2:	6839      	ldr	r1, [r7, #0]
 80167a4:	6878      	ldr	r0, [r7, #4]
 80167a6:	f000 f840 	bl	801682a <USBD_CtlError>
      break;
 80167aa:	e000      	b.n	80167ae <USBD_ClrFeature+0x3c>
      break;
 80167ac:	bf00      	nop
  }
}
 80167ae:	bf00      	nop
 80167b0:	3708      	adds	r7, #8
 80167b2:	46bd      	mov	sp, r7
 80167b4:	bd80      	pop	{r7, pc}

080167b6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80167b6:	b580      	push	{r7, lr}
 80167b8:	b084      	sub	sp, #16
 80167ba:	af00      	add	r7, sp, #0
 80167bc:	6078      	str	r0, [r7, #4]
 80167be:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80167c0:	683b      	ldr	r3, [r7, #0]
 80167c2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	781a      	ldrb	r2, [r3, #0]
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	3301      	adds	r3, #1
 80167d0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	781a      	ldrb	r2, [r3, #0]
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	3301      	adds	r3, #1
 80167de:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80167e0:	68f8      	ldr	r0, [r7, #12]
 80167e2:	f7ff fa40 	bl	8015c66 <SWAPBYTE>
 80167e6:	4603      	mov	r3, r0
 80167e8:	461a      	mov	r2, r3
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	3301      	adds	r3, #1
 80167f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	3301      	adds	r3, #1
 80167f8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80167fa:	68f8      	ldr	r0, [r7, #12]
 80167fc:	f7ff fa33 	bl	8015c66 <SWAPBYTE>
 8016800:	4603      	mov	r3, r0
 8016802:	461a      	mov	r2, r3
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	3301      	adds	r3, #1
 801680c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	3301      	adds	r3, #1
 8016812:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016814:	68f8      	ldr	r0, [r7, #12]
 8016816:	f7ff fa26 	bl	8015c66 <SWAPBYTE>
 801681a:	4603      	mov	r3, r0
 801681c:	461a      	mov	r2, r3
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	80da      	strh	r2, [r3, #6]
}
 8016822:	bf00      	nop
 8016824:	3710      	adds	r7, #16
 8016826:	46bd      	mov	sp, r7
 8016828:	bd80      	pop	{r7, pc}

0801682a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801682a:	b580      	push	{r7, lr}
 801682c:	b082      	sub	sp, #8
 801682e:	af00      	add	r7, sp, #0
 8016830:	6078      	str	r0, [r7, #4]
 8016832:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016834:	2180      	movs	r1, #128	; 0x80
 8016836:	6878      	ldr	r0, [r7, #4]
 8016838:	f002 f855 	bl	80188e6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801683c:	2100      	movs	r1, #0
 801683e:	6878      	ldr	r0, [r7, #4]
 8016840:	f002 f851 	bl	80188e6 <USBD_LL_StallEP>
}
 8016844:	bf00      	nop
 8016846:	3708      	adds	r7, #8
 8016848:	46bd      	mov	sp, r7
 801684a:	bd80      	pop	{r7, pc}

0801684c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801684c:	b580      	push	{r7, lr}
 801684e:	b086      	sub	sp, #24
 8016850:	af00      	add	r7, sp, #0
 8016852:	60f8      	str	r0, [r7, #12]
 8016854:	60b9      	str	r1, [r7, #8]
 8016856:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016858:	2300      	movs	r3, #0
 801685a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d036      	beq.n	80168d0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016866:	6938      	ldr	r0, [r7, #16]
 8016868:	f000 f836 	bl	80168d8 <USBD_GetLen>
 801686c:	4603      	mov	r3, r0
 801686e:	3301      	adds	r3, #1
 8016870:	b29b      	uxth	r3, r3
 8016872:	005b      	lsls	r3, r3, #1
 8016874:	b29a      	uxth	r2, r3
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801687a:	7dfb      	ldrb	r3, [r7, #23]
 801687c:	68ba      	ldr	r2, [r7, #8]
 801687e:	4413      	add	r3, r2
 8016880:	687a      	ldr	r2, [r7, #4]
 8016882:	7812      	ldrb	r2, [r2, #0]
 8016884:	701a      	strb	r2, [r3, #0]
  idx++;
 8016886:	7dfb      	ldrb	r3, [r7, #23]
 8016888:	3301      	adds	r3, #1
 801688a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801688c:	7dfb      	ldrb	r3, [r7, #23]
 801688e:	68ba      	ldr	r2, [r7, #8]
 8016890:	4413      	add	r3, r2
 8016892:	2203      	movs	r2, #3
 8016894:	701a      	strb	r2, [r3, #0]
  idx++;
 8016896:	7dfb      	ldrb	r3, [r7, #23]
 8016898:	3301      	adds	r3, #1
 801689a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801689c:	e013      	b.n	80168c6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801689e:	7dfb      	ldrb	r3, [r7, #23]
 80168a0:	68ba      	ldr	r2, [r7, #8]
 80168a2:	4413      	add	r3, r2
 80168a4:	693a      	ldr	r2, [r7, #16]
 80168a6:	7812      	ldrb	r2, [r2, #0]
 80168a8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80168aa:	693b      	ldr	r3, [r7, #16]
 80168ac:	3301      	adds	r3, #1
 80168ae:	613b      	str	r3, [r7, #16]
    idx++;
 80168b0:	7dfb      	ldrb	r3, [r7, #23]
 80168b2:	3301      	adds	r3, #1
 80168b4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80168b6:	7dfb      	ldrb	r3, [r7, #23]
 80168b8:	68ba      	ldr	r2, [r7, #8]
 80168ba:	4413      	add	r3, r2
 80168bc:	2200      	movs	r2, #0
 80168be:	701a      	strb	r2, [r3, #0]
    idx++;
 80168c0:	7dfb      	ldrb	r3, [r7, #23]
 80168c2:	3301      	adds	r3, #1
 80168c4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80168c6:	693b      	ldr	r3, [r7, #16]
 80168c8:	781b      	ldrb	r3, [r3, #0]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d1e7      	bne.n	801689e <USBD_GetString+0x52>
 80168ce:	e000      	b.n	80168d2 <USBD_GetString+0x86>
    return;
 80168d0:	bf00      	nop
  }
}
 80168d2:	3718      	adds	r7, #24
 80168d4:	46bd      	mov	sp, r7
 80168d6:	bd80      	pop	{r7, pc}

080168d8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80168d8:	b480      	push	{r7}
 80168da:	b085      	sub	sp, #20
 80168dc:	af00      	add	r7, sp, #0
 80168de:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80168e0:	2300      	movs	r3, #0
 80168e2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80168e8:	e005      	b.n	80168f6 <USBD_GetLen+0x1e>
  {
    len++;
 80168ea:	7bfb      	ldrb	r3, [r7, #15]
 80168ec:	3301      	adds	r3, #1
 80168ee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80168f0:	68bb      	ldr	r3, [r7, #8]
 80168f2:	3301      	adds	r3, #1
 80168f4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80168f6:	68bb      	ldr	r3, [r7, #8]
 80168f8:	781b      	ldrb	r3, [r3, #0]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d1f5      	bne.n	80168ea <USBD_GetLen+0x12>
  }

  return len;
 80168fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8016900:	4618      	mov	r0, r3
 8016902:	3714      	adds	r7, #20
 8016904:	46bd      	mov	sp, r7
 8016906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690a:	4770      	bx	lr

0801690c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801690c:	b580      	push	{r7, lr}
 801690e:	b084      	sub	sp, #16
 8016910:	af00      	add	r7, sp, #0
 8016912:	60f8      	str	r0, [r7, #12]
 8016914:	60b9      	str	r1, [r7, #8]
 8016916:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	2202      	movs	r2, #2
 801691c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	687a      	ldr	r2, [r7, #4]
 8016924:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	687a      	ldr	r2, [r7, #4]
 801692a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	68ba      	ldr	r2, [r7, #8]
 8016930:	2100      	movs	r1, #0
 8016932:	68f8      	ldr	r0, [r7, #12]
 8016934:	f002 f860 	bl	80189f8 <USBD_LL_Transmit>

  return USBD_OK;
 8016938:	2300      	movs	r3, #0
}
 801693a:	4618      	mov	r0, r3
 801693c:	3710      	adds	r7, #16
 801693e:	46bd      	mov	sp, r7
 8016940:	bd80      	pop	{r7, pc}

08016942 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016942:	b580      	push	{r7, lr}
 8016944:	b084      	sub	sp, #16
 8016946:	af00      	add	r7, sp, #0
 8016948:	60f8      	str	r0, [r7, #12]
 801694a:	60b9      	str	r1, [r7, #8]
 801694c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	68ba      	ldr	r2, [r7, #8]
 8016952:	2100      	movs	r1, #0
 8016954:	68f8      	ldr	r0, [r7, #12]
 8016956:	f002 f84f 	bl	80189f8 <USBD_LL_Transmit>

  return USBD_OK;
 801695a:	2300      	movs	r3, #0
}
 801695c:	4618      	mov	r0, r3
 801695e:	3710      	adds	r7, #16
 8016960:	46bd      	mov	sp, r7
 8016962:	bd80      	pop	{r7, pc}

08016964 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016964:	b580      	push	{r7, lr}
 8016966:	b084      	sub	sp, #16
 8016968:	af00      	add	r7, sp, #0
 801696a:	60f8      	str	r0, [r7, #12]
 801696c:	60b9      	str	r1, [r7, #8]
 801696e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	68ba      	ldr	r2, [r7, #8]
 8016974:	2100      	movs	r1, #0
 8016976:	68f8      	ldr	r0, [r7, #12]
 8016978:	f002 f85f 	bl	8018a3a <USBD_LL_PrepareReceive>

  return USBD_OK;
 801697c:	2300      	movs	r3, #0
}
 801697e:	4618      	mov	r0, r3
 8016980:	3710      	adds	r7, #16
 8016982:	46bd      	mov	sp, r7
 8016984:	bd80      	pop	{r7, pc}

08016986 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016986:	b580      	push	{r7, lr}
 8016988:	b082      	sub	sp, #8
 801698a:	af00      	add	r7, sp, #0
 801698c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	2204      	movs	r2, #4
 8016992:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016996:	2300      	movs	r3, #0
 8016998:	2200      	movs	r2, #0
 801699a:	2100      	movs	r1, #0
 801699c:	6878      	ldr	r0, [r7, #4]
 801699e:	f002 f82b 	bl	80189f8 <USBD_LL_Transmit>

  return USBD_OK;
 80169a2:	2300      	movs	r3, #0
}
 80169a4:	4618      	mov	r0, r3
 80169a6:	3708      	adds	r7, #8
 80169a8:	46bd      	mov	sp, r7
 80169aa:	bd80      	pop	{r7, pc}

080169ac <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b082      	sub	sp, #8
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	2205      	movs	r2, #5
 80169b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80169bc:	2300      	movs	r3, #0
 80169be:	2200      	movs	r2, #0
 80169c0:	2100      	movs	r1, #0
 80169c2:	6878      	ldr	r0, [r7, #4]
 80169c4:	f002 f839 	bl	8018a3a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80169c8:	2300      	movs	r3, #0
}
 80169ca:	4618      	mov	r0, r3
 80169cc:	3708      	adds	r7, #8
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}

080169d2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80169d2:	b480      	push	{r7}
 80169d4:	b083      	sub	sp, #12
 80169d6:	af00      	add	r7, sp, #0
 80169d8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	f103 0208 	add.w	r2, r3, #8
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	f04f 32ff 	mov.w	r2, #4294967295
 80169ea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	f103 0208 	add.w	r2, r3, #8
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	f103 0208 	add.w	r2, r3, #8
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	2200      	movs	r2, #0
 8016a04:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016a06:	bf00      	nop
 8016a08:	370c      	adds	r7, #12
 8016a0a:	46bd      	mov	sp, r7
 8016a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a10:	4770      	bx	lr

08016a12 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016a12:	b480      	push	{r7}
 8016a14:	b083      	sub	sp, #12
 8016a16:	af00      	add	r7, sp, #0
 8016a18:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	2200      	movs	r2, #0
 8016a1e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016a20:	bf00      	nop
 8016a22:	370c      	adds	r7, #12
 8016a24:	46bd      	mov	sp, r7
 8016a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a2a:	4770      	bx	lr

08016a2c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016a2c:	b480      	push	{r7}
 8016a2e:	b085      	sub	sp, #20
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
 8016a34:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	685b      	ldr	r3, [r3, #4]
 8016a3a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016a3c:	683b      	ldr	r3, [r7, #0]
 8016a3e:	68fa      	ldr	r2, [r7, #12]
 8016a40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	689a      	ldr	r2, [r3, #8]
 8016a46:	683b      	ldr	r3, [r7, #0]
 8016a48:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	689b      	ldr	r3, [r3, #8]
 8016a4e:	683a      	ldr	r2, [r7, #0]
 8016a50:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	683a      	ldr	r2, [r7, #0]
 8016a56:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016a58:	683b      	ldr	r3, [r7, #0]
 8016a5a:	687a      	ldr	r2, [r7, #4]
 8016a5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	1c5a      	adds	r2, r3, #1
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	601a      	str	r2, [r3, #0]
}
 8016a68:	bf00      	nop
 8016a6a:	3714      	adds	r7, #20
 8016a6c:	46bd      	mov	sp, r7
 8016a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a72:	4770      	bx	lr

08016a74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016a74:	b480      	push	{r7}
 8016a76:	b085      	sub	sp, #20
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	6078      	str	r0, [r7, #4]
 8016a7c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016a7e:	683b      	ldr	r3, [r7, #0]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016a84:	68bb      	ldr	r3, [r7, #8]
 8016a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a8a:	d103      	bne.n	8016a94 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	691b      	ldr	r3, [r3, #16]
 8016a90:	60fb      	str	r3, [r7, #12]
 8016a92:	e00c      	b.n	8016aae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	3308      	adds	r3, #8
 8016a98:	60fb      	str	r3, [r7, #12]
 8016a9a:	e002      	b.n	8016aa2 <vListInsert+0x2e>
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	685b      	ldr	r3, [r3, #4]
 8016aa0:	60fb      	str	r3, [r7, #12]
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	685b      	ldr	r3, [r3, #4]
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	68ba      	ldr	r2, [r7, #8]
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	d2f6      	bcs.n	8016a9c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	685a      	ldr	r2, [r3, #4]
 8016ab2:	683b      	ldr	r3, [r7, #0]
 8016ab4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016ab6:	683b      	ldr	r3, [r7, #0]
 8016ab8:	685b      	ldr	r3, [r3, #4]
 8016aba:	683a      	ldr	r2, [r7, #0]
 8016abc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016abe:	683b      	ldr	r3, [r7, #0]
 8016ac0:	68fa      	ldr	r2, [r7, #12]
 8016ac2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	683a      	ldr	r2, [r7, #0]
 8016ac8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016aca:	683b      	ldr	r3, [r7, #0]
 8016acc:	687a      	ldr	r2, [r7, #4]
 8016ace:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	1c5a      	adds	r2, r3, #1
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	601a      	str	r2, [r3, #0]
}
 8016ada:	bf00      	nop
 8016adc:	3714      	adds	r7, #20
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae4:	4770      	bx	lr

08016ae6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016ae6:	b480      	push	{r7}
 8016ae8:	b085      	sub	sp, #20
 8016aea:	af00      	add	r7, sp, #0
 8016aec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	691b      	ldr	r3, [r3, #16]
 8016af2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	685b      	ldr	r3, [r3, #4]
 8016af8:	687a      	ldr	r2, [r7, #4]
 8016afa:	6892      	ldr	r2, [r2, #8]
 8016afc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	689b      	ldr	r3, [r3, #8]
 8016b02:	687a      	ldr	r2, [r7, #4]
 8016b04:	6852      	ldr	r2, [r2, #4]
 8016b06:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	685b      	ldr	r3, [r3, #4]
 8016b0c:	687a      	ldr	r2, [r7, #4]
 8016b0e:	429a      	cmp	r2, r3
 8016b10:	d103      	bne.n	8016b1a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	689a      	ldr	r2, [r3, #8]
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	2200      	movs	r2, #0
 8016b1e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	1e5a      	subs	r2, r3, #1
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	681b      	ldr	r3, [r3, #0]
}
 8016b2e:	4618      	mov	r0, r3
 8016b30:	3714      	adds	r7, #20
 8016b32:	46bd      	mov	sp, r7
 8016b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b38:	4770      	bx	lr

08016b3a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016b3a:	b580      	push	{r7, lr}
 8016b3c:	b08e      	sub	sp, #56	; 0x38
 8016b3e:	af04      	add	r7, sp, #16
 8016b40:	60f8      	str	r0, [r7, #12]
 8016b42:	60b9      	str	r1, [r7, #8]
 8016b44:	607a      	str	r2, [r7, #4]
 8016b46:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d10a      	bne.n	8016b64 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b52:	f383 8811 	msr	BASEPRI, r3
 8016b56:	f3bf 8f6f 	isb	sy
 8016b5a:	f3bf 8f4f 	dsb	sy
 8016b5e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016b60:	bf00      	nop
 8016b62:	e7fe      	b.n	8016b62 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d10a      	bne.n	8016b80 <xTaskCreateStatic+0x46>
	__asm volatile
 8016b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b6e:	f383 8811 	msr	BASEPRI, r3
 8016b72:	f3bf 8f6f 	isb	sy
 8016b76:	f3bf 8f4f 	dsb	sy
 8016b7a:	61fb      	str	r3, [r7, #28]
}
 8016b7c:	bf00      	nop
 8016b7e:	e7fe      	b.n	8016b7e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016b80:	2354      	movs	r3, #84	; 0x54
 8016b82:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016b84:	693b      	ldr	r3, [r7, #16]
 8016b86:	2b54      	cmp	r3, #84	; 0x54
 8016b88:	d00a      	beq.n	8016ba0 <xTaskCreateStatic+0x66>
	__asm volatile
 8016b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b8e:	f383 8811 	msr	BASEPRI, r3
 8016b92:	f3bf 8f6f 	isb	sy
 8016b96:	f3bf 8f4f 	dsb	sy
 8016b9a:	61bb      	str	r3, [r7, #24]
}
 8016b9c:	bf00      	nop
 8016b9e:	e7fe      	b.n	8016b9e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016ba0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d01e      	beq.n	8016be6 <xTaskCreateStatic+0xac>
 8016ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d01b      	beq.n	8016be6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bb0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016bb6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bba:	2202      	movs	r2, #2
 8016bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	9303      	str	r3, [sp, #12]
 8016bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bc6:	9302      	str	r3, [sp, #8]
 8016bc8:	f107 0314 	add.w	r3, r7, #20
 8016bcc:	9301      	str	r3, [sp, #4]
 8016bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bd0:	9300      	str	r3, [sp, #0]
 8016bd2:	683b      	ldr	r3, [r7, #0]
 8016bd4:	687a      	ldr	r2, [r7, #4]
 8016bd6:	68b9      	ldr	r1, [r7, #8]
 8016bd8:	68f8      	ldr	r0, [r7, #12]
 8016bda:	f000 f850 	bl	8016c7e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016bde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016be0:	f000 f8d4 	bl	8016d8c <prvAddNewTaskToReadyList>
 8016be4:	e001      	b.n	8016bea <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016be6:	2300      	movs	r3, #0
 8016be8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016bea:	697b      	ldr	r3, [r7, #20]
	}
 8016bec:	4618      	mov	r0, r3
 8016bee:	3728      	adds	r7, #40	; 0x28
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bd80      	pop	{r7, pc}

08016bf4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b08c      	sub	sp, #48	; 0x30
 8016bf8:	af04      	add	r7, sp, #16
 8016bfa:	60f8      	str	r0, [r7, #12]
 8016bfc:	60b9      	str	r1, [r7, #8]
 8016bfe:	603b      	str	r3, [r7, #0]
 8016c00:	4613      	mov	r3, r2
 8016c02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016c04:	88fb      	ldrh	r3, [r7, #6]
 8016c06:	009b      	lsls	r3, r3, #2
 8016c08:	4618      	mov	r0, r3
 8016c0a:	f001 f895 	bl	8017d38 <pvPortMalloc>
 8016c0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016c10:	697b      	ldr	r3, [r7, #20]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d00e      	beq.n	8016c34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016c16:	2054      	movs	r0, #84	; 0x54
 8016c18:	f001 f88e 	bl	8017d38 <pvPortMalloc>
 8016c1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016c1e:	69fb      	ldr	r3, [r7, #28]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d003      	beq.n	8016c2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016c24:	69fb      	ldr	r3, [r7, #28]
 8016c26:	697a      	ldr	r2, [r7, #20]
 8016c28:	631a      	str	r2, [r3, #48]	; 0x30
 8016c2a:	e005      	b.n	8016c38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016c2c:	6978      	ldr	r0, [r7, #20]
 8016c2e:	f001 f94f 	bl	8017ed0 <vPortFree>
 8016c32:	e001      	b.n	8016c38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016c34:	2300      	movs	r3, #0
 8016c36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016c38:	69fb      	ldr	r3, [r7, #28]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d017      	beq.n	8016c6e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016c3e:	69fb      	ldr	r3, [r7, #28]
 8016c40:	2200      	movs	r2, #0
 8016c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016c46:	88fa      	ldrh	r2, [r7, #6]
 8016c48:	2300      	movs	r3, #0
 8016c4a:	9303      	str	r3, [sp, #12]
 8016c4c:	69fb      	ldr	r3, [r7, #28]
 8016c4e:	9302      	str	r3, [sp, #8]
 8016c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c52:	9301      	str	r3, [sp, #4]
 8016c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c56:	9300      	str	r3, [sp, #0]
 8016c58:	683b      	ldr	r3, [r7, #0]
 8016c5a:	68b9      	ldr	r1, [r7, #8]
 8016c5c:	68f8      	ldr	r0, [r7, #12]
 8016c5e:	f000 f80e 	bl	8016c7e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016c62:	69f8      	ldr	r0, [r7, #28]
 8016c64:	f000 f892 	bl	8016d8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016c68:	2301      	movs	r3, #1
 8016c6a:	61bb      	str	r3, [r7, #24]
 8016c6c:	e002      	b.n	8016c74 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8016c72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016c74:	69bb      	ldr	r3, [r7, #24]
	}
 8016c76:	4618      	mov	r0, r3
 8016c78:	3720      	adds	r7, #32
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	bd80      	pop	{r7, pc}

08016c7e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016c7e:	b580      	push	{r7, lr}
 8016c80:	b088      	sub	sp, #32
 8016c82:	af00      	add	r7, sp, #0
 8016c84:	60f8      	str	r0, [r7, #12]
 8016c86:	60b9      	str	r1, [r7, #8]
 8016c88:	607a      	str	r2, [r7, #4]
 8016c8a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016c96:	3b01      	subs	r3, #1
 8016c98:	009b      	lsls	r3, r3, #2
 8016c9a:	4413      	add	r3, r2
 8016c9c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016c9e:	69bb      	ldr	r3, [r7, #24]
 8016ca0:	f023 0307 	bic.w	r3, r3, #7
 8016ca4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016ca6:	69bb      	ldr	r3, [r7, #24]
 8016ca8:	f003 0307 	and.w	r3, r3, #7
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d00a      	beq.n	8016cc6 <prvInitialiseNewTask+0x48>
	__asm volatile
 8016cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cb4:	f383 8811 	msr	BASEPRI, r3
 8016cb8:	f3bf 8f6f 	isb	sy
 8016cbc:	f3bf 8f4f 	dsb	sy
 8016cc0:	617b      	str	r3, [r7, #20]
}
 8016cc2:	bf00      	nop
 8016cc4:	e7fe      	b.n	8016cc4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016cc6:	68bb      	ldr	r3, [r7, #8]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d01f      	beq.n	8016d0c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016ccc:	2300      	movs	r3, #0
 8016cce:	61fb      	str	r3, [r7, #28]
 8016cd0:	e012      	b.n	8016cf8 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016cd2:	68ba      	ldr	r2, [r7, #8]
 8016cd4:	69fb      	ldr	r3, [r7, #28]
 8016cd6:	4413      	add	r3, r2
 8016cd8:	7819      	ldrb	r1, [r3, #0]
 8016cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016cdc:	69fb      	ldr	r3, [r7, #28]
 8016cde:	4413      	add	r3, r2
 8016ce0:	3334      	adds	r3, #52	; 0x34
 8016ce2:	460a      	mov	r2, r1
 8016ce4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016ce6:	68ba      	ldr	r2, [r7, #8]
 8016ce8:	69fb      	ldr	r3, [r7, #28]
 8016cea:	4413      	add	r3, r2
 8016cec:	781b      	ldrb	r3, [r3, #0]
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d006      	beq.n	8016d00 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016cf2:	69fb      	ldr	r3, [r7, #28]
 8016cf4:	3301      	adds	r3, #1
 8016cf6:	61fb      	str	r3, [r7, #28]
 8016cf8:	69fb      	ldr	r3, [r7, #28]
 8016cfa:	2b0f      	cmp	r3, #15
 8016cfc:	d9e9      	bls.n	8016cd2 <prvInitialiseNewTask+0x54>
 8016cfe:	e000      	b.n	8016d02 <prvInitialiseNewTask+0x84>
			{
				break;
 8016d00:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d04:	2200      	movs	r2, #0
 8016d06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016d0a:	e003      	b.n	8016d14 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d0e:	2200      	movs	r2, #0
 8016d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d16:	2b06      	cmp	r3, #6
 8016d18:	d901      	bls.n	8016d1e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016d1a:	2306      	movs	r3, #6
 8016d1c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d22:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d28:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8016d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d2c:	2200      	movs	r2, #0
 8016d2e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d32:	3304      	adds	r3, #4
 8016d34:	4618      	mov	r0, r3
 8016d36:	f7ff fe6c 	bl	8016a12 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d3c:	3318      	adds	r3, #24
 8016d3e:	4618      	mov	r0, r3
 8016d40:	f7ff fe67 	bl	8016a12 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d4c:	f1c3 0207 	rsb	r2, r3, #7
 8016d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d58:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d5c:	2200      	movs	r2, #0
 8016d5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d62:	2200      	movs	r2, #0
 8016d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016d68:	683a      	ldr	r2, [r7, #0]
 8016d6a:	68f9      	ldr	r1, [r7, #12]
 8016d6c:	69b8      	ldr	r0, [r7, #24]
 8016d6e:	f000 fd93 	bl	8017898 <pxPortInitialiseStack>
 8016d72:	4602      	mov	r2, r0
 8016d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d76:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d002      	beq.n	8016d84 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016d84:	bf00      	nop
 8016d86:	3720      	adds	r7, #32
 8016d88:	46bd      	mov	sp, r7
 8016d8a:	bd80      	pop	{r7, pc}

08016d8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b082      	sub	sp, #8
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016d94:	f000 feae 	bl	8017af4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016d98:	4b2a      	ldr	r3, [pc, #168]	; (8016e44 <prvAddNewTaskToReadyList+0xb8>)
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	3301      	adds	r3, #1
 8016d9e:	4a29      	ldr	r2, [pc, #164]	; (8016e44 <prvAddNewTaskToReadyList+0xb8>)
 8016da0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016da2:	4b29      	ldr	r3, [pc, #164]	; (8016e48 <prvAddNewTaskToReadyList+0xbc>)
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d109      	bne.n	8016dbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016daa:	4a27      	ldr	r2, [pc, #156]	; (8016e48 <prvAddNewTaskToReadyList+0xbc>)
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016db0:	4b24      	ldr	r3, [pc, #144]	; (8016e44 <prvAddNewTaskToReadyList+0xb8>)
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	2b01      	cmp	r3, #1
 8016db6:	d110      	bne.n	8016dda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016db8:	f000 fb16 	bl	80173e8 <prvInitialiseTaskLists>
 8016dbc:	e00d      	b.n	8016dda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016dbe:	4b23      	ldr	r3, [pc, #140]	; (8016e4c <prvAddNewTaskToReadyList+0xc0>)
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d109      	bne.n	8016dda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016dc6:	4b20      	ldr	r3, [pc, #128]	; (8016e48 <prvAddNewTaskToReadyList+0xbc>)
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dd0:	429a      	cmp	r2, r3
 8016dd2:	d802      	bhi.n	8016dda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016dd4:	4a1c      	ldr	r2, [pc, #112]	; (8016e48 <prvAddNewTaskToReadyList+0xbc>)
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016dda:	4b1d      	ldr	r3, [pc, #116]	; (8016e50 <prvAddNewTaskToReadyList+0xc4>)
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	3301      	adds	r3, #1
 8016de0:	4a1b      	ldr	r2, [pc, #108]	; (8016e50 <prvAddNewTaskToReadyList+0xc4>)
 8016de2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016de8:	2201      	movs	r2, #1
 8016dea:	409a      	lsls	r2, r3
 8016dec:	4b19      	ldr	r3, [pc, #100]	; (8016e54 <prvAddNewTaskToReadyList+0xc8>)
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	4313      	orrs	r3, r2
 8016df2:	4a18      	ldr	r2, [pc, #96]	; (8016e54 <prvAddNewTaskToReadyList+0xc8>)
 8016df4:	6013      	str	r3, [r2, #0]
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dfa:	4613      	mov	r3, r2
 8016dfc:	009b      	lsls	r3, r3, #2
 8016dfe:	4413      	add	r3, r2
 8016e00:	009b      	lsls	r3, r3, #2
 8016e02:	4a15      	ldr	r2, [pc, #84]	; (8016e58 <prvAddNewTaskToReadyList+0xcc>)
 8016e04:	441a      	add	r2, r3
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	3304      	adds	r3, #4
 8016e0a:	4619      	mov	r1, r3
 8016e0c:	4610      	mov	r0, r2
 8016e0e:	f7ff fe0d 	bl	8016a2c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016e12:	f000 fe9f 	bl	8017b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016e16:	4b0d      	ldr	r3, [pc, #52]	; (8016e4c <prvAddNewTaskToReadyList+0xc0>)
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d00e      	beq.n	8016e3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016e1e:	4b0a      	ldr	r3, [pc, #40]	; (8016e48 <prvAddNewTaskToReadyList+0xbc>)
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e28:	429a      	cmp	r2, r3
 8016e2a:	d207      	bcs.n	8016e3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016e2c:	4b0b      	ldr	r3, [pc, #44]	; (8016e5c <prvAddNewTaskToReadyList+0xd0>)
 8016e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e32:	601a      	str	r2, [r3, #0]
 8016e34:	f3bf 8f4f 	dsb	sy
 8016e38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016e3c:	bf00      	nop
 8016e3e:	3708      	adds	r7, #8
 8016e40:	46bd      	mov	sp, r7
 8016e42:	bd80      	pop	{r7, pc}
 8016e44:	20000d20 	.word	0x20000d20
 8016e48:	20000c20 	.word	0x20000c20
 8016e4c:	20000d2c 	.word	0x20000d2c
 8016e50:	20000d3c 	.word	0x20000d3c
 8016e54:	20000d28 	.word	0x20000d28
 8016e58:	20000c24 	.word	0x20000c24
 8016e5c:	e000ed04 	.word	0xe000ed04

08016e60 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8016e60:	b580      	push	{r7, lr}
 8016e62:	b08a      	sub	sp, #40	; 0x28
 8016e64:	af00      	add	r7, sp, #0
 8016e66:	6078      	str	r0, [r7, #4]
 8016e68:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d10a      	bne.n	8016e8a <vTaskDelayUntil+0x2a>
	__asm volatile
 8016e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e78:	f383 8811 	msr	BASEPRI, r3
 8016e7c:	f3bf 8f6f 	isb	sy
 8016e80:	f3bf 8f4f 	dsb	sy
 8016e84:	617b      	str	r3, [r7, #20]
}
 8016e86:	bf00      	nop
 8016e88:	e7fe      	b.n	8016e88 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8016e8a:	683b      	ldr	r3, [r7, #0]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d10a      	bne.n	8016ea6 <vTaskDelayUntil+0x46>
	__asm volatile
 8016e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e94:	f383 8811 	msr	BASEPRI, r3
 8016e98:	f3bf 8f6f 	isb	sy
 8016e9c:	f3bf 8f4f 	dsb	sy
 8016ea0:	613b      	str	r3, [r7, #16]
}
 8016ea2:	bf00      	nop
 8016ea4:	e7fe      	b.n	8016ea4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8016ea6:	4b2a      	ldr	r3, [pc, #168]	; (8016f50 <vTaskDelayUntil+0xf0>)
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d00a      	beq.n	8016ec4 <vTaskDelayUntil+0x64>
	__asm volatile
 8016eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eb2:	f383 8811 	msr	BASEPRI, r3
 8016eb6:	f3bf 8f6f 	isb	sy
 8016eba:	f3bf 8f4f 	dsb	sy
 8016ebe:	60fb      	str	r3, [r7, #12]
}
 8016ec0:	bf00      	nop
 8016ec2:	e7fe      	b.n	8016ec2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8016ec4:	f000 f8aa 	bl	801701c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8016ec8:	4b22      	ldr	r3, [pc, #136]	; (8016f54 <vTaskDelayUntil+0xf4>)
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	683a      	ldr	r2, [r7, #0]
 8016ed4:	4413      	add	r3, r2
 8016ed6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	6a3a      	ldr	r2, [r7, #32]
 8016ede:	429a      	cmp	r2, r3
 8016ee0:	d20b      	bcs.n	8016efa <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	69fa      	ldr	r2, [r7, #28]
 8016ee8:	429a      	cmp	r2, r3
 8016eea:	d211      	bcs.n	8016f10 <vTaskDelayUntil+0xb0>
 8016eec:	69fa      	ldr	r2, [r7, #28]
 8016eee:	6a3b      	ldr	r3, [r7, #32]
 8016ef0:	429a      	cmp	r2, r3
 8016ef2:	d90d      	bls.n	8016f10 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8016ef4:	2301      	movs	r3, #1
 8016ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8016ef8:	e00a      	b.n	8016f10 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	69fa      	ldr	r2, [r7, #28]
 8016f00:	429a      	cmp	r2, r3
 8016f02:	d303      	bcc.n	8016f0c <vTaskDelayUntil+0xac>
 8016f04:	69fa      	ldr	r2, [r7, #28]
 8016f06:	6a3b      	ldr	r3, [r7, #32]
 8016f08:	429a      	cmp	r2, r3
 8016f0a:	d901      	bls.n	8016f10 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8016f0c:	2301      	movs	r3, #1
 8016f0e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	69fa      	ldr	r2, [r7, #28]
 8016f14:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8016f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d006      	beq.n	8016f2a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8016f1c:	69fa      	ldr	r2, [r7, #28]
 8016f1e:	6a3b      	ldr	r3, [r7, #32]
 8016f20:	1ad3      	subs	r3, r2, r3
 8016f22:	2100      	movs	r1, #0
 8016f24:	4618      	mov	r0, r3
 8016f26:	f000 fc51 	bl	80177cc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8016f2a:	f000 f885 	bl	8017038 <xTaskResumeAll>
 8016f2e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016f30:	69bb      	ldr	r3, [r7, #24]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d107      	bne.n	8016f46 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8016f36:	4b08      	ldr	r3, [pc, #32]	; (8016f58 <vTaskDelayUntil+0xf8>)
 8016f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f3c:	601a      	str	r2, [r3, #0]
 8016f3e:	f3bf 8f4f 	dsb	sy
 8016f42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016f46:	bf00      	nop
 8016f48:	3728      	adds	r7, #40	; 0x28
 8016f4a:	46bd      	mov	sp, r7
 8016f4c:	bd80      	pop	{r7, pc}
 8016f4e:	bf00      	nop
 8016f50:	20000d48 	.word	0x20000d48
 8016f54:	20000d24 	.word	0x20000d24
 8016f58:	e000ed04 	.word	0xe000ed04

08016f5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b08a      	sub	sp, #40	; 0x28
 8016f60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016f62:	2300      	movs	r3, #0
 8016f64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016f66:	2300      	movs	r3, #0
 8016f68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016f6a:	463a      	mov	r2, r7
 8016f6c:	1d39      	adds	r1, r7, #4
 8016f6e:	f107 0308 	add.w	r3, r7, #8
 8016f72:	4618      	mov	r0, r3
 8016f74:	f7ea fe06 	bl	8001b84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016f78:	6839      	ldr	r1, [r7, #0]
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	68ba      	ldr	r2, [r7, #8]
 8016f7e:	9202      	str	r2, [sp, #8]
 8016f80:	9301      	str	r3, [sp, #4]
 8016f82:	2300      	movs	r3, #0
 8016f84:	9300      	str	r3, [sp, #0]
 8016f86:	2300      	movs	r3, #0
 8016f88:	460a      	mov	r2, r1
 8016f8a:	491e      	ldr	r1, [pc, #120]	; (8017004 <vTaskStartScheduler+0xa8>)
 8016f8c:	481e      	ldr	r0, [pc, #120]	; (8017008 <vTaskStartScheduler+0xac>)
 8016f8e:	f7ff fdd4 	bl	8016b3a <xTaskCreateStatic>
 8016f92:	4603      	mov	r3, r0
 8016f94:	4a1d      	ldr	r2, [pc, #116]	; (801700c <vTaskStartScheduler+0xb0>)
 8016f96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016f98:	4b1c      	ldr	r3, [pc, #112]	; (801700c <vTaskStartScheduler+0xb0>)
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d002      	beq.n	8016fa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016fa0:	2301      	movs	r3, #1
 8016fa2:	617b      	str	r3, [r7, #20]
 8016fa4:	e001      	b.n	8016faa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016faa:	697b      	ldr	r3, [r7, #20]
 8016fac:	2b01      	cmp	r3, #1
 8016fae:	d116      	bne.n	8016fde <vTaskStartScheduler+0x82>
	__asm volatile
 8016fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fb4:	f383 8811 	msr	BASEPRI, r3
 8016fb8:	f3bf 8f6f 	isb	sy
 8016fbc:	f3bf 8f4f 	dsb	sy
 8016fc0:	613b      	str	r3, [r7, #16]
}
 8016fc2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016fc4:	4b12      	ldr	r3, [pc, #72]	; (8017010 <vTaskStartScheduler+0xb4>)
 8016fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8016fca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016fcc:	4b11      	ldr	r3, [pc, #68]	; (8017014 <vTaskStartScheduler+0xb8>)
 8016fce:	2201      	movs	r2, #1
 8016fd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016fd2:	4b11      	ldr	r3, [pc, #68]	; (8017018 <vTaskStartScheduler+0xbc>)
 8016fd4:	2200      	movs	r2, #0
 8016fd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016fd8:	f000 fcea 	bl	80179b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016fdc:	e00e      	b.n	8016ffc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016fde:	697b      	ldr	r3, [r7, #20]
 8016fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fe4:	d10a      	bne.n	8016ffc <vTaskStartScheduler+0xa0>
	__asm volatile
 8016fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fea:	f383 8811 	msr	BASEPRI, r3
 8016fee:	f3bf 8f6f 	isb	sy
 8016ff2:	f3bf 8f4f 	dsb	sy
 8016ff6:	60fb      	str	r3, [r7, #12]
}
 8016ff8:	bf00      	nop
 8016ffa:	e7fe      	b.n	8016ffa <vTaskStartScheduler+0x9e>
}
 8016ffc:	bf00      	nop
 8016ffe:	3718      	adds	r7, #24
 8017000:	46bd      	mov	sp, r7
 8017002:	bd80      	pop	{r7, pc}
 8017004:	0801d1d0 	.word	0x0801d1d0
 8017008:	080173b9 	.word	0x080173b9
 801700c:	20000d44 	.word	0x20000d44
 8017010:	20000d40 	.word	0x20000d40
 8017014:	20000d2c 	.word	0x20000d2c
 8017018:	20000d24 	.word	0x20000d24

0801701c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801701c:	b480      	push	{r7}
 801701e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017020:	4b04      	ldr	r3, [pc, #16]	; (8017034 <vTaskSuspendAll+0x18>)
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	3301      	adds	r3, #1
 8017026:	4a03      	ldr	r2, [pc, #12]	; (8017034 <vTaskSuspendAll+0x18>)
 8017028:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801702a:	bf00      	nop
 801702c:	46bd      	mov	sp, r7
 801702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017032:	4770      	bx	lr
 8017034:	20000d48 	.word	0x20000d48

08017038 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017038:	b580      	push	{r7, lr}
 801703a:	b084      	sub	sp, #16
 801703c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801703e:	2300      	movs	r3, #0
 8017040:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017042:	2300      	movs	r3, #0
 8017044:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017046:	4b41      	ldr	r3, [pc, #260]	; (801714c <xTaskResumeAll+0x114>)
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d10a      	bne.n	8017064 <xTaskResumeAll+0x2c>
	__asm volatile
 801704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017052:	f383 8811 	msr	BASEPRI, r3
 8017056:	f3bf 8f6f 	isb	sy
 801705a:	f3bf 8f4f 	dsb	sy
 801705e:	603b      	str	r3, [r7, #0]
}
 8017060:	bf00      	nop
 8017062:	e7fe      	b.n	8017062 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017064:	f000 fd46 	bl	8017af4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017068:	4b38      	ldr	r3, [pc, #224]	; (801714c <xTaskResumeAll+0x114>)
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	3b01      	subs	r3, #1
 801706e:	4a37      	ldr	r2, [pc, #220]	; (801714c <xTaskResumeAll+0x114>)
 8017070:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017072:	4b36      	ldr	r3, [pc, #216]	; (801714c <xTaskResumeAll+0x114>)
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d161      	bne.n	801713e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801707a:	4b35      	ldr	r3, [pc, #212]	; (8017150 <xTaskResumeAll+0x118>)
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	2b00      	cmp	r3, #0
 8017080:	d05d      	beq.n	801713e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017082:	e02e      	b.n	80170e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017084:	4b33      	ldr	r3, [pc, #204]	; (8017154 <xTaskResumeAll+0x11c>)
 8017086:	68db      	ldr	r3, [r3, #12]
 8017088:	68db      	ldr	r3, [r3, #12]
 801708a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	3318      	adds	r3, #24
 8017090:	4618      	mov	r0, r3
 8017092:	f7ff fd28 	bl	8016ae6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	3304      	adds	r3, #4
 801709a:	4618      	mov	r0, r3
 801709c:	f7ff fd23 	bl	8016ae6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170a4:	2201      	movs	r2, #1
 80170a6:	409a      	lsls	r2, r3
 80170a8:	4b2b      	ldr	r3, [pc, #172]	; (8017158 <xTaskResumeAll+0x120>)
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	4313      	orrs	r3, r2
 80170ae:	4a2a      	ldr	r2, [pc, #168]	; (8017158 <xTaskResumeAll+0x120>)
 80170b0:	6013      	str	r3, [r2, #0]
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170b6:	4613      	mov	r3, r2
 80170b8:	009b      	lsls	r3, r3, #2
 80170ba:	4413      	add	r3, r2
 80170bc:	009b      	lsls	r3, r3, #2
 80170be:	4a27      	ldr	r2, [pc, #156]	; (801715c <xTaskResumeAll+0x124>)
 80170c0:	441a      	add	r2, r3
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	3304      	adds	r3, #4
 80170c6:	4619      	mov	r1, r3
 80170c8:	4610      	mov	r0, r2
 80170ca:	f7ff fcaf 	bl	8016a2c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170d2:	4b23      	ldr	r3, [pc, #140]	; (8017160 <xTaskResumeAll+0x128>)
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170d8:	429a      	cmp	r2, r3
 80170da:	d302      	bcc.n	80170e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80170dc:	4b21      	ldr	r3, [pc, #132]	; (8017164 <xTaskResumeAll+0x12c>)
 80170de:	2201      	movs	r2, #1
 80170e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80170e2:	4b1c      	ldr	r3, [pc, #112]	; (8017154 <xTaskResumeAll+0x11c>)
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d1cc      	bne.n	8017084 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d001      	beq.n	80170f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80170f0:	f000 fa18 	bl	8017524 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80170f4:	4b1c      	ldr	r3, [pc, #112]	; (8017168 <xTaskResumeAll+0x130>)
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d010      	beq.n	8017122 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017100:	f000 f846 	bl	8017190 <xTaskIncrementTick>
 8017104:	4603      	mov	r3, r0
 8017106:	2b00      	cmp	r3, #0
 8017108:	d002      	beq.n	8017110 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801710a:	4b16      	ldr	r3, [pc, #88]	; (8017164 <xTaskResumeAll+0x12c>)
 801710c:	2201      	movs	r2, #1
 801710e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	3b01      	subs	r3, #1
 8017114:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d1f1      	bne.n	8017100 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 801711c:	4b12      	ldr	r3, [pc, #72]	; (8017168 <xTaskResumeAll+0x130>)
 801711e:	2200      	movs	r2, #0
 8017120:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017122:	4b10      	ldr	r3, [pc, #64]	; (8017164 <xTaskResumeAll+0x12c>)
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d009      	beq.n	801713e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801712a:	2301      	movs	r3, #1
 801712c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801712e:	4b0f      	ldr	r3, [pc, #60]	; (801716c <xTaskResumeAll+0x134>)
 8017130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017134:	601a      	str	r2, [r3, #0]
 8017136:	f3bf 8f4f 	dsb	sy
 801713a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801713e:	f000 fd09 	bl	8017b54 <vPortExitCritical>

	return xAlreadyYielded;
 8017142:	68bb      	ldr	r3, [r7, #8]
}
 8017144:	4618      	mov	r0, r3
 8017146:	3710      	adds	r7, #16
 8017148:	46bd      	mov	sp, r7
 801714a:	bd80      	pop	{r7, pc}
 801714c:	20000d48 	.word	0x20000d48
 8017150:	20000d20 	.word	0x20000d20
 8017154:	20000ce0 	.word	0x20000ce0
 8017158:	20000d28 	.word	0x20000d28
 801715c:	20000c24 	.word	0x20000c24
 8017160:	20000c20 	.word	0x20000c20
 8017164:	20000d34 	.word	0x20000d34
 8017168:	20000d30 	.word	0x20000d30
 801716c:	e000ed04 	.word	0xe000ed04

08017170 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017170:	b480      	push	{r7}
 8017172:	b083      	sub	sp, #12
 8017174:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017176:	4b05      	ldr	r3, [pc, #20]	; (801718c <xTaskGetTickCount+0x1c>)
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801717c:	687b      	ldr	r3, [r7, #4]
}
 801717e:	4618      	mov	r0, r3
 8017180:	370c      	adds	r7, #12
 8017182:	46bd      	mov	sp, r7
 8017184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017188:	4770      	bx	lr
 801718a:	bf00      	nop
 801718c:	20000d24 	.word	0x20000d24

08017190 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017190:	b580      	push	{r7, lr}
 8017192:	b086      	sub	sp, #24
 8017194:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017196:	2300      	movs	r3, #0
 8017198:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801719a:	4b4e      	ldr	r3, [pc, #312]	; (80172d4 <xTaskIncrementTick+0x144>)
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	2b00      	cmp	r3, #0
 80171a0:	f040 808e 	bne.w	80172c0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80171a4:	4b4c      	ldr	r3, [pc, #304]	; (80172d8 <xTaskIncrementTick+0x148>)
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	3301      	adds	r3, #1
 80171aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80171ac:	4a4a      	ldr	r2, [pc, #296]	; (80172d8 <xTaskIncrementTick+0x148>)
 80171ae:	693b      	ldr	r3, [r7, #16]
 80171b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80171b2:	693b      	ldr	r3, [r7, #16]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d120      	bne.n	80171fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80171b8:	4b48      	ldr	r3, [pc, #288]	; (80172dc <xTaskIncrementTick+0x14c>)
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d00a      	beq.n	80171d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80171c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171c6:	f383 8811 	msr	BASEPRI, r3
 80171ca:	f3bf 8f6f 	isb	sy
 80171ce:	f3bf 8f4f 	dsb	sy
 80171d2:	603b      	str	r3, [r7, #0]
}
 80171d4:	bf00      	nop
 80171d6:	e7fe      	b.n	80171d6 <xTaskIncrementTick+0x46>
 80171d8:	4b40      	ldr	r3, [pc, #256]	; (80172dc <xTaskIncrementTick+0x14c>)
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	60fb      	str	r3, [r7, #12]
 80171de:	4b40      	ldr	r3, [pc, #256]	; (80172e0 <xTaskIncrementTick+0x150>)
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	4a3e      	ldr	r2, [pc, #248]	; (80172dc <xTaskIncrementTick+0x14c>)
 80171e4:	6013      	str	r3, [r2, #0]
 80171e6:	4a3e      	ldr	r2, [pc, #248]	; (80172e0 <xTaskIncrementTick+0x150>)
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	6013      	str	r3, [r2, #0]
 80171ec:	4b3d      	ldr	r3, [pc, #244]	; (80172e4 <xTaskIncrementTick+0x154>)
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	3301      	adds	r3, #1
 80171f2:	4a3c      	ldr	r2, [pc, #240]	; (80172e4 <xTaskIncrementTick+0x154>)
 80171f4:	6013      	str	r3, [r2, #0]
 80171f6:	f000 f995 	bl	8017524 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80171fa:	4b3b      	ldr	r3, [pc, #236]	; (80172e8 <xTaskIncrementTick+0x158>)
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	693a      	ldr	r2, [r7, #16]
 8017200:	429a      	cmp	r2, r3
 8017202:	d348      	bcc.n	8017296 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017204:	4b35      	ldr	r3, [pc, #212]	; (80172dc <xTaskIncrementTick+0x14c>)
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	2b00      	cmp	r3, #0
 801720c:	d104      	bne.n	8017218 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801720e:	4b36      	ldr	r3, [pc, #216]	; (80172e8 <xTaskIncrementTick+0x158>)
 8017210:	f04f 32ff 	mov.w	r2, #4294967295
 8017214:	601a      	str	r2, [r3, #0]
					break;
 8017216:	e03e      	b.n	8017296 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017218:	4b30      	ldr	r3, [pc, #192]	; (80172dc <xTaskIncrementTick+0x14c>)
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	68db      	ldr	r3, [r3, #12]
 801721e:	68db      	ldr	r3, [r3, #12]
 8017220:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017222:	68bb      	ldr	r3, [r7, #8]
 8017224:	685b      	ldr	r3, [r3, #4]
 8017226:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017228:	693a      	ldr	r2, [r7, #16]
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	429a      	cmp	r2, r3
 801722e:	d203      	bcs.n	8017238 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017230:	4a2d      	ldr	r2, [pc, #180]	; (80172e8 <xTaskIncrementTick+0x158>)
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017236:	e02e      	b.n	8017296 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017238:	68bb      	ldr	r3, [r7, #8]
 801723a:	3304      	adds	r3, #4
 801723c:	4618      	mov	r0, r3
 801723e:	f7ff fc52 	bl	8016ae6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017242:	68bb      	ldr	r3, [r7, #8]
 8017244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017246:	2b00      	cmp	r3, #0
 8017248:	d004      	beq.n	8017254 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801724a:	68bb      	ldr	r3, [r7, #8]
 801724c:	3318      	adds	r3, #24
 801724e:	4618      	mov	r0, r3
 8017250:	f7ff fc49 	bl	8016ae6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017254:	68bb      	ldr	r3, [r7, #8]
 8017256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017258:	2201      	movs	r2, #1
 801725a:	409a      	lsls	r2, r3
 801725c:	4b23      	ldr	r3, [pc, #140]	; (80172ec <xTaskIncrementTick+0x15c>)
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	4313      	orrs	r3, r2
 8017262:	4a22      	ldr	r2, [pc, #136]	; (80172ec <xTaskIncrementTick+0x15c>)
 8017264:	6013      	str	r3, [r2, #0]
 8017266:	68bb      	ldr	r3, [r7, #8]
 8017268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801726a:	4613      	mov	r3, r2
 801726c:	009b      	lsls	r3, r3, #2
 801726e:	4413      	add	r3, r2
 8017270:	009b      	lsls	r3, r3, #2
 8017272:	4a1f      	ldr	r2, [pc, #124]	; (80172f0 <xTaskIncrementTick+0x160>)
 8017274:	441a      	add	r2, r3
 8017276:	68bb      	ldr	r3, [r7, #8]
 8017278:	3304      	adds	r3, #4
 801727a:	4619      	mov	r1, r3
 801727c:	4610      	mov	r0, r2
 801727e:	f7ff fbd5 	bl	8016a2c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017282:	68bb      	ldr	r3, [r7, #8]
 8017284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017286:	4b1b      	ldr	r3, [pc, #108]	; (80172f4 <xTaskIncrementTick+0x164>)
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801728c:	429a      	cmp	r2, r3
 801728e:	d3b9      	bcc.n	8017204 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8017290:	2301      	movs	r3, #1
 8017292:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017294:	e7b6      	b.n	8017204 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017296:	4b17      	ldr	r3, [pc, #92]	; (80172f4 <xTaskIncrementTick+0x164>)
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801729c:	4914      	ldr	r1, [pc, #80]	; (80172f0 <xTaskIncrementTick+0x160>)
 801729e:	4613      	mov	r3, r2
 80172a0:	009b      	lsls	r3, r3, #2
 80172a2:	4413      	add	r3, r2
 80172a4:	009b      	lsls	r3, r3, #2
 80172a6:	440b      	add	r3, r1
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	2b01      	cmp	r3, #1
 80172ac:	d901      	bls.n	80172b2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80172ae:	2301      	movs	r3, #1
 80172b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80172b2:	4b11      	ldr	r3, [pc, #68]	; (80172f8 <xTaskIncrementTick+0x168>)
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d007      	beq.n	80172ca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80172ba:	2301      	movs	r3, #1
 80172bc:	617b      	str	r3, [r7, #20]
 80172be:	e004      	b.n	80172ca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80172c0:	4b0e      	ldr	r3, [pc, #56]	; (80172fc <xTaskIncrementTick+0x16c>)
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	3301      	adds	r3, #1
 80172c6:	4a0d      	ldr	r2, [pc, #52]	; (80172fc <xTaskIncrementTick+0x16c>)
 80172c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80172ca:	697b      	ldr	r3, [r7, #20]
}
 80172cc:	4618      	mov	r0, r3
 80172ce:	3718      	adds	r7, #24
 80172d0:	46bd      	mov	sp, r7
 80172d2:	bd80      	pop	{r7, pc}
 80172d4:	20000d48 	.word	0x20000d48
 80172d8:	20000d24 	.word	0x20000d24
 80172dc:	20000cd8 	.word	0x20000cd8
 80172e0:	20000cdc 	.word	0x20000cdc
 80172e4:	20000d38 	.word	0x20000d38
 80172e8:	20000d40 	.word	0x20000d40
 80172ec:	20000d28 	.word	0x20000d28
 80172f0:	20000c24 	.word	0x20000c24
 80172f4:	20000c20 	.word	0x20000c20
 80172f8:	20000d34 	.word	0x20000d34
 80172fc:	20000d30 	.word	0x20000d30

08017300 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017300:	b480      	push	{r7}
 8017302:	b087      	sub	sp, #28
 8017304:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017306:	4b27      	ldr	r3, [pc, #156]	; (80173a4 <vTaskSwitchContext+0xa4>)
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d003      	beq.n	8017316 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801730e:	4b26      	ldr	r3, [pc, #152]	; (80173a8 <vTaskSwitchContext+0xa8>)
 8017310:	2201      	movs	r2, #1
 8017312:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017314:	e03f      	b.n	8017396 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8017316:	4b24      	ldr	r3, [pc, #144]	; (80173a8 <vTaskSwitchContext+0xa8>)
 8017318:	2200      	movs	r2, #0
 801731a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801731c:	4b23      	ldr	r3, [pc, #140]	; (80173ac <vTaskSwitchContext+0xac>)
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	fab3 f383 	clz	r3, r3
 8017328:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801732a:	7afb      	ldrb	r3, [r7, #11]
 801732c:	f1c3 031f 	rsb	r3, r3, #31
 8017330:	617b      	str	r3, [r7, #20]
 8017332:	491f      	ldr	r1, [pc, #124]	; (80173b0 <vTaskSwitchContext+0xb0>)
 8017334:	697a      	ldr	r2, [r7, #20]
 8017336:	4613      	mov	r3, r2
 8017338:	009b      	lsls	r3, r3, #2
 801733a:	4413      	add	r3, r2
 801733c:	009b      	lsls	r3, r3, #2
 801733e:	440b      	add	r3, r1
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	2b00      	cmp	r3, #0
 8017344:	d10a      	bne.n	801735c <vTaskSwitchContext+0x5c>
	__asm volatile
 8017346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801734a:	f383 8811 	msr	BASEPRI, r3
 801734e:	f3bf 8f6f 	isb	sy
 8017352:	f3bf 8f4f 	dsb	sy
 8017356:	607b      	str	r3, [r7, #4]
}
 8017358:	bf00      	nop
 801735a:	e7fe      	b.n	801735a <vTaskSwitchContext+0x5a>
 801735c:	697a      	ldr	r2, [r7, #20]
 801735e:	4613      	mov	r3, r2
 8017360:	009b      	lsls	r3, r3, #2
 8017362:	4413      	add	r3, r2
 8017364:	009b      	lsls	r3, r3, #2
 8017366:	4a12      	ldr	r2, [pc, #72]	; (80173b0 <vTaskSwitchContext+0xb0>)
 8017368:	4413      	add	r3, r2
 801736a:	613b      	str	r3, [r7, #16]
 801736c:	693b      	ldr	r3, [r7, #16]
 801736e:	685b      	ldr	r3, [r3, #4]
 8017370:	685a      	ldr	r2, [r3, #4]
 8017372:	693b      	ldr	r3, [r7, #16]
 8017374:	605a      	str	r2, [r3, #4]
 8017376:	693b      	ldr	r3, [r7, #16]
 8017378:	685a      	ldr	r2, [r3, #4]
 801737a:	693b      	ldr	r3, [r7, #16]
 801737c:	3308      	adds	r3, #8
 801737e:	429a      	cmp	r2, r3
 8017380:	d104      	bne.n	801738c <vTaskSwitchContext+0x8c>
 8017382:	693b      	ldr	r3, [r7, #16]
 8017384:	685b      	ldr	r3, [r3, #4]
 8017386:	685a      	ldr	r2, [r3, #4]
 8017388:	693b      	ldr	r3, [r7, #16]
 801738a:	605a      	str	r2, [r3, #4]
 801738c:	693b      	ldr	r3, [r7, #16]
 801738e:	685b      	ldr	r3, [r3, #4]
 8017390:	68db      	ldr	r3, [r3, #12]
 8017392:	4a08      	ldr	r2, [pc, #32]	; (80173b4 <vTaskSwitchContext+0xb4>)
 8017394:	6013      	str	r3, [r2, #0]
}
 8017396:	bf00      	nop
 8017398:	371c      	adds	r7, #28
 801739a:	46bd      	mov	sp, r7
 801739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a0:	4770      	bx	lr
 80173a2:	bf00      	nop
 80173a4:	20000d48 	.word	0x20000d48
 80173a8:	20000d34 	.word	0x20000d34
 80173ac:	20000d28 	.word	0x20000d28
 80173b0:	20000c24 	.word	0x20000c24
 80173b4:	20000c20 	.word	0x20000c20

080173b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80173b8:	b580      	push	{r7, lr}
 80173ba:	b082      	sub	sp, #8
 80173bc:	af00      	add	r7, sp, #0
 80173be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80173c0:	f000 f852 	bl	8017468 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80173c4:	4b06      	ldr	r3, [pc, #24]	; (80173e0 <prvIdleTask+0x28>)
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	2b01      	cmp	r3, #1
 80173ca:	d9f9      	bls.n	80173c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80173cc:	4b05      	ldr	r3, [pc, #20]	; (80173e4 <prvIdleTask+0x2c>)
 80173ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80173d2:	601a      	str	r2, [r3, #0]
 80173d4:	f3bf 8f4f 	dsb	sy
 80173d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80173dc:	e7f0      	b.n	80173c0 <prvIdleTask+0x8>
 80173de:	bf00      	nop
 80173e0:	20000c24 	.word	0x20000c24
 80173e4:	e000ed04 	.word	0xe000ed04

080173e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80173e8:	b580      	push	{r7, lr}
 80173ea:	b082      	sub	sp, #8
 80173ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80173ee:	2300      	movs	r3, #0
 80173f0:	607b      	str	r3, [r7, #4]
 80173f2:	e00c      	b.n	801740e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80173f4:	687a      	ldr	r2, [r7, #4]
 80173f6:	4613      	mov	r3, r2
 80173f8:	009b      	lsls	r3, r3, #2
 80173fa:	4413      	add	r3, r2
 80173fc:	009b      	lsls	r3, r3, #2
 80173fe:	4a12      	ldr	r2, [pc, #72]	; (8017448 <prvInitialiseTaskLists+0x60>)
 8017400:	4413      	add	r3, r2
 8017402:	4618      	mov	r0, r3
 8017404:	f7ff fae5 	bl	80169d2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	3301      	adds	r3, #1
 801740c:	607b      	str	r3, [r7, #4]
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	2b06      	cmp	r3, #6
 8017412:	d9ef      	bls.n	80173f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017414:	480d      	ldr	r0, [pc, #52]	; (801744c <prvInitialiseTaskLists+0x64>)
 8017416:	f7ff fadc 	bl	80169d2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801741a:	480d      	ldr	r0, [pc, #52]	; (8017450 <prvInitialiseTaskLists+0x68>)
 801741c:	f7ff fad9 	bl	80169d2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017420:	480c      	ldr	r0, [pc, #48]	; (8017454 <prvInitialiseTaskLists+0x6c>)
 8017422:	f7ff fad6 	bl	80169d2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017426:	480c      	ldr	r0, [pc, #48]	; (8017458 <prvInitialiseTaskLists+0x70>)
 8017428:	f7ff fad3 	bl	80169d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801742c:	480b      	ldr	r0, [pc, #44]	; (801745c <prvInitialiseTaskLists+0x74>)
 801742e:	f7ff fad0 	bl	80169d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017432:	4b0b      	ldr	r3, [pc, #44]	; (8017460 <prvInitialiseTaskLists+0x78>)
 8017434:	4a05      	ldr	r2, [pc, #20]	; (801744c <prvInitialiseTaskLists+0x64>)
 8017436:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017438:	4b0a      	ldr	r3, [pc, #40]	; (8017464 <prvInitialiseTaskLists+0x7c>)
 801743a:	4a05      	ldr	r2, [pc, #20]	; (8017450 <prvInitialiseTaskLists+0x68>)
 801743c:	601a      	str	r2, [r3, #0]
}
 801743e:	bf00      	nop
 8017440:	3708      	adds	r7, #8
 8017442:	46bd      	mov	sp, r7
 8017444:	bd80      	pop	{r7, pc}
 8017446:	bf00      	nop
 8017448:	20000c24 	.word	0x20000c24
 801744c:	20000cb0 	.word	0x20000cb0
 8017450:	20000cc4 	.word	0x20000cc4
 8017454:	20000ce0 	.word	0x20000ce0
 8017458:	20000cf4 	.word	0x20000cf4
 801745c:	20000d0c 	.word	0x20000d0c
 8017460:	20000cd8 	.word	0x20000cd8
 8017464:	20000cdc 	.word	0x20000cdc

08017468 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017468:	b580      	push	{r7, lr}
 801746a:	b082      	sub	sp, #8
 801746c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801746e:	e019      	b.n	80174a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017470:	f000 fb40 	bl	8017af4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017474:	4b10      	ldr	r3, [pc, #64]	; (80174b8 <prvCheckTasksWaitingTermination+0x50>)
 8017476:	68db      	ldr	r3, [r3, #12]
 8017478:	68db      	ldr	r3, [r3, #12]
 801747a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	3304      	adds	r3, #4
 8017480:	4618      	mov	r0, r3
 8017482:	f7ff fb30 	bl	8016ae6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017486:	4b0d      	ldr	r3, [pc, #52]	; (80174bc <prvCheckTasksWaitingTermination+0x54>)
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	3b01      	subs	r3, #1
 801748c:	4a0b      	ldr	r2, [pc, #44]	; (80174bc <prvCheckTasksWaitingTermination+0x54>)
 801748e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017490:	4b0b      	ldr	r3, [pc, #44]	; (80174c0 <prvCheckTasksWaitingTermination+0x58>)
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	3b01      	subs	r3, #1
 8017496:	4a0a      	ldr	r2, [pc, #40]	; (80174c0 <prvCheckTasksWaitingTermination+0x58>)
 8017498:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801749a:	f000 fb5b 	bl	8017b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801749e:	6878      	ldr	r0, [r7, #4]
 80174a0:	f000 f810 	bl	80174c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80174a4:	4b06      	ldr	r3, [pc, #24]	; (80174c0 <prvCheckTasksWaitingTermination+0x58>)
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d1e1      	bne.n	8017470 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80174ac:	bf00      	nop
 80174ae:	bf00      	nop
 80174b0:	3708      	adds	r7, #8
 80174b2:	46bd      	mov	sp, r7
 80174b4:	bd80      	pop	{r7, pc}
 80174b6:	bf00      	nop
 80174b8:	20000cf4 	.word	0x20000cf4
 80174bc:	20000d20 	.word	0x20000d20
 80174c0:	20000d08 	.word	0x20000d08

080174c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b084      	sub	sp, #16
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d108      	bne.n	80174e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80174da:	4618      	mov	r0, r3
 80174dc:	f000 fcf8 	bl	8017ed0 <vPortFree>
				vPortFree( pxTCB );
 80174e0:	6878      	ldr	r0, [r7, #4]
 80174e2:	f000 fcf5 	bl	8017ed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80174e6:	e018      	b.n	801751a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80174ee:	2b01      	cmp	r3, #1
 80174f0:	d103      	bne.n	80174fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80174f2:	6878      	ldr	r0, [r7, #4]
 80174f4:	f000 fcec 	bl	8017ed0 <vPortFree>
	}
 80174f8:	e00f      	b.n	801751a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8017500:	2b02      	cmp	r3, #2
 8017502:	d00a      	beq.n	801751a <prvDeleteTCB+0x56>
	__asm volatile
 8017504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017508:	f383 8811 	msr	BASEPRI, r3
 801750c:	f3bf 8f6f 	isb	sy
 8017510:	f3bf 8f4f 	dsb	sy
 8017514:	60fb      	str	r3, [r7, #12]
}
 8017516:	bf00      	nop
 8017518:	e7fe      	b.n	8017518 <prvDeleteTCB+0x54>
	}
 801751a:	bf00      	nop
 801751c:	3710      	adds	r7, #16
 801751e:	46bd      	mov	sp, r7
 8017520:	bd80      	pop	{r7, pc}
	...

08017524 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017524:	b480      	push	{r7}
 8017526:	b083      	sub	sp, #12
 8017528:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801752a:	4b0c      	ldr	r3, [pc, #48]	; (801755c <prvResetNextTaskUnblockTime+0x38>)
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	2b00      	cmp	r3, #0
 8017532:	d104      	bne.n	801753e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017534:	4b0a      	ldr	r3, [pc, #40]	; (8017560 <prvResetNextTaskUnblockTime+0x3c>)
 8017536:	f04f 32ff 	mov.w	r2, #4294967295
 801753a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801753c:	e008      	b.n	8017550 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801753e:	4b07      	ldr	r3, [pc, #28]	; (801755c <prvResetNextTaskUnblockTime+0x38>)
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	68db      	ldr	r3, [r3, #12]
 8017544:	68db      	ldr	r3, [r3, #12]
 8017546:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	685b      	ldr	r3, [r3, #4]
 801754c:	4a04      	ldr	r2, [pc, #16]	; (8017560 <prvResetNextTaskUnblockTime+0x3c>)
 801754e:	6013      	str	r3, [r2, #0]
}
 8017550:	bf00      	nop
 8017552:	370c      	adds	r7, #12
 8017554:	46bd      	mov	sp, r7
 8017556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801755a:	4770      	bx	lr
 801755c:	20000cd8 	.word	0x20000cd8
 8017560:	20000d40 	.word	0x20000d40

08017564 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8017564:	b580      	push	{r7, lr}
 8017566:	b086      	sub	sp, #24
 8017568:	af00      	add	r7, sp, #0
 801756a:	60f8      	str	r0, [r7, #12]
 801756c:	60b9      	str	r1, [r7, #8]
 801756e:	607a      	str	r2, [r7, #4]
 8017570:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8017572:	f000 fabf 	bl	8017af4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8017576:	4b26      	ldr	r3, [pc, #152]	; (8017610 <xTaskNotifyWait+0xac>)
 8017578:	681b      	ldr	r3, [r3, #0]
 801757a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801757e:	b2db      	uxtb	r3, r3
 8017580:	2b02      	cmp	r3, #2
 8017582:	d01a      	beq.n	80175ba <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8017584:	4b22      	ldr	r3, [pc, #136]	; (8017610 <xTaskNotifyWait+0xac>)
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801758a:	68fa      	ldr	r2, [r7, #12]
 801758c:	43d2      	mvns	r2, r2
 801758e:	400a      	ands	r2, r1
 8017590:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8017592:	4b1f      	ldr	r3, [pc, #124]	; (8017610 <xTaskNotifyWait+0xac>)
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	2201      	movs	r2, #1
 8017598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 801759c:	683b      	ldr	r3, [r7, #0]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d00b      	beq.n	80175ba <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80175a2:	2101      	movs	r1, #1
 80175a4:	6838      	ldr	r0, [r7, #0]
 80175a6:	f000 f911 	bl	80177cc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80175aa:	4b1a      	ldr	r3, [pc, #104]	; (8017614 <xTaskNotifyWait+0xb0>)
 80175ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80175b0:	601a      	str	r2, [r3, #0]
 80175b2:	f3bf 8f4f 	dsb	sy
 80175b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80175ba:	f000 facb 	bl	8017b54 <vPortExitCritical>

		taskENTER_CRITICAL();
 80175be:	f000 fa99 	bl	8017af4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d004      	beq.n	80175d2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80175c8:	4b11      	ldr	r3, [pc, #68]	; (8017610 <xTaskNotifyWait+0xac>)
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80175d2:	4b0f      	ldr	r3, [pc, #60]	; (8017610 <xTaskNotifyWait+0xac>)
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80175da:	b2db      	uxtb	r3, r3
 80175dc:	2b02      	cmp	r3, #2
 80175de:	d002      	beq.n	80175e6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80175e0:	2300      	movs	r3, #0
 80175e2:	617b      	str	r3, [r7, #20]
 80175e4:	e008      	b.n	80175f8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80175e6:	4b0a      	ldr	r3, [pc, #40]	; (8017610 <xTaskNotifyWait+0xac>)
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80175ec:	68ba      	ldr	r2, [r7, #8]
 80175ee:	43d2      	mvns	r2, r2
 80175f0:	400a      	ands	r2, r1
 80175f2:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 80175f4:	2301      	movs	r3, #1
 80175f6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80175f8:	4b05      	ldr	r3, [pc, #20]	; (8017610 <xTaskNotifyWait+0xac>)
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	2200      	movs	r2, #0
 80175fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8017602:	f000 faa7 	bl	8017b54 <vPortExitCritical>

		return xReturn;
 8017606:	697b      	ldr	r3, [r7, #20]
	}
 8017608:	4618      	mov	r0, r3
 801760a:	3718      	adds	r7, #24
 801760c:	46bd      	mov	sp, r7
 801760e:	bd80      	pop	{r7, pc}
 8017610:	20000c20 	.word	0x20000c20
 8017614:	e000ed04 	.word	0xe000ed04

08017618 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017618:	b580      	push	{r7, lr}
 801761a:	b08e      	sub	sp, #56	; 0x38
 801761c:	af00      	add	r7, sp, #0
 801761e:	60f8      	str	r0, [r7, #12]
 8017620:	60b9      	str	r1, [r7, #8]
 8017622:	603b      	str	r3, [r7, #0]
 8017624:	4613      	mov	r3, r2
 8017626:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8017628:	2301      	movs	r3, #1
 801762a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d10a      	bne.n	8017648 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8017632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017636:	f383 8811 	msr	BASEPRI, r3
 801763a:	f3bf 8f6f 	isb	sy
 801763e:	f3bf 8f4f 	dsb	sy
 8017642:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017644:	bf00      	nop
 8017646:	e7fe      	b.n	8017646 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017648:	f000 fb36 	bl	8017cb8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017650:	f3ef 8211 	mrs	r2, BASEPRI
 8017654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017658:	f383 8811 	msr	BASEPRI, r3
 801765c:	f3bf 8f6f 	isb	sy
 8017660:	f3bf 8f4f 	dsb	sy
 8017664:	623a      	str	r2, [r7, #32]
 8017666:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017668:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801766a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801766c:	683b      	ldr	r3, [r7, #0]
 801766e:	2b00      	cmp	r3, #0
 8017670:	d003      	beq.n	801767a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8017672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017674:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017676:	683b      	ldr	r3, [r7, #0]
 8017678:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801767c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017680:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8017684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017686:	2202      	movs	r2, #2
 8017688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 801768c:	79fb      	ldrb	r3, [r7, #7]
 801768e:	2b04      	cmp	r3, #4
 8017690:	d828      	bhi.n	80176e4 <xTaskGenericNotifyFromISR+0xcc>
 8017692:	a201      	add	r2, pc, #4	; (adr r2, 8017698 <xTaskGenericNotifyFromISR+0x80>)
 8017694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017698:	08017705 	.word	0x08017705
 801769c:	080176ad 	.word	0x080176ad
 80176a0:	080176bb 	.word	0x080176bb
 80176a4:	080176c7 	.word	0x080176c7
 80176a8:	080176cf 	.word	0x080176cf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80176ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80176b0:	68bb      	ldr	r3, [r7, #8]
 80176b2:	431a      	orrs	r2, r3
 80176b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176b6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80176b8:	e027      	b.n	801770a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80176ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176be:	1c5a      	adds	r2, r3, #1
 80176c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176c2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80176c4:	e021      	b.n	801770a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80176c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176c8:	68ba      	ldr	r2, [r7, #8]
 80176ca:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80176cc:	e01d      	b.n	801770a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80176ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80176d2:	2b02      	cmp	r3, #2
 80176d4:	d003      	beq.n	80176de <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80176d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176d8:	68ba      	ldr	r2, [r7, #8]
 80176da:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80176dc:	e015      	b.n	801770a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 80176de:	2300      	movs	r3, #0
 80176e0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80176e2:	e012      	b.n	801770a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80176e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176ec:	d00c      	beq.n	8017708 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80176ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176f2:	f383 8811 	msr	BASEPRI, r3
 80176f6:	f3bf 8f6f 	isb	sy
 80176fa:	f3bf 8f4f 	dsb	sy
 80176fe:	61bb      	str	r3, [r7, #24]
}
 8017700:	bf00      	nop
 8017702:	e7fe      	b.n	8017702 <xTaskGenericNotifyFromISR+0xea>
					break;
 8017704:	bf00      	nop
 8017706:	e000      	b.n	801770a <xTaskGenericNotifyFromISR+0xf2>
					break;
 8017708:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801770a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801770e:	2b01      	cmp	r3, #1
 8017710:	d145      	bne.n	801779e <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8017712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017716:	2b00      	cmp	r3, #0
 8017718:	d00a      	beq.n	8017730 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 801771a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801771e:	f383 8811 	msr	BASEPRI, r3
 8017722:	f3bf 8f6f 	isb	sy
 8017726:	f3bf 8f4f 	dsb	sy
 801772a:	617b      	str	r3, [r7, #20]
}
 801772c:	bf00      	nop
 801772e:	e7fe      	b.n	801772e <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017730:	4b20      	ldr	r3, [pc, #128]	; (80177b4 <xTaskGenericNotifyFromISR+0x19c>)
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d11c      	bne.n	8017772 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801773a:	3304      	adds	r3, #4
 801773c:	4618      	mov	r0, r3
 801773e:	f7ff f9d2 	bl	8016ae6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017746:	2201      	movs	r2, #1
 8017748:	409a      	lsls	r2, r3
 801774a:	4b1b      	ldr	r3, [pc, #108]	; (80177b8 <xTaskGenericNotifyFromISR+0x1a0>)
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	4313      	orrs	r3, r2
 8017750:	4a19      	ldr	r2, [pc, #100]	; (80177b8 <xTaskGenericNotifyFromISR+0x1a0>)
 8017752:	6013      	str	r3, [r2, #0]
 8017754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017758:	4613      	mov	r3, r2
 801775a:	009b      	lsls	r3, r3, #2
 801775c:	4413      	add	r3, r2
 801775e:	009b      	lsls	r3, r3, #2
 8017760:	4a16      	ldr	r2, [pc, #88]	; (80177bc <xTaskGenericNotifyFromISR+0x1a4>)
 8017762:	441a      	add	r2, r3
 8017764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017766:	3304      	adds	r3, #4
 8017768:	4619      	mov	r1, r3
 801776a:	4610      	mov	r0, r2
 801776c:	f7ff f95e 	bl	8016a2c <vListInsertEnd>
 8017770:	e005      	b.n	801777e <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8017772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017774:	3318      	adds	r3, #24
 8017776:	4619      	mov	r1, r3
 8017778:	4811      	ldr	r0, [pc, #68]	; (80177c0 <xTaskGenericNotifyFromISR+0x1a8>)
 801777a:	f7ff f957 	bl	8016a2c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801777e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017782:	4b10      	ldr	r3, [pc, #64]	; (80177c4 <xTaskGenericNotifyFromISR+0x1ac>)
 8017784:	681b      	ldr	r3, [r3, #0]
 8017786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017788:	429a      	cmp	r2, r3
 801778a:	d908      	bls.n	801779e <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801778c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801778e:	2b00      	cmp	r3, #0
 8017790:	d002      	beq.n	8017798 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8017792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017794:	2201      	movs	r2, #1
 8017796:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8017798:	4b0b      	ldr	r3, [pc, #44]	; (80177c8 <xTaskGenericNotifyFromISR+0x1b0>)
 801779a:	2201      	movs	r2, #1
 801779c:	601a      	str	r2, [r3, #0]
 801779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177a0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80177a2:	693b      	ldr	r3, [r7, #16]
 80177a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80177a8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80177aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80177ac:	4618      	mov	r0, r3
 80177ae:	3738      	adds	r7, #56	; 0x38
 80177b0:	46bd      	mov	sp, r7
 80177b2:	bd80      	pop	{r7, pc}
 80177b4:	20000d48 	.word	0x20000d48
 80177b8:	20000d28 	.word	0x20000d28
 80177bc:	20000c24 	.word	0x20000c24
 80177c0:	20000ce0 	.word	0x20000ce0
 80177c4:	20000c20 	.word	0x20000c20
 80177c8:	20000d34 	.word	0x20000d34

080177cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b084      	sub	sp, #16
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6078      	str	r0, [r7, #4]
 80177d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80177d6:	4b29      	ldr	r3, [pc, #164]	; (801787c <prvAddCurrentTaskToDelayedList+0xb0>)
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80177dc:	4b28      	ldr	r3, [pc, #160]	; (8017880 <prvAddCurrentTaskToDelayedList+0xb4>)
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	3304      	adds	r3, #4
 80177e2:	4618      	mov	r0, r3
 80177e4:	f7ff f97f 	bl	8016ae6 <uxListRemove>
 80177e8:	4603      	mov	r3, r0
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d10b      	bne.n	8017806 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80177ee:	4b24      	ldr	r3, [pc, #144]	; (8017880 <prvAddCurrentTaskToDelayedList+0xb4>)
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177f4:	2201      	movs	r2, #1
 80177f6:	fa02 f303 	lsl.w	r3, r2, r3
 80177fa:	43da      	mvns	r2, r3
 80177fc:	4b21      	ldr	r3, [pc, #132]	; (8017884 <prvAddCurrentTaskToDelayedList+0xb8>)
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	4013      	ands	r3, r2
 8017802:	4a20      	ldr	r2, [pc, #128]	; (8017884 <prvAddCurrentTaskToDelayedList+0xb8>)
 8017804:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	f1b3 3fff 	cmp.w	r3, #4294967295
 801780c:	d10a      	bne.n	8017824 <prvAddCurrentTaskToDelayedList+0x58>
 801780e:	683b      	ldr	r3, [r7, #0]
 8017810:	2b00      	cmp	r3, #0
 8017812:	d007      	beq.n	8017824 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017814:	4b1a      	ldr	r3, [pc, #104]	; (8017880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017816:	681b      	ldr	r3, [r3, #0]
 8017818:	3304      	adds	r3, #4
 801781a:	4619      	mov	r1, r3
 801781c:	481a      	ldr	r0, [pc, #104]	; (8017888 <prvAddCurrentTaskToDelayedList+0xbc>)
 801781e:	f7ff f905 	bl	8016a2c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017822:	e026      	b.n	8017872 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017824:	68fa      	ldr	r2, [r7, #12]
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	4413      	add	r3, r2
 801782a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801782c:	4b14      	ldr	r3, [pc, #80]	; (8017880 <prvAddCurrentTaskToDelayedList+0xb4>)
 801782e:	681b      	ldr	r3, [r3, #0]
 8017830:	68ba      	ldr	r2, [r7, #8]
 8017832:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017834:	68ba      	ldr	r2, [r7, #8]
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	429a      	cmp	r2, r3
 801783a:	d209      	bcs.n	8017850 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801783c:	4b13      	ldr	r3, [pc, #76]	; (801788c <prvAddCurrentTaskToDelayedList+0xc0>)
 801783e:	681a      	ldr	r2, [r3, #0]
 8017840:	4b0f      	ldr	r3, [pc, #60]	; (8017880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	3304      	adds	r3, #4
 8017846:	4619      	mov	r1, r3
 8017848:	4610      	mov	r0, r2
 801784a:	f7ff f913 	bl	8016a74 <vListInsert>
}
 801784e:	e010      	b.n	8017872 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017850:	4b0f      	ldr	r3, [pc, #60]	; (8017890 <prvAddCurrentTaskToDelayedList+0xc4>)
 8017852:	681a      	ldr	r2, [r3, #0]
 8017854:	4b0a      	ldr	r3, [pc, #40]	; (8017880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	3304      	adds	r3, #4
 801785a:	4619      	mov	r1, r3
 801785c:	4610      	mov	r0, r2
 801785e:	f7ff f909 	bl	8016a74 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017862:	4b0c      	ldr	r3, [pc, #48]	; (8017894 <prvAddCurrentTaskToDelayedList+0xc8>)
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	68ba      	ldr	r2, [r7, #8]
 8017868:	429a      	cmp	r2, r3
 801786a:	d202      	bcs.n	8017872 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801786c:	4a09      	ldr	r2, [pc, #36]	; (8017894 <prvAddCurrentTaskToDelayedList+0xc8>)
 801786e:	68bb      	ldr	r3, [r7, #8]
 8017870:	6013      	str	r3, [r2, #0]
}
 8017872:	bf00      	nop
 8017874:	3710      	adds	r7, #16
 8017876:	46bd      	mov	sp, r7
 8017878:	bd80      	pop	{r7, pc}
 801787a:	bf00      	nop
 801787c:	20000d24 	.word	0x20000d24
 8017880:	20000c20 	.word	0x20000c20
 8017884:	20000d28 	.word	0x20000d28
 8017888:	20000d0c 	.word	0x20000d0c
 801788c:	20000cdc 	.word	0x20000cdc
 8017890:	20000cd8 	.word	0x20000cd8
 8017894:	20000d40 	.word	0x20000d40

08017898 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017898:	b480      	push	{r7}
 801789a:	b085      	sub	sp, #20
 801789c:	af00      	add	r7, sp, #0
 801789e:	60f8      	str	r0, [r7, #12]
 80178a0:	60b9      	str	r1, [r7, #8]
 80178a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	3b04      	subs	r3, #4
 80178a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80178b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	3b04      	subs	r3, #4
 80178b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80178b8:	68bb      	ldr	r3, [r7, #8]
 80178ba:	f023 0201 	bic.w	r2, r3, #1
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	3b04      	subs	r3, #4
 80178c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80178c8:	4a0c      	ldr	r2, [pc, #48]	; (80178fc <pxPortInitialiseStack+0x64>)
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	3b14      	subs	r3, #20
 80178d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80178d4:	687a      	ldr	r2, [r7, #4]
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	3b04      	subs	r3, #4
 80178de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	f06f 0202 	mvn.w	r2, #2
 80178e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	3b20      	subs	r3, #32
 80178ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80178ee:	68fb      	ldr	r3, [r7, #12]
}
 80178f0:	4618      	mov	r0, r3
 80178f2:	3714      	adds	r7, #20
 80178f4:	46bd      	mov	sp, r7
 80178f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178fa:	4770      	bx	lr
 80178fc:	08017901 	.word	0x08017901

08017900 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017900:	b480      	push	{r7}
 8017902:	b085      	sub	sp, #20
 8017904:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8017906:	2300      	movs	r3, #0
 8017908:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801790a:	4b12      	ldr	r3, [pc, #72]	; (8017954 <prvTaskExitError+0x54>)
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017912:	d00a      	beq.n	801792a <prvTaskExitError+0x2a>
	__asm volatile
 8017914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017918:	f383 8811 	msr	BASEPRI, r3
 801791c:	f3bf 8f6f 	isb	sy
 8017920:	f3bf 8f4f 	dsb	sy
 8017924:	60fb      	str	r3, [r7, #12]
}
 8017926:	bf00      	nop
 8017928:	e7fe      	b.n	8017928 <prvTaskExitError+0x28>
	__asm volatile
 801792a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801792e:	f383 8811 	msr	BASEPRI, r3
 8017932:	f3bf 8f6f 	isb	sy
 8017936:	f3bf 8f4f 	dsb	sy
 801793a:	60bb      	str	r3, [r7, #8]
}
 801793c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801793e:	bf00      	nop
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	2b00      	cmp	r3, #0
 8017944:	d0fc      	beq.n	8017940 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017946:	bf00      	nop
 8017948:	bf00      	nop
 801794a:	3714      	adds	r7, #20
 801794c:	46bd      	mov	sp, r7
 801794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017952:	4770      	bx	lr
 8017954:	200000d0 	.word	0x200000d0
	...

08017960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017960:	4b07      	ldr	r3, [pc, #28]	; (8017980 <pxCurrentTCBConst2>)
 8017962:	6819      	ldr	r1, [r3, #0]
 8017964:	6808      	ldr	r0, [r1, #0]
 8017966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801796a:	f380 8809 	msr	PSP, r0
 801796e:	f3bf 8f6f 	isb	sy
 8017972:	f04f 0000 	mov.w	r0, #0
 8017976:	f380 8811 	msr	BASEPRI, r0
 801797a:	4770      	bx	lr
 801797c:	f3af 8000 	nop.w

08017980 <pxCurrentTCBConst2>:
 8017980:	20000c20 	.word	0x20000c20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017984:	bf00      	nop
 8017986:	bf00      	nop

08017988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017988:	4808      	ldr	r0, [pc, #32]	; (80179ac <prvPortStartFirstTask+0x24>)
 801798a:	6800      	ldr	r0, [r0, #0]
 801798c:	6800      	ldr	r0, [r0, #0]
 801798e:	f380 8808 	msr	MSP, r0
 8017992:	f04f 0000 	mov.w	r0, #0
 8017996:	f380 8814 	msr	CONTROL, r0
 801799a:	b662      	cpsie	i
 801799c:	b661      	cpsie	f
 801799e:	f3bf 8f4f 	dsb	sy
 80179a2:	f3bf 8f6f 	isb	sy
 80179a6:	df00      	svc	0
 80179a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80179aa:	bf00      	nop
 80179ac:	e000ed08 	.word	0xe000ed08

080179b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80179b0:	b580      	push	{r7, lr}
 80179b2:	b086      	sub	sp, #24
 80179b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80179b6:	4b46      	ldr	r3, [pc, #280]	; (8017ad0 <xPortStartScheduler+0x120>)
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	4a46      	ldr	r2, [pc, #280]	; (8017ad4 <xPortStartScheduler+0x124>)
 80179bc:	4293      	cmp	r3, r2
 80179be:	d10a      	bne.n	80179d6 <xPortStartScheduler+0x26>
	__asm volatile
 80179c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179c4:	f383 8811 	msr	BASEPRI, r3
 80179c8:	f3bf 8f6f 	isb	sy
 80179cc:	f3bf 8f4f 	dsb	sy
 80179d0:	613b      	str	r3, [r7, #16]
}
 80179d2:	bf00      	nop
 80179d4:	e7fe      	b.n	80179d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80179d6:	4b3e      	ldr	r3, [pc, #248]	; (8017ad0 <xPortStartScheduler+0x120>)
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	4a3f      	ldr	r2, [pc, #252]	; (8017ad8 <xPortStartScheduler+0x128>)
 80179dc:	4293      	cmp	r3, r2
 80179de:	d10a      	bne.n	80179f6 <xPortStartScheduler+0x46>
	__asm volatile
 80179e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179e4:	f383 8811 	msr	BASEPRI, r3
 80179e8:	f3bf 8f6f 	isb	sy
 80179ec:	f3bf 8f4f 	dsb	sy
 80179f0:	60fb      	str	r3, [r7, #12]
}
 80179f2:	bf00      	nop
 80179f4:	e7fe      	b.n	80179f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80179f6:	4b39      	ldr	r3, [pc, #228]	; (8017adc <xPortStartScheduler+0x12c>)
 80179f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80179fa:	697b      	ldr	r3, [r7, #20]
 80179fc:	781b      	ldrb	r3, [r3, #0]
 80179fe:	b2db      	uxtb	r3, r3
 8017a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017a02:	697b      	ldr	r3, [r7, #20]
 8017a04:	22ff      	movs	r2, #255	; 0xff
 8017a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017a08:	697b      	ldr	r3, [r7, #20]
 8017a0a:	781b      	ldrb	r3, [r3, #0]
 8017a0c:	b2db      	uxtb	r3, r3
 8017a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017a10:	78fb      	ldrb	r3, [r7, #3]
 8017a12:	b2db      	uxtb	r3, r3
 8017a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017a18:	b2da      	uxtb	r2, r3
 8017a1a:	4b31      	ldr	r3, [pc, #196]	; (8017ae0 <xPortStartScheduler+0x130>)
 8017a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017a1e:	4b31      	ldr	r3, [pc, #196]	; (8017ae4 <xPortStartScheduler+0x134>)
 8017a20:	2207      	movs	r2, #7
 8017a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017a24:	e009      	b.n	8017a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8017a26:	4b2f      	ldr	r3, [pc, #188]	; (8017ae4 <xPortStartScheduler+0x134>)
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	3b01      	subs	r3, #1
 8017a2c:	4a2d      	ldr	r2, [pc, #180]	; (8017ae4 <xPortStartScheduler+0x134>)
 8017a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017a30:	78fb      	ldrb	r3, [r7, #3]
 8017a32:	b2db      	uxtb	r3, r3
 8017a34:	005b      	lsls	r3, r3, #1
 8017a36:	b2db      	uxtb	r3, r3
 8017a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017a3a:	78fb      	ldrb	r3, [r7, #3]
 8017a3c:	b2db      	uxtb	r3, r3
 8017a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017a42:	2b80      	cmp	r3, #128	; 0x80
 8017a44:	d0ef      	beq.n	8017a26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017a46:	4b27      	ldr	r3, [pc, #156]	; (8017ae4 <xPortStartScheduler+0x134>)
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	f1c3 0307 	rsb	r3, r3, #7
 8017a4e:	2b04      	cmp	r3, #4
 8017a50:	d00a      	beq.n	8017a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8017a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a56:	f383 8811 	msr	BASEPRI, r3
 8017a5a:	f3bf 8f6f 	isb	sy
 8017a5e:	f3bf 8f4f 	dsb	sy
 8017a62:	60bb      	str	r3, [r7, #8]
}
 8017a64:	bf00      	nop
 8017a66:	e7fe      	b.n	8017a66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8017a68:	4b1e      	ldr	r3, [pc, #120]	; (8017ae4 <xPortStartScheduler+0x134>)
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	021b      	lsls	r3, r3, #8
 8017a6e:	4a1d      	ldr	r2, [pc, #116]	; (8017ae4 <xPortStartScheduler+0x134>)
 8017a70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017a72:	4b1c      	ldr	r3, [pc, #112]	; (8017ae4 <xPortStartScheduler+0x134>)
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8017a7a:	4a1a      	ldr	r2, [pc, #104]	; (8017ae4 <xPortStartScheduler+0x134>)
 8017a7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	b2da      	uxtb	r2, r3
 8017a82:	697b      	ldr	r3, [r7, #20]
 8017a84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8017a86:	4b18      	ldr	r3, [pc, #96]	; (8017ae8 <xPortStartScheduler+0x138>)
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	4a17      	ldr	r2, [pc, #92]	; (8017ae8 <xPortStartScheduler+0x138>)
 8017a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017a92:	4b15      	ldr	r3, [pc, #84]	; (8017ae8 <xPortStartScheduler+0x138>)
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	4a14      	ldr	r2, [pc, #80]	; (8017ae8 <xPortStartScheduler+0x138>)
 8017a98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8017a9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017a9e:	f000 f8dd 	bl	8017c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017aa2:	4b12      	ldr	r3, [pc, #72]	; (8017aec <xPortStartScheduler+0x13c>)
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8017aa8:	f000 f8fc 	bl	8017ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017aac:	4b10      	ldr	r3, [pc, #64]	; (8017af0 <xPortStartScheduler+0x140>)
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	4a0f      	ldr	r2, [pc, #60]	; (8017af0 <xPortStartScheduler+0x140>)
 8017ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8017ab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017ab8:	f7ff ff66 	bl	8017988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017abc:	f7ff fc20 	bl	8017300 <vTaskSwitchContext>
	prvTaskExitError();
 8017ac0:	f7ff ff1e 	bl	8017900 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017ac4:	2300      	movs	r3, #0
}
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	3718      	adds	r7, #24
 8017aca:	46bd      	mov	sp, r7
 8017acc:	bd80      	pop	{r7, pc}
 8017ace:	bf00      	nop
 8017ad0:	e000ed00 	.word	0xe000ed00
 8017ad4:	410fc271 	.word	0x410fc271
 8017ad8:	410fc270 	.word	0x410fc270
 8017adc:	e000e400 	.word	0xe000e400
 8017ae0:	20000d4c 	.word	0x20000d4c
 8017ae4:	20000d50 	.word	0x20000d50
 8017ae8:	e000ed20 	.word	0xe000ed20
 8017aec:	200000d0 	.word	0x200000d0
 8017af0:	e000ef34 	.word	0xe000ef34

08017af4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017af4:	b480      	push	{r7}
 8017af6:	b083      	sub	sp, #12
 8017af8:	af00      	add	r7, sp, #0
	__asm volatile
 8017afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017afe:	f383 8811 	msr	BASEPRI, r3
 8017b02:	f3bf 8f6f 	isb	sy
 8017b06:	f3bf 8f4f 	dsb	sy
 8017b0a:	607b      	str	r3, [r7, #4]
}
 8017b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017b0e:	4b0f      	ldr	r3, [pc, #60]	; (8017b4c <vPortEnterCritical+0x58>)
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	3301      	adds	r3, #1
 8017b14:	4a0d      	ldr	r2, [pc, #52]	; (8017b4c <vPortEnterCritical+0x58>)
 8017b16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017b18:	4b0c      	ldr	r3, [pc, #48]	; (8017b4c <vPortEnterCritical+0x58>)
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	2b01      	cmp	r3, #1
 8017b1e:	d10f      	bne.n	8017b40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017b20:	4b0b      	ldr	r3, [pc, #44]	; (8017b50 <vPortEnterCritical+0x5c>)
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	b2db      	uxtb	r3, r3
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d00a      	beq.n	8017b40 <vPortEnterCritical+0x4c>
	__asm volatile
 8017b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b2e:	f383 8811 	msr	BASEPRI, r3
 8017b32:	f3bf 8f6f 	isb	sy
 8017b36:	f3bf 8f4f 	dsb	sy
 8017b3a:	603b      	str	r3, [r7, #0]
}
 8017b3c:	bf00      	nop
 8017b3e:	e7fe      	b.n	8017b3e <vPortEnterCritical+0x4a>
	}
}
 8017b40:	bf00      	nop
 8017b42:	370c      	adds	r7, #12
 8017b44:	46bd      	mov	sp, r7
 8017b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b4a:	4770      	bx	lr
 8017b4c:	200000d0 	.word	0x200000d0
 8017b50:	e000ed04 	.word	0xe000ed04

08017b54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017b54:	b480      	push	{r7}
 8017b56:	b083      	sub	sp, #12
 8017b58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017b5a:	4b12      	ldr	r3, [pc, #72]	; (8017ba4 <vPortExitCritical+0x50>)
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d10a      	bne.n	8017b78 <vPortExitCritical+0x24>
	__asm volatile
 8017b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b66:	f383 8811 	msr	BASEPRI, r3
 8017b6a:	f3bf 8f6f 	isb	sy
 8017b6e:	f3bf 8f4f 	dsb	sy
 8017b72:	607b      	str	r3, [r7, #4]
}
 8017b74:	bf00      	nop
 8017b76:	e7fe      	b.n	8017b76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017b78:	4b0a      	ldr	r3, [pc, #40]	; (8017ba4 <vPortExitCritical+0x50>)
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	3b01      	subs	r3, #1
 8017b7e:	4a09      	ldr	r2, [pc, #36]	; (8017ba4 <vPortExitCritical+0x50>)
 8017b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017b82:	4b08      	ldr	r3, [pc, #32]	; (8017ba4 <vPortExitCritical+0x50>)
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d105      	bne.n	8017b96 <vPortExitCritical+0x42>
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017b8e:	683b      	ldr	r3, [r7, #0]
 8017b90:	f383 8811 	msr	BASEPRI, r3
}
 8017b94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017b96:	bf00      	nop
 8017b98:	370c      	adds	r7, #12
 8017b9a:	46bd      	mov	sp, r7
 8017b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba0:	4770      	bx	lr
 8017ba2:	bf00      	nop
 8017ba4:	200000d0 	.word	0x200000d0
	...

08017bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017bb0:	f3ef 8009 	mrs	r0, PSP
 8017bb4:	f3bf 8f6f 	isb	sy
 8017bb8:	4b15      	ldr	r3, [pc, #84]	; (8017c10 <pxCurrentTCBConst>)
 8017bba:	681a      	ldr	r2, [r3, #0]
 8017bbc:	f01e 0f10 	tst.w	lr, #16
 8017bc0:	bf08      	it	eq
 8017bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bca:	6010      	str	r0, [r2, #0]
 8017bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8017bd4:	f380 8811 	msr	BASEPRI, r0
 8017bd8:	f3bf 8f4f 	dsb	sy
 8017bdc:	f3bf 8f6f 	isb	sy
 8017be0:	f7ff fb8e 	bl	8017300 <vTaskSwitchContext>
 8017be4:	f04f 0000 	mov.w	r0, #0
 8017be8:	f380 8811 	msr	BASEPRI, r0
 8017bec:	bc09      	pop	{r0, r3}
 8017bee:	6819      	ldr	r1, [r3, #0]
 8017bf0:	6808      	ldr	r0, [r1, #0]
 8017bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bf6:	f01e 0f10 	tst.w	lr, #16
 8017bfa:	bf08      	it	eq
 8017bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017c00:	f380 8809 	msr	PSP, r0
 8017c04:	f3bf 8f6f 	isb	sy
 8017c08:	4770      	bx	lr
 8017c0a:	bf00      	nop
 8017c0c:	f3af 8000 	nop.w

08017c10 <pxCurrentTCBConst>:
 8017c10:	20000c20 	.word	0x20000c20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017c14:	bf00      	nop
 8017c16:	bf00      	nop

08017c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b082      	sub	sp, #8
 8017c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8017c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c22:	f383 8811 	msr	BASEPRI, r3
 8017c26:	f3bf 8f6f 	isb	sy
 8017c2a:	f3bf 8f4f 	dsb	sy
 8017c2e:	607b      	str	r3, [r7, #4]
}
 8017c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017c32:	f7ff faad 	bl	8017190 <xTaskIncrementTick>
 8017c36:	4603      	mov	r3, r0
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d003      	beq.n	8017c44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017c3c:	4b06      	ldr	r3, [pc, #24]	; (8017c58 <SysTick_Handler+0x40>)
 8017c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c42:	601a      	str	r2, [r3, #0]
 8017c44:	2300      	movs	r3, #0
 8017c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017c48:	683b      	ldr	r3, [r7, #0]
 8017c4a:	f383 8811 	msr	BASEPRI, r3
}
 8017c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017c50:	bf00      	nop
 8017c52:	3708      	adds	r7, #8
 8017c54:	46bd      	mov	sp, r7
 8017c56:	bd80      	pop	{r7, pc}
 8017c58:	e000ed04 	.word	0xe000ed04

08017c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8017c5c:	b480      	push	{r7}
 8017c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017c60:	4b0b      	ldr	r3, [pc, #44]	; (8017c90 <vPortSetupTimerInterrupt+0x34>)
 8017c62:	2200      	movs	r2, #0
 8017c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017c66:	4b0b      	ldr	r3, [pc, #44]	; (8017c94 <vPortSetupTimerInterrupt+0x38>)
 8017c68:	2200      	movs	r2, #0
 8017c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017c6c:	4b0a      	ldr	r3, [pc, #40]	; (8017c98 <vPortSetupTimerInterrupt+0x3c>)
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	4a0a      	ldr	r2, [pc, #40]	; (8017c9c <vPortSetupTimerInterrupt+0x40>)
 8017c72:	fba2 2303 	umull	r2, r3, r2, r3
 8017c76:	099b      	lsrs	r3, r3, #6
 8017c78:	4a09      	ldr	r2, [pc, #36]	; (8017ca0 <vPortSetupTimerInterrupt+0x44>)
 8017c7a:	3b01      	subs	r3, #1
 8017c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017c7e:	4b04      	ldr	r3, [pc, #16]	; (8017c90 <vPortSetupTimerInterrupt+0x34>)
 8017c80:	2207      	movs	r2, #7
 8017c82:	601a      	str	r2, [r3, #0]
}
 8017c84:	bf00      	nop
 8017c86:	46bd      	mov	sp, r7
 8017c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c8c:	4770      	bx	lr
 8017c8e:	bf00      	nop
 8017c90:	e000e010 	.word	0xe000e010
 8017c94:	e000e018 	.word	0xe000e018
 8017c98:	20000004 	.word	0x20000004
 8017c9c:	10624dd3 	.word	0x10624dd3
 8017ca0:	e000e014 	.word	0xe000e014

08017ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8017cb4 <vPortEnableVFP+0x10>
 8017ca8:	6801      	ldr	r1, [r0, #0]
 8017caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8017cae:	6001      	str	r1, [r0, #0]
 8017cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017cb2:	bf00      	nop
 8017cb4:	e000ed88 	.word	0xe000ed88

08017cb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017cb8:	b480      	push	{r7}
 8017cba:	b085      	sub	sp, #20
 8017cbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017cbe:	f3ef 8305 	mrs	r3, IPSR
 8017cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	2b0f      	cmp	r3, #15
 8017cc8:	d914      	bls.n	8017cf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017cca:	4a17      	ldr	r2, [pc, #92]	; (8017d28 <vPortValidateInterruptPriority+0x70>)
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	4413      	add	r3, r2
 8017cd0:	781b      	ldrb	r3, [r3, #0]
 8017cd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017cd4:	4b15      	ldr	r3, [pc, #84]	; (8017d2c <vPortValidateInterruptPriority+0x74>)
 8017cd6:	781b      	ldrb	r3, [r3, #0]
 8017cd8:	7afa      	ldrb	r2, [r7, #11]
 8017cda:	429a      	cmp	r2, r3
 8017cdc:	d20a      	bcs.n	8017cf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8017cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ce2:	f383 8811 	msr	BASEPRI, r3
 8017ce6:	f3bf 8f6f 	isb	sy
 8017cea:	f3bf 8f4f 	dsb	sy
 8017cee:	607b      	str	r3, [r7, #4]
}
 8017cf0:	bf00      	nop
 8017cf2:	e7fe      	b.n	8017cf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017cf4:	4b0e      	ldr	r3, [pc, #56]	; (8017d30 <vPortValidateInterruptPriority+0x78>)
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8017cfc:	4b0d      	ldr	r3, [pc, #52]	; (8017d34 <vPortValidateInterruptPriority+0x7c>)
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	429a      	cmp	r2, r3
 8017d02:	d90a      	bls.n	8017d1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8017d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d08:	f383 8811 	msr	BASEPRI, r3
 8017d0c:	f3bf 8f6f 	isb	sy
 8017d10:	f3bf 8f4f 	dsb	sy
 8017d14:	603b      	str	r3, [r7, #0]
}
 8017d16:	bf00      	nop
 8017d18:	e7fe      	b.n	8017d18 <vPortValidateInterruptPriority+0x60>
	}
 8017d1a:	bf00      	nop
 8017d1c:	3714      	adds	r7, #20
 8017d1e:	46bd      	mov	sp, r7
 8017d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d24:	4770      	bx	lr
 8017d26:	bf00      	nop
 8017d28:	e000e3f0 	.word	0xe000e3f0
 8017d2c:	20000d4c 	.word	0x20000d4c
 8017d30:	e000ed0c 	.word	0xe000ed0c
 8017d34:	20000d50 	.word	0x20000d50

08017d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	b08a      	sub	sp, #40	; 0x28
 8017d3c:	af00      	add	r7, sp, #0
 8017d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017d40:	2300      	movs	r3, #0
 8017d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017d44:	f7ff f96a 	bl	801701c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017d48:	4b5b      	ldr	r3, [pc, #364]	; (8017eb8 <pvPortMalloc+0x180>)
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d101      	bne.n	8017d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017d50:	f000 f920 	bl	8017f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017d54:	4b59      	ldr	r3, [pc, #356]	; (8017ebc <pvPortMalloc+0x184>)
 8017d56:	681a      	ldr	r2, [r3, #0]
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	4013      	ands	r3, r2
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	f040 8093 	bne.w	8017e88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d01d      	beq.n	8017da4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8017d68:	2208      	movs	r2, #8
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	4413      	add	r3, r2
 8017d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	f003 0307 	and.w	r3, r3, #7
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d014      	beq.n	8017da4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	f023 0307 	bic.w	r3, r3, #7
 8017d80:	3308      	adds	r3, #8
 8017d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	f003 0307 	and.w	r3, r3, #7
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d00a      	beq.n	8017da4 <pvPortMalloc+0x6c>
	__asm volatile
 8017d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d92:	f383 8811 	msr	BASEPRI, r3
 8017d96:	f3bf 8f6f 	isb	sy
 8017d9a:	f3bf 8f4f 	dsb	sy
 8017d9e:	617b      	str	r3, [r7, #20]
}
 8017da0:	bf00      	nop
 8017da2:	e7fe      	b.n	8017da2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d06e      	beq.n	8017e88 <pvPortMalloc+0x150>
 8017daa:	4b45      	ldr	r3, [pc, #276]	; (8017ec0 <pvPortMalloc+0x188>)
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	687a      	ldr	r2, [r7, #4]
 8017db0:	429a      	cmp	r2, r3
 8017db2:	d869      	bhi.n	8017e88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8017db4:	4b43      	ldr	r3, [pc, #268]	; (8017ec4 <pvPortMalloc+0x18c>)
 8017db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8017db8:	4b42      	ldr	r3, [pc, #264]	; (8017ec4 <pvPortMalloc+0x18c>)
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017dbe:	e004      	b.n	8017dca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8017dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8017dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dcc:	685b      	ldr	r3, [r3, #4]
 8017dce:	687a      	ldr	r2, [r7, #4]
 8017dd0:	429a      	cmp	r2, r3
 8017dd2:	d903      	bls.n	8017ddc <pvPortMalloc+0xa4>
 8017dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d1f1      	bne.n	8017dc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017ddc:	4b36      	ldr	r3, [pc, #216]	; (8017eb8 <pvPortMalloc+0x180>)
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017de2:	429a      	cmp	r2, r3
 8017de4:	d050      	beq.n	8017e88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017de6:	6a3b      	ldr	r3, [r7, #32]
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	2208      	movs	r2, #8
 8017dec:	4413      	add	r3, r2
 8017dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017df2:	681a      	ldr	r2, [r3, #0]
 8017df4:	6a3b      	ldr	r3, [r7, #32]
 8017df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dfa:	685a      	ldr	r2, [r3, #4]
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	1ad2      	subs	r2, r2, r3
 8017e00:	2308      	movs	r3, #8
 8017e02:	005b      	lsls	r3, r3, #1
 8017e04:	429a      	cmp	r2, r3
 8017e06:	d91f      	bls.n	8017e48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	4413      	add	r3, r2
 8017e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017e10:	69bb      	ldr	r3, [r7, #24]
 8017e12:	f003 0307 	and.w	r3, r3, #7
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d00a      	beq.n	8017e30 <pvPortMalloc+0xf8>
	__asm volatile
 8017e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e1e:	f383 8811 	msr	BASEPRI, r3
 8017e22:	f3bf 8f6f 	isb	sy
 8017e26:	f3bf 8f4f 	dsb	sy
 8017e2a:	613b      	str	r3, [r7, #16]
}
 8017e2c:	bf00      	nop
 8017e2e:	e7fe      	b.n	8017e2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e32:	685a      	ldr	r2, [r3, #4]
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	1ad2      	subs	r2, r2, r3
 8017e38:	69bb      	ldr	r3, [r7, #24]
 8017e3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e3e:	687a      	ldr	r2, [r7, #4]
 8017e40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017e42:	69b8      	ldr	r0, [r7, #24]
 8017e44:	f000 f908 	bl	8018058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017e48:	4b1d      	ldr	r3, [pc, #116]	; (8017ec0 <pvPortMalloc+0x188>)
 8017e4a:	681a      	ldr	r2, [r3, #0]
 8017e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e4e:	685b      	ldr	r3, [r3, #4]
 8017e50:	1ad3      	subs	r3, r2, r3
 8017e52:	4a1b      	ldr	r2, [pc, #108]	; (8017ec0 <pvPortMalloc+0x188>)
 8017e54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017e56:	4b1a      	ldr	r3, [pc, #104]	; (8017ec0 <pvPortMalloc+0x188>)
 8017e58:	681a      	ldr	r2, [r3, #0]
 8017e5a:	4b1b      	ldr	r3, [pc, #108]	; (8017ec8 <pvPortMalloc+0x190>)
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	429a      	cmp	r2, r3
 8017e60:	d203      	bcs.n	8017e6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017e62:	4b17      	ldr	r3, [pc, #92]	; (8017ec0 <pvPortMalloc+0x188>)
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	4a18      	ldr	r2, [pc, #96]	; (8017ec8 <pvPortMalloc+0x190>)
 8017e68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e6c:	685a      	ldr	r2, [r3, #4]
 8017e6e:	4b13      	ldr	r3, [pc, #76]	; (8017ebc <pvPortMalloc+0x184>)
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	431a      	orrs	r2, r3
 8017e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e7a:	2200      	movs	r2, #0
 8017e7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8017e7e:	4b13      	ldr	r3, [pc, #76]	; (8017ecc <pvPortMalloc+0x194>)
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	3301      	adds	r3, #1
 8017e84:	4a11      	ldr	r2, [pc, #68]	; (8017ecc <pvPortMalloc+0x194>)
 8017e86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017e88:	f7ff f8d6 	bl	8017038 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017e8c:	69fb      	ldr	r3, [r7, #28]
 8017e8e:	f003 0307 	and.w	r3, r3, #7
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d00a      	beq.n	8017eac <pvPortMalloc+0x174>
	__asm volatile
 8017e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e9a:	f383 8811 	msr	BASEPRI, r3
 8017e9e:	f3bf 8f6f 	isb	sy
 8017ea2:	f3bf 8f4f 	dsb	sy
 8017ea6:	60fb      	str	r3, [r7, #12]
}
 8017ea8:	bf00      	nop
 8017eaa:	e7fe      	b.n	8017eaa <pvPortMalloc+0x172>
	return pvReturn;
 8017eac:	69fb      	ldr	r3, [r7, #28]
}
 8017eae:	4618      	mov	r0, r3
 8017eb0:	3728      	adds	r7, #40	; 0x28
 8017eb2:	46bd      	mov	sp, r7
 8017eb4:	bd80      	pop	{r7, pc}
 8017eb6:	bf00      	nop
 8017eb8:	2000d55c 	.word	0x2000d55c
 8017ebc:	2000d570 	.word	0x2000d570
 8017ec0:	2000d560 	.word	0x2000d560
 8017ec4:	2000d554 	.word	0x2000d554
 8017ec8:	2000d564 	.word	0x2000d564
 8017ecc:	2000d568 	.word	0x2000d568

08017ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017ed0:	b580      	push	{r7, lr}
 8017ed2:	b086      	sub	sp, #24
 8017ed4:	af00      	add	r7, sp, #0
 8017ed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d04d      	beq.n	8017f7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017ee2:	2308      	movs	r3, #8
 8017ee4:	425b      	negs	r3, r3
 8017ee6:	697a      	ldr	r2, [r7, #20]
 8017ee8:	4413      	add	r3, r2
 8017eea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017eec:	697b      	ldr	r3, [r7, #20]
 8017eee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017ef0:	693b      	ldr	r3, [r7, #16]
 8017ef2:	685a      	ldr	r2, [r3, #4]
 8017ef4:	4b24      	ldr	r3, [pc, #144]	; (8017f88 <vPortFree+0xb8>)
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	4013      	ands	r3, r2
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d10a      	bne.n	8017f14 <vPortFree+0x44>
	__asm volatile
 8017efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f02:	f383 8811 	msr	BASEPRI, r3
 8017f06:	f3bf 8f6f 	isb	sy
 8017f0a:	f3bf 8f4f 	dsb	sy
 8017f0e:	60fb      	str	r3, [r7, #12]
}
 8017f10:	bf00      	nop
 8017f12:	e7fe      	b.n	8017f12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017f14:	693b      	ldr	r3, [r7, #16]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d00a      	beq.n	8017f32 <vPortFree+0x62>
	__asm volatile
 8017f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f20:	f383 8811 	msr	BASEPRI, r3
 8017f24:	f3bf 8f6f 	isb	sy
 8017f28:	f3bf 8f4f 	dsb	sy
 8017f2c:	60bb      	str	r3, [r7, #8]
}
 8017f2e:	bf00      	nop
 8017f30:	e7fe      	b.n	8017f30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017f32:	693b      	ldr	r3, [r7, #16]
 8017f34:	685a      	ldr	r2, [r3, #4]
 8017f36:	4b14      	ldr	r3, [pc, #80]	; (8017f88 <vPortFree+0xb8>)
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	4013      	ands	r3, r2
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d01e      	beq.n	8017f7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017f40:	693b      	ldr	r3, [r7, #16]
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d11a      	bne.n	8017f7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017f48:	693b      	ldr	r3, [r7, #16]
 8017f4a:	685a      	ldr	r2, [r3, #4]
 8017f4c:	4b0e      	ldr	r3, [pc, #56]	; (8017f88 <vPortFree+0xb8>)
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	43db      	mvns	r3, r3
 8017f52:	401a      	ands	r2, r3
 8017f54:	693b      	ldr	r3, [r7, #16]
 8017f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017f58:	f7ff f860 	bl	801701c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017f5c:	693b      	ldr	r3, [r7, #16]
 8017f5e:	685a      	ldr	r2, [r3, #4]
 8017f60:	4b0a      	ldr	r3, [pc, #40]	; (8017f8c <vPortFree+0xbc>)
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	4413      	add	r3, r2
 8017f66:	4a09      	ldr	r2, [pc, #36]	; (8017f8c <vPortFree+0xbc>)
 8017f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017f6a:	6938      	ldr	r0, [r7, #16]
 8017f6c:	f000 f874 	bl	8018058 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8017f70:	4b07      	ldr	r3, [pc, #28]	; (8017f90 <vPortFree+0xc0>)
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	3301      	adds	r3, #1
 8017f76:	4a06      	ldr	r2, [pc, #24]	; (8017f90 <vPortFree+0xc0>)
 8017f78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8017f7a:	f7ff f85d 	bl	8017038 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017f7e:	bf00      	nop
 8017f80:	3718      	adds	r7, #24
 8017f82:	46bd      	mov	sp, r7
 8017f84:	bd80      	pop	{r7, pc}
 8017f86:	bf00      	nop
 8017f88:	2000d570 	.word	0x2000d570
 8017f8c:	2000d560 	.word	0x2000d560
 8017f90:	2000d56c 	.word	0x2000d56c

08017f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017f94:	b480      	push	{r7}
 8017f96:	b085      	sub	sp, #20
 8017f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017f9a:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8017f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017fa0:	4b27      	ldr	r3, [pc, #156]	; (8018040 <prvHeapInit+0xac>)
 8017fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	f003 0307 	and.w	r3, r3, #7
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d00c      	beq.n	8017fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	3307      	adds	r3, #7
 8017fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017fb4:	68fb      	ldr	r3, [r7, #12]
 8017fb6:	f023 0307 	bic.w	r3, r3, #7
 8017fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017fbc:	68ba      	ldr	r2, [r7, #8]
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	1ad3      	subs	r3, r2, r3
 8017fc2:	4a1f      	ldr	r2, [pc, #124]	; (8018040 <prvHeapInit+0xac>)
 8017fc4:	4413      	add	r3, r2
 8017fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017fcc:	4a1d      	ldr	r2, [pc, #116]	; (8018044 <prvHeapInit+0xb0>)
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017fd2:	4b1c      	ldr	r3, [pc, #112]	; (8018044 <prvHeapInit+0xb0>)
 8017fd4:	2200      	movs	r2, #0
 8017fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	68ba      	ldr	r2, [r7, #8]
 8017fdc:	4413      	add	r3, r2
 8017fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017fe0:	2208      	movs	r2, #8
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	1a9b      	subs	r3, r3, r2
 8017fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	f023 0307 	bic.w	r3, r3, #7
 8017fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017ff0:	68fb      	ldr	r3, [r7, #12]
 8017ff2:	4a15      	ldr	r2, [pc, #84]	; (8018048 <prvHeapInit+0xb4>)
 8017ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017ff6:	4b14      	ldr	r3, [pc, #80]	; (8018048 <prvHeapInit+0xb4>)
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	2200      	movs	r2, #0
 8017ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017ffe:	4b12      	ldr	r3, [pc, #72]	; (8018048 <prvHeapInit+0xb4>)
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	2200      	movs	r2, #0
 8018004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801800a:	683b      	ldr	r3, [r7, #0]
 801800c:	68fa      	ldr	r2, [r7, #12]
 801800e:	1ad2      	subs	r2, r2, r3
 8018010:	683b      	ldr	r3, [r7, #0]
 8018012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018014:	4b0c      	ldr	r3, [pc, #48]	; (8018048 <prvHeapInit+0xb4>)
 8018016:	681a      	ldr	r2, [r3, #0]
 8018018:	683b      	ldr	r3, [r7, #0]
 801801a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801801c:	683b      	ldr	r3, [r7, #0]
 801801e:	685b      	ldr	r3, [r3, #4]
 8018020:	4a0a      	ldr	r2, [pc, #40]	; (801804c <prvHeapInit+0xb8>)
 8018022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018024:	683b      	ldr	r3, [r7, #0]
 8018026:	685b      	ldr	r3, [r3, #4]
 8018028:	4a09      	ldr	r2, [pc, #36]	; (8018050 <prvHeapInit+0xbc>)
 801802a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801802c:	4b09      	ldr	r3, [pc, #36]	; (8018054 <prvHeapInit+0xc0>)
 801802e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018032:	601a      	str	r2, [r3, #0]
}
 8018034:	bf00      	nop
 8018036:	3714      	adds	r7, #20
 8018038:	46bd      	mov	sp, r7
 801803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803e:	4770      	bx	lr
 8018040:	20000d54 	.word	0x20000d54
 8018044:	2000d554 	.word	0x2000d554
 8018048:	2000d55c 	.word	0x2000d55c
 801804c:	2000d564 	.word	0x2000d564
 8018050:	2000d560 	.word	0x2000d560
 8018054:	2000d570 	.word	0x2000d570

08018058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018058:	b480      	push	{r7}
 801805a:	b085      	sub	sp, #20
 801805c:	af00      	add	r7, sp, #0
 801805e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018060:	4b28      	ldr	r3, [pc, #160]	; (8018104 <prvInsertBlockIntoFreeList+0xac>)
 8018062:	60fb      	str	r3, [r7, #12]
 8018064:	e002      	b.n	801806c <prvInsertBlockIntoFreeList+0x14>
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	60fb      	str	r3, [r7, #12]
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	687a      	ldr	r2, [r7, #4]
 8018072:	429a      	cmp	r2, r3
 8018074:	d8f7      	bhi.n	8018066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	685b      	ldr	r3, [r3, #4]
 801807e:	68ba      	ldr	r2, [r7, #8]
 8018080:	4413      	add	r3, r2
 8018082:	687a      	ldr	r2, [r7, #4]
 8018084:	429a      	cmp	r2, r3
 8018086:	d108      	bne.n	801809a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	685a      	ldr	r2, [r3, #4]
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	685b      	ldr	r3, [r3, #4]
 8018090:	441a      	add	r2, r3
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	685b      	ldr	r3, [r3, #4]
 80180a2:	68ba      	ldr	r2, [r7, #8]
 80180a4:	441a      	add	r2, r3
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	429a      	cmp	r2, r3
 80180ac:	d118      	bne.n	80180e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	681a      	ldr	r2, [r3, #0]
 80180b2:	4b15      	ldr	r3, [pc, #84]	; (8018108 <prvInsertBlockIntoFreeList+0xb0>)
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	429a      	cmp	r2, r3
 80180b8:	d00d      	beq.n	80180d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	685a      	ldr	r2, [r3, #4]
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	685b      	ldr	r3, [r3, #4]
 80180c4:	441a      	add	r2, r3
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	681a      	ldr	r2, [r3, #0]
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	601a      	str	r2, [r3, #0]
 80180d4:	e008      	b.n	80180e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80180d6:	4b0c      	ldr	r3, [pc, #48]	; (8018108 <prvInsertBlockIntoFreeList+0xb0>)
 80180d8:	681a      	ldr	r2, [r3, #0]
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	601a      	str	r2, [r3, #0]
 80180de:	e003      	b.n	80180e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	681a      	ldr	r2, [r3, #0]
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80180e8:	68fa      	ldr	r2, [r7, #12]
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	429a      	cmp	r2, r3
 80180ee:	d002      	beq.n	80180f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	687a      	ldr	r2, [r7, #4]
 80180f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80180f6:	bf00      	nop
 80180f8:	3714      	adds	r7, #20
 80180fa:	46bd      	mov	sp, r7
 80180fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018100:	4770      	bx	lr
 8018102:	bf00      	nop
 8018104:	2000d554 	.word	0x2000d554
 8018108:	2000d55c 	.word	0x2000d55c

0801810c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801810c:	b580      	push	{r7, lr}
 801810e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018110:	2200      	movs	r2, #0
 8018112:	4912      	ldr	r1, [pc, #72]	; (801815c <MX_USB_DEVICE_Init+0x50>)
 8018114:	4812      	ldr	r0, [pc, #72]	; (8018160 <MX_USB_DEVICE_Init+0x54>)
 8018116:	f7fd f986 	bl	8015426 <USBD_Init>
 801811a:	4603      	mov	r3, r0
 801811c:	2b00      	cmp	r3, #0
 801811e:	d001      	beq.n	8018124 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018120:	f7ea ff4c 	bl	8002fbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8018124:	490f      	ldr	r1, [pc, #60]	; (8018164 <MX_USB_DEVICE_Init+0x58>)
 8018126:	480e      	ldr	r0, [pc, #56]	; (8018160 <MX_USB_DEVICE_Init+0x54>)
 8018128:	f7fd f9ad 	bl	8015486 <USBD_RegisterClass>
 801812c:	4603      	mov	r3, r0
 801812e:	2b00      	cmp	r3, #0
 8018130:	d001      	beq.n	8018136 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018132:	f7ea ff43 	bl	8002fbc <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8018136:	490c      	ldr	r1, [pc, #48]	; (8018168 <MX_USB_DEVICE_Init+0x5c>)
 8018138:	4809      	ldr	r0, [pc, #36]	; (8018160 <MX_USB_DEVICE_Init+0x54>)
 801813a:	f7fb fc57 	bl	80139ec <USBD_MSC_RegisterStorage>
 801813e:	4603      	mov	r3, r0
 8018140:	2b00      	cmp	r3, #0
 8018142:	d001      	beq.n	8018148 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018144:	f7ea ff3a 	bl	8002fbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018148:	4805      	ldr	r0, [pc, #20]	; (8018160 <MX_USB_DEVICE_Init+0x54>)
 801814a:	f7fd f9d2 	bl	80154f2 <USBD_Start>
 801814e:	4603      	mov	r3, r0
 8018150:	2b00      	cmp	r3, #0
 8018152:	d001      	beq.n	8018158 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018154:	f7ea ff32 	bl	8002fbc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018158:	bf00      	nop
 801815a:	bd80      	pop	{r7, pc}
 801815c:	200000d4 	.word	0x200000d4
 8018160:	2000d574 	.word	0x2000d574
 8018164:	20000028 	.word	0x20000028
 8018168:	20000124 	.word	0x20000124

0801816c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801816c:	b480      	push	{r7}
 801816e:	b083      	sub	sp, #12
 8018170:	af00      	add	r7, sp, #0
 8018172:	4603      	mov	r3, r0
 8018174:	6039      	str	r1, [r7, #0]
 8018176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018178:	683b      	ldr	r3, [r7, #0]
 801817a:	2212      	movs	r2, #18
 801817c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801817e:	4b03      	ldr	r3, [pc, #12]	; (801818c <USBD_FS_DeviceDescriptor+0x20>)
}
 8018180:	4618      	mov	r0, r3
 8018182:	370c      	adds	r7, #12
 8018184:	46bd      	mov	sp, r7
 8018186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818a:	4770      	bx	lr
 801818c:	200000f0 	.word	0x200000f0

08018190 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018190:	b480      	push	{r7}
 8018192:	b083      	sub	sp, #12
 8018194:	af00      	add	r7, sp, #0
 8018196:	4603      	mov	r3, r0
 8018198:	6039      	str	r1, [r7, #0]
 801819a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801819c:	683b      	ldr	r3, [r7, #0]
 801819e:	2204      	movs	r2, #4
 80181a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80181a2:	4b03      	ldr	r3, [pc, #12]	; (80181b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80181a4:	4618      	mov	r0, r3
 80181a6:	370c      	adds	r7, #12
 80181a8:	46bd      	mov	sp, r7
 80181aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ae:	4770      	bx	lr
 80181b0:	20000104 	.word	0x20000104

080181b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80181b4:	b580      	push	{r7, lr}
 80181b6:	b082      	sub	sp, #8
 80181b8:	af00      	add	r7, sp, #0
 80181ba:	4603      	mov	r3, r0
 80181bc:	6039      	str	r1, [r7, #0]
 80181be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80181c0:	79fb      	ldrb	r3, [r7, #7]
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d105      	bne.n	80181d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80181c6:	683a      	ldr	r2, [r7, #0]
 80181c8:	4907      	ldr	r1, [pc, #28]	; (80181e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80181ca:	4808      	ldr	r0, [pc, #32]	; (80181ec <USBD_FS_ProductStrDescriptor+0x38>)
 80181cc:	f7fe fb3e 	bl	801684c <USBD_GetString>
 80181d0:	e004      	b.n	80181dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80181d2:	683a      	ldr	r2, [r7, #0]
 80181d4:	4904      	ldr	r1, [pc, #16]	; (80181e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80181d6:	4805      	ldr	r0, [pc, #20]	; (80181ec <USBD_FS_ProductStrDescriptor+0x38>)
 80181d8:	f7fe fb38 	bl	801684c <USBD_GetString>
  }
  return USBD_StrDesc;
 80181dc:	4b02      	ldr	r3, [pc, #8]	; (80181e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80181de:	4618      	mov	r0, r3
 80181e0:	3708      	adds	r7, #8
 80181e2:	46bd      	mov	sp, r7
 80181e4:	bd80      	pop	{r7, pc}
 80181e6:	bf00      	nop
 80181e8:	2000d850 	.word	0x2000d850
 80181ec:	0801d1d8 	.word	0x0801d1d8

080181f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b082      	sub	sp, #8
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	4603      	mov	r3, r0
 80181f8:	6039      	str	r1, [r7, #0]
 80181fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80181fc:	683a      	ldr	r2, [r7, #0]
 80181fe:	4904      	ldr	r1, [pc, #16]	; (8018210 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018200:	4804      	ldr	r0, [pc, #16]	; (8018214 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018202:	f7fe fb23 	bl	801684c <USBD_GetString>
  return USBD_StrDesc;
 8018206:	4b02      	ldr	r3, [pc, #8]	; (8018210 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018208:	4618      	mov	r0, r3
 801820a:	3708      	adds	r7, #8
 801820c:	46bd      	mov	sp, r7
 801820e:	bd80      	pop	{r7, pc}
 8018210:	2000d850 	.word	0x2000d850
 8018214:	0801d1ec 	.word	0x0801d1ec

08018218 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018218:	b580      	push	{r7, lr}
 801821a:	b082      	sub	sp, #8
 801821c:	af00      	add	r7, sp, #0
 801821e:	4603      	mov	r3, r0
 8018220:	6039      	str	r1, [r7, #0]
 8018222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018224:	683b      	ldr	r3, [r7, #0]
 8018226:	221a      	movs	r2, #26
 8018228:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801822a:	f000 f843 	bl	80182b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801822e:	4b02      	ldr	r3, [pc, #8]	; (8018238 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018230:	4618      	mov	r0, r3
 8018232:	3708      	adds	r7, #8
 8018234:	46bd      	mov	sp, r7
 8018236:	bd80      	pop	{r7, pc}
 8018238:	20000108 	.word	0x20000108

0801823c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801823c:	b580      	push	{r7, lr}
 801823e:	b082      	sub	sp, #8
 8018240:	af00      	add	r7, sp, #0
 8018242:	4603      	mov	r3, r0
 8018244:	6039      	str	r1, [r7, #0]
 8018246:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018248:	79fb      	ldrb	r3, [r7, #7]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d105      	bne.n	801825a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801824e:	683a      	ldr	r2, [r7, #0]
 8018250:	4907      	ldr	r1, [pc, #28]	; (8018270 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018252:	4808      	ldr	r0, [pc, #32]	; (8018274 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018254:	f7fe fafa 	bl	801684c <USBD_GetString>
 8018258:	e004      	b.n	8018264 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801825a:	683a      	ldr	r2, [r7, #0]
 801825c:	4904      	ldr	r1, [pc, #16]	; (8018270 <USBD_FS_ConfigStrDescriptor+0x34>)
 801825e:	4805      	ldr	r0, [pc, #20]	; (8018274 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018260:	f7fe faf4 	bl	801684c <USBD_GetString>
  }
  return USBD_StrDesc;
 8018264:	4b02      	ldr	r3, [pc, #8]	; (8018270 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018266:	4618      	mov	r0, r3
 8018268:	3708      	adds	r7, #8
 801826a:	46bd      	mov	sp, r7
 801826c:	bd80      	pop	{r7, pc}
 801826e:	bf00      	nop
 8018270:	2000d850 	.word	0x2000d850
 8018274:	0801d200 	.word	0x0801d200

08018278 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018278:	b580      	push	{r7, lr}
 801827a:	b082      	sub	sp, #8
 801827c:	af00      	add	r7, sp, #0
 801827e:	4603      	mov	r3, r0
 8018280:	6039      	str	r1, [r7, #0]
 8018282:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018284:	79fb      	ldrb	r3, [r7, #7]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d105      	bne.n	8018296 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801828a:	683a      	ldr	r2, [r7, #0]
 801828c:	4907      	ldr	r1, [pc, #28]	; (80182ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 801828e:	4808      	ldr	r0, [pc, #32]	; (80182b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018290:	f7fe fadc 	bl	801684c <USBD_GetString>
 8018294:	e004      	b.n	80182a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018296:	683a      	ldr	r2, [r7, #0]
 8018298:	4904      	ldr	r1, [pc, #16]	; (80182ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 801829a:	4805      	ldr	r0, [pc, #20]	; (80182b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801829c:	f7fe fad6 	bl	801684c <USBD_GetString>
  }
  return USBD_StrDesc;
 80182a0:	4b02      	ldr	r3, [pc, #8]	; (80182ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80182a2:	4618      	mov	r0, r3
 80182a4:	3708      	adds	r7, #8
 80182a6:	46bd      	mov	sp, r7
 80182a8:	bd80      	pop	{r7, pc}
 80182aa:	bf00      	nop
 80182ac:	2000d850 	.word	0x2000d850
 80182b0:	0801d20c 	.word	0x0801d20c

080182b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80182b4:	b580      	push	{r7, lr}
 80182b6:	b084      	sub	sp, #16
 80182b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80182ba:	4b0f      	ldr	r3, [pc, #60]	; (80182f8 <Get_SerialNum+0x44>)
 80182bc:	681b      	ldr	r3, [r3, #0]
 80182be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80182c0:	4b0e      	ldr	r3, [pc, #56]	; (80182fc <Get_SerialNum+0x48>)
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80182c6:	4b0e      	ldr	r3, [pc, #56]	; (8018300 <Get_SerialNum+0x4c>)
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80182cc:	68fa      	ldr	r2, [r7, #12]
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	4413      	add	r3, r2
 80182d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d009      	beq.n	80182ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80182da:	2208      	movs	r2, #8
 80182dc:	4909      	ldr	r1, [pc, #36]	; (8018304 <Get_SerialNum+0x50>)
 80182de:	68f8      	ldr	r0, [r7, #12]
 80182e0:	f000 f814 	bl	801830c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80182e4:	2204      	movs	r2, #4
 80182e6:	4908      	ldr	r1, [pc, #32]	; (8018308 <Get_SerialNum+0x54>)
 80182e8:	68b8      	ldr	r0, [r7, #8]
 80182ea:	f000 f80f 	bl	801830c <IntToUnicode>
  }
}
 80182ee:	bf00      	nop
 80182f0:	3710      	adds	r7, #16
 80182f2:	46bd      	mov	sp, r7
 80182f4:	bd80      	pop	{r7, pc}
 80182f6:	bf00      	nop
 80182f8:	1fff7a10 	.word	0x1fff7a10
 80182fc:	1fff7a14 	.word	0x1fff7a14
 8018300:	1fff7a18 	.word	0x1fff7a18
 8018304:	2000010a 	.word	0x2000010a
 8018308:	2000011a 	.word	0x2000011a

0801830c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801830c:	b480      	push	{r7}
 801830e:	b087      	sub	sp, #28
 8018310:	af00      	add	r7, sp, #0
 8018312:	60f8      	str	r0, [r7, #12]
 8018314:	60b9      	str	r1, [r7, #8]
 8018316:	4613      	mov	r3, r2
 8018318:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801831a:	2300      	movs	r3, #0
 801831c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801831e:	2300      	movs	r3, #0
 8018320:	75fb      	strb	r3, [r7, #23]
 8018322:	e027      	b.n	8018374 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	0f1b      	lsrs	r3, r3, #28
 8018328:	2b09      	cmp	r3, #9
 801832a:	d80b      	bhi.n	8018344 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	0f1b      	lsrs	r3, r3, #28
 8018330:	b2da      	uxtb	r2, r3
 8018332:	7dfb      	ldrb	r3, [r7, #23]
 8018334:	005b      	lsls	r3, r3, #1
 8018336:	4619      	mov	r1, r3
 8018338:	68bb      	ldr	r3, [r7, #8]
 801833a:	440b      	add	r3, r1
 801833c:	3230      	adds	r2, #48	; 0x30
 801833e:	b2d2      	uxtb	r2, r2
 8018340:	701a      	strb	r2, [r3, #0]
 8018342:	e00a      	b.n	801835a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	0f1b      	lsrs	r3, r3, #28
 8018348:	b2da      	uxtb	r2, r3
 801834a:	7dfb      	ldrb	r3, [r7, #23]
 801834c:	005b      	lsls	r3, r3, #1
 801834e:	4619      	mov	r1, r3
 8018350:	68bb      	ldr	r3, [r7, #8]
 8018352:	440b      	add	r3, r1
 8018354:	3237      	adds	r2, #55	; 0x37
 8018356:	b2d2      	uxtb	r2, r2
 8018358:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	011b      	lsls	r3, r3, #4
 801835e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018360:	7dfb      	ldrb	r3, [r7, #23]
 8018362:	005b      	lsls	r3, r3, #1
 8018364:	3301      	adds	r3, #1
 8018366:	68ba      	ldr	r2, [r7, #8]
 8018368:	4413      	add	r3, r2
 801836a:	2200      	movs	r2, #0
 801836c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801836e:	7dfb      	ldrb	r3, [r7, #23]
 8018370:	3301      	adds	r3, #1
 8018372:	75fb      	strb	r3, [r7, #23]
 8018374:	7dfa      	ldrb	r2, [r7, #23]
 8018376:	79fb      	ldrb	r3, [r7, #7]
 8018378:	429a      	cmp	r2, r3
 801837a:	d3d3      	bcc.n	8018324 <IntToUnicode+0x18>
  }
}
 801837c:	bf00      	nop
 801837e:	bf00      	nop
 8018380:	371c      	adds	r7, #28
 8018382:	46bd      	mov	sp, r7
 8018384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018388:	4770      	bx	lr

0801838a <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801838a:	b480      	push	{r7}
 801838c:	b083      	sub	sp, #12
 801838e:	af00      	add	r7, sp, #0
 8018390:	4603      	mov	r3, r0
 8018392:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 8018394:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8018396:	4618      	mov	r0, r3
 8018398:	370c      	adds	r7, #12
 801839a:	46bd      	mov	sp, r7
 801839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183a0:	4770      	bx	lr
	...

080183a4 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80183a4:	b580      	push	{r7, lr}
 80183a6:	b08e      	sub	sp, #56	; 0x38
 80183a8:	af00      	add	r7, sp, #0
 80183aa:	4603      	mov	r3, r0
 80183ac:	60b9      	str	r1, [r7, #8]
 80183ae:	607a      	str	r2, [r7, #4]
 80183b0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  HAL_SD_CardInfoTypeDef info;
  int8_t ret = -1;
 80183b2:	23ff      	movs	r3, #255	; 0xff
 80183b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  HAL_SD_GetCardInfo(&hsd, &info);
 80183b8:	f107 0314 	add.w	r3, r7, #20
 80183bc:	4619      	mov	r1, r3
 80183be:	480a      	ldr	r0, [pc, #40]	; (80183e8 <STORAGE_GetCapacity_FS+0x44>)
 80183c0:	f7f5 fb0c 	bl	800d9dc <HAL_SD_GetCardInfo>

  *block_num =  info.LogBlockNbr  - 1;
 80183c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183c6:	1e5a      	subs	r2, r3, #1
 80183c8:	68bb      	ldr	r3, [r7, #8]
 80183ca:	601a      	str	r2, [r3, #0]
  *block_size = info.LogBlockSize;
 80183cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183ce:	b29a      	uxth	r2, r3
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	801a      	strh	r2, [r3, #0]
  ret = 0;
 80183d4:	2300      	movs	r3, #0
 80183d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  return ret;
 80183da:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 80183de:	4618      	mov	r0, r3
 80183e0:	3738      	adds	r7, #56	; 0x38
 80183e2:	46bd      	mov	sp, r7
 80183e4:	bd80      	pop	{r7, pc}
 80183e6:	bf00      	nop
 80183e8:	20000648 	.word	0x20000648

080183ec <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80183ec:	b480      	push	{r7}
 80183ee:	b083      	sub	sp, #12
 80183f0:	af00      	add	r7, sp, #0
 80183f2:	4603      	mov	r3, r0
 80183f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 80183f6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80183f8:	4618      	mov	r0, r3
 80183fa:	370c      	adds	r7, #12
 80183fc:	46bd      	mov	sp, r7
 80183fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018402:	4770      	bx	lr

08018404 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8018404:	b480      	push	{r7}
 8018406:	b083      	sub	sp, #12
 8018408:	af00      	add	r7, sp, #0
 801840a:	4603      	mov	r3, r0
 801840c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 801840e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018410:	4618      	mov	r0, r3
 8018412:	370c      	adds	r7, #12
 8018414:	46bd      	mov	sp, r7
 8018416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801841a:	4770      	bx	lr

0801841c <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b088      	sub	sp, #32
 8018420:	af02      	add	r7, sp, #8
 8018422:	60b9      	str	r1, [r7, #8]
 8018424:	607a      	str	r2, [r7, #4]
 8018426:	461a      	mov	r2, r3
 8018428:	4603      	mov	r3, r0
 801842a:	73fb      	strb	r3, [r7, #15]
 801842c:	4613      	mov	r3, r2
 801842e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

   int8_t ret = -1;
 8018430:	23ff      	movs	r3, #255	; 0xff
 8018432:	75fb      	strb	r3, [r7, #23]

  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018434:	89bb      	ldrh	r3, [r7, #12]
 8018436:	f04f 32ff 	mov.w	r2, #4294967295
 801843a:	9200      	str	r2, [sp, #0]
 801843c:	687a      	ldr	r2, [r7, #4]
 801843e:	68b9      	ldr	r1, [r7, #8]
 8018440:	4808      	ldr	r0, [pc, #32]	; (8018464 <STORAGE_Read_FS+0x48>)
 8018442:	f7f4 fdc3 	bl	800cfcc <HAL_SD_ReadBlocks>

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 8018446:	bf00      	nop
 8018448:	4806      	ldr	r0, [pc, #24]	; (8018464 <STORAGE_Read_FS+0x48>)
 801844a:	f7f5 fb8d 	bl	800db68 <HAL_SD_GetCardState>
 801844e:	4603      	mov	r3, r0
 8018450:	2b04      	cmp	r3, #4
 8018452:	d1f9      	bne.n	8018448 <STORAGE_Read_FS+0x2c>
  ret = 0;
 8018454:	2300      	movs	r3, #0
 8018456:	75fb      	strb	r3, [r7, #23]
  return ret;
 8018458:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801845c:	4618      	mov	r0, r3
 801845e:	3718      	adds	r7, #24
 8018460:	46bd      	mov	sp, r7
 8018462:	bd80      	pop	{r7, pc}
 8018464:	20000648 	.word	0x20000648

08018468 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018468:	b580      	push	{r7, lr}
 801846a:	b088      	sub	sp, #32
 801846c:	af02      	add	r7, sp, #8
 801846e:	60b9      	str	r1, [r7, #8]
 8018470:	607a      	str	r2, [r7, #4]
 8018472:	461a      	mov	r2, r3
 8018474:	4603      	mov	r3, r0
 8018476:	73fb      	strb	r3, [r7, #15]
 8018478:	4613      	mov	r3, r2
 801847a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  int8_t ret = -1;
 801847c:	23ff      	movs	r3, #255	; 0xff
 801847e:	75fb      	strb	r3, [r7, #23]

   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018480:	89bb      	ldrh	r3, [r7, #12]
 8018482:	f04f 32ff 	mov.w	r2, #4294967295
 8018486:	9200      	str	r2, [sp, #0]
 8018488:	687a      	ldr	r2, [r7, #4]
 801848a:	68b9      	ldr	r1, [r7, #8]
 801848c:	4808      	ldr	r0, [pc, #32]	; (80184b0 <STORAGE_Write_FS+0x48>)
 801848e:	f7f4 ff7b 	bl	800d388 <HAL_SD_WriteBlocks>


  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 8018492:	bf00      	nop
 8018494:	4806      	ldr	r0, [pc, #24]	; (80184b0 <STORAGE_Write_FS+0x48>)
 8018496:	f7f5 fb67 	bl	800db68 <HAL_SD_GetCardState>
 801849a:	4603      	mov	r3, r0
 801849c:	2b04      	cmp	r3, #4
 801849e:	d1f9      	bne.n	8018494 <STORAGE_Write_FS+0x2c>
  ret = 0;
 80184a0:	2300      	movs	r3, #0
 80184a2:	75fb      	strb	r3, [r7, #23]
  return ret;
 80184a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 80184a8:	4618      	mov	r0, r3
 80184aa:	3718      	adds	r7, #24
 80184ac:	46bd      	mov	sp, r7
 80184ae:	bd80      	pop	{r7, pc}
 80184b0:	20000648 	.word	0x20000648

080184b4 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80184b4:	b480      	push	{r7}
 80184b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80184b8:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80184ba:	4618      	mov	r0, r3
 80184bc:	46bd      	mov	sp, r7
 80184be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184c2:	4770      	bx	lr

080184c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80184c4:	b580      	push	{r7, lr}
 80184c6:	b08a      	sub	sp, #40	; 0x28
 80184c8:	af00      	add	r7, sp, #0
 80184ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80184cc:	f107 0314 	add.w	r3, r7, #20
 80184d0:	2200      	movs	r2, #0
 80184d2:	601a      	str	r2, [r3, #0]
 80184d4:	605a      	str	r2, [r3, #4]
 80184d6:	609a      	str	r2, [r3, #8]
 80184d8:	60da      	str	r2, [r3, #12]
 80184da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80184e4:	d13a      	bne.n	801855c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80184e6:	2300      	movs	r3, #0
 80184e8:	613b      	str	r3, [r7, #16]
 80184ea:	4b1e      	ldr	r3, [pc, #120]	; (8018564 <HAL_PCD_MspInit+0xa0>)
 80184ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80184ee:	4a1d      	ldr	r2, [pc, #116]	; (8018564 <HAL_PCD_MspInit+0xa0>)
 80184f0:	f043 0301 	orr.w	r3, r3, #1
 80184f4:	6313      	str	r3, [r2, #48]	; 0x30
 80184f6:	4b1b      	ldr	r3, [pc, #108]	; (8018564 <HAL_PCD_MspInit+0xa0>)
 80184f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80184fa:	f003 0301 	and.w	r3, r3, #1
 80184fe:	613b      	str	r3, [r7, #16]
 8018500:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018502:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018508:	2302      	movs	r3, #2
 801850a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801850c:	2300      	movs	r3, #0
 801850e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018510:	2303      	movs	r3, #3
 8018512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018514:	230a      	movs	r3, #10
 8018516:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018518:	f107 0314 	add.w	r3, r7, #20
 801851c:	4619      	mov	r1, r3
 801851e:	4812      	ldr	r0, [pc, #72]	; (8018568 <HAL_PCD_MspInit+0xa4>)
 8018520:	f7f2 fb64 	bl	800abec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018524:	4b0f      	ldr	r3, [pc, #60]	; (8018564 <HAL_PCD_MspInit+0xa0>)
 8018526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018528:	4a0e      	ldr	r2, [pc, #56]	; (8018564 <HAL_PCD_MspInit+0xa0>)
 801852a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801852e:	6353      	str	r3, [r2, #52]	; 0x34
 8018530:	2300      	movs	r3, #0
 8018532:	60fb      	str	r3, [r7, #12]
 8018534:	4b0b      	ldr	r3, [pc, #44]	; (8018564 <HAL_PCD_MspInit+0xa0>)
 8018536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018538:	4a0a      	ldr	r2, [pc, #40]	; (8018564 <HAL_PCD_MspInit+0xa0>)
 801853a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801853e:	6453      	str	r3, [r2, #68]	; 0x44
 8018540:	4b08      	ldr	r3, [pc, #32]	; (8018564 <HAL_PCD_MspInit+0xa0>)
 8018542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018548:	60fb      	str	r3, [r7, #12]
 801854a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801854c:	2200      	movs	r2, #0
 801854e:	2105      	movs	r1, #5
 8018550:	2043      	movs	r0, #67	; 0x43
 8018552:	f7f1 fd5d 	bl	800a010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018556:	2043      	movs	r0, #67	; 0x43
 8018558:	f7f1 fd76 	bl	800a048 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801855c:	bf00      	nop
 801855e:	3728      	adds	r7, #40	; 0x28
 8018560:	46bd      	mov	sp, r7
 8018562:	bd80      	pop	{r7, pc}
 8018564:	40023800 	.word	0x40023800
 8018568:	40020000 	.word	0x40020000

0801856c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801856c:	b580      	push	{r7, lr}
 801856e:	b082      	sub	sp, #8
 8018570:	af00      	add	r7, sp, #0
 8018572:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8018580:	4619      	mov	r1, r3
 8018582:	4610      	mov	r0, r2
 8018584:	f7fd f802 	bl	801558c <USBD_LL_SetupStage>
}
 8018588:	bf00      	nop
 801858a:	3708      	adds	r7, #8
 801858c:	46bd      	mov	sp, r7
 801858e:	bd80      	pop	{r7, pc}

08018590 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b082      	sub	sp, #8
 8018594:	af00      	add	r7, sp, #0
 8018596:	6078      	str	r0, [r7, #4]
 8018598:	460b      	mov	r3, r1
 801859a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80185a2:	78fa      	ldrb	r2, [r7, #3]
 80185a4:	6879      	ldr	r1, [r7, #4]
 80185a6:	4613      	mov	r3, r2
 80185a8:	00db      	lsls	r3, r3, #3
 80185aa:	4413      	add	r3, r2
 80185ac:	009b      	lsls	r3, r3, #2
 80185ae:	440b      	add	r3, r1
 80185b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80185b4:	681a      	ldr	r2, [r3, #0]
 80185b6:	78fb      	ldrb	r3, [r7, #3]
 80185b8:	4619      	mov	r1, r3
 80185ba:	f7fd f83c 	bl	8015636 <USBD_LL_DataOutStage>
}
 80185be:	bf00      	nop
 80185c0:	3708      	adds	r7, #8
 80185c2:	46bd      	mov	sp, r7
 80185c4:	bd80      	pop	{r7, pc}

080185c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80185c6:	b580      	push	{r7, lr}
 80185c8:	b082      	sub	sp, #8
 80185ca:	af00      	add	r7, sp, #0
 80185cc:	6078      	str	r0, [r7, #4]
 80185ce:	460b      	mov	r3, r1
 80185d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80185d8:	78fa      	ldrb	r2, [r7, #3]
 80185da:	6879      	ldr	r1, [r7, #4]
 80185dc:	4613      	mov	r3, r2
 80185de:	00db      	lsls	r3, r3, #3
 80185e0:	4413      	add	r3, r2
 80185e2:	009b      	lsls	r3, r3, #2
 80185e4:	440b      	add	r3, r1
 80185e6:	334c      	adds	r3, #76	; 0x4c
 80185e8:	681a      	ldr	r2, [r3, #0]
 80185ea:	78fb      	ldrb	r3, [r7, #3]
 80185ec:	4619      	mov	r1, r3
 80185ee:	f7fd f8d5 	bl	801579c <USBD_LL_DataInStage>
}
 80185f2:	bf00      	nop
 80185f4:	3708      	adds	r7, #8
 80185f6:	46bd      	mov	sp, r7
 80185f8:	bd80      	pop	{r7, pc}

080185fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80185fa:	b580      	push	{r7, lr}
 80185fc:	b082      	sub	sp, #8
 80185fe:	af00      	add	r7, sp, #0
 8018600:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018608:	4618      	mov	r0, r3
 801860a:	f7fd fa09 	bl	8015a20 <USBD_LL_SOF>
}
 801860e:	bf00      	nop
 8018610:	3708      	adds	r7, #8
 8018612:	46bd      	mov	sp, r7
 8018614:	bd80      	pop	{r7, pc}

08018616 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018616:	b580      	push	{r7, lr}
 8018618:	b084      	sub	sp, #16
 801861a:	af00      	add	r7, sp, #0
 801861c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801861e:	2301      	movs	r3, #1
 8018620:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	68db      	ldr	r3, [r3, #12]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d102      	bne.n	8018630 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801862a:	2300      	movs	r3, #0
 801862c:	73fb      	strb	r3, [r7, #15]
 801862e:	e008      	b.n	8018642 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	68db      	ldr	r3, [r3, #12]
 8018634:	2b02      	cmp	r3, #2
 8018636:	d102      	bne.n	801863e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018638:	2301      	movs	r3, #1
 801863a:	73fb      	strb	r3, [r7, #15]
 801863c:	e001      	b.n	8018642 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801863e:	f7ea fcbd 	bl	8002fbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018648:	7bfa      	ldrb	r2, [r7, #15]
 801864a:	4611      	mov	r1, r2
 801864c:	4618      	mov	r0, r3
 801864e:	f7fd f9a9 	bl	80159a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018658:	4618      	mov	r0, r3
 801865a:	f7fd f951 	bl	8015900 <USBD_LL_Reset>
}
 801865e:	bf00      	nop
 8018660:	3710      	adds	r7, #16
 8018662:	46bd      	mov	sp, r7
 8018664:	bd80      	pop	{r7, pc}
	...

08018668 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018668:	b580      	push	{r7, lr}
 801866a:	b082      	sub	sp, #8
 801866c:	af00      	add	r7, sp, #0
 801866e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018676:	4618      	mov	r0, r3
 8018678:	f7fd f9a4 	bl	80159c4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	687a      	ldr	r2, [r7, #4]
 8018688:	6812      	ldr	r2, [r2, #0]
 801868a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801868e:	f043 0301 	orr.w	r3, r3, #1
 8018692:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	6a1b      	ldr	r3, [r3, #32]
 8018698:	2b00      	cmp	r3, #0
 801869a:	d005      	beq.n	80186a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801869c:	4b04      	ldr	r3, [pc, #16]	; (80186b0 <HAL_PCD_SuspendCallback+0x48>)
 801869e:	691b      	ldr	r3, [r3, #16]
 80186a0:	4a03      	ldr	r2, [pc, #12]	; (80186b0 <HAL_PCD_SuspendCallback+0x48>)
 80186a2:	f043 0306 	orr.w	r3, r3, #6
 80186a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80186a8:	bf00      	nop
 80186aa:	3708      	adds	r7, #8
 80186ac:	46bd      	mov	sp, r7
 80186ae:	bd80      	pop	{r7, pc}
 80186b0:	e000ed00 	.word	0xe000ed00

080186b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80186b4:	b580      	push	{r7, lr}
 80186b6:	b082      	sub	sp, #8
 80186b8:	af00      	add	r7, sp, #0
 80186ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80186c2:	4618      	mov	r0, r3
 80186c4:	f7fd f994 	bl	80159f0 <USBD_LL_Resume>
}
 80186c8:	bf00      	nop
 80186ca:	3708      	adds	r7, #8
 80186cc:	46bd      	mov	sp, r7
 80186ce:	bd80      	pop	{r7, pc}

080186d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80186d0:	b580      	push	{r7, lr}
 80186d2:	b082      	sub	sp, #8
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	6078      	str	r0, [r7, #4]
 80186d8:	460b      	mov	r3, r1
 80186da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80186e2:	78fa      	ldrb	r2, [r7, #3]
 80186e4:	4611      	mov	r1, r2
 80186e6:	4618      	mov	r0, r3
 80186e8:	f7fd f9ec 	bl	8015ac4 <USBD_LL_IsoOUTIncomplete>
}
 80186ec:	bf00      	nop
 80186ee:	3708      	adds	r7, #8
 80186f0:	46bd      	mov	sp, r7
 80186f2:	bd80      	pop	{r7, pc}

080186f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80186f4:	b580      	push	{r7, lr}
 80186f6:	b082      	sub	sp, #8
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	6078      	str	r0, [r7, #4]
 80186fc:	460b      	mov	r3, r1
 80186fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018706:	78fa      	ldrb	r2, [r7, #3]
 8018708:	4611      	mov	r1, r2
 801870a:	4618      	mov	r0, r3
 801870c:	f7fd f9a8 	bl	8015a60 <USBD_LL_IsoINIncomplete>
}
 8018710:	bf00      	nop
 8018712:	3708      	adds	r7, #8
 8018714:	46bd      	mov	sp, r7
 8018716:	bd80      	pop	{r7, pc}

08018718 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018718:	b580      	push	{r7, lr}
 801871a:	b082      	sub	sp, #8
 801871c:	af00      	add	r7, sp, #0
 801871e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018726:	4618      	mov	r0, r3
 8018728:	f7fd f9fe 	bl	8015b28 <USBD_LL_DevConnected>
}
 801872c:	bf00      	nop
 801872e:	3708      	adds	r7, #8
 8018730:	46bd      	mov	sp, r7
 8018732:	bd80      	pop	{r7, pc}

08018734 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018734:	b580      	push	{r7, lr}
 8018736:	b082      	sub	sp, #8
 8018738:	af00      	add	r7, sp, #0
 801873a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018742:	4618      	mov	r0, r3
 8018744:	f7fd f9fb 	bl	8015b3e <USBD_LL_DevDisconnected>
}
 8018748:	bf00      	nop
 801874a:	3708      	adds	r7, #8
 801874c:	46bd      	mov	sp, r7
 801874e:	bd80      	pop	{r7, pc}

08018750 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018750:	b580      	push	{r7, lr}
 8018752:	b082      	sub	sp, #8
 8018754:	af00      	add	r7, sp, #0
 8018756:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	781b      	ldrb	r3, [r3, #0]
 801875c:	2b00      	cmp	r3, #0
 801875e:	d13c      	bne.n	80187da <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018760:	4a20      	ldr	r2, [pc, #128]	; (80187e4 <USBD_LL_Init+0x94>)
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	4a1e      	ldr	r2, [pc, #120]	; (80187e4 <USBD_LL_Init+0x94>)
 801876c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018770:	4b1c      	ldr	r3, [pc, #112]	; (80187e4 <USBD_LL_Init+0x94>)
 8018772:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8018776:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8018778:	4b1a      	ldr	r3, [pc, #104]	; (80187e4 <USBD_LL_Init+0x94>)
 801877a:	2204      	movs	r2, #4
 801877c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801877e:	4b19      	ldr	r3, [pc, #100]	; (80187e4 <USBD_LL_Init+0x94>)
 8018780:	2202      	movs	r2, #2
 8018782:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018784:	4b17      	ldr	r3, [pc, #92]	; (80187e4 <USBD_LL_Init+0x94>)
 8018786:	2200      	movs	r2, #0
 8018788:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801878a:	4b16      	ldr	r3, [pc, #88]	; (80187e4 <USBD_LL_Init+0x94>)
 801878c:	2202      	movs	r2, #2
 801878e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018790:	4b14      	ldr	r3, [pc, #80]	; (80187e4 <USBD_LL_Init+0x94>)
 8018792:	2200      	movs	r2, #0
 8018794:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018796:	4b13      	ldr	r3, [pc, #76]	; (80187e4 <USBD_LL_Init+0x94>)
 8018798:	2200      	movs	r2, #0
 801879a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801879c:	4b11      	ldr	r3, [pc, #68]	; (80187e4 <USBD_LL_Init+0x94>)
 801879e:	2200      	movs	r2, #0
 80187a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80187a2:	4b10      	ldr	r3, [pc, #64]	; (80187e4 <USBD_LL_Init+0x94>)
 80187a4:	2200      	movs	r2, #0
 80187a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80187a8:	4b0e      	ldr	r3, [pc, #56]	; (80187e4 <USBD_LL_Init+0x94>)
 80187aa:	2200      	movs	r2, #0
 80187ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80187ae:	480d      	ldr	r0, [pc, #52]	; (80187e4 <USBD_LL_Init+0x94>)
 80187b0:	f7f2 fbea 	bl	800af88 <HAL_PCD_Init>
 80187b4:	4603      	mov	r3, r0
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d001      	beq.n	80187be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80187ba:	f7ea fbff 	bl	8002fbc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80187be:	2180      	movs	r1, #128	; 0x80
 80187c0:	4808      	ldr	r0, [pc, #32]	; (80187e4 <USBD_LL_Init+0x94>)
 80187c2:	f7f3 fe6e 	bl	800c4a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80187c6:	2240      	movs	r2, #64	; 0x40
 80187c8:	2100      	movs	r1, #0
 80187ca:	4806      	ldr	r0, [pc, #24]	; (80187e4 <USBD_LL_Init+0x94>)
 80187cc:	f7f3 fe22 	bl	800c414 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80187d0:	2280      	movs	r2, #128	; 0x80
 80187d2:	2101      	movs	r1, #1
 80187d4:	4803      	ldr	r0, [pc, #12]	; (80187e4 <USBD_LL_Init+0x94>)
 80187d6:	f7f3 fe1d 	bl	800c414 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80187da:	2300      	movs	r3, #0
}
 80187dc:	4618      	mov	r0, r3
 80187de:	3708      	adds	r7, #8
 80187e0:	46bd      	mov	sp, r7
 80187e2:	bd80      	pop	{r7, pc}
 80187e4:	2000da50 	.word	0x2000da50

080187e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80187e8:	b580      	push	{r7, lr}
 80187ea:	b084      	sub	sp, #16
 80187ec:	af00      	add	r7, sp, #0
 80187ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80187f0:	2300      	movs	r3, #0
 80187f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80187f4:	2300      	movs	r3, #0
 80187f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80187fe:	4618      	mov	r0, r3
 8018800:	f7f2 fcdf 	bl	800b1c2 <HAL_PCD_Start>
 8018804:	4603      	mov	r3, r0
 8018806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018808:	7bfb      	ldrb	r3, [r7, #15]
 801880a:	4618      	mov	r0, r3
 801880c:	f000 f962 	bl	8018ad4 <USBD_Get_USB_Status>
 8018810:	4603      	mov	r3, r0
 8018812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018814:	7bbb      	ldrb	r3, [r7, #14]
}
 8018816:	4618      	mov	r0, r3
 8018818:	3710      	adds	r7, #16
 801881a:	46bd      	mov	sp, r7
 801881c:	bd80      	pop	{r7, pc}

0801881e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801881e:	b580      	push	{r7, lr}
 8018820:	b084      	sub	sp, #16
 8018822:	af00      	add	r7, sp, #0
 8018824:	6078      	str	r0, [r7, #4]
 8018826:	4608      	mov	r0, r1
 8018828:	4611      	mov	r1, r2
 801882a:	461a      	mov	r2, r3
 801882c:	4603      	mov	r3, r0
 801882e:	70fb      	strb	r3, [r7, #3]
 8018830:	460b      	mov	r3, r1
 8018832:	70bb      	strb	r3, [r7, #2]
 8018834:	4613      	mov	r3, r2
 8018836:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018838:	2300      	movs	r3, #0
 801883a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801883c:	2300      	movs	r3, #0
 801883e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018846:	78bb      	ldrb	r3, [r7, #2]
 8018848:	883a      	ldrh	r2, [r7, #0]
 801884a:	78f9      	ldrb	r1, [r7, #3]
 801884c:	f7f3 f9b0 	bl	800bbb0 <HAL_PCD_EP_Open>
 8018850:	4603      	mov	r3, r0
 8018852:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018854:	7bfb      	ldrb	r3, [r7, #15]
 8018856:	4618      	mov	r0, r3
 8018858:	f000 f93c 	bl	8018ad4 <USBD_Get_USB_Status>
 801885c:	4603      	mov	r3, r0
 801885e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018860:	7bbb      	ldrb	r3, [r7, #14]
}
 8018862:	4618      	mov	r0, r3
 8018864:	3710      	adds	r7, #16
 8018866:	46bd      	mov	sp, r7
 8018868:	bd80      	pop	{r7, pc}

0801886a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801886a:	b580      	push	{r7, lr}
 801886c:	b084      	sub	sp, #16
 801886e:	af00      	add	r7, sp, #0
 8018870:	6078      	str	r0, [r7, #4]
 8018872:	460b      	mov	r3, r1
 8018874:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018876:	2300      	movs	r3, #0
 8018878:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801887a:	2300      	movs	r3, #0
 801887c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018884:	78fa      	ldrb	r2, [r7, #3]
 8018886:	4611      	mov	r1, r2
 8018888:	4618      	mov	r0, r3
 801888a:	f7f3 f9f9 	bl	800bc80 <HAL_PCD_EP_Close>
 801888e:	4603      	mov	r3, r0
 8018890:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018892:	7bfb      	ldrb	r3, [r7, #15]
 8018894:	4618      	mov	r0, r3
 8018896:	f000 f91d 	bl	8018ad4 <USBD_Get_USB_Status>
 801889a:	4603      	mov	r3, r0
 801889c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801889e:	7bbb      	ldrb	r3, [r7, #14]
}
 80188a0:	4618      	mov	r0, r3
 80188a2:	3710      	adds	r7, #16
 80188a4:	46bd      	mov	sp, r7
 80188a6:	bd80      	pop	{r7, pc}

080188a8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80188a8:	b580      	push	{r7, lr}
 80188aa:	b084      	sub	sp, #16
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	6078      	str	r0, [r7, #4]
 80188b0:	460b      	mov	r3, r1
 80188b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80188b4:	2300      	movs	r3, #0
 80188b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80188b8:	2300      	movs	r3, #0
 80188ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80188c2:	78fa      	ldrb	r2, [r7, #3]
 80188c4:	4611      	mov	r1, r2
 80188c6:	4618      	mov	r0, r3
 80188c8:	f7f3 fbbc 	bl	800c044 <HAL_PCD_EP_Flush>
 80188cc:	4603      	mov	r3, r0
 80188ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80188d0:	7bfb      	ldrb	r3, [r7, #15]
 80188d2:	4618      	mov	r0, r3
 80188d4:	f000 f8fe 	bl	8018ad4 <USBD_Get_USB_Status>
 80188d8:	4603      	mov	r3, r0
 80188da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80188dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80188de:	4618      	mov	r0, r3
 80188e0:	3710      	adds	r7, #16
 80188e2:	46bd      	mov	sp, r7
 80188e4:	bd80      	pop	{r7, pc}

080188e6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80188e6:	b580      	push	{r7, lr}
 80188e8:	b084      	sub	sp, #16
 80188ea:	af00      	add	r7, sp, #0
 80188ec:	6078      	str	r0, [r7, #4]
 80188ee:	460b      	mov	r3, r1
 80188f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80188f2:	2300      	movs	r3, #0
 80188f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80188f6:	2300      	movs	r3, #0
 80188f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018900:	78fa      	ldrb	r2, [r7, #3]
 8018902:	4611      	mov	r1, r2
 8018904:	4618      	mov	r0, r3
 8018906:	f7f3 fab2 	bl	800be6e <HAL_PCD_EP_SetStall>
 801890a:	4603      	mov	r3, r0
 801890c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801890e:	7bfb      	ldrb	r3, [r7, #15]
 8018910:	4618      	mov	r0, r3
 8018912:	f000 f8df 	bl	8018ad4 <USBD_Get_USB_Status>
 8018916:	4603      	mov	r3, r0
 8018918:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801891a:	7bbb      	ldrb	r3, [r7, #14]
}
 801891c:	4618      	mov	r0, r3
 801891e:	3710      	adds	r7, #16
 8018920:	46bd      	mov	sp, r7
 8018922:	bd80      	pop	{r7, pc}

08018924 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018924:	b580      	push	{r7, lr}
 8018926:	b084      	sub	sp, #16
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]
 801892c:	460b      	mov	r3, r1
 801892e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018930:	2300      	movs	r3, #0
 8018932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018934:	2300      	movs	r3, #0
 8018936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801893e:	78fa      	ldrb	r2, [r7, #3]
 8018940:	4611      	mov	r1, r2
 8018942:	4618      	mov	r0, r3
 8018944:	f7f3 faf7 	bl	800bf36 <HAL_PCD_EP_ClrStall>
 8018948:	4603      	mov	r3, r0
 801894a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801894c:	7bfb      	ldrb	r3, [r7, #15]
 801894e:	4618      	mov	r0, r3
 8018950:	f000 f8c0 	bl	8018ad4 <USBD_Get_USB_Status>
 8018954:	4603      	mov	r3, r0
 8018956:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018958:	7bbb      	ldrb	r3, [r7, #14]
}
 801895a:	4618      	mov	r0, r3
 801895c:	3710      	adds	r7, #16
 801895e:	46bd      	mov	sp, r7
 8018960:	bd80      	pop	{r7, pc}

08018962 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018962:	b480      	push	{r7}
 8018964:	b085      	sub	sp, #20
 8018966:	af00      	add	r7, sp, #0
 8018968:	6078      	str	r0, [r7, #4]
 801896a:	460b      	mov	r3, r1
 801896c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018974:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018976:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801897a:	2b00      	cmp	r3, #0
 801897c:	da0b      	bge.n	8018996 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801897e:	78fb      	ldrb	r3, [r7, #3]
 8018980:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018984:	68f9      	ldr	r1, [r7, #12]
 8018986:	4613      	mov	r3, r2
 8018988:	00db      	lsls	r3, r3, #3
 801898a:	4413      	add	r3, r2
 801898c:	009b      	lsls	r3, r3, #2
 801898e:	440b      	add	r3, r1
 8018990:	333e      	adds	r3, #62	; 0x3e
 8018992:	781b      	ldrb	r3, [r3, #0]
 8018994:	e00b      	b.n	80189ae <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018996:	78fb      	ldrb	r3, [r7, #3]
 8018998:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801899c:	68f9      	ldr	r1, [r7, #12]
 801899e:	4613      	mov	r3, r2
 80189a0:	00db      	lsls	r3, r3, #3
 80189a2:	4413      	add	r3, r2
 80189a4:	009b      	lsls	r3, r3, #2
 80189a6:	440b      	add	r3, r1
 80189a8:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80189ac:	781b      	ldrb	r3, [r3, #0]
  }
}
 80189ae:	4618      	mov	r0, r3
 80189b0:	3714      	adds	r7, #20
 80189b2:	46bd      	mov	sp, r7
 80189b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189b8:	4770      	bx	lr

080189ba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80189ba:	b580      	push	{r7, lr}
 80189bc:	b084      	sub	sp, #16
 80189be:	af00      	add	r7, sp, #0
 80189c0:	6078      	str	r0, [r7, #4]
 80189c2:	460b      	mov	r3, r1
 80189c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80189c6:	2300      	movs	r3, #0
 80189c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80189ca:	2300      	movs	r3, #0
 80189cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80189d4:	78fa      	ldrb	r2, [r7, #3]
 80189d6:	4611      	mov	r1, r2
 80189d8:	4618      	mov	r0, r3
 80189da:	f7f3 f8c4 	bl	800bb66 <HAL_PCD_SetAddress>
 80189de:	4603      	mov	r3, r0
 80189e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80189e2:	7bfb      	ldrb	r3, [r7, #15]
 80189e4:	4618      	mov	r0, r3
 80189e6:	f000 f875 	bl	8018ad4 <USBD_Get_USB_Status>
 80189ea:	4603      	mov	r3, r0
 80189ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80189ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80189f0:	4618      	mov	r0, r3
 80189f2:	3710      	adds	r7, #16
 80189f4:	46bd      	mov	sp, r7
 80189f6:	bd80      	pop	{r7, pc}

080189f8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80189f8:	b580      	push	{r7, lr}
 80189fa:	b086      	sub	sp, #24
 80189fc:	af00      	add	r7, sp, #0
 80189fe:	60f8      	str	r0, [r7, #12]
 8018a00:	607a      	str	r2, [r7, #4]
 8018a02:	603b      	str	r3, [r7, #0]
 8018a04:	460b      	mov	r3, r1
 8018a06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a08:	2300      	movs	r3, #0
 8018a0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018a16:	7af9      	ldrb	r1, [r7, #11]
 8018a18:	683b      	ldr	r3, [r7, #0]
 8018a1a:	687a      	ldr	r2, [r7, #4]
 8018a1c:	f7f3 f9dd 	bl	800bdda <HAL_PCD_EP_Transmit>
 8018a20:	4603      	mov	r3, r0
 8018a22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018a24:	7dfb      	ldrb	r3, [r7, #23]
 8018a26:	4618      	mov	r0, r3
 8018a28:	f000 f854 	bl	8018ad4 <USBD_Get_USB_Status>
 8018a2c:	4603      	mov	r3, r0
 8018a2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018a30:	7dbb      	ldrb	r3, [r7, #22]
}
 8018a32:	4618      	mov	r0, r3
 8018a34:	3718      	adds	r7, #24
 8018a36:	46bd      	mov	sp, r7
 8018a38:	bd80      	pop	{r7, pc}

08018a3a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018a3a:	b580      	push	{r7, lr}
 8018a3c:	b086      	sub	sp, #24
 8018a3e:	af00      	add	r7, sp, #0
 8018a40:	60f8      	str	r0, [r7, #12]
 8018a42:	607a      	str	r2, [r7, #4]
 8018a44:	603b      	str	r3, [r7, #0]
 8018a46:	460b      	mov	r3, r1
 8018a48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a4a:	2300      	movs	r3, #0
 8018a4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a4e:	2300      	movs	r3, #0
 8018a50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018a58:	7af9      	ldrb	r1, [r7, #11]
 8018a5a:	683b      	ldr	r3, [r7, #0]
 8018a5c:	687a      	ldr	r2, [r7, #4]
 8018a5e:	f7f3 f959 	bl	800bd14 <HAL_PCD_EP_Receive>
 8018a62:	4603      	mov	r3, r0
 8018a64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018a66:	7dfb      	ldrb	r3, [r7, #23]
 8018a68:	4618      	mov	r0, r3
 8018a6a:	f000 f833 	bl	8018ad4 <USBD_Get_USB_Status>
 8018a6e:	4603      	mov	r3, r0
 8018a70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018a72:	7dbb      	ldrb	r3, [r7, #22]
}
 8018a74:	4618      	mov	r0, r3
 8018a76:	3718      	adds	r7, #24
 8018a78:	46bd      	mov	sp, r7
 8018a7a:	bd80      	pop	{r7, pc}

08018a7c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018a7c:	b580      	push	{r7, lr}
 8018a7e:	b082      	sub	sp, #8
 8018a80:	af00      	add	r7, sp, #0
 8018a82:	6078      	str	r0, [r7, #4]
 8018a84:	460b      	mov	r3, r1
 8018a86:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018a8e:	78fa      	ldrb	r2, [r7, #3]
 8018a90:	4611      	mov	r1, r2
 8018a92:	4618      	mov	r0, r3
 8018a94:	f7f3 f989 	bl	800bdaa <HAL_PCD_EP_GetRxCount>
 8018a98:	4603      	mov	r3, r0
}
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	3708      	adds	r7, #8
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	bd80      	pop	{r7, pc}
	...

08018aa4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018aa4:	b480      	push	{r7}
 8018aa6:	b083      	sub	sp, #12
 8018aa8:	af00      	add	r7, sp, #0
 8018aaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018aac:	4b03      	ldr	r3, [pc, #12]	; (8018abc <USBD_static_malloc+0x18>)
}
 8018aae:	4618      	mov	r0, r3
 8018ab0:	370c      	adds	r7, #12
 8018ab2:	46bd      	mov	sp, r7
 8018ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ab8:	4770      	bx	lr
 8018aba:	bf00      	nop
 8018abc:	2000df5c 	.word	0x2000df5c

08018ac0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018ac0:	b480      	push	{r7}
 8018ac2:	b083      	sub	sp, #12
 8018ac4:	af00      	add	r7, sp, #0
 8018ac6:	6078      	str	r0, [r7, #4]

}
 8018ac8:	bf00      	nop
 8018aca:	370c      	adds	r7, #12
 8018acc:	46bd      	mov	sp, r7
 8018ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad2:	4770      	bx	lr

08018ad4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018ad4:	b480      	push	{r7}
 8018ad6:	b085      	sub	sp, #20
 8018ad8:	af00      	add	r7, sp, #0
 8018ada:	4603      	mov	r3, r0
 8018adc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ade:	2300      	movs	r3, #0
 8018ae0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018ae2:	79fb      	ldrb	r3, [r7, #7]
 8018ae4:	2b03      	cmp	r3, #3
 8018ae6:	d817      	bhi.n	8018b18 <USBD_Get_USB_Status+0x44>
 8018ae8:	a201      	add	r2, pc, #4	; (adr r2, 8018af0 <USBD_Get_USB_Status+0x1c>)
 8018aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018aee:	bf00      	nop
 8018af0:	08018b01 	.word	0x08018b01
 8018af4:	08018b07 	.word	0x08018b07
 8018af8:	08018b0d 	.word	0x08018b0d
 8018afc:	08018b13 	.word	0x08018b13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018b00:	2300      	movs	r3, #0
 8018b02:	73fb      	strb	r3, [r7, #15]
    break;
 8018b04:	e00b      	b.n	8018b1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018b06:	2303      	movs	r3, #3
 8018b08:	73fb      	strb	r3, [r7, #15]
    break;
 8018b0a:	e008      	b.n	8018b1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018b0c:	2301      	movs	r3, #1
 8018b0e:	73fb      	strb	r3, [r7, #15]
    break;
 8018b10:	e005      	b.n	8018b1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018b12:	2303      	movs	r3, #3
 8018b14:	73fb      	strb	r3, [r7, #15]
    break;
 8018b16:	e002      	b.n	8018b1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018b18:	2303      	movs	r3, #3
 8018b1a:	73fb      	strb	r3, [r7, #15]
    break;
 8018b1c:	bf00      	nop
  }
  return usb_status;
 8018b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b20:	4618      	mov	r0, r3
 8018b22:	3714      	adds	r7, #20
 8018b24:	46bd      	mov	sp, r7
 8018b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b2a:	4770      	bx	lr

08018b2c <arm_mat_trans_f32>:
 8018b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b30:	f8b0 c000 	ldrh.w	ip, [r0]
 8018b34:	884a      	ldrh	r2, [r1, #2]
 8018b36:	6844      	ldr	r4, [r0, #4]
 8018b38:	8843      	ldrh	r3, [r0, #2]
 8018b3a:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8018b3e:	4562      	cmp	r2, ip
 8018b40:	b083      	sub	sp, #12
 8018b42:	d15f      	bne.n	8018c04 <arm_mat_trans_f32+0xd8>
 8018b44:	f8b1 e000 	ldrh.w	lr, [r1]
 8018b48:	459e      	cmp	lr, r3
 8018b4a:	d15b      	bne.n	8018c04 <arm_mat_trans_f32+0xd8>
 8018b4c:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8018b50:	f00e 0303 	and.w	r3, lr, #3
 8018b54:	461a      	mov	r2, r3
 8018b56:	9301      	str	r3, [sp, #4]
 8018b58:	f108 33ff 	add.w	r3, r8, #4294967295
 8018b5c:	b29b      	uxth	r3, r3
 8018b5e:	f103 0902 	add.w	r9, r3, #2
 8018b62:	3a01      	subs	r2, #1
 8018b64:	3301      	adds	r3, #1
 8018b66:	ea4f 170c 	mov.w	r7, ip, lsl #4
 8018b6a:	fb03 f707 	mul.w	r7, r3, r7
 8018b6e:	b292      	uxth	r2, r2
 8018b70:	3201      	adds	r2, #1
 8018b72:	ea4f 1b03 	mov.w	fp, r3, lsl #4
 8018b76:	463b      	mov	r3, r7
 8018b78:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8018b7c:	4647      	mov	r7, r8
 8018b7e:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8018b82:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8018b86:	2600      	movs	r6, #0
 8018b88:	4698      	mov	r8, r3
 8018b8a:	eb0a 0086 	add.w	r0, sl, r6, lsl #2
 8018b8e:	b3bf      	cbz	r7, 8018c00 <arm_mat_trans_f32+0xd4>
 8018b90:	f104 0210 	add.w	r2, r4, #16
 8018b94:	eb04 0509 	add.w	r5, r4, r9
 8018b98:	4603      	mov	r3, r0
 8018b9a:	ed52 7a04 	vldr	s15, [r2, #-16]
 8018b9e:	edc3 7a00 	vstr	s15, [r3]
 8018ba2:	ed52 7a03 	vldr	s15, [r2, #-12]
 8018ba6:	440b      	add	r3, r1
 8018ba8:	edc3 7a00 	vstr	s15, [r3]
 8018bac:	ed52 7a02 	vldr	s15, [r2, #-8]
 8018bb0:	440b      	add	r3, r1
 8018bb2:	edc3 7a00 	vstr	s15, [r3]
 8018bb6:	ed52 7a01 	vldr	s15, [r2, #-4]
 8018bba:	3210      	adds	r2, #16
 8018bbc:	440b      	add	r3, r1
 8018bbe:	42aa      	cmp	r2, r5
 8018bc0:	edc3 7a00 	vstr	s15, [r3]
 8018bc4:	440b      	add	r3, r1
 8018bc6:	d1e8      	bne.n	8018b9a <arm_mat_trans_f32+0x6e>
 8018bc8:	eb04 030b 	add.w	r3, r4, fp
 8018bcc:	4440      	add	r0, r8
 8018bce:	9a01      	ldr	r2, [sp, #4]
 8018bd0:	b182      	cbz	r2, 8018bf4 <arm_mat_trans_f32+0xc8>
 8018bd2:	eb03 040e 	add.w	r4, r3, lr
 8018bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018bda:	6002      	str	r2, [r0, #0]
 8018bdc:	42a3      	cmp	r3, r4
 8018bde:	4408      	add	r0, r1
 8018be0:	d1f9      	bne.n	8018bd6 <arm_mat_trans_f32+0xaa>
 8018be2:	3601      	adds	r6, #1
 8018be4:	b2b6      	uxth	r6, r6
 8018be6:	4566      	cmp	r6, ip
 8018be8:	d1cf      	bne.n	8018b8a <arm_mat_trans_f32+0x5e>
 8018bea:	2000      	movs	r0, #0
 8018bec:	b240      	sxtb	r0, r0
 8018bee:	b003      	add	sp, #12
 8018bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bf4:	3601      	adds	r6, #1
 8018bf6:	b2b6      	uxth	r6, r6
 8018bf8:	4566      	cmp	r6, ip
 8018bfa:	461c      	mov	r4, r3
 8018bfc:	d1c5      	bne.n	8018b8a <arm_mat_trans_f32+0x5e>
 8018bfe:	e7f4      	b.n	8018bea <arm_mat_trans_f32+0xbe>
 8018c00:	4623      	mov	r3, r4
 8018c02:	e7e4      	b.n	8018bce <arm_mat_trans_f32+0xa2>
 8018c04:	20fd      	movs	r0, #253	; 0xfd
 8018c06:	b240      	sxtb	r0, r0
 8018c08:	b003      	add	sp, #12
 8018c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c0e:	bf00      	nop

08018c10 <arm_mat_mult_f32>:
 8018c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c14:	8843      	ldrh	r3, [r0, #2]
 8018c16:	880d      	ldrh	r5, [r1, #0]
 8018c18:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8018c1c:	6854      	ldr	r4, [r2, #4]
 8018c1e:	8800      	ldrh	r0, [r0, #0]
 8018c20:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 8018c24:	b087      	sub	sp, #28
 8018c26:	429d      	cmp	r5, r3
 8018c28:	9003      	str	r0, [sp, #12]
 8018c2a:	9404      	str	r4, [sp, #16]
 8018c2c:	f040 808d 	bne.w	8018d4a <arm_mat_mult_f32+0x13a>
 8018c30:	8813      	ldrh	r3, [r2, #0]
 8018c32:	4283      	cmp	r3, r0
 8018c34:	f040 8089 	bne.w	8018d4a <arm_mat_mult_f32+0x13a>
 8018c38:	8853      	ldrh	r3, [r2, #2]
 8018c3a:	4543      	cmp	r3, r8
 8018c3c:	f040 8085 	bne.w	8018d4a <arm_mat_mult_f32+0x13a>
 8018c40:	ea4f 0a95 	mov.w	sl, r5, lsr #2
 8018c44:	f005 0303 	and.w	r3, r5, #3
 8018c48:	461a      	mov	r2, r3
 8018c4a:	9301      	str	r3, [sp, #4]
 8018c4c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018c50:	b29b      	uxth	r3, r3
 8018c52:	3301      	adds	r3, #1
 8018c54:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8018c58:	fb0b fb03 	mul.w	fp, fp, r3
 8018c5c:	3a01      	subs	r2, #1
 8018c5e:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
 8018c62:	00ab      	lsls	r3, r5, #2
 8018c64:	b292      	uxth	r2, r2
 8018c66:	9305      	str	r3, [sp, #20]
 8018c68:	2300      	movs	r3, #0
 8018c6a:	3201      	adds	r2, #1
 8018c6c:	9302      	str	r3, [sp, #8]
 8018c6e:	460b      	mov	r3, r1
 8018c70:	684c      	ldr	r4, [r1, #4]
 8018c72:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8018c76:	4651      	mov	r1, sl
 8018c78:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8018c7c:	46da      	mov	sl, fp
 8018c7e:	469b      	mov	fp, r3
 8018c80:	9b04      	ldr	r3, [sp, #16]
 8018c82:	9a02      	ldr	r2, [sp, #8]
 8018c84:	2600      	movs	r6, #0
 8018c86:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 8018c8a:	f10c 0510 	add.w	r5, ip, #16
 8018c8e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8018d54 <arm_mat_mult_f32+0x144>
 8018c92:	2900      	cmp	r1, #0
 8018c94:	d057      	beq.n	8018d46 <arm_mat_mult_f32+0x136>
 8018c96:	f10e 0210 	add.w	r2, lr, #16
 8018c9a:	4623      	mov	r3, r4
 8018c9c:	ed52 5a04 	vldr	s11, [r2, #-16]
 8018ca0:	edd3 6a00 	vldr	s13, [r3]
 8018ca4:	ed12 7a03 	vldr	s14, [r2, #-12]
 8018ca8:	ed12 5a02 	vldr	s10, [r2, #-8]
 8018cac:	ed12 6a01 	vldr	s12, [r2, #-4]
 8018cb0:	4403      	add	r3, r0
 8018cb2:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8018cb6:	edd3 6a00 	vldr	s13, [r3]
 8018cba:	4403      	add	r3, r0
 8018cbc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018cc0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8018cc4:	edd3 6a00 	vldr	s13, [r3]
 8018cc8:	4403      	add	r3, r0
 8018cca:	ee77 5a27 	vadd.f32	s11, s14, s15
 8018cce:	ee65 7a26 	vmul.f32	s15, s10, s13
 8018cd2:	edd3 6a00 	vldr	s13, [r3]
 8018cd6:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8018cda:	3210      	adds	r2, #16
 8018cdc:	ee66 7a26 	vmul.f32	s15, s12, s13
 8018ce0:	42aa      	cmp	r2, r5
 8018ce2:	4403      	add	r3, r0
 8018ce4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018ce8:	d1d8      	bne.n	8018c9c <arm_mat_mult_f32+0x8c>
 8018cea:	4454      	add	r4, sl
 8018cec:	4663      	mov	r3, ip
 8018cee:	9a01      	ldr	r2, [sp, #4]
 8018cf0:	b162      	cbz	r2, 8018d0c <arm_mat_mult_f32+0xfc>
 8018cf2:	eb03 0209 	add.w	r2, r3, r9
 8018cf6:	ecf3 6a01 	vldmia	r3!, {s13}
 8018cfa:	ed94 7a00 	vldr	s14, [r4]
 8018cfe:	ee26 7a87 	vmul.f32	s14, s13, s14
 8018d02:	4293      	cmp	r3, r2
 8018d04:	4404      	add	r4, r0
 8018d06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018d0a:	d1f4      	bne.n	8018cf6 <arm_mat_mult_f32+0xe6>
 8018d0c:	ece7 7a01 	vstmia	r7!, {s15}
 8018d10:	3601      	adds	r6, #1
 8018d12:	b2b6      	uxth	r6, r6
 8018d14:	f8db 3004 	ldr.w	r3, [fp, #4]
 8018d18:	4546      	cmp	r6, r8
 8018d1a:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8018d1e:	d1b6      	bne.n	8018c8e <arm_mat_mult_f32+0x7e>
 8018d20:	9a03      	ldr	r2, [sp, #12]
 8018d22:	9c02      	ldr	r4, [sp, #8]
 8018d24:	9d05      	ldr	r5, [sp, #20]
 8018d26:	3a01      	subs	r2, #1
 8018d28:	4434      	add	r4, r6
 8018d2a:	b2a4      	uxth	r4, r4
 8018d2c:	b292      	uxth	r2, r2
 8018d2e:	9402      	str	r4, [sp, #8]
 8018d30:	9203      	str	r2, [sp, #12]
 8018d32:	44ae      	add	lr, r5
 8018d34:	44ac      	add	ip, r5
 8018d36:	461c      	mov	r4, r3
 8018d38:	2a00      	cmp	r2, #0
 8018d3a:	d1a1      	bne.n	8018c80 <arm_mat_mult_f32+0x70>
 8018d3c:	4610      	mov	r0, r2
 8018d3e:	b240      	sxtb	r0, r0
 8018d40:	b007      	add	sp, #28
 8018d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d46:	4673      	mov	r3, lr
 8018d48:	e7d1      	b.n	8018cee <arm_mat_mult_f32+0xde>
 8018d4a:	20fd      	movs	r0, #253	; 0xfd
 8018d4c:	b240      	sxtb	r0, r0
 8018d4e:	b007      	add	sp, #28
 8018d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d54:	00000000 	.word	0x00000000

08018d58 <arm_mat_init_f32>:
 8018d58:	8001      	strh	r1, [r0, #0]
 8018d5a:	8042      	strh	r2, [r0, #2]
 8018d5c:	6043      	str	r3, [r0, #4]
 8018d5e:	4770      	bx	lr

08018d60 <_ZdlPvj>:
 8018d60:	f000 b923 	b.w	8018faa <_ZdlPv>

08018d64 <_Znwj>:
 8018d64:	2801      	cmp	r0, #1
 8018d66:	bf38      	it	cc
 8018d68:	2001      	movcc	r0, #1
 8018d6a:	b510      	push	{r4, lr}
 8018d6c:	4604      	mov	r4, r0
 8018d6e:	4620      	mov	r0, r4
 8018d70:	f001 fa28 	bl	801a1c4 <malloc>
 8018d74:	b930      	cbnz	r0, 8018d84 <_Znwj+0x20>
 8018d76:	f000 f92d 	bl	8018fd4 <_ZSt15get_new_handlerv>
 8018d7a:	b908      	cbnz	r0, 8018d80 <_Znwj+0x1c>
 8018d7c:	f001 f9ed 	bl	801a15a <abort>
 8018d80:	4780      	blx	r0
 8018d82:	e7f4      	b.n	8018d6e <_Znwj+0xa>
 8018d84:	bd10      	pop	{r4, pc}

08018d86 <__cxa_pure_virtual>:
 8018d86:	b508      	push	{r3, lr}
 8018d88:	f000 f91e 	bl	8018fc8 <_ZSt9terminatev>

08018d8c <_ZNSaIcEC1Ev>:
 8018d8c:	4770      	bx	lr

08018d8e <_ZNSaIcED1Ev>:
 8018d8e:	4770      	bx	lr

08018d90 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8018d90:	68c3      	ldr	r3, [r0, #12]
 8018d92:	689a      	ldr	r2, [r3, #8]
 8018d94:	60c2      	str	r2, [r0, #12]
 8018d96:	b510      	push	{r4, lr}
 8018d98:	b102      	cbz	r2, 8018d9c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8018d9a:	6050      	str	r0, [r2, #4]
 8018d9c:	6842      	ldr	r2, [r0, #4]
 8018d9e:	605a      	str	r2, [r3, #4]
 8018da0:	680c      	ldr	r4, [r1, #0]
 8018da2:	4284      	cmp	r4, r0
 8018da4:	d103      	bne.n	8018dae <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8018da6:	600b      	str	r3, [r1, #0]
 8018da8:	6098      	str	r0, [r3, #8]
 8018daa:	6043      	str	r3, [r0, #4]
 8018dac:	bd10      	pop	{r4, pc}
 8018dae:	6891      	ldr	r1, [r2, #8]
 8018db0:	4281      	cmp	r1, r0
 8018db2:	bf0c      	ite	eq
 8018db4:	6093      	streq	r3, [r2, #8]
 8018db6:	60d3      	strne	r3, [r2, #12]
 8018db8:	e7f6      	b.n	8018da8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08018dba <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8018dba:	6883      	ldr	r3, [r0, #8]
 8018dbc:	68da      	ldr	r2, [r3, #12]
 8018dbe:	6082      	str	r2, [r0, #8]
 8018dc0:	b510      	push	{r4, lr}
 8018dc2:	b102      	cbz	r2, 8018dc6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8018dc4:	6050      	str	r0, [r2, #4]
 8018dc6:	6842      	ldr	r2, [r0, #4]
 8018dc8:	605a      	str	r2, [r3, #4]
 8018dca:	680c      	ldr	r4, [r1, #0]
 8018dcc:	4284      	cmp	r4, r0
 8018dce:	d103      	bne.n	8018dd8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8018dd0:	600b      	str	r3, [r1, #0]
 8018dd2:	60d8      	str	r0, [r3, #12]
 8018dd4:	6043      	str	r3, [r0, #4]
 8018dd6:	bd10      	pop	{r4, pc}
 8018dd8:	68d1      	ldr	r1, [r2, #12]
 8018dda:	4281      	cmp	r1, r0
 8018ddc:	bf0c      	ite	eq
 8018dde:	60d3      	streq	r3, [r2, #12]
 8018de0:	6093      	strne	r3, [r2, #8]
 8018de2:	e7f6      	b.n	8018dd2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08018de4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8018de4:	7803      	ldrb	r3, [r0, #0]
 8018de6:	b933      	cbnz	r3, 8018df6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8018de8:	6843      	ldr	r3, [r0, #4]
 8018dea:	685b      	ldr	r3, [r3, #4]
 8018dec:	4283      	cmp	r3, r0
 8018dee:	d102      	bne.n	8018df6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8018df0:	68db      	ldr	r3, [r3, #12]
 8018df2:	4618      	mov	r0, r3
 8018df4:	4770      	bx	lr
 8018df6:	6882      	ldr	r2, [r0, #8]
 8018df8:	b122      	cbz	r2, 8018e04 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8018dfa:	4613      	mov	r3, r2
 8018dfc:	68d2      	ldr	r2, [r2, #12]
 8018dfe:	2a00      	cmp	r2, #0
 8018e00:	d1fb      	bne.n	8018dfa <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8018e02:	e7f6      	b.n	8018df2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8018e04:	6843      	ldr	r3, [r0, #4]
 8018e06:	689a      	ldr	r2, [r3, #8]
 8018e08:	4282      	cmp	r2, r0
 8018e0a:	d1f2      	bne.n	8018df2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8018e0c:	4618      	mov	r0, r3
 8018e0e:	685b      	ldr	r3, [r3, #4]
 8018e10:	e7f9      	b.n	8018e06 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08018e12 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8018e12:	f7ff bfe7 	b.w	8018de4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08018e16 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8018e16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e1a:	461e      	mov	r6, r3
 8018e1c:	f103 0804 	add.w	r8, r3, #4
 8018e20:	2300      	movs	r3, #0
 8018e22:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8018e26:	460c      	mov	r4, r1
 8018e28:	604a      	str	r2, [r1, #4]
 8018e2a:	700b      	strb	r3, [r1, #0]
 8018e2c:	b300      	cbz	r0, 8018e70 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8018e2e:	4296      	cmp	r6, r2
 8018e30:	6091      	str	r1, [r2, #8]
 8018e32:	d118      	bne.n	8018e66 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8018e34:	6071      	str	r1, [r6, #4]
 8018e36:	60f4      	str	r4, [r6, #12]
 8018e38:	2701      	movs	r7, #1
 8018e3a:	f04f 0900 	mov.w	r9, #0
 8018e3e:	6873      	ldr	r3, [r6, #4]
 8018e40:	42a3      	cmp	r3, r4
 8018e42:	d03f      	beq.n	8018ec4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8018e44:	6860      	ldr	r0, [r4, #4]
 8018e46:	7802      	ldrb	r2, [r0, #0]
 8018e48:	2a00      	cmp	r2, #0
 8018e4a:	d13b      	bne.n	8018ec4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8018e4c:	6845      	ldr	r5, [r0, #4]
 8018e4e:	68ab      	ldr	r3, [r5, #8]
 8018e50:	4298      	cmp	r0, r3
 8018e52:	d123      	bne.n	8018e9c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 8018e54:	68eb      	ldr	r3, [r5, #12]
 8018e56:	b183      	cbz	r3, 8018e7a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8018e58:	781a      	ldrb	r2, [r3, #0]
 8018e5a:	b972      	cbnz	r2, 8018e7a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8018e5c:	7007      	strb	r7, [r0, #0]
 8018e5e:	701f      	strb	r7, [r3, #0]
 8018e60:	702a      	strb	r2, [r5, #0]
 8018e62:	462c      	mov	r4, r5
 8018e64:	e7eb      	b.n	8018e3e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8018e66:	68b3      	ldr	r3, [r6, #8]
 8018e68:	4293      	cmp	r3, r2
 8018e6a:	d1e5      	bne.n	8018e38 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8018e6c:	60b1      	str	r1, [r6, #8]
 8018e6e:	e7e3      	b.n	8018e38 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8018e70:	60d1      	str	r1, [r2, #12]
 8018e72:	68f3      	ldr	r3, [r6, #12]
 8018e74:	4293      	cmp	r3, r2
 8018e76:	d1df      	bne.n	8018e38 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8018e78:	e7dd      	b.n	8018e36 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8018e7a:	68c3      	ldr	r3, [r0, #12]
 8018e7c:	42a3      	cmp	r3, r4
 8018e7e:	d103      	bne.n	8018e88 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 8018e80:	4641      	mov	r1, r8
 8018e82:	f7ff ff85 	bl	8018d90 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8018e86:	4604      	mov	r4, r0
 8018e88:	6863      	ldr	r3, [r4, #4]
 8018e8a:	4641      	mov	r1, r8
 8018e8c:	701f      	strb	r7, [r3, #0]
 8018e8e:	4628      	mov	r0, r5
 8018e90:	f885 9000 	strb.w	r9, [r5]
 8018e94:	f7ff ff91 	bl	8018dba <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8018e98:	4625      	mov	r5, r4
 8018e9a:	e7e2      	b.n	8018e62 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8018e9c:	b113      	cbz	r3, 8018ea4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8018e9e:	781a      	ldrb	r2, [r3, #0]
 8018ea0:	2a00      	cmp	r2, #0
 8018ea2:	d0db      	beq.n	8018e5c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 8018ea4:	6883      	ldr	r3, [r0, #8]
 8018ea6:	42a3      	cmp	r3, r4
 8018ea8:	d103      	bne.n	8018eb2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8018eaa:	4641      	mov	r1, r8
 8018eac:	f7ff ff85 	bl	8018dba <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8018eb0:	4604      	mov	r4, r0
 8018eb2:	6863      	ldr	r3, [r4, #4]
 8018eb4:	4641      	mov	r1, r8
 8018eb6:	701f      	strb	r7, [r3, #0]
 8018eb8:	4628      	mov	r0, r5
 8018eba:	f885 9000 	strb.w	r9, [r5]
 8018ebe:	f7ff ff67 	bl	8018d90 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8018ec2:	e7e9      	b.n	8018e98 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 8018ec4:	2201      	movs	r2, #1
 8018ec6:	701a      	strb	r2, [r3, #0]
 8018ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018ecc <_ZSt17__throw_bad_allocv>:
 8018ecc:	b508      	push	{r3, lr}
 8018ece:	f001 f944 	bl	801a15a <abort>

08018ed2 <_ZSt20__throw_length_errorPKc>:
 8018ed2:	b508      	push	{r3, lr}
 8018ed4:	f001 f941 	bl	801a15a <abort>

08018ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8018ed8:	b508      	push	{r3, lr}
 8018eda:	680b      	ldr	r3, [r1, #0]
 8018edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018ee0:	d302      	bcc.n	8018ee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8018ee2:	480d      	ldr	r0, [pc, #52]	; (8018f18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8018ee4:	f7ff fff5 	bl	8018ed2 <_ZSt20__throw_length_errorPKc>
 8018ee8:	4293      	cmp	r3, r2
 8018eea:	d90b      	bls.n	8018f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8018eec:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8018ef0:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8018ef4:	d206      	bcs.n	8018f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8018ef6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8018efa:	bf2a      	itet	cs
 8018efc:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8018f00:	6008      	strcc	r0, [r1, #0]
 8018f02:	600b      	strcs	r3, [r1, #0]
 8018f04:	6808      	ldr	r0, [r1, #0]
 8018f06:	3001      	adds	r0, #1
 8018f08:	d501      	bpl.n	8018f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8018f0a:	f7ff ffdf 	bl	8018ecc <_ZSt17__throw_bad_allocv>
 8018f0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018f12:	f7ff bf27 	b.w	8018d64 <_Znwj>
 8018f16:	bf00      	nop
 8018f18:	080312a4 	.word	0x080312a4

08018f1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8018f1c:	f850 3b08 	ldr.w	r3, [r0], #8
 8018f20:	4283      	cmp	r3, r0
 8018f22:	d002      	beq.n	8018f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8018f24:	4618      	mov	r0, r3
 8018f26:	f000 b840 	b.w	8018faa <_ZdlPv>
 8018f2a:	4770      	bx	lr

08018f2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8018f2c:	460b      	mov	r3, r1
 8018f2e:	2b01      	cmp	r3, #1
 8018f30:	b410      	push	{r4}
 8018f32:	4611      	mov	r1, r2
 8018f34:	4604      	mov	r4, r0
 8018f36:	d103      	bne.n	8018f40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8018f38:	7022      	strb	r2, [r4, #0]
 8018f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f3e:	4770      	bx	lr
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d0fa      	beq.n	8018f3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8018f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f48:	461a      	mov	r2, r3
 8018f4a:	f001 b973 	b.w	801a234 <memset>

08018f4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 8018f4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f50:	290f      	cmp	r1, #15
 8018f52:	4604      	mov	r4, r0
 8018f54:	9101      	str	r1, [sp, #4]
 8018f56:	4615      	mov	r5, r2
 8018f58:	d906      	bls.n	8018f68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 8018f5a:	2200      	movs	r2, #0
 8018f5c:	a901      	add	r1, sp, #4
 8018f5e:	f7ff ffbb 	bl	8018ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8018f62:	9b01      	ldr	r3, [sp, #4]
 8018f64:	6020      	str	r0, [r4, #0]
 8018f66:	60a3      	str	r3, [r4, #8]
 8018f68:	9901      	ldr	r1, [sp, #4]
 8018f6a:	b119      	cbz	r1, 8018f74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 8018f6c:	6820      	ldr	r0, [r4, #0]
 8018f6e:	462a      	mov	r2, r5
 8018f70:	f7ff ffdc 	bl	8018f2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8018f74:	9b01      	ldr	r3, [sp, #4]
 8018f76:	6822      	ldr	r2, [r4, #0]
 8018f78:	6063      	str	r3, [r4, #4]
 8018f7a:	2100      	movs	r1, #0
 8018f7c:	54d1      	strb	r1, [r2, r3]
 8018f7e:	b003      	add	sp, #12
 8018f80:	bd30      	pop	{r4, r5, pc}

08018f82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 8018f82:	b510      	push	{r4, lr}
 8018f84:	f100 0308 	add.w	r3, r0, #8
 8018f88:	4604      	mov	r4, r0
 8018f8a:	6003      	str	r3, [r0, #0]
 8018f8c:	f7ff ffdf 	bl	8018f4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 8018f90:	4620      	mov	r0, r4
 8018f92:	bd10      	pop	{r4, pc}

08018f94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8018f94:	b510      	push	{r4, lr}
 8018f96:	4604      	mov	r4, r0
 8018f98:	f7ff ffc0 	bl	8018f1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8018f9c:	4620      	mov	r0, r4
 8018f9e:	bd10      	pop	{r4, pc}

08018fa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8018fa0:	6800      	ldr	r0, [r0, #0]
 8018fa2:	4408      	add	r0, r1
 8018fa4:	4770      	bx	lr

08018fa6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8018fa6:	6800      	ldr	r0, [r0, #0]
 8018fa8:	4770      	bx	lr

08018faa <_ZdlPv>:
 8018faa:	f001 b913 	b.w	801a1d4 <free>

08018fae <_ZN10__cxxabiv111__terminateEPFvvE>:
 8018fae:	b508      	push	{r3, lr}
 8018fb0:	4780      	blx	r0
 8018fb2:	f001 f8d2 	bl	801a15a <abort>
	...

08018fb8 <_ZSt13get_terminatev>:
 8018fb8:	4b02      	ldr	r3, [pc, #8]	; (8018fc4 <_ZSt13get_terminatev+0xc>)
 8018fba:	6818      	ldr	r0, [r3, #0]
 8018fbc:	f3bf 8f5b 	dmb	ish
 8018fc0:	4770      	bx	lr
 8018fc2:	bf00      	nop
 8018fc4:	20000144 	.word	0x20000144

08018fc8 <_ZSt9terminatev>:
 8018fc8:	b508      	push	{r3, lr}
 8018fca:	f7ff fff5 	bl	8018fb8 <_ZSt13get_terminatev>
 8018fce:	f7ff ffee 	bl	8018fae <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08018fd4 <_ZSt15get_new_handlerv>:
 8018fd4:	4b02      	ldr	r3, [pc, #8]	; (8018fe0 <_ZSt15get_new_handlerv+0xc>)
 8018fd6:	6818      	ldr	r0, [r3, #0]
 8018fd8:	f3bf 8f5b 	dmb	ish
 8018fdc:	4770      	bx	lr
 8018fde:	bf00      	nop
 8018fe0:	2000e1d4 	.word	0x2000e1d4

08018fe4 <pow>:
 8018fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fe6:	ed2d 8b02 	vpush	{d8}
 8018fea:	eeb0 8a40 	vmov.f32	s16, s0
 8018fee:	eef0 8a60 	vmov.f32	s17, s1
 8018ff2:	ec55 4b11 	vmov	r4, r5, d1
 8018ff6:	f000 f887 	bl	8019108 <__ieee754_pow>
 8018ffa:	4622      	mov	r2, r4
 8018ffc:	462b      	mov	r3, r5
 8018ffe:	4620      	mov	r0, r4
 8019000:	4629      	mov	r1, r5
 8019002:	ec57 6b10 	vmov	r6, r7, d0
 8019006:	f7e7 fd91 	bl	8000b2c <__aeabi_dcmpun>
 801900a:	2800      	cmp	r0, #0
 801900c:	d13b      	bne.n	8019086 <pow+0xa2>
 801900e:	ec51 0b18 	vmov	r0, r1, d8
 8019012:	2200      	movs	r2, #0
 8019014:	2300      	movs	r3, #0
 8019016:	f7e7 fd57 	bl	8000ac8 <__aeabi_dcmpeq>
 801901a:	b1b8      	cbz	r0, 801904c <pow+0x68>
 801901c:	2200      	movs	r2, #0
 801901e:	2300      	movs	r3, #0
 8019020:	4620      	mov	r0, r4
 8019022:	4629      	mov	r1, r5
 8019024:	f7e7 fd50 	bl	8000ac8 <__aeabi_dcmpeq>
 8019028:	2800      	cmp	r0, #0
 801902a:	d146      	bne.n	80190ba <pow+0xd6>
 801902c:	ec45 4b10 	vmov	d0, r4, r5
 8019030:	f000 ff26 	bl	8019e80 <finite>
 8019034:	b338      	cbz	r0, 8019086 <pow+0xa2>
 8019036:	2200      	movs	r2, #0
 8019038:	2300      	movs	r3, #0
 801903a:	4620      	mov	r0, r4
 801903c:	4629      	mov	r1, r5
 801903e:	f7e7 fd4d 	bl	8000adc <__aeabi_dcmplt>
 8019042:	b300      	cbz	r0, 8019086 <pow+0xa2>
 8019044:	f001 f894 	bl	801a170 <__errno>
 8019048:	2322      	movs	r3, #34	; 0x22
 801904a:	e01b      	b.n	8019084 <pow+0xa0>
 801904c:	ec47 6b10 	vmov	d0, r6, r7
 8019050:	f000 ff16 	bl	8019e80 <finite>
 8019054:	b9e0      	cbnz	r0, 8019090 <pow+0xac>
 8019056:	eeb0 0a48 	vmov.f32	s0, s16
 801905a:	eef0 0a68 	vmov.f32	s1, s17
 801905e:	f000 ff0f 	bl	8019e80 <finite>
 8019062:	b1a8      	cbz	r0, 8019090 <pow+0xac>
 8019064:	ec45 4b10 	vmov	d0, r4, r5
 8019068:	f000 ff0a 	bl	8019e80 <finite>
 801906c:	b180      	cbz	r0, 8019090 <pow+0xac>
 801906e:	4632      	mov	r2, r6
 8019070:	463b      	mov	r3, r7
 8019072:	4630      	mov	r0, r6
 8019074:	4639      	mov	r1, r7
 8019076:	f7e7 fd59 	bl	8000b2c <__aeabi_dcmpun>
 801907a:	2800      	cmp	r0, #0
 801907c:	d0e2      	beq.n	8019044 <pow+0x60>
 801907e:	f001 f877 	bl	801a170 <__errno>
 8019082:	2321      	movs	r3, #33	; 0x21
 8019084:	6003      	str	r3, [r0, #0]
 8019086:	ecbd 8b02 	vpop	{d8}
 801908a:	ec47 6b10 	vmov	d0, r6, r7
 801908e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019090:	2200      	movs	r2, #0
 8019092:	2300      	movs	r3, #0
 8019094:	4630      	mov	r0, r6
 8019096:	4639      	mov	r1, r7
 8019098:	f7e7 fd16 	bl	8000ac8 <__aeabi_dcmpeq>
 801909c:	2800      	cmp	r0, #0
 801909e:	d0f2      	beq.n	8019086 <pow+0xa2>
 80190a0:	eeb0 0a48 	vmov.f32	s0, s16
 80190a4:	eef0 0a68 	vmov.f32	s1, s17
 80190a8:	f000 feea 	bl	8019e80 <finite>
 80190ac:	2800      	cmp	r0, #0
 80190ae:	d0ea      	beq.n	8019086 <pow+0xa2>
 80190b0:	ec45 4b10 	vmov	d0, r4, r5
 80190b4:	f000 fee4 	bl	8019e80 <finite>
 80190b8:	e7c3      	b.n	8019042 <pow+0x5e>
 80190ba:	4f01      	ldr	r7, [pc, #4]	; (80190c0 <pow+0xdc>)
 80190bc:	2600      	movs	r6, #0
 80190be:	e7e2      	b.n	8019086 <pow+0xa2>
 80190c0:	3ff00000 	.word	0x3ff00000

080190c4 <atan2f>:
 80190c4:	f000 be00 	b.w	8019cc8 <__ieee754_atan2f>

080190c8 <sqrtf>:
 80190c8:	b508      	push	{r3, lr}
 80190ca:	ed2d 8b02 	vpush	{d8}
 80190ce:	eeb0 8a40 	vmov.f32	s16, s0
 80190d2:	f000 fe99 	bl	8019e08 <__ieee754_sqrtf>
 80190d6:	eeb4 8a48 	vcmp.f32	s16, s16
 80190da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190de:	d60c      	bvs.n	80190fa <sqrtf+0x32>
 80190e0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8019100 <sqrtf+0x38>
 80190e4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80190e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190ec:	d505      	bpl.n	80190fa <sqrtf+0x32>
 80190ee:	f001 f83f 	bl	801a170 <__errno>
 80190f2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80190f6:	2321      	movs	r3, #33	; 0x21
 80190f8:	6003      	str	r3, [r0, #0]
 80190fa:	ecbd 8b02 	vpop	{d8}
 80190fe:	bd08      	pop	{r3, pc}
	...

08019108 <__ieee754_pow>:
 8019108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801910c:	ed2d 8b06 	vpush	{d8-d10}
 8019110:	b089      	sub	sp, #36	; 0x24
 8019112:	ed8d 1b00 	vstr	d1, [sp]
 8019116:	e9dd 2900 	ldrd	r2, r9, [sp]
 801911a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801911e:	ea58 0102 	orrs.w	r1, r8, r2
 8019122:	ec57 6b10 	vmov	r6, r7, d0
 8019126:	d115      	bne.n	8019154 <__ieee754_pow+0x4c>
 8019128:	19b3      	adds	r3, r6, r6
 801912a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801912e:	4152      	adcs	r2, r2
 8019130:	4299      	cmp	r1, r3
 8019132:	4b89      	ldr	r3, [pc, #548]	; (8019358 <__ieee754_pow+0x250>)
 8019134:	4193      	sbcs	r3, r2
 8019136:	f080 84d2 	bcs.w	8019ade <__ieee754_pow+0x9d6>
 801913a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801913e:	4630      	mov	r0, r6
 8019140:	4639      	mov	r1, r7
 8019142:	f7e7 f8a3 	bl	800028c <__adddf3>
 8019146:	ec41 0b10 	vmov	d0, r0, r1
 801914a:	b009      	add	sp, #36	; 0x24
 801914c:	ecbd 8b06 	vpop	{d8-d10}
 8019150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019154:	4b81      	ldr	r3, [pc, #516]	; (801935c <__ieee754_pow+0x254>)
 8019156:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801915a:	429c      	cmp	r4, r3
 801915c:	ee10 aa10 	vmov	sl, s0
 8019160:	463d      	mov	r5, r7
 8019162:	dc06      	bgt.n	8019172 <__ieee754_pow+0x6a>
 8019164:	d101      	bne.n	801916a <__ieee754_pow+0x62>
 8019166:	2e00      	cmp	r6, #0
 8019168:	d1e7      	bne.n	801913a <__ieee754_pow+0x32>
 801916a:	4598      	cmp	r8, r3
 801916c:	dc01      	bgt.n	8019172 <__ieee754_pow+0x6a>
 801916e:	d10f      	bne.n	8019190 <__ieee754_pow+0x88>
 8019170:	b172      	cbz	r2, 8019190 <__ieee754_pow+0x88>
 8019172:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8019176:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801917a:	ea55 050a 	orrs.w	r5, r5, sl
 801917e:	d1dc      	bne.n	801913a <__ieee754_pow+0x32>
 8019180:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019184:	18db      	adds	r3, r3, r3
 8019186:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801918a:	4152      	adcs	r2, r2
 801918c:	429d      	cmp	r5, r3
 801918e:	e7d0      	b.n	8019132 <__ieee754_pow+0x2a>
 8019190:	2d00      	cmp	r5, #0
 8019192:	da3b      	bge.n	801920c <__ieee754_pow+0x104>
 8019194:	4b72      	ldr	r3, [pc, #456]	; (8019360 <__ieee754_pow+0x258>)
 8019196:	4598      	cmp	r8, r3
 8019198:	dc51      	bgt.n	801923e <__ieee754_pow+0x136>
 801919a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801919e:	4598      	cmp	r8, r3
 80191a0:	f340 84ac 	ble.w	8019afc <__ieee754_pow+0x9f4>
 80191a4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80191a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80191ac:	2b14      	cmp	r3, #20
 80191ae:	dd0f      	ble.n	80191d0 <__ieee754_pow+0xc8>
 80191b0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80191b4:	fa22 f103 	lsr.w	r1, r2, r3
 80191b8:	fa01 f303 	lsl.w	r3, r1, r3
 80191bc:	4293      	cmp	r3, r2
 80191be:	f040 849d 	bne.w	8019afc <__ieee754_pow+0x9f4>
 80191c2:	f001 0101 	and.w	r1, r1, #1
 80191c6:	f1c1 0302 	rsb	r3, r1, #2
 80191ca:	9304      	str	r3, [sp, #16]
 80191cc:	b182      	cbz	r2, 80191f0 <__ieee754_pow+0xe8>
 80191ce:	e05f      	b.n	8019290 <__ieee754_pow+0x188>
 80191d0:	2a00      	cmp	r2, #0
 80191d2:	d15b      	bne.n	801928c <__ieee754_pow+0x184>
 80191d4:	f1c3 0314 	rsb	r3, r3, #20
 80191d8:	fa48 f103 	asr.w	r1, r8, r3
 80191dc:	fa01 f303 	lsl.w	r3, r1, r3
 80191e0:	4543      	cmp	r3, r8
 80191e2:	f040 8488 	bne.w	8019af6 <__ieee754_pow+0x9ee>
 80191e6:	f001 0101 	and.w	r1, r1, #1
 80191ea:	f1c1 0302 	rsb	r3, r1, #2
 80191ee:	9304      	str	r3, [sp, #16]
 80191f0:	4b5c      	ldr	r3, [pc, #368]	; (8019364 <__ieee754_pow+0x25c>)
 80191f2:	4598      	cmp	r8, r3
 80191f4:	d132      	bne.n	801925c <__ieee754_pow+0x154>
 80191f6:	f1b9 0f00 	cmp.w	r9, #0
 80191fa:	f280 8478 	bge.w	8019aee <__ieee754_pow+0x9e6>
 80191fe:	4959      	ldr	r1, [pc, #356]	; (8019364 <__ieee754_pow+0x25c>)
 8019200:	4632      	mov	r2, r6
 8019202:	463b      	mov	r3, r7
 8019204:	2000      	movs	r0, #0
 8019206:	f7e7 fb21 	bl	800084c <__aeabi_ddiv>
 801920a:	e79c      	b.n	8019146 <__ieee754_pow+0x3e>
 801920c:	2300      	movs	r3, #0
 801920e:	9304      	str	r3, [sp, #16]
 8019210:	2a00      	cmp	r2, #0
 8019212:	d13d      	bne.n	8019290 <__ieee754_pow+0x188>
 8019214:	4b51      	ldr	r3, [pc, #324]	; (801935c <__ieee754_pow+0x254>)
 8019216:	4598      	cmp	r8, r3
 8019218:	d1ea      	bne.n	80191f0 <__ieee754_pow+0xe8>
 801921a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801921e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8019222:	ea53 030a 	orrs.w	r3, r3, sl
 8019226:	f000 845a 	beq.w	8019ade <__ieee754_pow+0x9d6>
 801922a:	4b4f      	ldr	r3, [pc, #316]	; (8019368 <__ieee754_pow+0x260>)
 801922c:	429c      	cmp	r4, r3
 801922e:	dd08      	ble.n	8019242 <__ieee754_pow+0x13a>
 8019230:	f1b9 0f00 	cmp.w	r9, #0
 8019234:	f2c0 8457 	blt.w	8019ae6 <__ieee754_pow+0x9de>
 8019238:	e9dd 0100 	ldrd	r0, r1, [sp]
 801923c:	e783      	b.n	8019146 <__ieee754_pow+0x3e>
 801923e:	2302      	movs	r3, #2
 8019240:	e7e5      	b.n	801920e <__ieee754_pow+0x106>
 8019242:	f1b9 0f00 	cmp.w	r9, #0
 8019246:	f04f 0000 	mov.w	r0, #0
 801924a:	f04f 0100 	mov.w	r1, #0
 801924e:	f6bf af7a 	bge.w	8019146 <__ieee754_pow+0x3e>
 8019252:	e9dd 0300 	ldrd	r0, r3, [sp]
 8019256:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801925a:	e774      	b.n	8019146 <__ieee754_pow+0x3e>
 801925c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8019260:	d106      	bne.n	8019270 <__ieee754_pow+0x168>
 8019262:	4632      	mov	r2, r6
 8019264:	463b      	mov	r3, r7
 8019266:	4630      	mov	r0, r6
 8019268:	4639      	mov	r1, r7
 801926a:	f7e7 f9c5 	bl	80005f8 <__aeabi_dmul>
 801926e:	e76a      	b.n	8019146 <__ieee754_pow+0x3e>
 8019270:	4b3e      	ldr	r3, [pc, #248]	; (801936c <__ieee754_pow+0x264>)
 8019272:	4599      	cmp	r9, r3
 8019274:	d10c      	bne.n	8019290 <__ieee754_pow+0x188>
 8019276:	2d00      	cmp	r5, #0
 8019278:	db0a      	blt.n	8019290 <__ieee754_pow+0x188>
 801927a:	ec47 6b10 	vmov	d0, r6, r7
 801927e:	b009      	add	sp, #36	; 0x24
 8019280:	ecbd 8b06 	vpop	{d8-d10}
 8019284:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019288:	f000 bc6c 	b.w	8019b64 <__ieee754_sqrt>
 801928c:	2300      	movs	r3, #0
 801928e:	9304      	str	r3, [sp, #16]
 8019290:	ec47 6b10 	vmov	d0, r6, r7
 8019294:	f000 fdeb 	bl	8019e6e <fabs>
 8019298:	ec51 0b10 	vmov	r0, r1, d0
 801929c:	f1ba 0f00 	cmp.w	sl, #0
 80192a0:	d129      	bne.n	80192f6 <__ieee754_pow+0x1ee>
 80192a2:	b124      	cbz	r4, 80192ae <__ieee754_pow+0x1a6>
 80192a4:	4b2f      	ldr	r3, [pc, #188]	; (8019364 <__ieee754_pow+0x25c>)
 80192a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80192aa:	429a      	cmp	r2, r3
 80192ac:	d123      	bne.n	80192f6 <__ieee754_pow+0x1ee>
 80192ae:	f1b9 0f00 	cmp.w	r9, #0
 80192b2:	da05      	bge.n	80192c0 <__ieee754_pow+0x1b8>
 80192b4:	4602      	mov	r2, r0
 80192b6:	460b      	mov	r3, r1
 80192b8:	2000      	movs	r0, #0
 80192ba:	492a      	ldr	r1, [pc, #168]	; (8019364 <__ieee754_pow+0x25c>)
 80192bc:	f7e7 fac6 	bl	800084c <__aeabi_ddiv>
 80192c0:	2d00      	cmp	r5, #0
 80192c2:	f6bf af40 	bge.w	8019146 <__ieee754_pow+0x3e>
 80192c6:	9b04      	ldr	r3, [sp, #16]
 80192c8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80192cc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80192d0:	4323      	orrs	r3, r4
 80192d2:	d108      	bne.n	80192e6 <__ieee754_pow+0x1de>
 80192d4:	4602      	mov	r2, r0
 80192d6:	460b      	mov	r3, r1
 80192d8:	4610      	mov	r0, r2
 80192da:	4619      	mov	r1, r3
 80192dc:	f7e6 ffd4 	bl	8000288 <__aeabi_dsub>
 80192e0:	4602      	mov	r2, r0
 80192e2:	460b      	mov	r3, r1
 80192e4:	e78f      	b.n	8019206 <__ieee754_pow+0xfe>
 80192e6:	9b04      	ldr	r3, [sp, #16]
 80192e8:	2b01      	cmp	r3, #1
 80192ea:	f47f af2c 	bne.w	8019146 <__ieee754_pow+0x3e>
 80192ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80192f2:	4619      	mov	r1, r3
 80192f4:	e727      	b.n	8019146 <__ieee754_pow+0x3e>
 80192f6:	0feb      	lsrs	r3, r5, #31
 80192f8:	3b01      	subs	r3, #1
 80192fa:	9306      	str	r3, [sp, #24]
 80192fc:	9a06      	ldr	r2, [sp, #24]
 80192fe:	9b04      	ldr	r3, [sp, #16]
 8019300:	4313      	orrs	r3, r2
 8019302:	d102      	bne.n	801930a <__ieee754_pow+0x202>
 8019304:	4632      	mov	r2, r6
 8019306:	463b      	mov	r3, r7
 8019308:	e7e6      	b.n	80192d8 <__ieee754_pow+0x1d0>
 801930a:	4b19      	ldr	r3, [pc, #100]	; (8019370 <__ieee754_pow+0x268>)
 801930c:	4598      	cmp	r8, r3
 801930e:	f340 80fb 	ble.w	8019508 <__ieee754_pow+0x400>
 8019312:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8019316:	4598      	cmp	r8, r3
 8019318:	4b13      	ldr	r3, [pc, #76]	; (8019368 <__ieee754_pow+0x260>)
 801931a:	dd0c      	ble.n	8019336 <__ieee754_pow+0x22e>
 801931c:	429c      	cmp	r4, r3
 801931e:	dc0f      	bgt.n	8019340 <__ieee754_pow+0x238>
 8019320:	f1b9 0f00 	cmp.w	r9, #0
 8019324:	da0f      	bge.n	8019346 <__ieee754_pow+0x23e>
 8019326:	2000      	movs	r0, #0
 8019328:	b009      	add	sp, #36	; 0x24
 801932a:	ecbd 8b06 	vpop	{d8-d10}
 801932e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019332:	f000 bd93 	b.w	8019e5c <__math_oflow>
 8019336:	429c      	cmp	r4, r3
 8019338:	dbf2      	blt.n	8019320 <__ieee754_pow+0x218>
 801933a:	4b0a      	ldr	r3, [pc, #40]	; (8019364 <__ieee754_pow+0x25c>)
 801933c:	429c      	cmp	r4, r3
 801933e:	dd19      	ble.n	8019374 <__ieee754_pow+0x26c>
 8019340:	f1b9 0f00 	cmp.w	r9, #0
 8019344:	dcef      	bgt.n	8019326 <__ieee754_pow+0x21e>
 8019346:	2000      	movs	r0, #0
 8019348:	b009      	add	sp, #36	; 0x24
 801934a:	ecbd 8b06 	vpop	{d8-d10}
 801934e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019352:	f000 bd7a 	b.w	8019e4a <__math_uflow>
 8019356:	bf00      	nop
 8019358:	fff00000 	.word	0xfff00000
 801935c:	7ff00000 	.word	0x7ff00000
 8019360:	433fffff 	.word	0x433fffff
 8019364:	3ff00000 	.word	0x3ff00000
 8019368:	3fefffff 	.word	0x3fefffff
 801936c:	3fe00000 	.word	0x3fe00000
 8019370:	41e00000 	.word	0x41e00000
 8019374:	4b60      	ldr	r3, [pc, #384]	; (80194f8 <__ieee754_pow+0x3f0>)
 8019376:	2200      	movs	r2, #0
 8019378:	f7e6 ff86 	bl	8000288 <__aeabi_dsub>
 801937c:	a354      	add	r3, pc, #336	; (adr r3, 80194d0 <__ieee754_pow+0x3c8>)
 801937e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019382:	4604      	mov	r4, r0
 8019384:	460d      	mov	r5, r1
 8019386:	f7e7 f937 	bl	80005f8 <__aeabi_dmul>
 801938a:	a353      	add	r3, pc, #332	; (adr r3, 80194d8 <__ieee754_pow+0x3d0>)
 801938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019390:	4606      	mov	r6, r0
 8019392:	460f      	mov	r7, r1
 8019394:	4620      	mov	r0, r4
 8019396:	4629      	mov	r1, r5
 8019398:	f7e7 f92e 	bl	80005f8 <__aeabi_dmul>
 801939c:	4b57      	ldr	r3, [pc, #348]	; (80194fc <__ieee754_pow+0x3f4>)
 801939e:	4682      	mov	sl, r0
 80193a0:	468b      	mov	fp, r1
 80193a2:	2200      	movs	r2, #0
 80193a4:	4620      	mov	r0, r4
 80193a6:	4629      	mov	r1, r5
 80193a8:	f7e7 f926 	bl	80005f8 <__aeabi_dmul>
 80193ac:	4602      	mov	r2, r0
 80193ae:	460b      	mov	r3, r1
 80193b0:	a14b      	add	r1, pc, #300	; (adr r1, 80194e0 <__ieee754_pow+0x3d8>)
 80193b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80193b6:	f7e6 ff67 	bl	8000288 <__aeabi_dsub>
 80193ba:	4622      	mov	r2, r4
 80193bc:	462b      	mov	r3, r5
 80193be:	f7e7 f91b 	bl	80005f8 <__aeabi_dmul>
 80193c2:	4602      	mov	r2, r0
 80193c4:	460b      	mov	r3, r1
 80193c6:	2000      	movs	r0, #0
 80193c8:	494d      	ldr	r1, [pc, #308]	; (8019500 <__ieee754_pow+0x3f8>)
 80193ca:	f7e6 ff5d 	bl	8000288 <__aeabi_dsub>
 80193ce:	4622      	mov	r2, r4
 80193d0:	4680      	mov	r8, r0
 80193d2:	4689      	mov	r9, r1
 80193d4:	462b      	mov	r3, r5
 80193d6:	4620      	mov	r0, r4
 80193d8:	4629      	mov	r1, r5
 80193da:	f7e7 f90d 	bl	80005f8 <__aeabi_dmul>
 80193de:	4602      	mov	r2, r0
 80193e0:	460b      	mov	r3, r1
 80193e2:	4640      	mov	r0, r8
 80193e4:	4649      	mov	r1, r9
 80193e6:	f7e7 f907 	bl	80005f8 <__aeabi_dmul>
 80193ea:	a33f      	add	r3, pc, #252	; (adr r3, 80194e8 <__ieee754_pow+0x3e0>)
 80193ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193f0:	f7e7 f902 	bl	80005f8 <__aeabi_dmul>
 80193f4:	4602      	mov	r2, r0
 80193f6:	460b      	mov	r3, r1
 80193f8:	4650      	mov	r0, sl
 80193fa:	4659      	mov	r1, fp
 80193fc:	f7e6 ff44 	bl	8000288 <__aeabi_dsub>
 8019400:	4602      	mov	r2, r0
 8019402:	460b      	mov	r3, r1
 8019404:	4680      	mov	r8, r0
 8019406:	4689      	mov	r9, r1
 8019408:	4630      	mov	r0, r6
 801940a:	4639      	mov	r1, r7
 801940c:	f7e6 ff3e 	bl	800028c <__adddf3>
 8019410:	2000      	movs	r0, #0
 8019412:	4632      	mov	r2, r6
 8019414:	463b      	mov	r3, r7
 8019416:	4604      	mov	r4, r0
 8019418:	460d      	mov	r5, r1
 801941a:	f7e6 ff35 	bl	8000288 <__aeabi_dsub>
 801941e:	4602      	mov	r2, r0
 8019420:	460b      	mov	r3, r1
 8019422:	4640      	mov	r0, r8
 8019424:	4649      	mov	r1, r9
 8019426:	f7e6 ff2f 	bl	8000288 <__aeabi_dsub>
 801942a:	9b04      	ldr	r3, [sp, #16]
 801942c:	9a06      	ldr	r2, [sp, #24]
 801942e:	3b01      	subs	r3, #1
 8019430:	4313      	orrs	r3, r2
 8019432:	4682      	mov	sl, r0
 8019434:	468b      	mov	fp, r1
 8019436:	f040 81e7 	bne.w	8019808 <__ieee754_pow+0x700>
 801943a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80194f0 <__ieee754_pow+0x3e8>
 801943e:	eeb0 8a47 	vmov.f32	s16, s14
 8019442:	eef0 8a67 	vmov.f32	s17, s15
 8019446:	e9dd 6700 	ldrd	r6, r7, [sp]
 801944a:	2600      	movs	r6, #0
 801944c:	4632      	mov	r2, r6
 801944e:	463b      	mov	r3, r7
 8019450:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019454:	f7e6 ff18 	bl	8000288 <__aeabi_dsub>
 8019458:	4622      	mov	r2, r4
 801945a:	462b      	mov	r3, r5
 801945c:	f7e7 f8cc 	bl	80005f8 <__aeabi_dmul>
 8019460:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019464:	4680      	mov	r8, r0
 8019466:	4689      	mov	r9, r1
 8019468:	4650      	mov	r0, sl
 801946a:	4659      	mov	r1, fp
 801946c:	f7e7 f8c4 	bl	80005f8 <__aeabi_dmul>
 8019470:	4602      	mov	r2, r0
 8019472:	460b      	mov	r3, r1
 8019474:	4640      	mov	r0, r8
 8019476:	4649      	mov	r1, r9
 8019478:	f7e6 ff08 	bl	800028c <__adddf3>
 801947c:	4632      	mov	r2, r6
 801947e:	463b      	mov	r3, r7
 8019480:	4680      	mov	r8, r0
 8019482:	4689      	mov	r9, r1
 8019484:	4620      	mov	r0, r4
 8019486:	4629      	mov	r1, r5
 8019488:	f7e7 f8b6 	bl	80005f8 <__aeabi_dmul>
 801948c:	460b      	mov	r3, r1
 801948e:	4604      	mov	r4, r0
 8019490:	460d      	mov	r5, r1
 8019492:	4602      	mov	r2, r0
 8019494:	4649      	mov	r1, r9
 8019496:	4640      	mov	r0, r8
 8019498:	f7e6 fef8 	bl	800028c <__adddf3>
 801949c:	4b19      	ldr	r3, [pc, #100]	; (8019504 <__ieee754_pow+0x3fc>)
 801949e:	4299      	cmp	r1, r3
 80194a0:	ec45 4b19 	vmov	d9, r4, r5
 80194a4:	4606      	mov	r6, r0
 80194a6:	460f      	mov	r7, r1
 80194a8:	468b      	mov	fp, r1
 80194aa:	f340 82f1 	ble.w	8019a90 <__ieee754_pow+0x988>
 80194ae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80194b2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80194b6:	4303      	orrs	r3, r0
 80194b8:	f000 81e4 	beq.w	8019884 <__ieee754_pow+0x77c>
 80194bc:	ec51 0b18 	vmov	r0, r1, d8
 80194c0:	2200      	movs	r2, #0
 80194c2:	2300      	movs	r3, #0
 80194c4:	f7e7 fb0a 	bl	8000adc <__aeabi_dcmplt>
 80194c8:	3800      	subs	r0, #0
 80194ca:	bf18      	it	ne
 80194cc:	2001      	movne	r0, #1
 80194ce:	e72b      	b.n	8019328 <__ieee754_pow+0x220>
 80194d0:	60000000 	.word	0x60000000
 80194d4:	3ff71547 	.word	0x3ff71547
 80194d8:	f85ddf44 	.word	0xf85ddf44
 80194dc:	3e54ae0b 	.word	0x3e54ae0b
 80194e0:	55555555 	.word	0x55555555
 80194e4:	3fd55555 	.word	0x3fd55555
 80194e8:	652b82fe 	.word	0x652b82fe
 80194ec:	3ff71547 	.word	0x3ff71547
 80194f0:	00000000 	.word	0x00000000
 80194f4:	bff00000 	.word	0xbff00000
 80194f8:	3ff00000 	.word	0x3ff00000
 80194fc:	3fd00000 	.word	0x3fd00000
 8019500:	3fe00000 	.word	0x3fe00000
 8019504:	408fffff 	.word	0x408fffff
 8019508:	4bd5      	ldr	r3, [pc, #852]	; (8019860 <__ieee754_pow+0x758>)
 801950a:	402b      	ands	r3, r5
 801950c:	2200      	movs	r2, #0
 801950e:	b92b      	cbnz	r3, 801951c <__ieee754_pow+0x414>
 8019510:	4bd4      	ldr	r3, [pc, #848]	; (8019864 <__ieee754_pow+0x75c>)
 8019512:	f7e7 f871 	bl	80005f8 <__aeabi_dmul>
 8019516:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801951a:	460c      	mov	r4, r1
 801951c:	1523      	asrs	r3, r4, #20
 801951e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019522:	4413      	add	r3, r2
 8019524:	9305      	str	r3, [sp, #20]
 8019526:	4bd0      	ldr	r3, [pc, #832]	; (8019868 <__ieee754_pow+0x760>)
 8019528:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801952c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019530:	429c      	cmp	r4, r3
 8019532:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019536:	dd08      	ble.n	801954a <__ieee754_pow+0x442>
 8019538:	4bcc      	ldr	r3, [pc, #816]	; (801986c <__ieee754_pow+0x764>)
 801953a:	429c      	cmp	r4, r3
 801953c:	f340 8162 	ble.w	8019804 <__ieee754_pow+0x6fc>
 8019540:	9b05      	ldr	r3, [sp, #20]
 8019542:	3301      	adds	r3, #1
 8019544:	9305      	str	r3, [sp, #20]
 8019546:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801954a:	2400      	movs	r4, #0
 801954c:	00e3      	lsls	r3, r4, #3
 801954e:	9307      	str	r3, [sp, #28]
 8019550:	4bc7      	ldr	r3, [pc, #796]	; (8019870 <__ieee754_pow+0x768>)
 8019552:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019556:	ed93 7b00 	vldr	d7, [r3]
 801955a:	4629      	mov	r1, r5
 801955c:	ec53 2b17 	vmov	r2, r3, d7
 8019560:	eeb0 9a47 	vmov.f32	s18, s14
 8019564:	eef0 9a67 	vmov.f32	s19, s15
 8019568:	4682      	mov	sl, r0
 801956a:	f7e6 fe8d 	bl	8000288 <__aeabi_dsub>
 801956e:	4652      	mov	r2, sl
 8019570:	4606      	mov	r6, r0
 8019572:	460f      	mov	r7, r1
 8019574:	462b      	mov	r3, r5
 8019576:	ec51 0b19 	vmov	r0, r1, d9
 801957a:	f7e6 fe87 	bl	800028c <__adddf3>
 801957e:	4602      	mov	r2, r0
 8019580:	460b      	mov	r3, r1
 8019582:	2000      	movs	r0, #0
 8019584:	49bb      	ldr	r1, [pc, #748]	; (8019874 <__ieee754_pow+0x76c>)
 8019586:	f7e7 f961 	bl	800084c <__aeabi_ddiv>
 801958a:	ec41 0b1a 	vmov	d10, r0, r1
 801958e:	4602      	mov	r2, r0
 8019590:	460b      	mov	r3, r1
 8019592:	4630      	mov	r0, r6
 8019594:	4639      	mov	r1, r7
 8019596:	f7e7 f82f 	bl	80005f8 <__aeabi_dmul>
 801959a:	2300      	movs	r3, #0
 801959c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80195a0:	9302      	str	r3, [sp, #8]
 80195a2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80195a6:	46ab      	mov	fp, r5
 80195a8:	106d      	asrs	r5, r5, #1
 80195aa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80195ae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80195b2:	ec41 0b18 	vmov	d8, r0, r1
 80195b6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80195ba:	2200      	movs	r2, #0
 80195bc:	4640      	mov	r0, r8
 80195be:	4649      	mov	r1, r9
 80195c0:	4614      	mov	r4, r2
 80195c2:	461d      	mov	r5, r3
 80195c4:	f7e7 f818 	bl	80005f8 <__aeabi_dmul>
 80195c8:	4602      	mov	r2, r0
 80195ca:	460b      	mov	r3, r1
 80195cc:	4630      	mov	r0, r6
 80195ce:	4639      	mov	r1, r7
 80195d0:	f7e6 fe5a 	bl	8000288 <__aeabi_dsub>
 80195d4:	ec53 2b19 	vmov	r2, r3, d9
 80195d8:	4606      	mov	r6, r0
 80195da:	460f      	mov	r7, r1
 80195dc:	4620      	mov	r0, r4
 80195de:	4629      	mov	r1, r5
 80195e0:	f7e6 fe52 	bl	8000288 <__aeabi_dsub>
 80195e4:	4602      	mov	r2, r0
 80195e6:	460b      	mov	r3, r1
 80195e8:	4650      	mov	r0, sl
 80195ea:	4659      	mov	r1, fp
 80195ec:	f7e6 fe4c 	bl	8000288 <__aeabi_dsub>
 80195f0:	4642      	mov	r2, r8
 80195f2:	464b      	mov	r3, r9
 80195f4:	f7e7 f800 	bl	80005f8 <__aeabi_dmul>
 80195f8:	4602      	mov	r2, r0
 80195fa:	460b      	mov	r3, r1
 80195fc:	4630      	mov	r0, r6
 80195fe:	4639      	mov	r1, r7
 8019600:	f7e6 fe42 	bl	8000288 <__aeabi_dsub>
 8019604:	ec53 2b1a 	vmov	r2, r3, d10
 8019608:	f7e6 fff6 	bl	80005f8 <__aeabi_dmul>
 801960c:	ec53 2b18 	vmov	r2, r3, d8
 8019610:	ec41 0b19 	vmov	d9, r0, r1
 8019614:	ec51 0b18 	vmov	r0, r1, d8
 8019618:	f7e6 ffee 	bl	80005f8 <__aeabi_dmul>
 801961c:	a37c      	add	r3, pc, #496	; (adr r3, 8019810 <__ieee754_pow+0x708>)
 801961e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019622:	4604      	mov	r4, r0
 8019624:	460d      	mov	r5, r1
 8019626:	f7e6 ffe7 	bl	80005f8 <__aeabi_dmul>
 801962a:	a37b      	add	r3, pc, #492	; (adr r3, 8019818 <__ieee754_pow+0x710>)
 801962c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019630:	f7e6 fe2c 	bl	800028c <__adddf3>
 8019634:	4622      	mov	r2, r4
 8019636:	462b      	mov	r3, r5
 8019638:	f7e6 ffde 	bl	80005f8 <__aeabi_dmul>
 801963c:	a378      	add	r3, pc, #480	; (adr r3, 8019820 <__ieee754_pow+0x718>)
 801963e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019642:	f7e6 fe23 	bl	800028c <__adddf3>
 8019646:	4622      	mov	r2, r4
 8019648:	462b      	mov	r3, r5
 801964a:	f7e6 ffd5 	bl	80005f8 <__aeabi_dmul>
 801964e:	a376      	add	r3, pc, #472	; (adr r3, 8019828 <__ieee754_pow+0x720>)
 8019650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019654:	f7e6 fe1a 	bl	800028c <__adddf3>
 8019658:	4622      	mov	r2, r4
 801965a:	462b      	mov	r3, r5
 801965c:	f7e6 ffcc 	bl	80005f8 <__aeabi_dmul>
 8019660:	a373      	add	r3, pc, #460	; (adr r3, 8019830 <__ieee754_pow+0x728>)
 8019662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019666:	f7e6 fe11 	bl	800028c <__adddf3>
 801966a:	4622      	mov	r2, r4
 801966c:	462b      	mov	r3, r5
 801966e:	f7e6 ffc3 	bl	80005f8 <__aeabi_dmul>
 8019672:	a371      	add	r3, pc, #452	; (adr r3, 8019838 <__ieee754_pow+0x730>)
 8019674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019678:	f7e6 fe08 	bl	800028c <__adddf3>
 801967c:	4622      	mov	r2, r4
 801967e:	4606      	mov	r6, r0
 8019680:	460f      	mov	r7, r1
 8019682:	462b      	mov	r3, r5
 8019684:	4620      	mov	r0, r4
 8019686:	4629      	mov	r1, r5
 8019688:	f7e6 ffb6 	bl	80005f8 <__aeabi_dmul>
 801968c:	4602      	mov	r2, r0
 801968e:	460b      	mov	r3, r1
 8019690:	4630      	mov	r0, r6
 8019692:	4639      	mov	r1, r7
 8019694:	f7e6 ffb0 	bl	80005f8 <__aeabi_dmul>
 8019698:	4642      	mov	r2, r8
 801969a:	4604      	mov	r4, r0
 801969c:	460d      	mov	r5, r1
 801969e:	464b      	mov	r3, r9
 80196a0:	ec51 0b18 	vmov	r0, r1, d8
 80196a4:	f7e6 fdf2 	bl	800028c <__adddf3>
 80196a8:	ec53 2b19 	vmov	r2, r3, d9
 80196ac:	f7e6 ffa4 	bl	80005f8 <__aeabi_dmul>
 80196b0:	4622      	mov	r2, r4
 80196b2:	462b      	mov	r3, r5
 80196b4:	f7e6 fdea 	bl	800028c <__adddf3>
 80196b8:	4642      	mov	r2, r8
 80196ba:	4682      	mov	sl, r0
 80196bc:	468b      	mov	fp, r1
 80196be:	464b      	mov	r3, r9
 80196c0:	4640      	mov	r0, r8
 80196c2:	4649      	mov	r1, r9
 80196c4:	f7e6 ff98 	bl	80005f8 <__aeabi_dmul>
 80196c8:	4b6b      	ldr	r3, [pc, #428]	; (8019878 <__ieee754_pow+0x770>)
 80196ca:	2200      	movs	r2, #0
 80196cc:	4606      	mov	r6, r0
 80196ce:	460f      	mov	r7, r1
 80196d0:	f7e6 fddc 	bl	800028c <__adddf3>
 80196d4:	4652      	mov	r2, sl
 80196d6:	465b      	mov	r3, fp
 80196d8:	f7e6 fdd8 	bl	800028c <__adddf3>
 80196dc:	2000      	movs	r0, #0
 80196de:	4604      	mov	r4, r0
 80196e0:	460d      	mov	r5, r1
 80196e2:	4602      	mov	r2, r0
 80196e4:	460b      	mov	r3, r1
 80196e6:	4640      	mov	r0, r8
 80196e8:	4649      	mov	r1, r9
 80196ea:	f7e6 ff85 	bl	80005f8 <__aeabi_dmul>
 80196ee:	4b62      	ldr	r3, [pc, #392]	; (8019878 <__ieee754_pow+0x770>)
 80196f0:	4680      	mov	r8, r0
 80196f2:	4689      	mov	r9, r1
 80196f4:	2200      	movs	r2, #0
 80196f6:	4620      	mov	r0, r4
 80196f8:	4629      	mov	r1, r5
 80196fa:	f7e6 fdc5 	bl	8000288 <__aeabi_dsub>
 80196fe:	4632      	mov	r2, r6
 8019700:	463b      	mov	r3, r7
 8019702:	f7e6 fdc1 	bl	8000288 <__aeabi_dsub>
 8019706:	4602      	mov	r2, r0
 8019708:	460b      	mov	r3, r1
 801970a:	4650      	mov	r0, sl
 801970c:	4659      	mov	r1, fp
 801970e:	f7e6 fdbb 	bl	8000288 <__aeabi_dsub>
 8019712:	ec53 2b18 	vmov	r2, r3, d8
 8019716:	f7e6 ff6f 	bl	80005f8 <__aeabi_dmul>
 801971a:	4622      	mov	r2, r4
 801971c:	4606      	mov	r6, r0
 801971e:	460f      	mov	r7, r1
 8019720:	462b      	mov	r3, r5
 8019722:	ec51 0b19 	vmov	r0, r1, d9
 8019726:	f7e6 ff67 	bl	80005f8 <__aeabi_dmul>
 801972a:	4602      	mov	r2, r0
 801972c:	460b      	mov	r3, r1
 801972e:	4630      	mov	r0, r6
 8019730:	4639      	mov	r1, r7
 8019732:	f7e6 fdab 	bl	800028c <__adddf3>
 8019736:	4606      	mov	r6, r0
 8019738:	460f      	mov	r7, r1
 801973a:	4602      	mov	r2, r0
 801973c:	460b      	mov	r3, r1
 801973e:	4640      	mov	r0, r8
 8019740:	4649      	mov	r1, r9
 8019742:	f7e6 fda3 	bl	800028c <__adddf3>
 8019746:	a33e      	add	r3, pc, #248	; (adr r3, 8019840 <__ieee754_pow+0x738>)
 8019748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801974c:	2000      	movs	r0, #0
 801974e:	4604      	mov	r4, r0
 8019750:	460d      	mov	r5, r1
 8019752:	f7e6 ff51 	bl	80005f8 <__aeabi_dmul>
 8019756:	4642      	mov	r2, r8
 8019758:	ec41 0b18 	vmov	d8, r0, r1
 801975c:	464b      	mov	r3, r9
 801975e:	4620      	mov	r0, r4
 8019760:	4629      	mov	r1, r5
 8019762:	f7e6 fd91 	bl	8000288 <__aeabi_dsub>
 8019766:	4602      	mov	r2, r0
 8019768:	460b      	mov	r3, r1
 801976a:	4630      	mov	r0, r6
 801976c:	4639      	mov	r1, r7
 801976e:	f7e6 fd8b 	bl	8000288 <__aeabi_dsub>
 8019772:	a335      	add	r3, pc, #212	; (adr r3, 8019848 <__ieee754_pow+0x740>)
 8019774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019778:	f7e6 ff3e 	bl	80005f8 <__aeabi_dmul>
 801977c:	a334      	add	r3, pc, #208	; (adr r3, 8019850 <__ieee754_pow+0x748>)
 801977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019782:	4606      	mov	r6, r0
 8019784:	460f      	mov	r7, r1
 8019786:	4620      	mov	r0, r4
 8019788:	4629      	mov	r1, r5
 801978a:	f7e6 ff35 	bl	80005f8 <__aeabi_dmul>
 801978e:	4602      	mov	r2, r0
 8019790:	460b      	mov	r3, r1
 8019792:	4630      	mov	r0, r6
 8019794:	4639      	mov	r1, r7
 8019796:	f7e6 fd79 	bl	800028c <__adddf3>
 801979a:	9a07      	ldr	r2, [sp, #28]
 801979c:	4b37      	ldr	r3, [pc, #220]	; (801987c <__ieee754_pow+0x774>)
 801979e:	4413      	add	r3, r2
 80197a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197a4:	f7e6 fd72 	bl	800028c <__adddf3>
 80197a8:	4682      	mov	sl, r0
 80197aa:	9805      	ldr	r0, [sp, #20]
 80197ac:	468b      	mov	fp, r1
 80197ae:	f7e6 feb9 	bl	8000524 <__aeabi_i2d>
 80197b2:	9a07      	ldr	r2, [sp, #28]
 80197b4:	4b32      	ldr	r3, [pc, #200]	; (8019880 <__ieee754_pow+0x778>)
 80197b6:	4413      	add	r3, r2
 80197b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80197bc:	4606      	mov	r6, r0
 80197be:	460f      	mov	r7, r1
 80197c0:	4652      	mov	r2, sl
 80197c2:	465b      	mov	r3, fp
 80197c4:	ec51 0b18 	vmov	r0, r1, d8
 80197c8:	f7e6 fd60 	bl	800028c <__adddf3>
 80197cc:	4642      	mov	r2, r8
 80197ce:	464b      	mov	r3, r9
 80197d0:	f7e6 fd5c 	bl	800028c <__adddf3>
 80197d4:	4632      	mov	r2, r6
 80197d6:	463b      	mov	r3, r7
 80197d8:	f7e6 fd58 	bl	800028c <__adddf3>
 80197dc:	2000      	movs	r0, #0
 80197de:	4632      	mov	r2, r6
 80197e0:	463b      	mov	r3, r7
 80197e2:	4604      	mov	r4, r0
 80197e4:	460d      	mov	r5, r1
 80197e6:	f7e6 fd4f 	bl	8000288 <__aeabi_dsub>
 80197ea:	4642      	mov	r2, r8
 80197ec:	464b      	mov	r3, r9
 80197ee:	f7e6 fd4b 	bl	8000288 <__aeabi_dsub>
 80197f2:	ec53 2b18 	vmov	r2, r3, d8
 80197f6:	f7e6 fd47 	bl	8000288 <__aeabi_dsub>
 80197fa:	4602      	mov	r2, r0
 80197fc:	460b      	mov	r3, r1
 80197fe:	4650      	mov	r0, sl
 8019800:	4659      	mov	r1, fp
 8019802:	e610      	b.n	8019426 <__ieee754_pow+0x31e>
 8019804:	2401      	movs	r4, #1
 8019806:	e6a1      	b.n	801954c <__ieee754_pow+0x444>
 8019808:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8019858 <__ieee754_pow+0x750>
 801980c:	e617      	b.n	801943e <__ieee754_pow+0x336>
 801980e:	bf00      	nop
 8019810:	4a454eef 	.word	0x4a454eef
 8019814:	3fca7e28 	.word	0x3fca7e28
 8019818:	93c9db65 	.word	0x93c9db65
 801981c:	3fcd864a 	.word	0x3fcd864a
 8019820:	a91d4101 	.word	0xa91d4101
 8019824:	3fd17460 	.word	0x3fd17460
 8019828:	518f264d 	.word	0x518f264d
 801982c:	3fd55555 	.word	0x3fd55555
 8019830:	db6fabff 	.word	0xdb6fabff
 8019834:	3fdb6db6 	.word	0x3fdb6db6
 8019838:	33333303 	.word	0x33333303
 801983c:	3fe33333 	.word	0x3fe33333
 8019840:	e0000000 	.word	0xe0000000
 8019844:	3feec709 	.word	0x3feec709
 8019848:	dc3a03fd 	.word	0xdc3a03fd
 801984c:	3feec709 	.word	0x3feec709
 8019850:	145b01f5 	.word	0x145b01f5
 8019854:	be3e2fe0 	.word	0xbe3e2fe0
 8019858:	00000000 	.word	0x00000000
 801985c:	3ff00000 	.word	0x3ff00000
 8019860:	7ff00000 	.word	0x7ff00000
 8019864:	43400000 	.word	0x43400000
 8019868:	0003988e 	.word	0x0003988e
 801986c:	000bb679 	.word	0x000bb679
 8019870:	080312c0 	.word	0x080312c0
 8019874:	3ff00000 	.word	0x3ff00000
 8019878:	40080000 	.word	0x40080000
 801987c:	080312e0 	.word	0x080312e0
 8019880:	080312d0 	.word	0x080312d0
 8019884:	a3b5      	add	r3, pc, #724	; (adr r3, 8019b5c <__ieee754_pow+0xa54>)
 8019886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801988a:	4640      	mov	r0, r8
 801988c:	4649      	mov	r1, r9
 801988e:	f7e6 fcfd 	bl	800028c <__adddf3>
 8019892:	4622      	mov	r2, r4
 8019894:	ec41 0b1a 	vmov	d10, r0, r1
 8019898:	462b      	mov	r3, r5
 801989a:	4630      	mov	r0, r6
 801989c:	4639      	mov	r1, r7
 801989e:	f7e6 fcf3 	bl	8000288 <__aeabi_dsub>
 80198a2:	4602      	mov	r2, r0
 80198a4:	460b      	mov	r3, r1
 80198a6:	ec51 0b1a 	vmov	r0, r1, d10
 80198aa:	f7e7 f935 	bl	8000b18 <__aeabi_dcmpgt>
 80198ae:	2800      	cmp	r0, #0
 80198b0:	f47f ae04 	bne.w	80194bc <__ieee754_pow+0x3b4>
 80198b4:	4aa4      	ldr	r2, [pc, #656]	; (8019b48 <__ieee754_pow+0xa40>)
 80198b6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80198ba:	4293      	cmp	r3, r2
 80198bc:	f340 8108 	ble.w	8019ad0 <__ieee754_pow+0x9c8>
 80198c0:	151b      	asrs	r3, r3, #20
 80198c2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80198c6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80198ca:	fa4a f303 	asr.w	r3, sl, r3
 80198ce:	445b      	add	r3, fp
 80198d0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80198d4:	4e9d      	ldr	r6, [pc, #628]	; (8019b4c <__ieee754_pow+0xa44>)
 80198d6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80198da:	4116      	asrs	r6, r2
 80198dc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80198e0:	2000      	movs	r0, #0
 80198e2:	ea23 0106 	bic.w	r1, r3, r6
 80198e6:	f1c2 0214 	rsb	r2, r2, #20
 80198ea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80198ee:	fa4a fa02 	asr.w	sl, sl, r2
 80198f2:	f1bb 0f00 	cmp.w	fp, #0
 80198f6:	4602      	mov	r2, r0
 80198f8:	460b      	mov	r3, r1
 80198fa:	4620      	mov	r0, r4
 80198fc:	4629      	mov	r1, r5
 80198fe:	bfb8      	it	lt
 8019900:	f1ca 0a00 	rsblt	sl, sl, #0
 8019904:	f7e6 fcc0 	bl	8000288 <__aeabi_dsub>
 8019908:	ec41 0b19 	vmov	d9, r0, r1
 801990c:	4642      	mov	r2, r8
 801990e:	464b      	mov	r3, r9
 8019910:	ec51 0b19 	vmov	r0, r1, d9
 8019914:	f7e6 fcba 	bl	800028c <__adddf3>
 8019918:	a37b      	add	r3, pc, #492	; (adr r3, 8019b08 <__ieee754_pow+0xa00>)
 801991a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801991e:	2000      	movs	r0, #0
 8019920:	4604      	mov	r4, r0
 8019922:	460d      	mov	r5, r1
 8019924:	f7e6 fe68 	bl	80005f8 <__aeabi_dmul>
 8019928:	ec53 2b19 	vmov	r2, r3, d9
 801992c:	4606      	mov	r6, r0
 801992e:	460f      	mov	r7, r1
 8019930:	4620      	mov	r0, r4
 8019932:	4629      	mov	r1, r5
 8019934:	f7e6 fca8 	bl	8000288 <__aeabi_dsub>
 8019938:	4602      	mov	r2, r0
 801993a:	460b      	mov	r3, r1
 801993c:	4640      	mov	r0, r8
 801993e:	4649      	mov	r1, r9
 8019940:	f7e6 fca2 	bl	8000288 <__aeabi_dsub>
 8019944:	a372      	add	r3, pc, #456	; (adr r3, 8019b10 <__ieee754_pow+0xa08>)
 8019946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801994a:	f7e6 fe55 	bl	80005f8 <__aeabi_dmul>
 801994e:	a372      	add	r3, pc, #456	; (adr r3, 8019b18 <__ieee754_pow+0xa10>)
 8019950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019954:	4680      	mov	r8, r0
 8019956:	4689      	mov	r9, r1
 8019958:	4620      	mov	r0, r4
 801995a:	4629      	mov	r1, r5
 801995c:	f7e6 fe4c 	bl	80005f8 <__aeabi_dmul>
 8019960:	4602      	mov	r2, r0
 8019962:	460b      	mov	r3, r1
 8019964:	4640      	mov	r0, r8
 8019966:	4649      	mov	r1, r9
 8019968:	f7e6 fc90 	bl	800028c <__adddf3>
 801996c:	4604      	mov	r4, r0
 801996e:	460d      	mov	r5, r1
 8019970:	4602      	mov	r2, r0
 8019972:	460b      	mov	r3, r1
 8019974:	4630      	mov	r0, r6
 8019976:	4639      	mov	r1, r7
 8019978:	f7e6 fc88 	bl	800028c <__adddf3>
 801997c:	4632      	mov	r2, r6
 801997e:	463b      	mov	r3, r7
 8019980:	4680      	mov	r8, r0
 8019982:	4689      	mov	r9, r1
 8019984:	f7e6 fc80 	bl	8000288 <__aeabi_dsub>
 8019988:	4602      	mov	r2, r0
 801998a:	460b      	mov	r3, r1
 801998c:	4620      	mov	r0, r4
 801998e:	4629      	mov	r1, r5
 8019990:	f7e6 fc7a 	bl	8000288 <__aeabi_dsub>
 8019994:	4642      	mov	r2, r8
 8019996:	4606      	mov	r6, r0
 8019998:	460f      	mov	r7, r1
 801999a:	464b      	mov	r3, r9
 801999c:	4640      	mov	r0, r8
 801999e:	4649      	mov	r1, r9
 80199a0:	f7e6 fe2a 	bl	80005f8 <__aeabi_dmul>
 80199a4:	a35e      	add	r3, pc, #376	; (adr r3, 8019b20 <__ieee754_pow+0xa18>)
 80199a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199aa:	4604      	mov	r4, r0
 80199ac:	460d      	mov	r5, r1
 80199ae:	f7e6 fe23 	bl	80005f8 <__aeabi_dmul>
 80199b2:	a35d      	add	r3, pc, #372	; (adr r3, 8019b28 <__ieee754_pow+0xa20>)
 80199b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199b8:	f7e6 fc66 	bl	8000288 <__aeabi_dsub>
 80199bc:	4622      	mov	r2, r4
 80199be:	462b      	mov	r3, r5
 80199c0:	f7e6 fe1a 	bl	80005f8 <__aeabi_dmul>
 80199c4:	a35a      	add	r3, pc, #360	; (adr r3, 8019b30 <__ieee754_pow+0xa28>)
 80199c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199ca:	f7e6 fc5f 	bl	800028c <__adddf3>
 80199ce:	4622      	mov	r2, r4
 80199d0:	462b      	mov	r3, r5
 80199d2:	f7e6 fe11 	bl	80005f8 <__aeabi_dmul>
 80199d6:	a358      	add	r3, pc, #352	; (adr r3, 8019b38 <__ieee754_pow+0xa30>)
 80199d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199dc:	f7e6 fc54 	bl	8000288 <__aeabi_dsub>
 80199e0:	4622      	mov	r2, r4
 80199e2:	462b      	mov	r3, r5
 80199e4:	f7e6 fe08 	bl	80005f8 <__aeabi_dmul>
 80199e8:	a355      	add	r3, pc, #340	; (adr r3, 8019b40 <__ieee754_pow+0xa38>)
 80199ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199ee:	f7e6 fc4d 	bl	800028c <__adddf3>
 80199f2:	4622      	mov	r2, r4
 80199f4:	462b      	mov	r3, r5
 80199f6:	f7e6 fdff 	bl	80005f8 <__aeabi_dmul>
 80199fa:	4602      	mov	r2, r0
 80199fc:	460b      	mov	r3, r1
 80199fe:	4640      	mov	r0, r8
 8019a00:	4649      	mov	r1, r9
 8019a02:	f7e6 fc41 	bl	8000288 <__aeabi_dsub>
 8019a06:	4604      	mov	r4, r0
 8019a08:	460d      	mov	r5, r1
 8019a0a:	4602      	mov	r2, r0
 8019a0c:	460b      	mov	r3, r1
 8019a0e:	4640      	mov	r0, r8
 8019a10:	4649      	mov	r1, r9
 8019a12:	f7e6 fdf1 	bl	80005f8 <__aeabi_dmul>
 8019a16:	2200      	movs	r2, #0
 8019a18:	ec41 0b19 	vmov	d9, r0, r1
 8019a1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019a20:	4620      	mov	r0, r4
 8019a22:	4629      	mov	r1, r5
 8019a24:	f7e6 fc30 	bl	8000288 <__aeabi_dsub>
 8019a28:	4602      	mov	r2, r0
 8019a2a:	460b      	mov	r3, r1
 8019a2c:	ec51 0b19 	vmov	r0, r1, d9
 8019a30:	f7e6 ff0c 	bl	800084c <__aeabi_ddiv>
 8019a34:	4632      	mov	r2, r6
 8019a36:	4604      	mov	r4, r0
 8019a38:	460d      	mov	r5, r1
 8019a3a:	463b      	mov	r3, r7
 8019a3c:	4640      	mov	r0, r8
 8019a3e:	4649      	mov	r1, r9
 8019a40:	f7e6 fdda 	bl	80005f8 <__aeabi_dmul>
 8019a44:	4632      	mov	r2, r6
 8019a46:	463b      	mov	r3, r7
 8019a48:	f7e6 fc20 	bl	800028c <__adddf3>
 8019a4c:	4602      	mov	r2, r0
 8019a4e:	460b      	mov	r3, r1
 8019a50:	4620      	mov	r0, r4
 8019a52:	4629      	mov	r1, r5
 8019a54:	f7e6 fc18 	bl	8000288 <__aeabi_dsub>
 8019a58:	4642      	mov	r2, r8
 8019a5a:	464b      	mov	r3, r9
 8019a5c:	f7e6 fc14 	bl	8000288 <__aeabi_dsub>
 8019a60:	460b      	mov	r3, r1
 8019a62:	4602      	mov	r2, r0
 8019a64:	493a      	ldr	r1, [pc, #232]	; (8019b50 <__ieee754_pow+0xa48>)
 8019a66:	2000      	movs	r0, #0
 8019a68:	f7e6 fc0e 	bl	8000288 <__aeabi_dsub>
 8019a6c:	ec41 0b10 	vmov	d0, r0, r1
 8019a70:	ee10 3a90 	vmov	r3, s1
 8019a74:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8019a78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019a7c:	da2b      	bge.n	8019ad6 <__ieee754_pow+0x9ce>
 8019a7e:	4650      	mov	r0, sl
 8019a80:	f000 fa0a 	bl	8019e98 <scalbn>
 8019a84:	ec51 0b10 	vmov	r0, r1, d0
 8019a88:	ec53 2b18 	vmov	r2, r3, d8
 8019a8c:	f7ff bbed 	b.w	801926a <__ieee754_pow+0x162>
 8019a90:	4b30      	ldr	r3, [pc, #192]	; (8019b54 <__ieee754_pow+0xa4c>)
 8019a92:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8019a96:	429e      	cmp	r6, r3
 8019a98:	f77f af0c 	ble.w	80198b4 <__ieee754_pow+0x7ac>
 8019a9c:	4b2e      	ldr	r3, [pc, #184]	; (8019b58 <__ieee754_pow+0xa50>)
 8019a9e:	440b      	add	r3, r1
 8019aa0:	4303      	orrs	r3, r0
 8019aa2:	d009      	beq.n	8019ab8 <__ieee754_pow+0x9b0>
 8019aa4:	ec51 0b18 	vmov	r0, r1, d8
 8019aa8:	2200      	movs	r2, #0
 8019aaa:	2300      	movs	r3, #0
 8019aac:	f7e7 f816 	bl	8000adc <__aeabi_dcmplt>
 8019ab0:	3800      	subs	r0, #0
 8019ab2:	bf18      	it	ne
 8019ab4:	2001      	movne	r0, #1
 8019ab6:	e447      	b.n	8019348 <__ieee754_pow+0x240>
 8019ab8:	4622      	mov	r2, r4
 8019aba:	462b      	mov	r3, r5
 8019abc:	f7e6 fbe4 	bl	8000288 <__aeabi_dsub>
 8019ac0:	4642      	mov	r2, r8
 8019ac2:	464b      	mov	r3, r9
 8019ac4:	f7e7 f81e 	bl	8000b04 <__aeabi_dcmpge>
 8019ac8:	2800      	cmp	r0, #0
 8019aca:	f43f aef3 	beq.w	80198b4 <__ieee754_pow+0x7ac>
 8019ace:	e7e9      	b.n	8019aa4 <__ieee754_pow+0x99c>
 8019ad0:	f04f 0a00 	mov.w	sl, #0
 8019ad4:	e71a      	b.n	801990c <__ieee754_pow+0x804>
 8019ad6:	ec51 0b10 	vmov	r0, r1, d0
 8019ada:	4619      	mov	r1, r3
 8019adc:	e7d4      	b.n	8019a88 <__ieee754_pow+0x980>
 8019ade:	491c      	ldr	r1, [pc, #112]	; (8019b50 <__ieee754_pow+0xa48>)
 8019ae0:	2000      	movs	r0, #0
 8019ae2:	f7ff bb30 	b.w	8019146 <__ieee754_pow+0x3e>
 8019ae6:	2000      	movs	r0, #0
 8019ae8:	2100      	movs	r1, #0
 8019aea:	f7ff bb2c 	b.w	8019146 <__ieee754_pow+0x3e>
 8019aee:	4630      	mov	r0, r6
 8019af0:	4639      	mov	r1, r7
 8019af2:	f7ff bb28 	b.w	8019146 <__ieee754_pow+0x3e>
 8019af6:	9204      	str	r2, [sp, #16]
 8019af8:	f7ff bb7a 	b.w	80191f0 <__ieee754_pow+0xe8>
 8019afc:	2300      	movs	r3, #0
 8019afe:	f7ff bb64 	b.w	80191ca <__ieee754_pow+0xc2>
 8019b02:	bf00      	nop
 8019b04:	f3af 8000 	nop.w
 8019b08:	00000000 	.word	0x00000000
 8019b0c:	3fe62e43 	.word	0x3fe62e43
 8019b10:	fefa39ef 	.word	0xfefa39ef
 8019b14:	3fe62e42 	.word	0x3fe62e42
 8019b18:	0ca86c39 	.word	0x0ca86c39
 8019b1c:	be205c61 	.word	0xbe205c61
 8019b20:	72bea4d0 	.word	0x72bea4d0
 8019b24:	3e663769 	.word	0x3e663769
 8019b28:	c5d26bf1 	.word	0xc5d26bf1
 8019b2c:	3ebbbd41 	.word	0x3ebbbd41
 8019b30:	af25de2c 	.word	0xaf25de2c
 8019b34:	3f11566a 	.word	0x3f11566a
 8019b38:	16bebd93 	.word	0x16bebd93
 8019b3c:	3f66c16c 	.word	0x3f66c16c
 8019b40:	5555553e 	.word	0x5555553e
 8019b44:	3fc55555 	.word	0x3fc55555
 8019b48:	3fe00000 	.word	0x3fe00000
 8019b4c:	000fffff 	.word	0x000fffff
 8019b50:	3ff00000 	.word	0x3ff00000
 8019b54:	4090cbff 	.word	0x4090cbff
 8019b58:	3f6f3400 	.word	0x3f6f3400
 8019b5c:	652b82fe 	.word	0x652b82fe
 8019b60:	3c971547 	.word	0x3c971547

08019b64 <__ieee754_sqrt>:
 8019b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b68:	ec55 4b10 	vmov	r4, r5, d0
 8019b6c:	4e55      	ldr	r6, [pc, #340]	; (8019cc4 <__ieee754_sqrt+0x160>)
 8019b6e:	43ae      	bics	r6, r5
 8019b70:	ee10 0a10 	vmov	r0, s0
 8019b74:	ee10 3a10 	vmov	r3, s0
 8019b78:	462a      	mov	r2, r5
 8019b7a:	4629      	mov	r1, r5
 8019b7c:	d110      	bne.n	8019ba0 <__ieee754_sqrt+0x3c>
 8019b7e:	ee10 2a10 	vmov	r2, s0
 8019b82:	462b      	mov	r3, r5
 8019b84:	f7e6 fd38 	bl	80005f8 <__aeabi_dmul>
 8019b88:	4602      	mov	r2, r0
 8019b8a:	460b      	mov	r3, r1
 8019b8c:	4620      	mov	r0, r4
 8019b8e:	4629      	mov	r1, r5
 8019b90:	f7e6 fb7c 	bl	800028c <__adddf3>
 8019b94:	4604      	mov	r4, r0
 8019b96:	460d      	mov	r5, r1
 8019b98:	ec45 4b10 	vmov	d0, r4, r5
 8019b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ba0:	2d00      	cmp	r5, #0
 8019ba2:	dc10      	bgt.n	8019bc6 <__ieee754_sqrt+0x62>
 8019ba4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019ba8:	4330      	orrs	r0, r6
 8019baa:	d0f5      	beq.n	8019b98 <__ieee754_sqrt+0x34>
 8019bac:	b15d      	cbz	r5, 8019bc6 <__ieee754_sqrt+0x62>
 8019bae:	ee10 2a10 	vmov	r2, s0
 8019bb2:	462b      	mov	r3, r5
 8019bb4:	ee10 0a10 	vmov	r0, s0
 8019bb8:	f7e6 fb66 	bl	8000288 <__aeabi_dsub>
 8019bbc:	4602      	mov	r2, r0
 8019bbe:	460b      	mov	r3, r1
 8019bc0:	f7e6 fe44 	bl	800084c <__aeabi_ddiv>
 8019bc4:	e7e6      	b.n	8019b94 <__ieee754_sqrt+0x30>
 8019bc6:	1512      	asrs	r2, r2, #20
 8019bc8:	d074      	beq.n	8019cb4 <__ieee754_sqrt+0x150>
 8019bca:	07d4      	lsls	r4, r2, #31
 8019bcc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019bd0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8019bd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8019bd8:	bf5e      	ittt	pl
 8019bda:	0fda      	lsrpl	r2, r3, #31
 8019bdc:	005b      	lslpl	r3, r3, #1
 8019bde:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8019be2:	2400      	movs	r4, #0
 8019be4:	0fda      	lsrs	r2, r3, #31
 8019be6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8019bea:	107f      	asrs	r7, r7, #1
 8019bec:	005b      	lsls	r3, r3, #1
 8019bee:	2516      	movs	r5, #22
 8019bf0:	4620      	mov	r0, r4
 8019bf2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8019bf6:	1886      	adds	r6, r0, r2
 8019bf8:	428e      	cmp	r6, r1
 8019bfa:	bfde      	ittt	le
 8019bfc:	1b89      	suble	r1, r1, r6
 8019bfe:	18b0      	addle	r0, r6, r2
 8019c00:	18a4      	addle	r4, r4, r2
 8019c02:	0049      	lsls	r1, r1, #1
 8019c04:	3d01      	subs	r5, #1
 8019c06:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8019c0a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8019c0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019c12:	d1f0      	bne.n	8019bf6 <__ieee754_sqrt+0x92>
 8019c14:	462a      	mov	r2, r5
 8019c16:	f04f 0e20 	mov.w	lr, #32
 8019c1a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019c1e:	4281      	cmp	r1, r0
 8019c20:	eb06 0c05 	add.w	ip, r6, r5
 8019c24:	dc02      	bgt.n	8019c2c <__ieee754_sqrt+0xc8>
 8019c26:	d113      	bne.n	8019c50 <__ieee754_sqrt+0xec>
 8019c28:	459c      	cmp	ip, r3
 8019c2a:	d811      	bhi.n	8019c50 <__ieee754_sqrt+0xec>
 8019c2c:	f1bc 0f00 	cmp.w	ip, #0
 8019c30:	eb0c 0506 	add.w	r5, ip, r6
 8019c34:	da43      	bge.n	8019cbe <__ieee754_sqrt+0x15a>
 8019c36:	2d00      	cmp	r5, #0
 8019c38:	db41      	blt.n	8019cbe <__ieee754_sqrt+0x15a>
 8019c3a:	f100 0801 	add.w	r8, r0, #1
 8019c3e:	1a09      	subs	r1, r1, r0
 8019c40:	459c      	cmp	ip, r3
 8019c42:	bf88      	it	hi
 8019c44:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8019c48:	eba3 030c 	sub.w	r3, r3, ip
 8019c4c:	4432      	add	r2, r6
 8019c4e:	4640      	mov	r0, r8
 8019c50:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8019c54:	f1be 0e01 	subs.w	lr, lr, #1
 8019c58:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8019c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019c60:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019c64:	d1db      	bne.n	8019c1e <__ieee754_sqrt+0xba>
 8019c66:	430b      	orrs	r3, r1
 8019c68:	d006      	beq.n	8019c78 <__ieee754_sqrt+0x114>
 8019c6a:	1c50      	adds	r0, r2, #1
 8019c6c:	bf13      	iteet	ne
 8019c6e:	3201      	addne	r2, #1
 8019c70:	3401      	addeq	r4, #1
 8019c72:	4672      	moveq	r2, lr
 8019c74:	f022 0201 	bicne.w	r2, r2, #1
 8019c78:	1063      	asrs	r3, r4, #1
 8019c7a:	0852      	lsrs	r2, r2, #1
 8019c7c:	07e1      	lsls	r1, r4, #31
 8019c7e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8019c82:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8019c86:	bf48      	it	mi
 8019c88:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8019c8c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8019c90:	4614      	mov	r4, r2
 8019c92:	e781      	b.n	8019b98 <__ieee754_sqrt+0x34>
 8019c94:	0ad9      	lsrs	r1, r3, #11
 8019c96:	3815      	subs	r0, #21
 8019c98:	055b      	lsls	r3, r3, #21
 8019c9a:	2900      	cmp	r1, #0
 8019c9c:	d0fa      	beq.n	8019c94 <__ieee754_sqrt+0x130>
 8019c9e:	02cd      	lsls	r5, r1, #11
 8019ca0:	d50a      	bpl.n	8019cb8 <__ieee754_sqrt+0x154>
 8019ca2:	f1c2 0420 	rsb	r4, r2, #32
 8019ca6:	fa23 f404 	lsr.w	r4, r3, r4
 8019caa:	1e55      	subs	r5, r2, #1
 8019cac:	4093      	lsls	r3, r2
 8019cae:	4321      	orrs	r1, r4
 8019cb0:	1b42      	subs	r2, r0, r5
 8019cb2:	e78a      	b.n	8019bca <__ieee754_sqrt+0x66>
 8019cb4:	4610      	mov	r0, r2
 8019cb6:	e7f0      	b.n	8019c9a <__ieee754_sqrt+0x136>
 8019cb8:	0049      	lsls	r1, r1, #1
 8019cba:	3201      	adds	r2, #1
 8019cbc:	e7ef      	b.n	8019c9e <__ieee754_sqrt+0x13a>
 8019cbe:	4680      	mov	r8, r0
 8019cc0:	e7bd      	b.n	8019c3e <__ieee754_sqrt+0xda>
 8019cc2:	bf00      	nop
 8019cc4:	7ff00000 	.word	0x7ff00000

08019cc8 <__ieee754_atan2f>:
 8019cc8:	ee10 2a90 	vmov	r2, s1
 8019ccc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8019cd0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019cd4:	b510      	push	{r4, lr}
 8019cd6:	eef0 7a40 	vmov.f32	s15, s0
 8019cda:	dc06      	bgt.n	8019cea <__ieee754_atan2f+0x22>
 8019cdc:	ee10 0a10 	vmov	r0, s0
 8019ce0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8019ce4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019ce8:	dd04      	ble.n	8019cf4 <__ieee754_atan2f+0x2c>
 8019cea:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8019cee:	eeb0 0a67 	vmov.f32	s0, s15
 8019cf2:	bd10      	pop	{r4, pc}
 8019cf4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8019cf8:	d103      	bne.n	8019d02 <__ieee754_atan2f+0x3a>
 8019cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019cfe:	f000 b951 	b.w	8019fa4 <atanf>
 8019d02:	1794      	asrs	r4, r2, #30
 8019d04:	f004 0402 	and.w	r4, r4, #2
 8019d08:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8019d0c:	b943      	cbnz	r3, 8019d20 <__ieee754_atan2f+0x58>
 8019d0e:	2c02      	cmp	r4, #2
 8019d10:	d05e      	beq.n	8019dd0 <__ieee754_atan2f+0x108>
 8019d12:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8019de4 <__ieee754_atan2f+0x11c>
 8019d16:	2c03      	cmp	r4, #3
 8019d18:	bf08      	it	eq
 8019d1a:	eef0 7a47 	vmoveq.f32	s15, s14
 8019d1e:	e7e6      	b.n	8019cee <__ieee754_atan2f+0x26>
 8019d20:	b941      	cbnz	r1, 8019d34 <__ieee754_atan2f+0x6c>
 8019d22:	eddf 7a31 	vldr	s15, [pc, #196]	; 8019de8 <__ieee754_atan2f+0x120>
 8019d26:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8019dec <__ieee754_atan2f+0x124>
 8019d2a:	2800      	cmp	r0, #0
 8019d2c:	bfb8      	it	lt
 8019d2e:	eef0 7a40 	vmovlt.f32	s15, s0
 8019d32:	e7dc      	b.n	8019cee <__ieee754_atan2f+0x26>
 8019d34:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019d38:	d110      	bne.n	8019d5c <__ieee754_atan2f+0x94>
 8019d3a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019d3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8019d42:	d107      	bne.n	8019d54 <__ieee754_atan2f+0x8c>
 8019d44:	2c02      	cmp	r4, #2
 8019d46:	d846      	bhi.n	8019dd6 <__ieee754_atan2f+0x10e>
 8019d48:	4b29      	ldr	r3, [pc, #164]	; (8019df0 <__ieee754_atan2f+0x128>)
 8019d4a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019d4e:	edd4 7a00 	vldr	s15, [r4]
 8019d52:	e7cc      	b.n	8019cee <__ieee754_atan2f+0x26>
 8019d54:	2c02      	cmp	r4, #2
 8019d56:	d841      	bhi.n	8019ddc <__ieee754_atan2f+0x114>
 8019d58:	4b26      	ldr	r3, [pc, #152]	; (8019df4 <__ieee754_atan2f+0x12c>)
 8019d5a:	e7f6      	b.n	8019d4a <__ieee754_atan2f+0x82>
 8019d5c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019d60:	d0df      	beq.n	8019d22 <__ieee754_atan2f+0x5a>
 8019d62:	1a5b      	subs	r3, r3, r1
 8019d64:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8019d68:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8019d6c:	da1a      	bge.n	8019da4 <__ieee754_atan2f+0xdc>
 8019d6e:	2a00      	cmp	r2, #0
 8019d70:	da01      	bge.n	8019d76 <__ieee754_atan2f+0xae>
 8019d72:	313c      	adds	r1, #60	; 0x3c
 8019d74:	db19      	blt.n	8019daa <__ieee754_atan2f+0xe2>
 8019d76:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8019d7a:	f000 f9e7 	bl	801a14c <fabsf>
 8019d7e:	f000 f911 	bl	8019fa4 <atanf>
 8019d82:	eef0 7a40 	vmov.f32	s15, s0
 8019d86:	2c01      	cmp	r4, #1
 8019d88:	d012      	beq.n	8019db0 <__ieee754_atan2f+0xe8>
 8019d8a:	2c02      	cmp	r4, #2
 8019d8c:	d017      	beq.n	8019dbe <__ieee754_atan2f+0xf6>
 8019d8e:	2c00      	cmp	r4, #0
 8019d90:	d0ad      	beq.n	8019cee <__ieee754_atan2f+0x26>
 8019d92:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8019df8 <__ieee754_atan2f+0x130>
 8019d96:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019d9a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8019dfc <__ieee754_atan2f+0x134>
 8019d9e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019da2:	e7a4      	b.n	8019cee <__ieee754_atan2f+0x26>
 8019da4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8019de8 <__ieee754_atan2f+0x120>
 8019da8:	e7ed      	b.n	8019d86 <__ieee754_atan2f+0xbe>
 8019daa:	eddf 7a15 	vldr	s15, [pc, #84]	; 8019e00 <__ieee754_atan2f+0x138>
 8019dae:	e7ea      	b.n	8019d86 <__ieee754_atan2f+0xbe>
 8019db0:	ee17 3a90 	vmov	r3, s15
 8019db4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019db8:	ee07 3a90 	vmov	s15, r3
 8019dbc:	e797      	b.n	8019cee <__ieee754_atan2f+0x26>
 8019dbe:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8019df8 <__ieee754_atan2f+0x130>
 8019dc2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019dc6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8019dfc <__ieee754_atan2f+0x134>
 8019dca:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019dce:	e78e      	b.n	8019cee <__ieee754_atan2f+0x26>
 8019dd0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8019dfc <__ieee754_atan2f+0x134>
 8019dd4:	e78b      	b.n	8019cee <__ieee754_atan2f+0x26>
 8019dd6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8019e04 <__ieee754_atan2f+0x13c>
 8019dda:	e788      	b.n	8019cee <__ieee754_atan2f+0x26>
 8019ddc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019e00 <__ieee754_atan2f+0x138>
 8019de0:	e785      	b.n	8019cee <__ieee754_atan2f+0x26>
 8019de2:	bf00      	nop
 8019de4:	c0490fdb 	.word	0xc0490fdb
 8019de8:	3fc90fdb 	.word	0x3fc90fdb
 8019dec:	bfc90fdb 	.word	0xbfc90fdb
 8019df0:	080312f0 	.word	0x080312f0
 8019df4:	080312fc 	.word	0x080312fc
 8019df8:	33bbbd2e 	.word	0x33bbbd2e
 8019dfc:	40490fdb 	.word	0x40490fdb
 8019e00:	00000000 	.word	0x00000000
 8019e04:	3f490fdb 	.word	0x3f490fdb

08019e08 <__ieee754_sqrtf>:
 8019e08:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019e0c:	4770      	bx	lr

08019e0e <with_errno>:
 8019e0e:	b570      	push	{r4, r5, r6, lr}
 8019e10:	4604      	mov	r4, r0
 8019e12:	460d      	mov	r5, r1
 8019e14:	4616      	mov	r6, r2
 8019e16:	f000 f9ab 	bl	801a170 <__errno>
 8019e1a:	4629      	mov	r1, r5
 8019e1c:	6006      	str	r6, [r0, #0]
 8019e1e:	4620      	mov	r0, r4
 8019e20:	bd70      	pop	{r4, r5, r6, pc}

08019e22 <xflow>:
 8019e22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019e24:	4614      	mov	r4, r2
 8019e26:	461d      	mov	r5, r3
 8019e28:	b108      	cbz	r0, 8019e2e <xflow+0xc>
 8019e2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019e2e:	e9cd 2300 	strd	r2, r3, [sp]
 8019e32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019e36:	4620      	mov	r0, r4
 8019e38:	4629      	mov	r1, r5
 8019e3a:	f7e6 fbdd 	bl	80005f8 <__aeabi_dmul>
 8019e3e:	2222      	movs	r2, #34	; 0x22
 8019e40:	b003      	add	sp, #12
 8019e42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019e46:	f7ff bfe2 	b.w	8019e0e <with_errno>

08019e4a <__math_uflow>:
 8019e4a:	b508      	push	{r3, lr}
 8019e4c:	2200      	movs	r2, #0
 8019e4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8019e52:	f7ff ffe6 	bl	8019e22 <xflow>
 8019e56:	ec41 0b10 	vmov	d0, r0, r1
 8019e5a:	bd08      	pop	{r3, pc}

08019e5c <__math_oflow>:
 8019e5c:	b508      	push	{r3, lr}
 8019e5e:	2200      	movs	r2, #0
 8019e60:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8019e64:	f7ff ffdd 	bl	8019e22 <xflow>
 8019e68:	ec41 0b10 	vmov	d0, r0, r1
 8019e6c:	bd08      	pop	{r3, pc}

08019e6e <fabs>:
 8019e6e:	ec51 0b10 	vmov	r0, r1, d0
 8019e72:	ee10 2a10 	vmov	r2, s0
 8019e76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019e7a:	ec43 2b10 	vmov	d0, r2, r3
 8019e7e:	4770      	bx	lr

08019e80 <finite>:
 8019e80:	b082      	sub	sp, #8
 8019e82:	ed8d 0b00 	vstr	d0, [sp]
 8019e86:	9801      	ldr	r0, [sp, #4]
 8019e88:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8019e8c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019e90:	0fc0      	lsrs	r0, r0, #31
 8019e92:	b002      	add	sp, #8
 8019e94:	4770      	bx	lr
	...

08019e98 <scalbn>:
 8019e98:	b570      	push	{r4, r5, r6, lr}
 8019e9a:	ec55 4b10 	vmov	r4, r5, d0
 8019e9e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8019ea2:	4606      	mov	r6, r0
 8019ea4:	462b      	mov	r3, r5
 8019ea6:	b99a      	cbnz	r2, 8019ed0 <scalbn+0x38>
 8019ea8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019eac:	4323      	orrs	r3, r4
 8019eae:	d036      	beq.n	8019f1e <scalbn+0x86>
 8019eb0:	4b39      	ldr	r3, [pc, #228]	; (8019f98 <scalbn+0x100>)
 8019eb2:	4629      	mov	r1, r5
 8019eb4:	ee10 0a10 	vmov	r0, s0
 8019eb8:	2200      	movs	r2, #0
 8019eba:	f7e6 fb9d 	bl	80005f8 <__aeabi_dmul>
 8019ebe:	4b37      	ldr	r3, [pc, #220]	; (8019f9c <scalbn+0x104>)
 8019ec0:	429e      	cmp	r6, r3
 8019ec2:	4604      	mov	r4, r0
 8019ec4:	460d      	mov	r5, r1
 8019ec6:	da10      	bge.n	8019eea <scalbn+0x52>
 8019ec8:	a32b      	add	r3, pc, #172	; (adr r3, 8019f78 <scalbn+0xe0>)
 8019eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ece:	e03a      	b.n	8019f46 <scalbn+0xae>
 8019ed0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8019ed4:	428a      	cmp	r2, r1
 8019ed6:	d10c      	bne.n	8019ef2 <scalbn+0x5a>
 8019ed8:	ee10 2a10 	vmov	r2, s0
 8019edc:	4620      	mov	r0, r4
 8019ede:	4629      	mov	r1, r5
 8019ee0:	f7e6 f9d4 	bl	800028c <__adddf3>
 8019ee4:	4604      	mov	r4, r0
 8019ee6:	460d      	mov	r5, r1
 8019ee8:	e019      	b.n	8019f1e <scalbn+0x86>
 8019eea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019eee:	460b      	mov	r3, r1
 8019ef0:	3a36      	subs	r2, #54	; 0x36
 8019ef2:	4432      	add	r2, r6
 8019ef4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019ef8:	428a      	cmp	r2, r1
 8019efa:	dd08      	ble.n	8019f0e <scalbn+0x76>
 8019efc:	2d00      	cmp	r5, #0
 8019efe:	a120      	add	r1, pc, #128	; (adr r1, 8019f80 <scalbn+0xe8>)
 8019f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f04:	da1c      	bge.n	8019f40 <scalbn+0xa8>
 8019f06:	a120      	add	r1, pc, #128	; (adr r1, 8019f88 <scalbn+0xf0>)
 8019f08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f0c:	e018      	b.n	8019f40 <scalbn+0xa8>
 8019f0e:	2a00      	cmp	r2, #0
 8019f10:	dd08      	ble.n	8019f24 <scalbn+0x8c>
 8019f12:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019f16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019f1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019f1e:	ec45 4b10 	vmov	d0, r4, r5
 8019f22:	bd70      	pop	{r4, r5, r6, pc}
 8019f24:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019f28:	da19      	bge.n	8019f5e <scalbn+0xc6>
 8019f2a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019f2e:	429e      	cmp	r6, r3
 8019f30:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8019f34:	dd0a      	ble.n	8019f4c <scalbn+0xb4>
 8019f36:	a112      	add	r1, pc, #72	; (adr r1, 8019f80 <scalbn+0xe8>)
 8019f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d1e2      	bne.n	8019f06 <scalbn+0x6e>
 8019f40:	a30f      	add	r3, pc, #60	; (adr r3, 8019f80 <scalbn+0xe8>)
 8019f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f46:	f7e6 fb57 	bl	80005f8 <__aeabi_dmul>
 8019f4a:	e7cb      	b.n	8019ee4 <scalbn+0x4c>
 8019f4c:	a10a      	add	r1, pc, #40	; (adr r1, 8019f78 <scalbn+0xe0>)
 8019f4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d0b8      	beq.n	8019ec8 <scalbn+0x30>
 8019f56:	a10e      	add	r1, pc, #56	; (adr r1, 8019f90 <scalbn+0xf8>)
 8019f58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f5c:	e7b4      	b.n	8019ec8 <scalbn+0x30>
 8019f5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019f62:	3236      	adds	r2, #54	; 0x36
 8019f64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019f68:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8019f6c:	4620      	mov	r0, r4
 8019f6e:	4b0c      	ldr	r3, [pc, #48]	; (8019fa0 <scalbn+0x108>)
 8019f70:	2200      	movs	r2, #0
 8019f72:	e7e8      	b.n	8019f46 <scalbn+0xae>
 8019f74:	f3af 8000 	nop.w
 8019f78:	c2f8f359 	.word	0xc2f8f359
 8019f7c:	01a56e1f 	.word	0x01a56e1f
 8019f80:	8800759c 	.word	0x8800759c
 8019f84:	7e37e43c 	.word	0x7e37e43c
 8019f88:	8800759c 	.word	0x8800759c
 8019f8c:	fe37e43c 	.word	0xfe37e43c
 8019f90:	c2f8f359 	.word	0xc2f8f359
 8019f94:	81a56e1f 	.word	0x81a56e1f
 8019f98:	43500000 	.word	0x43500000
 8019f9c:	ffff3cb0 	.word	0xffff3cb0
 8019fa0:	3c900000 	.word	0x3c900000

08019fa4 <atanf>:
 8019fa4:	b538      	push	{r3, r4, r5, lr}
 8019fa6:	ee10 5a10 	vmov	r5, s0
 8019faa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8019fae:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8019fb2:	eef0 7a40 	vmov.f32	s15, s0
 8019fb6:	db10      	blt.n	8019fda <atanf+0x36>
 8019fb8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8019fbc:	dd04      	ble.n	8019fc8 <atanf+0x24>
 8019fbe:	ee70 7a00 	vadd.f32	s15, s0, s0
 8019fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8019fc6:	bd38      	pop	{r3, r4, r5, pc}
 8019fc8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801a100 <atanf+0x15c>
 8019fcc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801a104 <atanf+0x160>
 8019fd0:	2d00      	cmp	r5, #0
 8019fd2:	bfd8      	it	le
 8019fd4:	eef0 7a40 	vmovle.f32	s15, s0
 8019fd8:	e7f3      	b.n	8019fc2 <atanf+0x1e>
 8019fda:	4b4b      	ldr	r3, [pc, #300]	; (801a108 <atanf+0x164>)
 8019fdc:	429c      	cmp	r4, r3
 8019fde:	dc10      	bgt.n	801a002 <atanf+0x5e>
 8019fe0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8019fe4:	da0a      	bge.n	8019ffc <atanf+0x58>
 8019fe6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801a10c <atanf+0x168>
 8019fea:	ee30 7a07 	vadd.f32	s14, s0, s14
 8019fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019ff2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8019ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ffa:	dce2      	bgt.n	8019fc2 <atanf+0x1e>
 8019ffc:	f04f 33ff 	mov.w	r3, #4294967295
 801a000:	e013      	b.n	801a02a <atanf+0x86>
 801a002:	f000 f8a3 	bl	801a14c <fabsf>
 801a006:	4b42      	ldr	r3, [pc, #264]	; (801a110 <atanf+0x16c>)
 801a008:	429c      	cmp	r4, r3
 801a00a:	dc4f      	bgt.n	801a0ac <atanf+0x108>
 801a00c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801a010:	429c      	cmp	r4, r3
 801a012:	dc41      	bgt.n	801a098 <atanf+0xf4>
 801a014:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801a018:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801a01c:	eea0 7a27 	vfma.f32	s14, s0, s15
 801a020:	2300      	movs	r3, #0
 801a022:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a026:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a02a:	1c5a      	adds	r2, r3, #1
 801a02c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801a030:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801a114 <atanf+0x170>
 801a034:	eddf 5a38 	vldr	s11, [pc, #224]	; 801a118 <atanf+0x174>
 801a038:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801a11c <atanf+0x178>
 801a03c:	ee66 6a06 	vmul.f32	s13, s12, s12
 801a040:	eee6 5a87 	vfma.f32	s11, s13, s14
 801a044:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801a120 <atanf+0x17c>
 801a048:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801a04c:	eddf 5a35 	vldr	s11, [pc, #212]	; 801a124 <atanf+0x180>
 801a050:	eee7 5a26 	vfma.f32	s11, s14, s13
 801a054:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801a128 <atanf+0x184>
 801a058:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801a05c:	eddf 5a33 	vldr	s11, [pc, #204]	; 801a12c <atanf+0x188>
 801a060:	eee7 5a26 	vfma.f32	s11, s14, s13
 801a064:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801a130 <atanf+0x18c>
 801a068:	eea6 5a87 	vfma.f32	s10, s13, s14
 801a06c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801a134 <atanf+0x190>
 801a070:	eea5 7a26 	vfma.f32	s14, s10, s13
 801a074:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801a138 <atanf+0x194>
 801a078:	eea7 5a26 	vfma.f32	s10, s14, s13
 801a07c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801a13c <atanf+0x198>
 801a080:	eea5 7a26 	vfma.f32	s14, s10, s13
 801a084:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a088:	eea5 7a86 	vfma.f32	s14, s11, s12
 801a08c:	ee27 7a87 	vmul.f32	s14, s15, s14
 801a090:	d121      	bne.n	801a0d6 <atanf+0x132>
 801a092:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a096:	e794      	b.n	8019fc2 <atanf+0x1e>
 801a098:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a09c:	ee30 7a67 	vsub.f32	s14, s0, s15
 801a0a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a0a4:	2301      	movs	r3, #1
 801a0a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a0aa:	e7be      	b.n	801a02a <atanf+0x86>
 801a0ac:	4b24      	ldr	r3, [pc, #144]	; (801a140 <atanf+0x19c>)
 801a0ae:	429c      	cmp	r4, r3
 801a0b0:	dc0b      	bgt.n	801a0ca <atanf+0x126>
 801a0b2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801a0b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a0ba:	eea0 7a27 	vfma.f32	s14, s0, s15
 801a0be:	2302      	movs	r3, #2
 801a0c0:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a0c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a0c8:	e7af      	b.n	801a02a <atanf+0x86>
 801a0ca:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801a0ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a0d2:	2303      	movs	r3, #3
 801a0d4:	e7a9      	b.n	801a02a <atanf+0x86>
 801a0d6:	4a1b      	ldr	r2, [pc, #108]	; (801a144 <atanf+0x1a0>)
 801a0d8:	491b      	ldr	r1, [pc, #108]	; (801a148 <atanf+0x1a4>)
 801a0da:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801a0de:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a0e2:	ed93 0a00 	vldr	s0, [r3]
 801a0e6:	ee37 7a40 	vsub.f32	s14, s14, s0
 801a0ea:	ed92 0a00 	vldr	s0, [r2]
 801a0ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a0f2:	2d00      	cmp	r5, #0
 801a0f4:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a0f8:	bfb8      	it	lt
 801a0fa:	eef1 7a67 	vneglt.f32	s15, s15
 801a0fe:	e760      	b.n	8019fc2 <atanf+0x1e>
 801a100:	3fc90fdb 	.word	0x3fc90fdb
 801a104:	bfc90fdb 	.word	0xbfc90fdb
 801a108:	3edfffff 	.word	0x3edfffff
 801a10c:	7149f2ca 	.word	0x7149f2ca
 801a110:	3f97ffff 	.word	0x3f97ffff
 801a114:	3c8569d7 	.word	0x3c8569d7
 801a118:	3d4bda59 	.word	0x3d4bda59
 801a11c:	bd6ef16b 	.word	0xbd6ef16b
 801a120:	3d886b35 	.word	0x3d886b35
 801a124:	3dba2e6e 	.word	0x3dba2e6e
 801a128:	3e124925 	.word	0x3e124925
 801a12c:	3eaaaaab 	.word	0x3eaaaaab
 801a130:	bd15a221 	.word	0xbd15a221
 801a134:	bd9d8795 	.word	0xbd9d8795
 801a138:	bde38e38 	.word	0xbde38e38
 801a13c:	be4ccccd 	.word	0xbe4ccccd
 801a140:	401bffff 	.word	0x401bffff
 801a144:	08031308 	.word	0x08031308
 801a148:	08031318 	.word	0x08031318

0801a14c <fabsf>:
 801a14c:	ee10 3a10 	vmov	r3, s0
 801a150:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a154:	ee00 3a10 	vmov	s0, r3
 801a158:	4770      	bx	lr

0801a15a <abort>:
 801a15a:	b508      	push	{r3, lr}
 801a15c:	2006      	movs	r0, #6
 801a15e:	f000 f989 	bl	801a474 <raise>
 801a162:	2001      	movs	r0, #1
 801a164:	f7e9 fcd0 	bl	8003b08 <_exit>

0801a168 <atof>:
 801a168:	2100      	movs	r1, #0
 801a16a:	f000 bfd3 	b.w	801b114 <strtod>
	...

0801a170 <__errno>:
 801a170:	4b01      	ldr	r3, [pc, #4]	; (801a178 <__errno+0x8>)
 801a172:	6818      	ldr	r0, [r3, #0]
 801a174:	4770      	bx	lr
 801a176:	bf00      	nop
 801a178:	20000148 	.word	0x20000148

0801a17c <__libc_init_array>:
 801a17c:	b570      	push	{r4, r5, r6, lr}
 801a17e:	4d0d      	ldr	r5, [pc, #52]	; (801a1b4 <__libc_init_array+0x38>)
 801a180:	4c0d      	ldr	r4, [pc, #52]	; (801a1b8 <__libc_init_array+0x3c>)
 801a182:	1b64      	subs	r4, r4, r5
 801a184:	10a4      	asrs	r4, r4, #2
 801a186:	2600      	movs	r6, #0
 801a188:	42a6      	cmp	r6, r4
 801a18a:	d109      	bne.n	801a1a0 <__libc_init_array+0x24>
 801a18c:	4d0b      	ldr	r5, [pc, #44]	; (801a1bc <__libc_init_array+0x40>)
 801a18e:	4c0c      	ldr	r4, [pc, #48]	; (801a1c0 <__libc_init_array+0x44>)
 801a190:	f002 ff04 	bl	801cf9c <_init>
 801a194:	1b64      	subs	r4, r4, r5
 801a196:	10a4      	asrs	r4, r4, #2
 801a198:	2600      	movs	r6, #0
 801a19a:	42a6      	cmp	r6, r4
 801a19c:	d105      	bne.n	801a1aa <__libc_init_array+0x2e>
 801a19e:	bd70      	pop	{r4, r5, r6, pc}
 801a1a0:	f855 3b04 	ldr.w	r3, [r5], #4
 801a1a4:	4798      	blx	r3
 801a1a6:	3601      	adds	r6, #1
 801a1a8:	e7ee      	b.n	801a188 <__libc_init_array+0xc>
 801a1aa:	f855 3b04 	ldr.w	r3, [r5], #4
 801a1ae:	4798      	blx	r3
 801a1b0:	3601      	adds	r6, #1
 801a1b2:	e7f2      	b.n	801a19a <__libc_init_array+0x1e>
 801a1b4:	0803175c 	.word	0x0803175c
 801a1b8:	0803175c 	.word	0x0803175c
 801a1bc:	0803175c 	.word	0x0803175c
 801a1c0:	08031764 	.word	0x08031764

0801a1c4 <malloc>:
 801a1c4:	4b02      	ldr	r3, [pc, #8]	; (801a1d0 <malloc+0xc>)
 801a1c6:	4601      	mov	r1, r0
 801a1c8:	6818      	ldr	r0, [r3, #0]
 801a1ca:	f000 b8a7 	b.w	801a31c <_malloc_r>
 801a1ce:	bf00      	nop
 801a1d0:	20000148 	.word	0x20000148

0801a1d4 <free>:
 801a1d4:	4b02      	ldr	r3, [pc, #8]	; (801a1e0 <free+0xc>)
 801a1d6:	4601      	mov	r1, r0
 801a1d8:	6818      	ldr	r0, [r3, #0]
 801a1da:	f000 b833 	b.w	801a244 <_free_r>
 801a1de:	bf00      	nop
 801a1e0:	20000148 	.word	0x20000148

0801a1e4 <memcpy>:
 801a1e4:	440a      	add	r2, r1
 801a1e6:	4291      	cmp	r1, r2
 801a1e8:	f100 33ff 	add.w	r3, r0, #4294967295
 801a1ec:	d100      	bne.n	801a1f0 <memcpy+0xc>
 801a1ee:	4770      	bx	lr
 801a1f0:	b510      	push	{r4, lr}
 801a1f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a1f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a1fa:	4291      	cmp	r1, r2
 801a1fc:	d1f9      	bne.n	801a1f2 <memcpy+0xe>
 801a1fe:	bd10      	pop	{r4, pc}

0801a200 <memmove>:
 801a200:	4288      	cmp	r0, r1
 801a202:	b510      	push	{r4, lr}
 801a204:	eb01 0402 	add.w	r4, r1, r2
 801a208:	d902      	bls.n	801a210 <memmove+0x10>
 801a20a:	4284      	cmp	r4, r0
 801a20c:	4623      	mov	r3, r4
 801a20e:	d807      	bhi.n	801a220 <memmove+0x20>
 801a210:	1e43      	subs	r3, r0, #1
 801a212:	42a1      	cmp	r1, r4
 801a214:	d008      	beq.n	801a228 <memmove+0x28>
 801a216:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a21a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a21e:	e7f8      	b.n	801a212 <memmove+0x12>
 801a220:	4402      	add	r2, r0
 801a222:	4601      	mov	r1, r0
 801a224:	428a      	cmp	r2, r1
 801a226:	d100      	bne.n	801a22a <memmove+0x2a>
 801a228:	bd10      	pop	{r4, pc}
 801a22a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a22e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a232:	e7f7      	b.n	801a224 <memmove+0x24>

0801a234 <memset>:
 801a234:	4402      	add	r2, r0
 801a236:	4603      	mov	r3, r0
 801a238:	4293      	cmp	r3, r2
 801a23a:	d100      	bne.n	801a23e <memset+0xa>
 801a23c:	4770      	bx	lr
 801a23e:	f803 1b01 	strb.w	r1, [r3], #1
 801a242:	e7f9      	b.n	801a238 <memset+0x4>

0801a244 <_free_r>:
 801a244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a246:	2900      	cmp	r1, #0
 801a248:	d044      	beq.n	801a2d4 <_free_r+0x90>
 801a24a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a24e:	9001      	str	r0, [sp, #4]
 801a250:	2b00      	cmp	r3, #0
 801a252:	f1a1 0404 	sub.w	r4, r1, #4
 801a256:	bfb8      	it	lt
 801a258:	18e4      	addlt	r4, r4, r3
 801a25a:	f001 fae9 	bl	801b830 <__malloc_lock>
 801a25e:	4a1e      	ldr	r2, [pc, #120]	; (801a2d8 <_free_r+0x94>)
 801a260:	9801      	ldr	r0, [sp, #4]
 801a262:	6813      	ldr	r3, [r2, #0]
 801a264:	b933      	cbnz	r3, 801a274 <_free_r+0x30>
 801a266:	6063      	str	r3, [r4, #4]
 801a268:	6014      	str	r4, [r2, #0]
 801a26a:	b003      	add	sp, #12
 801a26c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a270:	f001 bae4 	b.w	801b83c <__malloc_unlock>
 801a274:	42a3      	cmp	r3, r4
 801a276:	d908      	bls.n	801a28a <_free_r+0x46>
 801a278:	6825      	ldr	r5, [r4, #0]
 801a27a:	1961      	adds	r1, r4, r5
 801a27c:	428b      	cmp	r3, r1
 801a27e:	bf01      	itttt	eq
 801a280:	6819      	ldreq	r1, [r3, #0]
 801a282:	685b      	ldreq	r3, [r3, #4]
 801a284:	1949      	addeq	r1, r1, r5
 801a286:	6021      	streq	r1, [r4, #0]
 801a288:	e7ed      	b.n	801a266 <_free_r+0x22>
 801a28a:	461a      	mov	r2, r3
 801a28c:	685b      	ldr	r3, [r3, #4]
 801a28e:	b10b      	cbz	r3, 801a294 <_free_r+0x50>
 801a290:	42a3      	cmp	r3, r4
 801a292:	d9fa      	bls.n	801a28a <_free_r+0x46>
 801a294:	6811      	ldr	r1, [r2, #0]
 801a296:	1855      	adds	r5, r2, r1
 801a298:	42a5      	cmp	r5, r4
 801a29a:	d10b      	bne.n	801a2b4 <_free_r+0x70>
 801a29c:	6824      	ldr	r4, [r4, #0]
 801a29e:	4421      	add	r1, r4
 801a2a0:	1854      	adds	r4, r2, r1
 801a2a2:	42a3      	cmp	r3, r4
 801a2a4:	6011      	str	r1, [r2, #0]
 801a2a6:	d1e0      	bne.n	801a26a <_free_r+0x26>
 801a2a8:	681c      	ldr	r4, [r3, #0]
 801a2aa:	685b      	ldr	r3, [r3, #4]
 801a2ac:	6053      	str	r3, [r2, #4]
 801a2ae:	4421      	add	r1, r4
 801a2b0:	6011      	str	r1, [r2, #0]
 801a2b2:	e7da      	b.n	801a26a <_free_r+0x26>
 801a2b4:	d902      	bls.n	801a2bc <_free_r+0x78>
 801a2b6:	230c      	movs	r3, #12
 801a2b8:	6003      	str	r3, [r0, #0]
 801a2ba:	e7d6      	b.n	801a26a <_free_r+0x26>
 801a2bc:	6825      	ldr	r5, [r4, #0]
 801a2be:	1961      	adds	r1, r4, r5
 801a2c0:	428b      	cmp	r3, r1
 801a2c2:	bf04      	itt	eq
 801a2c4:	6819      	ldreq	r1, [r3, #0]
 801a2c6:	685b      	ldreq	r3, [r3, #4]
 801a2c8:	6063      	str	r3, [r4, #4]
 801a2ca:	bf04      	itt	eq
 801a2cc:	1949      	addeq	r1, r1, r5
 801a2ce:	6021      	streq	r1, [r4, #0]
 801a2d0:	6054      	str	r4, [r2, #4]
 801a2d2:	e7ca      	b.n	801a26a <_free_r+0x26>
 801a2d4:	b003      	add	sp, #12
 801a2d6:	bd30      	pop	{r4, r5, pc}
 801a2d8:	2000e1d8 	.word	0x2000e1d8

0801a2dc <sbrk_aligned>:
 801a2dc:	b570      	push	{r4, r5, r6, lr}
 801a2de:	4e0e      	ldr	r6, [pc, #56]	; (801a318 <sbrk_aligned+0x3c>)
 801a2e0:	460c      	mov	r4, r1
 801a2e2:	6831      	ldr	r1, [r6, #0]
 801a2e4:	4605      	mov	r5, r0
 801a2e6:	b911      	cbnz	r1, 801a2ee <sbrk_aligned+0x12>
 801a2e8:	f000 f88c 	bl	801a404 <_sbrk_r>
 801a2ec:	6030      	str	r0, [r6, #0]
 801a2ee:	4621      	mov	r1, r4
 801a2f0:	4628      	mov	r0, r5
 801a2f2:	f000 f887 	bl	801a404 <_sbrk_r>
 801a2f6:	1c43      	adds	r3, r0, #1
 801a2f8:	d00a      	beq.n	801a310 <sbrk_aligned+0x34>
 801a2fa:	1cc4      	adds	r4, r0, #3
 801a2fc:	f024 0403 	bic.w	r4, r4, #3
 801a300:	42a0      	cmp	r0, r4
 801a302:	d007      	beq.n	801a314 <sbrk_aligned+0x38>
 801a304:	1a21      	subs	r1, r4, r0
 801a306:	4628      	mov	r0, r5
 801a308:	f000 f87c 	bl	801a404 <_sbrk_r>
 801a30c:	3001      	adds	r0, #1
 801a30e:	d101      	bne.n	801a314 <sbrk_aligned+0x38>
 801a310:	f04f 34ff 	mov.w	r4, #4294967295
 801a314:	4620      	mov	r0, r4
 801a316:	bd70      	pop	{r4, r5, r6, pc}
 801a318:	2000e1dc 	.word	0x2000e1dc

0801a31c <_malloc_r>:
 801a31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a320:	1ccd      	adds	r5, r1, #3
 801a322:	f025 0503 	bic.w	r5, r5, #3
 801a326:	3508      	adds	r5, #8
 801a328:	2d0c      	cmp	r5, #12
 801a32a:	bf38      	it	cc
 801a32c:	250c      	movcc	r5, #12
 801a32e:	2d00      	cmp	r5, #0
 801a330:	4607      	mov	r7, r0
 801a332:	db01      	blt.n	801a338 <_malloc_r+0x1c>
 801a334:	42a9      	cmp	r1, r5
 801a336:	d905      	bls.n	801a344 <_malloc_r+0x28>
 801a338:	230c      	movs	r3, #12
 801a33a:	603b      	str	r3, [r7, #0]
 801a33c:	2600      	movs	r6, #0
 801a33e:	4630      	mov	r0, r6
 801a340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a344:	4e2e      	ldr	r6, [pc, #184]	; (801a400 <_malloc_r+0xe4>)
 801a346:	f001 fa73 	bl	801b830 <__malloc_lock>
 801a34a:	6833      	ldr	r3, [r6, #0]
 801a34c:	461c      	mov	r4, r3
 801a34e:	bb34      	cbnz	r4, 801a39e <_malloc_r+0x82>
 801a350:	4629      	mov	r1, r5
 801a352:	4638      	mov	r0, r7
 801a354:	f7ff ffc2 	bl	801a2dc <sbrk_aligned>
 801a358:	1c43      	adds	r3, r0, #1
 801a35a:	4604      	mov	r4, r0
 801a35c:	d14d      	bne.n	801a3fa <_malloc_r+0xde>
 801a35e:	6834      	ldr	r4, [r6, #0]
 801a360:	4626      	mov	r6, r4
 801a362:	2e00      	cmp	r6, #0
 801a364:	d140      	bne.n	801a3e8 <_malloc_r+0xcc>
 801a366:	6823      	ldr	r3, [r4, #0]
 801a368:	4631      	mov	r1, r6
 801a36a:	4638      	mov	r0, r7
 801a36c:	eb04 0803 	add.w	r8, r4, r3
 801a370:	f000 f848 	bl	801a404 <_sbrk_r>
 801a374:	4580      	cmp	r8, r0
 801a376:	d13a      	bne.n	801a3ee <_malloc_r+0xd2>
 801a378:	6821      	ldr	r1, [r4, #0]
 801a37a:	3503      	adds	r5, #3
 801a37c:	1a6d      	subs	r5, r5, r1
 801a37e:	f025 0503 	bic.w	r5, r5, #3
 801a382:	3508      	adds	r5, #8
 801a384:	2d0c      	cmp	r5, #12
 801a386:	bf38      	it	cc
 801a388:	250c      	movcc	r5, #12
 801a38a:	4629      	mov	r1, r5
 801a38c:	4638      	mov	r0, r7
 801a38e:	f7ff ffa5 	bl	801a2dc <sbrk_aligned>
 801a392:	3001      	adds	r0, #1
 801a394:	d02b      	beq.n	801a3ee <_malloc_r+0xd2>
 801a396:	6823      	ldr	r3, [r4, #0]
 801a398:	442b      	add	r3, r5
 801a39a:	6023      	str	r3, [r4, #0]
 801a39c:	e00e      	b.n	801a3bc <_malloc_r+0xa0>
 801a39e:	6822      	ldr	r2, [r4, #0]
 801a3a0:	1b52      	subs	r2, r2, r5
 801a3a2:	d41e      	bmi.n	801a3e2 <_malloc_r+0xc6>
 801a3a4:	2a0b      	cmp	r2, #11
 801a3a6:	d916      	bls.n	801a3d6 <_malloc_r+0xba>
 801a3a8:	1961      	adds	r1, r4, r5
 801a3aa:	42a3      	cmp	r3, r4
 801a3ac:	6025      	str	r5, [r4, #0]
 801a3ae:	bf18      	it	ne
 801a3b0:	6059      	strne	r1, [r3, #4]
 801a3b2:	6863      	ldr	r3, [r4, #4]
 801a3b4:	bf08      	it	eq
 801a3b6:	6031      	streq	r1, [r6, #0]
 801a3b8:	5162      	str	r2, [r4, r5]
 801a3ba:	604b      	str	r3, [r1, #4]
 801a3bc:	4638      	mov	r0, r7
 801a3be:	f104 060b 	add.w	r6, r4, #11
 801a3c2:	f001 fa3b 	bl	801b83c <__malloc_unlock>
 801a3c6:	f026 0607 	bic.w	r6, r6, #7
 801a3ca:	1d23      	adds	r3, r4, #4
 801a3cc:	1af2      	subs	r2, r6, r3
 801a3ce:	d0b6      	beq.n	801a33e <_malloc_r+0x22>
 801a3d0:	1b9b      	subs	r3, r3, r6
 801a3d2:	50a3      	str	r3, [r4, r2]
 801a3d4:	e7b3      	b.n	801a33e <_malloc_r+0x22>
 801a3d6:	6862      	ldr	r2, [r4, #4]
 801a3d8:	42a3      	cmp	r3, r4
 801a3da:	bf0c      	ite	eq
 801a3dc:	6032      	streq	r2, [r6, #0]
 801a3de:	605a      	strne	r2, [r3, #4]
 801a3e0:	e7ec      	b.n	801a3bc <_malloc_r+0xa0>
 801a3e2:	4623      	mov	r3, r4
 801a3e4:	6864      	ldr	r4, [r4, #4]
 801a3e6:	e7b2      	b.n	801a34e <_malloc_r+0x32>
 801a3e8:	4634      	mov	r4, r6
 801a3ea:	6876      	ldr	r6, [r6, #4]
 801a3ec:	e7b9      	b.n	801a362 <_malloc_r+0x46>
 801a3ee:	230c      	movs	r3, #12
 801a3f0:	603b      	str	r3, [r7, #0]
 801a3f2:	4638      	mov	r0, r7
 801a3f4:	f001 fa22 	bl	801b83c <__malloc_unlock>
 801a3f8:	e7a1      	b.n	801a33e <_malloc_r+0x22>
 801a3fa:	6025      	str	r5, [r4, #0]
 801a3fc:	e7de      	b.n	801a3bc <_malloc_r+0xa0>
 801a3fe:	bf00      	nop
 801a400:	2000e1d8 	.word	0x2000e1d8

0801a404 <_sbrk_r>:
 801a404:	b538      	push	{r3, r4, r5, lr}
 801a406:	4d06      	ldr	r5, [pc, #24]	; (801a420 <_sbrk_r+0x1c>)
 801a408:	2300      	movs	r3, #0
 801a40a:	4604      	mov	r4, r0
 801a40c:	4608      	mov	r0, r1
 801a40e:	602b      	str	r3, [r5, #0]
 801a410:	f7e9 fbf2 	bl	8003bf8 <_sbrk>
 801a414:	1c43      	adds	r3, r0, #1
 801a416:	d102      	bne.n	801a41e <_sbrk_r+0x1a>
 801a418:	682b      	ldr	r3, [r5, #0]
 801a41a:	b103      	cbz	r3, 801a41e <_sbrk_r+0x1a>
 801a41c:	6023      	str	r3, [r4, #0]
 801a41e:	bd38      	pop	{r3, r4, r5, pc}
 801a420:	2000e1e0 	.word	0x2000e1e0

0801a424 <_raise_r>:
 801a424:	291f      	cmp	r1, #31
 801a426:	b538      	push	{r3, r4, r5, lr}
 801a428:	4604      	mov	r4, r0
 801a42a:	460d      	mov	r5, r1
 801a42c:	d904      	bls.n	801a438 <_raise_r+0x14>
 801a42e:	2316      	movs	r3, #22
 801a430:	6003      	str	r3, [r0, #0]
 801a432:	f04f 30ff 	mov.w	r0, #4294967295
 801a436:	bd38      	pop	{r3, r4, r5, pc}
 801a438:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a43a:	b112      	cbz	r2, 801a442 <_raise_r+0x1e>
 801a43c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a440:	b94b      	cbnz	r3, 801a456 <_raise_r+0x32>
 801a442:	4620      	mov	r0, r4
 801a444:	f000 f830 	bl	801a4a8 <_getpid_r>
 801a448:	462a      	mov	r2, r5
 801a44a:	4601      	mov	r1, r0
 801a44c:	4620      	mov	r0, r4
 801a44e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a452:	f000 b817 	b.w	801a484 <_kill_r>
 801a456:	2b01      	cmp	r3, #1
 801a458:	d00a      	beq.n	801a470 <_raise_r+0x4c>
 801a45a:	1c59      	adds	r1, r3, #1
 801a45c:	d103      	bne.n	801a466 <_raise_r+0x42>
 801a45e:	2316      	movs	r3, #22
 801a460:	6003      	str	r3, [r0, #0]
 801a462:	2001      	movs	r0, #1
 801a464:	e7e7      	b.n	801a436 <_raise_r+0x12>
 801a466:	2400      	movs	r4, #0
 801a468:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a46c:	4628      	mov	r0, r5
 801a46e:	4798      	blx	r3
 801a470:	2000      	movs	r0, #0
 801a472:	e7e0      	b.n	801a436 <_raise_r+0x12>

0801a474 <raise>:
 801a474:	4b02      	ldr	r3, [pc, #8]	; (801a480 <raise+0xc>)
 801a476:	4601      	mov	r1, r0
 801a478:	6818      	ldr	r0, [r3, #0]
 801a47a:	f7ff bfd3 	b.w	801a424 <_raise_r>
 801a47e:	bf00      	nop
 801a480:	20000148 	.word	0x20000148

0801a484 <_kill_r>:
 801a484:	b538      	push	{r3, r4, r5, lr}
 801a486:	4d07      	ldr	r5, [pc, #28]	; (801a4a4 <_kill_r+0x20>)
 801a488:	2300      	movs	r3, #0
 801a48a:	4604      	mov	r4, r0
 801a48c:	4608      	mov	r0, r1
 801a48e:	4611      	mov	r1, r2
 801a490:	602b      	str	r3, [r5, #0]
 801a492:	f7e9 fb29 	bl	8003ae8 <_kill>
 801a496:	1c43      	adds	r3, r0, #1
 801a498:	d102      	bne.n	801a4a0 <_kill_r+0x1c>
 801a49a:	682b      	ldr	r3, [r5, #0]
 801a49c:	b103      	cbz	r3, 801a4a0 <_kill_r+0x1c>
 801a49e:	6023      	str	r3, [r4, #0]
 801a4a0:	bd38      	pop	{r3, r4, r5, pc}
 801a4a2:	bf00      	nop
 801a4a4:	2000e1e0 	.word	0x2000e1e0

0801a4a8 <_getpid_r>:
 801a4a8:	f7e9 bb16 	b.w	8003ad8 <_getpid>

0801a4ac <strcat>:
 801a4ac:	b510      	push	{r4, lr}
 801a4ae:	4602      	mov	r2, r0
 801a4b0:	7814      	ldrb	r4, [r2, #0]
 801a4b2:	4613      	mov	r3, r2
 801a4b4:	3201      	adds	r2, #1
 801a4b6:	2c00      	cmp	r4, #0
 801a4b8:	d1fa      	bne.n	801a4b0 <strcat+0x4>
 801a4ba:	3b01      	subs	r3, #1
 801a4bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a4c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a4c4:	2a00      	cmp	r2, #0
 801a4c6:	d1f9      	bne.n	801a4bc <strcat+0x10>
 801a4c8:	bd10      	pop	{r4, pc}

0801a4ca <sulp>:
 801a4ca:	b570      	push	{r4, r5, r6, lr}
 801a4cc:	4604      	mov	r4, r0
 801a4ce:	460d      	mov	r5, r1
 801a4d0:	ec45 4b10 	vmov	d0, r4, r5
 801a4d4:	4616      	mov	r6, r2
 801a4d6:	f001 fd29 	bl	801bf2c <__ulp>
 801a4da:	ec51 0b10 	vmov	r0, r1, d0
 801a4de:	b17e      	cbz	r6, 801a500 <sulp+0x36>
 801a4e0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a4e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	dd09      	ble.n	801a500 <sulp+0x36>
 801a4ec:	051b      	lsls	r3, r3, #20
 801a4ee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a4f2:	2400      	movs	r4, #0
 801a4f4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a4f8:	4622      	mov	r2, r4
 801a4fa:	462b      	mov	r3, r5
 801a4fc:	f7e6 f87c 	bl	80005f8 <__aeabi_dmul>
 801a500:	bd70      	pop	{r4, r5, r6, pc}
 801a502:	0000      	movs	r0, r0
 801a504:	0000      	movs	r0, r0
	...

0801a508 <_strtod_l>:
 801a508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a50c:	ed2d 8b02 	vpush	{d8}
 801a510:	b09d      	sub	sp, #116	; 0x74
 801a512:	461f      	mov	r7, r3
 801a514:	2300      	movs	r3, #0
 801a516:	9318      	str	r3, [sp, #96]	; 0x60
 801a518:	4ba2      	ldr	r3, [pc, #648]	; (801a7a4 <_strtod_l+0x29c>)
 801a51a:	9213      	str	r2, [sp, #76]	; 0x4c
 801a51c:	681b      	ldr	r3, [r3, #0]
 801a51e:	9305      	str	r3, [sp, #20]
 801a520:	4604      	mov	r4, r0
 801a522:	4618      	mov	r0, r3
 801a524:	4688      	mov	r8, r1
 801a526:	f7e5 fea3 	bl	8000270 <strlen>
 801a52a:	f04f 0a00 	mov.w	sl, #0
 801a52e:	4605      	mov	r5, r0
 801a530:	f04f 0b00 	mov.w	fp, #0
 801a534:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a538:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a53a:	781a      	ldrb	r2, [r3, #0]
 801a53c:	2a2b      	cmp	r2, #43	; 0x2b
 801a53e:	d04e      	beq.n	801a5de <_strtod_l+0xd6>
 801a540:	d83b      	bhi.n	801a5ba <_strtod_l+0xb2>
 801a542:	2a0d      	cmp	r2, #13
 801a544:	d834      	bhi.n	801a5b0 <_strtod_l+0xa8>
 801a546:	2a08      	cmp	r2, #8
 801a548:	d834      	bhi.n	801a5b4 <_strtod_l+0xac>
 801a54a:	2a00      	cmp	r2, #0
 801a54c:	d03e      	beq.n	801a5cc <_strtod_l+0xc4>
 801a54e:	2300      	movs	r3, #0
 801a550:	930a      	str	r3, [sp, #40]	; 0x28
 801a552:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801a554:	7833      	ldrb	r3, [r6, #0]
 801a556:	2b30      	cmp	r3, #48	; 0x30
 801a558:	f040 80b0 	bne.w	801a6bc <_strtod_l+0x1b4>
 801a55c:	7873      	ldrb	r3, [r6, #1]
 801a55e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a562:	2b58      	cmp	r3, #88	; 0x58
 801a564:	d168      	bne.n	801a638 <_strtod_l+0x130>
 801a566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a568:	9301      	str	r3, [sp, #4]
 801a56a:	ab18      	add	r3, sp, #96	; 0x60
 801a56c:	9702      	str	r7, [sp, #8]
 801a56e:	9300      	str	r3, [sp, #0]
 801a570:	4a8d      	ldr	r2, [pc, #564]	; (801a7a8 <_strtod_l+0x2a0>)
 801a572:	ab19      	add	r3, sp, #100	; 0x64
 801a574:	a917      	add	r1, sp, #92	; 0x5c
 801a576:	4620      	mov	r0, r4
 801a578:	f000 fe40 	bl	801b1fc <__gethex>
 801a57c:	f010 0707 	ands.w	r7, r0, #7
 801a580:	4605      	mov	r5, r0
 801a582:	d005      	beq.n	801a590 <_strtod_l+0x88>
 801a584:	2f06      	cmp	r7, #6
 801a586:	d12c      	bne.n	801a5e2 <_strtod_l+0xda>
 801a588:	3601      	adds	r6, #1
 801a58a:	2300      	movs	r3, #0
 801a58c:	9617      	str	r6, [sp, #92]	; 0x5c
 801a58e:	930a      	str	r3, [sp, #40]	; 0x28
 801a590:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a592:	2b00      	cmp	r3, #0
 801a594:	f040 8590 	bne.w	801b0b8 <_strtod_l+0xbb0>
 801a598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a59a:	b1eb      	cbz	r3, 801a5d8 <_strtod_l+0xd0>
 801a59c:	4652      	mov	r2, sl
 801a59e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a5a2:	ec43 2b10 	vmov	d0, r2, r3
 801a5a6:	b01d      	add	sp, #116	; 0x74
 801a5a8:	ecbd 8b02 	vpop	{d8}
 801a5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5b0:	2a20      	cmp	r2, #32
 801a5b2:	d1cc      	bne.n	801a54e <_strtod_l+0x46>
 801a5b4:	3301      	adds	r3, #1
 801a5b6:	9317      	str	r3, [sp, #92]	; 0x5c
 801a5b8:	e7be      	b.n	801a538 <_strtod_l+0x30>
 801a5ba:	2a2d      	cmp	r2, #45	; 0x2d
 801a5bc:	d1c7      	bne.n	801a54e <_strtod_l+0x46>
 801a5be:	2201      	movs	r2, #1
 801a5c0:	920a      	str	r2, [sp, #40]	; 0x28
 801a5c2:	1c5a      	adds	r2, r3, #1
 801a5c4:	9217      	str	r2, [sp, #92]	; 0x5c
 801a5c6:	785b      	ldrb	r3, [r3, #1]
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	d1c2      	bne.n	801a552 <_strtod_l+0x4a>
 801a5cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a5ce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	f040 856e 	bne.w	801b0b4 <_strtod_l+0xbac>
 801a5d8:	4652      	mov	r2, sl
 801a5da:	465b      	mov	r3, fp
 801a5dc:	e7e1      	b.n	801a5a2 <_strtod_l+0x9a>
 801a5de:	2200      	movs	r2, #0
 801a5e0:	e7ee      	b.n	801a5c0 <_strtod_l+0xb8>
 801a5e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a5e4:	b13a      	cbz	r2, 801a5f6 <_strtod_l+0xee>
 801a5e6:	2135      	movs	r1, #53	; 0x35
 801a5e8:	a81a      	add	r0, sp, #104	; 0x68
 801a5ea:	f001 fdaa 	bl	801c142 <__copybits>
 801a5ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a5f0:	4620      	mov	r0, r4
 801a5f2:	f001 f969 	bl	801b8c8 <_Bfree>
 801a5f6:	3f01      	subs	r7, #1
 801a5f8:	2f04      	cmp	r7, #4
 801a5fa:	d806      	bhi.n	801a60a <_strtod_l+0x102>
 801a5fc:	e8df f007 	tbb	[pc, r7]
 801a600:	1714030a 	.word	0x1714030a
 801a604:	0a          	.byte	0x0a
 801a605:	00          	.byte	0x00
 801a606:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801a60a:	0728      	lsls	r0, r5, #28
 801a60c:	d5c0      	bpl.n	801a590 <_strtod_l+0x88>
 801a60e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a612:	e7bd      	b.n	801a590 <_strtod_l+0x88>
 801a614:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801a618:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a61a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a61e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a622:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a626:	e7f0      	b.n	801a60a <_strtod_l+0x102>
 801a628:	f8df b180 	ldr.w	fp, [pc, #384]	; 801a7ac <_strtod_l+0x2a4>
 801a62c:	e7ed      	b.n	801a60a <_strtod_l+0x102>
 801a62e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a632:	f04f 3aff 	mov.w	sl, #4294967295
 801a636:	e7e8      	b.n	801a60a <_strtod_l+0x102>
 801a638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a63a:	1c5a      	adds	r2, r3, #1
 801a63c:	9217      	str	r2, [sp, #92]	; 0x5c
 801a63e:	785b      	ldrb	r3, [r3, #1]
 801a640:	2b30      	cmp	r3, #48	; 0x30
 801a642:	d0f9      	beq.n	801a638 <_strtod_l+0x130>
 801a644:	2b00      	cmp	r3, #0
 801a646:	d0a3      	beq.n	801a590 <_strtod_l+0x88>
 801a648:	2301      	movs	r3, #1
 801a64a:	f04f 0900 	mov.w	r9, #0
 801a64e:	9304      	str	r3, [sp, #16]
 801a650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a652:	9308      	str	r3, [sp, #32]
 801a654:	f8cd 901c 	str.w	r9, [sp, #28]
 801a658:	464f      	mov	r7, r9
 801a65a:	220a      	movs	r2, #10
 801a65c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a65e:	7806      	ldrb	r6, [r0, #0]
 801a660:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a664:	b2d9      	uxtb	r1, r3
 801a666:	2909      	cmp	r1, #9
 801a668:	d92a      	bls.n	801a6c0 <_strtod_l+0x1b8>
 801a66a:	9905      	ldr	r1, [sp, #20]
 801a66c:	462a      	mov	r2, r5
 801a66e:	f001 fdcb 	bl	801c208 <strncmp>
 801a672:	b398      	cbz	r0, 801a6dc <_strtod_l+0x1d4>
 801a674:	2000      	movs	r0, #0
 801a676:	4632      	mov	r2, r6
 801a678:	463d      	mov	r5, r7
 801a67a:	9005      	str	r0, [sp, #20]
 801a67c:	4603      	mov	r3, r0
 801a67e:	2a65      	cmp	r2, #101	; 0x65
 801a680:	d001      	beq.n	801a686 <_strtod_l+0x17e>
 801a682:	2a45      	cmp	r2, #69	; 0x45
 801a684:	d118      	bne.n	801a6b8 <_strtod_l+0x1b0>
 801a686:	b91d      	cbnz	r5, 801a690 <_strtod_l+0x188>
 801a688:	9a04      	ldr	r2, [sp, #16]
 801a68a:	4302      	orrs	r2, r0
 801a68c:	d09e      	beq.n	801a5cc <_strtod_l+0xc4>
 801a68e:	2500      	movs	r5, #0
 801a690:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801a694:	f108 0201 	add.w	r2, r8, #1
 801a698:	9217      	str	r2, [sp, #92]	; 0x5c
 801a69a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a69e:	2a2b      	cmp	r2, #43	; 0x2b
 801a6a0:	d075      	beq.n	801a78e <_strtod_l+0x286>
 801a6a2:	2a2d      	cmp	r2, #45	; 0x2d
 801a6a4:	d07b      	beq.n	801a79e <_strtod_l+0x296>
 801a6a6:	f04f 0c00 	mov.w	ip, #0
 801a6aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801a6ae:	2909      	cmp	r1, #9
 801a6b0:	f240 8082 	bls.w	801a7b8 <_strtod_l+0x2b0>
 801a6b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a6b8:	2600      	movs	r6, #0
 801a6ba:	e09d      	b.n	801a7f8 <_strtod_l+0x2f0>
 801a6bc:	2300      	movs	r3, #0
 801a6be:	e7c4      	b.n	801a64a <_strtod_l+0x142>
 801a6c0:	2f08      	cmp	r7, #8
 801a6c2:	bfd8      	it	le
 801a6c4:	9907      	ldrle	r1, [sp, #28]
 801a6c6:	f100 0001 	add.w	r0, r0, #1
 801a6ca:	bfda      	itte	le
 801a6cc:	fb02 3301 	mlale	r3, r2, r1, r3
 801a6d0:	9307      	strle	r3, [sp, #28]
 801a6d2:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a6d6:	3701      	adds	r7, #1
 801a6d8:	9017      	str	r0, [sp, #92]	; 0x5c
 801a6da:	e7bf      	b.n	801a65c <_strtod_l+0x154>
 801a6dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a6de:	195a      	adds	r2, r3, r5
 801a6e0:	9217      	str	r2, [sp, #92]	; 0x5c
 801a6e2:	5d5a      	ldrb	r2, [r3, r5]
 801a6e4:	2f00      	cmp	r7, #0
 801a6e6:	d037      	beq.n	801a758 <_strtod_l+0x250>
 801a6e8:	9005      	str	r0, [sp, #20]
 801a6ea:	463d      	mov	r5, r7
 801a6ec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801a6f0:	2b09      	cmp	r3, #9
 801a6f2:	d912      	bls.n	801a71a <_strtod_l+0x212>
 801a6f4:	2301      	movs	r3, #1
 801a6f6:	e7c2      	b.n	801a67e <_strtod_l+0x176>
 801a6f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a6fa:	1c5a      	adds	r2, r3, #1
 801a6fc:	9217      	str	r2, [sp, #92]	; 0x5c
 801a6fe:	785a      	ldrb	r2, [r3, #1]
 801a700:	3001      	adds	r0, #1
 801a702:	2a30      	cmp	r2, #48	; 0x30
 801a704:	d0f8      	beq.n	801a6f8 <_strtod_l+0x1f0>
 801a706:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801a70a:	2b08      	cmp	r3, #8
 801a70c:	f200 84d9 	bhi.w	801b0c2 <_strtod_l+0xbba>
 801a710:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a712:	9005      	str	r0, [sp, #20]
 801a714:	2000      	movs	r0, #0
 801a716:	9308      	str	r3, [sp, #32]
 801a718:	4605      	mov	r5, r0
 801a71a:	3a30      	subs	r2, #48	; 0x30
 801a71c:	f100 0301 	add.w	r3, r0, #1
 801a720:	d014      	beq.n	801a74c <_strtod_l+0x244>
 801a722:	9905      	ldr	r1, [sp, #20]
 801a724:	4419      	add	r1, r3
 801a726:	9105      	str	r1, [sp, #20]
 801a728:	462b      	mov	r3, r5
 801a72a:	eb00 0e05 	add.w	lr, r0, r5
 801a72e:	210a      	movs	r1, #10
 801a730:	4573      	cmp	r3, lr
 801a732:	d113      	bne.n	801a75c <_strtod_l+0x254>
 801a734:	182b      	adds	r3, r5, r0
 801a736:	2b08      	cmp	r3, #8
 801a738:	f105 0501 	add.w	r5, r5, #1
 801a73c:	4405      	add	r5, r0
 801a73e:	dc1c      	bgt.n	801a77a <_strtod_l+0x272>
 801a740:	9907      	ldr	r1, [sp, #28]
 801a742:	230a      	movs	r3, #10
 801a744:	fb03 2301 	mla	r3, r3, r1, r2
 801a748:	9307      	str	r3, [sp, #28]
 801a74a:	2300      	movs	r3, #0
 801a74c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a74e:	1c51      	adds	r1, r2, #1
 801a750:	9117      	str	r1, [sp, #92]	; 0x5c
 801a752:	7852      	ldrb	r2, [r2, #1]
 801a754:	4618      	mov	r0, r3
 801a756:	e7c9      	b.n	801a6ec <_strtod_l+0x1e4>
 801a758:	4638      	mov	r0, r7
 801a75a:	e7d2      	b.n	801a702 <_strtod_l+0x1fa>
 801a75c:	2b08      	cmp	r3, #8
 801a75e:	dc04      	bgt.n	801a76a <_strtod_l+0x262>
 801a760:	9e07      	ldr	r6, [sp, #28]
 801a762:	434e      	muls	r6, r1
 801a764:	9607      	str	r6, [sp, #28]
 801a766:	3301      	adds	r3, #1
 801a768:	e7e2      	b.n	801a730 <_strtod_l+0x228>
 801a76a:	f103 0c01 	add.w	ip, r3, #1
 801a76e:	f1bc 0f10 	cmp.w	ip, #16
 801a772:	bfd8      	it	le
 801a774:	fb01 f909 	mulle.w	r9, r1, r9
 801a778:	e7f5      	b.n	801a766 <_strtod_l+0x25e>
 801a77a:	2d10      	cmp	r5, #16
 801a77c:	bfdc      	itt	le
 801a77e:	230a      	movle	r3, #10
 801a780:	fb03 2909 	mlale	r9, r3, r9, r2
 801a784:	e7e1      	b.n	801a74a <_strtod_l+0x242>
 801a786:	2300      	movs	r3, #0
 801a788:	9305      	str	r3, [sp, #20]
 801a78a:	2301      	movs	r3, #1
 801a78c:	e77c      	b.n	801a688 <_strtod_l+0x180>
 801a78e:	f04f 0c00 	mov.w	ip, #0
 801a792:	f108 0202 	add.w	r2, r8, #2
 801a796:	9217      	str	r2, [sp, #92]	; 0x5c
 801a798:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a79c:	e785      	b.n	801a6aa <_strtod_l+0x1a2>
 801a79e:	f04f 0c01 	mov.w	ip, #1
 801a7a2:	e7f6      	b.n	801a792 <_strtod_l+0x28a>
 801a7a4:	08031400 	.word	0x08031400
 801a7a8:	08031338 	.word	0x08031338
 801a7ac:	7ff00000 	.word	0x7ff00000
 801a7b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a7b2:	1c51      	adds	r1, r2, #1
 801a7b4:	9117      	str	r1, [sp, #92]	; 0x5c
 801a7b6:	7852      	ldrb	r2, [r2, #1]
 801a7b8:	2a30      	cmp	r2, #48	; 0x30
 801a7ba:	d0f9      	beq.n	801a7b0 <_strtod_l+0x2a8>
 801a7bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801a7c0:	2908      	cmp	r1, #8
 801a7c2:	f63f af79 	bhi.w	801a6b8 <_strtod_l+0x1b0>
 801a7c6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801a7ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a7cc:	9206      	str	r2, [sp, #24]
 801a7ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a7d0:	1c51      	adds	r1, r2, #1
 801a7d2:	9117      	str	r1, [sp, #92]	; 0x5c
 801a7d4:	7852      	ldrb	r2, [r2, #1]
 801a7d6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801a7da:	2e09      	cmp	r6, #9
 801a7dc:	d937      	bls.n	801a84e <_strtod_l+0x346>
 801a7de:	9e06      	ldr	r6, [sp, #24]
 801a7e0:	1b89      	subs	r1, r1, r6
 801a7e2:	2908      	cmp	r1, #8
 801a7e4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801a7e8:	dc02      	bgt.n	801a7f0 <_strtod_l+0x2e8>
 801a7ea:	4576      	cmp	r6, lr
 801a7ec:	bfa8      	it	ge
 801a7ee:	4676      	movge	r6, lr
 801a7f0:	f1bc 0f00 	cmp.w	ip, #0
 801a7f4:	d000      	beq.n	801a7f8 <_strtod_l+0x2f0>
 801a7f6:	4276      	negs	r6, r6
 801a7f8:	2d00      	cmp	r5, #0
 801a7fa:	d14d      	bne.n	801a898 <_strtod_l+0x390>
 801a7fc:	9904      	ldr	r1, [sp, #16]
 801a7fe:	4301      	orrs	r1, r0
 801a800:	f47f aec6 	bne.w	801a590 <_strtod_l+0x88>
 801a804:	2b00      	cmp	r3, #0
 801a806:	f47f aee1 	bne.w	801a5cc <_strtod_l+0xc4>
 801a80a:	2a69      	cmp	r2, #105	; 0x69
 801a80c:	d027      	beq.n	801a85e <_strtod_l+0x356>
 801a80e:	dc24      	bgt.n	801a85a <_strtod_l+0x352>
 801a810:	2a49      	cmp	r2, #73	; 0x49
 801a812:	d024      	beq.n	801a85e <_strtod_l+0x356>
 801a814:	2a4e      	cmp	r2, #78	; 0x4e
 801a816:	f47f aed9 	bne.w	801a5cc <_strtod_l+0xc4>
 801a81a:	499f      	ldr	r1, [pc, #636]	; (801aa98 <_strtod_l+0x590>)
 801a81c:	a817      	add	r0, sp, #92	; 0x5c
 801a81e:	f000 ff45 	bl	801b6ac <__match>
 801a822:	2800      	cmp	r0, #0
 801a824:	f43f aed2 	beq.w	801a5cc <_strtod_l+0xc4>
 801a828:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a82a:	781b      	ldrb	r3, [r3, #0]
 801a82c:	2b28      	cmp	r3, #40	; 0x28
 801a82e:	d12d      	bne.n	801a88c <_strtod_l+0x384>
 801a830:	499a      	ldr	r1, [pc, #616]	; (801aa9c <_strtod_l+0x594>)
 801a832:	aa1a      	add	r2, sp, #104	; 0x68
 801a834:	a817      	add	r0, sp, #92	; 0x5c
 801a836:	f000 ff4d 	bl	801b6d4 <__hexnan>
 801a83a:	2805      	cmp	r0, #5
 801a83c:	d126      	bne.n	801a88c <_strtod_l+0x384>
 801a83e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a840:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801a844:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801a848:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801a84c:	e6a0      	b.n	801a590 <_strtod_l+0x88>
 801a84e:	210a      	movs	r1, #10
 801a850:	fb01 2e0e 	mla	lr, r1, lr, r2
 801a854:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801a858:	e7b9      	b.n	801a7ce <_strtod_l+0x2c6>
 801a85a:	2a6e      	cmp	r2, #110	; 0x6e
 801a85c:	e7db      	b.n	801a816 <_strtod_l+0x30e>
 801a85e:	4990      	ldr	r1, [pc, #576]	; (801aaa0 <_strtod_l+0x598>)
 801a860:	a817      	add	r0, sp, #92	; 0x5c
 801a862:	f000 ff23 	bl	801b6ac <__match>
 801a866:	2800      	cmp	r0, #0
 801a868:	f43f aeb0 	beq.w	801a5cc <_strtod_l+0xc4>
 801a86c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a86e:	498d      	ldr	r1, [pc, #564]	; (801aaa4 <_strtod_l+0x59c>)
 801a870:	3b01      	subs	r3, #1
 801a872:	a817      	add	r0, sp, #92	; 0x5c
 801a874:	9317      	str	r3, [sp, #92]	; 0x5c
 801a876:	f000 ff19 	bl	801b6ac <__match>
 801a87a:	b910      	cbnz	r0, 801a882 <_strtod_l+0x37a>
 801a87c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a87e:	3301      	adds	r3, #1
 801a880:	9317      	str	r3, [sp, #92]	; 0x5c
 801a882:	f8df b230 	ldr.w	fp, [pc, #560]	; 801aab4 <_strtod_l+0x5ac>
 801a886:	f04f 0a00 	mov.w	sl, #0
 801a88a:	e681      	b.n	801a590 <_strtod_l+0x88>
 801a88c:	4886      	ldr	r0, [pc, #536]	; (801aaa8 <_strtod_l+0x5a0>)
 801a88e:	f001 fcb3 	bl	801c1f8 <nan>
 801a892:	ec5b ab10 	vmov	sl, fp, d0
 801a896:	e67b      	b.n	801a590 <_strtod_l+0x88>
 801a898:	9b05      	ldr	r3, [sp, #20]
 801a89a:	9807      	ldr	r0, [sp, #28]
 801a89c:	1af3      	subs	r3, r6, r3
 801a89e:	2f00      	cmp	r7, #0
 801a8a0:	bf08      	it	eq
 801a8a2:	462f      	moveq	r7, r5
 801a8a4:	2d10      	cmp	r5, #16
 801a8a6:	9306      	str	r3, [sp, #24]
 801a8a8:	46a8      	mov	r8, r5
 801a8aa:	bfa8      	it	ge
 801a8ac:	f04f 0810 	movge.w	r8, #16
 801a8b0:	f7e5 fe28 	bl	8000504 <__aeabi_ui2d>
 801a8b4:	2d09      	cmp	r5, #9
 801a8b6:	4682      	mov	sl, r0
 801a8b8:	468b      	mov	fp, r1
 801a8ba:	dd13      	ble.n	801a8e4 <_strtod_l+0x3dc>
 801a8bc:	4b7b      	ldr	r3, [pc, #492]	; (801aaac <_strtod_l+0x5a4>)
 801a8be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a8c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801a8c6:	f7e5 fe97 	bl	80005f8 <__aeabi_dmul>
 801a8ca:	4682      	mov	sl, r0
 801a8cc:	4648      	mov	r0, r9
 801a8ce:	468b      	mov	fp, r1
 801a8d0:	f7e5 fe18 	bl	8000504 <__aeabi_ui2d>
 801a8d4:	4602      	mov	r2, r0
 801a8d6:	460b      	mov	r3, r1
 801a8d8:	4650      	mov	r0, sl
 801a8da:	4659      	mov	r1, fp
 801a8dc:	f7e5 fcd6 	bl	800028c <__adddf3>
 801a8e0:	4682      	mov	sl, r0
 801a8e2:	468b      	mov	fp, r1
 801a8e4:	2d0f      	cmp	r5, #15
 801a8e6:	dc38      	bgt.n	801a95a <_strtod_l+0x452>
 801a8e8:	9b06      	ldr	r3, [sp, #24]
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	f43f ae50 	beq.w	801a590 <_strtod_l+0x88>
 801a8f0:	dd24      	ble.n	801a93c <_strtod_l+0x434>
 801a8f2:	2b16      	cmp	r3, #22
 801a8f4:	dc0b      	bgt.n	801a90e <_strtod_l+0x406>
 801a8f6:	496d      	ldr	r1, [pc, #436]	; (801aaac <_strtod_l+0x5a4>)
 801a8f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a8fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a900:	4652      	mov	r2, sl
 801a902:	465b      	mov	r3, fp
 801a904:	f7e5 fe78 	bl	80005f8 <__aeabi_dmul>
 801a908:	4682      	mov	sl, r0
 801a90a:	468b      	mov	fp, r1
 801a90c:	e640      	b.n	801a590 <_strtod_l+0x88>
 801a90e:	9a06      	ldr	r2, [sp, #24]
 801a910:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801a914:	4293      	cmp	r3, r2
 801a916:	db20      	blt.n	801a95a <_strtod_l+0x452>
 801a918:	4c64      	ldr	r4, [pc, #400]	; (801aaac <_strtod_l+0x5a4>)
 801a91a:	f1c5 050f 	rsb	r5, r5, #15
 801a91e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801a922:	4652      	mov	r2, sl
 801a924:	465b      	mov	r3, fp
 801a926:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a92a:	f7e5 fe65 	bl	80005f8 <__aeabi_dmul>
 801a92e:	9b06      	ldr	r3, [sp, #24]
 801a930:	1b5d      	subs	r5, r3, r5
 801a932:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801a936:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a93a:	e7e3      	b.n	801a904 <_strtod_l+0x3fc>
 801a93c:	9b06      	ldr	r3, [sp, #24]
 801a93e:	3316      	adds	r3, #22
 801a940:	db0b      	blt.n	801a95a <_strtod_l+0x452>
 801a942:	9b05      	ldr	r3, [sp, #20]
 801a944:	1b9e      	subs	r6, r3, r6
 801a946:	4b59      	ldr	r3, [pc, #356]	; (801aaac <_strtod_l+0x5a4>)
 801a948:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801a94c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a950:	4650      	mov	r0, sl
 801a952:	4659      	mov	r1, fp
 801a954:	f7e5 ff7a 	bl	800084c <__aeabi_ddiv>
 801a958:	e7d6      	b.n	801a908 <_strtod_l+0x400>
 801a95a:	9b06      	ldr	r3, [sp, #24]
 801a95c:	eba5 0808 	sub.w	r8, r5, r8
 801a960:	4498      	add	r8, r3
 801a962:	f1b8 0f00 	cmp.w	r8, #0
 801a966:	dd74      	ble.n	801aa52 <_strtod_l+0x54a>
 801a968:	f018 030f 	ands.w	r3, r8, #15
 801a96c:	d00a      	beq.n	801a984 <_strtod_l+0x47c>
 801a96e:	494f      	ldr	r1, [pc, #316]	; (801aaac <_strtod_l+0x5a4>)
 801a970:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a974:	4652      	mov	r2, sl
 801a976:	465b      	mov	r3, fp
 801a978:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a97c:	f7e5 fe3c 	bl	80005f8 <__aeabi_dmul>
 801a980:	4682      	mov	sl, r0
 801a982:	468b      	mov	fp, r1
 801a984:	f038 080f 	bics.w	r8, r8, #15
 801a988:	d04f      	beq.n	801aa2a <_strtod_l+0x522>
 801a98a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801a98e:	dd22      	ble.n	801a9d6 <_strtod_l+0x4ce>
 801a990:	2500      	movs	r5, #0
 801a992:	462e      	mov	r6, r5
 801a994:	9507      	str	r5, [sp, #28]
 801a996:	9505      	str	r5, [sp, #20]
 801a998:	2322      	movs	r3, #34	; 0x22
 801a99a:	f8df b118 	ldr.w	fp, [pc, #280]	; 801aab4 <_strtod_l+0x5ac>
 801a99e:	6023      	str	r3, [r4, #0]
 801a9a0:	f04f 0a00 	mov.w	sl, #0
 801a9a4:	9b07      	ldr	r3, [sp, #28]
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	f43f adf2 	beq.w	801a590 <_strtod_l+0x88>
 801a9ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a9ae:	4620      	mov	r0, r4
 801a9b0:	f000 ff8a 	bl	801b8c8 <_Bfree>
 801a9b4:	9905      	ldr	r1, [sp, #20]
 801a9b6:	4620      	mov	r0, r4
 801a9b8:	f000 ff86 	bl	801b8c8 <_Bfree>
 801a9bc:	4631      	mov	r1, r6
 801a9be:	4620      	mov	r0, r4
 801a9c0:	f000 ff82 	bl	801b8c8 <_Bfree>
 801a9c4:	9907      	ldr	r1, [sp, #28]
 801a9c6:	4620      	mov	r0, r4
 801a9c8:	f000 ff7e 	bl	801b8c8 <_Bfree>
 801a9cc:	4629      	mov	r1, r5
 801a9ce:	4620      	mov	r0, r4
 801a9d0:	f000 ff7a 	bl	801b8c8 <_Bfree>
 801a9d4:	e5dc      	b.n	801a590 <_strtod_l+0x88>
 801a9d6:	4b36      	ldr	r3, [pc, #216]	; (801aab0 <_strtod_l+0x5a8>)
 801a9d8:	9304      	str	r3, [sp, #16]
 801a9da:	2300      	movs	r3, #0
 801a9dc:	ea4f 1828 	mov.w	r8, r8, asr #4
 801a9e0:	4650      	mov	r0, sl
 801a9e2:	4659      	mov	r1, fp
 801a9e4:	4699      	mov	r9, r3
 801a9e6:	f1b8 0f01 	cmp.w	r8, #1
 801a9ea:	dc21      	bgt.n	801aa30 <_strtod_l+0x528>
 801a9ec:	b10b      	cbz	r3, 801a9f2 <_strtod_l+0x4ea>
 801a9ee:	4682      	mov	sl, r0
 801a9f0:	468b      	mov	fp, r1
 801a9f2:	4b2f      	ldr	r3, [pc, #188]	; (801aab0 <_strtod_l+0x5a8>)
 801a9f4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801a9f8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801a9fc:	4652      	mov	r2, sl
 801a9fe:	465b      	mov	r3, fp
 801aa00:	e9d9 0100 	ldrd	r0, r1, [r9]
 801aa04:	f7e5 fdf8 	bl	80005f8 <__aeabi_dmul>
 801aa08:	4b2a      	ldr	r3, [pc, #168]	; (801aab4 <_strtod_l+0x5ac>)
 801aa0a:	460a      	mov	r2, r1
 801aa0c:	400b      	ands	r3, r1
 801aa0e:	492a      	ldr	r1, [pc, #168]	; (801aab8 <_strtod_l+0x5b0>)
 801aa10:	428b      	cmp	r3, r1
 801aa12:	4682      	mov	sl, r0
 801aa14:	d8bc      	bhi.n	801a990 <_strtod_l+0x488>
 801aa16:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801aa1a:	428b      	cmp	r3, r1
 801aa1c:	bf86      	itte	hi
 801aa1e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801aabc <_strtod_l+0x5b4>
 801aa22:	f04f 3aff 	movhi.w	sl, #4294967295
 801aa26:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801aa2a:	2300      	movs	r3, #0
 801aa2c:	9304      	str	r3, [sp, #16]
 801aa2e:	e084      	b.n	801ab3a <_strtod_l+0x632>
 801aa30:	f018 0f01 	tst.w	r8, #1
 801aa34:	d005      	beq.n	801aa42 <_strtod_l+0x53a>
 801aa36:	9b04      	ldr	r3, [sp, #16]
 801aa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa3c:	f7e5 fddc 	bl	80005f8 <__aeabi_dmul>
 801aa40:	2301      	movs	r3, #1
 801aa42:	9a04      	ldr	r2, [sp, #16]
 801aa44:	3208      	adds	r2, #8
 801aa46:	f109 0901 	add.w	r9, r9, #1
 801aa4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801aa4e:	9204      	str	r2, [sp, #16]
 801aa50:	e7c9      	b.n	801a9e6 <_strtod_l+0x4de>
 801aa52:	d0ea      	beq.n	801aa2a <_strtod_l+0x522>
 801aa54:	f1c8 0800 	rsb	r8, r8, #0
 801aa58:	f018 020f 	ands.w	r2, r8, #15
 801aa5c:	d00a      	beq.n	801aa74 <_strtod_l+0x56c>
 801aa5e:	4b13      	ldr	r3, [pc, #76]	; (801aaac <_strtod_l+0x5a4>)
 801aa60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801aa64:	4650      	mov	r0, sl
 801aa66:	4659      	mov	r1, fp
 801aa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa6c:	f7e5 feee 	bl	800084c <__aeabi_ddiv>
 801aa70:	4682      	mov	sl, r0
 801aa72:	468b      	mov	fp, r1
 801aa74:	ea5f 1828 	movs.w	r8, r8, asr #4
 801aa78:	d0d7      	beq.n	801aa2a <_strtod_l+0x522>
 801aa7a:	f1b8 0f1f 	cmp.w	r8, #31
 801aa7e:	dd1f      	ble.n	801aac0 <_strtod_l+0x5b8>
 801aa80:	2500      	movs	r5, #0
 801aa82:	462e      	mov	r6, r5
 801aa84:	9507      	str	r5, [sp, #28]
 801aa86:	9505      	str	r5, [sp, #20]
 801aa88:	2322      	movs	r3, #34	; 0x22
 801aa8a:	f04f 0a00 	mov.w	sl, #0
 801aa8e:	f04f 0b00 	mov.w	fp, #0
 801aa92:	6023      	str	r3, [r4, #0]
 801aa94:	e786      	b.n	801a9a4 <_strtod_l+0x49c>
 801aa96:	bf00      	nop
 801aa98:	08031335 	.word	0x08031335
 801aa9c:	0803134c 	.word	0x0803134c
 801aaa0:	0803132c 	.word	0x0803132c
 801aaa4:	0803132f 	.word	0x0803132f
 801aaa8:	080315bf 	.word	0x080315bf
 801aaac:	080314b0 	.word	0x080314b0
 801aab0:	08031488 	.word	0x08031488
 801aab4:	7ff00000 	.word	0x7ff00000
 801aab8:	7ca00000 	.word	0x7ca00000
 801aabc:	7fefffff 	.word	0x7fefffff
 801aac0:	f018 0310 	ands.w	r3, r8, #16
 801aac4:	bf18      	it	ne
 801aac6:	236a      	movne	r3, #106	; 0x6a
 801aac8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801ae78 <_strtod_l+0x970>
 801aacc:	9304      	str	r3, [sp, #16]
 801aace:	4650      	mov	r0, sl
 801aad0:	4659      	mov	r1, fp
 801aad2:	2300      	movs	r3, #0
 801aad4:	f018 0f01 	tst.w	r8, #1
 801aad8:	d004      	beq.n	801aae4 <_strtod_l+0x5dc>
 801aada:	e9d9 2300 	ldrd	r2, r3, [r9]
 801aade:	f7e5 fd8b 	bl	80005f8 <__aeabi_dmul>
 801aae2:	2301      	movs	r3, #1
 801aae4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801aae8:	f109 0908 	add.w	r9, r9, #8
 801aaec:	d1f2      	bne.n	801aad4 <_strtod_l+0x5cc>
 801aaee:	b10b      	cbz	r3, 801aaf4 <_strtod_l+0x5ec>
 801aaf0:	4682      	mov	sl, r0
 801aaf2:	468b      	mov	fp, r1
 801aaf4:	9b04      	ldr	r3, [sp, #16]
 801aaf6:	b1c3      	cbz	r3, 801ab2a <_strtod_l+0x622>
 801aaf8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801aafc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	4659      	mov	r1, fp
 801ab04:	dd11      	ble.n	801ab2a <_strtod_l+0x622>
 801ab06:	2b1f      	cmp	r3, #31
 801ab08:	f340 8124 	ble.w	801ad54 <_strtod_l+0x84c>
 801ab0c:	2b34      	cmp	r3, #52	; 0x34
 801ab0e:	bfde      	ittt	le
 801ab10:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801ab14:	f04f 33ff 	movle.w	r3, #4294967295
 801ab18:	fa03 f202 	lslle.w	r2, r3, r2
 801ab1c:	f04f 0a00 	mov.w	sl, #0
 801ab20:	bfcc      	ite	gt
 801ab22:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801ab26:	ea02 0b01 	andle.w	fp, r2, r1
 801ab2a:	2200      	movs	r2, #0
 801ab2c:	2300      	movs	r3, #0
 801ab2e:	4650      	mov	r0, sl
 801ab30:	4659      	mov	r1, fp
 801ab32:	f7e5 ffc9 	bl	8000ac8 <__aeabi_dcmpeq>
 801ab36:	2800      	cmp	r0, #0
 801ab38:	d1a2      	bne.n	801aa80 <_strtod_l+0x578>
 801ab3a:	9b07      	ldr	r3, [sp, #28]
 801ab3c:	9300      	str	r3, [sp, #0]
 801ab3e:	9908      	ldr	r1, [sp, #32]
 801ab40:	462b      	mov	r3, r5
 801ab42:	463a      	mov	r2, r7
 801ab44:	4620      	mov	r0, r4
 801ab46:	f000 ff27 	bl	801b998 <__s2b>
 801ab4a:	9007      	str	r0, [sp, #28]
 801ab4c:	2800      	cmp	r0, #0
 801ab4e:	f43f af1f 	beq.w	801a990 <_strtod_l+0x488>
 801ab52:	9b05      	ldr	r3, [sp, #20]
 801ab54:	1b9e      	subs	r6, r3, r6
 801ab56:	9b06      	ldr	r3, [sp, #24]
 801ab58:	2b00      	cmp	r3, #0
 801ab5a:	bfb4      	ite	lt
 801ab5c:	4633      	movlt	r3, r6
 801ab5e:	2300      	movge	r3, #0
 801ab60:	930c      	str	r3, [sp, #48]	; 0x30
 801ab62:	9b06      	ldr	r3, [sp, #24]
 801ab64:	2500      	movs	r5, #0
 801ab66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab6a:	9312      	str	r3, [sp, #72]	; 0x48
 801ab6c:	462e      	mov	r6, r5
 801ab6e:	9b07      	ldr	r3, [sp, #28]
 801ab70:	4620      	mov	r0, r4
 801ab72:	6859      	ldr	r1, [r3, #4]
 801ab74:	f000 fe68 	bl	801b848 <_Balloc>
 801ab78:	9005      	str	r0, [sp, #20]
 801ab7a:	2800      	cmp	r0, #0
 801ab7c:	f43f af0c 	beq.w	801a998 <_strtod_l+0x490>
 801ab80:	9b07      	ldr	r3, [sp, #28]
 801ab82:	691a      	ldr	r2, [r3, #16]
 801ab84:	3202      	adds	r2, #2
 801ab86:	f103 010c 	add.w	r1, r3, #12
 801ab8a:	0092      	lsls	r2, r2, #2
 801ab8c:	300c      	adds	r0, #12
 801ab8e:	f7ff fb29 	bl	801a1e4 <memcpy>
 801ab92:	ec4b ab10 	vmov	d0, sl, fp
 801ab96:	aa1a      	add	r2, sp, #104	; 0x68
 801ab98:	a919      	add	r1, sp, #100	; 0x64
 801ab9a:	4620      	mov	r0, r4
 801ab9c:	f001 fa42 	bl	801c024 <__d2b>
 801aba0:	ec4b ab18 	vmov	d8, sl, fp
 801aba4:	9018      	str	r0, [sp, #96]	; 0x60
 801aba6:	2800      	cmp	r0, #0
 801aba8:	f43f aef6 	beq.w	801a998 <_strtod_l+0x490>
 801abac:	2101      	movs	r1, #1
 801abae:	4620      	mov	r0, r4
 801abb0:	f000 ff8c 	bl	801bacc <__i2b>
 801abb4:	4606      	mov	r6, r0
 801abb6:	2800      	cmp	r0, #0
 801abb8:	f43f aeee 	beq.w	801a998 <_strtod_l+0x490>
 801abbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801abbe:	9904      	ldr	r1, [sp, #16]
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	bfab      	itete	ge
 801abc4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801abc6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801abc8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801abca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801abce:	bfac      	ite	ge
 801abd0:	eb03 0902 	addge.w	r9, r3, r2
 801abd4:	1ad7      	sublt	r7, r2, r3
 801abd6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801abd8:	eba3 0801 	sub.w	r8, r3, r1
 801abdc:	4490      	add	r8, r2
 801abde:	4ba1      	ldr	r3, [pc, #644]	; (801ae64 <_strtod_l+0x95c>)
 801abe0:	f108 38ff 	add.w	r8, r8, #4294967295
 801abe4:	4598      	cmp	r8, r3
 801abe6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801abea:	f280 80c7 	bge.w	801ad7c <_strtod_l+0x874>
 801abee:	eba3 0308 	sub.w	r3, r3, r8
 801abf2:	2b1f      	cmp	r3, #31
 801abf4:	eba2 0203 	sub.w	r2, r2, r3
 801abf8:	f04f 0101 	mov.w	r1, #1
 801abfc:	f300 80b1 	bgt.w	801ad62 <_strtod_l+0x85a>
 801ac00:	fa01 f303 	lsl.w	r3, r1, r3
 801ac04:	930d      	str	r3, [sp, #52]	; 0x34
 801ac06:	2300      	movs	r3, #0
 801ac08:	9308      	str	r3, [sp, #32]
 801ac0a:	eb09 0802 	add.w	r8, r9, r2
 801ac0e:	9b04      	ldr	r3, [sp, #16]
 801ac10:	45c1      	cmp	r9, r8
 801ac12:	4417      	add	r7, r2
 801ac14:	441f      	add	r7, r3
 801ac16:	464b      	mov	r3, r9
 801ac18:	bfa8      	it	ge
 801ac1a:	4643      	movge	r3, r8
 801ac1c:	42bb      	cmp	r3, r7
 801ac1e:	bfa8      	it	ge
 801ac20:	463b      	movge	r3, r7
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	bfc2      	ittt	gt
 801ac26:	eba8 0803 	subgt.w	r8, r8, r3
 801ac2a:	1aff      	subgt	r7, r7, r3
 801ac2c:	eba9 0903 	subgt.w	r9, r9, r3
 801ac30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	dd17      	ble.n	801ac66 <_strtod_l+0x75e>
 801ac36:	4631      	mov	r1, r6
 801ac38:	461a      	mov	r2, r3
 801ac3a:	4620      	mov	r0, r4
 801ac3c:	f001 f806 	bl	801bc4c <__pow5mult>
 801ac40:	4606      	mov	r6, r0
 801ac42:	2800      	cmp	r0, #0
 801ac44:	f43f aea8 	beq.w	801a998 <_strtod_l+0x490>
 801ac48:	4601      	mov	r1, r0
 801ac4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ac4c:	4620      	mov	r0, r4
 801ac4e:	f000 ff53 	bl	801baf8 <__multiply>
 801ac52:	900b      	str	r0, [sp, #44]	; 0x2c
 801ac54:	2800      	cmp	r0, #0
 801ac56:	f43f ae9f 	beq.w	801a998 <_strtod_l+0x490>
 801ac5a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ac5c:	4620      	mov	r0, r4
 801ac5e:	f000 fe33 	bl	801b8c8 <_Bfree>
 801ac62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ac64:	9318      	str	r3, [sp, #96]	; 0x60
 801ac66:	f1b8 0f00 	cmp.w	r8, #0
 801ac6a:	f300 808c 	bgt.w	801ad86 <_strtod_l+0x87e>
 801ac6e:	9b06      	ldr	r3, [sp, #24]
 801ac70:	2b00      	cmp	r3, #0
 801ac72:	dd08      	ble.n	801ac86 <_strtod_l+0x77e>
 801ac74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ac76:	9905      	ldr	r1, [sp, #20]
 801ac78:	4620      	mov	r0, r4
 801ac7a:	f000 ffe7 	bl	801bc4c <__pow5mult>
 801ac7e:	9005      	str	r0, [sp, #20]
 801ac80:	2800      	cmp	r0, #0
 801ac82:	f43f ae89 	beq.w	801a998 <_strtod_l+0x490>
 801ac86:	2f00      	cmp	r7, #0
 801ac88:	dd08      	ble.n	801ac9c <_strtod_l+0x794>
 801ac8a:	9905      	ldr	r1, [sp, #20]
 801ac8c:	463a      	mov	r2, r7
 801ac8e:	4620      	mov	r0, r4
 801ac90:	f001 f836 	bl	801bd00 <__lshift>
 801ac94:	9005      	str	r0, [sp, #20]
 801ac96:	2800      	cmp	r0, #0
 801ac98:	f43f ae7e 	beq.w	801a998 <_strtod_l+0x490>
 801ac9c:	f1b9 0f00 	cmp.w	r9, #0
 801aca0:	dd08      	ble.n	801acb4 <_strtod_l+0x7ac>
 801aca2:	4631      	mov	r1, r6
 801aca4:	464a      	mov	r2, r9
 801aca6:	4620      	mov	r0, r4
 801aca8:	f001 f82a 	bl	801bd00 <__lshift>
 801acac:	4606      	mov	r6, r0
 801acae:	2800      	cmp	r0, #0
 801acb0:	f43f ae72 	beq.w	801a998 <_strtod_l+0x490>
 801acb4:	9a05      	ldr	r2, [sp, #20]
 801acb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801acb8:	4620      	mov	r0, r4
 801acba:	f001 f8ad 	bl	801be18 <__mdiff>
 801acbe:	4605      	mov	r5, r0
 801acc0:	2800      	cmp	r0, #0
 801acc2:	f43f ae69 	beq.w	801a998 <_strtod_l+0x490>
 801acc6:	68c3      	ldr	r3, [r0, #12]
 801acc8:	930b      	str	r3, [sp, #44]	; 0x2c
 801acca:	2300      	movs	r3, #0
 801accc:	60c3      	str	r3, [r0, #12]
 801acce:	4631      	mov	r1, r6
 801acd0:	f001 f886 	bl	801bde0 <__mcmp>
 801acd4:	2800      	cmp	r0, #0
 801acd6:	da60      	bge.n	801ad9a <_strtod_l+0x892>
 801acd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801acda:	ea53 030a 	orrs.w	r3, r3, sl
 801acde:	f040 8082 	bne.w	801ade6 <_strtod_l+0x8de>
 801ace2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	d17d      	bne.n	801ade6 <_strtod_l+0x8de>
 801acea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801acee:	0d1b      	lsrs	r3, r3, #20
 801acf0:	051b      	lsls	r3, r3, #20
 801acf2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801acf6:	d976      	bls.n	801ade6 <_strtod_l+0x8de>
 801acf8:	696b      	ldr	r3, [r5, #20]
 801acfa:	b913      	cbnz	r3, 801ad02 <_strtod_l+0x7fa>
 801acfc:	692b      	ldr	r3, [r5, #16]
 801acfe:	2b01      	cmp	r3, #1
 801ad00:	dd71      	ble.n	801ade6 <_strtod_l+0x8de>
 801ad02:	4629      	mov	r1, r5
 801ad04:	2201      	movs	r2, #1
 801ad06:	4620      	mov	r0, r4
 801ad08:	f000 fffa 	bl	801bd00 <__lshift>
 801ad0c:	4631      	mov	r1, r6
 801ad0e:	4605      	mov	r5, r0
 801ad10:	f001 f866 	bl	801bde0 <__mcmp>
 801ad14:	2800      	cmp	r0, #0
 801ad16:	dd66      	ble.n	801ade6 <_strtod_l+0x8de>
 801ad18:	9904      	ldr	r1, [sp, #16]
 801ad1a:	4a53      	ldr	r2, [pc, #332]	; (801ae68 <_strtod_l+0x960>)
 801ad1c:	465b      	mov	r3, fp
 801ad1e:	2900      	cmp	r1, #0
 801ad20:	f000 8081 	beq.w	801ae26 <_strtod_l+0x91e>
 801ad24:	ea02 010b 	and.w	r1, r2, fp
 801ad28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801ad2c:	dc7b      	bgt.n	801ae26 <_strtod_l+0x91e>
 801ad2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801ad32:	f77f aea9 	ble.w	801aa88 <_strtod_l+0x580>
 801ad36:	4b4d      	ldr	r3, [pc, #308]	; (801ae6c <_strtod_l+0x964>)
 801ad38:	4650      	mov	r0, sl
 801ad3a:	4659      	mov	r1, fp
 801ad3c:	2200      	movs	r2, #0
 801ad3e:	f7e5 fc5b 	bl	80005f8 <__aeabi_dmul>
 801ad42:	460b      	mov	r3, r1
 801ad44:	4303      	orrs	r3, r0
 801ad46:	bf08      	it	eq
 801ad48:	2322      	moveq	r3, #34	; 0x22
 801ad4a:	4682      	mov	sl, r0
 801ad4c:	468b      	mov	fp, r1
 801ad4e:	bf08      	it	eq
 801ad50:	6023      	streq	r3, [r4, #0]
 801ad52:	e62b      	b.n	801a9ac <_strtod_l+0x4a4>
 801ad54:	f04f 32ff 	mov.w	r2, #4294967295
 801ad58:	fa02 f303 	lsl.w	r3, r2, r3
 801ad5c:	ea03 0a0a 	and.w	sl, r3, sl
 801ad60:	e6e3      	b.n	801ab2a <_strtod_l+0x622>
 801ad62:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801ad66:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801ad6a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801ad6e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801ad72:	fa01 f308 	lsl.w	r3, r1, r8
 801ad76:	9308      	str	r3, [sp, #32]
 801ad78:	910d      	str	r1, [sp, #52]	; 0x34
 801ad7a:	e746      	b.n	801ac0a <_strtod_l+0x702>
 801ad7c:	2300      	movs	r3, #0
 801ad7e:	9308      	str	r3, [sp, #32]
 801ad80:	2301      	movs	r3, #1
 801ad82:	930d      	str	r3, [sp, #52]	; 0x34
 801ad84:	e741      	b.n	801ac0a <_strtod_l+0x702>
 801ad86:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ad88:	4642      	mov	r2, r8
 801ad8a:	4620      	mov	r0, r4
 801ad8c:	f000 ffb8 	bl	801bd00 <__lshift>
 801ad90:	9018      	str	r0, [sp, #96]	; 0x60
 801ad92:	2800      	cmp	r0, #0
 801ad94:	f47f af6b 	bne.w	801ac6e <_strtod_l+0x766>
 801ad98:	e5fe      	b.n	801a998 <_strtod_l+0x490>
 801ad9a:	465f      	mov	r7, fp
 801ad9c:	d16e      	bne.n	801ae7c <_strtod_l+0x974>
 801ad9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ada0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ada4:	b342      	cbz	r2, 801adf8 <_strtod_l+0x8f0>
 801ada6:	4a32      	ldr	r2, [pc, #200]	; (801ae70 <_strtod_l+0x968>)
 801ada8:	4293      	cmp	r3, r2
 801adaa:	d128      	bne.n	801adfe <_strtod_l+0x8f6>
 801adac:	9b04      	ldr	r3, [sp, #16]
 801adae:	4651      	mov	r1, sl
 801adb0:	b1eb      	cbz	r3, 801adee <_strtod_l+0x8e6>
 801adb2:	4b2d      	ldr	r3, [pc, #180]	; (801ae68 <_strtod_l+0x960>)
 801adb4:	403b      	ands	r3, r7
 801adb6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801adba:	f04f 32ff 	mov.w	r2, #4294967295
 801adbe:	d819      	bhi.n	801adf4 <_strtod_l+0x8ec>
 801adc0:	0d1b      	lsrs	r3, r3, #20
 801adc2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801adc6:	fa02 f303 	lsl.w	r3, r2, r3
 801adca:	4299      	cmp	r1, r3
 801adcc:	d117      	bne.n	801adfe <_strtod_l+0x8f6>
 801adce:	4b29      	ldr	r3, [pc, #164]	; (801ae74 <_strtod_l+0x96c>)
 801add0:	429f      	cmp	r7, r3
 801add2:	d102      	bne.n	801adda <_strtod_l+0x8d2>
 801add4:	3101      	adds	r1, #1
 801add6:	f43f addf 	beq.w	801a998 <_strtod_l+0x490>
 801adda:	4b23      	ldr	r3, [pc, #140]	; (801ae68 <_strtod_l+0x960>)
 801addc:	403b      	ands	r3, r7
 801adde:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801ade2:	f04f 0a00 	mov.w	sl, #0
 801ade6:	9b04      	ldr	r3, [sp, #16]
 801ade8:	2b00      	cmp	r3, #0
 801adea:	d1a4      	bne.n	801ad36 <_strtod_l+0x82e>
 801adec:	e5de      	b.n	801a9ac <_strtod_l+0x4a4>
 801adee:	f04f 33ff 	mov.w	r3, #4294967295
 801adf2:	e7ea      	b.n	801adca <_strtod_l+0x8c2>
 801adf4:	4613      	mov	r3, r2
 801adf6:	e7e8      	b.n	801adca <_strtod_l+0x8c2>
 801adf8:	ea53 030a 	orrs.w	r3, r3, sl
 801adfc:	d08c      	beq.n	801ad18 <_strtod_l+0x810>
 801adfe:	9b08      	ldr	r3, [sp, #32]
 801ae00:	b1db      	cbz	r3, 801ae3a <_strtod_l+0x932>
 801ae02:	423b      	tst	r3, r7
 801ae04:	d0ef      	beq.n	801ade6 <_strtod_l+0x8de>
 801ae06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ae08:	9a04      	ldr	r2, [sp, #16]
 801ae0a:	4650      	mov	r0, sl
 801ae0c:	4659      	mov	r1, fp
 801ae0e:	b1c3      	cbz	r3, 801ae42 <_strtod_l+0x93a>
 801ae10:	f7ff fb5b 	bl	801a4ca <sulp>
 801ae14:	4602      	mov	r2, r0
 801ae16:	460b      	mov	r3, r1
 801ae18:	ec51 0b18 	vmov	r0, r1, d8
 801ae1c:	f7e5 fa36 	bl	800028c <__adddf3>
 801ae20:	4682      	mov	sl, r0
 801ae22:	468b      	mov	fp, r1
 801ae24:	e7df      	b.n	801ade6 <_strtod_l+0x8de>
 801ae26:	4013      	ands	r3, r2
 801ae28:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801ae2c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801ae30:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801ae34:	f04f 3aff 	mov.w	sl, #4294967295
 801ae38:	e7d5      	b.n	801ade6 <_strtod_l+0x8de>
 801ae3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ae3c:	ea13 0f0a 	tst.w	r3, sl
 801ae40:	e7e0      	b.n	801ae04 <_strtod_l+0x8fc>
 801ae42:	f7ff fb42 	bl	801a4ca <sulp>
 801ae46:	4602      	mov	r2, r0
 801ae48:	460b      	mov	r3, r1
 801ae4a:	ec51 0b18 	vmov	r0, r1, d8
 801ae4e:	f7e5 fa1b 	bl	8000288 <__aeabi_dsub>
 801ae52:	2200      	movs	r2, #0
 801ae54:	2300      	movs	r3, #0
 801ae56:	4682      	mov	sl, r0
 801ae58:	468b      	mov	fp, r1
 801ae5a:	f7e5 fe35 	bl	8000ac8 <__aeabi_dcmpeq>
 801ae5e:	2800      	cmp	r0, #0
 801ae60:	d0c1      	beq.n	801ade6 <_strtod_l+0x8de>
 801ae62:	e611      	b.n	801aa88 <_strtod_l+0x580>
 801ae64:	fffffc02 	.word	0xfffffc02
 801ae68:	7ff00000 	.word	0x7ff00000
 801ae6c:	39500000 	.word	0x39500000
 801ae70:	000fffff 	.word	0x000fffff
 801ae74:	7fefffff 	.word	0x7fefffff
 801ae78:	08031360 	.word	0x08031360
 801ae7c:	4631      	mov	r1, r6
 801ae7e:	4628      	mov	r0, r5
 801ae80:	f001 f92c 	bl	801c0dc <__ratio>
 801ae84:	ec59 8b10 	vmov	r8, r9, d0
 801ae88:	ee10 0a10 	vmov	r0, s0
 801ae8c:	2200      	movs	r2, #0
 801ae8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ae92:	4649      	mov	r1, r9
 801ae94:	f7e5 fe2c 	bl	8000af0 <__aeabi_dcmple>
 801ae98:	2800      	cmp	r0, #0
 801ae9a:	d07a      	beq.n	801af92 <_strtod_l+0xa8a>
 801ae9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	d04a      	beq.n	801af38 <_strtod_l+0xa30>
 801aea2:	4b95      	ldr	r3, [pc, #596]	; (801b0f8 <_strtod_l+0xbf0>)
 801aea4:	2200      	movs	r2, #0
 801aea6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801aeaa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b0f8 <_strtod_l+0xbf0>
 801aeae:	f04f 0800 	mov.w	r8, #0
 801aeb2:	4b92      	ldr	r3, [pc, #584]	; (801b0fc <_strtod_l+0xbf4>)
 801aeb4:	403b      	ands	r3, r7
 801aeb6:	930d      	str	r3, [sp, #52]	; 0x34
 801aeb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801aeba:	4b91      	ldr	r3, [pc, #580]	; (801b100 <_strtod_l+0xbf8>)
 801aebc:	429a      	cmp	r2, r3
 801aebe:	f040 80b0 	bne.w	801b022 <_strtod_l+0xb1a>
 801aec2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801aec6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801aeca:	ec4b ab10 	vmov	d0, sl, fp
 801aece:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801aed2:	f001 f82b 	bl	801bf2c <__ulp>
 801aed6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801aeda:	ec53 2b10 	vmov	r2, r3, d0
 801aede:	f7e5 fb8b 	bl	80005f8 <__aeabi_dmul>
 801aee2:	4652      	mov	r2, sl
 801aee4:	465b      	mov	r3, fp
 801aee6:	f7e5 f9d1 	bl	800028c <__adddf3>
 801aeea:	460b      	mov	r3, r1
 801aeec:	4983      	ldr	r1, [pc, #524]	; (801b0fc <_strtod_l+0xbf4>)
 801aeee:	4a85      	ldr	r2, [pc, #532]	; (801b104 <_strtod_l+0xbfc>)
 801aef0:	4019      	ands	r1, r3
 801aef2:	4291      	cmp	r1, r2
 801aef4:	4682      	mov	sl, r0
 801aef6:	d960      	bls.n	801afba <_strtod_l+0xab2>
 801aef8:	ee18 3a90 	vmov	r3, s17
 801aefc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801af00:	4293      	cmp	r3, r2
 801af02:	d104      	bne.n	801af0e <_strtod_l+0xa06>
 801af04:	ee18 3a10 	vmov	r3, s16
 801af08:	3301      	adds	r3, #1
 801af0a:	f43f ad45 	beq.w	801a998 <_strtod_l+0x490>
 801af0e:	f8df b200 	ldr.w	fp, [pc, #512]	; 801b110 <_strtod_l+0xc08>
 801af12:	f04f 3aff 	mov.w	sl, #4294967295
 801af16:	9918      	ldr	r1, [sp, #96]	; 0x60
 801af18:	4620      	mov	r0, r4
 801af1a:	f000 fcd5 	bl	801b8c8 <_Bfree>
 801af1e:	9905      	ldr	r1, [sp, #20]
 801af20:	4620      	mov	r0, r4
 801af22:	f000 fcd1 	bl	801b8c8 <_Bfree>
 801af26:	4631      	mov	r1, r6
 801af28:	4620      	mov	r0, r4
 801af2a:	f000 fccd 	bl	801b8c8 <_Bfree>
 801af2e:	4629      	mov	r1, r5
 801af30:	4620      	mov	r0, r4
 801af32:	f000 fcc9 	bl	801b8c8 <_Bfree>
 801af36:	e61a      	b.n	801ab6e <_strtod_l+0x666>
 801af38:	f1ba 0f00 	cmp.w	sl, #0
 801af3c:	d11b      	bne.n	801af76 <_strtod_l+0xa6e>
 801af3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801af42:	b9f3      	cbnz	r3, 801af82 <_strtod_l+0xa7a>
 801af44:	4b6c      	ldr	r3, [pc, #432]	; (801b0f8 <_strtod_l+0xbf0>)
 801af46:	2200      	movs	r2, #0
 801af48:	4640      	mov	r0, r8
 801af4a:	4649      	mov	r1, r9
 801af4c:	f7e5 fdc6 	bl	8000adc <__aeabi_dcmplt>
 801af50:	b9d0      	cbnz	r0, 801af88 <_strtod_l+0xa80>
 801af52:	4640      	mov	r0, r8
 801af54:	4649      	mov	r1, r9
 801af56:	4b6c      	ldr	r3, [pc, #432]	; (801b108 <_strtod_l+0xc00>)
 801af58:	2200      	movs	r2, #0
 801af5a:	f7e5 fb4d 	bl	80005f8 <__aeabi_dmul>
 801af5e:	4680      	mov	r8, r0
 801af60:	4689      	mov	r9, r1
 801af62:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801af66:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801af6a:	9315      	str	r3, [sp, #84]	; 0x54
 801af6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801af70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801af74:	e79d      	b.n	801aeb2 <_strtod_l+0x9aa>
 801af76:	f1ba 0f01 	cmp.w	sl, #1
 801af7a:	d102      	bne.n	801af82 <_strtod_l+0xa7a>
 801af7c:	2f00      	cmp	r7, #0
 801af7e:	f43f ad83 	beq.w	801aa88 <_strtod_l+0x580>
 801af82:	4b62      	ldr	r3, [pc, #392]	; (801b10c <_strtod_l+0xc04>)
 801af84:	2200      	movs	r2, #0
 801af86:	e78e      	b.n	801aea6 <_strtod_l+0x99e>
 801af88:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801b108 <_strtod_l+0xc00>
 801af8c:	f04f 0800 	mov.w	r8, #0
 801af90:	e7e7      	b.n	801af62 <_strtod_l+0xa5a>
 801af92:	4b5d      	ldr	r3, [pc, #372]	; (801b108 <_strtod_l+0xc00>)
 801af94:	4640      	mov	r0, r8
 801af96:	4649      	mov	r1, r9
 801af98:	2200      	movs	r2, #0
 801af9a:	f7e5 fb2d 	bl	80005f8 <__aeabi_dmul>
 801af9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801afa0:	4680      	mov	r8, r0
 801afa2:	4689      	mov	r9, r1
 801afa4:	b933      	cbnz	r3, 801afb4 <_strtod_l+0xaac>
 801afa6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801afaa:	900e      	str	r0, [sp, #56]	; 0x38
 801afac:	930f      	str	r3, [sp, #60]	; 0x3c
 801afae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801afb2:	e7dd      	b.n	801af70 <_strtod_l+0xa68>
 801afb4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801afb8:	e7f9      	b.n	801afae <_strtod_l+0xaa6>
 801afba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801afbe:	9b04      	ldr	r3, [sp, #16]
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d1a8      	bne.n	801af16 <_strtod_l+0xa0e>
 801afc4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801afc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801afca:	0d1b      	lsrs	r3, r3, #20
 801afcc:	051b      	lsls	r3, r3, #20
 801afce:	429a      	cmp	r2, r3
 801afd0:	d1a1      	bne.n	801af16 <_strtod_l+0xa0e>
 801afd2:	4640      	mov	r0, r8
 801afd4:	4649      	mov	r1, r9
 801afd6:	f7e5 fe6f 	bl	8000cb8 <__aeabi_d2lz>
 801afda:	f7e5 fadf 	bl	800059c <__aeabi_l2d>
 801afde:	4602      	mov	r2, r0
 801afe0:	460b      	mov	r3, r1
 801afe2:	4640      	mov	r0, r8
 801afe4:	4649      	mov	r1, r9
 801afe6:	f7e5 f94f 	bl	8000288 <__aeabi_dsub>
 801afea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801afec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801aff0:	ea43 030a 	orr.w	r3, r3, sl
 801aff4:	4313      	orrs	r3, r2
 801aff6:	4680      	mov	r8, r0
 801aff8:	4689      	mov	r9, r1
 801affa:	d055      	beq.n	801b0a8 <_strtod_l+0xba0>
 801affc:	a336      	add	r3, pc, #216	; (adr r3, 801b0d8 <_strtod_l+0xbd0>)
 801affe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b002:	f7e5 fd6b 	bl	8000adc <__aeabi_dcmplt>
 801b006:	2800      	cmp	r0, #0
 801b008:	f47f acd0 	bne.w	801a9ac <_strtod_l+0x4a4>
 801b00c:	a334      	add	r3, pc, #208	; (adr r3, 801b0e0 <_strtod_l+0xbd8>)
 801b00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b012:	4640      	mov	r0, r8
 801b014:	4649      	mov	r1, r9
 801b016:	f7e5 fd7f 	bl	8000b18 <__aeabi_dcmpgt>
 801b01a:	2800      	cmp	r0, #0
 801b01c:	f43f af7b 	beq.w	801af16 <_strtod_l+0xa0e>
 801b020:	e4c4      	b.n	801a9ac <_strtod_l+0x4a4>
 801b022:	9b04      	ldr	r3, [sp, #16]
 801b024:	b333      	cbz	r3, 801b074 <_strtod_l+0xb6c>
 801b026:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b028:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b02c:	d822      	bhi.n	801b074 <_strtod_l+0xb6c>
 801b02e:	a32e      	add	r3, pc, #184	; (adr r3, 801b0e8 <_strtod_l+0xbe0>)
 801b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b034:	4640      	mov	r0, r8
 801b036:	4649      	mov	r1, r9
 801b038:	f7e5 fd5a 	bl	8000af0 <__aeabi_dcmple>
 801b03c:	b1a0      	cbz	r0, 801b068 <_strtod_l+0xb60>
 801b03e:	4649      	mov	r1, r9
 801b040:	4640      	mov	r0, r8
 801b042:	f7e5 fdb1 	bl	8000ba8 <__aeabi_d2uiz>
 801b046:	2801      	cmp	r0, #1
 801b048:	bf38      	it	cc
 801b04a:	2001      	movcc	r0, #1
 801b04c:	f7e5 fa5a 	bl	8000504 <__aeabi_ui2d>
 801b050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b052:	4680      	mov	r8, r0
 801b054:	4689      	mov	r9, r1
 801b056:	bb23      	cbnz	r3, 801b0a2 <_strtod_l+0xb9a>
 801b058:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b05c:	9010      	str	r0, [sp, #64]	; 0x40
 801b05e:	9311      	str	r3, [sp, #68]	; 0x44
 801b060:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b064:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b06a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b06c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b070:	1a9b      	subs	r3, r3, r2
 801b072:	9309      	str	r3, [sp, #36]	; 0x24
 801b074:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b078:	eeb0 0a48 	vmov.f32	s0, s16
 801b07c:	eef0 0a68 	vmov.f32	s1, s17
 801b080:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b084:	f000 ff52 	bl	801bf2c <__ulp>
 801b088:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b08c:	ec53 2b10 	vmov	r2, r3, d0
 801b090:	f7e5 fab2 	bl	80005f8 <__aeabi_dmul>
 801b094:	ec53 2b18 	vmov	r2, r3, d8
 801b098:	f7e5 f8f8 	bl	800028c <__adddf3>
 801b09c:	4682      	mov	sl, r0
 801b09e:	468b      	mov	fp, r1
 801b0a0:	e78d      	b.n	801afbe <_strtod_l+0xab6>
 801b0a2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801b0a6:	e7db      	b.n	801b060 <_strtod_l+0xb58>
 801b0a8:	a311      	add	r3, pc, #68	; (adr r3, 801b0f0 <_strtod_l+0xbe8>)
 801b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0ae:	f7e5 fd15 	bl	8000adc <__aeabi_dcmplt>
 801b0b2:	e7b2      	b.n	801b01a <_strtod_l+0xb12>
 801b0b4:	2300      	movs	r3, #0
 801b0b6:	930a      	str	r3, [sp, #40]	; 0x28
 801b0b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b0ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b0bc:	6013      	str	r3, [r2, #0]
 801b0be:	f7ff ba6b 	b.w	801a598 <_strtod_l+0x90>
 801b0c2:	2a65      	cmp	r2, #101	; 0x65
 801b0c4:	f43f ab5f 	beq.w	801a786 <_strtod_l+0x27e>
 801b0c8:	2a45      	cmp	r2, #69	; 0x45
 801b0ca:	f43f ab5c 	beq.w	801a786 <_strtod_l+0x27e>
 801b0ce:	2301      	movs	r3, #1
 801b0d0:	f7ff bb94 	b.w	801a7fc <_strtod_l+0x2f4>
 801b0d4:	f3af 8000 	nop.w
 801b0d8:	94a03595 	.word	0x94a03595
 801b0dc:	3fdfffff 	.word	0x3fdfffff
 801b0e0:	35afe535 	.word	0x35afe535
 801b0e4:	3fe00000 	.word	0x3fe00000
 801b0e8:	ffc00000 	.word	0xffc00000
 801b0ec:	41dfffff 	.word	0x41dfffff
 801b0f0:	94a03595 	.word	0x94a03595
 801b0f4:	3fcfffff 	.word	0x3fcfffff
 801b0f8:	3ff00000 	.word	0x3ff00000
 801b0fc:	7ff00000 	.word	0x7ff00000
 801b100:	7fe00000 	.word	0x7fe00000
 801b104:	7c9fffff 	.word	0x7c9fffff
 801b108:	3fe00000 	.word	0x3fe00000
 801b10c:	bff00000 	.word	0xbff00000
 801b110:	7fefffff 	.word	0x7fefffff

0801b114 <strtod>:
 801b114:	460a      	mov	r2, r1
 801b116:	4601      	mov	r1, r0
 801b118:	4802      	ldr	r0, [pc, #8]	; (801b124 <strtod+0x10>)
 801b11a:	4b03      	ldr	r3, [pc, #12]	; (801b128 <strtod+0x14>)
 801b11c:	6800      	ldr	r0, [r0, #0]
 801b11e:	f7ff b9f3 	b.w	801a508 <_strtod_l>
 801b122:	bf00      	nop
 801b124:	20000148 	.word	0x20000148
 801b128:	200001b0 	.word	0x200001b0

0801b12c <rshift>:
 801b12c:	6903      	ldr	r3, [r0, #16]
 801b12e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801b132:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b136:	ea4f 1261 	mov.w	r2, r1, asr #5
 801b13a:	f100 0414 	add.w	r4, r0, #20
 801b13e:	dd45      	ble.n	801b1cc <rshift+0xa0>
 801b140:	f011 011f 	ands.w	r1, r1, #31
 801b144:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801b148:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801b14c:	d10c      	bne.n	801b168 <rshift+0x3c>
 801b14e:	f100 0710 	add.w	r7, r0, #16
 801b152:	4629      	mov	r1, r5
 801b154:	42b1      	cmp	r1, r6
 801b156:	d334      	bcc.n	801b1c2 <rshift+0x96>
 801b158:	1a9b      	subs	r3, r3, r2
 801b15a:	009b      	lsls	r3, r3, #2
 801b15c:	1eea      	subs	r2, r5, #3
 801b15e:	4296      	cmp	r6, r2
 801b160:	bf38      	it	cc
 801b162:	2300      	movcc	r3, #0
 801b164:	4423      	add	r3, r4
 801b166:	e015      	b.n	801b194 <rshift+0x68>
 801b168:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801b16c:	f1c1 0820 	rsb	r8, r1, #32
 801b170:	40cf      	lsrs	r7, r1
 801b172:	f105 0e04 	add.w	lr, r5, #4
 801b176:	46a1      	mov	r9, r4
 801b178:	4576      	cmp	r6, lr
 801b17a:	46f4      	mov	ip, lr
 801b17c:	d815      	bhi.n	801b1aa <rshift+0x7e>
 801b17e:	1a9a      	subs	r2, r3, r2
 801b180:	0092      	lsls	r2, r2, #2
 801b182:	3a04      	subs	r2, #4
 801b184:	3501      	adds	r5, #1
 801b186:	42ae      	cmp	r6, r5
 801b188:	bf38      	it	cc
 801b18a:	2200      	movcc	r2, #0
 801b18c:	18a3      	adds	r3, r4, r2
 801b18e:	50a7      	str	r7, [r4, r2]
 801b190:	b107      	cbz	r7, 801b194 <rshift+0x68>
 801b192:	3304      	adds	r3, #4
 801b194:	1b1a      	subs	r2, r3, r4
 801b196:	42a3      	cmp	r3, r4
 801b198:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801b19c:	bf08      	it	eq
 801b19e:	2300      	moveq	r3, #0
 801b1a0:	6102      	str	r2, [r0, #16]
 801b1a2:	bf08      	it	eq
 801b1a4:	6143      	streq	r3, [r0, #20]
 801b1a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b1aa:	f8dc c000 	ldr.w	ip, [ip]
 801b1ae:	fa0c fc08 	lsl.w	ip, ip, r8
 801b1b2:	ea4c 0707 	orr.w	r7, ip, r7
 801b1b6:	f849 7b04 	str.w	r7, [r9], #4
 801b1ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b1be:	40cf      	lsrs	r7, r1
 801b1c0:	e7da      	b.n	801b178 <rshift+0x4c>
 801b1c2:	f851 cb04 	ldr.w	ip, [r1], #4
 801b1c6:	f847 cf04 	str.w	ip, [r7, #4]!
 801b1ca:	e7c3      	b.n	801b154 <rshift+0x28>
 801b1cc:	4623      	mov	r3, r4
 801b1ce:	e7e1      	b.n	801b194 <rshift+0x68>

0801b1d0 <__hexdig_fun>:
 801b1d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801b1d4:	2b09      	cmp	r3, #9
 801b1d6:	d802      	bhi.n	801b1de <__hexdig_fun+0xe>
 801b1d8:	3820      	subs	r0, #32
 801b1da:	b2c0      	uxtb	r0, r0
 801b1dc:	4770      	bx	lr
 801b1de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801b1e2:	2b05      	cmp	r3, #5
 801b1e4:	d801      	bhi.n	801b1ea <__hexdig_fun+0x1a>
 801b1e6:	3847      	subs	r0, #71	; 0x47
 801b1e8:	e7f7      	b.n	801b1da <__hexdig_fun+0xa>
 801b1ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801b1ee:	2b05      	cmp	r3, #5
 801b1f0:	d801      	bhi.n	801b1f6 <__hexdig_fun+0x26>
 801b1f2:	3827      	subs	r0, #39	; 0x27
 801b1f4:	e7f1      	b.n	801b1da <__hexdig_fun+0xa>
 801b1f6:	2000      	movs	r0, #0
 801b1f8:	4770      	bx	lr
	...

0801b1fc <__gethex>:
 801b1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b200:	ed2d 8b02 	vpush	{d8}
 801b204:	b089      	sub	sp, #36	; 0x24
 801b206:	ee08 0a10 	vmov	s16, r0
 801b20a:	9304      	str	r3, [sp, #16]
 801b20c:	4bb4      	ldr	r3, [pc, #720]	; (801b4e0 <__gethex+0x2e4>)
 801b20e:	681b      	ldr	r3, [r3, #0]
 801b210:	9301      	str	r3, [sp, #4]
 801b212:	4618      	mov	r0, r3
 801b214:	468b      	mov	fp, r1
 801b216:	4690      	mov	r8, r2
 801b218:	f7e5 f82a 	bl	8000270 <strlen>
 801b21c:	9b01      	ldr	r3, [sp, #4]
 801b21e:	f8db 2000 	ldr.w	r2, [fp]
 801b222:	4403      	add	r3, r0
 801b224:	4682      	mov	sl, r0
 801b226:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801b22a:	9305      	str	r3, [sp, #20]
 801b22c:	1c93      	adds	r3, r2, #2
 801b22e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801b232:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801b236:	32fe      	adds	r2, #254	; 0xfe
 801b238:	18d1      	adds	r1, r2, r3
 801b23a:	461f      	mov	r7, r3
 801b23c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801b240:	9100      	str	r1, [sp, #0]
 801b242:	2830      	cmp	r0, #48	; 0x30
 801b244:	d0f8      	beq.n	801b238 <__gethex+0x3c>
 801b246:	f7ff ffc3 	bl	801b1d0 <__hexdig_fun>
 801b24a:	4604      	mov	r4, r0
 801b24c:	2800      	cmp	r0, #0
 801b24e:	d13a      	bne.n	801b2c6 <__gethex+0xca>
 801b250:	9901      	ldr	r1, [sp, #4]
 801b252:	4652      	mov	r2, sl
 801b254:	4638      	mov	r0, r7
 801b256:	f000 ffd7 	bl	801c208 <strncmp>
 801b25a:	4605      	mov	r5, r0
 801b25c:	2800      	cmp	r0, #0
 801b25e:	d168      	bne.n	801b332 <__gethex+0x136>
 801b260:	f817 000a 	ldrb.w	r0, [r7, sl]
 801b264:	eb07 060a 	add.w	r6, r7, sl
 801b268:	f7ff ffb2 	bl	801b1d0 <__hexdig_fun>
 801b26c:	2800      	cmp	r0, #0
 801b26e:	d062      	beq.n	801b336 <__gethex+0x13a>
 801b270:	4633      	mov	r3, r6
 801b272:	7818      	ldrb	r0, [r3, #0]
 801b274:	2830      	cmp	r0, #48	; 0x30
 801b276:	461f      	mov	r7, r3
 801b278:	f103 0301 	add.w	r3, r3, #1
 801b27c:	d0f9      	beq.n	801b272 <__gethex+0x76>
 801b27e:	f7ff ffa7 	bl	801b1d0 <__hexdig_fun>
 801b282:	2301      	movs	r3, #1
 801b284:	fab0 f480 	clz	r4, r0
 801b288:	0964      	lsrs	r4, r4, #5
 801b28a:	4635      	mov	r5, r6
 801b28c:	9300      	str	r3, [sp, #0]
 801b28e:	463a      	mov	r2, r7
 801b290:	4616      	mov	r6, r2
 801b292:	3201      	adds	r2, #1
 801b294:	7830      	ldrb	r0, [r6, #0]
 801b296:	f7ff ff9b 	bl	801b1d0 <__hexdig_fun>
 801b29a:	2800      	cmp	r0, #0
 801b29c:	d1f8      	bne.n	801b290 <__gethex+0x94>
 801b29e:	9901      	ldr	r1, [sp, #4]
 801b2a0:	4652      	mov	r2, sl
 801b2a2:	4630      	mov	r0, r6
 801b2a4:	f000 ffb0 	bl	801c208 <strncmp>
 801b2a8:	b980      	cbnz	r0, 801b2cc <__gethex+0xd0>
 801b2aa:	b94d      	cbnz	r5, 801b2c0 <__gethex+0xc4>
 801b2ac:	eb06 050a 	add.w	r5, r6, sl
 801b2b0:	462a      	mov	r2, r5
 801b2b2:	4616      	mov	r6, r2
 801b2b4:	3201      	adds	r2, #1
 801b2b6:	7830      	ldrb	r0, [r6, #0]
 801b2b8:	f7ff ff8a 	bl	801b1d0 <__hexdig_fun>
 801b2bc:	2800      	cmp	r0, #0
 801b2be:	d1f8      	bne.n	801b2b2 <__gethex+0xb6>
 801b2c0:	1bad      	subs	r5, r5, r6
 801b2c2:	00ad      	lsls	r5, r5, #2
 801b2c4:	e004      	b.n	801b2d0 <__gethex+0xd4>
 801b2c6:	2400      	movs	r4, #0
 801b2c8:	4625      	mov	r5, r4
 801b2ca:	e7e0      	b.n	801b28e <__gethex+0x92>
 801b2cc:	2d00      	cmp	r5, #0
 801b2ce:	d1f7      	bne.n	801b2c0 <__gethex+0xc4>
 801b2d0:	7833      	ldrb	r3, [r6, #0]
 801b2d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b2d6:	2b50      	cmp	r3, #80	; 0x50
 801b2d8:	d13b      	bne.n	801b352 <__gethex+0x156>
 801b2da:	7873      	ldrb	r3, [r6, #1]
 801b2dc:	2b2b      	cmp	r3, #43	; 0x2b
 801b2de:	d02c      	beq.n	801b33a <__gethex+0x13e>
 801b2e0:	2b2d      	cmp	r3, #45	; 0x2d
 801b2e2:	d02e      	beq.n	801b342 <__gethex+0x146>
 801b2e4:	1c71      	adds	r1, r6, #1
 801b2e6:	f04f 0900 	mov.w	r9, #0
 801b2ea:	7808      	ldrb	r0, [r1, #0]
 801b2ec:	f7ff ff70 	bl	801b1d0 <__hexdig_fun>
 801b2f0:	1e43      	subs	r3, r0, #1
 801b2f2:	b2db      	uxtb	r3, r3
 801b2f4:	2b18      	cmp	r3, #24
 801b2f6:	d82c      	bhi.n	801b352 <__gethex+0x156>
 801b2f8:	f1a0 0210 	sub.w	r2, r0, #16
 801b2fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801b300:	f7ff ff66 	bl	801b1d0 <__hexdig_fun>
 801b304:	1e43      	subs	r3, r0, #1
 801b306:	b2db      	uxtb	r3, r3
 801b308:	2b18      	cmp	r3, #24
 801b30a:	d91d      	bls.n	801b348 <__gethex+0x14c>
 801b30c:	f1b9 0f00 	cmp.w	r9, #0
 801b310:	d000      	beq.n	801b314 <__gethex+0x118>
 801b312:	4252      	negs	r2, r2
 801b314:	4415      	add	r5, r2
 801b316:	f8cb 1000 	str.w	r1, [fp]
 801b31a:	b1e4      	cbz	r4, 801b356 <__gethex+0x15a>
 801b31c:	9b00      	ldr	r3, [sp, #0]
 801b31e:	2b00      	cmp	r3, #0
 801b320:	bf14      	ite	ne
 801b322:	2700      	movne	r7, #0
 801b324:	2706      	moveq	r7, #6
 801b326:	4638      	mov	r0, r7
 801b328:	b009      	add	sp, #36	; 0x24
 801b32a:	ecbd 8b02 	vpop	{d8}
 801b32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b332:	463e      	mov	r6, r7
 801b334:	4625      	mov	r5, r4
 801b336:	2401      	movs	r4, #1
 801b338:	e7ca      	b.n	801b2d0 <__gethex+0xd4>
 801b33a:	f04f 0900 	mov.w	r9, #0
 801b33e:	1cb1      	adds	r1, r6, #2
 801b340:	e7d3      	b.n	801b2ea <__gethex+0xee>
 801b342:	f04f 0901 	mov.w	r9, #1
 801b346:	e7fa      	b.n	801b33e <__gethex+0x142>
 801b348:	230a      	movs	r3, #10
 801b34a:	fb03 0202 	mla	r2, r3, r2, r0
 801b34e:	3a10      	subs	r2, #16
 801b350:	e7d4      	b.n	801b2fc <__gethex+0x100>
 801b352:	4631      	mov	r1, r6
 801b354:	e7df      	b.n	801b316 <__gethex+0x11a>
 801b356:	1bf3      	subs	r3, r6, r7
 801b358:	3b01      	subs	r3, #1
 801b35a:	4621      	mov	r1, r4
 801b35c:	2b07      	cmp	r3, #7
 801b35e:	dc0b      	bgt.n	801b378 <__gethex+0x17c>
 801b360:	ee18 0a10 	vmov	r0, s16
 801b364:	f000 fa70 	bl	801b848 <_Balloc>
 801b368:	4604      	mov	r4, r0
 801b36a:	b940      	cbnz	r0, 801b37e <__gethex+0x182>
 801b36c:	4b5d      	ldr	r3, [pc, #372]	; (801b4e4 <__gethex+0x2e8>)
 801b36e:	4602      	mov	r2, r0
 801b370:	21de      	movs	r1, #222	; 0xde
 801b372:	485d      	ldr	r0, [pc, #372]	; (801b4e8 <__gethex+0x2ec>)
 801b374:	f000 ff6a 	bl	801c24c <__assert_func>
 801b378:	3101      	adds	r1, #1
 801b37a:	105b      	asrs	r3, r3, #1
 801b37c:	e7ee      	b.n	801b35c <__gethex+0x160>
 801b37e:	f100 0914 	add.w	r9, r0, #20
 801b382:	f04f 0b00 	mov.w	fp, #0
 801b386:	f1ca 0301 	rsb	r3, sl, #1
 801b38a:	f8cd 9008 	str.w	r9, [sp, #8]
 801b38e:	f8cd b000 	str.w	fp, [sp]
 801b392:	9306      	str	r3, [sp, #24]
 801b394:	42b7      	cmp	r7, r6
 801b396:	d340      	bcc.n	801b41a <__gethex+0x21e>
 801b398:	9802      	ldr	r0, [sp, #8]
 801b39a:	9b00      	ldr	r3, [sp, #0]
 801b39c:	f840 3b04 	str.w	r3, [r0], #4
 801b3a0:	eba0 0009 	sub.w	r0, r0, r9
 801b3a4:	1080      	asrs	r0, r0, #2
 801b3a6:	0146      	lsls	r6, r0, #5
 801b3a8:	6120      	str	r0, [r4, #16]
 801b3aa:	4618      	mov	r0, r3
 801b3ac:	f000 fb3e 	bl	801ba2c <__hi0bits>
 801b3b0:	1a30      	subs	r0, r6, r0
 801b3b2:	f8d8 6000 	ldr.w	r6, [r8]
 801b3b6:	42b0      	cmp	r0, r6
 801b3b8:	dd63      	ble.n	801b482 <__gethex+0x286>
 801b3ba:	1b87      	subs	r7, r0, r6
 801b3bc:	4639      	mov	r1, r7
 801b3be:	4620      	mov	r0, r4
 801b3c0:	f000 fee2 	bl	801c188 <__any_on>
 801b3c4:	4682      	mov	sl, r0
 801b3c6:	b1a8      	cbz	r0, 801b3f4 <__gethex+0x1f8>
 801b3c8:	1e7b      	subs	r3, r7, #1
 801b3ca:	1159      	asrs	r1, r3, #5
 801b3cc:	f003 021f 	and.w	r2, r3, #31
 801b3d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801b3d4:	f04f 0a01 	mov.w	sl, #1
 801b3d8:	fa0a f202 	lsl.w	r2, sl, r2
 801b3dc:	420a      	tst	r2, r1
 801b3de:	d009      	beq.n	801b3f4 <__gethex+0x1f8>
 801b3e0:	4553      	cmp	r3, sl
 801b3e2:	dd05      	ble.n	801b3f0 <__gethex+0x1f4>
 801b3e4:	1eb9      	subs	r1, r7, #2
 801b3e6:	4620      	mov	r0, r4
 801b3e8:	f000 fece 	bl	801c188 <__any_on>
 801b3ec:	2800      	cmp	r0, #0
 801b3ee:	d145      	bne.n	801b47c <__gethex+0x280>
 801b3f0:	f04f 0a02 	mov.w	sl, #2
 801b3f4:	4639      	mov	r1, r7
 801b3f6:	4620      	mov	r0, r4
 801b3f8:	f7ff fe98 	bl	801b12c <rshift>
 801b3fc:	443d      	add	r5, r7
 801b3fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b402:	42ab      	cmp	r3, r5
 801b404:	da4c      	bge.n	801b4a0 <__gethex+0x2a4>
 801b406:	ee18 0a10 	vmov	r0, s16
 801b40a:	4621      	mov	r1, r4
 801b40c:	f000 fa5c 	bl	801b8c8 <_Bfree>
 801b410:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b412:	2300      	movs	r3, #0
 801b414:	6013      	str	r3, [r2, #0]
 801b416:	27a3      	movs	r7, #163	; 0xa3
 801b418:	e785      	b.n	801b326 <__gethex+0x12a>
 801b41a:	1e73      	subs	r3, r6, #1
 801b41c:	9a05      	ldr	r2, [sp, #20]
 801b41e:	9303      	str	r3, [sp, #12]
 801b420:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b424:	4293      	cmp	r3, r2
 801b426:	d019      	beq.n	801b45c <__gethex+0x260>
 801b428:	f1bb 0f20 	cmp.w	fp, #32
 801b42c:	d107      	bne.n	801b43e <__gethex+0x242>
 801b42e:	9b02      	ldr	r3, [sp, #8]
 801b430:	9a00      	ldr	r2, [sp, #0]
 801b432:	f843 2b04 	str.w	r2, [r3], #4
 801b436:	9302      	str	r3, [sp, #8]
 801b438:	2300      	movs	r3, #0
 801b43a:	9300      	str	r3, [sp, #0]
 801b43c:	469b      	mov	fp, r3
 801b43e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801b442:	f7ff fec5 	bl	801b1d0 <__hexdig_fun>
 801b446:	9b00      	ldr	r3, [sp, #0]
 801b448:	f000 000f 	and.w	r0, r0, #15
 801b44c:	fa00 f00b 	lsl.w	r0, r0, fp
 801b450:	4303      	orrs	r3, r0
 801b452:	9300      	str	r3, [sp, #0]
 801b454:	f10b 0b04 	add.w	fp, fp, #4
 801b458:	9b03      	ldr	r3, [sp, #12]
 801b45a:	e00d      	b.n	801b478 <__gethex+0x27c>
 801b45c:	9b03      	ldr	r3, [sp, #12]
 801b45e:	9a06      	ldr	r2, [sp, #24]
 801b460:	4413      	add	r3, r2
 801b462:	42bb      	cmp	r3, r7
 801b464:	d3e0      	bcc.n	801b428 <__gethex+0x22c>
 801b466:	4618      	mov	r0, r3
 801b468:	9901      	ldr	r1, [sp, #4]
 801b46a:	9307      	str	r3, [sp, #28]
 801b46c:	4652      	mov	r2, sl
 801b46e:	f000 fecb 	bl	801c208 <strncmp>
 801b472:	9b07      	ldr	r3, [sp, #28]
 801b474:	2800      	cmp	r0, #0
 801b476:	d1d7      	bne.n	801b428 <__gethex+0x22c>
 801b478:	461e      	mov	r6, r3
 801b47a:	e78b      	b.n	801b394 <__gethex+0x198>
 801b47c:	f04f 0a03 	mov.w	sl, #3
 801b480:	e7b8      	b.n	801b3f4 <__gethex+0x1f8>
 801b482:	da0a      	bge.n	801b49a <__gethex+0x29e>
 801b484:	1a37      	subs	r7, r6, r0
 801b486:	4621      	mov	r1, r4
 801b488:	ee18 0a10 	vmov	r0, s16
 801b48c:	463a      	mov	r2, r7
 801b48e:	f000 fc37 	bl	801bd00 <__lshift>
 801b492:	1bed      	subs	r5, r5, r7
 801b494:	4604      	mov	r4, r0
 801b496:	f100 0914 	add.w	r9, r0, #20
 801b49a:	f04f 0a00 	mov.w	sl, #0
 801b49e:	e7ae      	b.n	801b3fe <__gethex+0x202>
 801b4a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b4a4:	42a8      	cmp	r0, r5
 801b4a6:	dd72      	ble.n	801b58e <__gethex+0x392>
 801b4a8:	1b45      	subs	r5, r0, r5
 801b4aa:	42ae      	cmp	r6, r5
 801b4ac:	dc36      	bgt.n	801b51c <__gethex+0x320>
 801b4ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b4b2:	2b02      	cmp	r3, #2
 801b4b4:	d02a      	beq.n	801b50c <__gethex+0x310>
 801b4b6:	2b03      	cmp	r3, #3
 801b4b8:	d02c      	beq.n	801b514 <__gethex+0x318>
 801b4ba:	2b01      	cmp	r3, #1
 801b4bc:	d11c      	bne.n	801b4f8 <__gethex+0x2fc>
 801b4be:	42ae      	cmp	r6, r5
 801b4c0:	d11a      	bne.n	801b4f8 <__gethex+0x2fc>
 801b4c2:	2e01      	cmp	r6, #1
 801b4c4:	d112      	bne.n	801b4ec <__gethex+0x2f0>
 801b4c6:	9a04      	ldr	r2, [sp, #16]
 801b4c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b4cc:	6013      	str	r3, [r2, #0]
 801b4ce:	2301      	movs	r3, #1
 801b4d0:	6123      	str	r3, [r4, #16]
 801b4d2:	f8c9 3000 	str.w	r3, [r9]
 801b4d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b4d8:	2762      	movs	r7, #98	; 0x62
 801b4da:	601c      	str	r4, [r3, #0]
 801b4dc:	e723      	b.n	801b326 <__gethex+0x12a>
 801b4de:	bf00      	nop
 801b4e0:	08031400 	.word	0x08031400
 801b4e4:	08031388 	.word	0x08031388
 801b4e8:	08031399 	.word	0x08031399
 801b4ec:	1e71      	subs	r1, r6, #1
 801b4ee:	4620      	mov	r0, r4
 801b4f0:	f000 fe4a 	bl	801c188 <__any_on>
 801b4f4:	2800      	cmp	r0, #0
 801b4f6:	d1e6      	bne.n	801b4c6 <__gethex+0x2ca>
 801b4f8:	ee18 0a10 	vmov	r0, s16
 801b4fc:	4621      	mov	r1, r4
 801b4fe:	f000 f9e3 	bl	801b8c8 <_Bfree>
 801b502:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b504:	2300      	movs	r3, #0
 801b506:	6013      	str	r3, [r2, #0]
 801b508:	2750      	movs	r7, #80	; 0x50
 801b50a:	e70c      	b.n	801b326 <__gethex+0x12a>
 801b50c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d1f2      	bne.n	801b4f8 <__gethex+0x2fc>
 801b512:	e7d8      	b.n	801b4c6 <__gethex+0x2ca>
 801b514:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b516:	2b00      	cmp	r3, #0
 801b518:	d1d5      	bne.n	801b4c6 <__gethex+0x2ca>
 801b51a:	e7ed      	b.n	801b4f8 <__gethex+0x2fc>
 801b51c:	1e6f      	subs	r7, r5, #1
 801b51e:	f1ba 0f00 	cmp.w	sl, #0
 801b522:	d131      	bne.n	801b588 <__gethex+0x38c>
 801b524:	b127      	cbz	r7, 801b530 <__gethex+0x334>
 801b526:	4639      	mov	r1, r7
 801b528:	4620      	mov	r0, r4
 801b52a:	f000 fe2d 	bl	801c188 <__any_on>
 801b52e:	4682      	mov	sl, r0
 801b530:	117b      	asrs	r3, r7, #5
 801b532:	2101      	movs	r1, #1
 801b534:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801b538:	f007 071f 	and.w	r7, r7, #31
 801b53c:	fa01 f707 	lsl.w	r7, r1, r7
 801b540:	421f      	tst	r7, r3
 801b542:	4629      	mov	r1, r5
 801b544:	4620      	mov	r0, r4
 801b546:	bf18      	it	ne
 801b548:	f04a 0a02 	orrne.w	sl, sl, #2
 801b54c:	1b76      	subs	r6, r6, r5
 801b54e:	f7ff fded 	bl	801b12c <rshift>
 801b552:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b556:	2702      	movs	r7, #2
 801b558:	f1ba 0f00 	cmp.w	sl, #0
 801b55c:	d048      	beq.n	801b5f0 <__gethex+0x3f4>
 801b55e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b562:	2b02      	cmp	r3, #2
 801b564:	d015      	beq.n	801b592 <__gethex+0x396>
 801b566:	2b03      	cmp	r3, #3
 801b568:	d017      	beq.n	801b59a <__gethex+0x39e>
 801b56a:	2b01      	cmp	r3, #1
 801b56c:	d109      	bne.n	801b582 <__gethex+0x386>
 801b56e:	f01a 0f02 	tst.w	sl, #2
 801b572:	d006      	beq.n	801b582 <__gethex+0x386>
 801b574:	f8d9 0000 	ldr.w	r0, [r9]
 801b578:	ea4a 0a00 	orr.w	sl, sl, r0
 801b57c:	f01a 0f01 	tst.w	sl, #1
 801b580:	d10e      	bne.n	801b5a0 <__gethex+0x3a4>
 801b582:	f047 0710 	orr.w	r7, r7, #16
 801b586:	e033      	b.n	801b5f0 <__gethex+0x3f4>
 801b588:	f04f 0a01 	mov.w	sl, #1
 801b58c:	e7d0      	b.n	801b530 <__gethex+0x334>
 801b58e:	2701      	movs	r7, #1
 801b590:	e7e2      	b.n	801b558 <__gethex+0x35c>
 801b592:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b594:	f1c3 0301 	rsb	r3, r3, #1
 801b598:	9315      	str	r3, [sp, #84]	; 0x54
 801b59a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d0f0      	beq.n	801b582 <__gethex+0x386>
 801b5a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b5a4:	f104 0314 	add.w	r3, r4, #20
 801b5a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801b5ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801b5b0:	f04f 0c00 	mov.w	ip, #0
 801b5b4:	4618      	mov	r0, r3
 801b5b6:	f853 2b04 	ldr.w	r2, [r3], #4
 801b5ba:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b5be:	d01c      	beq.n	801b5fa <__gethex+0x3fe>
 801b5c0:	3201      	adds	r2, #1
 801b5c2:	6002      	str	r2, [r0, #0]
 801b5c4:	2f02      	cmp	r7, #2
 801b5c6:	f104 0314 	add.w	r3, r4, #20
 801b5ca:	d13f      	bne.n	801b64c <__gethex+0x450>
 801b5cc:	f8d8 2000 	ldr.w	r2, [r8]
 801b5d0:	3a01      	subs	r2, #1
 801b5d2:	42b2      	cmp	r2, r6
 801b5d4:	d10a      	bne.n	801b5ec <__gethex+0x3f0>
 801b5d6:	1171      	asrs	r1, r6, #5
 801b5d8:	2201      	movs	r2, #1
 801b5da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b5de:	f006 061f 	and.w	r6, r6, #31
 801b5e2:	fa02 f606 	lsl.w	r6, r2, r6
 801b5e6:	421e      	tst	r6, r3
 801b5e8:	bf18      	it	ne
 801b5ea:	4617      	movne	r7, r2
 801b5ec:	f047 0720 	orr.w	r7, r7, #32
 801b5f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b5f2:	601c      	str	r4, [r3, #0]
 801b5f4:	9b04      	ldr	r3, [sp, #16]
 801b5f6:	601d      	str	r5, [r3, #0]
 801b5f8:	e695      	b.n	801b326 <__gethex+0x12a>
 801b5fa:	4299      	cmp	r1, r3
 801b5fc:	f843 cc04 	str.w	ip, [r3, #-4]
 801b600:	d8d8      	bhi.n	801b5b4 <__gethex+0x3b8>
 801b602:	68a3      	ldr	r3, [r4, #8]
 801b604:	459b      	cmp	fp, r3
 801b606:	db19      	blt.n	801b63c <__gethex+0x440>
 801b608:	6861      	ldr	r1, [r4, #4]
 801b60a:	ee18 0a10 	vmov	r0, s16
 801b60e:	3101      	adds	r1, #1
 801b610:	f000 f91a 	bl	801b848 <_Balloc>
 801b614:	4681      	mov	r9, r0
 801b616:	b918      	cbnz	r0, 801b620 <__gethex+0x424>
 801b618:	4b1a      	ldr	r3, [pc, #104]	; (801b684 <__gethex+0x488>)
 801b61a:	4602      	mov	r2, r0
 801b61c:	2184      	movs	r1, #132	; 0x84
 801b61e:	e6a8      	b.n	801b372 <__gethex+0x176>
 801b620:	6922      	ldr	r2, [r4, #16]
 801b622:	3202      	adds	r2, #2
 801b624:	f104 010c 	add.w	r1, r4, #12
 801b628:	0092      	lsls	r2, r2, #2
 801b62a:	300c      	adds	r0, #12
 801b62c:	f7fe fdda 	bl	801a1e4 <memcpy>
 801b630:	4621      	mov	r1, r4
 801b632:	ee18 0a10 	vmov	r0, s16
 801b636:	f000 f947 	bl	801b8c8 <_Bfree>
 801b63a:	464c      	mov	r4, r9
 801b63c:	6923      	ldr	r3, [r4, #16]
 801b63e:	1c5a      	adds	r2, r3, #1
 801b640:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b644:	6122      	str	r2, [r4, #16]
 801b646:	2201      	movs	r2, #1
 801b648:	615a      	str	r2, [r3, #20]
 801b64a:	e7bb      	b.n	801b5c4 <__gethex+0x3c8>
 801b64c:	6922      	ldr	r2, [r4, #16]
 801b64e:	455a      	cmp	r2, fp
 801b650:	dd0b      	ble.n	801b66a <__gethex+0x46e>
 801b652:	2101      	movs	r1, #1
 801b654:	4620      	mov	r0, r4
 801b656:	f7ff fd69 	bl	801b12c <rshift>
 801b65a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b65e:	3501      	adds	r5, #1
 801b660:	42ab      	cmp	r3, r5
 801b662:	f6ff aed0 	blt.w	801b406 <__gethex+0x20a>
 801b666:	2701      	movs	r7, #1
 801b668:	e7c0      	b.n	801b5ec <__gethex+0x3f0>
 801b66a:	f016 061f 	ands.w	r6, r6, #31
 801b66e:	d0fa      	beq.n	801b666 <__gethex+0x46a>
 801b670:	4453      	add	r3, sl
 801b672:	f1c6 0620 	rsb	r6, r6, #32
 801b676:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801b67a:	f000 f9d7 	bl	801ba2c <__hi0bits>
 801b67e:	42b0      	cmp	r0, r6
 801b680:	dbe7      	blt.n	801b652 <__gethex+0x456>
 801b682:	e7f0      	b.n	801b666 <__gethex+0x46a>
 801b684:	08031388 	.word	0x08031388

0801b688 <L_shift>:
 801b688:	f1c2 0208 	rsb	r2, r2, #8
 801b68c:	0092      	lsls	r2, r2, #2
 801b68e:	b570      	push	{r4, r5, r6, lr}
 801b690:	f1c2 0620 	rsb	r6, r2, #32
 801b694:	6843      	ldr	r3, [r0, #4]
 801b696:	6804      	ldr	r4, [r0, #0]
 801b698:	fa03 f506 	lsl.w	r5, r3, r6
 801b69c:	432c      	orrs	r4, r5
 801b69e:	40d3      	lsrs	r3, r2
 801b6a0:	6004      	str	r4, [r0, #0]
 801b6a2:	f840 3f04 	str.w	r3, [r0, #4]!
 801b6a6:	4288      	cmp	r0, r1
 801b6a8:	d3f4      	bcc.n	801b694 <L_shift+0xc>
 801b6aa:	bd70      	pop	{r4, r5, r6, pc}

0801b6ac <__match>:
 801b6ac:	b530      	push	{r4, r5, lr}
 801b6ae:	6803      	ldr	r3, [r0, #0]
 801b6b0:	3301      	adds	r3, #1
 801b6b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b6b6:	b914      	cbnz	r4, 801b6be <__match+0x12>
 801b6b8:	6003      	str	r3, [r0, #0]
 801b6ba:	2001      	movs	r0, #1
 801b6bc:	bd30      	pop	{r4, r5, pc}
 801b6be:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b6c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801b6c6:	2d19      	cmp	r5, #25
 801b6c8:	bf98      	it	ls
 801b6ca:	3220      	addls	r2, #32
 801b6cc:	42a2      	cmp	r2, r4
 801b6ce:	d0f0      	beq.n	801b6b2 <__match+0x6>
 801b6d0:	2000      	movs	r0, #0
 801b6d2:	e7f3      	b.n	801b6bc <__match+0x10>

0801b6d4 <__hexnan>:
 801b6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6d8:	680b      	ldr	r3, [r1, #0]
 801b6da:	115e      	asrs	r6, r3, #5
 801b6dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801b6e0:	f013 031f 	ands.w	r3, r3, #31
 801b6e4:	b087      	sub	sp, #28
 801b6e6:	bf18      	it	ne
 801b6e8:	3604      	addne	r6, #4
 801b6ea:	2500      	movs	r5, #0
 801b6ec:	1f37      	subs	r7, r6, #4
 801b6ee:	4690      	mov	r8, r2
 801b6f0:	6802      	ldr	r2, [r0, #0]
 801b6f2:	9301      	str	r3, [sp, #4]
 801b6f4:	4682      	mov	sl, r0
 801b6f6:	f846 5c04 	str.w	r5, [r6, #-4]
 801b6fa:	46b9      	mov	r9, r7
 801b6fc:	463c      	mov	r4, r7
 801b6fe:	9502      	str	r5, [sp, #8]
 801b700:	46ab      	mov	fp, r5
 801b702:	7851      	ldrb	r1, [r2, #1]
 801b704:	1c53      	adds	r3, r2, #1
 801b706:	9303      	str	r3, [sp, #12]
 801b708:	b341      	cbz	r1, 801b75c <__hexnan+0x88>
 801b70a:	4608      	mov	r0, r1
 801b70c:	9205      	str	r2, [sp, #20]
 801b70e:	9104      	str	r1, [sp, #16]
 801b710:	f7ff fd5e 	bl	801b1d0 <__hexdig_fun>
 801b714:	2800      	cmp	r0, #0
 801b716:	d14f      	bne.n	801b7b8 <__hexnan+0xe4>
 801b718:	9904      	ldr	r1, [sp, #16]
 801b71a:	9a05      	ldr	r2, [sp, #20]
 801b71c:	2920      	cmp	r1, #32
 801b71e:	d818      	bhi.n	801b752 <__hexnan+0x7e>
 801b720:	9b02      	ldr	r3, [sp, #8]
 801b722:	459b      	cmp	fp, r3
 801b724:	dd13      	ble.n	801b74e <__hexnan+0x7a>
 801b726:	454c      	cmp	r4, r9
 801b728:	d206      	bcs.n	801b738 <__hexnan+0x64>
 801b72a:	2d07      	cmp	r5, #7
 801b72c:	dc04      	bgt.n	801b738 <__hexnan+0x64>
 801b72e:	462a      	mov	r2, r5
 801b730:	4649      	mov	r1, r9
 801b732:	4620      	mov	r0, r4
 801b734:	f7ff ffa8 	bl	801b688 <L_shift>
 801b738:	4544      	cmp	r4, r8
 801b73a:	d950      	bls.n	801b7de <__hexnan+0x10a>
 801b73c:	2300      	movs	r3, #0
 801b73e:	f1a4 0904 	sub.w	r9, r4, #4
 801b742:	f844 3c04 	str.w	r3, [r4, #-4]
 801b746:	f8cd b008 	str.w	fp, [sp, #8]
 801b74a:	464c      	mov	r4, r9
 801b74c:	461d      	mov	r5, r3
 801b74e:	9a03      	ldr	r2, [sp, #12]
 801b750:	e7d7      	b.n	801b702 <__hexnan+0x2e>
 801b752:	2929      	cmp	r1, #41	; 0x29
 801b754:	d156      	bne.n	801b804 <__hexnan+0x130>
 801b756:	3202      	adds	r2, #2
 801b758:	f8ca 2000 	str.w	r2, [sl]
 801b75c:	f1bb 0f00 	cmp.w	fp, #0
 801b760:	d050      	beq.n	801b804 <__hexnan+0x130>
 801b762:	454c      	cmp	r4, r9
 801b764:	d206      	bcs.n	801b774 <__hexnan+0xa0>
 801b766:	2d07      	cmp	r5, #7
 801b768:	dc04      	bgt.n	801b774 <__hexnan+0xa0>
 801b76a:	462a      	mov	r2, r5
 801b76c:	4649      	mov	r1, r9
 801b76e:	4620      	mov	r0, r4
 801b770:	f7ff ff8a 	bl	801b688 <L_shift>
 801b774:	4544      	cmp	r4, r8
 801b776:	d934      	bls.n	801b7e2 <__hexnan+0x10e>
 801b778:	f1a8 0204 	sub.w	r2, r8, #4
 801b77c:	4623      	mov	r3, r4
 801b77e:	f853 1b04 	ldr.w	r1, [r3], #4
 801b782:	f842 1f04 	str.w	r1, [r2, #4]!
 801b786:	429f      	cmp	r7, r3
 801b788:	d2f9      	bcs.n	801b77e <__hexnan+0xaa>
 801b78a:	1b3b      	subs	r3, r7, r4
 801b78c:	f023 0303 	bic.w	r3, r3, #3
 801b790:	3304      	adds	r3, #4
 801b792:	3401      	adds	r4, #1
 801b794:	3e03      	subs	r6, #3
 801b796:	42b4      	cmp	r4, r6
 801b798:	bf88      	it	hi
 801b79a:	2304      	movhi	r3, #4
 801b79c:	4443      	add	r3, r8
 801b79e:	2200      	movs	r2, #0
 801b7a0:	f843 2b04 	str.w	r2, [r3], #4
 801b7a4:	429f      	cmp	r7, r3
 801b7a6:	d2fb      	bcs.n	801b7a0 <__hexnan+0xcc>
 801b7a8:	683b      	ldr	r3, [r7, #0]
 801b7aa:	b91b      	cbnz	r3, 801b7b4 <__hexnan+0xe0>
 801b7ac:	4547      	cmp	r7, r8
 801b7ae:	d127      	bne.n	801b800 <__hexnan+0x12c>
 801b7b0:	2301      	movs	r3, #1
 801b7b2:	603b      	str	r3, [r7, #0]
 801b7b4:	2005      	movs	r0, #5
 801b7b6:	e026      	b.n	801b806 <__hexnan+0x132>
 801b7b8:	3501      	adds	r5, #1
 801b7ba:	2d08      	cmp	r5, #8
 801b7bc:	f10b 0b01 	add.w	fp, fp, #1
 801b7c0:	dd06      	ble.n	801b7d0 <__hexnan+0xfc>
 801b7c2:	4544      	cmp	r4, r8
 801b7c4:	d9c3      	bls.n	801b74e <__hexnan+0x7a>
 801b7c6:	2300      	movs	r3, #0
 801b7c8:	f844 3c04 	str.w	r3, [r4, #-4]
 801b7cc:	2501      	movs	r5, #1
 801b7ce:	3c04      	subs	r4, #4
 801b7d0:	6822      	ldr	r2, [r4, #0]
 801b7d2:	f000 000f 	and.w	r0, r0, #15
 801b7d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801b7da:	6022      	str	r2, [r4, #0]
 801b7dc:	e7b7      	b.n	801b74e <__hexnan+0x7a>
 801b7de:	2508      	movs	r5, #8
 801b7e0:	e7b5      	b.n	801b74e <__hexnan+0x7a>
 801b7e2:	9b01      	ldr	r3, [sp, #4]
 801b7e4:	2b00      	cmp	r3, #0
 801b7e6:	d0df      	beq.n	801b7a8 <__hexnan+0xd4>
 801b7e8:	f04f 32ff 	mov.w	r2, #4294967295
 801b7ec:	f1c3 0320 	rsb	r3, r3, #32
 801b7f0:	fa22 f303 	lsr.w	r3, r2, r3
 801b7f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801b7f8:	401a      	ands	r2, r3
 801b7fa:	f846 2c04 	str.w	r2, [r6, #-4]
 801b7fe:	e7d3      	b.n	801b7a8 <__hexnan+0xd4>
 801b800:	3f04      	subs	r7, #4
 801b802:	e7d1      	b.n	801b7a8 <__hexnan+0xd4>
 801b804:	2004      	movs	r0, #4
 801b806:	b007      	add	sp, #28
 801b808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b80c <__ascii_mbtowc>:
 801b80c:	b082      	sub	sp, #8
 801b80e:	b901      	cbnz	r1, 801b812 <__ascii_mbtowc+0x6>
 801b810:	a901      	add	r1, sp, #4
 801b812:	b142      	cbz	r2, 801b826 <__ascii_mbtowc+0x1a>
 801b814:	b14b      	cbz	r3, 801b82a <__ascii_mbtowc+0x1e>
 801b816:	7813      	ldrb	r3, [r2, #0]
 801b818:	600b      	str	r3, [r1, #0]
 801b81a:	7812      	ldrb	r2, [r2, #0]
 801b81c:	1e10      	subs	r0, r2, #0
 801b81e:	bf18      	it	ne
 801b820:	2001      	movne	r0, #1
 801b822:	b002      	add	sp, #8
 801b824:	4770      	bx	lr
 801b826:	4610      	mov	r0, r2
 801b828:	e7fb      	b.n	801b822 <__ascii_mbtowc+0x16>
 801b82a:	f06f 0001 	mvn.w	r0, #1
 801b82e:	e7f8      	b.n	801b822 <__ascii_mbtowc+0x16>

0801b830 <__malloc_lock>:
 801b830:	4801      	ldr	r0, [pc, #4]	; (801b838 <__malloc_lock+0x8>)
 801b832:	f000 bd3c 	b.w	801c2ae <__retarget_lock_acquire_recursive>
 801b836:	bf00      	nop
 801b838:	2000e1e4 	.word	0x2000e1e4

0801b83c <__malloc_unlock>:
 801b83c:	4801      	ldr	r0, [pc, #4]	; (801b844 <__malloc_unlock+0x8>)
 801b83e:	f000 bd37 	b.w	801c2b0 <__retarget_lock_release_recursive>
 801b842:	bf00      	nop
 801b844:	2000e1e4 	.word	0x2000e1e4

0801b848 <_Balloc>:
 801b848:	b570      	push	{r4, r5, r6, lr}
 801b84a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b84c:	4604      	mov	r4, r0
 801b84e:	460d      	mov	r5, r1
 801b850:	b976      	cbnz	r6, 801b870 <_Balloc+0x28>
 801b852:	2010      	movs	r0, #16
 801b854:	f7fe fcb6 	bl	801a1c4 <malloc>
 801b858:	4602      	mov	r2, r0
 801b85a:	6260      	str	r0, [r4, #36]	; 0x24
 801b85c:	b920      	cbnz	r0, 801b868 <_Balloc+0x20>
 801b85e:	4b18      	ldr	r3, [pc, #96]	; (801b8c0 <_Balloc+0x78>)
 801b860:	4818      	ldr	r0, [pc, #96]	; (801b8c4 <_Balloc+0x7c>)
 801b862:	2166      	movs	r1, #102	; 0x66
 801b864:	f000 fcf2 	bl	801c24c <__assert_func>
 801b868:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b86c:	6006      	str	r6, [r0, #0]
 801b86e:	60c6      	str	r6, [r0, #12]
 801b870:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b872:	68f3      	ldr	r3, [r6, #12]
 801b874:	b183      	cbz	r3, 801b898 <_Balloc+0x50>
 801b876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b878:	68db      	ldr	r3, [r3, #12]
 801b87a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b87e:	b9b8      	cbnz	r0, 801b8b0 <_Balloc+0x68>
 801b880:	2101      	movs	r1, #1
 801b882:	fa01 f605 	lsl.w	r6, r1, r5
 801b886:	1d72      	adds	r2, r6, #5
 801b888:	0092      	lsls	r2, r2, #2
 801b88a:	4620      	mov	r0, r4
 801b88c:	f000 fc9d 	bl	801c1ca <_calloc_r>
 801b890:	b160      	cbz	r0, 801b8ac <_Balloc+0x64>
 801b892:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b896:	e00e      	b.n	801b8b6 <_Balloc+0x6e>
 801b898:	2221      	movs	r2, #33	; 0x21
 801b89a:	2104      	movs	r1, #4
 801b89c:	4620      	mov	r0, r4
 801b89e:	f000 fc94 	bl	801c1ca <_calloc_r>
 801b8a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b8a4:	60f0      	str	r0, [r6, #12]
 801b8a6:	68db      	ldr	r3, [r3, #12]
 801b8a8:	2b00      	cmp	r3, #0
 801b8aa:	d1e4      	bne.n	801b876 <_Balloc+0x2e>
 801b8ac:	2000      	movs	r0, #0
 801b8ae:	bd70      	pop	{r4, r5, r6, pc}
 801b8b0:	6802      	ldr	r2, [r0, #0]
 801b8b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b8b6:	2300      	movs	r3, #0
 801b8b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b8bc:	e7f7      	b.n	801b8ae <_Balloc+0x66>
 801b8be:	bf00      	nop
 801b8c0:	08031414 	.word	0x08031414
 801b8c4:	0803142b 	.word	0x0803142b

0801b8c8 <_Bfree>:
 801b8c8:	b570      	push	{r4, r5, r6, lr}
 801b8ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b8cc:	4605      	mov	r5, r0
 801b8ce:	460c      	mov	r4, r1
 801b8d0:	b976      	cbnz	r6, 801b8f0 <_Bfree+0x28>
 801b8d2:	2010      	movs	r0, #16
 801b8d4:	f7fe fc76 	bl	801a1c4 <malloc>
 801b8d8:	4602      	mov	r2, r0
 801b8da:	6268      	str	r0, [r5, #36]	; 0x24
 801b8dc:	b920      	cbnz	r0, 801b8e8 <_Bfree+0x20>
 801b8de:	4b09      	ldr	r3, [pc, #36]	; (801b904 <_Bfree+0x3c>)
 801b8e0:	4809      	ldr	r0, [pc, #36]	; (801b908 <_Bfree+0x40>)
 801b8e2:	218a      	movs	r1, #138	; 0x8a
 801b8e4:	f000 fcb2 	bl	801c24c <__assert_func>
 801b8e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b8ec:	6006      	str	r6, [r0, #0]
 801b8ee:	60c6      	str	r6, [r0, #12]
 801b8f0:	b13c      	cbz	r4, 801b902 <_Bfree+0x3a>
 801b8f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b8f4:	6862      	ldr	r2, [r4, #4]
 801b8f6:	68db      	ldr	r3, [r3, #12]
 801b8f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b8fc:	6021      	str	r1, [r4, #0]
 801b8fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b902:	bd70      	pop	{r4, r5, r6, pc}
 801b904:	08031414 	.word	0x08031414
 801b908:	0803142b 	.word	0x0803142b

0801b90c <__multadd>:
 801b90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b910:	690d      	ldr	r5, [r1, #16]
 801b912:	4607      	mov	r7, r0
 801b914:	460c      	mov	r4, r1
 801b916:	461e      	mov	r6, r3
 801b918:	f101 0c14 	add.w	ip, r1, #20
 801b91c:	2000      	movs	r0, #0
 801b91e:	f8dc 3000 	ldr.w	r3, [ip]
 801b922:	b299      	uxth	r1, r3
 801b924:	fb02 6101 	mla	r1, r2, r1, r6
 801b928:	0c1e      	lsrs	r6, r3, #16
 801b92a:	0c0b      	lsrs	r3, r1, #16
 801b92c:	fb02 3306 	mla	r3, r2, r6, r3
 801b930:	b289      	uxth	r1, r1
 801b932:	3001      	adds	r0, #1
 801b934:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b938:	4285      	cmp	r5, r0
 801b93a:	f84c 1b04 	str.w	r1, [ip], #4
 801b93e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b942:	dcec      	bgt.n	801b91e <__multadd+0x12>
 801b944:	b30e      	cbz	r6, 801b98a <__multadd+0x7e>
 801b946:	68a3      	ldr	r3, [r4, #8]
 801b948:	42ab      	cmp	r3, r5
 801b94a:	dc19      	bgt.n	801b980 <__multadd+0x74>
 801b94c:	6861      	ldr	r1, [r4, #4]
 801b94e:	4638      	mov	r0, r7
 801b950:	3101      	adds	r1, #1
 801b952:	f7ff ff79 	bl	801b848 <_Balloc>
 801b956:	4680      	mov	r8, r0
 801b958:	b928      	cbnz	r0, 801b966 <__multadd+0x5a>
 801b95a:	4602      	mov	r2, r0
 801b95c:	4b0c      	ldr	r3, [pc, #48]	; (801b990 <__multadd+0x84>)
 801b95e:	480d      	ldr	r0, [pc, #52]	; (801b994 <__multadd+0x88>)
 801b960:	21b5      	movs	r1, #181	; 0xb5
 801b962:	f000 fc73 	bl	801c24c <__assert_func>
 801b966:	6922      	ldr	r2, [r4, #16]
 801b968:	3202      	adds	r2, #2
 801b96a:	f104 010c 	add.w	r1, r4, #12
 801b96e:	0092      	lsls	r2, r2, #2
 801b970:	300c      	adds	r0, #12
 801b972:	f7fe fc37 	bl	801a1e4 <memcpy>
 801b976:	4621      	mov	r1, r4
 801b978:	4638      	mov	r0, r7
 801b97a:	f7ff ffa5 	bl	801b8c8 <_Bfree>
 801b97e:	4644      	mov	r4, r8
 801b980:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b984:	3501      	adds	r5, #1
 801b986:	615e      	str	r6, [r3, #20]
 801b988:	6125      	str	r5, [r4, #16]
 801b98a:	4620      	mov	r0, r4
 801b98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b990:	08031388 	.word	0x08031388
 801b994:	0803142b 	.word	0x0803142b

0801b998 <__s2b>:
 801b998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b99c:	460c      	mov	r4, r1
 801b99e:	4615      	mov	r5, r2
 801b9a0:	461f      	mov	r7, r3
 801b9a2:	2209      	movs	r2, #9
 801b9a4:	3308      	adds	r3, #8
 801b9a6:	4606      	mov	r6, r0
 801b9a8:	fb93 f3f2 	sdiv	r3, r3, r2
 801b9ac:	2100      	movs	r1, #0
 801b9ae:	2201      	movs	r2, #1
 801b9b0:	429a      	cmp	r2, r3
 801b9b2:	db09      	blt.n	801b9c8 <__s2b+0x30>
 801b9b4:	4630      	mov	r0, r6
 801b9b6:	f7ff ff47 	bl	801b848 <_Balloc>
 801b9ba:	b940      	cbnz	r0, 801b9ce <__s2b+0x36>
 801b9bc:	4602      	mov	r2, r0
 801b9be:	4b19      	ldr	r3, [pc, #100]	; (801ba24 <__s2b+0x8c>)
 801b9c0:	4819      	ldr	r0, [pc, #100]	; (801ba28 <__s2b+0x90>)
 801b9c2:	21ce      	movs	r1, #206	; 0xce
 801b9c4:	f000 fc42 	bl	801c24c <__assert_func>
 801b9c8:	0052      	lsls	r2, r2, #1
 801b9ca:	3101      	adds	r1, #1
 801b9cc:	e7f0      	b.n	801b9b0 <__s2b+0x18>
 801b9ce:	9b08      	ldr	r3, [sp, #32]
 801b9d0:	6143      	str	r3, [r0, #20]
 801b9d2:	2d09      	cmp	r5, #9
 801b9d4:	f04f 0301 	mov.w	r3, #1
 801b9d8:	6103      	str	r3, [r0, #16]
 801b9da:	dd16      	ble.n	801ba0a <__s2b+0x72>
 801b9dc:	f104 0909 	add.w	r9, r4, #9
 801b9e0:	46c8      	mov	r8, r9
 801b9e2:	442c      	add	r4, r5
 801b9e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b9e8:	4601      	mov	r1, r0
 801b9ea:	3b30      	subs	r3, #48	; 0x30
 801b9ec:	220a      	movs	r2, #10
 801b9ee:	4630      	mov	r0, r6
 801b9f0:	f7ff ff8c 	bl	801b90c <__multadd>
 801b9f4:	45a0      	cmp	r8, r4
 801b9f6:	d1f5      	bne.n	801b9e4 <__s2b+0x4c>
 801b9f8:	f1a5 0408 	sub.w	r4, r5, #8
 801b9fc:	444c      	add	r4, r9
 801b9fe:	1b2d      	subs	r5, r5, r4
 801ba00:	1963      	adds	r3, r4, r5
 801ba02:	42bb      	cmp	r3, r7
 801ba04:	db04      	blt.n	801ba10 <__s2b+0x78>
 801ba06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ba0a:	340a      	adds	r4, #10
 801ba0c:	2509      	movs	r5, #9
 801ba0e:	e7f6      	b.n	801b9fe <__s2b+0x66>
 801ba10:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ba14:	4601      	mov	r1, r0
 801ba16:	3b30      	subs	r3, #48	; 0x30
 801ba18:	220a      	movs	r2, #10
 801ba1a:	4630      	mov	r0, r6
 801ba1c:	f7ff ff76 	bl	801b90c <__multadd>
 801ba20:	e7ee      	b.n	801ba00 <__s2b+0x68>
 801ba22:	bf00      	nop
 801ba24:	08031388 	.word	0x08031388
 801ba28:	0803142b 	.word	0x0803142b

0801ba2c <__hi0bits>:
 801ba2c:	0c03      	lsrs	r3, r0, #16
 801ba2e:	041b      	lsls	r3, r3, #16
 801ba30:	b9d3      	cbnz	r3, 801ba68 <__hi0bits+0x3c>
 801ba32:	0400      	lsls	r0, r0, #16
 801ba34:	2310      	movs	r3, #16
 801ba36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ba3a:	bf04      	itt	eq
 801ba3c:	0200      	lsleq	r0, r0, #8
 801ba3e:	3308      	addeq	r3, #8
 801ba40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801ba44:	bf04      	itt	eq
 801ba46:	0100      	lsleq	r0, r0, #4
 801ba48:	3304      	addeq	r3, #4
 801ba4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ba4e:	bf04      	itt	eq
 801ba50:	0080      	lsleq	r0, r0, #2
 801ba52:	3302      	addeq	r3, #2
 801ba54:	2800      	cmp	r0, #0
 801ba56:	db05      	blt.n	801ba64 <__hi0bits+0x38>
 801ba58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ba5c:	f103 0301 	add.w	r3, r3, #1
 801ba60:	bf08      	it	eq
 801ba62:	2320      	moveq	r3, #32
 801ba64:	4618      	mov	r0, r3
 801ba66:	4770      	bx	lr
 801ba68:	2300      	movs	r3, #0
 801ba6a:	e7e4      	b.n	801ba36 <__hi0bits+0xa>

0801ba6c <__lo0bits>:
 801ba6c:	6803      	ldr	r3, [r0, #0]
 801ba6e:	f013 0207 	ands.w	r2, r3, #7
 801ba72:	4601      	mov	r1, r0
 801ba74:	d00b      	beq.n	801ba8e <__lo0bits+0x22>
 801ba76:	07da      	lsls	r2, r3, #31
 801ba78:	d423      	bmi.n	801bac2 <__lo0bits+0x56>
 801ba7a:	0798      	lsls	r0, r3, #30
 801ba7c:	bf49      	itett	mi
 801ba7e:	085b      	lsrmi	r3, r3, #1
 801ba80:	089b      	lsrpl	r3, r3, #2
 801ba82:	2001      	movmi	r0, #1
 801ba84:	600b      	strmi	r3, [r1, #0]
 801ba86:	bf5c      	itt	pl
 801ba88:	600b      	strpl	r3, [r1, #0]
 801ba8a:	2002      	movpl	r0, #2
 801ba8c:	4770      	bx	lr
 801ba8e:	b298      	uxth	r0, r3
 801ba90:	b9a8      	cbnz	r0, 801babe <__lo0bits+0x52>
 801ba92:	0c1b      	lsrs	r3, r3, #16
 801ba94:	2010      	movs	r0, #16
 801ba96:	b2da      	uxtb	r2, r3
 801ba98:	b90a      	cbnz	r2, 801ba9e <__lo0bits+0x32>
 801ba9a:	3008      	adds	r0, #8
 801ba9c:	0a1b      	lsrs	r3, r3, #8
 801ba9e:	071a      	lsls	r2, r3, #28
 801baa0:	bf04      	itt	eq
 801baa2:	091b      	lsreq	r3, r3, #4
 801baa4:	3004      	addeq	r0, #4
 801baa6:	079a      	lsls	r2, r3, #30
 801baa8:	bf04      	itt	eq
 801baaa:	089b      	lsreq	r3, r3, #2
 801baac:	3002      	addeq	r0, #2
 801baae:	07da      	lsls	r2, r3, #31
 801bab0:	d403      	bmi.n	801baba <__lo0bits+0x4e>
 801bab2:	085b      	lsrs	r3, r3, #1
 801bab4:	f100 0001 	add.w	r0, r0, #1
 801bab8:	d005      	beq.n	801bac6 <__lo0bits+0x5a>
 801baba:	600b      	str	r3, [r1, #0]
 801babc:	4770      	bx	lr
 801babe:	4610      	mov	r0, r2
 801bac0:	e7e9      	b.n	801ba96 <__lo0bits+0x2a>
 801bac2:	2000      	movs	r0, #0
 801bac4:	4770      	bx	lr
 801bac6:	2020      	movs	r0, #32
 801bac8:	4770      	bx	lr
	...

0801bacc <__i2b>:
 801bacc:	b510      	push	{r4, lr}
 801bace:	460c      	mov	r4, r1
 801bad0:	2101      	movs	r1, #1
 801bad2:	f7ff feb9 	bl	801b848 <_Balloc>
 801bad6:	4602      	mov	r2, r0
 801bad8:	b928      	cbnz	r0, 801bae6 <__i2b+0x1a>
 801bada:	4b05      	ldr	r3, [pc, #20]	; (801baf0 <__i2b+0x24>)
 801badc:	4805      	ldr	r0, [pc, #20]	; (801baf4 <__i2b+0x28>)
 801bade:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801bae2:	f000 fbb3 	bl	801c24c <__assert_func>
 801bae6:	2301      	movs	r3, #1
 801bae8:	6144      	str	r4, [r0, #20]
 801baea:	6103      	str	r3, [r0, #16]
 801baec:	bd10      	pop	{r4, pc}
 801baee:	bf00      	nop
 801baf0:	08031388 	.word	0x08031388
 801baf4:	0803142b 	.word	0x0803142b

0801baf8 <__multiply>:
 801baf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bafc:	4691      	mov	r9, r2
 801bafe:	690a      	ldr	r2, [r1, #16]
 801bb00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bb04:	429a      	cmp	r2, r3
 801bb06:	bfb8      	it	lt
 801bb08:	460b      	movlt	r3, r1
 801bb0a:	460c      	mov	r4, r1
 801bb0c:	bfbc      	itt	lt
 801bb0e:	464c      	movlt	r4, r9
 801bb10:	4699      	movlt	r9, r3
 801bb12:	6927      	ldr	r7, [r4, #16]
 801bb14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801bb18:	68a3      	ldr	r3, [r4, #8]
 801bb1a:	6861      	ldr	r1, [r4, #4]
 801bb1c:	eb07 060a 	add.w	r6, r7, sl
 801bb20:	42b3      	cmp	r3, r6
 801bb22:	b085      	sub	sp, #20
 801bb24:	bfb8      	it	lt
 801bb26:	3101      	addlt	r1, #1
 801bb28:	f7ff fe8e 	bl	801b848 <_Balloc>
 801bb2c:	b930      	cbnz	r0, 801bb3c <__multiply+0x44>
 801bb2e:	4602      	mov	r2, r0
 801bb30:	4b44      	ldr	r3, [pc, #272]	; (801bc44 <__multiply+0x14c>)
 801bb32:	4845      	ldr	r0, [pc, #276]	; (801bc48 <__multiply+0x150>)
 801bb34:	f240 115d 	movw	r1, #349	; 0x15d
 801bb38:	f000 fb88 	bl	801c24c <__assert_func>
 801bb3c:	f100 0514 	add.w	r5, r0, #20
 801bb40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801bb44:	462b      	mov	r3, r5
 801bb46:	2200      	movs	r2, #0
 801bb48:	4543      	cmp	r3, r8
 801bb4a:	d321      	bcc.n	801bb90 <__multiply+0x98>
 801bb4c:	f104 0314 	add.w	r3, r4, #20
 801bb50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801bb54:	f109 0314 	add.w	r3, r9, #20
 801bb58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801bb5c:	9202      	str	r2, [sp, #8]
 801bb5e:	1b3a      	subs	r2, r7, r4
 801bb60:	3a15      	subs	r2, #21
 801bb62:	f022 0203 	bic.w	r2, r2, #3
 801bb66:	3204      	adds	r2, #4
 801bb68:	f104 0115 	add.w	r1, r4, #21
 801bb6c:	428f      	cmp	r7, r1
 801bb6e:	bf38      	it	cc
 801bb70:	2204      	movcc	r2, #4
 801bb72:	9201      	str	r2, [sp, #4]
 801bb74:	9a02      	ldr	r2, [sp, #8]
 801bb76:	9303      	str	r3, [sp, #12]
 801bb78:	429a      	cmp	r2, r3
 801bb7a:	d80c      	bhi.n	801bb96 <__multiply+0x9e>
 801bb7c:	2e00      	cmp	r6, #0
 801bb7e:	dd03      	ble.n	801bb88 <__multiply+0x90>
 801bb80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801bb84:	2b00      	cmp	r3, #0
 801bb86:	d05a      	beq.n	801bc3e <__multiply+0x146>
 801bb88:	6106      	str	r6, [r0, #16]
 801bb8a:	b005      	add	sp, #20
 801bb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb90:	f843 2b04 	str.w	r2, [r3], #4
 801bb94:	e7d8      	b.n	801bb48 <__multiply+0x50>
 801bb96:	f8b3 a000 	ldrh.w	sl, [r3]
 801bb9a:	f1ba 0f00 	cmp.w	sl, #0
 801bb9e:	d024      	beq.n	801bbea <__multiply+0xf2>
 801bba0:	f104 0e14 	add.w	lr, r4, #20
 801bba4:	46a9      	mov	r9, r5
 801bba6:	f04f 0c00 	mov.w	ip, #0
 801bbaa:	f85e 2b04 	ldr.w	r2, [lr], #4
 801bbae:	f8d9 1000 	ldr.w	r1, [r9]
 801bbb2:	fa1f fb82 	uxth.w	fp, r2
 801bbb6:	b289      	uxth	r1, r1
 801bbb8:	fb0a 110b 	mla	r1, sl, fp, r1
 801bbbc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801bbc0:	f8d9 2000 	ldr.w	r2, [r9]
 801bbc4:	4461      	add	r1, ip
 801bbc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801bbca:	fb0a c20b 	mla	r2, sl, fp, ip
 801bbce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801bbd2:	b289      	uxth	r1, r1
 801bbd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801bbd8:	4577      	cmp	r7, lr
 801bbda:	f849 1b04 	str.w	r1, [r9], #4
 801bbde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801bbe2:	d8e2      	bhi.n	801bbaa <__multiply+0xb2>
 801bbe4:	9a01      	ldr	r2, [sp, #4]
 801bbe6:	f845 c002 	str.w	ip, [r5, r2]
 801bbea:	9a03      	ldr	r2, [sp, #12]
 801bbec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801bbf0:	3304      	adds	r3, #4
 801bbf2:	f1b9 0f00 	cmp.w	r9, #0
 801bbf6:	d020      	beq.n	801bc3a <__multiply+0x142>
 801bbf8:	6829      	ldr	r1, [r5, #0]
 801bbfa:	f104 0c14 	add.w	ip, r4, #20
 801bbfe:	46ae      	mov	lr, r5
 801bc00:	f04f 0a00 	mov.w	sl, #0
 801bc04:	f8bc b000 	ldrh.w	fp, [ip]
 801bc08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801bc0c:	fb09 220b 	mla	r2, r9, fp, r2
 801bc10:	4492      	add	sl, r2
 801bc12:	b289      	uxth	r1, r1
 801bc14:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801bc18:	f84e 1b04 	str.w	r1, [lr], #4
 801bc1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 801bc20:	f8be 1000 	ldrh.w	r1, [lr]
 801bc24:	0c12      	lsrs	r2, r2, #16
 801bc26:	fb09 1102 	mla	r1, r9, r2, r1
 801bc2a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801bc2e:	4567      	cmp	r7, ip
 801bc30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801bc34:	d8e6      	bhi.n	801bc04 <__multiply+0x10c>
 801bc36:	9a01      	ldr	r2, [sp, #4]
 801bc38:	50a9      	str	r1, [r5, r2]
 801bc3a:	3504      	adds	r5, #4
 801bc3c:	e79a      	b.n	801bb74 <__multiply+0x7c>
 801bc3e:	3e01      	subs	r6, #1
 801bc40:	e79c      	b.n	801bb7c <__multiply+0x84>
 801bc42:	bf00      	nop
 801bc44:	08031388 	.word	0x08031388
 801bc48:	0803142b 	.word	0x0803142b

0801bc4c <__pow5mult>:
 801bc4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc50:	4615      	mov	r5, r2
 801bc52:	f012 0203 	ands.w	r2, r2, #3
 801bc56:	4606      	mov	r6, r0
 801bc58:	460f      	mov	r7, r1
 801bc5a:	d007      	beq.n	801bc6c <__pow5mult+0x20>
 801bc5c:	4c25      	ldr	r4, [pc, #148]	; (801bcf4 <__pow5mult+0xa8>)
 801bc5e:	3a01      	subs	r2, #1
 801bc60:	2300      	movs	r3, #0
 801bc62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801bc66:	f7ff fe51 	bl	801b90c <__multadd>
 801bc6a:	4607      	mov	r7, r0
 801bc6c:	10ad      	asrs	r5, r5, #2
 801bc6e:	d03d      	beq.n	801bcec <__pow5mult+0xa0>
 801bc70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801bc72:	b97c      	cbnz	r4, 801bc94 <__pow5mult+0x48>
 801bc74:	2010      	movs	r0, #16
 801bc76:	f7fe faa5 	bl	801a1c4 <malloc>
 801bc7a:	4602      	mov	r2, r0
 801bc7c:	6270      	str	r0, [r6, #36]	; 0x24
 801bc7e:	b928      	cbnz	r0, 801bc8c <__pow5mult+0x40>
 801bc80:	4b1d      	ldr	r3, [pc, #116]	; (801bcf8 <__pow5mult+0xac>)
 801bc82:	481e      	ldr	r0, [pc, #120]	; (801bcfc <__pow5mult+0xb0>)
 801bc84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801bc88:	f000 fae0 	bl	801c24c <__assert_func>
 801bc8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801bc90:	6004      	str	r4, [r0, #0]
 801bc92:	60c4      	str	r4, [r0, #12]
 801bc94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801bc98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bc9c:	b94c      	cbnz	r4, 801bcb2 <__pow5mult+0x66>
 801bc9e:	f240 2171 	movw	r1, #625	; 0x271
 801bca2:	4630      	mov	r0, r6
 801bca4:	f7ff ff12 	bl	801bacc <__i2b>
 801bca8:	2300      	movs	r3, #0
 801bcaa:	f8c8 0008 	str.w	r0, [r8, #8]
 801bcae:	4604      	mov	r4, r0
 801bcb0:	6003      	str	r3, [r0, #0]
 801bcb2:	f04f 0900 	mov.w	r9, #0
 801bcb6:	07eb      	lsls	r3, r5, #31
 801bcb8:	d50a      	bpl.n	801bcd0 <__pow5mult+0x84>
 801bcba:	4639      	mov	r1, r7
 801bcbc:	4622      	mov	r2, r4
 801bcbe:	4630      	mov	r0, r6
 801bcc0:	f7ff ff1a 	bl	801baf8 <__multiply>
 801bcc4:	4639      	mov	r1, r7
 801bcc6:	4680      	mov	r8, r0
 801bcc8:	4630      	mov	r0, r6
 801bcca:	f7ff fdfd 	bl	801b8c8 <_Bfree>
 801bcce:	4647      	mov	r7, r8
 801bcd0:	106d      	asrs	r5, r5, #1
 801bcd2:	d00b      	beq.n	801bcec <__pow5mult+0xa0>
 801bcd4:	6820      	ldr	r0, [r4, #0]
 801bcd6:	b938      	cbnz	r0, 801bce8 <__pow5mult+0x9c>
 801bcd8:	4622      	mov	r2, r4
 801bcda:	4621      	mov	r1, r4
 801bcdc:	4630      	mov	r0, r6
 801bcde:	f7ff ff0b 	bl	801baf8 <__multiply>
 801bce2:	6020      	str	r0, [r4, #0]
 801bce4:	f8c0 9000 	str.w	r9, [r0]
 801bce8:	4604      	mov	r4, r0
 801bcea:	e7e4      	b.n	801bcb6 <__pow5mult+0x6a>
 801bcec:	4638      	mov	r0, r7
 801bcee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bcf2:	bf00      	nop
 801bcf4:	08031578 	.word	0x08031578
 801bcf8:	08031414 	.word	0x08031414
 801bcfc:	0803142b 	.word	0x0803142b

0801bd00 <__lshift>:
 801bd00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd04:	460c      	mov	r4, r1
 801bd06:	6849      	ldr	r1, [r1, #4]
 801bd08:	6923      	ldr	r3, [r4, #16]
 801bd0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801bd0e:	68a3      	ldr	r3, [r4, #8]
 801bd10:	4607      	mov	r7, r0
 801bd12:	4691      	mov	r9, r2
 801bd14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bd18:	f108 0601 	add.w	r6, r8, #1
 801bd1c:	42b3      	cmp	r3, r6
 801bd1e:	db0b      	blt.n	801bd38 <__lshift+0x38>
 801bd20:	4638      	mov	r0, r7
 801bd22:	f7ff fd91 	bl	801b848 <_Balloc>
 801bd26:	4605      	mov	r5, r0
 801bd28:	b948      	cbnz	r0, 801bd3e <__lshift+0x3e>
 801bd2a:	4602      	mov	r2, r0
 801bd2c:	4b2a      	ldr	r3, [pc, #168]	; (801bdd8 <__lshift+0xd8>)
 801bd2e:	482b      	ldr	r0, [pc, #172]	; (801bddc <__lshift+0xdc>)
 801bd30:	f240 11d9 	movw	r1, #473	; 0x1d9
 801bd34:	f000 fa8a 	bl	801c24c <__assert_func>
 801bd38:	3101      	adds	r1, #1
 801bd3a:	005b      	lsls	r3, r3, #1
 801bd3c:	e7ee      	b.n	801bd1c <__lshift+0x1c>
 801bd3e:	2300      	movs	r3, #0
 801bd40:	f100 0114 	add.w	r1, r0, #20
 801bd44:	f100 0210 	add.w	r2, r0, #16
 801bd48:	4618      	mov	r0, r3
 801bd4a:	4553      	cmp	r3, sl
 801bd4c:	db37      	blt.n	801bdbe <__lshift+0xbe>
 801bd4e:	6920      	ldr	r0, [r4, #16]
 801bd50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bd54:	f104 0314 	add.w	r3, r4, #20
 801bd58:	f019 091f 	ands.w	r9, r9, #31
 801bd5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bd60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801bd64:	d02f      	beq.n	801bdc6 <__lshift+0xc6>
 801bd66:	f1c9 0e20 	rsb	lr, r9, #32
 801bd6a:	468a      	mov	sl, r1
 801bd6c:	f04f 0c00 	mov.w	ip, #0
 801bd70:	681a      	ldr	r2, [r3, #0]
 801bd72:	fa02 f209 	lsl.w	r2, r2, r9
 801bd76:	ea42 020c 	orr.w	r2, r2, ip
 801bd7a:	f84a 2b04 	str.w	r2, [sl], #4
 801bd7e:	f853 2b04 	ldr.w	r2, [r3], #4
 801bd82:	4298      	cmp	r0, r3
 801bd84:	fa22 fc0e 	lsr.w	ip, r2, lr
 801bd88:	d8f2      	bhi.n	801bd70 <__lshift+0x70>
 801bd8a:	1b03      	subs	r3, r0, r4
 801bd8c:	3b15      	subs	r3, #21
 801bd8e:	f023 0303 	bic.w	r3, r3, #3
 801bd92:	3304      	adds	r3, #4
 801bd94:	f104 0215 	add.w	r2, r4, #21
 801bd98:	4290      	cmp	r0, r2
 801bd9a:	bf38      	it	cc
 801bd9c:	2304      	movcc	r3, #4
 801bd9e:	f841 c003 	str.w	ip, [r1, r3]
 801bda2:	f1bc 0f00 	cmp.w	ip, #0
 801bda6:	d001      	beq.n	801bdac <__lshift+0xac>
 801bda8:	f108 0602 	add.w	r6, r8, #2
 801bdac:	3e01      	subs	r6, #1
 801bdae:	4638      	mov	r0, r7
 801bdb0:	612e      	str	r6, [r5, #16]
 801bdb2:	4621      	mov	r1, r4
 801bdb4:	f7ff fd88 	bl	801b8c8 <_Bfree>
 801bdb8:	4628      	mov	r0, r5
 801bdba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdbe:	f842 0f04 	str.w	r0, [r2, #4]!
 801bdc2:	3301      	adds	r3, #1
 801bdc4:	e7c1      	b.n	801bd4a <__lshift+0x4a>
 801bdc6:	3904      	subs	r1, #4
 801bdc8:	f853 2b04 	ldr.w	r2, [r3], #4
 801bdcc:	f841 2f04 	str.w	r2, [r1, #4]!
 801bdd0:	4298      	cmp	r0, r3
 801bdd2:	d8f9      	bhi.n	801bdc8 <__lshift+0xc8>
 801bdd4:	e7ea      	b.n	801bdac <__lshift+0xac>
 801bdd6:	bf00      	nop
 801bdd8:	08031388 	.word	0x08031388
 801bddc:	0803142b 	.word	0x0803142b

0801bde0 <__mcmp>:
 801bde0:	b530      	push	{r4, r5, lr}
 801bde2:	6902      	ldr	r2, [r0, #16]
 801bde4:	690c      	ldr	r4, [r1, #16]
 801bde6:	1b12      	subs	r2, r2, r4
 801bde8:	d10e      	bne.n	801be08 <__mcmp+0x28>
 801bdea:	f100 0314 	add.w	r3, r0, #20
 801bdee:	3114      	adds	r1, #20
 801bdf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801bdf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801bdf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801bdfc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801be00:	42a5      	cmp	r5, r4
 801be02:	d003      	beq.n	801be0c <__mcmp+0x2c>
 801be04:	d305      	bcc.n	801be12 <__mcmp+0x32>
 801be06:	2201      	movs	r2, #1
 801be08:	4610      	mov	r0, r2
 801be0a:	bd30      	pop	{r4, r5, pc}
 801be0c:	4283      	cmp	r3, r0
 801be0e:	d3f3      	bcc.n	801bdf8 <__mcmp+0x18>
 801be10:	e7fa      	b.n	801be08 <__mcmp+0x28>
 801be12:	f04f 32ff 	mov.w	r2, #4294967295
 801be16:	e7f7      	b.n	801be08 <__mcmp+0x28>

0801be18 <__mdiff>:
 801be18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be1c:	460c      	mov	r4, r1
 801be1e:	4606      	mov	r6, r0
 801be20:	4611      	mov	r1, r2
 801be22:	4620      	mov	r0, r4
 801be24:	4690      	mov	r8, r2
 801be26:	f7ff ffdb 	bl	801bde0 <__mcmp>
 801be2a:	1e05      	subs	r5, r0, #0
 801be2c:	d110      	bne.n	801be50 <__mdiff+0x38>
 801be2e:	4629      	mov	r1, r5
 801be30:	4630      	mov	r0, r6
 801be32:	f7ff fd09 	bl	801b848 <_Balloc>
 801be36:	b930      	cbnz	r0, 801be46 <__mdiff+0x2e>
 801be38:	4b3a      	ldr	r3, [pc, #232]	; (801bf24 <__mdiff+0x10c>)
 801be3a:	4602      	mov	r2, r0
 801be3c:	f240 2132 	movw	r1, #562	; 0x232
 801be40:	4839      	ldr	r0, [pc, #228]	; (801bf28 <__mdiff+0x110>)
 801be42:	f000 fa03 	bl	801c24c <__assert_func>
 801be46:	2301      	movs	r3, #1
 801be48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801be4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be50:	bfa4      	itt	ge
 801be52:	4643      	movge	r3, r8
 801be54:	46a0      	movge	r8, r4
 801be56:	4630      	mov	r0, r6
 801be58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801be5c:	bfa6      	itte	ge
 801be5e:	461c      	movge	r4, r3
 801be60:	2500      	movge	r5, #0
 801be62:	2501      	movlt	r5, #1
 801be64:	f7ff fcf0 	bl	801b848 <_Balloc>
 801be68:	b920      	cbnz	r0, 801be74 <__mdiff+0x5c>
 801be6a:	4b2e      	ldr	r3, [pc, #184]	; (801bf24 <__mdiff+0x10c>)
 801be6c:	4602      	mov	r2, r0
 801be6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 801be72:	e7e5      	b.n	801be40 <__mdiff+0x28>
 801be74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801be78:	6926      	ldr	r6, [r4, #16]
 801be7a:	60c5      	str	r5, [r0, #12]
 801be7c:	f104 0914 	add.w	r9, r4, #20
 801be80:	f108 0514 	add.w	r5, r8, #20
 801be84:	f100 0e14 	add.w	lr, r0, #20
 801be88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801be8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801be90:	f108 0210 	add.w	r2, r8, #16
 801be94:	46f2      	mov	sl, lr
 801be96:	2100      	movs	r1, #0
 801be98:	f859 3b04 	ldr.w	r3, [r9], #4
 801be9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801bea0:	fa1f f883 	uxth.w	r8, r3
 801bea4:	fa11 f18b 	uxtah	r1, r1, fp
 801bea8:	0c1b      	lsrs	r3, r3, #16
 801beaa:	eba1 0808 	sub.w	r8, r1, r8
 801beae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801beb2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801beb6:	fa1f f888 	uxth.w	r8, r8
 801beba:	1419      	asrs	r1, r3, #16
 801bebc:	454e      	cmp	r6, r9
 801bebe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801bec2:	f84a 3b04 	str.w	r3, [sl], #4
 801bec6:	d8e7      	bhi.n	801be98 <__mdiff+0x80>
 801bec8:	1b33      	subs	r3, r6, r4
 801beca:	3b15      	subs	r3, #21
 801becc:	f023 0303 	bic.w	r3, r3, #3
 801bed0:	3304      	adds	r3, #4
 801bed2:	3415      	adds	r4, #21
 801bed4:	42a6      	cmp	r6, r4
 801bed6:	bf38      	it	cc
 801bed8:	2304      	movcc	r3, #4
 801beda:	441d      	add	r5, r3
 801bedc:	4473      	add	r3, lr
 801bede:	469e      	mov	lr, r3
 801bee0:	462e      	mov	r6, r5
 801bee2:	4566      	cmp	r6, ip
 801bee4:	d30e      	bcc.n	801bf04 <__mdiff+0xec>
 801bee6:	f10c 0203 	add.w	r2, ip, #3
 801beea:	1b52      	subs	r2, r2, r5
 801beec:	f022 0203 	bic.w	r2, r2, #3
 801bef0:	3d03      	subs	r5, #3
 801bef2:	45ac      	cmp	ip, r5
 801bef4:	bf38      	it	cc
 801bef6:	2200      	movcc	r2, #0
 801bef8:	441a      	add	r2, r3
 801befa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801befe:	b17b      	cbz	r3, 801bf20 <__mdiff+0x108>
 801bf00:	6107      	str	r7, [r0, #16]
 801bf02:	e7a3      	b.n	801be4c <__mdiff+0x34>
 801bf04:	f856 8b04 	ldr.w	r8, [r6], #4
 801bf08:	fa11 f288 	uxtah	r2, r1, r8
 801bf0c:	1414      	asrs	r4, r2, #16
 801bf0e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801bf12:	b292      	uxth	r2, r2
 801bf14:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801bf18:	f84e 2b04 	str.w	r2, [lr], #4
 801bf1c:	1421      	asrs	r1, r4, #16
 801bf1e:	e7e0      	b.n	801bee2 <__mdiff+0xca>
 801bf20:	3f01      	subs	r7, #1
 801bf22:	e7ea      	b.n	801befa <__mdiff+0xe2>
 801bf24:	08031388 	.word	0x08031388
 801bf28:	0803142b 	.word	0x0803142b

0801bf2c <__ulp>:
 801bf2c:	b082      	sub	sp, #8
 801bf2e:	ed8d 0b00 	vstr	d0, [sp]
 801bf32:	9b01      	ldr	r3, [sp, #4]
 801bf34:	4912      	ldr	r1, [pc, #72]	; (801bf80 <__ulp+0x54>)
 801bf36:	4019      	ands	r1, r3
 801bf38:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801bf3c:	2900      	cmp	r1, #0
 801bf3e:	dd05      	ble.n	801bf4c <__ulp+0x20>
 801bf40:	2200      	movs	r2, #0
 801bf42:	460b      	mov	r3, r1
 801bf44:	ec43 2b10 	vmov	d0, r2, r3
 801bf48:	b002      	add	sp, #8
 801bf4a:	4770      	bx	lr
 801bf4c:	4249      	negs	r1, r1
 801bf4e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801bf52:	ea4f 5021 	mov.w	r0, r1, asr #20
 801bf56:	f04f 0200 	mov.w	r2, #0
 801bf5a:	f04f 0300 	mov.w	r3, #0
 801bf5e:	da04      	bge.n	801bf6a <__ulp+0x3e>
 801bf60:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801bf64:	fa41 f300 	asr.w	r3, r1, r0
 801bf68:	e7ec      	b.n	801bf44 <__ulp+0x18>
 801bf6a:	f1a0 0114 	sub.w	r1, r0, #20
 801bf6e:	291e      	cmp	r1, #30
 801bf70:	bfda      	itte	le
 801bf72:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801bf76:	fa20 f101 	lsrle.w	r1, r0, r1
 801bf7a:	2101      	movgt	r1, #1
 801bf7c:	460a      	mov	r2, r1
 801bf7e:	e7e1      	b.n	801bf44 <__ulp+0x18>
 801bf80:	7ff00000 	.word	0x7ff00000

0801bf84 <__b2d>:
 801bf84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf86:	6905      	ldr	r5, [r0, #16]
 801bf88:	f100 0714 	add.w	r7, r0, #20
 801bf8c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801bf90:	1f2e      	subs	r6, r5, #4
 801bf92:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801bf96:	4620      	mov	r0, r4
 801bf98:	f7ff fd48 	bl	801ba2c <__hi0bits>
 801bf9c:	f1c0 0320 	rsb	r3, r0, #32
 801bfa0:	280a      	cmp	r0, #10
 801bfa2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801c020 <__b2d+0x9c>
 801bfa6:	600b      	str	r3, [r1, #0]
 801bfa8:	dc14      	bgt.n	801bfd4 <__b2d+0x50>
 801bfaa:	f1c0 0e0b 	rsb	lr, r0, #11
 801bfae:	fa24 f10e 	lsr.w	r1, r4, lr
 801bfb2:	42b7      	cmp	r7, r6
 801bfb4:	ea41 030c 	orr.w	r3, r1, ip
 801bfb8:	bf34      	ite	cc
 801bfba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801bfbe:	2100      	movcs	r1, #0
 801bfc0:	3015      	adds	r0, #21
 801bfc2:	fa04 f000 	lsl.w	r0, r4, r0
 801bfc6:	fa21 f10e 	lsr.w	r1, r1, lr
 801bfca:	ea40 0201 	orr.w	r2, r0, r1
 801bfce:	ec43 2b10 	vmov	d0, r2, r3
 801bfd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bfd4:	42b7      	cmp	r7, r6
 801bfd6:	bf3a      	itte	cc
 801bfd8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801bfdc:	f1a5 0608 	subcc.w	r6, r5, #8
 801bfe0:	2100      	movcs	r1, #0
 801bfe2:	380b      	subs	r0, #11
 801bfe4:	d017      	beq.n	801c016 <__b2d+0x92>
 801bfe6:	f1c0 0c20 	rsb	ip, r0, #32
 801bfea:	fa04 f500 	lsl.w	r5, r4, r0
 801bfee:	42be      	cmp	r6, r7
 801bff0:	fa21 f40c 	lsr.w	r4, r1, ip
 801bff4:	ea45 0504 	orr.w	r5, r5, r4
 801bff8:	bf8c      	ite	hi
 801bffa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801bffe:	2400      	movls	r4, #0
 801c000:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801c004:	fa01 f000 	lsl.w	r0, r1, r0
 801c008:	fa24 f40c 	lsr.w	r4, r4, ip
 801c00c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801c010:	ea40 0204 	orr.w	r2, r0, r4
 801c014:	e7db      	b.n	801bfce <__b2d+0x4a>
 801c016:	ea44 030c 	orr.w	r3, r4, ip
 801c01a:	460a      	mov	r2, r1
 801c01c:	e7d7      	b.n	801bfce <__b2d+0x4a>
 801c01e:	bf00      	nop
 801c020:	3ff00000 	.word	0x3ff00000

0801c024 <__d2b>:
 801c024:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c028:	4689      	mov	r9, r1
 801c02a:	2101      	movs	r1, #1
 801c02c:	ec57 6b10 	vmov	r6, r7, d0
 801c030:	4690      	mov	r8, r2
 801c032:	f7ff fc09 	bl	801b848 <_Balloc>
 801c036:	4604      	mov	r4, r0
 801c038:	b930      	cbnz	r0, 801c048 <__d2b+0x24>
 801c03a:	4602      	mov	r2, r0
 801c03c:	4b25      	ldr	r3, [pc, #148]	; (801c0d4 <__d2b+0xb0>)
 801c03e:	4826      	ldr	r0, [pc, #152]	; (801c0d8 <__d2b+0xb4>)
 801c040:	f240 310a 	movw	r1, #778	; 0x30a
 801c044:	f000 f902 	bl	801c24c <__assert_func>
 801c048:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801c04c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801c050:	bb35      	cbnz	r5, 801c0a0 <__d2b+0x7c>
 801c052:	2e00      	cmp	r6, #0
 801c054:	9301      	str	r3, [sp, #4]
 801c056:	d028      	beq.n	801c0aa <__d2b+0x86>
 801c058:	4668      	mov	r0, sp
 801c05a:	9600      	str	r6, [sp, #0]
 801c05c:	f7ff fd06 	bl	801ba6c <__lo0bits>
 801c060:	9900      	ldr	r1, [sp, #0]
 801c062:	b300      	cbz	r0, 801c0a6 <__d2b+0x82>
 801c064:	9a01      	ldr	r2, [sp, #4]
 801c066:	f1c0 0320 	rsb	r3, r0, #32
 801c06a:	fa02 f303 	lsl.w	r3, r2, r3
 801c06e:	430b      	orrs	r3, r1
 801c070:	40c2      	lsrs	r2, r0
 801c072:	6163      	str	r3, [r4, #20]
 801c074:	9201      	str	r2, [sp, #4]
 801c076:	9b01      	ldr	r3, [sp, #4]
 801c078:	61a3      	str	r3, [r4, #24]
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	bf14      	ite	ne
 801c07e:	2202      	movne	r2, #2
 801c080:	2201      	moveq	r2, #1
 801c082:	6122      	str	r2, [r4, #16]
 801c084:	b1d5      	cbz	r5, 801c0bc <__d2b+0x98>
 801c086:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801c08a:	4405      	add	r5, r0
 801c08c:	f8c9 5000 	str.w	r5, [r9]
 801c090:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c094:	f8c8 0000 	str.w	r0, [r8]
 801c098:	4620      	mov	r0, r4
 801c09a:	b003      	add	sp, #12
 801c09c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c0a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c0a4:	e7d5      	b.n	801c052 <__d2b+0x2e>
 801c0a6:	6161      	str	r1, [r4, #20]
 801c0a8:	e7e5      	b.n	801c076 <__d2b+0x52>
 801c0aa:	a801      	add	r0, sp, #4
 801c0ac:	f7ff fcde 	bl	801ba6c <__lo0bits>
 801c0b0:	9b01      	ldr	r3, [sp, #4]
 801c0b2:	6163      	str	r3, [r4, #20]
 801c0b4:	2201      	movs	r2, #1
 801c0b6:	6122      	str	r2, [r4, #16]
 801c0b8:	3020      	adds	r0, #32
 801c0ba:	e7e3      	b.n	801c084 <__d2b+0x60>
 801c0bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c0c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c0c4:	f8c9 0000 	str.w	r0, [r9]
 801c0c8:	6918      	ldr	r0, [r3, #16]
 801c0ca:	f7ff fcaf 	bl	801ba2c <__hi0bits>
 801c0ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c0d2:	e7df      	b.n	801c094 <__d2b+0x70>
 801c0d4:	08031388 	.word	0x08031388
 801c0d8:	0803142b 	.word	0x0803142b

0801c0dc <__ratio>:
 801c0dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0e0:	4688      	mov	r8, r1
 801c0e2:	4669      	mov	r1, sp
 801c0e4:	4681      	mov	r9, r0
 801c0e6:	f7ff ff4d 	bl	801bf84 <__b2d>
 801c0ea:	a901      	add	r1, sp, #4
 801c0ec:	4640      	mov	r0, r8
 801c0ee:	ec55 4b10 	vmov	r4, r5, d0
 801c0f2:	f7ff ff47 	bl	801bf84 <__b2d>
 801c0f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c0fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801c0fe:	eba3 0c02 	sub.w	ip, r3, r2
 801c102:	e9dd 3200 	ldrd	r3, r2, [sp]
 801c106:	1a9b      	subs	r3, r3, r2
 801c108:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801c10c:	ec51 0b10 	vmov	r0, r1, d0
 801c110:	2b00      	cmp	r3, #0
 801c112:	bfd6      	itet	le
 801c114:	460a      	movle	r2, r1
 801c116:	462a      	movgt	r2, r5
 801c118:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c11c:	468b      	mov	fp, r1
 801c11e:	462f      	mov	r7, r5
 801c120:	bfd4      	ite	le
 801c122:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801c126:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801c12a:	4620      	mov	r0, r4
 801c12c:	ee10 2a10 	vmov	r2, s0
 801c130:	465b      	mov	r3, fp
 801c132:	4639      	mov	r1, r7
 801c134:	f7e4 fb8a 	bl	800084c <__aeabi_ddiv>
 801c138:	ec41 0b10 	vmov	d0, r0, r1
 801c13c:	b003      	add	sp, #12
 801c13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c142 <__copybits>:
 801c142:	3901      	subs	r1, #1
 801c144:	b570      	push	{r4, r5, r6, lr}
 801c146:	1149      	asrs	r1, r1, #5
 801c148:	6914      	ldr	r4, [r2, #16]
 801c14a:	3101      	adds	r1, #1
 801c14c:	f102 0314 	add.w	r3, r2, #20
 801c150:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c154:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c158:	1f05      	subs	r5, r0, #4
 801c15a:	42a3      	cmp	r3, r4
 801c15c:	d30c      	bcc.n	801c178 <__copybits+0x36>
 801c15e:	1aa3      	subs	r3, r4, r2
 801c160:	3b11      	subs	r3, #17
 801c162:	f023 0303 	bic.w	r3, r3, #3
 801c166:	3211      	adds	r2, #17
 801c168:	42a2      	cmp	r2, r4
 801c16a:	bf88      	it	hi
 801c16c:	2300      	movhi	r3, #0
 801c16e:	4418      	add	r0, r3
 801c170:	2300      	movs	r3, #0
 801c172:	4288      	cmp	r0, r1
 801c174:	d305      	bcc.n	801c182 <__copybits+0x40>
 801c176:	bd70      	pop	{r4, r5, r6, pc}
 801c178:	f853 6b04 	ldr.w	r6, [r3], #4
 801c17c:	f845 6f04 	str.w	r6, [r5, #4]!
 801c180:	e7eb      	b.n	801c15a <__copybits+0x18>
 801c182:	f840 3b04 	str.w	r3, [r0], #4
 801c186:	e7f4      	b.n	801c172 <__copybits+0x30>

0801c188 <__any_on>:
 801c188:	f100 0214 	add.w	r2, r0, #20
 801c18c:	6900      	ldr	r0, [r0, #16]
 801c18e:	114b      	asrs	r3, r1, #5
 801c190:	4298      	cmp	r0, r3
 801c192:	b510      	push	{r4, lr}
 801c194:	db11      	blt.n	801c1ba <__any_on+0x32>
 801c196:	dd0a      	ble.n	801c1ae <__any_on+0x26>
 801c198:	f011 011f 	ands.w	r1, r1, #31
 801c19c:	d007      	beq.n	801c1ae <__any_on+0x26>
 801c19e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c1a2:	fa24 f001 	lsr.w	r0, r4, r1
 801c1a6:	fa00 f101 	lsl.w	r1, r0, r1
 801c1aa:	428c      	cmp	r4, r1
 801c1ac:	d10b      	bne.n	801c1c6 <__any_on+0x3e>
 801c1ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c1b2:	4293      	cmp	r3, r2
 801c1b4:	d803      	bhi.n	801c1be <__any_on+0x36>
 801c1b6:	2000      	movs	r0, #0
 801c1b8:	bd10      	pop	{r4, pc}
 801c1ba:	4603      	mov	r3, r0
 801c1bc:	e7f7      	b.n	801c1ae <__any_on+0x26>
 801c1be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c1c2:	2900      	cmp	r1, #0
 801c1c4:	d0f5      	beq.n	801c1b2 <__any_on+0x2a>
 801c1c6:	2001      	movs	r0, #1
 801c1c8:	e7f6      	b.n	801c1b8 <__any_on+0x30>

0801c1ca <_calloc_r>:
 801c1ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c1cc:	fba1 2402 	umull	r2, r4, r1, r2
 801c1d0:	b94c      	cbnz	r4, 801c1e6 <_calloc_r+0x1c>
 801c1d2:	4611      	mov	r1, r2
 801c1d4:	9201      	str	r2, [sp, #4]
 801c1d6:	f7fe f8a1 	bl	801a31c <_malloc_r>
 801c1da:	9a01      	ldr	r2, [sp, #4]
 801c1dc:	4605      	mov	r5, r0
 801c1de:	b930      	cbnz	r0, 801c1ee <_calloc_r+0x24>
 801c1e0:	4628      	mov	r0, r5
 801c1e2:	b003      	add	sp, #12
 801c1e4:	bd30      	pop	{r4, r5, pc}
 801c1e6:	220c      	movs	r2, #12
 801c1e8:	6002      	str	r2, [r0, #0]
 801c1ea:	2500      	movs	r5, #0
 801c1ec:	e7f8      	b.n	801c1e0 <_calloc_r+0x16>
 801c1ee:	4621      	mov	r1, r4
 801c1f0:	f7fe f820 	bl	801a234 <memset>
 801c1f4:	e7f4      	b.n	801c1e0 <_calloc_r+0x16>
	...

0801c1f8 <nan>:
 801c1f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801c200 <nan+0x8>
 801c1fc:	4770      	bx	lr
 801c1fe:	bf00      	nop
 801c200:	00000000 	.word	0x00000000
 801c204:	7ff80000 	.word	0x7ff80000

0801c208 <strncmp>:
 801c208:	b510      	push	{r4, lr}
 801c20a:	b17a      	cbz	r2, 801c22c <strncmp+0x24>
 801c20c:	4603      	mov	r3, r0
 801c20e:	3901      	subs	r1, #1
 801c210:	1884      	adds	r4, r0, r2
 801c212:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c216:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801c21a:	4290      	cmp	r0, r2
 801c21c:	d101      	bne.n	801c222 <strncmp+0x1a>
 801c21e:	42a3      	cmp	r3, r4
 801c220:	d101      	bne.n	801c226 <strncmp+0x1e>
 801c222:	1a80      	subs	r0, r0, r2
 801c224:	bd10      	pop	{r4, pc}
 801c226:	2800      	cmp	r0, #0
 801c228:	d1f3      	bne.n	801c212 <strncmp+0xa>
 801c22a:	e7fa      	b.n	801c222 <strncmp+0x1a>
 801c22c:	4610      	mov	r0, r2
 801c22e:	e7f9      	b.n	801c224 <strncmp+0x1c>

0801c230 <__ascii_wctomb>:
 801c230:	b149      	cbz	r1, 801c246 <__ascii_wctomb+0x16>
 801c232:	2aff      	cmp	r2, #255	; 0xff
 801c234:	bf85      	ittet	hi
 801c236:	238a      	movhi	r3, #138	; 0x8a
 801c238:	6003      	strhi	r3, [r0, #0]
 801c23a:	700a      	strbls	r2, [r1, #0]
 801c23c:	f04f 30ff 	movhi.w	r0, #4294967295
 801c240:	bf98      	it	ls
 801c242:	2001      	movls	r0, #1
 801c244:	4770      	bx	lr
 801c246:	4608      	mov	r0, r1
 801c248:	4770      	bx	lr
	...

0801c24c <__assert_func>:
 801c24c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c24e:	4614      	mov	r4, r2
 801c250:	461a      	mov	r2, r3
 801c252:	4b09      	ldr	r3, [pc, #36]	; (801c278 <__assert_func+0x2c>)
 801c254:	681b      	ldr	r3, [r3, #0]
 801c256:	4605      	mov	r5, r0
 801c258:	68d8      	ldr	r0, [r3, #12]
 801c25a:	b14c      	cbz	r4, 801c270 <__assert_func+0x24>
 801c25c:	4b07      	ldr	r3, [pc, #28]	; (801c27c <__assert_func+0x30>)
 801c25e:	9100      	str	r1, [sp, #0]
 801c260:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c264:	4906      	ldr	r1, [pc, #24]	; (801c280 <__assert_func+0x34>)
 801c266:	462b      	mov	r3, r5
 801c268:	f000 f80e 	bl	801c288 <fiprintf>
 801c26c:	f7fd ff75 	bl	801a15a <abort>
 801c270:	4b04      	ldr	r3, [pc, #16]	; (801c284 <__assert_func+0x38>)
 801c272:	461c      	mov	r4, r3
 801c274:	e7f3      	b.n	801c25e <__assert_func+0x12>
 801c276:	bf00      	nop
 801c278:	20000148 	.word	0x20000148
 801c27c:	08031584 	.word	0x08031584
 801c280:	08031591 	.word	0x08031591
 801c284:	080315bf 	.word	0x080315bf

0801c288 <fiprintf>:
 801c288:	b40e      	push	{r1, r2, r3}
 801c28a:	b503      	push	{r0, r1, lr}
 801c28c:	4601      	mov	r1, r0
 801c28e:	ab03      	add	r3, sp, #12
 801c290:	4805      	ldr	r0, [pc, #20]	; (801c2a8 <fiprintf+0x20>)
 801c292:	f853 2b04 	ldr.w	r2, [r3], #4
 801c296:	6800      	ldr	r0, [r0, #0]
 801c298:	9301      	str	r3, [sp, #4]
 801c29a:	f000 f833 	bl	801c304 <_vfiprintf_r>
 801c29e:	b002      	add	sp, #8
 801c2a0:	f85d eb04 	ldr.w	lr, [sp], #4
 801c2a4:	b003      	add	sp, #12
 801c2a6:	4770      	bx	lr
 801c2a8:	20000148 	.word	0x20000148

0801c2ac <__retarget_lock_init_recursive>:
 801c2ac:	4770      	bx	lr

0801c2ae <__retarget_lock_acquire_recursive>:
 801c2ae:	4770      	bx	lr

0801c2b0 <__retarget_lock_release_recursive>:
 801c2b0:	4770      	bx	lr

0801c2b2 <__sfputc_r>:
 801c2b2:	6893      	ldr	r3, [r2, #8]
 801c2b4:	3b01      	subs	r3, #1
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	b410      	push	{r4}
 801c2ba:	6093      	str	r3, [r2, #8]
 801c2bc:	da08      	bge.n	801c2d0 <__sfputc_r+0x1e>
 801c2be:	6994      	ldr	r4, [r2, #24]
 801c2c0:	42a3      	cmp	r3, r4
 801c2c2:	db01      	blt.n	801c2c8 <__sfputc_r+0x16>
 801c2c4:	290a      	cmp	r1, #10
 801c2c6:	d103      	bne.n	801c2d0 <__sfputc_r+0x1e>
 801c2c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c2cc:	f000 bade 	b.w	801c88c <__swbuf_r>
 801c2d0:	6813      	ldr	r3, [r2, #0]
 801c2d2:	1c58      	adds	r0, r3, #1
 801c2d4:	6010      	str	r0, [r2, #0]
 801c2d6:	7019      	strb	r1, [r3, #0]
 801c2d8:	4608      	mov	r0, r1
 801c2da:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c2de:	4770      	bx	lr

0801c2e0 <__sfputs_r>:
 801c2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2e2:	4606      	mov	r6, r0
 801c2e4:	460f      	mov	r7, r1
 801c2e6:	4614      	mov	r4, r2
 801c2e8:	18d5      	adds	r5, r2, r3
 801c2ea:	42ac      	cmp	r4, r5
 801c2ec:	d101      	bne.n	801c2f2 <__sfputs_r+0x12>
 801c2ee:	2000      	movs	r0, #0
 801c2f0:	e007      	b.n	801c302 <__sfputs_r+0x22>
 801c2f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c2f6:	463a      	mov	r2, r7
 801c2f8:	4630      	mov	r0, r6
 801c2fa:	f7ff ffda 	bl	801c2b2 <__sfputc_r>
 801c2fe:	1c43      	adds	r3, r0, #1
 801c300:	d1f3      	bne.n	801c2ea <__sfputs_r+0xa>
 801c302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c304 <_vfiprintf_r>:
 801c304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c308:	460d      	mov	r5, r1
 801c30a:	b09d      	sub	sp, #116	; 0x74
 801c30c:	4614      	mov	r4, r2
 801c30e:	4698      	mov	r8, r3
 801c310:	4606      	mov	r6, r0
 801c312:	b118      	cbz	r0, 801c31c <_vfiprintf_r+0x18>
 801c314:	6983      	ldr	r3, [r0, #24]
 801c316:	b90b      	cbnz	r3, 801c31c <_vfiprintf_r+0x18>
 801c318:	f000 fc92 	bl	801cc40 <__sinit>
 801c31c:	4b89      	ldr	r3, [pc, #548]	; (801c544 <_vfiprintf_r+0x240>)
 801c31e:	429d      	cmp	r5, r3
 801c320:	d11b      	bne.n	801c35a <_vfiprintf_r+0x56>
 801c322:	6875      	ldr	r5, [r6, #4]
 801c324:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c326:	07d9      	lsls	r1, r3, #31
 801c328:	d405      	bmi.n	801c336 <_vfiprintf_r+0x32>
 801c32a:	89ab      	ldrh	r3, [r5, #12]
 801c32c:	059a      	lsls	r2, r3, #22
 801c32e:	d402      	bmi.n	801c336 <_vfiprintf_r+0x32>
 801c330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c332:	f7ff ffbc 	bl	801c2ae <__retarget_lock_acquire_recursive>
 801c336:	89ab      	ldrh	r3, [r5, #12]
 801c338:	071b      	lsls	r3, r3, #28
 801c33a:	d501      	bpl.n	801c340 <_vfiprintf_r+0x3c>
 801c33c:	692b      	ldr	r3, [r5, #16]
 801c33e:	b9eb      	cbnz	r3, 801c37c <_vfiprintf_r+0x78>
 801c340:	4629      	mov	r1, r5
 801c342:	4630      	mov	r0, r6
 801c344:	f000 faf4 	bl	801c930 <__swsetup_r>
 801c348:	b1c0      	cbz	r0, 801c37c <_vfiprintf_r+0x78>
 801c34a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c34c:	07dc      	lsls	r4, r3, #31
 801c34e:	d50e      	bpl.n	801c36e <_vfiprintf_r+0x6a>
 801c350:	f04f 30ff 	mov.w	r0, #4294967295
 801c354:	b01d      	add	sp, #116	; 0x74
 801c356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c35a:	4b7b      	ldr	r3, [pc, #492]	; (801c548 <_vfiprintf_r+0x244>)
 801c35c:	429d      	cmp	r5, r3
 801c35e:	d101      	bne.n	801c364 <_vfiprintf_r+0x60>
 801c360:	68b5      	ldr	r5, [r6, #8]
 801c362:	e7df      	b.n	801c324 <_vfiprintf_r+0x20>
 801c364:	4b79      	ldr	r3, [pc, #484]	; (801c54c <_vfiprintf_r+0x248>)
 801c366:	429d      	cmp	r5, r3
 801c368:	bf08      	it	eq
 801c36a:	68f5      	ldreq	r5, [r6, #12]
 801c36c:	e7da      	b.n	801c324 <_vfiprintf_r+0x20>
 801c36e:	89ab      	ldrh	r3, [r5, #12]
 801c370:	0598      	lsls	r0, r3, #22
 801c372:	d4ed      	bmi.n	801c350 <_vfiprintf_r+0x4c>
 801c374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c376:	f7ff ff9b 	bl	801c2b0 <__retarget_lock_release_recursive>
 801c37a:	e7e9      	b.n	801c350 <_vfiprintf_r+0x4c>
 801c37c:	2300      	movs	r3, #0
 801c37e:	9309      	str	r3, [sp, #36]	; 0x24
 801c380:	2320      	movs	r3, #32
 801c382:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c386:	f8cd 800c 	str.w	r8, [sp, #12]
 801c38a:	2330      	movs	r3, #48	; 0x30
 801c38c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c550 <_vfiprintf_r+0x24c>
 801c390:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c394:	f04f 0901 	mov.w	r9, #1
 801c398:	4623      	mov	r3, r4
 801c39a:	469a      	mov	sl, r3
 801c39c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c3a0:	b10a      	cbz	r2, 801c3a6 <_vfiprintf_r+0xa2>
 801c3a2:	2a25      	cmp	r2, #37	; 0x25
 801c3a4:	d1f9      	bne.n	801c39a <_vfiprintf_r+0x96>
 801c3a6:	ebba 0b04 	subs.w	fp, sl, r4
 801c3aa:	d00b      	beq.n	801c3c4 <_vfiprintf_r+0xc0>
 801c3ac:	465b      	mov	r3, fp
 801c3ae:	4622      	mov	r2, r4
 801c3b0:	4629      	mov	r1, r5
 801c3b2:	4630      	mov	r0, r6
 801c3b4:	f7ff ff94 	bl	801c2e0 <__sfputs_r>
 801c3b8:	3001      	adds	r0, #1
 801c3ba:	f000 80aa 	beq.w	801c512 <_vfiprintf_r+0x20e>
 801c3be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c3c0:	445a      	add	r2, fp
 801c3c2:	9209      	str	r2, [sp, #36]	; 0x24
 801c3c4:	f89a 3000 	ldrb.w	r3, [sl]
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	f000 80a2 	beq.w	801c512 <_vfiprintf_r+0x20e>
 801c3ce:	2300      	movs	r3, #0
 801c3d0:	f04f 32ff 	mov.w	r2, #4294967295
 801c3d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c3d8:	f10a 0a01 	add.w	sl, sl, #1
 801c3dc:	9304      	str	r3, [sp, #16]
 801c3de:	9307      	str	r3, [sp, #28]
 801c3e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c3e4:	931a      	str	r3, [sp, #104]	; 0x68
 801c3e6:	4654      	mov	r4, sl
 801c3e8:	2205      	movs	r2, #5
 801c3ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c3ee:	4858      	ldr	r0, [pc, #352]	; (801c550 <_vfiprintf_r+0x24c>)
 801c3f0:	f7e3 feee 	bl	80001d0 <memchr>
 801c3f4:	9a04      	ldr	r2, [sp, #16]
 801c3f6:	b9d8      	cbnz	r0, 801c430 <_vfiprintf_r+0x12c>
 801c3f8:	06d1      	lsls	r1, r2, #27
 801c3fa:	bf44      	itt	mi
 801c3fc:	2320      	movmi	r3, #32
 801c3fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c402:	0713      	lsls	r3, r2, #28
 801c404:	bf44      	itt	mi
 801c406:	232b      	movmi	r3, #43	; 0x2b
 801c408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c40c:	f89a 3000 	ldrb.w	r3, [sl]
 801c410:	2b2a      	cmp	r3, #42	; 0x2a
 801c412:	d015      	beq.n	801c440 <_vfiprintf_r+0x13c>
 801c414:	9a07      	ldr	r2, [sp, #28]
 801c416:	4654      	mov	r4, sl
 801c418:	2000      	movs	r0, #0
 801c41a:	f04f 0c0a 	mov.w	ip, #10
 801c41e:	4621      	mov	r1, r4
 801c420:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c424:	3b30      	subs	r3, #48	; 0x30
 801c426:	2b09      	cmp	r3, #9
 801c428:	d94e      	bls.n	801c4c8 <_vfiprintf_r+0x1c4>
 801c42a:	b1b0      	cbz	r0, 801c45a <_vfiprintf_r+0x156>
 801c42c:	9207      	str	r2, [sp, #28]
 801c42e:	e014      	b.n	801c45a <_vfiprintf_r+0x156>
 801c430:	eba0 0308 	sub.w	r3, r0, r8
 801c434:	fa09 f303 	lsl.w	r3, r9, r3
 801c438:	4313      	orrs	r3, r2
 801c43a:	9304      	str	r3, [sp, #16]
 801c43c:	46a2      	mov	sl, r4
 801c43e:	e7d2      	b.n	801c3e6 <_vfiprintf_r+0xe2>
 801c440:	9b03      	ldr	r3, [sp, #12]
 801c442:	1d19      	adds	r1, r3, #4
 801c444:	681b      	ldr	r3, [r3, #0]
 801c446:	9103      	str	r1, [sp, #12]
 801c448:	2b00      	cmp	r3, #0
 801c44a:	bfbb      	ittet	lt
 801c44c:	425b      	neglt	r3, r3
 801c44e:	f042 0202 	orrlt.w	r2, r2, #2
 801c452:	9307      	strge	r3, [sp, #28]
 801c454:	9307      	strlt	r3, [sp, #28]
 801c456:	bfb8      	it	lt
 801c458:	9204      	strlt	r2, [sp, #16]
 801c45a:	7823      	ldrb	r3, [r4, #0]
 801c45c:	2b2e      	cmp	r3, #46	; 0x2e
 801c45e:	d10c      	bne.n	801c47a <_vfiprintf_r+0x176>
 801c460:	7863      	ldrb	r3, [r4, #1]
 801c462:	2b2a      	cmp	r3, #42	; 0x2a
 801c464:	d135      	bne.n	801c4d2 <_vfiprintf_r+0x1ce>
 801c466:	9b03      	ldr	r3, [sp, #12]
 801c468:	1d1a      	adds	r2, r3, #4
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	9203      	str	r2, [sp, #12]
 801c46e:	2b00      	cmp	r3, #0
 801c470:	bfb8      	it	lt
 801c472:	f04f 33ff 	movlt.w	r3, #4294967295
 801c476:	3402      	adds	r4, #2
 801c478:	9305      	str	r3, [sp, #20]
 801c47a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c560 <_vfiprintf_r+0x25c>
 801c47e:	7821      	ldrb	r1, [r4, #0]
 801c480:	2203      	movs	r2, #3
 801c482:	4650      	mov	r0, sl
 801c484:	f7e3 fea4 	bl	80001d0 <memchr>
 801c488:	b140      	cbz	r0, 801c49c <_vfiprintf_r+0x198>
 801c48a:	2340      	movs	r3, #64	; 0x40
 801c48c:	eba0 000a 	sub.w	r0, r0, sl
 801c490:	fa03 f000 	lsl.w	r0, r3, r0
 801c494:	9b04      	ldr	r3, [sp, #16]
 801c496:	4303      	orrs	r3, r0
 801c498:	3401      	adds	r4, #1
 801c49a:	9304      	str	r3, [sp, #16]
 801c49c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c4a0:	482c      	ldr	r0, [pc, #176]	; (801c554 <_vfiprintf_r+0x250>)
 801c4a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c4a6:	2206      	movs	r2, #6
 801c4a8:	f7e3 fe92 	bl	80001d0 <memchr>
 801c4ac:	2800      	cmp	r0, #0
 801c4ae:	d03f      	beq.n	801c530 <_vfiprintf_r+0x22c>
 801c4b0:	4b29      	ldr	r3, [pc, #164]	; (801c558 <_vfiprintf_r+0x254>)
 801c4b2:	bb1b      	cbnz	r3, 801c4fc <_vfiprintf_r+0x1f8>
 801c4b4:	9b03      	ldr	r3, [sp, #12]
 801c4b6:	3307      	adds	r3, #7
 801c4b8:	f023 0307 	bic.w	r3, r3, #7
 801c4bc:	3308      	adds	r3, #8
 801c4be:	9303      	str	r3, [sp, #12]
 801c4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4c2:	443b      	add	r3, r7
 801c4c4:	9309      	str	r3, [sp, #36]	; 0x24
 801c4c6:	e767      	b.n	801c398 <_vfiprintf_r+0x94>
 801c4c8:	fb0c 3202 	mla	r2, ip, r2, r3
 801c4cc:	460c      	mov	r4, r1
 801c4ce:	2001      	movs	r0, #1
 801c4d0:	e7a5      	b.n	801c41e <_vfiprintf_r+0x11a>
 801c4d2:	2300      	movs	r3, #0
 801c4d4:	3401      	adds	r4, #1
 801c4d6:	9305      	str	r3, [sp, #20]
 801c4d8:	4619      	mov	r1, r3
 801c4da:	f04f 0c0a 	mov.w	ip, #10
 801c4de:	4620      	mov	r0, r4
 801c4e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c4e4:	3a30      	subs	r2, #48	; 0x30
 801c4e6:	2a09      	cmp	r2, #9
 801c4e8:	d903      	bls.n	801c4f2 <_vfiprintf_r+0x1ee>
 801c4ea:	2b00      	cmp	r3, #0
 801c4ec:	d0c5      	beq.n	801c47a <_vfiprintf_r+0x176>
 801c4ee:	9105      	str	r1, [sp, #20]
 801c4f0:	e7c3      	b.n	801c47a <_vfiprintf_r+0x176>
 801c4f2:	fb0c 2101 	mla	r1, ip, r1, r2
 801c4f6:	4604      	mov	r4, r0
 801c4f8:	2301      	movs	r3, #1
 801c4fa:	e7f0      	b.n	801c4de <_vfiprintf_r+0x1da>
 801c4fc:	ab03      	add	r3, sp, #12
 801c4fe:	9300      	str	r3, [sp, #0]
 801c500:	462a      	mov	r2, r5
 801c502:	4b16      	ldr	r3, [pc, #88]	; (801c55c <_vfiprintf_r+0x258>)
 801c504:	a904      	add	r1, sp, #16
 801c506:	4630      	mov	r0, r6
 801c508:	f3af 8000 	nop.w
 801c50c:	4607      	mov	r7, r0
 801c50e:	1c78      	adds	r0, r7, #1
 801c510:	d1d6      	bne.n	801c4c0 <_vfiprintf_r+0x1bc>
 801c512:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c514:	07d9      	lsls	r1, r3, #31
 801c516:	d405      	bmi.n	801c524 <_vfiprintf_r+0x220>
 801c518:	89ab      	ldrh	r3, [r5, #12]
 801c51a:	059a      	lsls	r2, r3, #22
 801c51c:	d402      	bmi.n	801c524 <_vfiprintf_r+0x220>
 801c51e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c520:	f7ff fec6 	bl	801c2b0 <__retarget_lock_release_recursive>
 801c524:	89ab      	ldrh	r3, [r5, #12]
 801c526:	065b      	lsls	r3, r3, #25
 801c528:	f53f af12 	bmi.w	801c350 <_vfiprintf_r+0x4c>
 801c52c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c52e:	e711      	b.n	801c354 <_vfiprintf_r+0x50>
 801c530:	ab03      	add	r3, sp, #12
 801c532:	9300      	str	r3, [sp, #0]
 801c534:	462a      	mov	r2, r5
 801c536:	4b09      	ldr	r3, [pc, #36]	; (801c55c <_vfiprintf_r+0x258>)
 801c538:	a904      	add	r1, sp, #16
 801c53a:	4630      	mov	r0, r6
 801c53c:	f000 f880 	bl	801c640 <_printf_i>
 801c540:	e7e4      	b.n	801c50c <_vfiprintf_r+0x208>
 801c542:	bf00      	nop
 801c544:	08031714 	.word	0x08031714
 801c548:	08031734 	.word	0x08031734
 801c54c:	080316f4 	.word	0x080316f4
 801c550:	080316c1 	.word	0x080316c1
 801c554:	080316cb 	.word	0x080316cb
 801c558:	00000000 	.word	0x00000000
 801c55c:	0801c2e1 	.word	0x0801c2e1
 801c560:	080316c7 	.word	0x080316c7

0801c564 <_printf_common>:
 801c564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c568:	4616      	mov	r6, r2
 801c56a:	4699      	mov	r9, r3
 801c56c:	688a      	ldr	r2, [r1, #8]
 801c56e:	690b      	ldr	r3, [r1, #16]
 801c570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c574:	4293      	cmp	r3, r2
 801c576:	bfb8      	it	lt
 801c578:	4613      	movlt	r3, r2
 801c57a:	6033      	str	r3, [r6, #0]
 801c57c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c580:	4607      	mov	r7, r0
 801c582:	460c      	mov	r4, r1
 801c584:	b10a      	cbz	r2, 801c58a <_printf_common+0x26>
 801c586:	3301      	adds	r3, #1
 801c588:	6033      	str	r3, [r6, #0]
 801c58a:	6823      	ldr	r3, [r4, #0]
 801c58c:	0699      	lsls	r1, r3, #26
 801c58e:	bf42      	ittt	mi
 801c590:	6833      	ldrmi	r3, [r6, #0]
 801c592:	3302      	addmi	r3, #2
 801c594:	6033      	strmi	r3, [r6, #0]
 801c596:	6825      	ldr	r5, [r4, #0]
 801c598:	f015 0506 	ands.w	r5, r5, #6
 801c59c:	d106      	bne.n	801c5ac <_printf_common+0x48>
 801c59e:	f104 0a19 	add.w	sl, r4, #25
 801c5a2:	68e3      	ldr	r3, [r4, #12]
 801c5a4:	6832      	ldr	r2, [r6, #0]
 801c5a6:	1a9b      	subs	r3, r3, r2
 801c5a8:	42ab      	cmp	r3, r5
 801c5aa:	dc26      	bgt.n	801c5fa <_printf_common+0x96>
 801c5ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c5b0:	1e13      	subs	r3, r2, #0
 801c5b2:	6822      	ldr	r2, [r4, #0]
 801c5b4:	bf18      	it	ne
 801c5b6:	2301      	movne	r3, #1
 801c5b8:	0692      	lsls	r2, r2, #26
 801c5ba:	d42b      	bmi.n	801c614 <_printf_common+0xb0>
 801c5bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c5c0:	4649      	mov	r1, r9
 801c5c2:	4638      	mov	r0, r7
 801c5c4:	47c0      	blx	r8
 801c5c6:	3001      	adds	r0, #1
 801c5c8:	d01e      	beq.n	801c608 <_printf_common+0xa4>
 801c5ca:	6823      	ldr	r3, [r4, #0]
 801c5cc:	68e5      	ldr	r5, [r4, #12]
 801c5ce:	6832      	ldr	r2, [r6, #0]
 801c5d0:	f003 0306 	and.w	r3, r3, #6
 801c5d4:	2b04      	cmp	r3, #4
 801c5d6:	bf08      	it	eq
 801c5d8:	1aad      	subeq	r5, r5, r2
 801c5da:	68a3      	ldr	r3, [r4, #8]
 801c5dc:	6922      	ldr	r2, [r4, #16]
 801c5de:	bf0c      	ite	eq
 801c5e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c5e4:	2500      	movne	r5, #0
 801c5e6:	4293      	cmp	r3, r2
 801c5e8:	bfc4      	itt	gt
 801c5ea:	1a9b      	subgt	r3, r3, r2
 801c5ec:	18ed      	addgt	r5, r5, r3
 801c5ee:	2600      	movs	r6, #0
 801c5f0:	341a      	adds	r4, #26
 801c5f2:	42b5      	cmp	r5, r6
 801c5f4:	d11a      	bne.n	801c62c <_printf_common+0xc8>
 801c5f6:	2000      	movs	r0, #0
 801c5f8:	e008      	b.n	801c60c <_printf_common+0xa8>
 801c5fa:	2301      	movs	r3, #1
 801c5fc:	4652      	mov	r2, sl
 801c5fe:	4649      	mov	r1, r9
 801c600:	4638      	mov	r0, r7
 801c602:	47c0      	blx	r8
 801c604:	3001      	adds	r0, #1
 801c606:	d103      	bne.n	801c610 <_printf_common+0xac>
 801c608:	f04f 30ff 	mov.w	r0, #4294967295
 801c60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c610:	3501      	adds	r5, #1
 801c612:	e7c6      	b.n	801c5a2 <_printf_common+0x3e>
 801c614:	18e1      	adds	r1, r4, r3
 801c616:	1c5a      	adds	r2, r3, #1
 801c618:	2030      	movs	r0, #48	; 0x30
 801c61a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c61e:	4422      	add	r2, r4
 801c620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c628:	3302      	adds	r3, #2
 801c62a:	e7c7      	b.n	801c5bc <_printf_common+0x58>
 801c62c:	2301      	movs	r3, #1
 801c62e:	4622      	mov	r2, r4
 801c630:	4649      	mov	r1, r9
 801c632:	4638      	mov	r0, r7
 801c634:	47c0      	blx	r8
 801c636:	3001      	adds	r0, #1
 801c638:	d0e6      	beq.n	801c608 <_printf_common+0xa4>
 801c63a:	3601      	adds	r6, #1
 801c63c:	e7d9      	b.n	801c5f2 <_printf_common+0x8e>
	...

0801c640 <_printf_i>:
 801c640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c644:	7e0f      	ldrb	r7, [r1, #24]
 801c646:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c648:	2f78      	cmp	r7, #120	; 0x78
 801c64a:	4691      	mov	r9, r2
 801c64c:	4680      	mov	r8, r0
 801c64e:	460c      	mov	r4, r1
 801c650:	469a      	mov	sl, r3
 801c652:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c656:	d807      	bhi.n	801c668 <_printf_i+0x28>
 801c658:	2f62      	cmp	r7, #98	; 0x62
 801c65a:	d80a      	bhi.n	801c672 <_printf_i+0x32>
 801c65c:	2f00      	cmp	r7, #0
 801c65e:	f000 80d8 	beq.w	801c812 <_printf_i+0x1d2>
 801c662:	2f58      	cmp	r7, #88	; 0x58
 801c664:	f000 80a3 	beq.w	801c7ae <_printf_i+0x16e>
 801c668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c66c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c670:	e03a      	b.n	801c6e8 <_printf_i+0xa8>
 801c672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c676:	2b15      	cmp	r3, #21
 801c678:	d8f6      	bhi.n	801c668 <_printf_i+0x28>
 801c67a:	a101      	add	r1, pc, #4	; (adr r1, 801c680 <_printf_i+0x40>)
 801c67c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c680:	0801c6d9 	.word	0x0801c6d9
 801c684:	0801c6ed 	.word	0x0801c6ed
 801c688:	0801c669 	.word	0x0801c669
 801c68c:	0801c669 	.word	0x0801c669
 801c690:	0801c669 	.word	0x0801c669
 801c694:	0801c669 	.word	0x0801c669
 801c698:	0801c6ed 	.word	0x0801c6ed
 801c69c:	0801c669 	.word	0x0801c669
 801c6a0:	0801c669 	.word	0x0801c669
 801c6a4:	0801c669 	.word	0x0801c669
 801c6a8:	0801c669 	.word	0x0801c669
 801c6ac:	0801c7f9 	.word	0x0801c7f9
 801c6b0:	0801c71d 	.word	0x0801c71d
 801c6b4:	0801c7db 	.word	0x0801c7db
 801c6b8:	0801c669 	.word	0x0801c669
 801c6bc:	0801c669 	.word	0x0801c669
 801c6c0:	0801c81b 	.word	0x0801c81b
 801c6c4:	0801c669 	.word	0x0801c669
 801c6c8:	0801c71d 	.word	0x0801c71d
 801c6cc:	0801c669 	.word	0x0801c669
 801c6d0:	0801c669 	.word	0x0801c669
 801c6d4:	0801c7e3 	.word	0x0801c7e3
 801c6d8:	682b      	ldr	r3, [r5, #0]
 801c6da:	1d1a      	adds	r2, r3, #4
 801c6dc:	681b      	ldr	r3, [r3, #0]
 801c6de:	602a      	str	r2, [r5, #0]
 801c6e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c6e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c6e8:	2301      	movs	r3, #1
 801c6ea:	e0a3      	b.n	801c834 <_printf_i+0x1f4>
 801c6ec:	6820      	ldr	r0, [r4, #0]
 801c6ee:	6829      	ldr	r1, [r5, #0]
 801c6f0:	0606      	lsls	r6, r0, #24
 801c6f2:	f101 0304 	add.w	r3, r1, #4
 801c6f6:	d50a      	bpl.n	801c70e <_printf_i+0xce>
 801c6f8:	680e      	ldr	r6, [r1, #0]
 801c6fa:	602b      	str	r3, [r5, #0]
 801c6fc:	2e00      	cmp	r6, #0
 801c6fe:	da03      	bge.n	801c708 <_printf_i+0xc8>
 801c700:	232d      	movs	r3, #45	; 0x2d
 801c702:	4276      	negs	r6, r6
 801c704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c708:	485e      	ldr	r0, [pc, #376]	; (801c884 <_printf_i+0x244>)
 801c70a:	230a      	movs	r3, #10
 801c70c:	e019      	b.n	801c742 <_printf_i+0x102>
 801c70e:	680e      	ldr	r6, [r1, #0]
 801c710:	602b      	str	r3, [r5, #0]
 801c712:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c716:	bf18      	it	ne
 801c718:	b236      	sxthne	r6, r6
 801c71a:	e7ef      	b.n	801c6fc <_printf_i+0xbc>
 801c71c:	682b      	ldr	r3, [r5, #0]
 801c71e:	6820      	ldr	r0, [r4, #0]
 801c720:	1d19      	adds	r1, r3, #4
 801c722:	6029      	str	r1, [r5, #0]
 801c724:	0601      	lsls	r1, r0, #24
 801c726:	d501      	bpl.n	801c72c <_printf_i+0xec>
 801c728:	681e      	ldr	r6, [r3, #0]
 801c72a:	e002      	b.n	801c732 <_printf_i+0xf2>
 801c72c:	0646      	lsls	r6, r0, #25
 801c72e:	d5fb      	bpl.n	801c728 <_printf_i+0xe8>
 801c730:	881e      	ldrh	r6, [r3, #0]
 801c732:	4854      	ldr	r0, [pc, #336]	; (801c884 <_printf_i+0x244>)
 801c734:	2f6f      	cmp	r7, #111	; 0x6f
 801c736:	bf0c      	ite	eq
 801c738:	2308      	moveq	r3, #8
 801c73a:	230a      	movne	r3, #10
 801c73c:	2100      	movs	r1, #0
 801c73e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c742:	6865      	ldr	r5, [r4, #4]
 801c744:	60a5      	str	r5, [r4, #8]
 801c746:	2d00      	cmp	r5, #0
 801c748:	bfa2      	ittt	ge
 801c74a:	6821      	ldrge	r1, [r4, #0]
 801c74c:	f021 0104 	bicge.w	r1, r1, #4
 801c750:	6021      	strge	r1, [r4, #0]
 801c752:	b90e      	cbnz	r6, 801c758 <_printf_i+0x118>
 801c754:	2d00      	cmp	r5, #0
 801c756:	d04d      	beq.n	801c7f4 <_printf_i+0x1b4>
 801c758:	4615      	mov	r5, r2
 801c75a:	fbb6 f1f3 	udiv	r1, r6, r3
 801c75e:	fb03 6711 	mls	r7, r3, r1, r6
 801c762:	5dc7      	ldrb	r7, [r0, r7]
 801c764:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c768:	4637      	mov	r7, r6
 801c76a:	42bb      	cmp	r3, r7
 801c76c:	460e      	mov	r6, r1
 801c76e:	d9f4      	bls.n	801c75a <_printf_i+0x11a>
 801c770:	2b08      	cmp	r3, #8
 801c772:	d10b      	bne.n	801c78c <_printf_i+0x14c>
 801c774:	6823      	ldr	r3, [r4, #0]
 801c776:	07de      	lsls	r6, r3, #31
 801c778:	d508      	bpl.n	801c78c <_printf_i+0x14c>
 801c77a:	6923      	ldr	r3, [r4, #16]
 801c77c:	6861      	ldr	r1, [r4, #4]
 801c77e:	4299      	cmp	r1, r3
 801c780:	bfde      	ittt	le
 801c782:	2330      	movle	r3, #48	; 0x30
 801c784:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c788:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c78c:	1b52      	subs	r2, r2, r5
 801c78e:	6122      	str	r2, [r4, #16]
 801c790:	f8cd a000 	str.w	sl, [sp]
 801c794:	464b      	mov	r3, r9
 801c796:	aa03      	add	r2, sp, #12
 801c798:	4621      	mov	r1, r4
 801c79a:	4640      	mov	r0, r8
 801c79c:	f7ff fee2 	bl	801c564 <_printf_common>
 801c7a0:	3001      	adds	r0, #1
 801c7a2:	d14c      	bne.n	801c83e <_printf_i+0x1fe>
 801c7a4:	f04f 30ff 	mov.w	r0, #4294967295
 801c7a8:	b004      	add	sp, #16
 801c7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c7ae:	4835      	ldr	r0, [pc, #212]	; (801c884 <_printf_i+0x244>)
 801c7b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801c7b4:	6829      	ldr	r1, [r5, #0]
 801c7b6:	6823      	ldr	r3, [r4, #0]
 801c7b8:	f851 6b04 	ldr.w	r6, [r1], #4
 801c7bc:	6029      	str	r1, [r5, #0]
 801c7be:	061d      	lsls	r5, r3, #24
 801c7c0:	d514      	bpl.n	801c7ec <_printf_i+0x1ac>
 801c7c2:	07df      	lsls	r7, r3, #31
 801c7c4:	bf44      	itt	mi
 801c7c6:	f043 0320 	orrmi.w	r3, r3, #32
 801c7ca:	6023      	strmi	r3, [r4, #0]
 801c7cc:	b91e      	cbnz	r6, 801c7d6 <_printf_i+0x196>
 801c7ce:	6823      	ldr	r3, [r4, #0]
 801c7d0:	f023 0320 	bic.w	r3, r3, #32
 801c7d4:	6023      	str	r3, [r4, #0]
 801c7d6:	2310      	movs	r3, #16
 801c7d8:	e7b0      	b.n	801c73c <_printf_i+0xfc>
 801c7da:	6823      	ldr	r3, [r4, #0]
 801c7dc:	f043 0320 	orr.w	r3, r3, #32
 801c7e0:	6023      	str	r3, [r4, #0]
 801c7e2:	2378      	movs	r3, #120	; 0x78
 801c7e4:	4828      	ldr	r0, [pc, #160]	; (801c888 <_printf_i+0x248>)
 801c7e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c7ea:	e7e3      	b.n	801c7b4 <_printf_i+0x174>
 801c7ec:	0659      	lsls	r1, r3, #25
 801c7ee:	bf48      	it	mi
 801c7f0:	b2b6      	uxthmi	r6, r6
 801c7f2:	e7e6      	b.n	801c7c2 <_printf_i+0x182>
 801c7f4:	4615      	mov	r5, r2
 801c7f6:	e7bb      	b.n	801c770 <_printf_i+0x130>
 801c7f8:	682b      	ldr	r3, [r5, #0]
 801c7fa:	6826      	ldr	r6, [r4, #0]
 801c7fc:	6961      	ldr	r1, [r4, #20]
 801c7fe:	1d18      	adds	r0, r3, #4
 801c800:	6028      	str	r0, [r5, #0]
 801c802:	0635      	lsls	r5, r6, #24
 801c804:	681b      	ldr	r3, [r3, #0]
 801c806:	d501      	bpl.n	801c80c <_printf_i+0x1cc>
 801c808:	6019      	str	r1, [r3, #0]
 801c80a:	e002      	b.n	801c812 <_printf_i+0x1d2>
 801c80c:	0670      	lsls	r0, r6, #25
 801c80e:	d5fb      	bpl.n	801c808 <_printf_i+0x1c8>
 801c810:	8019      	strh	r1, [r3, #0]
 801c812:	2300      	movs	r3, #0
 801c814:	6123      	str	r3, [r4, #16]
 801c816:	4615      	mov	r5, r2
 801c818:	e7ba      	b.n	801c790 <_printf_i+0x150>
 801c81a:	682b      	ldr	r3, [r5, #0]
 801c81c:	1d1a      	adds	r2, r3, #4
 801c81e:	602a      	str	r2, [r5, #0]
 801c820:	681d      	ldr	r5, [r3, #0]
 801c822:	6862      	ldr	r2, [r4, #4]
 801c824:	2100      	movs	r1, #0
 801c826:	4628      	mov	r0, r5
 801c828:	f7e3 fcd2 	bl	80001d0 <memchr>
 801c82c:	b108      	cbz	r0, 801c832 <_printf_i+0x1f2>
 801c82e:	1b40      	subs	r0, r0, r5
 801c830:	6060      	str	r0, [r4, #4]
 801c832:	6863      	ldr	r3, [r4, #4]
 801c834:	6123      	str	r3, [r4, #16]
 801c836:	2300      	movs	r3, #0
 801c838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c83c:	e7a8      	b.n	801c790 <_printf_i+0x150>
 801c83e:	6923      	ldr	r3, [r4, #16]
 801c840:	462a      	mov	r2, r5
 801c842:	4649      	mov	r1, r9
 801c844:	4640      	mov	r0, r8
 801c846:	47d0      	blx	sl
 801c848:	3001      	adds	r0, #1
 801c84a:	d0ab      	beq.n	801c7a4 <_printf_i+0x164>
 801c84c:	6823      	ldr	r3, [r4, #0]
 801c84e:	079b      	lsls	r3, r3, #30
 801c850:	d413      	bmi.n	801c87a <_printf_i+0x23a>
 801c852:	68e0      	ldr	r0, [r4, #12]
 801c854:	9b03      	ldr	r3, [sp, #12]
 801c856:	4298      	cmp	r0, r3
 801c858:	bfb8      	it	lt
 801c85a:	4618      	movlt	r0, r3
 801c85c:	e7a4      	b.n	801c7a8 <_printf_i+0x168>
 801c85e:	2301      	movs	r3, #1
 801c860:	4632      	mov	r2, r6
 801c862:	4649      	mov	r1, r9
 801c864:	4640      	mov	r0, r8
 801c866:	47d0      	blx	sl
 801c868:	3001      	adds	r0, #1
 801c86a:	d09b      	beq.n	801c7a4 <_printf_i+0x164>
 801c86c:	3501      	adds	r5, #1
 801c86e:	68e3      	ldr	r3, [r4, #12]
 801c870:	9903      	ldr	r1, [sp, #12]
 801c872:	1a5b      	subs	r3, r3, r1
 801c874:	42ab      	cmp	r3, r5
 801c876:	dcf2      	bgt.n	801c85e <_printf_i+0x21e>
 801c878:	e7eb      	b.n	801c852 <_printf_i+0x212>
 801c87a:	2500      	movs	r5, #0
 801c87c:	f104 0619 	add.w	r6, r4, #25
 801c880:	e7f5      	b.n	801c86e <_printf_i+0x22e>
 801c882:	bf00      	nop
 801c884:	080316d2 	.word	0x080316d2
 801c888:	080316e3 	.word	0x080316e3

0801c88c <__swbuf_r>:
 801c88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c88e:	460e      	mov	r6, r1
 801c890:	4614      	mov	r4, r2
 801c892:	4605      	mov	r5, r0
 801c894:	b118      	cbz	r0, 801c89e <__swbuf_r+0x12>
 801c896:	6983      	ldr	r3, [r0, #24]
 801c898:	b90b      	cbnz	r3, 801c89e <__swbuf_r+0x12>
 801c89a:	f000 f9d1 	bl	801cc40 <__sinit>
 801c89e:	4b21      	ldr	r3, [pc, #132]	; (801c924 <__swbuf_r+0x98>)
 801c8a0:	429c      	cmp	r4, r3
 801c8a2:	d12b      	bne.n	801c8fc <__swbuf_r+0x70>
 801c8a4:	686c      	ldr	r4, [r5, #4]
 801c8a6:	69a3      	ldr	r3, [r4, #24]
 801c8a8:	60a3      	str	r3, [r4, #8]
 801c8aa:	89a3      	ldrh	r3, [r4, #12]
 801c8ac:	071a      	lsls	r2, r3, #28
 801c8ae:	d52f      	bpl.n	801c910 <__swbuf_r+0x84>
 801c8b0:	6923      	ldr	r3, [r4, #16]
 801c8b2:	b36b      	cbz	r3, 801c910 <__swbuf_r+0x84>
 801c8b4:	6923      	ldr	r3, [r4, #16]
 801c8b6:	6820      	ldr	r0, [r4, #0]
 801c8b8:	1ac0      	subs	r0, r0, r3
 801c8ba:	6963      	ldr	r3, [r4, #20]
 801c8bc:	b2f6      	uxtb	r6, r6
 801c8be:	4283      	cmp	r3, r0
 801c8c0:	4637      	mov	r7, r6
 801c8c2:	dc04      	bgt.n	801c8ce <__swbuf_r+0x42>
 801c8c4:	4621      	mov	r1, r4
 801c8c6:	4628      	mov	r0, r5
 801c8c8:	f000 f926 	bl	801cb18 <_fflush_r>
 801c8cc:	bb30      	cbnz	r0, 801c91c <__swbuf_r+0x90>
 801c8ce:	68a3      	ldr	r3, [r4, #8]
 801c8d0:	3b01      	subs	r3, #1
 801c8d2:	60a3      	str	r3, [r4, #8]
 801c8d4:	6823      	ldr	r3, [r4, #0]
 801c8d6:	1c5a      	adds	r2, r3, #1
 801c8d8:	6022      	str	r2, [r4, #0]
 801c8da:	701e      	strb	r6, [r3, #0]
 801c8dc:	6963      	ldr	r3, [r4, #20]
 801c8de:	3001      	adds	r0, #1
 801c8e0:	4283      	cmp	r3, r0
 801c8e2:	d004      	beq.n	801c8ee <__swbuf_r+0x62>
 801c8e4:	89a3      	ldrh	r3, [r4, #12]
 801c8e6:	07db      	lsls	r3, r3, #31
 801c8e8:	d506      	bpl.n	801c8f8 <__swbuf_r+0x6c>
 801c8ea:	2e0a      	cmp	r6, #10
 801c8ec:	d104      	bne.n	801c8f8 <__swbuf_r+0x6c>
 801c8ee:	4621      	mov	r1, r4
 801c8f0:	4628      	mov	r0, r5
 801c8f2:	f000 f911 	bl	801cb18 <_fflush_r>
 801c8f6:	b988      	cbnz	r0, 801c91c <__swbuf_r+0x90>
 801c8f8:	4638      	mov	r0, r7
 801c8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c8fc:	4b0a      	ldr	r3, [pc, #40]	; (801c928 <__swbuf_r+0x9c>)
 801c8fe:	429c      	cmp	r4, r3
 801c900:	d101      	bne.n	801c906 <__swbuf_r+0x7a>
 801c902:	68ac      	ldr	r4, [r5, #8]
 801c904:	e7cf      	b.n	801c8a6 <__swbuf_r+0x1a>
 801c906:	4b09      	ldr	r3, [pc, #36]	; (801c92c <__swbuf_r+0xa0>)
 801c908:	429c      	cmp	r4, r3
 801c90a:	bf08      	it	eq
 801c90c:	68ec      	ldreq	r4, [r5, #12]
 801c90e:	e7ca      	b.n	801c8a6 <__swbuf_r+0x1a>
 801c910:	4621      	mov	r1, r4
 801c912:	4628      	mov	r0, r5
 801c914:	f000 f80c 	bl	801c930 <__swsetup_r>
 801c918:	2800      	cmp	r0, #0
 801c91a:	d0cb      	beq.n	801c8b4 <__swbuf_r+0x28>
 801c91c:	f04f 37ff 	mov.w	r7, #4294967295
 801c920:	e7ea      	b.n	801c8f8 <__swbuf_r+0x6c>
 801c922:	bf00      	nop
 801c924:	08031714 	.word	0x08031714
 801c928:	08031734 	.word	0x08031734
 801c92c:	080316f4 	.word	0x080316f4

0801c930 <__swsetup_r>:
 801c930:	4b32      	ldr	r3, [pc, #200]	; (801c9fc <__swsetup_r+0xcc>)
 801c932:	b570      	push	{r4, r5, r6, lr}
 801c934:	681d      	ldr	r5, [r3, #0]
 801c936:	4606      	mov	r6, r0
 801c938:	460c      	mov	r4, r1
 801c93a:	b125      	cbz	r5, 801c946 <__swsetup_r+0x16>
 801c93c:	69ab      	ldr	r3, [r5, #24]
 801c93e:	b913      	cbnz	r3, 801c946 <__swsetup_r+0x16>
 801c940:	4628      	mov	r0, r5
 801c942:	f000 f97d 	bl	801cc40 <__sinit>
 801c946:	4b2e      	ldr	r3, [pc, #184]	; (801ca00 <__swsetup_r+0xd0>)
 801c948:	429c      	cmp	r4, r3
 801c94a:	d10f      	bne.n	801c96c <__swsetup_r+0x3c>
 801c94c:	686c      	ldr	r4, [r5, #4]
 801c94e:	89a3      	ldrh	r3, [r4, #12]
 801c950:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c954:	0719      	lsls	r1, r3, #28
 801c956:	d42c      	bmi.n	801c9b2 <__swsetup_r+0x82>
 801c958:	06dd      	lsls	r5, r3, #27
 801c95a:	d411      	bmi.n	801c980 <__swsetup_r+0x50>
 801c95c:	2309      	movs	r3, #9
 801c95e:	6033      	str	r3, [r6, #0]
 801c960:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c964:	81a3      	strh	r3, [r4, #12]
 801c966:	f04f 30ff 	mov.w	r0, #4294967295
 801c96a:	e03e      	b.n	801c9ea <__swsetup_r+0xba>
 801c96c:	4b25      	ldr	r3, [pc, #148]	; (801ca04 <__swsetup_r+0xd4>)
 801c96e:	429c      	cmp	r4, r3
 801c970:	d101      	bne.n	801c976 <__swsetup_r+0x46>
 801c972:	68ac      	ldr	r4, [r5, #8]
 801c974:	e7eb      	b.n	801c94e <__swsetup_r+0x1e>
 801c976:	4b24      	ldr	r3, [pc, #144]	; (801ca08 <__swsetup_r+0xd8>)
 801c978:	429c      	cmp	r4, r3
 801c97a:	bf08      	it	eq
 801c97c:	68ec      	ldreq	r4, [r5, #12]
 801c97e:	e7e6      	b.n	801c94e <__swsetup_r+0x1e>
 801c980:	0758      	lsls	r0, r3, #29
 801c982:	d512      	bpl.n	801c9aa <__swsetup_r+0x7a>
 801c984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c986:	b141      	cbz	r1, 801c99a <__swsetup_r+0x6a>
 801c988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c98c:	4299      	cmp	r1, r3
 801c98e:	d002      	beq.n	801c996 <__swsetup_r+0x66>
 801c990:	4630      	mov	r0, r6
 801c992:	f7fd fc57 	bl	801a244 <_free_r>
 801c996:	2300      	movs	r3, #0
 801c998:	6363      	str	r3, [r4, #52]	; 0x34
 801c99a:	89a3      	ldrh	r3, [r4, #12]
 801c99c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c9a0:	81a3      	strh	r3, [r4, #12]
 801c9a2:	2300      	movs	r3, #0
 801c9a4:	6063      	str	r3, [r4, #4]
 801c9a6:	6923      	ldr	r3, [r4, #16]
 801c9a8:	6023      	str	r3, [r4, #0]
 801c9aa:	89a3      	ldrh	r3, [r4, #12]
 801c9ac:	f043 0308 	orr.w	r3, r3, #8
 801c9b0:	81a3      	strh	r3, [r4, #12]
 801c9b2:	6923      	ldr	r3, [r4, #16]
 801c9b4:	b94b      	cbnz	r3, 801c9ca <__swsetup_r+0x9a>
 801c9b6:	89a3      	ldrh	r3, [r4, #12]
 801c9b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c9bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c9c0:	d003      	beq.n	801c9ca <__swsetup_r+0x9a>
 801c9c2:	4621      	mov	r1, r4
 801c9c4:	4630      	mov	r0, r6
 801c9c6:	f000 f9fd 	bl	801cdc4 <__smakebuf_r>
 801c9ca:	89a0      	ldrh	r0, [r4, #12]
 801c9cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c9d0:	f010 0301 	ands.w	r3, r0, #1
 801c9d4:	d00a      	beq.n	801c9ec <__swsetup_r+0xbc>
 801c9d6:	2300      	movs	r3, #0
 801c9d8:	60a3      	str	r3, [r4, #8]
 801c9da:	6963      	ldr	r3, [r4, #20]
 801c9dc:	425b      	negs	r3, r3
 801c9de:	61a3      	str	r3, [r4, #24]
 801c9e0:	6923      	ldr	r3, [r4, #16]
 801c9e2:	b943      	cbnz	r3, 801c9f6 <__swsetup_r+0xc6>
 801c9e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c9e8:	d1ba      	bne.n	801c960 <__swsetup_r+0x30>
 801c9ea:	bd70      	pop	{r4, r5, r6, pc}
 801c9ec:	0781      	lsls	r1, r0, #30
 801c9ee:	bf58      	it	pl
 801c9f0:	6963      	ldrpl	r3, [r4, #20]
 801c9f2:	60a3      	str	r3, [r4, #8]
 801c9f4:	e7f4      	b.n	801c9e0 <__swsetup_r+0xb0>
 801c9f6:	2000      	movs	r0, #0
 801c9f8:	e7f7      	b.n	801c9ea <__swsetup_r+0xba>
 801c9fa:	bf00      	nop
 801c9fc:	20000148 	.word	0x20000148
 801ca00:	08031714 	.word	0x08031714
 801ca04:	08031734 	.word	0x08031734
 801ca08:	080316f4 	.word	0x080316f4

0801ca0c <__sflush_r>:
 801ca0c:	898a      	ldrh	r2, [r1, #12]
 801ca0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca12:	4605      	mov	r5, r0
 801ca14:	0710      	lsls	r0, r2, #28
 801ca16:	460c      	mov	r4, r1
 801ca18:	d458      	bmi.n	801cacc <__sflush_r+0xc0>
 801ca1a:	684b      	ldr	r3, [r1, #4]
 801ca1c:	2b00      	cmp	r3, #0
 801ca1e:	dc05      	bgt.n	801ca2c <__sflush_r+0x20>
 801ca20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	dc02      	bgt.n	801ca2c <__sflush_r+0x20>
 801ca26:	2000      	movs	r0, #0
 801ca28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ca2e:	2e00      	cmp	r6, #0
 801ca30:	d0f9      	beq.n	801ca26 <__sflush_r+0x1a>
 801ca32:	2300      	movs	r3, #0
 801ca34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ca38:	682f      	ldr	r7, [r5, #0]
 801ca3a:	602b      	str	r3, [r5, #0]
 801ca3c:	d032      	beq.n	801caa4 <__sflush_r+0x98>
 801ca3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ca40:	89a3      	ldrh	r3, [r4, #12]
 801ca42:	075a      	lsls	r2, r3, #29
 801ca44:	d505      	bpl.n	801ca52 <__sflush_r+0x46>
 801ca46:	6863      	ldr	r3, [r4, #4]
 801ca48:	1ac0      	subs	r0, r0, r3
 801ca4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ca4c:	b10b      	cbz	r3, 801ca52 <__sflush_r+0x46>
 801ca4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ca50:	1ac0      	subs	r0, r0, r3
 801ca52:	2300      	movs	r3, #0
 801ca54:	4602      	mov	r2, r0
 801ca56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ca58:	6a21      	ldr	r1, [r4, #32]
 801ca5a:	4628      	mov	r0, r5
 801ca5c:	47b0      	blx	r6
 801ca5e:	1c43      	adds	r3, r0, #1
 801ca60:	89a3      	ldrh	r3, [r4, #12]
 801ca62:	d106      	bne.n	801ca72 <__sflush_r+0x66>
 801ca64:	6829      	ldr	r1, [r5, #0]
 801ca66:	291d      	cmp	r1, #29
 801ca68:	d82c      	bhi.n	801cac4 <__sflush_r+0xb8>
 801ca6a:	4a2a      	ldr	r2, [pc, #168]	; (801cb14 <__sflush_r+0x108>)
 801ca6c:	40ca      	lsrs	r2, r1
 801ca6e:	07d6      	lsls	r6, r2, #31
 801ca70:	d528      	bpl.n	801cac4 <__sflush_r+0xb8>
 801ca72:	2200      	movs	r2, #0
 801ca74:	6062      	str	r2, [r4, #4]
 801ca76:	04d9      	lsls	r1, r3, #19
 801ca78:	6922      	ldr	r2, [r4, #16]
 801ca7a:	6022      	str	r2, [r4, #0]
 801ca7c:	d504      	bpl.n	801ca88 <__sflush_r+0x7c>
 801ca7e:	1c42      	adds	r2, r0, #1
 801ca80:	d101      	bne.n	801ca86 <__sflush_r+0x7a>
 801ca82:	682b      	ldr	r3, [r5, #0]
 801ca84:	b903      	cbnz	r3, 801ca88 <__sflush_r+0x7c>
 801ca86:	6560      	str	r0, [r4, #84]	; 0x54
 801ca88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ca8a:	602f      	str	r7, [r5, #0]
 801ca8c:	2900      	cmp	r1, #0
 801ca8e:	d0ca      	beq.n	801ca26 <__sflush_r+0x1a>
 801ca90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ca94:	4299      	cmp	r1, r3
 801ca96:	d002      	beq.n	801ca9e <__sflush_r+0x92>
 801ca98:	4628      	mov	r0, r5
 801ca9a:	f7fd fbd3 	bl	801a244 <_free_r>
 801ca9e:	2000      	movs	r0, #0
 801caa0:	6360      	str	r0, [r4, #52]	; 0x34
 801caa2:	e7c1      	b.n	801ca28 <__sflush_r+0x1c>
 801caa4:	6a21      	ldr	r1, [r4, #32]
 801caa6:	2301      	movs	r3, #1
 801caa8:	4628      	mov	r0, r5
 801caaa:	47b0      	blx	r6
 801caac:	1c41      	adds	r1, r0, #1
 801caae:	d1c7      	bne.n	801ca40 <__sflush_r+0x34>
 801cab0:	682b      	ldr	r3, [r5, #0]
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	d0c4      	beq.n	801ca40 <__sflush_r+0x34>
 801cab6:	2b1d      	cmp	r3, #29
 801cab8:	d001      	beq.n	801cabe <__sflush_r+0xb2>
 801caba:	2b16      	cmp	r3, #22
 801cabc:	d101      	bne.n	801cac2 <__sflush_r+0xb6>
 801cabe:	602f      	str	r7, [r5, #0]
 801cac0:	e7b1      	b.n	801ca26 <__sflush_r+0x1a>
 801cac2:	89a3      	ldrh	r3, [r4, #12]
 801cac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cac8:	81a3      	strh	r3, [r4, #12]
 801caca:	e7ad      	b.n	801ca28 <__sflush_r+0x1c>
 801cacc:	690f      	ldr	r7, [r1, #16]
 801cace:	2f00      	cmp	r7, #0
 801cad0:	d0a9      	beq.n	801ca26 <__sflush_r+0x1a>
 801cad2:	0793      	lsls	r3, r2, #30
 801cad4:	680e      	ldr	r6, [r1, #0]
 801cad6:	bf08      	it	eq
 801cad8:	694b      	ldreq	r3, [r1, #20]
 801cada:	600f      	str	r7, [r1, #0]
 801cadc:	bf18      	it	ne
 801cade:	2300      	movne	r3, #0
 801cae0:	eba6 0807 	sub.w	r8, r6, r7
 801cae4:	608b      	str	r3, [r1, #8]
 801cae6:	f1b8 0f00 	cmp.w	r8, #0
 801caea:	dd9c      	ble.n	801ca26 <__sflush_r+0x1a>
 801caec:	6a21      	ldr	r1, [r4, #32]
 801caee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801caf0:	4643      	mov	r3, r8
 801caf2:	463a      	mov	r2, r7
 801caf4:	4628      	mov	r0, r5
 801caf6:	47b0      	blx	r6
 801caf8:	2800      	cmp	r0, #0
 801cafa:	dc06      	bgt.n	801cb0a <__sflush_r+0xfe>
 801cafc:	89a3      	ldrh	r3, [r4, #12]
 801cafe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cb02:	81a3      	strh	r3, [r4, #12]
 801cb04:	f04f 30ff 	mov.w	r0, #4294967295
 801cb08:	e78e      	b.n	801ca28 <__sflush_r+0x1c>
 801cb0a:	4407      	add	r7, r0
 801cb0c:	eba8 0800 	sub.w	r8, r8, r0
 801cb10:	e7e9      	b.n	801cae6 <__sflush_r+0xda>
 801cb12:	bf00      	nop
 801cb14:	20400001 	.word	0x20400001

0801cb18 <_fflush_r>:
 801cb18:	b538      	push	{r3, r4, r5, lr}
 801cb1a:	690b      	ldr	r3, [r1, #16]
 801cb1c:	4605      	mov	r5, r0
 801cb1e:	460c      	mov	r4, r1
 801cb20:	b913      	cbnz	r3, 801cb28 <_fflush_r+0x10>
 801cb22:	2500      	movs	r5, #0
 801cb24:	4628      	mov	r0, r5
 801cb26:	bd38      	pop	{r3, r4, r5, pc}
 801cb28:	b118      	cbz	r0, 801cb32 <_fflush_r+0x1a>
 801cb2a:	6983      	ldr	r3, [r0, #24]
 801cb2c:	b90b      	cbnz	r3, 801cb32 <_fflush_r+0x1a>
 801cb2e:	f000 f887 	bl	801cc40 <__sinit>
 801cb32:	4b14      	ldr	r3, [pc, #80]	; (801cb84 <_fflush_r+0x6c>)
 801cb34:	429c      	cmp	r4, r3
 801cb36:	d11b      	bne.n	801cb70 <_fflush_r+0x58>
 801cb38:	686c      	ldr	r4, [r5, #4]
 801cb3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cb3e:	2b00      	cmp	r3, #0
 801cb40:	d0ef      	beq.n	801cb22 <_fflush_r+0xa>
 801cb42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cb44:	07d0      	lsls	r0, r2, #31
 801cb46:	d404      	bmi.n	801cb52 <_fflush_r+0x3a>
 801cb48:	0599      	lsls	r1, r3, #22
 801cb4a:	d402      	bmi.n	801cb52 <_fflush_r+0x3a>
 801cb4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cb4e:	f7ff fbae 	bl	801c2ae <__retarget_lock_acquire_recursive>
 801cb52:	4628      	mov	r0, r5
 801cb54:	4621      	mov	r1, r4
 801cb56:	f7ff ff59 	bl	801ca0c <__sflush_r>
 801cb5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cb5c:	07da      	lsls	r2, r3, #31
 801cb5e:	4605      	mov	r5, r0
 801cb60:	d4e0      	bmi.n	801cb24 <_fflush_r+0xc>
 801cb62:	89a3      	ldrh	r3, [r4, #12]
 801cb64:	059b      	lsls	r3, r3, #22
 801cb66:	d4dd      	bmi.n	801cb24 <_fflush_r+0xc>
 801cb68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cb6a:	f7ff fba1 	bl	801c2b0 <__retarget_lock_release_recursive>
 801cb6e:	e7d9      	b.n	801cb24 <_fflush_r+0xc>
 801cb70:	4b05      	ldr	r3, [pc, #20]	; (801cb88 <_fflush_r+0x70>)
 801cb72:	429c      	cmp	r4, r3
 801cb74:	d101      	bne.n	801cb7a <_fflush_r+0x62>
 801cb76:	68ac      	ldr	r4, [r5, #8]
 801cb78:	e7df      	b.n	801cb3a <_fflush_r+0x22>
 801cb7a:	4b04      	ldr	r3, [pc, #16]	; (801cb8c <_fflush_r+0x74>)
 801cb7c:	429c      	cmp	r4, r3
 801cb7e:	bf08      	it	eq
 801cb80:	68ec      	ldreq	r4, [r5, #12]
 801cb82:	e7da      	b.n	801cb3a <_fflush_r+0x22>
 801cb84:	08031714 	.word	0x08031714
 801cb88:	08031734 	.word	0x08031734
 801cb8c:	080316f4 	.word	0x080316f4

0801cb90 <std>:
 801cb90:	2300      	movs	r3, #0
 801cb92:	b510      	push	{r4, lr}
 801cb94:	4604      	mov	r4, r0
 801cb96:	e9c0 3300 	strd	r3, r3, [r0]
 801cb9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cb9e:	6083      	str	r3, [r0, #8]
 801cba0:	8181      	strh	r1, [r0, #12]
 801cba2:	6643      	str	r3, [r0, #100]	; 0x64
 801cba4:	81c2      	strh	r2, [r0, #14]
 801cba6:	6183      	str	r3, [r0, #24]
 801cba8:	4619      	mov	r1, r3
 801cbaa:	2208      	movs	r2, #8
 801cbac:	305c      	adds	r0, #92	; 0x5c
 801cbae:	f7fd fb41 	bl	801a234 <memset>
 801cbb2:	4b05      	ldr	r3, [pc, #20]	; (801cbc8 <std+0x38>)
 801cbb4:	6263      	str	r3, [r4, #36]	; 0x24
 801cbb6:	4b05      	ldr	r3, [pc, #20]	; (801cbcc <std+0x3c>)
 801cbb8:	62a3      	str	r3, [r4, #40]	; 0x28
 801cbba:	4b05      	ldr	r3, [pc, #20]	; (801cbd0 <std+0x40>)
 801cbbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cbbe:	4b05      	ldr	r3, [pc, #20]	; (801cbd4 <std+0x44>)
 801cbc0:	6224      	str	r4, [r4, #32]
 801cbc2:	6323      	str	r3, [r4, #48]	; 0x30
 801cbc4:	bd10      	pop	{r4, pc}
 801cbc6:	bf00      	nop
 801cbc8:	0801ce45 	.word	0x0801ce45
 801cbcc:	0801ce67 	.word	0x0801ce67
 801cbd0:	0801ce9f 	.word	0x0801ce9f
 801cbd4:	0801cec3 	.word	0x0801cec3

0801cbd8 <_cleanup_r>:
 801cbd8:	4901      	ldr	r1, [pc, #4]	; (801cbe0 <_cleanup_r+0x8>)
 801cbda:	f000 b8af 	b.w	801cd3c <_fwalk_reent>
 801cbde:	bf00      	nop
 801cbe0:	0801cb19 	.word	0x0801cb19

0801cbe4 <__sfmoreglue>:
 801cbe4:	b570      	push	{r4, r5, r6, lr}
 801cbe6:	2268      	movs	r2, #104	; 0x68
 801cbe8:	1e4d      	subs	r5, r1, #1
 801cbea:	4355      	muls	r5, r2
 801cbec:	460e      	mov	r6, r1
 801cbee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801cbf2:	f7fd fb93 	bl	801a31c <_malloc_r>
 801cbf6:	4604      	mov	r4, r0
 801cbf8:	b140      	cbz	r0, 801cc0c <__sfmoreglue+0x28>
 801cbfa:	2100      	movs	r1, #0
 801cbfc:	e9c0 1600 	strd	r1, r6, [r0]
 801cc00:	300c      	adds	r0, #12
 801cc02:	60a0      	str	r0, [r4, #8]
 801cc04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801cc08:	f7fd fb14 	bl	801a234 <memset>
 801cc0c:	4620      	mov	r0, r4
 801cc0e:	bd70      	pop	{r4, r5, r6, pc}

0801cc10 <__sfp_lock_acquire>:
 801cc10:	4801      	ldr	r0, [pc, #4]	; (801cc18 <__sfp_lock_acquire+0x8>)
 801cc12:	f7ff bb4c 	b.w	801c2ae <__retarget_lock_acquire_recursive>
 801cc16:	bf00      	nop
 801cc18:	2000e1e5 	.word	0x2000e1e5

0801cc1c <__sfp_lock_release>:
 801cc1c:	4801      	ldr	r0, [pc, #4]	; (801cc24 <__sfp_lock_release+0x8>)
 801cc1e:	f7ff bb47 	b.w	801c2b0 <__retarget_lock_release_recursive>
 801cc22:	bf00      	nop
 801cc24:	2000e1e5 	.word	0x2000e1e5

0801cc28 <__sinit_lock_acquire>:
 801cc28:	4801      	ldr	r0, [pc, #4]	; (801cc30 <__sinit_lock_acquire+0x8>)
 801cc2a:	f7ff bb40 	b.w	801c2ae <__retarget_lock_acquire_recursive>
 801cc2e:	bf00      	nop
 801cc30:	2000e1e6 	.word	0x2000e1e6

0801cc34 <__sinit_lock_release>:
 801cc34:	4801      	ldr	r0, [pc, #4]	; (801cc3c <__sinit_lock_release+0x8>)
 801cc36:	f7ff bb3b 	b.w	801c2b0 <__retarget_lock_release_recursive>
 801cc3a:	bf00      	nop
 801cc3c:	2000e1e6 	.word	0x2000e1e6

0801cc40 <__sinit>:
 801cc40:	b510      	push	{r4, lr}
 801cc42:	4604      	mov	r4, r0
 801cc44:	f7ff fff0 	bl	801cc28 <__sinit_lock_acquire>
 801cc48:	69a3      	ldr	r3, [r4, #24]
 801cc4a:	b11b      	cbz	r3, 801cc54 <__sinit+0x14>
 801cc4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc50:	f7ff bff0 	b.w	801cc34 <__sinit_lock_release>
 801cc54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801cc58:	6523      	str	r3, [r4, #80]	; 0x50
 801cc5a:	4b13      	ldr	r3, [pc, #76]	; (801cca8 <__sinit+0x68>)
 801cc5c:	4a13      	ldr	r2, [pc, #76]	; (801ccac <__sinit+0x6c>)
 801cc5e:	681b      	ldr	r3, [r3, #0]
 801cc60:	62a2      	str	r2, [r4, #40]	; 0x28
 801cc62:	42a3      	cmp	r3, r4
 801cc64:	bf04      	itt	eq
 801cc66:	2301      	moveq	r3, #1
 801cc68:	61a3      	streq	r3, [r4, #24]
 801cc6a:	4620      	mov	r0, r4
 801cc6c:	f000 f820 	bl	801ccb0 <__sfp>
 801cc70:	6060      	str	r0, [r4, #4]
 801cc72:	4620      	mov	r0, r4
 801cc74:	f000 f81c 	bl	801ccb0 <__sfp>
 801cc78:	60a0      	str	r0, [r4, #8]
 801cc7a:	4620      	mov	r0, r4
 801cc7c:	f000 f818 	bl	801ccb0 <__sfp>
 801cc80:	2200      	movs	r2, #0
 801cc82:	60e0      	str	r0, [r4, #12]
 801cc84:	2104      	movs	r1, #4
 801cc86:	6860      	ldr	r0, [r4, #4]
 801cc88:	f7ff ff82 	bl	801cb90 <std>
 801cc8c:	68a0      	ldr	r0, [r4, #8]
 801cc8e:	2201      	movs	r2, #1
 801cc90:	2109      	movs	r1, #9
 801cc92:	f7ff ff7d 	bl	801cb90 <std>
 801cc96:	68e0      	ldr	r0, [r4, #12]
 801cc98:	2202      	movs	r2, #2
 801cc9a:	2112      	movs	r1, #18
 801cc9c:	f7ff ff78 	bl	801cb90 <std>
 801cca0:	2301      	movs	r3, #1
 801cca2:	61a3      	str	r3, [r4, #24]
 801cca4:	e7d2      	b.n	801cc4c <__sinit+0xc>
 801cca6:	bf00      	nop
 801cca8:	08031328 	.word	0x08031328
 801ccac:	0801cbd9 	.word	0x0801cbd9

0801ccb0 <__sfp>:
 801ccb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ccb2:	4607      	mov	r7, r0
 801ccb4:	f7ff ffac 	bl	801cc10 <__sfp_lock_acquire>
 801ccb8:	4b1e      	ldr	r3, [pc, #120]	; (801cd34 <__sfp+0x84>)
 801ccba:	681e      	ldr	r6, [r3, #0]
 801ccbc:	69b3      	ldr	r3, [r6, #24]
 801ccbe:	b913      	cbnz	r3, 801ccc6 <__sfp+0x16>
 801ccc0:	4630      	mov	r0, r6
 801ccc2:	f7ff ffbd 	bl	801cc40 <__sinit>
 801ccc6:	3648      	adds	r6, #72	; 0x48
 801ccc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801cccc:	3b01      	subs	r3, #1
 801ccce:	d503      	bpl.n	801ccd8 <__sfp+0x28>
 801ccd0:	6833      	ldr	r3, [r6, #0]
 801ccd2:	b30b      	cbz	r3, 801cd18 <__sfp+0x68>
 801ccd4:	6836      	ldr	r6, [r6, #0]
 801ccd6:	e7f7      	b.n	801ccc8 <__sfp+0x18>
 801ccd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ccdc:	b9d5      	cbnz	r5, 801cd14 <__sfp+0x64>
 801ccde:	4b16      	ldr	r3, [pc, #88]	; (801cd38 <__sfp+0x88>)
 801cce0:	60e3      	str	r3, [r4, #12]
 801cce2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801cce6:	6665      	str	r5, [r4, #100]	; 0x64
 801cce8:	f7ff fae0 	bl	801c2ac <__retarget_lock_init_recursive>
 801ccec:	f7ff ff96 	bl	801cc1c <__sfp_lock_release>
 801ccf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ccf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ccf8:	6025      	str	r5, [r4, #0]
 801ccfa:	61a5      	str	r5, [r4, #24]
 801ccfc:	2208      	movs	r2, #8
 801ccfe:	4629      	mov	r1, r5
 801cd00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801cd04:	f7fd fa96 	bl	801a234 <memset>
 801cd08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801cd0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801cd10:	4620      	mov	r0, r4
 801cd12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd14:	3468      	adds	r4, #104	; 0x68
 801cd16:	e7d9      	b.n	801cccc <__sfp+0x1c>
 801cd18:	2104      	movs	r1, #4
 801cd1a:	4638      	mov	r0, r7
 801cd1c:	f7ff ff62 	bl	801cbe4 <__sfmoreglue>
 801cd20:	4604      	mov	r4, r0
 801cd22:	6030      	str	r0, [r6, #0]
 801cd24:	2800      	cmp	r0, #0
 801cd26:	d1d5      	bne.n	801ccd4 <__sfp+0x24>
 801cd28:	f7ff ff78 	bl	801cc1c <__sfp_lock_release>
 801cd2c:	230c      	movs	r3, #12
 801cd2e:	603b      	str	r3, [r7, #0]
 801cd30:	e7ee      	b.n	801cd10 <__sfp+0x60>
 801cd32:	bf00      	nop
 801cd34:	08031328 	.word	0x08031328
 801cd38:	ffff0001 	.word	0xffff0001

0801cd3c <_fwalk_reent>:
 801cd3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cd40:	4606      	mov	r6, r0
 801cd42:	4688      	mov	r8, r1
 801cd44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801cd48:	2700      	movs	r7, #0
 801cd4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cd4e:	f1b9 0901 	subs.w	r9, r9, #1
 801cd52:	d505      	bpl.n	801cd60 <_fwalk_reent+0x24>
 801cd54:	6824      	ldr	r4, [r4, #0]
 801cd56:	2c00      	cmp	r4, #0
 801cd58:	d1f7      	bne.n	801cd4a <_fwalk_reent+0xe>
 801cd5a:	4638      	mov	r0, r7
 801cd5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd60:	89ab      	ldrh	r3, [r5, #12]
 801cd62:	2b01      	cmp	r3, #1
 801cd64:	d907      	bls.n	801cd76 <_fwalk_reent+0x3a>
 801cd66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cd6a:	3301      	adds	r3, #1
 801cd6c:	d003      	beq.n	801cd76 <_fwalk_reent+0x3a>
 801cd6e:	4629      	mov	r1, r5
 801cd70:	4630      	mov	r0, r6
 801cd72:	47c0      	blx	r8
 801cd74:	4307      	orrs	r7, r0
 801cd76:	3568      	adds	r5, #104	; 0x68
 801cd78:	e7e9      	b.n	801cd4e <_fwalk_reent+0x12>

0801cd7a <__swhatbuf_r>:
 801cd7a:	b570      	push	{r4, r5, r6, lr}
 801cd7c:	460e      	mov	r6, r1
 801cd7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd82:	2900      	cmp	r1, #0
 801cd84:	b096      	sub	sp, #88	; 0x58
 801cd86:	4614      	mov	r4, r2
 801cd88:	461d      	mov	r5, r3
 801cd8a:	da08      	bge.n	801cd9e <__swhatbuf_r+0x24>
 801cd8c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801cd90:	2200      	movs	r2, #0
 801cd92:	602a      	str	r2, [r5, #0]
 801cd94:	061a      	lsls	r2, r3, #24
 801cd96:	d410      	bmi.n	801cdba <__swhatbuf_r+0x40>
 801cd98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cd9c:	e00e      	b.n	801cdbc <__swhatbuf_r+0x42>
 801cd9e:	466a      	mov	r2, sp
 801cda0:	f000 f8b6 	bl	801cf10 <_fstat_r>
 801cda4:	2800      	cmp	r0, #0
 801cda6:	dbf1      	blt.n	801cd8c <__swhatbuf_r+0x12>
 801cda8:	9a01      	ldr	r2, [sp, #4]
 801cdaa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801cdae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801cdb2:	425a      	negs	r2, r3
 801cdb4:	415a      	adcs	r2, r3
 801cdb6:	602a      	str	r2, [r5, #0]
 801cdb8:	e7ee      	b.n	801cd98 <__swhatbuf_r+0x1e>
 801cdba:	2340      	movs	r3, #64	; 0x40
 801cdbc:	2000      	movs	r0, #0
 801cdbe:	6023      	str	r3, [r4, #0]
 801cdc0:	b016      	add	sp, #88	; 0x58
 801cdc2:	bd70      	pop	{r4, r5, r6, pc}

0801cdc4 <__smakebuf_r>:
 801cdc4:	898b      	ldrh	r3, [r1, #12]
 801cdc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cdc8:	079d      	lsls	r5, r3, #30
 801cdca:	4606      	mov	r6, r0
 801cdcc:	460c      	mov	r4, r1
 801cdce:	d507      	bpl.n	801cde0 <__smakebuf_r+0x1c>
 801cdd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801cdd4:	6023      	str	r3, [r4, #0]
 801cdd6:	6123      	str	r3, [r4, #16]
 801cdd8:	2301      	movs	r3, #1
 801cdda:	6163      	str	r3, [r4, #20]
 801cddc:	b002      	add	sp, #8
 801cdde:	bd70      	pop	{r4, r5, r6, pc}
 801cde0:	ab01      	add	r3, sp, #4
 801cde2:	466a      	mov	r2, sp
 801cde4:	f7ff ffc9 	bl	801cd7a <__swhatbuf_r>
 801cde8:	9900      	ldr	r1, [sp, #0]
 801cdea:	4605      	mov	r5, r0
 801cdec:	4630      	mov	r0, r6
 801cdee:	f7fd fa95 	bl	801a31c <_malloc_r>
 801cdf2:	b948      	cbnz	r0, 801ce08 <__smakebuf_r+0x44>
 801cdf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cdf8:	059a      	lsls	r2, r3, #22
 801cdfa:	d4ef      	bmi.n	801cddc <__smakebuf_r+0x18>
 801cdfc:	f023 0303 	bic.w	r3, r3, #3
 801ce00:	f043 0302 	orr.w	r3, r3, #2
 801ce04:	81a3      	strh	r3, [r4, #12]
 801ce06:	e7e3      	b.n	801cdd0 <__smakebuf_r+0xc>
 801ce08:	4b0d      	ldr	r3, [pc, #52]	; (801ce40 <__smakebuf_r+0x7c>)
 801ce0a:	62b3      	str	r3, [r6, #40]	; 0x28
 801ce0c:	89a3      	ldrh	r3, [r4, #12]
 801ce0e:	6020      	str	r0, [r4, #0]
 801ce10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ce14:	81a3      	strh	r3, [r4, #12]
 801ce16:	9b00      	ldr	r3, [sp, #0]
 801ce18:	6163      	str	r3, [r4, #20]
 801ce1a:	9b01      	ldr	r3, [sp, #4]
 801ce1c:	6120      	str	r0, [r4, #16]
 801ce1e:	b15b      	cbz	r3, 801ce38 <__smakebuf_r+0x74>
 801ce20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ce24:	4630      	mov	r0, r6
 801ce26:	f000 f885 	bl	801cf34 <_isatty_r>
 801ce2a:	b128      	cbz	r0, 801ce38 <__smakebuf_r+0x74>
 801ce2c:	89a3      	ldrh	r3, [r4, #12]
 801ce2e:	f023 0303 	bic.w	r3, r3, #3
 801ce32:	f043 0301 	orr.w	r3, r3, #1
 801ce36:	81a3      	strh	r3, [r4, #12]
 801ce38:	89a0      	ldrh	r0, [r4, #12]
 801ce3a:	4305      	orrs	r5, r0
 801ce3c:	81a5      	strh	r5, [r4, #12]
 801ce3e:	e7cd      	b.n	801cddc <__smakebuf_r+0x18>
 801ce40:	0801cbd9 	.word	0x0801cbd9

0801ce44 <__sread>:
 801ce44:	b510      	push	{r4, lr}
 801ce46:	460c      	mov	r4, r1
 801ce48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce4c:	f000 f894 	bl	801cf78 <_read_r>
 801ce50:	2800      	cmp	r0, #0
 801ce52:	bfab      	itete	ge
 801ce54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ce56:	89a3      	ldrhlt	r3, [r4, #12]
 801ce58:	181b      	addge	r3, r3, r0
 801ce5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ce5e:	bfac      	ite	ge
 801ce60:	6563      	strge	r3, [r4, #84]	; 0x54
 801ce62:	81a3      	strhlt	r3, [r4, #12]
 801ce64:	bd10      	pop	{r4, pc}

0801ce66 <__swrite>:
 801ce66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce6a:	461f      	mov	r7, r3
 801ce6c:	898b      	ldrh	r3, [r1, #12]
 801ce6e:	05db      	lsls	r3, r3, #23
 801ce70:	4605      	mov	r5, r0
 801ce72:	460c      	mov	r4, r1
 801ce74:	4616      	mov	r6, r2
 801ce76:	d505      	bpl.n	801ce84 <__swrite+0x1e>
 801ce78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce7c:	2302      	movs	r3, #2
 801ce7e:	2200      	movs	r2, #0
 801ce80:	f000 f868 	bl	801cf54 <_lseek_r>
 801ce84:	89a3      	ldrh	r3, [r4, #12]
 801ce86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ce8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ce8e:	81a3      	strh	r3, [r4, #12]
 801ce90:	4632      	mov	r2, r6
 801ce92:	463b      	mov	r3, r7
 801ce94:	4628      	mov	r0, r5
 801ce96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ce9a:	f000 b817 	b.w	801cecc <_write_r>

0801ce9e <__sseek>:
 801ce9e:	b510      	push	{r4, lr}
 801cea0:	460c      	mov	r4, r1
 801cea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cea6:	f000 f855 	bl	801cf54 <_lseek_r>
 801ceaa:	1c43      	adds	r3, r0, #1
 801ceac:	89a3      	ldrh	r3, [r4, #12]
 801ceae:	bf15      	itete	ne
 801ceb0:	6560      	strne	r0, [r4, #84]	; 0x54
 801ceb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ceb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ceba:	81a3      	strheq	r3, [r4, #12]
 801cebc:	bf18      	it	ne
 801cebe:	81a3      	strhne	r3, [r4, #12]
 801cec0:	bd10      	pop	{r4, pc}

0801cec2 <__sclose>:
 801cec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cec6:	f000 b813 	b.w	801cef0 <_close_r>
	...

0801cecc <_write_r>:
 801cecc:	b538      	push	{r3, r4, r5, lr}
 801cece:	4d07      	ldr	r5, [pc, #28]	; (801ceec <_write_r+0x20>)
 801ced0:	4604      	mov	r4, r0
 801ced2:	4608      	mov	r0, r1
 801ced4:	4611      	mov	r1, r2
 801ced6:	2200      	movs	r2, #0
 801ced8:	602a      	str	r2, [r5, #0]
 801ceda:	461a      	mov	r2, r3
 801cedc:	f7e6 fe3b 	bl	8003b56 <_write>
 801cee0:	1c43      	adds	r3, r0, #1
 801cee2:	d102      	bne.n	801ceea <_write_r+0x1e>
 801cee4:	682b      	ldr	r3, [r5, #0]
 801cee6:	b103      	cbz	r3, 801ceea <_write_r+0x1e>
 801cee8:	6023      	str	r3, [r4, #0]
 801ceea:	bd38      	pop	{r3, r4, r5, pc}
 801ceec:	2000e1e0 	.word	0x2000e1e0

0801cef0 <_close_r>:
 801cef0:	b538      	push	{r3, r4, r5, lr}
 801cef2:	4d06      	ldr	r5, [pc, #24]	; (801cf0c <_close_r+0x1c>)
 801cef4:	2300      	movs	r3, #0
 801cef6:	4604      	mov	r4, r0
 801cef8:	4608      	mov	r0, r1
 801cefa:	602b      	str	r3, [r5, #0]
 801cefc:	f7e6 fe47 	bl	8003b8e <_close>
 801cf00:	1c43      	adds	r3, r0, #1
 801cf02:	d102      	bne.n	801cf0a <_close_r+0x1a>
 801cf04:	682b      	ldr	r3, [r5, #0]
 801cf06:	b103      	cbz	r3, 801cf0a <_close_r+0x1a>
 801cf08:	6023      	str	r3, [r4, #0]
 801cf0a:	bd38      	pop	{r3, r4, r5, pc}
 801cf0c:	2000e1e0 	.word	0x2000e1e0

0801cf10 <_fstat_r>:
 801cf10:	b538      	push	{r3, r4, r5, lr}
 801cf12:	4d07      	ldr	r5, [pc, #28]	; (801cf30 <_fstat_r+0x20>)
 801cf14:	2300      	movs	r3, #0
 801cf16:	4604      	mov	r4, r0
 801cf18:	4608      	mov	r0, r1
 801cf1a:	4611      	mov	r1, r2
 801cf1c:	602b      	str	r3, [r5, #0]
 801cf1e:	f7e6 fe42 	bl	8003ba6 <_fstat>
 801cf22:	1c43      	adds	r3, r0, #1
 801cf24:	d102      	bne.n	801cf2c <_fstat_r+0x1c>
 801cf26:	682b      	ldr	r3, [r5, #0]
 801cf28:	b103      	cbz	r3, 801cf2c <_fstat_r+0x1c>
 801cf2a:	6023      	str	r3, [r4, #0]
 801cf2c:	bd38      	pop	{r3, r4, r5, pc}
 801cf2e:	bf00      	nop
 801cf30:	2000e1e0 	.word	0x2000e1e0

0801cf34 <_isatty_r>:
 801cf34:	b538      	push	{r3, r4, r5, lr}
 801cf36:	4d06      	ldr	r5, [pc, #24]	; (801cf50 <_isatty_r+0x1c>)
 801cf38:	2300      	movs	r3, #0
 801cf3a:	4604      	mov	r4, r0
 801cf3c:	4608      	mov	r0, r1
 801cf3e:	602b      	str	r3, [r5, #0]
 801cf40:	f7e6 fe41 	bl	8003bc6 <_isatty>
 801cf44:	1c43      	adds	r3, r0, #1
 801cf46:	d102      	bne.n	801cf4e <_isatty_r+0x1a>
 801cf48:	682b      	ldr	r3, [r5, #0]
 801cf4a:	b103      	cbz	r3, 801cf4e <_isatty_r+0x1a>
 801cf4c:	6023      	str	r3, [r4, #0]
 801cf4e:	bd38      	pop	{r3, r4, r5, pc}
 801cf50:	2000e1e0 	.word	0x2000e1e0

0801cf54 <_lseek_r>:
 801cf54:	b538      	push	{r3, r4, r5, lr}
 801cf56:	4d07      	ldr	r5, [pc, #28]	; (801cf74 <_lseek_r+0x20>)
 801cf58:	4604      	mov	r4, r0
 801cf5a:	4608      	mov	r0, r1
 801cf5c:	4611      	mov	r1, r2
 801cf5e:	2200      	movs	r2, #0
 801cf60:	602a      	str	r2, [r5, #0]
 801cf62:	461a      	mov	r2, r3
 801cf64:	f7e6 fe3a 	bl	8003bdc <_lseek>
 801cf68:	1c43      	adds	r3, r0, #1
 801cf6a:	d102      	bne.n	801cf72 <_lseek_r+0x1e>
 801cf6c:	682b      	ldr	r3, [r5, #0]
 801cf6e:	b103      	cbz	r3, 801cf72 <_lseek_r+0x1e>
 801cf70:	6023      	str	r3, [r4, #0]
 801cf72:	bd38      	pop	{r3, r4, r5, pc}
 801cf74:	2000e1e0 	.word	0x2000e1e0

0801cf78 <_read_r>:
 801cf78:	b538      	push	{r3, r4, r5, lr}
 801cf7a:	4d07      	ldr	r5, [pc, #28]	; (801cf98 <_read_r+0x20>)
 801cf7c:	4604      	mov	r4, r0
 801cf7e:	4608      	mov	r0, r1
 801cf80:	4611      	mov	r1, r2
 801cf82:	2200      	movs	r2, #0
 801cf84:	602a      	str	r2, [r5, #0]
 801cf86:	461a      	mov	r2, r3
 801cf88:	f7e6 fdc8 	bl	8003b1c <_read>
 801cf8c:	1c43      	adds	r3, r0, #1
 801cf8e:	d102      	bne.n	801cf96 <_read_r+0x1e>
 801cf90:	682b      	ldr	r3, [r5, #0]
 801cf92:	b103      	cbz	r3, 801cf96 <_read_r+0x1e>
 801cf94:	6023      	str	r3, [r4, #0]
 801cf96:	bd38      	pop	{r3, r4, r5, pc}
 801cf98:	2000e1e0 	.word	0x2000e1e0

0801cf9c <_init>:
 801cf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf9e:	bf00      	nop
 801cfa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cfa2:	bc08      	pop	{r3}
 801cfa4:	469e      	mov	lr, r3
 801cfa6:	4770      	bx	lr

0801cfa8 <_fini>:
 801cfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfaa:	bf00      	nop
 801cfac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cfae:	bc08      	pop	{r3}
 801cfb0:	469e      	mov	lr, r3
 801cfb2:	4770      	bx	lr
